// Created and designed by error_noaccess, exclusive to the Wolven Workshop discord server and Github. 
// Not authorized to be distributed elsewhere, unless you ask me nicely.

function ACS_GetVersion() : float
{
	return 2.04;
}

statemachine abstract class W3ACSWatcher extends CEntity
{
	private var lastACSMovementDoubleTapName 																								: name;
	private var playerAttacker, playerVictim																								: CPlayer;
	private var movementAdjustor, victimMovementAdjustor, movementAdjustorNPC																: CMovementAdjustor; 
	private var ticket, victimTicket, ticketNPC 																							: SMovementAdjustmentRequestTicket; 
	private var actor, pActor, npcactor_ANIMATION_CANCEL																					: CActor; 
	private var npc_ANIMATION_CANCEL																										: CNewNPC; 
	private var targetDistance, dist, distJump, distVampSpecialDash, distClawWhirl, distArmorSpecialDash									: float; 
	private var animatedComponent, animatedComponent_NPC_ANIMATION_CANCEL, animatedComponentA, NPCanimatedComponent, bowAnimatedComponent	: CAnimatedComponent;
	private const var DOUBLE_TAP_WINDOW, DOUBLE_TAP_WINDOW_DODGE											 								: float;
	private var weapontype 																													: EPlayerWeapon;
	private var res 																														: bool;
	
	default DOUBLE_TAP_WINDOW 																												= 0.4;

	default DOUBLE_TAP_WINDOW_DODGE 																										= 0.2;

	//Fist Attack Vars
	private var claw_fist_attack_index_1																									: int;
	default claw_fist_attack_index_1 																										= -1;

	private var claw_fist_attack_index_2																									: int;
	default claw_fist_attack_index_2 																										= -1;

	private var claw_fist_attack_index_3																									: int;
	default claw_fist_attack_index_2 																										= -1;

	private var previous_claw_fist_attack_index_1																							: int;
	default previous_claw_fist_attack_index_1 																								= -1;

	private var previous_claw_fist_attack_index_2																							: int;
	default previous_claw_fist_attack_index_2 																								= -1;

	private var previous_claw_fist_attack_index_3																							: int;
	default previous_claw_fist_attack_index_3 																								= -1;

	private var combo_counter_claw_fist_light 																								: int;
	default combo_counter_claw_fist_light 																									= 0;

	private var heavy_fist_attack_index_1																									: int;
	default heavy_fist_attack_index_1 																										= -1;
	private var heavy_fist_attack_index_2																									: int;
	default heavy_fist_attack_index_2 																										= -1;
	private var heavy_fist_attack_index_3																									: int;
	default heavy_fist_attack_index_3 																										= -1;

	private var previous_heavy_fist_attack_index_1																							: int;
	default previous_heavy_fist_attack_index_1 																								= -1;
	private var previous_heavy_fist_attack_index_2																							: int;
	default previous_heavy_fist_attack_index_2 																								= -1;
	private var previous_heavy_fist_attack_index_3																							: int;
	default previous_heavy_fist_attack_index_3 																								= -1;

	private var combo_counter_claw_fist_heavy																								: int;
	default combo_counter_claw_fist_heavy 																									= 0;
	
	private var fist_attack_index_1																											: int;
	default fist_attack_index_1 																											= -1;														
	private var fist_attack_index_2																											: int;
	default fist_attack_index_2 																											= -1;
	private var fist_attack_index_3																											: int;
	default fist_attack_index_3 																											= -1;
															
	private var previous_fist_attack_index_1																								: int;
	default previous_fist_attack_index_1 																									= -1;
	private var previous_fist_attack_index_2																								: int;
	default previous_fist_attack_index_2 																									= -1;
	private var previous_fist_attack_index_3																								: int;
	default previous_fist_attack_index_3 																									= -1;

	private var combo_counter_fist_attack																									: int;
	default combo_counter_fist_attack 																										= 0;

	private var combo_counter_fist_attack_heavy																								: int;
	default combo_counter_fist_attack_heavy 																								= 0;
	
	//Guard Attack Vars
	private var ParrySkillCallTime																											: float;
	private var ParrySkillDoubleTap 																										: bool;

	private var GuardAttackCallTime																											: float;
	private var GuardAttackDoubleTap 																										: bool;
	
	private var kick_index_1																												: int;
	default kick_index_1 																													= -1;
	private var kick_index_2																												: int;
	default kick_index_2 																													= -1;
	private var previous_kick_index_1																										: int;
	default previous_kick_index_1 																											= -1;
	private var previous_kick_index_2																										: int;
	default previous_kick_index_2 																											= -1;

	private var combo_counter_kick																											: int;
	default combo_counter_kick 																												= 0;
	
	private var push_index_1																												: int;
	default push_index_1 																													= -1;
	private var push_index_2																												: int;
	default push_index_2 																													= -1;
	private var previous_push_index_1																										: int;
	default previous_push_index_1 																											= -1;
	private var previous_push_index_2																										: int;
	default previous_push_index_2 																											= -1;

	private var combo_counter_push																											: int;
	default combo_counter_push																												= 0;
	
	private var punch_index_1																												: int;
	default punch_index_1 																													= -1;
	private var punch_index_2																												: int;
	default punch_index_2 																													= -1;
	private var previous_punch_index_1																										: int;
	default previous_punch_index_1 																											= -1;
	private var previous_punch_index_2																										: int;
	default previous_punch_index_2 																											= -1;

	private var combo_counter_punch																											: int;
	default combo_counter_punch																												= 0;
	
	private var igni_counter_index_1																										: int;
	default igni_counter_index_1 																											= -1;
	private var igni_counter_index_2																										: int;
	default igni_counter_index_2 																											= -1;
	private var igni_counter_index_3																										: int;
	default igni_counter_index_3 																											= -1;
	private var previous_igni_counter_index_1																								: int;
	default previous_igni_counter_index_1 																									= -1;
	private var previous_igni_counter_index_2																								: int;
	default previous_igni_counter_index_2 																									= -1;
	private var previous_igni_counter_index_3																								: int;
	default previous_igni_counter_index_3 																									= -1;

	private var combo_counter_igni_counter																									: int;
	default combo_counter_igni_counter																										= 0;
	
	private var aard_counter_index_1																										: int;
	default aard_counter_index_1 																											= -1;
	private var aard_counter_index_2																										: int;
	default aard_counter_index_2 																											= -1;
	private var previous_aard_counter_index_1																								: int;
	default previous_aard_counter_index_1 																									= -1;
	private var previous_aard_counter_index_2																								: int;
	default previous_aard_counter_index_2 																									= -1;

	private var combo_counter_aard_counter																									: int;
	default combo_counter_aard_counter																										= 0;
	
	private var quen_counter_index_1																										: int;
	default quen_counter_index_1 																											= -1;
	private var quen_counter_index_2																										: int;
	default quen_counter_index_2 																											= -1;
	private var previous_quen_counter_index_1																								: int;
	default previous_quen_counter_index_1 																									= -1;
	private var previous_quen_counter_index_2																								: int;
	default previous_quen_counter_index_2 																									= -1;

	private var combo_counter_quen_counter																									: int;
	default combo_counter_quen_counter																										= 0;
	
	private var yrden_counter_index_1																										: int;
	default yrden_counter_index_1 																											= -1;
	private var yrden_counter_index_2																										: int;
	default yrden_counter_index_2 																											= -1;
	private var previous_yrden_counter_index_1																								: int;
	default previous_yrden_counter_index_1 																									= -1;
	private var previous_yrden_counter_index_2																								: int;
	default previous_yrden_counter_index_2 																									= -1;

	private var combo_counter_yrden_counter																									: int;
	default combo_counter_yrden_counter																										= 0;
	
	private var axii_counter_index_1																										: int;
	default axii_counter_index_1 																											= -1;
	private var axii_counter_index_2																										: int;
	default axii_counter_index_2 																											= -1;
	private var previous_axii_counter_index_1																								: int;
	default previous_axii_counter_index_1 																									= -1;
	private var previous_axii_counter_index_2																								: int;
	default previous_axii_counter_index_2 																									= -1;

	private var combo_counter_axii_counter																									: int;
	default combo_counter_axii_counter																										= 0;

	private var combo_counter_spear_counter																									: int;
	default combo_counter_spear_counter																										= 0;

	private var combo_counter_greg_counter																									: int;
	default combo_counter_greg_counter																										= 0;

	private var combo_counter_hammer_counter																								: int;
	default combo_counter_hammer_counter																									= 0;

	private var combo_counter_axe_counter																									: int;
	default combo_counter_axe_counter																										= 0;

	//Jump Attack Vars
	private var jump_attack_index_1 																										: int;
	default jump_attack_index_1 																											= -1;

	private var previous_jump_attack_index_1																								: int;
	default previous_jump_attack_index_1 																									= -1;

	//Claw Attack Vars
	private var vamp_sound_names																											: array< string >;

	private var heavy_claw_attack_index																										: int;
	private var previous_heavy_claw_attack_index																							: int;

	default heavy_claw_attack_index 																										= -1;
	default previous_heavy_claw_attack_index 																								= -1;

	private var combo_counter_heavy_claw_attack																								: int;
	default combo_counter_heavy_claw_attack																									= 0;
	
	private var claw_attack_index_1																											: int;
	default claw_attack_index_1 																											= -1;
	private var claw_attack_index_2																											: int;
	default claw_attack_index_2 																											= -1;
	private var claw_attack_index_3																											: int;
	default claw_attack_index_3 																											= -1;
	
	private var previous_claw_attack_index_1																								: int;
	default previous_claw_attack_index_1 																									= -1;
	private var previous_claw_attack_index_2																								: int;
	default previous_claw_attack_index_2 																									= -1;
	private var previous_claw_attack_index_3																								: int;
	default previous_claw_attack_index_3 																									= -1;

	private var combo_counter_claw_attack																									: int;
	default combo_counter_claw_attack																										= 0;
	
	private var claw_attack_alt_index_1																										: int;
	default claw_attack_alt_index_1 																										= -1;
	private var claw_attack_alt_index_2																										: int;
	default claw_attack_alt_index_2 																										= -1;
	private var claw_attack_alt_index_3																										: int;
	default claw_attack_alt_index_3 																										= -1;
	
	private var previous_claw_attack_alt_index_1																							: int;
	default previous_claw_attack_alt_index_1 																								= -1;
	private var previous_claw_attack_alt_index_2																							: int;
	default previous_claw_attack_alt_index_2 																								= -1;
	private var previous_claw_attack_alt_index_3																							: int;
	default previous_claw_attack_alt_index_3 																								= -1;

	private var combo_counter_claw_attack_alt																								: int;
	default combo_counter_claw_attack_alt																									= 0;
	
	private var attack_special_dash_index_1																									: int;
	default attack_special_dash_index_1 																									= -1;
	
	private var previous_attack_special_dash_index_1																						: int;
	default previous_attack_special_dash_index_1																							= -1;

	private var combo_counter_attack_special_dash																							: int;
	default combo_counter_attack_special_dash																								= 0;

	private var combo_counter_claw_heavy_attack																								: int;
	default combo_counter_eredin_heavy_attack																								= 0;

	private var combo_counter_claw_heavy_attack_alt																							: int;
	default combo_counter_eredin_heavy_attack_alt																							= 0;

	private var combo_counter_claw_light_attack																								: int;
	default combo_counter_eredin_light_attack																								= 0;

	private var combo_counter_claw_light_attack_alt																							: int;
	default combo_counter_eredin_light_attack_alt																							= 0;

	private var combo_counter_claw_special_attack																							: int;
	default combo_counter_eredin_special_attack																								= 0;

	private var combo_counter_claw_special_attack_alt																						: int;
	default combo_counter_eredin_special_attack_alt																							= 0;

	//Geralt Attack Vars

	private var geralt_light_attack_index_1																									: int;
	default geralt_light_attack_index_1 																									= -1;

	private var geralt_light_attack_index_3																									: int;
	default geralt_light_attack_index_3 																									= -1;

	private var geralt_heavy_attack_index_1																									: int;
	default geralt_heavy_attack_index_1 																									= -1;

	private var geralt_heavy_attack_index_3																									: int;
	default geralt_heavy_attack_index_3 																									= -1;

	private var geralt_special_attack_index_3																								: int;
	default geralt_special_attack_index_3 																									= -1;

	private var geralt_light_attack_forward_index_1																							: int;
	default geralt_light_attack_forward_index_1 																							= -1;

	private var geralt_light_attack_forward_index_3																							: int;
	default geralt_light_attack_forward_index_3 																							= -1;

	private var geralt_heavy_attack_forward_index_1																							: int;
	default geralt_heavy_attack_forward_index_1 																							= -1;

	private var geralt_heavy_attack_forward_index_3																							: int;
	default geralt_heavy_attack_forward_index_3 																							= -1;

	private var previous_geralt_light_attack_index_1																						: int;
	default previous_geralt_light_attack_index_1 																							= -1;

	private var previous_geralt_light_attack_index_3																						: int;
	default previous_geralt_light_attack_index_3 																							= -1;

	private var previous_geralt_heavy_attack_index_1																						: int;
	default previous_geralt_heavy_attack_index_1 																							= -1;

	private var previous_geralt_heavy_attack_index_3																						: int;
	default previous_geralt_heavy_attack_index_3 																							= -1;

	private var previous_geralt_light_attack_forward_index_1																				: int;
	default previous_geralt_light_attack_forward_index_1 																					= -1;

	private var previous_geralt_light_attack_forward_index_3																				: int;
	default previous_geralt_light_attack_forward_index_3 																					= -1;

	private var previous_geralt_heavy_attack_forward_index_1																				: int;
	default previous_geralt_heavy_attack_forward_index_1 																					= -1;

	private var previous_geralt_heavy_attack_forward_index_3																				: int;
	default previous_geralt_heavy_attack_forward_index_3 																					= -1;

	private var previous_geralt_special_attack_index_3																						: int;
	default previous_geralt_special_attack_index_3 																							= -1;

	private var combo_counter_geralt_light_attack 																							: int;
	default combo_counter_geralt_light_attack 																								= 0;

	private var combo_counter_geralt_light_attack_forward 																					: int;
	default combo_counter_geralt_light_attack_forward 																						= 0;

	private var combo_counter_geralt_heavy_attack 																							: int;
	default combo_counter_geralt_heavy_attack 																								= 0;

	private var combo_counter_geralt_heavy_attack_forward 																					: int;
	default combo_counter_geralt_heavy_attack_forward 																						= 0;

	private var combo_counter_geralt_special_attack 																						: int;
	default combo_counter_geralt_special_attack 																							= 0;

	//Bear School
	private var combo_counter_geralt_light_attack_bear																						: int;
	default combo_counter_geralt_light_attack_bear 																							= 0;

	private var combo_counter_geralt_light_attack_forward_bear 																				: int;
	default combo_counter_geralt_light_attack_forward_bear 																					= 0;

	private var combo_counter_geralt_heavy_attack_bear																						: int;
	default combo_counter_geralt_heavy_attack_bear 																							= 0;

	private var combo_counter_geralt_heavy_attack_forward_bear 																				: int;
	default combo_counter_geralt_heavy_attack_forward_bear 																					= 0;

	private var combo_counter_geralt_special_attack_bear 																					: int;
	default combo_counter_geralt_special_attack_bear 																						= 0;

	//Cat School
	private var combo_counter_geralt_light_attack_cat																						: int;
	default combo_counter_geralt_light_attack_cat 																							= 0;

	private var combo_counter_geralt_light_attack_forward_cat 																				: int;
	default combo_counter_geralt_light_attack_forward_cat 																					= 0;

	private var combo_counter_geralt_heavy_attack_cat																						: int;
	default combo_counter_geralt_heavy_attack_cat 																							= 0;

	private var combo_counter_geralt_heavy_attack_forward_cat 																				: int;
	default combo_counter_geralt_heavy_attack_forward_cat 																					= 0;

	private var combo_counter_geralt_special_attack_cat 																					: int;
	default combo_counter_geralt_special_attack_cat 																						= 0;

	//Griffin School
	private var combo_counter_geralt_light_attack_griffin 																					: int;
	default combo_counter_geralt_light_attack_griffin 																						= 0;

	private var combo_counter_geralt_light_attack_forward_griffin 																			: int;
	default combo_counter_geralt_light_attack_forward_griffin 																				= 0;

	private var combo_counter_geralt_heavy_attack_griffin 																					: int;
	default combo_counter_geralt_heavy_attack_griffin 																						= 0;

	private var combo_counter_geralt_heavy_attack_forward_griffin 																			: int;
	default combo_counter_geralt_heavy_attack_forward_griffin 																				= 0;

	private var combo_counter_geralt_special_attack_griffin 																				: int;
	default combo_counter_geralt_special_attack_griffin 																					= 0;

	//Manticore School
	private var combo_counter_geralt_light_attack_manticore 																				: int;
	default combo_counter_geralt_light_attack_manticore 																					= 0;

	private var combo_counter_geralt_light_attack_forward_manticore 																		: int;
	default combo_counter_geralt_light_attack_forward_manticore 																			= 0;

	private var combo_counter_geralt_heavy_attack_manticore 																				: int;
	default combo_counter_geralt_heavy_attack_manticore 																					= 0;

	private var combo_counter_geralt_heavy_attack_forward_manticore 																		: int;
	default combo_counter_geralt_heavy_attack_forward_manticore 																			= 0;

	private var combo_counter_geralt_special_attack_manticore 																				: int;
	default combo_counter_geralt_special_attack_manticore 																					= 0;

	//Viper School
	private var combo_counter_geralt_light_attack_viper 																					: int;
	default combo_counter_geralt_light_attack_viper 																						= 0;

	private var combo_counter_geralt_light_attack_forward_viper 																			: int;
	default combo_counter_geralt_light_attack_forward_viper 																				= 0;

	private var combo_counter_geralt_heavy_attack_viper 																					: int;
	default combo_counter_geralt_heavy_attack_viper 																						= 0;

	private var combo_counter_geralt_heavy_attack_forward_viper 																			: int;
	default combo_counter_geralt_heavy_attack_forward_viper 																				= 0;

	private var combo_counter_geralt_special_attack_viper 																					: int;
	default combo_counter_geralt_special_attack_viper 																						= 0;
	
	//Olgierd Attack Vars
	private var olgierd_attack_index_1																										: int;
	default olgierd_attack_index_1 																											= -1;
	private var olgierd_attack_index_2																										: int;
	default olgierd_attack_index_2 																											= -1;
	private var olgierd_attack_index_3																										: int;
	default olgierd_attack_index_3 																											= -1;
	private var previous_olgierd_attack_index_1																								: int;
	default previous_olgierd_attack_index_1 																								= -1;
	private var previous_olgierd_attack_index_2																								: int;
	default previous_olgierd_attack_index_2 																								= -1;
	private var previous_olgierd_attack_index_3																								: int;
	default previous_olgierd_attack_index_3 																								= -1;

	private var combo_counter_olgierd_attack																								: int;
	default combo_counter_olgierd_attack																									= 0;

	private var olgierd_heavy_attack_index_1																								: int;
	default olgierd_heavy_attack_index_1 																									= -1;
	private var olgierd_heavy_attack_index_2																								: int;
	default olgierd_heavy_attack_index_2 																									= -1;
	private var olgierd_heavy_attack_index_3																								: int;
	default olgierd_heavy_attack_index_3 																									= -1;
	private var previous_olgierd_heavy_attack_index_1																						: int;
	default previous_olgierd_heavy_attack_index_1 																							= -1;
	private var previous_olgierd_heavy_attack_index_2																						: int;
	default previous_olgierd_heavy_attack_index_2 																							= -1;
	private var previous_olgierd_heavy_attack_index_3																						: int;
	default previous_olgierd_heavy_attack_index_3 																							= -1;

	private var combo_counter_olgierd_heavy_attack																							: int;
	default combo_counter_olgierd_heavy_attack																								= 0;

	private var olgierd_heavy_attack_alt_index_1																							: int;
	default olgierd_heavy_attack_alt_index_1 																								= -1;
	private var olgierd_heavy_attack_alt_index_2																							: int;
	default olgierd_heavy_attack_alt_index_2 																								= -1;
	private var olgierd_heavy_attack_alt_index_3																							: int;
	default olgierd_heavy_attack_alt_index_3 																								= -1;
	private var previous_olgierd_heavy_attack_alt_index_1																					: int;
	default previous_olgierd_heavy_attack_alt_index_1 																						= -1;
	private var previous_olgierd_heavy_attack_alt_index_2																					: int;
	default previous_olgierd_heavy_attack_alt_index_2 																						= -1;
	private var previous_olgierd_heavy_attack_alt_index_3																					: int;
	default previous_olgierd_heavy_attack_alt_index_3 																						= -1;

	private var combo_counter_olgierd_heavy_attack_alt																						: int;
	default combo_counter_olgierd_heavy_attack_alt																							= 0;

	private var olgierd_light_attack_index_1																								: int;
	default olgierd_light_attack_index_1 																									= -1;
	private var olgierd_light_attack_index_2																								: int;
	default olgierd_light_attack_index_2 																									= -1;
	private var olgierd_light_attack_index_3																								: int;
	default olgierd_light_attack_index_3 																									= -1;
	private var previous_olgierd_light_attack_index_1																						: int;
	default previous_olgierd_light_attack_index_1 																							= -1;
	private var previous_olgierd_light_attack_index_2																						: int;
	default previous_olgierd_light_attack_index_2 																							= -1;
	private var previous_olgierd_light_attack_index_3																						: int;
	default previous_olgierd_light_attack_index_3 																							= -1;

	private var combo_counter_olgierd_light_attack																							: int;
	default combo_counter_olgierd_light_attack																								= 0;

	private var olgierd_light_attack_alt_index_1																							: int;
	default olgierd_light_attack_alt_index_1 																								= -1;
	private var olgierd_light_attack_alt_index_2																							: int;
	default olgierd_light_attack_alt_index_2 																								= -1;
	private var olgierd_light_attack_alt_index_3																							: int;
	default olgierd_light_attack_alt_index_3 																								= -1;
	private var previous_olgierd_light_attack_alt_index_1																					: int;
	default previous_olgierd_light_attack_alt_index_1 																						= -1;
	private var previous_olgierd_light_attack_alt_index_2																					: int;
	default previous_olgierd_light_attack_alt_index_2 																						= -1;
	private var previous_olgierd_light_attack_alt_index_3																					: int;
	default previous_olgierd_light_attack_alt_index_3 																						= -1;

	private var combo_counter_olgierd_light_attack_alt																						: int;
	default combo_counter_olgierd_light_attack_alt																							= 0;
	
	private var olgierd_pirouette_index_1																									: int;
	default olgierd_pirouette_index_1 																										= -1;
	private var olgierd_pirouette_index_2																									: int;
	default olgierd_pirouette_index_2 																										= -1;
	private var previous_olgierd_pirouette_index_1																							: int;
	default previous_olgierd_pirouette_index_1 																								= -1;
	private var previous_olgierd_pirouette_index_2																							: int;
	default previous_olgierd_pirouette_index_2 																								= -1;

	private var combo_counter_olgierd_pirouette																								: int;
	default combo_counter_olgierd_pirouette																									= 0;
	
	private var olgierd_shadow_attack_index_1																								: int;	
	default olgierd_shadow_attack_index_1 																									= -1;
	private var olgierd_shadow_attack_index_2																								: int;
	default olgierd_shadow_attack_index_2 																									= -1;
	private var previous_olgierd_shadow_attack_index_1																						: int;	
	default previous_olgierd_shadow_attack_index_1 																							= -1;
	private var previous_olgierd_shadow_attack_index_2																						: int;
	default previous_olgierd_shadow_attack_index_2 																							= -1;

	private var olgierd_shadow_attack_part_2_index_1																						: int;	
	default olgierd_shadow_attack_part_2_index_1 																							= -1;
	private var olgierd_shadow_attack_part_2_index_2																						: int;
	default olgierd_shadow_attack_part_2_index_2 																							= -1;
	private var previous_olgierd_shadow_attack_part_2_index_1																				: int;	
	default previous_olgierd_shadow_attack_part_2_index_1 																					= -1;
	private var previous_olgierd_shadow_attack_part_2_index_2																				: int;
	default previous_olgierd_shadow_attack_part_2_index_2 																					= -1;
	
	private var olgierd_combo_attack_index_1																								: int;	
	default olgierd_combo_attack_index_1 																									= -1;
	private var olgierd_combo_attack_index_2																								: int;	
	default olgierd_combo_attack_index_2 																									= -1;
	private var previous_olgierd_combo_attack_index_1																						: int;	
	default previous_olgierd_combo_attack_index_1 																							= -1;
	private var previous_olgierd_combo_attack_index_2																						: int;	
	default previous_olgierd_combo_attack_index_2 																							= -1;

	private var combo_counter_olgierd_combo_attack																							: int;
	default combo_counter_olgierd_combo_attack																								= 0;
	
	//Eredin Attack Vars
	private var eredin_attack_index_1																										: int;
	default eredin_attack_index_1 																											= -1;
	private var eredin_attack_index_2																										: int;
	default eredin_attack_index_2 																											= -1;
	private var eredin_attack_index_3																										: int;
	default eredin_attack_index_3 																											= -1;
	private var previous_eredin_attack_index_1																								: int;
	default previous_eredin_attack_index_1 																									= -1;
	private var previous_eredin_attack_index_2																								: int;
	default previous_eredin_attack_index_2 																									= -1;
	private var previous_eredin_attack_index_3																								: int;
	default previous_eredin_attack_index_3 																									= -1;

	private var combo_counter_eredin_attack																									: int;
	default combo_counter_eredin_attack																										= 0;
	
	private var eredin_combo_attack_index_1																									: int;
	default eredin_combo_attack_index_1 																									= -1;
	private var eredin_combo_attack_index_2																									: int;
	default eredin_combo_attack_index_2 																									= -1;
	private var eredin_combo_attack_index_3																									: int;
	default eredin_combo_attack_index_3 																									= -1;
	private var previous_eredin_combo_attack_index_1																						: int;
	default previous_eredin_combo_attack_index_1 																							= -1;
	private var previous_eredin_combo_attack_index_2																						: int;
	default previous_eredin_combo_attack_index_2 																							= -1;
	private var previous_eredin_combo_attack_index_3																						: int;
	default previous_eredin_combo_attack_index_3 																							= -1;

	private var combo_counter_eredin_combo_attack																							: int;
	default combo_counter_eredin_combo_attack																								= 0;

	private var combo_counter_eredin_combo_attack_alt																						: int;
	default combo_counter_eredin_combo_attack_alt																							= 0;
	
	private var eredin_stab_index																											: int;
	default eredin_stab_index 																												= -1;
	private var previous_eredin_stab_index																									: int;
	default previous_eredin_stab_index 																										= -1;

	private var combo_counter_eredin_heavy_attack																							: int;
	default combo_counter_eredin_heavy_attack																								= 0;

	private var combo_counter_eredin_heavy_attack_alt																						: int;
	default combo_counter_eredin_heavy_attack_alt																							= 0;

	private var combo_counter_eredin_light_attack																							: int;
	default combo_counter_eredin_light_attack																								= 0;

	private var combo_counter_eredin_light_attack_alt																						: int;
	default combo_counter_eredin_light_attack_alt																							= 0;

	private var combo_counter_eredin_special_attack																							: int;
	default combo_counter_eredin_special_attack																								= 0;

	private var combo_counter_eredin_special_attack_alt																						: int;
	default combo_counter_eredin_special_attack_alt																							= 0;

	private var combo_counter_shield_attack																									: int;
	default combo_counter_shield_attack																										= 0;

	private var combo_counter_shield_attack_alt																								: int;
	default combo_counter_shield_attack_alt																									= 0;

	private var combo_counter_shield_attack_special_alt																						: int;
	default combo_counter_shield_attack_special_alt																							= 0;

	private var combo_counter_shield_heavy_attack																							: int;
	default combo_counter_shield_heavy_attack																								= 0;

	private var combo_counter_shield_heavy_attack_alt																						: int;
	default combo_counter_shield_heavy_attack_alt																							= 0;

	private var combo_counter_shield_light_attack																							: int;
	default combo_counter_shield_light_attack																								= 0;

	private var combo_counter_shield_light_attack_alt																						: int;
	default combo_counter_shield_light_attack_alt																							= 0;

	private var combo_counter_shield_special_attack																							: int;
	default combo_counter_shield_special_attack																								= 0;

	private var combo_counter_shield_special_attack_alt																						: int;
	default combo_counter_shield_special_attack_alt																							= 0;
	
	//Imlerith Attack Vars
	private var imlerith_attack_index_1																										: int;
	private var imlerith_attack_index_2																										: int;
	private var imlerith_attack_index_3																										: int;
	private var previous_imlerith_attack_index_1																							: int;
	private var previous_imlerith_attack_index_2																							: int;
	private var previous_imlerith_attack_index_3																							: int;

	default imlerith_attack_index_1 																										= -1;
	default imlerith_attack_index_2 																										= -1;
	default imlerith_attack_index_3 																										= -1;
	default previous_imlerith_attack_index_1 																								= -1;
	default previous_imlerith_attack_index_2 																								= -1;
	default previous_imlerith_attack_index_3 																								= -1;

	private var combo_counter_imlerith_attack																								: int;
	default combo_counter_imlerith_attack																									= 0;
	
	private var imlerith_berserk_attack_index_1																								: int;
	private var imlerith_berserk_attack_index_2																								: int;
	private var imlerith_berserk_attack_index_3																								: int;
	private var previous_imlerith_berserk_attack_index_1																					: int;
	private var previous_imlerith_berserk_attack_index_2																					: int;
	private var previous_imlerith_berserk_attack_index_3																					: int;

	default imlerith_berserk_attack_index_1 																								= -1;
	default imlerith_berserk_attack_index_2 																								= -1;
	default imlerith_berserk_attack_index_3 																								= -1;
	default previous_imlerith_berserk_attack_index_1 																						= -1;
	default previous_imlerith_berserk_attack_index_2 																						= -1;
	default previous_imlerith_berserk_attack_index_3 																						= -1;

	private var combo_counter_imlerith_berserk_attack																						: int;
	default combo_counter_imlerith_berserk_attack																							= 0;
	
	private var imlerith_walk_attack_index_1																								: int;
	private var imlerith_walk_attack_index_2																								: int;
	private var previous_imlerith_walk_attack_index_1																						: int;
	private var previous_imlerith_walk_attack_index_2																						: int;

	default imlerith_walk_attack_index_1 																									= -1;
	default imlerith_walk_attack_index_2 																									= -1;
	default previous_imlerith_walk_attack_index_1 																							= -1;
	default previous_imlerith_walk_attack_index_2 																							= -1;

	private var combo_counter_imlerith_walk_attack																							: int;
	default combo_counter_imlerith_walk_attack																								= 0;
	
	private var imlerith_combo_attack_index_1																								: int;
	private var imlerith_combo_attack_index_2																								: int;
	private var previous_imlerith_combo_attack_index_1																						: int;
	private var previous_imlerith_combo_attack_index_2																						: int;

	default imlerith_combo_attack_index_1 																									= -1;
	default imlerith_combo_attack_index_2 																									= -1;
	default previous_imlerith_combo_attack_index_1 																							= -1;
	default previous_imlerith_combo_attack_index_2 																							= -1;

	private var combo_counter_imlerith_combo_attack																							: int;
	default combo_counter_imlerith_combo_attack																								= 0;

	private var combo_counter_imlerith_heavy_attack																							: int;
	default combo_counter_imlerith_heavy_attack																								= 0;

	private var combo_counter_imlerith_heavy_attack_alt																						: int;
	default combo_counter_imlerith_heavy_attack_alt																							= 0;

	private var combo_counter_imlerith_light_attack																							: int;
	default combo_counter_imlerith_light_attack																								= 0;

	private var combo_counter_imlerith_light_attack_alt																						: int;
	default combo_counter_imlerith_light_attack_alt																							= 0;

	private var combo_counter_imlerith_special_attack																						: int;
	default combo_counter_imlerith_special_attack																							= 0;

	private var combo_counter_imlerith_special_attack_alt																					: int;
	default combo_counter_imlerith_special_attack_alt																						= 0;
	
	//Spear Attack Vars
	
	private var spear_attack_index_1																										: int;
	private var spear_attack_index_2																										: int;
	private var spear_attack_index_3																										: int;
	private var previous_spear_attack_index_1																								: int;
	private var previous_spear_attack_index_2																								: int;
	private var previous_spear_attack_index_3																								: int;

	default spear_attack_index_1 																											= -1;
	default spear_attack_index_2 																											= -1;
	default spear_attack_index_3 																											= -1;
	default previous_spear_attack_index_1 																									= -1;
	default previous_spear_attack_index_2 																									= -1;
	default previous_spear_attack_index_3 																									= -1;

	private var combo_counter_spear_attack																									: int;
	default combo_counter_spear_attack																										= 0;
	
	private var spear_attack_alt_index_1																									: int;
	private var spear_attack_alt_index_2																									: int;
	private var spear_attack_alt_index_3																									: int;
	private var previous_spear_attack_alt_index_1																							: int;
	private var previous_spear_attack_alt_index_2																							: int;
	private var previous_spear_attack_alt_index_3																							: int;

	default spear_attack_alt_index_1 																										= -1;
	default spear_attack_alt_index_2 																										= -1;
	default spear_attack_alt_index_3 																										= -1;
	default previous_spear_attack_alt_index_1 																								= -1;
	default previous_spear_attack_alt_index_2 																								= -1;
	default previous_spear_attack_alt_index_3 																								= -1;

	private var combo_counter_spear_attack_alt																								: int;
	default combo_counter_spear_attack_alt																									= 0;


	private var combo_counter_spear_heavy_attack																							: int;
	default combo_counter_spear_heavy_attack																								= 0;

	private var combo_counter_spear_heavy_attack_alt																						: int;
	default combo_counter_spear_heavy_attack_alt																							= 0;

	private var combo_counter_spear_light_attack																							: int;
	default combo_counter_spear_light_attack																								= 0;

	private var combo_counter_spear_light_attack_alt																						: int;
	default combo_counter_spear_light_attack_alt																							= 0;

	private var combo_counter_spear_special_attack																							: int;
	default combo_counter_spear_special_attack																								= 0;

	private var combo_counter_spear_special_attack_alt																						: int;
	default combo_counter_spear_special_attack_alt																							= 0;
	
	//Hammer Attack Vars
	
	private var hammer_attack_index_1																										: int;
	private var hammer_attack_index_2																										: int;
	private var previous_hammer_attack_index_1																								: int;
	private var previous_hammer_attack_index_2																								: int;

	default hammer_attack_index_1 																											= -1;
	default hammer_attack_index_2 																											= -1;
	default previous_hammer_attack_index_1 																									= -1;
	default previous_hammer_attack_index_2 																									= -1;
	
	private var hammer_attack_alt_index_1																									: int;
	private var hammer_attack_alt_index_2																									: int;
	private var previous_hammer_attack_alt_index_1																							: int;	
	private var previous_hammer_attack_alt_index_2																							: int;

	default hammer_attack_alt_index_1 																										= -1;
	default hammer_attack_alt_index_2 																										= -1;
	default previous_hammer_attack_alt_index_1 																								= -1;
	default previous_hammer_attack_alt_index_2 																								= -1;

	private var combo_counter_hammer_attack																									: int;
	default combo_counter_hammer_attack																										= 0;

	private var combo_counter_hammer_attack_alt																								: int;
	default combo_counter_hammer_attack_alt																									= 0;


	private var combo_counter_hammer_heavy_attack																							: int;
	default combo_counter_hammer_heavy_attack																								= 0;

	private var combo_counter_hammer_heavy_attack_alt																						: int;
	default combo_counter_hammer_heavy_attack_alt																							= 0;

	private var combo_counter_hammer_light_attack																							: int;
	default combo_counter_hammer_light_attack																								= 0;

	private var combo_counter_hammer_light_attack_alt																						: int;
	default combo_counter_hammer_light_attack_alt																							= 0;

	private var combo_counter_hammer_special_attack																							: int;
	default combo_counter_hammer_special_attack																								= 0;

	private var combo_counter_hammer_special_attack_alt																						: int;
	default combo_counter_hammer_special_attack_alt																							= 0;
	
	//Axe Attack Vars
	private var axe_attack_index_1																											: int;
	private var axe_attack_index_2																											: int;
	private var previous_axe_attack_index_1																									: int;
	private var previous_axe_attack_index_2																									: int;

	default axe_attack_index_1 																												= -1;
	default axe_attack_index_2 																												= -1;
	default previous_axe_attack_index_1 																									= -1;
	default previous_axe_attack_index_2 																									= -1;
	
	private var axe_attack_alt_index_1																										: int;
	private var axe_attack_alt_index_2																										: int;
	private var previous_axe_attack_alt_index_1																								: int;
	private var previous_axe_attack_alt_index_2																								: int;

	default axe_attack_alt_index_1 																											= -1;
	default axe_attack_alt_index_2 																											= -1;
	default previous_axe_attack_alt_index_1 																								= -1;
	default previous_axe_attack_alt_index_2 																								= -1;


	private var combo_counter_axe_attack																									: int;
	default combo_counter_axe_attack																										= 0;

	private var combo_counter_axe_attack_alt																								: int;
	default combo_counter_axe_attack_alt																									= 0;


	private var combo_counter_axe_heavy_attack																								: int;
	default combo_counter_axe_heavy_attack																									= 0;

	private var combo_counter_axe_heavy_attack_alt																							: int;
	default combo_counter_axe_heavy_attack_alt																								= 0;

	private var combo_counter_axe_light_attack																								: int;
	default combo_counter_axe_light_attack																									= 0;

	private var combo_counter_axe_light_attack_alt																							: int;
	default combo_counter_axe_light_attack_alt																								= 0;

	private var combo_counter_axe_special_attack																							: int;
	default combo_counter_axe_special_attack																								= 0;

	private var combo_counter_axe_special_attack_alt																						: int;
	default combo_counter_axe_special_attack_alt																							= 0;
	
	//Greg Attack Vars
	private var greg_attack_index_1																											: int;
	private var greg_attack_index_2																											: int;
	private var previous_greg_attack_index_1																								: int;
	private var previous_greg_attack_index_2																								: int;

	default greg_attack_index_1 																											= -1;
	default greg_attack_index_2 																											= -1;
	default previous_greg_attack_index_1 																									= -1;
	default previous_greg_attack_index_2 																									= -1;
	
	private var greg_attack_alt_index_1																										: int;
	private var greg_attack_alt_index_2																										: int;
	private var previous_greg_attack_alt_index_1																							: int;
	private var previous_greg_attack_alt_index_2																							: int;

	default greg_attack_alt_index_1 																										= -1;
	default greg_attack_alt_index_2 																										= -1;
	default previous_greg_attack_alt_index_1 																								= -1;
	default previous_greg_attack_alt_index_2 																								= -1;

	private var combo_counter_greg_attack																									: int;
	default combo_counter_greg_attack																										= 0;

	private var combo_counter_greg_attack_alt																								: int;
	default combo_counter_greg_attack_alt																									= 0;


	private var combo_counter_greg_heavy_attack																								: int;
	default combo_counter_greg_heavy_attack																									= 0;

	private var combo_counter_greg_heavy_attack_alt																							: int;
	default combo_counter_greg_heavy_attack_alt																								= 0;

	private var combo_counter_greg_light_attack																								: int;
	default combo_counter_greg_light_attack																									= 0;

	private var combo_counter_greg_light_attack_alt																							: int;
	default combo_counter_greg_light_attack_alt																								= 0;

	private var combo_counter_greg_special_attack																							: int;
	default combo_counter_greg_special_attack																								= 0;

	private var combo_counter_greg_special_attack_alt																						: int;
	default combo_counter_greg_special_attack_alt																							= 0;
	
	private var combo_counter_mage_heavy_attack																								: int;
	default combo_counter_mage_heavy_attack																									= 0;

	private var combo_counter_mage_light_attack																								: int;
	default combo_counter_mage_light_attack																									= 0;

	private var combo_counter_mage_special_attack																							: int;
	default combo_counter_mage_special_attack																								= 0;
	
	//Bruxa Bite Vars
	private var bruxa_bite_index_1																											: int; 
	private var previous_bruxa_bite_index_1																									: int;

	default bruxa_bite_index_1 																												= -1;
	default previous_bruxa_bite_index_1 																									= -1;
	
	private var bruxa_bite_repeat_index_1																									: int;
	private var previous_bruxa_bite_repeat_index_1																							: int;

	default bruxa_bite_repeat_index_1 																										= -1;
	default previous_bruxa_bite_repeat_index_1 																								= -1;
	
	private var victimPos, newVictimPos																										: Vector;
	private var victimRot 																													: EulerAngles;
	private var playerPos																													: Vector;
	private var playerRot 																													: EulerAngles;
	
	//Movement Vars
	private var BruxaDashCallTime																											: float;
	private var BruxaDashDoubleTap 																											: bool;
	
	private var bruxa_dash_index_1																											: int;	
	private var bruxa_dash_index_2																											: int;
	private var previous_bruxa_dash_index_1																									: int;	
	private var previous_bruxa_dash_index_2																									: int;

	default bruxa_dash_index_1 																												= -1;
	default bruxa_dash_index_2 																												= -1;
	default previous_bruxa_dash_index_1 																									= -1;
	default previous_bruxa_dash_index_2 																									= -1;

	private var TeleportCallTime																											: float;
	private var TeleportDoubleTap 																											: bool;
	
	//On-hit Vars
	private var heal, playerVitality 																										: float;
	private var maxAdrenaline																												: float;
	private var curAdrenaline																												: float;
	private var marks, marks_2 																												: array< CEntity >;
	private var mark       																													: CEntity;
	private var targetRotationNPC, npcRot																									: EulerAngles;
	private var npcPos																														: Vector;
	private var npc 																														: CActor;
	private var actors, deathactors		    																								: array<CActor>;
	private var i         																													: int;
	private var actortarget					       																							: CActor;
	private var dmg																															: W3DamageAction;
	
	//Shield Anim Stuff
	private var shieldAnimatedComponent 																									: CAnimatedComponent;
	private var shieldMovementAdjustor																										: CMovementAdjustor; 
	private var shieldTicket 																												: SMovementAdjustmentRequestTicket; 

	private var acs_shield_attack_index_1																									: int;
	private var previous_acs_shield_attack_index_1																							: int;

	default acs_shield_attack_index_1 																										= -1;
	default previous_acs_shield_attack_index_1 																								= -1;

	private var curTargetVitality, maxTargetVitality, curTargetEssence, maxTargetEssence, damageMax, damageMin								: float;
	
	private var blood_fx, forest_god_fx, forest_god_demonic_fx																				: array<CName>;

	private var previous_player_comment_index_COMBAT_END																					: int;	
	private var player_comment_index_COMBAT_END																								: int;

	default previous_player_comment_index_COMBAT_END 																						= -1;
	default player_comment_index_COMBAT_END 																								= -1;

	// Fear Vars
	private var fear_index_1																												: int;
	private var previous_fear_index_1																										: int;

	default fear_index_1 																													= -1;
	default previous_fear_index_1 																											= -1;

	private var death_fear_index_1																											: int;
	private var previous_death_fear_index_1																									: int;

	default death_fear_index_1 																												= -1;
	default previous_death_fear_index_1 																									= -1;

	private var action 																														: W3DamageAction;
	private var curVitality, damage																											: float;
	
	// Wraith Vars
	private var dest1																														: Vector;	
	private var pRot 																														: EulerAngles;

	private var attach_vec, bone_vec																										: Vector;
	private var attach_rot, bone_rot																										: EulerAngles;

	// Camera Vars
	private var camera 																														: CCustomCamera;

	var previous_weapon_cutscene_index																										: int;
	var weapon_cutscene_index																												: int;

	default previous_weapon_cutscene_index 																									= -1;
	default weapon_cutscene_index 																											= -1;

	var previous_player_comment_index_EQUIP_TAUNT																							: int;	
	var player_comment_index_EQUIP_TAUNT																									: int;
	var previous_player_comment_index_COMBAT_TAUNT																							: int;	
	var player_comment_index_COMBAT_TAUNT																									: int;

	default previous_player_comment_index_EQUIP_TAUNT 																						= -1;
	default player_comment_index_EQUIP_TAUNT 																								= -1;
	default previous_player_comment_index_COMBAT_TAUNT 																						= -1;
	default player_comment_index_COMBAT_TAUNT 																								= -1;

	var previous_claw_taunt_index																											: int;	
	var claw_taunt_index																													: int;

	var previous_olgierd_taunt_index																										: int;	
	var olgierd_taunt_index																													: int;

	var previous_regular_taunt_index																										: int;	
	var regular_taunt_index																													: int;

	var previous_imlerith_taunt_index																										: int;	
	var imlerith_taunt_index																												: int;

	var previous_eredin_taunt_index																											: int;	
	var eredin_taunt_index																													: int;

	var previous_olgierd_combat_taunt_index_1																								: int;
	var previous_olgierd_combat_taunt_index_2																								: int;

	var olgierd_combat_taunt_index_1																										: int;
	var olgierd_combat_taunt_index_2																										: int;

	var previous_eredin_combat_taunt_index_1																								: int;
	var previous_eredin_combat_taunt_index_2																								: int;

	var eredin_combat_taunt_index_1																											: int;
	var eredin_combat_taunt_index_2																											: int;

	var previous_imlerith_combat_taunt_index_1																								: int;
	var previous_imlerith_combat_taunt_index_2																								: int;

	var imlerith_combat_taunt_index_1																										: int;
	var imlerith_combat_taunt_index_2																										: int;

	var previous_normal_combat_taunt_index_1																								: int;
	var previous_normal_combat_taunt_index_2																								: int;

	var normal_combat_taunt_index_1																											: int;
	var normal_combat_taunt_index_2																											: int;

	default previous_claw_taunt_index 																										= -1;
	default claw_taunt_index 																												= -1;
	default previous_olgierd_taunt_index 																									= -1;
	default olgierd_taunt_index 																											= -1;
	default previous_regular_taunt_index 																									= -1;
	default regular_taunt_index 																											= -1;
	default previous_imlerith_taunt_index 																									= -1;
	default imlerith_taunt_index 																											= -1;
	default previous_eredin_taunt_index 																									= -1;
	default eredin_taunt_index 																												= -1;
	default previous_olgierd_combat_taunt_index_1 																							= -1;
	default previous_olgierd_combat_taunt_index_2 																							= -1;
	default olgierd_combat_taunt_index_1 																									= -1;
	default olgierd_combat_taunt_index_2 																									= -1;
	default previous_eredin_combat_taunt_index_1 																							= -1;
	default previous_eredin_combat_taunt_index_2 																							= -1;
	default eredin_combat_taunt_index_1 																									= -1;
	default eredin_combat_taunt_index_2 																									= -1;
	default previous_imlerith_combat_taunt_index_1 																							= -1;
	default previous_imlerith_combat_taunt_index_2 																							= -1;
	default imlerith_combat_taunt_index_1 																									= -1;
	default imlerith_combat_taunt_index_2 																									= -1;
	default previous_normal_combat_taunt_index_1																							= -1;
	default previous_normal_combat_taunt_index_2 																							= -1;
	default normal_combat_taunt_index_1 																									= -1;
	default normal_combat_taunt_index_2 																									= -1;

	var vACS_Cooldown_Manager																												: ACS_Cooldown_Manager; 

	private var forcedFinisherVictim 																										: CActor;

	private var combatTarget 																												: CActor;

	private var moveTargets, moveTargets_ACS_INIT 																							: array<CActor>;

	private var environment 																												: CEnvironmentDefinition;	

	private var envID 																														: int;

	private var darknessEnvID																												: int;

	private var paintingEnvID																												: int;

	private var focusModeEnvID																												: int;

	private var bruxaCamoEnvID																												: int;

	private var umbral_slash_index																											: int;
	private var previous_umbral_slash_index																									: int;

	private var sparagmos_index																												: int;
	private var previous_sparagmos_index																									: int;

	private var storm_spear_index																											: int;
	private var previous_storm_spear_index																									: int;

	private var eff_names																													: array<CName>;

	private var dismembermentComp, playerDismembermentComp 																					: CDismembermentComponent;
	private var wounds, playerWounds																										: array< name >;
	private var usedWound, usedPlayerWound																									: name;

	private var playerMeshcomp																												: CComponent;
	private var playerAnimcomp 																												: CComponent;
	private var size 																														: float;
	default size 																															= 1;

	public var combo_counter_damage																											: int;

	default combo_counter_damage 																											= 0;

	public var dodge_counter																												: int;

	default dodge_counter 																													= 0;

	private var steel_weapon_names, silver_weapon_names																						: array<CName>;

	private var finisherDist 																												: float;

	private var evadeTarget 																												: CActor;

	public var rage_counter_dodge																											: int;

	default rage_counter_dodge 																												= 0;

	public var rage_counter_light_attack																									: int;

	default rage_counter_light_attack 																										= 0;

	public var rage_counter_heavy_attack																									: int;

	default rage_counter_heavy_attack 																										= 0;

	public var rage_counter_special_attack																									: int;

	default rage_counter_special_attack 																									= 0;

	private var lookTarget																													: CActor;
	private var savedTarget																													: CEntity;
	private var lookDistance																												: float;
	private var lastlooktime																												: float;
	private var headtarget																													: CEntity;
	private var lookTargetentity																											: CEntity;

	private var nekkerGuardianTargetDistance																								: float;

	private var altSignCasting 																												: bool;

	private var scene																														: CStoryScene;

	private var actors_in_rage																												: array<CActor>;

	var ACS_Rage_Process																													: bool;

	default ACS_Rage_Process 																												= false;

	var ACS_Fire_Bear_FlameOn_Process																										: bool;

	default ACS_Fire_Bear_FlameOn_Process 																									= false;

	var ACS_Fire_Bear_Fireball_Process																										: bool;

	default ACS_Fire_Bear_Fireball_Process 																									= false;

	var ACS_Fire_Bear_FireLine_Process																										: bool;

	default ACS_Fire_Bear_FireLine_Process 																									= false;

	var ACS_Fire_Bear_Meteor_Process																										: bool;

	default ACS_Fire_Bear_Meteor_Process 																									= false;

	var ACS_SpearWhirlProcess																												: bool;

	default ACS_SpearWhirlProcess 																											= false;

	var ACS_Knightmare_Shout_Process																										: bool;

	default ACS_Knightmare_Shout_Process 																									= false;

	var ACS_Knightmare_Igni_Process																											: bool;

	default ACS_Knightmare_Igni_Process 																									= false;

	var ACS_She_Who_Knows_Throw_Projectile_Process																							: bool;

	default ACS_She_Who_Knows_Throw_Projectile_Process 																						= false;

	var ACS_Vampire_Monster_Spawn_Process																									: bool;

	default ACS_Vampire_Monster_Spawn_Process 																								= false;

	var ACS_Vampire_Monster_Flying_Process																									: bool;

	default ACS_Vampire_Monster_Flying_Process 																								= false;

	var weapon 																																: CItemEntity;

	var temp 																																: CEntityTemplate;
	var pos 																																: Vector;
	var rot 																																: EulerAngles;

	var lastPressedWithNostamina 																											: bool;
	default lastPressedWithNostamina 																										= false;

	private var fear_anim_names, finisher_fear_anim_names																					: array< name >;

	private var finisherActorTarget																											: CActor;
	private var ccomp																														: CComponent;
	private var ccompEnabled																												: bool;
	
	private var vACS_Ciri_Special_Attack 																									: cACS_Ciri_Special_Attack;

	private var vACS_Setup_Combat_Action_Light 																								: cACS_Setup_Combat_Action_Light;
	
	private var vACS_Setup_Combat_Action_Heavy 																								: cACS_Setup_Combat_Action_Heavy;

	private var vACS_Setup_Combat_Action_CastSign 																							: cACS_Setup_Combat_Action_CastSign;
	
	private var movementAdjustorWerewolf																									: CMovementAdjustor; 
	private var ticketWerewolf 																												: SMovementAdjustmentRequestTicket; 

	private var movementAdjustorWerewolfWitcher																								: CMovementAdjustor; 
	private var ticketWerewolfWitcher 																										: SMovementAdjustmentRequestTicket; 


	private var movementAdjustorVampiress																									: CMovementAdjustor; 
	private var ticketVampiress 																											: SMovementAdjustmentRequestTicket; 

	private var movementAdjustorVampiressWitcher																							: CMovementAdjustor; 
	private var ticketVampiressWitcher 																										: SMovementAdjustmentRequestTicket; 

	private var movementAdjustorVampireMonster																								: CMovementAdjustor; 
	private var ticketVampireMonster																										: SMovementAdjustmentRequestTicket; 

	private var movementAdjustorVampireMonsterWitcher																						: CMovementAdjustor; 
	private var ticketVampireMonsterWitcher 																								: SMovementAdjustmentRequestTicket; 

	private var movementAdjustorToad																										: CMovementAdjustor; 
	private var ticketToad 																													: SMovementAdjustmentRequestTicket; 

	private var movementAdjustorToadWitcher																									: CMovementAdjustor; 
	private var ticketToadWitcher 																											: SMovementAdjustmentRequestTicket; 

	private var movementAdjustorRedMiasmal																									: CMovementAdjustor; 
	private var ticketRedMiasmal 																											: SMovementAdjustmentRequestTicket; 

	private var movementAdjustorRedMiasmalWitcher																							: CMovementAdjustor; 
	private var ticketRedMiasmalWitcher																										: SMovementAdjustmentRequestTicket; 

	private var movementAdjustorSharley																										: CMovementAdjustor; 
	private var ticketSharley 																												: SMovementAdjustmentRequestTicket; 

	private var movementAdjustorSharleyWitcher																								: CMovementAdjustor; 
	private var ticketSharleyWitcher																										: SMovementAdjustmentRequestTicket; 

	private var movementAdjustorBlackWolf																									: CMovementAdjustor; 
	private var ticketBlackWolf 																											: SMovementAdjustmentRequestTicket; 

	private var movementAdjustorBlackWolfWitcher																							: CMovementAdjustor; 
	private var ticketBlackWolfWitcher																										: SMovementAdjustmentRequestTicket; 


	private var snow_ent																													: CEntity;

	private var facemasktoggle 																												: bool;

	private var helmtoggle 																													: bool;

	private var hoodtoggle 																													: bool;
	
	public var ACS_Transformation_Savelock_ID																								: int;

	public var ACS_Meditation_Savelock_ID																									: int;

	public var ACS_Glide_Savelock_ID																										: int;

	public var ACS_Swordwalk_Savelock_ID																									: int;

	public var ACS_Unconscious_Savelock_ID																									: int;

	public var ACS_Wraith_Mode_Savelock_ID																									: int;

	private var MeditateCallTime																											: float;
	private var MeditateDoubleTap 																											: bool;

	private var wispHitCounter																												: int;
	default wispHitCounter 																													= 0;

	event OnSpawned( spawnData : SEntitySpawnData )
	{
		this.CreateAttachment( thePlayer );	
		
		ACS_INIT_FUNCTION();

		ACS_Addon_States();

		this.PushState('ACS_BARADDUR');
	}

	function ACS_INIT_FUNCTION()
	{
		if(!thePlayer.IsCiri())
		{
			AddTimer('ACS_Init_Delay', 1, false);
			
			if(ACS_Enabled())
			{
				SpawnManager();

				ACS_BehSwitchINIT();

				ACS_Player_RemoveTags();

				ACS_Init_Timers();

				register_extra_inputs();

				thePlayer.SetWalkToggle( true );	

				MimicReset();

				FactsCheck();
			}
		}
	}

	public timer function ACS_Init_Delay ( dt : float, id : int)
	{
		ACS_Init_Attempt();
	}

	function Add_Items()
	{
		if (!thePlayer.inv.HasItem('acs_wisp'))
		{
			AddTimer('ACS_Wisp_Tutorial_Delay', 1, false);
			thePlayer.inv.AddAnItem('acs_wisp', 1);
		}

		if (!thePlayer.inv.HasItem('ACS_Wolf_Crossbow'))
		{
			thePlayer.inv.AddAnItem('ACS_Wolf_Crossbow', 1);
		}

		if (!thePlayer.inv.HasItem('acs_killcount_book'))
		{
			thePlayer.inv.AddAnItem('acs_killcount_book', 1);
		}
	}

	function ACS_Init_Timers()
	{
		AddTimer( 'ACS_Set_Player_Scale', 0.01, true );
		AddTimer('ACS_Human_Death_Fear', 2, true);
		AddTimer('Ice_Breathe_Reset', 60, true);

		AddTimer('ACS_ENFORCE_INPUTS', 1, true);

		AddTimer('ACS_Facts_Delay_Refresh', 1, false);

		AddTimer('ACS_AddItemsDelay', 1, false);

		/*
		if ( ACS_MS_Enabled() && ACS_MS_Installed() )
		{
			AddTimer('ACS_ENFORCE_INPUTS', 1.5, false);
		}
		else
		{
			AddTimer('ACS_ENFORCE_INPUTS', 1.5, true);
		}
		*/
	}

	public timer function ACS_AddItemsDelay ( dt : float, id : int)
	{
		Add_Items();
	}

	public timer function ACS_Facts_Delay_Refresh ( dt : float, id : int)
	{ 
		if (FactsQuerySum("ACS_Skellige_Blizzard_Env") > 0)
		{
			FactsRemove("ACS_Skellige_Blizzard_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Heavy_Clouds_Env") > 0)
		{
			FactsRemove("ACS_Skellige_Heavy_Clouds_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Heavy_Clouds_Dark_Env") > 0)
		{
			FactsRemove("ACS_Skellige_Heavy_Clouds_Dark_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Rain_Storm_Env") > 0)
		{
			FactsRemove("ACS_Skellige_Rain_Storm_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Normal_Env") > 0)
		{
			FactsRemove("ACS_Skellige_Normal_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Mid_Clouds_Env") > 0)
		{
			FactsRemove("ACS_Skellige_Mid_Clouds_Env");
		}





		if (FactsQuerySum("ACS_Dancing_Star_Equipped") > 0)
		{
			FactsRemove("ACS_Dancing_Star_Equipped");
		}

		if (FactsQuerySum("ACS_Devils_Puffball_Equipped") > 0)
		{
			FactsRemove("ACS_Devils_Puffball_Equipped");
		}

		if (FactsQuerySum("ACS_Dwimeritium_Bomb_Equipped") > 0)
		{
			FactsRemove("ACS_Dwimeritium_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Dragons_Dream_Equipped") > 0)
		{
			FactsRemove("ACS_Dragons_Dream_Equipped");
		}

		if (FactsQuerySum("ACS_Grapeshot_Equipped") > 0)
		{
			FactsRemove("ACS_Grapeshot_Equipped");
		}

		if (FactsQuerySum("ACS_Silver_Dust_Equipped") > 0)
		{
			FactsRemove("ACS_Silver_Dust_Equipped");
		}

		if (FactsQuerySum("ACS_White_Frost_Equipped") > 0)
		{
			FactsRemove("ACS_White_Frost_Equipped");
		}

		if (FactsQuerySum("ACS_Samum_Equipped") > 0)
		{
			FactsRemove("ACS_Samum_Equipped");
		}



		if (FactsQuerySum("ACS_Torch_Equipped") > 0)
		{
			FactsRemove("ACS_Torch_Equipped");
		}

		if (FactsQuerySum("ACS_Magic_Lamp_Equipped") > 0)
		{
			FactsRemove("ACS_Magic_Lamp_Equipped");
		}

		if (FactsQuerySum("ACS_Oil_Lamp_Equipped") > 0)
		{
			FactsRemove("ACS_Oil_Lamp_Equipped");
		}

		if (FactsQuerySum("ACS_Censer_Equipped") > 0)
		{
			FactsRemove("ACS_Censer_Equipped");
		}

		if (FactsQuerySum("ACS_Navigator_Horn_Equipped") > 0)
		{
			FactsRemove("ACS_Navigator_Horn_Equipped");
		}

		if (FactsQuerySum("ACS_Lure_Equipped") > 0)
		{
			FactsRemove("ACS_Lure_Equipped");
		}

		if (FactsQuerySum("ACS_Bell_Equipped") > 0)
		{
			FactsRemove("ACS_Bell_Equipped");
		}

		if (FactsQuerySum("ACS_Potestaquisitor_Equipped") > 0)
		{
			FactsRemove("ACS_Potestaquisitor_Equipped");
		}

		if (FactsQuerySum("ACS_Eye_Of_Loki_Equipped") > 0)
		{
			FactsRemove("ACS_Eye_Of_Loki_Equipped");
		}

		if (FactsQuerySum("ACS_Pouch_Equipped") > 0)
		{
			FactsRemove("ACS_Pouch_Equipped");
		}
		
	} 

	function ACS_Addon_States()
	{
		this.PushState('ACS_No_Glow');
		this.PushState('ACS_Facts');
		this.PushState('ACS_Monster_Static_Spawner');
	}

	function ACS_Player_RemoveTags()
	{
		GetWitcherPlayer().RemoveTag('ACS_BackSwords_Equipped');

		GetWitcherPlayer().RemoveTag('ACS_Armor_Equipped_Hit_Effects');

		GetWitcherPlayer().RemoveTag('ACS_Crach_Cape_Equipped');

		GetWitcherPlayer().RemoveTag('ACS_Armor_Player_Is_Sprinting');

		GetWitcherPlayer().RemoveTag('ACS_Armor_Player_Is_Running');

		GetWitcherPlayer().RemoveTag('ACS_Armor_Player_Is_Walking');

		GetWitcherPlayer().RemoveTag('ACS_Player_Has_Summoned_Constructs');

		GetWitcherPlayer().RemoveTag('ACS_IsPerformingFinisher');

		GetWitcherPlayer().RemoveTag('ACS_Movement_Prevention_Tag');

		if (FactsQuerySum("ACS_Helm_Equipped") > 0)
		{
			FactsRemove("ACS_Helm_Equipped");
		}

		if (FactsQuerySum("ACS_Armor_Equipped") > 0)
		{
			FactsRemove("ACS_Armor_Equipped");
		}

		if (FactsQuerySum("ACS_Alternate_Steel_Scabbard") > 0)
		{
			FactsRemove("ACS_Alternate_Steel_Scabbard");
		}

		if (FactsQuerySum("ACS_Alternate_Silver_Scabbard") > 0)
		{
			FactsRemove("ACS_Alternate_Silver_Scabbard");
		}

		if ( FactsQuerySum("ACS_Bow_Quiver_Loaded") > 0 )
		{
			FactsRemove("ACS_Bow_Quiver_Loaded");
		}

		if (FactsQuerySum("ACS_Guiding_Light_Quest_Marker_Distance_Available") > 0)
		{
			FactsRemove("ACS_Guiding_Light_Quest_Marker_Distance_Available");
		}

		if (FactsQuerySum("ACS_Guiding_Light_Untracked_Quest_Marker_Distance_Available") > 0)
		{
			FactsRemove("ACS_Guiding_Light_Untracked_Quest_Marker_Distance_Available");
		}

		if (FactsQuerySum("ACS_Guiding_Light_POI_Marker_Distance_Available") > 0)
		{
			FactsRemove("ACS_Guiding_Light_POI_Marker_Distance_Available");
		}

		if (FactsQuerySum("ACS_Guiding_Light_Available_Quest_Marker_Distance_Available") > 0)
		{
			FactsRemove("ACS_Guiding_Light_Available_Quest_Marker_Distance_Available");
		}

		if (FactsQuerySum("ACS_Guiding_Light_User_Marker_Distance_Available") > 0)
		{
			FactsRemove("ACS_Guiding_Light_User_Marker_Distance_Available");
		}

		FactsRemove("acs_wolf_companion_command_stay");

		FactsRemove("acs_wolf_companion_summoned");

		//RestoreInputBlocks();
	}

	function RestoreInputBlocks()
	{
		thePlayer.UnblockAction( EIAB_Crossbow, 			'ACS_Gliding');
		thePlayer.UnblockAction( EIAB_CallHorse,			'ACS_Gliding');
		thePlayer.UnblockAction( EIAB_Signs, 				'ACS_Gliding');
		thePlayer.UnblockAction( EIAB_DrawWeapon, 			'ACS_Gliding');
		thePlayer.UnblockAction( EIAB_FastTravel, 			'ACS_Gliding');
		thePlayer.UnblockAction( EIAB_Fists, 				'ACS_Gliding');
		thePlayer.UnblockAction( EIAB_InteractionAction, 	'ACS_Gliding');
		thePlayer.UnblockAction( EIAB_UsableItem,			'ACS_Gliding');
		thePlayer.UnblockAction( EIAB_ThrowBomb,			'ACS_Gliding');
		thePlayer.UnblockAction( EIAB_SwordAttack,			'ACS_Gliding');
		thePlayer.UnblockAction( EIAB_LightAttacks,			'ACS_Gliding');
		thePlayer.UnblockAction( EIAB_HeavyAttacks,			'ACS_Gliding');
		thePlayer.UnblockAction( EIAB_SpecialAttackLight,	'ACS_Gliding');
		thePlayer.UnblockAction( EIAB_SpecialAttackHeavy,	'ACS_Gliding');
		thePlayer.UnblockAction( EIAB_Dodge,				'ACS_Gliding');
		thePlayer.UnblockAction( EIAB_Roll,					'ACS_Gliding');
		thePlayer.UnblockAction( EIAB_Parry,				'ACS_Gliding');
		thePlayer.UnblockAction( EIAB_MeditationWaiting,	'ACS_Gliding');
		thePlayer.UnblockAction( EIAB_OpenMeditation,		'ACS_Gliding');
		thePlayer.UnblockAction( EIAB_RadialMenu,			'ACS_Gliding');
		thePlayer.UnblockAction( EIAB_Movement,				'ACS_Gliding');
		thePlayer.UnblockAction( EIAB_Interactions, 		'ACS_Gliding');
		thePlayer.UnblockAction( EIAB_Jump, 				'ACS_Gliding');
		thePlayer.UnblockAction( EIAB_QuickSlots, 			'ACS_Gliding');

		thePlayer.UnblockAction( EIAB_InteractionAction, 		'ACS_Defalt_Swordwalk');
		thePlayer.UnblockAction( EIAB_Interactions, 			'ACS_Defalt_Swordwalk');
		thePlayer.UnblockAction( EIAB_InteractionContainers,  	'ACS_Defalt_Swordwalk');

		thePlayer.BlockAllActions( 'ACS_Finisher_Action_Block', false );	
		thePlayer.BlockAllActions( 'Mutation11', false );
	}

	function FactsCheck()
	{
		if (ACS_Transformation_Werewolf_Check())
		{
			DisableWerewolf_Actual();
		}

		if (ACS_Transformation_Vampiress_Check())
		{
			DisableVampiress_Actual();
		}

		if (ACS_Transformation_Vampire_Monster_Check())
		{
			DisableTransformationVampireMonster_Actual_No_Teleport();
		}

		if (ACS_Transformation_Toad_Check())
		{
			DisableTransformationToad_Actual();
		}

		if (ACS_Transformation_Red_Miasmal_Check())
		{
			DisableRedMiasmal_Actual();
		}

		if (ACS_Transformation_Sharley_Check())
		{
			DisableSharley_Actual();
		}

		if (ACS_Transformation_Black_Wolf_Check())
		{
			DisableBlackWolf_Actual();
		}

		CloakToggleStartup();

		if (FactsQuerySum("ACS_Mask_Enabled") > 0
		&& !ACS_Armor_Equipped_Check()
		)
		{
			if ( GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_Armor))
			{
				Facegear_Include_Startup();
			}
			else
			{
				FactsRemove("ACS_Mask_Enabled");
			}
		}

		if (FactsQuerySum("ACS_Hood_Enabled") > 0
		&& !ACS_Armor_Equipped_Check()
		)
		{
			if ( GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_Armor))
			{
				Hood_Include();
			}
			else
			{
				FactsRemove("ACS_Hood_Enabled");
			}
		}

		if ((ACS_Eredin_Armor_Equipped_Check())
		&& FactsQuerySum("ACS_Eredin_Cloak_Equipped") > 0)
		{
			GetWildhuntAdditionalPiecesClass().AttachEredinCloak();
		}

		if ((ACS_VGX_Eredin_Armor_Equipped_Check())
		&& FactsQuerySum("ACS_VGX_Eredin_Cloak_Equipped") > 0)
		{
			GetWildhuntAdditionalPiecesClass().AttachVGXEredinCloak();
		}
		
		if (ACS_Eredin_Skirt_Equipped_Check()
		&& FactsQuerySum("ACS_Eredin_Skirt_Equipped") > 0)
		{
			GetWildhuntAdditionalPiecesClass().AttachEredinSkirt();
		}

		if (ACS_Imlerith_Skirt_Equipped_Check()
		&& FactsQuerySum("ACS_Imlerith_Skirt_Equipped") > 0)
		{
			GetWildhuntAdditionalPiecesClass().AttachImlerithSkirt();
		}

		if (FactsQuerySum("ACS_WH_Armor_Equipped") > 0)
		{
			thePlayer.AddBuffImmunity(EET_Frozen , 'ACS_WH_Armor_Buff', true);
			thePlayer.AddBuffImmunity(EET_SlowdownFrost , 'ACS_WH_Armor_Buff', true);
			thePlayer.AddBuffImmunity(EET_Snowstorm , 'ACS_WH_Armor_Buff', true);
			thePlayer.AddBuffImmunity(EET_SnowstormQ403 , 'ACS_WH_Armor_Buff', true);

			RemoveTimer('ACS_Ice_Armor_Timer');
			AddTimer('ACS_Ice_Armor_Timer', 0.004, true);
		}


		if ((ACS_Knight_Armor_V1_Check())
		&& FactsQuerySum("ACS_Knight_Armor_V1_Equipped") > 0)
		{
			GetKnightAdditionalPiecesClass().ACS_Knight_Armor_V1_Pieces_Include();
		}

		if ((ACS_Knight_Armor_V2_Check())
		&& FactsQuerySum("ACS_Knight_Armor_V2_Equipped") > 0)
		{
			GetKnightAdditionalPiecesClass().ACS_Knight_Armor_V2_Pieces_Include();
		}
		
		if (ACS_Knight_Armor_V3_Check()
		&& FactsQuerySum("ACS_Knight_Armor_V3_Equipped") > 0)
		{
			GetKnightAdditionalPiecesClass().ACS_Knight_Armor_V3_Pieces_Include();
		}

		if (ACS_Knight_Armor_Gold_V1_Check()
		&& FactsQuerySum("ACS_Knight_Armor_Gold_V1_Equipped") > 0)
		{
			GetKnightAdditionalPiecesClass().ACS_Knight_Armor_Gold_V1_Pieces_Include();
		}

		if (ACS_Knight_Armor_Gold_V2_Check()
		&& FactsQuerySum("ACS_Knight_Armor_Gold_V2_Equipped") > 0)
		{
			GetKnightAdditionalPiecesClass().ACS_Knight_Armor_Gold_V2_Pieces_Include();
		}

		if (ACS_Vampire_Armor_Black_Check()
		&& FactsQuerySum("ACS_Vampire_Armor_Black_Equipped") > 0)
		{
			GetKnightAdditionalPiecesClass().ACS_Vampire_Armor_Black_Pieces_Include();
		}

		if (ACS_Vampire_Armor_Red_Check()
		&& FactsQuerySum("ACS_Vampire_Armor_Red_Equipped") > 0)
		{
			GetKnightAdditionalPiecesClass().ACS_Vampire_Armor_Red_Pieces_Include();
		}

		if (ACS_Witcher_Knight_Armor_V1_Check()
		&& FactsQuerySum("ACS_Witcher_Knight_Armor_V1_Equipped") > 0)
		{
			GetKnightAdditionalPiecesClass().ACS_Witcher_Knight_Armor_V1_Pieces_Include();
		}

		if (ACS_Witcher_Knight_Armor_V2_Check()
		&& FactsQuerySum("ACS_Witcher_Knight_Armor_V2_Equipped") > 0)
		{
			GetKnightAdditionalPiecesClass().ACS_Witcher_Knight_Armor_V2_Pieces_Include();
		}

		if (ACS_Witcher_Knight_Armor_V3_Check()
		&& FactsQuerySum("ACS_Witcher_Knight_Armor_V3_Equipped") > 0)
		{
			GetKnightAdditionalPiecesClass().ACS_Witcher_Knight_Armor_V3_Pieces_Include();
		}

		if (ACS_Witcher_Bear_Armor_Check()
		&& FactsQuerySum("ACS_Witcher_Bear_Armor_Equipped") > 0)
		{
			GetKnightAdditionalPiecesClass().ACS_Witcher_Bear_Armor_Fur_Include();
		}

		if ( FactsQuerySum("q401_cooking_enabled") <= 0 )
		{
			FactsAdd("q401_cooking_enabled", 1, -1);
		}

		if (FactsQuerySum("ACS_Rage_Sound_Played") > 0)
		{
			FactsRemove("ACS_Rage_Sound_Played");
		}

		if (FactsQuerySum("ACS_Minimap_Module_Hide") > 0)
		{
			FactsRemove("ACS_Minimap_Module_Hide");
		}

		if (FactsQuerySum("ACS_Quest_Module_Hide") > 0)
		{
			FactsRemove("ACS_Quest_Module_Hide");
		}

		if (FactsQuerySum("ACS_Buffs_Module_Hide") > 0)
		{
			FactsRemove("ACS_Buffs_Module_Hide");
		}

		if (FactsQuerySum("ACS_Control_Hint_Module_Hide") > 0)
		{
			FactsRemove("ACS_Control_Hint_Module_Hide");
		}

		if ( FactsQuerySum("ACS_Darkness_Upon_Us_Menu_Paused") > 0 )
		{
			FactsRemove("ACS_Darkness_Upon_Us_Menu_Paused");
		}

		if (FactsQuerySum("ACS_Wisp_Attack_Enable") > 0)
		{
			FactsRemove("ACS_Wisp_Attack_Enable");
		}

		thePlayer.RemoveTag('ACS_Player_In_Everstorm');
		thePlayer.RemoveTag('ACS_Player_In_Everstorm_Distance_1');
		thePlayer.RemoveTag('ACS_Player_In_Everstorm_Distance_2');
		thePlayer.RemoveTag('ACS_Player_In_Everstorm_Distance_3');
		thePlayer.RemoveTag('ACS_Player_In_Everstorm_Distance_4');

		HudModuleHideStartup();

		ACS_WispCheck();

		ACS_KestralCheck();

		ACS_PhoenixCheck();

		ACS_Restore_Darkness();

		thePlayer.RemoveBuffImmunity_AllNegative('ACS_Vampire_Claws_Sprint_Immunity_Negative'); 
		thePlayer.RemoveBuffImmunity_AllCritical('ACS_Vampire_Claws_Sprint_Immunity_Critical'); 

		thePlayer.RemoveBuffImmunity_AllNegative('ACS_Finisher_Immune_Critical'); 
		thePlayer.RemoveBuffImmunity_AllCritical('ACS_Finisher_Immune_Critical'); 

		thePlayer.RemoveBuffImmunity_AllNegative('ACS_Unconscious'); 
		thePlayer.RemoveBuffImmunity_AllCritical('ACS_Unconscious'); 

		thePlayer.RemoveBuffImmunity_AllNegative('ACS_Death'); 
		thePlayer.RemoveBuffImmunity_AllCritical('ACS_Death'); 
	}

	public timer function ACS_Set_Player_Scale ( dt : float, id : int){ ACS_Set_Player_Scale_Actual(); } 

	public timer function Remove_Player_Grow_Immediate ( dt : float, id : int){ RemoveTimer('Grow_Geralt_Immediate_Repeat'); AddTimer( 'ACS_Set_Player_Scale', 0.01, true );} 

	public timer function ACS_ENFORCE_INPUTS ( dt : float, id : int){ register_extra_inputs(); } 

	public timer function ACS_Shield_Spawn_Delay ( dt : float, id : int){action_interrupt(); if (thePlayer.HasTag('ACS_Size_Adjusted')) {Grow_Geralt_Immediate_Fast(); thePlayer.RemoveTag('ACS_Size_Adjusted'); }GetACSShieldClass().Axii_Persistent_Shield_Summon(); } 

	public timer function ACS_Embers_Timer ( dt : float, id : int){ EmbersIndicator(); } 

	public timer function ACS_Ice_Armor_Timer ( dt : float, id : int){ IceArmorIndicator(); } 

	public timer function ACS_Embers_Particles_Timer ( dt : float, id : int){ EmbersParticlesIndicator(); } 

	public timer function ACS_ResetAnimation ( dt: float, id : int){ if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();} } 

	public timer function ACS_ResetAnimation_On_Death ( dt: float, id : int){ thePlayer.ClearAnimationSpeedMultipliers(); } 

	public timer function ACS_Caranthir_ResetAnimation ( dt: float, id : int){ if( GetACSCanaris().IsAlive()) {GetACSCanaris().ClearAnimationSpeedMultipliers();} } 
	
	public timer function ACS_dodge_timer ( dt : float, id : int) { dodge_timer_actual(); } 
	
	public timer function ACS_dodge_timer_slideback ( dt : float, id : int) { dodge_timer_slideback_actual();} 
	
	public timer function ACS_dodge_timer_wildhunt ( dt : float, id : int) { dodge_timer_wildhunt_actual(); } 

	public timer function ACS_dodge_timer_fire ( dt : float, id : int) { dodge_timer_fire_actual(); } 

	public timer function ACS_dodge_timer_mage ( dt : float, id : int) { dodge_timer_mage_actual(); } 

	public timer function ACS_dodge_timer_dolphin ( dt : float, id : int) { dodge_timer_dolphin_actual(); } 

	public timer function ACS_dodge_timer_explosion ( dt : float, id : int) { dodge_timer_explosion_actual(); } 

	public timer function ACS_dodge_timer_fountain_portal ( dt : float, id : int) { dodge_timer_fountain_portal_actual(); } 

	public timer function ACS_dodge_timer_iris ( dt : float, id : int) { dodge_timer_iris_actual(); } 

	public timer function ACS_dodge_timer_lightning ( dt : float, id : int) { dodge_timer_lightning_actual(); } 
	
	public timer function ACS_hide_timer ( dt : float, id : int) { thePlayer.SetVisibility( false ); } 

	public timer function ACS_reveal_timer ( dt : float, id : int) { thePlayer.SetVisibility( true ); thePlayer.RemoveTag('ACS_In_Umbral_Slash_End');} 

	public timer function ACS_jump_attack_reveal_timer ( dt : float, id : int) { Jump_Attack_Reveal_Actual(); } 
	
	public timer function ACS_dodge_timer_attack ( dt : float, id : int) { dodge_timer_attack_actual(); } 
	
	public timer function ACS_dodge_timer_end ( dt : float, id : int) { dodge_timer_end_actual();} 
	
	public timer function ACS_bruxa_bite_delay ( dt : float, id : int) { bruxa_bite(); } 
	
	public timer function ACS_blood_suck_victim_paralyze ( dt : float, id : int) {blood_suck_victim_paralyze_actual();} 
	
	public timer function ACS_bruxa_blood_suck_repeat ( dt : float, id : int) {bruxa_blood_suck_repeat_actual();} 
	
	public timer function ACS_bruxa_tackle ( dt : float, id : int) { bruxa_tackle_actual(); } 

	public timer function ACS_Umbral_Slash_End ( dt : float, id : int) { Umbral_Slash_End_Actual(); } 

	public timer function ACS_Umbral_Slash_End_Effect_Repeat ( dt : float, id : int) { ACS_Umbral_Slash_End_Effect(); } 

	public timer function ACS_Umbral_Slash_End_Effect_Repeat_Stop ( dt : float, id : int) { RemoveTimer('ACS_Umbral_Slash_End_Effect_Repeat'); } 

	public timer function ACS_Revert_Env ( dt : float, id : int) {DeactivateEnvironment(umbralSlashEnvID, 1.f);} 

	public timer function ACS_Umbral_Slash_End_Damage ( dt : float, id : int) { ACS_Umbral_Slash_End_Effect(); ACS_Umbral_Slash_End_Damage_Actual(); } 
	
	public timer function ACS_alive_check ( dt : float, id : int) {alive_check_actual();} 
	
	public timer function ACS_Shout ( dt: float, id : int) { thePlayer.PlayEffectSingle('shout'); thePlayer.StopEffect('shout'); } 

	public timer function ACS_Shout_Stop ( dt: float, id : int) { thePlayer.StopEffect('shout'); } 

	public timer function ACS_Blood_Spray ( dt: float, id : int) { ACS_Blood_Spray_Actual(); } 

	public timer function ACS_ACS_Blood_Spray_Stop ( dt: float, id : int) { ACS_Stop_Blood_Spray_Actual(); } 
	
	public timer function ACS_portable_aard ( dt : float, id : int){ if (!thePlayer.IsAnyWeaponHeld() || thePlayer.IsWeaponHeld('fist')){ACS_Aard();}else{ACS_Giant_Shockwave();}} 
	
	public timer function ACS_wraith ( dt : float, id : int){ wraith_actual(); } 

	public timer function ACS_Gliding(deltaTime : float , id : int){ gliding_actual(); }
	
	public timer function ACS_collision_delay ( dt : float, id : int){ thePlayer.EnableCollisions(true); } 
	
	public timer function ACS_Bats_Summon_Repeat ( dt : float, id : int){ BatsSummonActual(); } 
	
	public timer function ACS_npc_fear_reaction ( dt : float, id : int){ NPC_Fear_Reaction(); } 

	public timer function ACS_Human_Death_Fear ( dt : float, id : int){ NPC_Death_Fear_Reaction(); } 

	public timer function ACS_Bruxa_Camo_Sonar_Timer ( dt : float, id : int){ ACS_Bruxa_Camo_Sonar_Timer_Actual(); } 

	public timer function ACS_ShootBowMoving ( dt : float, id : int){ geraltShootBowMoving(); } 

	public timer function ACS_ShootBowStationary ( dt : float, id : int){ geraltShootBowStationary(); } 

	public timer function ACS_Arrow_Create_Delay ( dt : float, id : int){ ACS_Arrow_Create(); PlayBowAnim_Reset();} 

	public timer function ACS_Arrow_Shoot_Delay ( dt : float, id : int){ ACS_Shoot_Bow(); } 

	public timer function ACS_Arrow_Rain_Shoot_Delay ( dt : float, id : int){ ACS_Shoot_Bow_Arrow_Rain(); } 

	public timer function ACS_ShootBowToIdle ( dt : float, id : int){ PlayBowAnim_ShootToIdle(); } 

	public timer function ACS_ShootBowToIdleArrowRain ( dt : float, id : int){ PlayBowAnim_ShootToIdle_ArrowRain(); } 

	public timer function ACS_ShootCrossbowToIdle ( dt : float, id : int){ PlayCrossbowAnim_ShootToIdle(); } 

	public timer function ACS_ShootCrossbowToAim ( dt : float, id : int){ PlayCrossbowAnim_ShootToAim(); } 
	
	public timer function ACS_HijackMoveForward(deltaTime : float , id : int){HijackMoveForwardActual();}
	
	public timer function ACS_Weapon_Summon_Delay(deltaTime : float , id : int){sword_summon_effect();}

	public timer function ACS_Dagger_Summon_Delay(deltaTime : float , id : int){dagger_summon_effect();}

	public timer function ACS_Yrden_Sidearm_Summon_Delay(deltaTime : float , id : int){yrden_sidearm_summon_effect();}
	
	public timer function ACS_ExplorationDelay(deltaTime : float , id : int){ACS_ExplorationDelay_actual();}

	public timer function ACS_WeaponEquipDelay(deltaTime : float , id : int){ACS_RandomWeaponEquipInit();}

	public timer function ACS_HeadbuttDamage(deltaTime : float , id : int){HeadbuttDamageActual();}

	public timer function ACS_PushDamage(deltaTime : float , id : int){PushDamageActual();}

	public timer function ACS_KickDamage(deltaTime : float , id : int){KickDamageActual();}

	public timer function ACS_ShieldEntityDamage(deltaTime : float , id : int){ShieldEntityDamageActual();}

	public timer function ACS_ShieldEntityDamage_2(deltaTime : float , id : int){ShieldEntityDamageActual();}

	public timer function ACS_ShieldEntityDamageShort(deltaTime : float , id : int){ShieldEntityDamageShortActual();}

	public timer function ACS_Forest_God_Spikes(deltaTime : float , id : int){ACS_Forest_God_Spikes_Actual();}

	public timer function ACS_Forest_God_Demonic_Effect(deltaTime : float , id : int){forest_god_demonic_effect_actual();}

	public timer function ACS_Bruxa_Scream_Release_Delay(deltaTime : float , id : int){ACS_Bruxa_Scream_Release();}

	public timer function ACS_Transformation_Bruxa_Scream_Release_Delay(deltaTime : float , id : int){ACS_Transformation_Bruxa_Scream_Release();}

	public timer function ACS_Water_Aard_Release_Repeat(deltaTime : float , id : int){ACS_Water_Aard_Release();}

	public timer function ACS_Water_Aard_Release_Stop(deltaTime : float , id : int){RemoveTimer('ACS_Water_Aard_Release_Repeat');}

	public timer function ACS_Finisher_Unblock_Action(deltaTime : float , id : int){finisherUnblockAction();}

	public timer function ACS_Death_Delay_Animation(deltaTime : float , id : int){Death_Delay_Animation_Actual();}

	public timer function ACS_Dagger_Destroy_Timer(deltaTime : float , id : int){ACS_Dagger_Destroy();}

	public timer function ACS_Yrden_Sidearm_Destroy_Timer(deltaTime : float , id : int){ACS_Yrden_Sidearm_Destroy();}

	public timer function ACS_Yrden_Sidearm_Destroy_Actual_Timer(deltaTime : float , id : int){ACS_Yrden_Sidearm_DestroyActual();}

	public timer function Gerry_Death_Scene( deltaTime : float , id : int){Gerry_Death_Scene_Actual();}

	public timer function Gerry_Unconscious_State( deltaTime : float , id : int){Gerry_Unconscious_State_Actual();}

	public timer function Unconscious_State_Restore( deltaTime : float , id : int){Unconscious_State_Restore_Actual();}

	public timer function KillGerry(deltaTime : float , id : int){ACS_Kill_Player();theSound.EnterGameState(ESGS_Movie);}

	public timer function KillGerry_NoMute(deltaTime : float , id : int){ACS_Kill_Player();}

	public timer function ACSFireBearFlameOnDelay(deltaTime : float , id : int){SetFireBearFlameOnProcess(false);}

	public timer function ACSFireBearFireLineDelay(deltaTime : float , id : int){ACS_Bear_FireLines();}

	public timer function ACSFireBearFireballLeftDelay(deltaTime : float , id : int){ACS_Bear_FireballLeft();}

	public timer function ACSFireBearFireballRightDelay(deltaTime : float , id : int){ACS_Bear_FireballRight();}

	public timer function DropBearSummon(deltaTime : float , id : int){ACS_dropbearsummon();}

	public timer function DropBearMeteor(deltaTime : float , id : int){ACS_dropbearmeteor();}

	public timer function DropBearMeteorAscend(deltaTime : float , id : int){ACS_FireBearMeteorAscend();}

	public timer function DropBearMeteorStart(deltaTime : float , id : int){SetFireBearFireLineProcess(false); SetFireBearFireballProcess(false); ACS_dropbearmeteorstart();}

	public timer function KnightmareEternumShout(deltaTime : float , id : int){ACS_KnightmareEternumShoutActual();}

	public timer function KnightmareEternumIgni(deltaTime : float , id : int){ACS_KnightmareEternumIgniActual();}

	public timer function ResetKnightmareEternumShoutProcess(deltaTime : float , id : int){SetKnightmareShoutProcess(false);}

	public timer function ResetKnightmareEternumIgniProcess(deltaTime : float , id : int){SetKnightmareIgniProcess(false);}

	public timer function Manual_Combat_Control_Remove(deltaTime : float , id : int){thePlayer.RemoveTag('ACS_Manual_Combat_Control');}

	public timer function SheWhoKnowsTeleportStart(deltaTime : float , id : int){ACS_SheWhoKnowsTeleportStartActual();}

	public timer function SheWhoKnowsTeleport(deltaTime : float , id : int){ACS_SheWhoKnowsTeleportActual();}

	public timer function SheWhoKnowsHide(deltaTime : float , id : int){ACS_SheWhoKnowsHideActual();}

	public timer function SheWhoKnowsShow(deltaTime : float , id : int){ACS_SheWhoKnowsShowActual();}

	public timer function SheWhoKnowsProjectileVolley1(deltaTime : float , id : int){ACS_SheWhoKnowsProjectileLaunch();}

	public timer function SheWhoKnowsProjectileVolley2(deltaTime : float , id : int){ACS_SheWhoKnowsProjectileLaunch();}

	public timer function SheWhoKnowsProjectileVolley3(deltaTime : float , id : int){ACS_SheWhoKnowsProjectileLaunch();}

	public timer function SheWhoKnowsProjectileSingle(deltaTime : float , id : int){ACS_SheWhoKnowsProjectileLaunchSingle();}

	public timer function SheWhoKnowsProjectileSingleStop(deltaTime : float , id : int){ACS_SheWhoKnowsProjectileLaunchSingleStop();}

	public timer function VampireMonsterDiveCancel(deltaTime : float , id : int){ACS_VampireMonsterDiveCancelActual();}

	public timer function VampireMonsterFlyAttack(deltaTime : float , id : int){ACS_VampireMonsterFlyAttackActual();}

	public timer function VampireMonsterDive(deltaTime : float , id : int){ACS_VampireMonsterDiveActual();}

	public timer function VampireMonsterSetFlyingProcessFalse(deltaTime : float , id : int){SetVampireMonsterFlyingProcess(false);}

	public timer function VampireMonsterSetSpawnProcessFalse(deltaTime : float , id : int){SetVampireMonsterSpawnProcess(false);}

	public timer function VampireMonsterSwarmAttackDamage(deltaTime : float , id : int){ACS_VampireMonsterSwarmAttackDamage();}

	public timer function VampireMonsterFlyAttackDamage(deltaTime : float , id : int){ACS_VampireMonsterFlyAttackDamage();}

	public timer function VampireMonsterCancel(deltaTime : float , id : int){ACS_VampireMonsterCancelActual();}

	public timer function VampireMonsterTeleport(deltaTime : float , id : int){ACS_VampireMonsterTeleportActual();}

	public timer function ACS_Flying_Anim(deltaTime : float , id : int){ACSFlyingAnimActual();}

	public timer function ACS_Flying_Anim_Stop(deltaTime : float , id : int){RemoveTimer('ACS_Flying_Anim');}

	public timer function Witch_Hunter_Throw_Bomb_Delay_Timer(deltaTime : float , id : int){Witch_Hunter_Throw_Bomb_Delay();}

	public timer function Witch_Hunter_Dimeritium_Sign_Restore(deltaTime : float , id : int){thePlayer.StopEffect('dimeritium_hit_electricity'); thePlayer.StopEffect('dimeritium_hit'); thePlayer.UnblockAction( EIAB_Signs, 				'ACS_Dimeritium');}

	public timer function Centipede_Green_Glow(deltaTime : float , id : int){GetACSEnemy().StopEffect('death_glow'); GetACSEnemy().PlayEffectSingle('death_glow');}

	public timer function Ice_Breathe_Reset(deltaTime : float , id : int){ACS_Ice_Breathe_Destroy();ACS_Ice_Breathe_Entity_RemoveTag();}

	public timer function ACS_WildHuntRiders_DeactivateFrostEffect(deltaTime : float , id : int){ACSWildHuntRiders_DeactivateFrostEffect_Actual();}

	public timer function ACS_WildHuntRiders_Destroy(deltaTime : float , id : int){ACSWildHuntRiders_Destroy();}

	public timer function RatMageSummonRats(deltaTime : float , id : int){ACS_RatMageSummonRatsActual();}

	public timer function RatMageProjectile(deltaTime : float , id : int){ACS_RatMageProjectileActual();}

	public timer function ACS_Eredin_Bossfight_Spawn_Delay(deltaTime : float , id : int){ACS_spawneredin();}

	public timer function ACS_Eredin_SetVisibility(deltaTime : float , id : int){GetACSEredin().SetVisibility( true ); GetACSEredin().PlayEffectSingle('disappear'); GetACSEredin().StopEffect('disappear');}

	public timer function ACS_Eredin_Kill_Timer(deltaTime : float , id : int){GetACSEredin().AddTag('ACS_Eredin_Going_Home'); GetACSEredin().Kill( 'ACSEredinGoodBye', false, GetACSEredin());}

	public timer function ACS_NightStalker_Kill_Timer(deltaTime : float , id : int){GetACSNightStalker().Kill( 'ACSNightStalkerGoodBye', false, GetACSNightStalker());}

	public timer function FireGargoyleJumpInDelay ( dt : float, id : int){ACS_FireGargoyleJumpIn();}

	public timer function FireGargoyleFireballDelay ( dt : float, id : int){ACS_FireGargoyleFireball();}

	public timer function LynxWitcherRemoveStealth( time : float , id : int ){ACSLynxWitcherRemoveStealth();}

	public timer function MelusineSpawnDelay( time : float , id : int ){ACS_MelusineSpawner();}

	function SpawnManager()
	{
		ACS_Startup_Entity_Spawner();

		ACS_Volumetric_Cloud_Spawner();

		//IDD_INIT();
	}

	function altSignCastingThing()
	{
		if(theGame.GetInGameConfigWrapper().GetVarValue('Gameplay', 'EnableAlternateSignCasting') == "1")
		{
			altSignCasting = true;
		}	
		else
		{
			altSignCasting = false;
		}
	}

	function GetIsAltSignCasting() : bool
	{
		return altSignCasting;
	}

	function GetIsAltSignCastingPressed() : bool
	{
		return altSignCasting  &&  theInput.GetActionValue('CastSign') > 0.7f;
	}

	function MimicReset()
	{
		var headcComponent 	: array< CComponent >;
			
		headcComponent.Clear();

		headcComponent = thePlayer.GetComponentsByClassName( 'CHeadManagerComponent' );

		( ( CHeadManagerComponent ) headcComponent[0] ).MimicTest( 'blink_normal_face' );
	}

	function LookatLoop()
	{
		var lookatactors 									: array<CActor>;
		var lookatents										: array<CGameplayEntity>;
		var i												: int;
		var curtime 										: float;
		var npccount 										: int;
		var targetpos 										: Vector;
		var camerapos 										: Vector;
		var camhead 										: Vector;
		var playerpos										: Vector;
		var interactionTarget								: CInteractionComponent;
		var tempTarget										: CGameplayEntity;
		var gameLightComp, gameInteractComp 				: CComponent;
		var ents											: array<CGameplayEntity>;

		if(
		!thePlayer.IsUsingVehicle() 
		&& !thePlayer.IsUsingHorse() 
		)
		{
			if (
			thePlayer.IsInCombat()
			|| thePlayer.IsThreatened()
			)
			{
				if (!thePlayer.HasTag('ACS_Is_In_Combat_Lookat'))
				{
					((CActor)thePlayer).DisableLookAt();

					thePlayer.RemoveTag('ACS_Is_Out_Of_Combat_Lookat');

					thePlayer.AddTag('ACS_Is_In_Combat_Lookat');
				}

				lookDistance = 4.5;

				curtime = theGame.GetEngineTimeAsSeconds();

				lookatactors.Clear();

				lookatactors = thePlayer.GetNPCsAndPlayersInRange( lookDistance, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

				for(i = 0; i < lookatactors.Size(); i += 1)
				{
					if (lookatactors.Size() > 0)
					{
						if(
						lookatactors[i]
						&& lookatactors[i].IsAlive()
						//&& ACS_AttitudeCheck ( (CActor)lookatactors[i] )
						&& (lookatactors[i] == (CActor)( thePlayer.GetTarget() ) || lookatactors[i] == (CActor)( thePlayer.moveTarget ))
						)
						{
							if(curtime > lastlooktime + 1 )
							{
								lookTargetentity = lookatactors[i];
								lastlooktime = theGame.GetEngineTimeAsSeconds();
								break;
							}
						}

						if(lookTargetentity != savedTarget)
						{
							((CActor)thePlayer).DisableLookAt();
							((CActor)thePlayer).EnableDynamicLookAt(lookTargetentity, 999);
						}
					
						savedTarget = lookTargetentity;
					}
					else if (lookatactors.Size() == 0)
					{
						((CActor)thePlayer).DisableLookAt();
						/*
						if(GetACSLookatEntity() != savedTarget)
						{
							((CActor)thePlayer).DisableLookAt();
							((CActor)thePlayer).EnableDynamicLookAt(GetACSLookatEntity(), 999);
						}
					
						savedTarget = GetACSLookatEntity();
						*/
					}
				}
			}
			else
			{
				if (!thePlayer.HasTag('ACS_Is_Out_Of_Combat_Lookat'))
				{
					((CActor)thePlayer).DisableLookAt();

					thePlayer.RemoveTag('ACS_Is_In_Combat_Lookat');

					thePlayer.AddTag('ACS_Is_Out_Of_Combat_Lookat');
				}

				if (thePlayer.IsInInterior())
				{
					if (!thePlayer.HasTag('ACS_Is_Inside_Disable_Lookat'))
					{
						((CActor)thePlayer).DisableLookAt();

						thePlayer.RemoveTag('ACS_Is_Outside_Disable_Lookat');

						thePlayer.AddTag('ACS_Is_Inside_Disable_Lookat');
					}

					lookDistance = 4.5;

					curtime = theGame.GetEngineTimeAsSeconds();

					lookatents.Clear();

					FindGameplayEntitiesInRange(lookatents, thePlayer, lookDistance, 20, ,FLAG_ExcludePlayer, ,);

					for(i = 0; i < lookatents.Size(); i += 1)
					{
						if (lookatents.Size() > 0)
						{
							gameLightComp = lookatents[i].GetComponentByClassName('CGameplayLightComponent');

							gameInteractComp = lookatents[i].GetComponentByClassName('CInteractionComponent');

							if(
							(CNewNPC)lookatents[i]
							|| (COilBarrelEntity)lookatents[i]
							|| gameLightComp
							|| gameInteractComp
							|| (W3AnimationInteractionEntity)lookatents[i]
							|| (CInteractiveEntity)lookatents[i]
							|| (W3NoticeBoard)lookatents[i]
							|| (W3FastTravelEntity)lookatents[i]
							|| (W3SmartObject)lookatents[i]
							|| (W3ItemRepairObject)lookatents[i]
							|| (W3AlchemyTable)lookatents[i]
							|| (W3Stables)lookatents[i]
							|| (W3LockableEntity)lookatents[i] 
							|| (W3Poster)lookatents[i]
							|| (W3LadderInteraction)lookatents[i]
							)
							{
								if(curtime > lastlooktime + 1 )
								{
									lookTargetentity = lookatents[i];
									lastlooktime = theGame.GetEngineTimeAsSeconds();
									break;
								}
							}

							if(lookTargetentity != savedTarget)
							{
								((CActor)thePlayer).DisableLookAt();
								((CActor)thePlayer).EnableDynamicLookAt(lookTargetentity, 999);
							}
						
							savedTarget = lookTargetentity;
						}
						else if (lookatents.Size() == 0)
						{
							if(GetACSLookatEntity() != savedTarget)
							{
								((CActor)thePlayer).EnableDynamicLookAt(GetACSLookatEntity(), 999);
							}
						
							savedTarget = GetACSLookatEntity();
						}
					}
				}
				else
				{
					savedTarget = GetACSLookatEntity();

					if (!thePlayer.HasTag('ACS_Is_Outside_Disable_Lookat'))
					{
						((CActor)thePlayer).DisableLookAt();

						thePlayer.RemoveTag('ACS_Is_Inside_Disable_Lookat');

						thePlayer.AddTag('ACS_Is_Outside_Disable_Lookat');
					}

					((CActor)thePlayer).EnableDynamicLookAt(GetACSLookatEntity(), 999);
				}
			}		
		}
		else
		{
			((CActor)thePlayer).DisableLookAt();
		}

		camerapos = theCamera.GetCameraPosition();
		camhead = VecFromHeading(theCamera.GetCameraHeading());
		playerpos = GetWorldPosition();
		targetpos = camerapos + camhead * 10;
	
		if(camerapos.Z > playerpos.Z + 1.85)
		{
			targetpos.Z = camerapos.Z - 4;
		}
		if(camerapos.Z < playerpos.Z + 1.3)
		{
			targetpos.Z = camerapos.Z + 4;
		}

		(GetACSLookatEntity()).TeleportWithRotation(targetpos, thePlayer.GetWorldRotation());
	}

	function register_extra_inputs()
	{
		if (!thePlayer.IsCiri())
		{
			if ( !theGame.IsDialogOrCutscenePlaying() 
			&& !thePlayer.IsInNonGameplayCutscene() 
			&& !thePlayer.IsInGameplayScene() 
			&& !theGame.IsCurrentlyPlayingNonGameplayScene()
			&& !theGame.IsFading()
			&& !theGame.IsBlackscreen()
			&& !theGame.IsPaused() 
			)
			{
				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'CastSign' );

				theInput.RegisterListener( this, 'OnCastSign', 'CastSign' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'AltQuenCasting' );

				theInput.RegisterListener( this, 'OnAltQuen', 'AltQuenCasting' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'Focus' );

				theInput.RegisterListener( this, 'OnExpFocus', 'Focus' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'MovementDoubleTapW' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'MovementDoubleTapS' ); 

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'MovementDoubleTapA' ); 

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'MovementDoubleTapD' ); 

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'Dodge' );

				theInput.RegisterListener( this, 'OnMovementDoubleTapW', 'MovementDoubleTapW' );

				theInput.RegisterListener( this, 'OnMovementDoubleTapS', 'MovementDoubleTapS' ); 

				theInput.RegisterListener( this, 'OnMovementDoubleTapA', 'MovementDoubleTapA' ); 

				theInput.RegisterListener( this, 'OnMovementDoubleTapD', 'MovementDoubleTapD' ); 

				theInput.RegisterListener( this, 'OnMoveForward', 'GI_AxisLeftY' );

				//theInput.RegisterListener( this, 'OnMoveBackward', 'GI_AxisRightY' );

				theInput.RegisterListener( this, 'OnMoveSide', 'GI_AxisLeftX' );

				theInput.RegisterListener( this, 'OnJump', 'Jump' );

				//theInput.RegisterListener( this, 'OnMoveSideLeft', 'GI_AxisRightX' );

				theInput.RegisterListener( this, 'OnCbtDodge', 'Dodge' );

				theInput.RegisterListener(this, 'OnACSFacemaskToggle', 'ACSFacemaskToggle');

				theInput.RegisterListener(this, 'OnACSHelmToggle', 'ACSHelmToggle');

				theInput.RegisterListener(this, 'OnACSShoulderToggle', 'ACSShoulderToggle');

				///////////////////////////////////////////////////////////////////////////////////////////////////////////

				if (ACS_OverrideMeditationButton_Enabled())
				{
					theInput.UnregisterListener( thePlayer.GetInputHandler(), 'PanelMeditation' );

					theInput.RegisterListener( this, 'OnCommPanelMeditation', 'PanelMeditation' );
				}
				else
				{
					theInput.UnregisterListener( this, 'PanelMeditation' );
					theInput.RegisterListener( thePlayer.GetInputHandler(), 'OnCommPanelMeditation', 'PanelMeditation' );
				}

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'AttackHeavy' );

				theInput.RegisterListener( this, 'OnCbtAttackHeavy', 'AttackHeavy' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'AttackWithAlternateLight' );

				theInput.RegisterListener( this, 'OnCbtAttackWithAlternateLight', 'AttackWithAlternateLight' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'AttackWithAlternateHeavy' );

				theInput.RegisterListener( this, 'OnCbtAttackWithAlternateHeavy', 'AttackWithAlternateHeavy' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'AttackLight' );

				theInput.RegisterListener( this, 'OnCbtAttackLight', 'AttackLight' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'SpecialAttackLight' );

				theInput.RegisterListener( this, 'OnCbtSpecialAttackLight', 'SpecialAttackLight' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'SpecialAttackWithAlternateLight' );

				theInput.RegisterListener( this, 'OnCbtSpecialAttackWithAlternateLight', 'SpecialAttackWithAlternateLight' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'SpecialAttackWithAlternateHeavy' );

				theInput.RegisterListener( this, 'OnCbtSpecialAttackWithAlternateHeavy', 'SpecialAttackWithAlternateHeavy' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'ToggleSigns' );

				theInput.RegisterListener( this, 'OnToggleSigns', 'ToggleSigns' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'SpecialAttackHeavy' );

				theInput.RegisterListener( this, 'OnCbtSpecialAttackHeavy', 'SpecialAttackHeavy' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'CbtRoll' );

				theInput.RegisterListener( this, 'OnCbtRoll', 'CbtRoll' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'LockAndGuard' );

				theInput.RegisterListener( this, 'OnCbtLockAndGuard', 'LockAndGuard' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'GPadLockandGuard' );

				theInput.RegisterListener( this, 'OnCbtLockAndGuard', 'GPadLockandGuard' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'CameraLock' );

				theInput.RegisterListener( this, 'OnCbtCameraLock', 'CameraLock' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'CameraLockOrSpawnHorse' );

				theInput.RegisterListener( this, 'OnCbtCameraLockOrSpawnHorse', 'CameraLockOrSpawnHorse' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'SpawnHorse' );

				theInput.RegisterListener( this, 'OnCommSpawnHorse', 'SpawnHorse' );


				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'DrinkPotionUpperHold' );

				theInput.RegisterListener( this, 'OnCommDrinkpotionUpperHeld', 'DrinkPotionUpperHold' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'DrinkPotionLowerHold' );

				theInput.RegisterListener( this, 'OnCommDrinkpotionLowerHeld', 'DrinkPotionLowerHold' );

				if (FactsQuerySum("ACS_HijackWalkControl") <= 0)
				{
					theInput.UnregisterListener( thePlayer.GetInputHandler(), 'DrinkPotion3' ); 

					theInput.RegisterListener( this, 'OnCommDrinkPotion3', 'DrinkPotion3' );
				}

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'DrinkPotion4' ); 

				theInput.RegisterListener( this, 'OnCommDrinkPotion4', 'DrinkPotion4' );


				if(!theGame.IsFocusModeActive())
				{
					theInput.UnregisterListener( thePlayer.GetInputHandler(), 'DrinkPotion1' );

					theInput.RegisterListener( this, 'OnCommDrinkPotion1', 'DrinkPotion1' );

					theInput.UnregisterListener( thePlayer.GetInputHandler(), 'DrinkPotion2' ); 

					theInput.RegisterListener( this, 'OnCommDrinkPotion2', 'DrinkPotion2' );
				}

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'Guard' );

				theInput.RegisterListener( this, 'OnCommGuard', 'Guard' );

				if ( ACS_BruxaDashSprintOrW() == 1 
				|| ACS_WraithModeSprintOrW() == 1
				|| ACS_Transformation_Activated_Check()
				|| FactsQuerySum("ACS_Meditation_Camera_Override") > 0
				)
				{
					theInput.UnregisterListener( thePlayer.GetInputHandler(), 'Sprint' );
					theInput.RegisterListener( this, 'OnCommSprint', 'Sprint' );
				}
				else
				{
					theInput.UnregisterListener( this, 'Sprint' );
					theInput.RegisterListener( thePlayer.GetInputHandler(), 'OnCommSprint', 'Sprint' );
				}

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'SteelSword' );
				theInput.RegisterListener( this, 'OnCommSteelSword', 'SteelSword' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'SilverSword' );
				theInput.RegisterListener( this, 'OnCommSilverSword', 'SilverSword' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'SwordSheatheSilver' );
				theInput.RegisterListener( this, 'OnCommSheatheSilver', 'SwordSheatheSilver' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'SwordSheatheSteel' );
				theInput.RegisterListener( this, 'OnCommSheatheSteel', 'SwordSheatheSteel' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'ThrowItem' );
				theInput.RegisterListener( this, 'OnCbtThrowItem', 'ThrowItem' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'ThrowItemHold' );
				theInput.RegisterListener( this, 'OnCbtThrowItemHold', 'ThrowItemHold' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'ThrowCastAbort' );
				theInput.RegisterListener( this, 'OnCbtThrowCastAbort', 'ThrowCastAbort' );

				//theInput.UnregisterListener( thePlayer.GetInputHandler(), 'Spare' );
				//theInput.RegisterListener( this, 'OnSpare', 'Spare' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'SelectAard' );
				theInput.RegisterListener( this, 'OnSelectSign', 'SelectAard' );
				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'SelectYrden' );
				theInput.RegisterListener( this, 'OnSelectSign', 'SelectYrden' );
				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'SelectIgni' );
				theInput.RegisterListener( this, 'OnSelectSign', 'SelectIgni' );
				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'SelectQuen' );
				theInput.RegisterListener( this, 'OnSelectSign', 'SelectQuen' );
				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'SelectAxii' );
				theInput.RegisterListener( this, 'OnSelectSign', 'SelectAxii' );

			}
		}
	}

	private var processedSwordHold : bool;
	
	event OnCommSteelSword( action : SInputAction )
	{
		var duringCastSign : bool;

		if (ACS_Transformation_Activated_Check())
		{
			if(IsPressed(action))
			{
				if (ACS_Transformation_Vampiress_Check())
				{
					ACS_VampiressBehSwitch();
				}

				if (ACS_Transformation_Vampire_Monster_Check())
				{
					if(theInput.GetActionValue('Sprint'))
					{
						return false;
					}

					if(ACS_can_perform_transformation_special_attack())
					{
						ACS_refresh_transformation_special_attack_cooldown();

						ACS_VampireMonsterBehSwitch();
					}
				}
			}

			return false;
		}
		
		if(IsPressed(action))
			processedSwordHold = false;
		
		if ( theInput.LastUsedGamepad() && theInput.IsActionPressed('Alternate') )
		{
			return false;
		}
		
		if ( IsReleased(action) || ( IsPressed(action) && (thePlayer.GetCurrentMeleeWeaponType() == PW_None || thePlayer.GetCurrentMeleeWeaponType() == PW_Fists) ) )
		{
			if( !processedSwordHold )
			{
				if ( thePlayer.IsActionAllowed(EIAB_DrawWeapon) && thePlayer.GetBIsInputAllowed() && thePlayer.GetWeaponHolster().IsMeleeWeaponReady() )
				{
					thePlayer.PushCombatActionOnBuffer( EBAT_Draw_Steel, BS_Pressed );
					if ( thePlayer.GetBIsCombatActionAllowed() )
						thePlayer.ProcessCombatActionBuffer();
				}
				processedSwordHold = true;
			}
		}
	}
	
	event OnCommSilverSword( action : SInputAction )
	{
		var duringCastSign : bool;

		if (ACS_Transformation_Activated_Check())
		{
			if(IsPressed(action))
			{
				if (ACS_Transformation_Vampiress_Check())
				{
					ACS_VampiressBehSwitch();
				}

				if (ACS_Transformation_Vampire_Monster_Check())
				{
					if(ACS_can_perform_transformation_special_attack())
					{
						ACS_refresh_transformation_special_attack_cooldown();

						ACS_VampireMonsterArmorSwitch();
					}
				}
			}

			return false;
		}
		
		if( IsPressed(action) )
			processedSwordHold = false;
		
		if ( theInput.LastUsedGamepad() && theInput.IsActionPressed('Alternate') )
		{
			return false;
		}
		
		if ( IsReleased(action) || ( IsPressed(action) && (thePlayer.GetCurrentMeleeWeaponType() == PW_None || thePlayer.GetCurrentMeleeWeaponType() == PW_Fists) ) )
		{
			if( !processedSwordHold )
			{
				if ( thePlayer.IsActionAllowed(EIAB_DrawWeapon) && thePlayer.GetBIsInputAllowed() && thePlayer.GetWeaponHolster().IsMeleeWeaponReady() )
				{
					thePlayer.PushCombatActionOnBuffer( EBAT_Draw_Silver, BS_Pressed );
					if ( thePlayer.GetBIsCombatActionAllowed() || duringCastSign )
						thePlayer.ProcessCombatActionBuffer();
				}
				processedSwordHold = true;
			}
			
		}
	}

	event OnCommSheatheAny( action : SInputAction )
	{
		var duringCastSign : bool;
		
		if( IsPressed( action ) )
		{
			if ( thePlayer.GetBIsInputAllowed() && thePlayer.GetWeaponHolster().IsMeleeWeaponReady() )
			{
				thePlayer.PushCombatActionOnBuffer( EBAT_Sheathe_Sword, BS_Pressed );
				if ( thePlayer.GetBIsCombatActionAllowed() || duringCastSign )
				{
					thePlayer.ProcessCombatActionBuffer();
				}
			}
			processedSwordHold = true;
		}		
	}

	event OnCommSheatheSteel( action : SInputAction )
	{
		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}

		if( IsPressed( action ) && thePlayer.IsWeaponHeld( 'steelsword' ) && !processedSwordHold)
		{
			OnCommSheatheAny(action);
		}
	}
	
	event OnCommSheatheSilver( action : SInputAction )
	{
		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}

		if( IsPressed( action ) && thePlayer.IsWeaponHeld( 'silversword' ) && !processedSwordHold)
		{
			OnCommSheatheAny(action);
		}
	}

	function EECheck() : bool
	{
		if (
		(ACS_W3EE_Installed() && ACS_W3EE_Enabled() )
		||
		(ACS_W3EE_Redux_Installed() && ACS_W3EE_Redux_Enabled() )
		)
		{
			return true;
		}

		return false;
	}

	timer function AutoCatDelay(deltaTime : float , id : int)
	{
		if (FactsQuerySum("ACS_AutoCat_Enabled") > 0)
		{
			if (!thePlayer.HasBuff(EET_Cat))
			{
				DisableCatViewFx( 0.5f );
			}

			FactsRemove("ACS_AutoCat_Enabled");
		}
		else
		{
			if (!thePlayer.HasBuff(EET_Cat) 
			&& !EECheck()
			&& !thePlayer.HasTag('ACS_Camo_Active')
			)
			{
				if ( FactsQuerySum("ACS_AutoCat_Enabled") <= 0 )
				{
					ACS_Night_Vision_Tutorial();
					
					EnableCatViewFx( 0.5f );	
					SetTintColorsCatViewFx(Vector(0.1f,0.12f,0.13f,0.6f),Vector(0.075f,0.1f,0.11f,0.6f),0.2f);
					SetBrightnessCatViewFx(350.0f);
					SetViewRangeCatViewFx(200.0f);
					SetPositionCatViewFx( Vector(0,0,0,0) , true );	
					SetHightlightCatViewFx( Vector(0.5f,0.2f,0.2f,1.f),0.05f,1.5f);
					SetFogDensityCatViewFx( 0.5 );
					
					FactsAdd("ACS_AutoCat_Enabled", 1, -1);
				}
			}
		}
	}

	function AutoCat()
	{
		RemoveTimer('AutoCatDelay');
		AddTimer('AutoCatDelay', 1, false);
	}

	function DisableCat()
	{
		RemoveTimer('AutoCatDelay');

		/*
		if (FactsQuerySum("ACS_AutoCat_Enabled") > 0)
		{
			if (!thePlayer.HasBuff(EET_Cat))
			{
				DisableCatViewFx( 0.5f );
			}

			FactsRemove("ACS_AutoCat_Enabled");
		}
		*/
	}

	function DisableCatFallback()
	{
		if (
		theGame.IsDialogOrCutscenePlaying() 
		|| thePlayer.IsInNonGameplayCutscene() 
		|| thePlayer.IsInGameplayScene()
		|| theGame.IsCurrentlyPlayingNonGameplayScene()
		|| theGame.IsFading()
		|| theGame.IsBlackscreen()
		)
		{
			RemoveTimer('AutoCatDelay');

			if (FactsQuerySum("ACS_AutoCat_Enabled") > 0)
			{
				if (!thePlayer.HasBuff(EET_Cat))
				{
					DisableCatViewFx( 0.5f );
				}

				FactsRemove("ACS_AutoCat_Enabled");
			}
		}
	}

	event OnExpFocus( action : SInputAction )
	{
		altSignCastingThing();

		if(!thePlayer.IsCiri())
		{
			if(altSignCasting && !theInput.LastUsedPCInput() && theInput.GetActionValue('CastSign') > 0.7f && !GetWitcherPlayer().IsCurrentSignChanneled())
			{
				if(IsPressed( action ))
				{
					theGame.GetFocusModeController().Deactivate(); 

					CreateSignSymbol(action);
					AltCastSign(ST_Igni);
					return false;
				} 
				else if (IsReleased( action ) && GetWitcherPlayer().IsCurrentSignChanneled())
				{
					thePlayer.AbortSign();
				}
			}
		}
		
		if(thePlayer.IsCiri() && thePlayer.IsActionAllowed(EIAB_ExplorationFocus))
		{
			if( IsPressed( action ) )
			{
				if( thePlayer.GoToCombatIfNeeded() )
				{
					OnCommGuard( action );
					return false;
				}

				if (ACS_Focus_Mode_Toggle_Enabled())
				{
					if( theGame.GetFocusModeController().IsActive() )
					{
						theGame.GetFocusModeController().Deactivate();
					}
					else
					{
						theGame.GetFocusModeController().Activate();
					}
				}
				else
				{
					theGame.GetFocusModeController().Activate();
				}
			}
			else if( IsReleased( action ) )
			{
				if (!ACS_Focus_Mode_Toggle_Enabled())
				{
					theGame.GetFocusModeController().Deactivate();
				}
			}
		}
		else if(thePlayer.IsActionAllowed(EIAB_ExplorationFocus) && !GetWitcherPlayer().IsCurrentSignChanneled()) 
		{
			if( IsPressed( action ) )
			{
				
				if( thePlayer.GoToCombatIfNeeded() )
				{
					OnCommGuard( action );
					return false;
				}

				if (ACS_Focus_Mode_Toggle_Enabled())
				{
					if( theGame.GetFocusModeController().IsActive() )
					{
						theGame.GetFocusModeController().Deactivate();
					}
					else
					{
						theGame.GetFocusModeController().Activate();
					}
				}
				else
				{
					theGame.GetFocusModeController().Activate();
				}
			}
			else if( IsReleased( action ) )
			{
				if (!ACS_Focus_Mode_Toggle_Enabled())
				{
					theGame.GetFocusModeController().Deactivate();
				}
			}
		}
		else
		{
			thePlayer.DisplayActionDisallowedHudMessage(EIAB_ExplorationFocus);
			theGame.GetFocusModeController().Deactivate();
		}
	}

	var ACS_Cast_Sign_Process : bool;
	default ACS_Cast_Sign_Process = false;

	function SetCastSignProcess( flag : bool )
	{
		ACS_Cast_Sign_Process = flag;
	}

	function GetCastSignProcess() : bool 
	{
		return ACS_Cast_Sign_Process;
	}

	public timer function ResetCastSignProcess(deltaTime : float , id : int)
	{
		SetCastSignProcess(false);
	}

	private function AltCastSign(signType : ESignType)
	{
		var signSkill : ESkill;	
		
		if( !thePlayer.GetBIsInputAllowed() )
		{	
			return;
		}
	
		if( !thePlayer.IsActionAllowed(EIAB_Signs) || GetWitcherPlayer().IsSignBlocked(signType) )
		{				
			thePlayer.DisplayActionDisallowedHudMessage(EIAB_Signs);
			return;
		}
		if ( thePlayer.IsHoldingItemInLHand() && thePlayer.IsUsableItemLBlocked() )
		{
			thePlayer.DisplayActionDisallowedHudMessage(EIAB_Undefined, false, false, true);
			return;
		}

		if (ACS_GM_Installed() && ACS_GM_Enabled())
		{
			if (!GM_Can_Use_Sign(thePlayer.GetEquippedSign()))
			{
				return;
			}
		}

		signSkill = SignEnumToSkillEnum(signType);
		if( signSkill != S_SUndefined )
		{
			if(!thePlayer.CanUseSkill(signSkill))
			{
				thePlayer.DisplayActionDisallowedHudMessage(EIAB_Signs, false, false, true);
				return;
			}
		
			if( thePlayer.HasStaminaToUseSkill( signSkill, false ) )
			{
				GetWitcherPlayer().SetEquippedSign(signType);			

				//thePlayer.SetupCombatAction( EBAT_CastSign, BS_Pressed );

				ACS_Setup_Combat_Action_CastSign();
			}
			else
			{
				thePlayer.SoundEvent("gui_no_stamina");
			}
		}
	}
	
	/*
	public function ApplyCastSettings()
	{
		ApplyGamepadTriggerEffect( thePlayer.GetEquippedSign() );
	}

	private function ApplyGamepadTriggerEffect( type : ESignType )
	{
		var mode : int;
		var param : array<Vector>;
		var cur_sign : W3SignEntity;
		var sign_skill : ESkill;

		sign_skill = SignEnumToSkillEnum( type );

		if( !thePlayer.CanUseSkill(sign_skill)  ||  !thePlayer.HasStaminaToUseSkill(sign_skill,false) )
		{
			theGame.SetTriggerEffect( 1, GTFX_Off, param );
			theGame.SetTriggerEffect( 0, GTFX_Off, param );
			if(theInput.GetActionValue('CastSign') > 0.7f)
			{
				lastPressedWithNostamina = true;
			}
			return;
		}
		if(lastPressedWithNostamina && !theInput.GetActionValue('CastSign') > 0.7f)
		{
			lastPressedWithNostamina = false;
		}

		if(lastPressedWithNostamina)
		{
			return;
		}

		if( type == ST_Igni  &&  thePlayer.IsCurrentSignChanneled() )
		{
			mode = GTFX_MultiVibration;
			
			param.Resize( 10 );
			param[0].Y = 0.3; 
			param[0].X = 0.0;
			param[1].X = 0.0;
			param[2].X = 0.0;
			param[3].X = 0.0;
			param[4].X = 0.0;
			param[5].X = 0.0;
			param[6].X = 0.8;
			param[7].X = 0.8;
			param[8].X = 0.8;
			param[9].X = 0.9;

			theGame.SetTriggerEffect( 1, mode, param );
			return;
		}

		if( type == ST_Quen  &&  thePlayer.HasBuff( EET_BasicQuen ) )
		{
			mode = GTFX_MultiVibration;
			
			param.Resize( 10 );
			param[0].Y = 0.5; 
			param[0].X = 0.0;
			param[1].X = 0.0;
			param[2].X = 0.0;
			param[3].X = 0.0;
			param[4].X = 0.0;
			param[5].X = 0.0;
			param[6].X = 0.8;
			param[7].X = 0.8;
			param[8].X = 0.99;
			param[9].X = 0.99;

			theGame.SetTriggerEffect( 1, mode, param );
			return;
		}

		if( 	
			theGame.IsPaused() 
			|| theGame.IsDialogOrCutscenePlaying() 
			|| theGame.IsCurrentlyPlayingNonGameplayScene()
			)
		{
			theGame.SetTriggerEffect( 1, GTFX_Off, param );
			theGame.SetTriggerEffect( 0, GTFX_Off, param );

			return;
		}

		mode = GTFX_Off;
		
		if( GetIsAltSignCasting() )
		{
			mode = GTFX_Vibration;
			
			param.Resize( 1 );
			param[0].X = 0.9; 
			param[0].Y = 0.1; 
			param[0].Z = 0.15; 

			theGame.SetTriggerEffect( 1, mode, param );
			
			if( GetIsAltSignCastingPressed() )
			{
				mode = GTFX_Weapon;

				param.Resize( 1 );
				param[0].X = 0.1; 
				param[0].Y = 0.5; 
				param[0].Z = 1.0; 
				
				theGame.SetTriggerEffect( 0, mode, param );
			}
			else
			{
				theGame.SetTriggerEffect( 0, GTFX_Off, param );
			}
		}
		else
		{
			if( type == ST_Aard )
			{
				mode = GTFX_MultiFeedback;
				
				param.Resize( 10 );
				param[0].X = 0.0;
				param[1].X = 0.0;
				param[2].X = 0.0;
				param[3].X = 0.1;
				param[4].X = 0.2;
				param[5].X = 0.2;
				param[6].X = 0.0;
				param[7].X = 0.0;
				param[8].X = 0.4;
				param[9].X = 0.4;
			}
			else if( type == ST_Axii )
			{
				mode = GTFX_Vibration;
				
				param.Resize( 1 );
				param[0].X = 0.8; 
				param[0].Y = 0.15; 
				param[0].Z = 0.2; 
			}
			else if( type == ST_Igni )
			{
				mode = GTFX_Weapon;

				param.Resize( 1 );
				param[0].X = 0.5; 
				param[0].Y = 0.7; 
				param[0].Z = 1.0; 
			}
			else if( type == ST_Quen )
			{
				mode = GTFX_Vibration;
				
				param.Resize( 1 );
				param[0].X = 0.8; 
				param[0].Y = 0.25; 
				param[0].Z = 0.7; 
			}
			else if( type == ST_Yrden )
			{
				mode = GTFX_Vibration;
				
				param.Resize( 1 );
				param[0].X = 0.9; 
				param[0].Y = 0.5; 
				param[0].Z = 0.99; 
			}
			
			theGame.SetTriggerEffect( 1, mode, param );
			theGame.SetTriggerEffect( 0, GTFX_Off, param );
		}		

	}
	*/

	var restoreItemLAtEnd 		: bool;

	public timer function ACS_LightFiresTimer(deltaTime : float , id : int)
	{
		ACS_LightFires();
		//ACS_LightFireSources();
	}

	public timer function ACS_ExtinguishFiresTimer(deltaTime : float , id : int)
	{
		ACS_ExtinguishFires();
		//ACS_ExtinguishFireSources();
	}

	function ACS_LightFiresCheck() : bool
	{
		var i : int;
		var ents : array<CGameplayEntity>;
		var gameplayLightComp, pointLightComp : CComponent;

		ents.Clear();
		
		FindGameplayEntitiesInRange(ents,thePlayer,ACS_FireSourcesRange(),ACS_FireSourcesEntities(),,FLAG_ExcludePlayer,, );
		
		for ( i = 0; i < ents.Size(); i+=1 )
		{
			gameplayLightComp = ents[i].GetComponentByClassName('CGameplayLightComponent');

			pointLightComp = ents[i].GetComponentByClassName('CPointLightComponent');

			if(gameplayLightComp)
			{
				return true;
			}

			if (pointLightComp)
			{
				return true;
			}
		}
		
		return false;
	}

	function ACS_LightFires()
	{
		var i : int;
		var ents : array<CGameplayEntity>;
		var gameplayLightComp, pointLightComp : CComponent;

		ents.Clear();
		
		FindGameplayEntitiesInRange(ents,thePlayer,ACS_FireSourcesRange(),ACS_FireSourcesEntities(),,FLAG_ExcludePlayer,, );
		
		for ( i = 0; i < ents.Size(); i+=1 )
		{
			gameplayLightComp = ents[i].GetComponentByClassName('CGameplayLightComponent');

			pointLightComp = ents[i].GetComponentByClassName('CPointLightComponent');

			if(gameplayLightComp)
			{
				if (((CGameplayLightComponent)gameplayLightComp).IsInteractive())
				{
					((CGameplayLightComponent)gameplayLightComp).SetInteractive(false);
				}
				else if (!((CGameplayLightComponent)gameplayLightComp).IsInteractive())
				{
					((CGameplayLightComponent)gameplayLightComp).SetInteractive(true);
				}
				

				if (!((CGameplayLightComponent)gameplayLightComp).IsLightOn())
				{
					((CGameplayLightComponent)gameplayLightComp).SetFadeLight(true);
				}
			}

			if (pointLightComp)
			{
				if (!ents[i].IsEffectActive('fire', false))
				{
					ents[i].PlayEffectSingle('fire');
				}

				if (!ents[i].IsEffectActive('light_on', false))
				{
					ents[i].PlayEffectSingle('light_on');
				}

				if (!ents[i].IsEffectActive('light_on_bob', false))
				{
					ents[i].PlayEffectSingle('light_on_bob');
				}
				
				((CPointLightComponent)pointLightComp).SetEnabled(true);
			}
		}
		
		if ( restoreItemLAtEnd )
		{
			thePlayer.OnUseSelectedItem();
			restoreItemLAtEnd = false;
		}
	}

	function ACS_LightFireSources()
	{
		var i : int;
		var ents : array<CGameplayEntity>;
		var gameplayLightComp, pointLightComp : CComponent;
		
		ents.Clear();
		
		FindGameplayEntitiesInRange(ents,thePlayer,20,20,,FLAG_ExcludePlayer,,'W3FireSource' );
		
		for ( i = 0; i < ents.Size(); i+=1 )
		{
			gameplayLightComp = ents[i].GetComponentByClassName('CGameplayLightComponent');

			if(gameplayLightComp)
			{
				if (((CGameplayLightComponent)gameplayLightComp).IsInteractive())
				{
					((CGameplayLightComponent)gameplayLightComp).SetInteractive(false);
				}
				else if (!((CGameplayLightComponent)gameplayLightComp).IsInteractive())
				{
					((CGameplayLightComponent)gameplayLightComp).SetInteractive(true);
				}
				

				if (!((CGameplayLightComponent)gameplayLightComp).IsLightOn())
				{
					((CGameplayLightComponent)gameplayLightComp).SetLight(true);
				}
			}
		}
		
		if ( restoreItemLAtEnd )
		{
			thePlayer.OnUseSelectedItem();
			restoreItemLAtEnd = false;
		}
	}

	function ACS_ExtinguishFires()
	{
		var i 										: int;
		var ents 									: array<CGameplayEntity>;
		var gameplayLightComp, pointLightComp 		: CComponent;
		var npcAnimatedComponent 					: CAnimatedComponent;
		
		ents.Clear();
		
		FindGameplayEntitiesInRange(ents,thePlayer,ACS_FireSourcesRange(),ACS_FireSourcesEntities(),,FLAG_ExcludePlayer,, );
		
		for ( i = 0; i < ents.Size(); i+=1 )
		{
			if (StrContains( ((CActor)(ents[i])).GetReadableName(), "torch" ) )
			{
				if (
					((CActor)(ents[i])).GetInventory().IsIdValid( ((CActor)(ents[i])).GetInventory().GetItemFromSlot('r_weapon') )
					|| ((CActor)(ents[i])).GetInventory().IsIdValid( ((CActor)(ents[i])).GetInventory().GetItemFromSlot('l_weapon') )
				)
				{
					npcAnimatedComponent = (CAnimatedComponent)((CActor)(ents[i])).GetComponentByClassName( 'CAnimatedComponent' );

					npcAnimatedComponent.PlaySlotAnimationAsync ( 'reaction_surprise_fwd', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25, 0.25) );

					((CActor)(ents[i])).DropItemFromSlot('r_weapon');

					((CActor)(ents[i])).DropItemFromSlot('l_weapon');

					//((CActor)(ents[i])).SignalGameplayEvent( 'AI_GetOutOfTheWay' ); 
			
					//((CActor)(ents[i])).SignalGameplayEventParamObject( 'CollideWithPlayer', ((CActor)(ents[i])) ); 

					//theGame.GetBehTreeReactionManager().CreateReactionEvent( ((CActor)(ents[i])), 'BumpAction', 1, 1, 1, 1, false );
				}
			}

			gameplayLightComp = ents[i].GetComponentByClassName('CGameplayLightComponent');

			pointLightComp = ents[i].GetComponentByClassName('CPointLightComponent');

			if(gameplayLightComp)
			{
				if (((CGameplayLightComponent)gameplayLightComp).IsInteractive())
				{
					((CGameplayLightComponent)gameplayLightComp).SetInteractive(false);
				}
				else if (!((CGameplayLightComponent)gameplayLightComp).IsInteractive())
				{
					((CGameplayLightComponent)gameplayLightComp).SetInteractive(true);
				}

				if (((CGameplayLightComponent)gameplayLightComp).IsLightOn())
				{
					((CGameplayLightComponent)gameplayLightComp).SetFadeLight(false);
				}
			}

			if (pointLightComp)
			{
				if (ents[i].IsEffectActive('fire', false))
				{
					ents[i].StopEffect('fire');
				}

				if (ents[i].IsEffectActive('light_on', false))
				{
					ents[i].StopEffect('light_on');
				}

				if (ents[i].IsEffectActive('light_on_bob', false))
				{
					ents[i].StopEffect('light_on_bob');
				}

				((CPointLightComponent)pointLightComp).SetEnabled(false);
			}
		}
		
		if ( restoreItemLAtEnd )
		{
			thePlayer.OnUseSelectedItem();
			restoreItemLAtEnd = false;
		}
	}

	function ACS_ExtinguishFireSources()
	{
		var i : int;
		var ents : array<CGameplayEntity>;
		var gameplayLightComp, pointLightComp : CComponent;
		
		ents.Clear();
		
		FindGameplayEntitiesInRange(ents,thePlayer,ACS_FireSourcesRange(),ACS_FireSourcesEntities(),,FLAG_ExcludePlayer,,'W3FireSource' );
		
		for ( i = 0; i < ents.Size(); i+=1 )
		{
			gameplayLightComp = ents[i].GetComponentByClassName('CGameplayLightComponent');

			if(gameplayLightComp)
			{
				if (((CGameplayLightComponent)gameplayLightComp).IsInteractive())
				{
					((CGameplayLightComponent)gameplayLightComp).SetInteractive(false);
				}
				else if (!((CGameplayLightComponent)gameplayLightComp).IsInteractive())
				{
					((CGameplayLightComponent)gameplayLightComp).SetInteractive(true);
				}

				if (((CGameplayLightComponent)gameplayLightComp).IsLightOn())
				{
					((CGameplayLightComponent)gameplayLightComp).SetLight(false);
				}
			}
		}

		if ( restoreItemLAtEnd )
		{
			thePlayer.OnUseSelectedItem();
			restoreItemLAtEnd = false;
		}
	}

	public timer function ACS_KillHorsesTimer(deltaTime : float , id : int)
	{
		ACS_KillHorses();
	}

	function ACS_KillHorses()
	{
		var actors    																																						: array<CActor>;
		var i         																																						: int;
		var actortarget																																						: CActor;
		var rev_ent																																							: CEntity;
	
		actors.Clear();

		actors = GetWitcherPlayer().GetNPCsAndPlayersInCone(6, VecHeading(GetWitcherPlayer().GetHeadingVector()), 60, 50, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (((CNewNPC)actortarget).GetNPCType() == ENGT_Quest)
				{
					return;
				}

				if (((CNewNPC)actortarget).IsHorse() && actortarget != thePlayer.GetHorseWithInventory())
				{
					actortarget.PlayEffectSingle('demonic_cast');
					actortarget.StopEffect('demonic_cast');

					((CActor)actortarget).SetTemporaryAttitudeGroup( 'q104_avallach_friendly_to_all', AGP_Default );
					((CNewNPC)actortarget).SetTemporaryAttitudeGroup( 'q104_avallach_friendly_to_all', AGP_Default );

					//((CNewNPC)actortarget).KillHorseAfter(0.1);

					((CNewNPC)actortarget).SetKinematic( false );
					//((CNewNPC)actortarget).SetAlive( false );
					//((CNewNPC)actortarget).GetComponentByClassName( 'CInteractionComponent' ).SetEnabled( false );
					((CNewNPC)actortarget).PlayEffectSingle( 'hit_ground' );
					((CNewNPC)actortarget).StopEffect('hit_ground');

					//((CNewNPC)actortarget).AddEffectDefault(EET_Ragdoll, thePlayer, "ACS_Ragdoll_Horse" );
					actortarget.EnableCharacterCollisions(false);

					actortarget.AddTag('ACS_GTFO_Horse');

					//rev_ent = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResource(actortarget.GetReadableName(), true ), actortarget.GetWorldPosition(), actortarget.GetWorldRotation() );

					//((CActor)rev_ent).SetTemporaryAttitudeGroup( 'q104_avallach_friendly_to_all', AGP_Default );
					//((CNewNPC)rev_ent).SetTemporaryAttitudeGroup( 'q104_avallach_friendly_to_all', AGP_Default );

					//rev_ent.PlayEffectSingle('demonic_cast');
					//rev_ent.StopEffect('demonic_cast');

					//((CNewNPC)rev_ent).KillHorseAfter(0.01);
					//((CActor)rev_ent).EnableCharacterCollisions(false);

					RemoveTimer('ACS_TeleportHorsesTimer');
					AddTimer('ACS_TeleportHorsesTimer', 3, false);
				}
				else
				{
					if (actortarget.IsUsingVehicle()) 
					{
						actortarget.SignalGameplayEventParamInt( 'RidingManagerDismountHorse', DT_shakeOff | DT_fromScript);
					}
				}
			}
		}
	}

	public timer function ACS_TeleportHorsesTimer(deltaTime : float , id : int)
	{
		HorseTeleportation();
	}

	function HorseTeleportation()
	{	
		var i												: int;
		var ents 											: array<CActor>;

		ents.Clear();

		theGame.GetActorsByTag( 'ACS_GTFO_Horse', ents );	
		
		for( i = 0; i < ents.Size(); i += 1 )
		{
			((CNewNPC)ents[i]).SetVisibility( false );
			((CNewNPC)ents[i]).SetGameplayVisibility( false );
			((CNewNPC)ents[i]).SetKinematic( true );
			ents[i].Teleport(thePlayer.GetWorldPosition() + Vector(0,0,-200));
			//ents[i].DestroyAfter(1);
		}
	}

	function ToggleLock()
	{
		var door  				: W3LockableEntity;
		var doorComponent		: CDoorComponent;	

		if ( !ACS_ForceOpenLockedDoorsWithAard_Enabled() )
		{
			return;
		}

		door = (W3LockableEntity)theGame.GetInteractionsManager().GetActiveInteraction().GetEntity();

		doorComponent = (CDoorComponent)door.GetComponentByClassName( 'CDoorComponent' );		

		if(doorComponent && !IsNameValid(door.GetKeyName()))
		{
			door.ToggleLock();
		}
	}

	public timer function ToggleLockDelay(deltaTime : float , id : int)
	{
		ToggleLock();
	}

	function DestroyNest()
	{
		var targets 					: array<CGameplayEntity>;
		var nest  						: CMonsterNestEntity;
		var nestACS  					: CACSMonsterNestEntity;
		var i							: int;

		targets.Clear();

		FindGameplayEntitiesInCone( targets, GetWitcherPlayer().GetWorldPosition(), VecHeading(GetWitcherPlayer().GetHeadingVector()), 90, 7.5, 999 );

		if( targets.Size() > 0 )
		{
			for( i = 0; i < targets.Size(); i += 1 )
			{
				nest = (CMonsterNestEntity)targets[i];

				nestACS = (CACSMonsterNestEntity)targets[i];

				if(nest)
				{
					if ( !nest.wasExploded )
					{
						nest.GetEncounter();
						nest.wasExploded = true;
						
						nest.interactionComponent.SetEnabled( false );

						if (GetWitcherPlayer().GetEquippedSign() == ST_Igni)
						{
							nest.airDmg = false;
						}
						else if (GetWitcherPlayer().GetEquippedSign() == ST_Aard)
						{
							nest.airDmg = true;
						}

						if ( nest.IsBossProtectingNest() )
						{
							nest.AddTimer('SpawnBoss', nest.nestUpdateDefintion.bossSpawnDelay, false, , , true );
						}

						nest.GotoState( 'Explosion' );	
					}
				}

				if(nestACS)
				{
					if ( !nestACS.wasExploded )
					{
						nestACS.GetEncounter();
						nestACS.wasExploded = true;
						
						nestACS.interactionComponent.SetEnabled( false );

						if (GetWitcherPlayer().GetEquippedSign() == ST_Igni)
						{
							nestACS.airDmg = false;
						}
						else if (GetWitcherPlayer().GetEquippedSign() == ST_Aard)
						{
							nestACS.airDmg = true;
						}

						if ( nestACS.IsBossProtectingNest() )
						{
							nestACS.AddTimer('SpawnBoss', nestACS.nestUpdateDefintion.bossSpawnDelay, false, , , true );
						}

						nestACS.GotoState( 'Explosion' );	
					}
				}
			}
		}
	}

	public timer function DestroyNestDelay(deltaTime : float , id : int)
	{
		DestroyNest();
	}

	public timer function TurnOffWispAttack(deltaTime : float , id : int)
	{
		if (FactsQuerySum("ACS_Wisp_Attack_Enable") > 0)
		{
			FactsRemove("ACS_Wisp_Attack_Enable");
		}
	}

	function ACS_Setup_Combat_Action_CastSign()
	{
		vACS_Setup_Combat_Action_CastSign = new cACS_Setup_Combat_Action_CastSign in this;

		SetCastSignProcess(true);

		RemoveTimer('ResetCastSignProcess');
		AddTimer('ResetCastSignProcess', 2, false);

		vACS_Setup_Combat_Action_CastSign.Setup_Combat_Action_CastSign_Engage();

		if ( FactsQuerySum("ACS_Wisp_Attack_Enable") <= 0 )
		{
			RemoveTimer('TurnOffWispAttack');
			AddTimer('TurnOffWispAttack', 7, false);
			FactsAdd("ACS_Wisp_Attack_Enable", 1, -1);
		}

		if (
		(GetWitcherPlayer().GetEquippedSign() == ST_Igni
		|| GetWitcherPlayer().GetEquippedSign() == ST_Aard)
		&& thePlayer.HasStaminaToUseAction(ESAT_Ability, SkillEnumToName( SignEnumToSkillEnum( thePlayer.GetEquippedSign() ) ))
		)
		{
			if(!thePlayer.IsInCombat())
			{
				RemoveTimer('ACS_KillHorsesTimer');
				AddTimer('ACS_KillHorsesTimer', 0.5, false);

				if (GetWitcherPlayer().GetEquippedSign() == ST_Aard)
				{
					RemoveTimer('ToggleLockDelay');
					AddTimer('ToggleLockDelay', 0.5, false);
				}
			}

			RemoveTimer('DestroyNestDelay');
			AddTimer('DestroyNestDelay', 0.5, false);
		}
		else if (
		(GetWitcherPlayer().GetEquippedSign() == ST_Quen)
		&& thePlayer.HasStaminaToUseAction(ESAT_Ability, SkillEnumToName( SignEnumToSkillEnum( thePlayer.GetEquippedSign() ) ))
		)
		{
			if (ACS_Armor_Equipped_Check())
			{
				thePlayer.SoundEvent("magic_eredin_appear_disappear");
				thePlayer.PlayEffectSingle('eredin_disappear');
				thePlayer.StopEffect('eredin_disappear');
			}
		}
	}

	function IgniDealDamage()
	{
		var actors    																																						: array<CActor>;
		var i         																																						: int;
		var actortarget																																						: CActor;
		var dmg																																								: W3DamageAction;
		var damageMax																																						: float;
		var sp 																																								: SAbilityAttributeValue;
		var witcher 																																						: W3PlayerWitcher;
	
		actors.Clear();

		actors = thePlayer.GetNPCsAndPlayersInCone(6, VecHeading(thePlayer.GetHeadingVector()), 100, 50, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);

				if (actortarget.HasTag('ACS_Sign_Combo_Icon_Ready_To_Activate_NPC_Igni'))
				{
					if (actortarget.UsesVitality())
					{
						if (actortarget.GetCurrentHealth() >= actortarget.GetMaxHealth() * 0.5)
						{
							damageMax = actortarget.GetMaxHealth() * ACS_SignComboSystemMaxHealthDamageWhenAboveHalfHealth();
						}
						else if (actortarget.GetCurrentHealth() < actortarget.GetMaxHealth() * 0.5)
						{
							damageMax = (actortarget.GetMaxHealth() - actortarget.GetCurrentHealth()) * ACS_SignComboSystemMissingMaxHealthDamageWhenBelowHalfHealth();
						}
					}
					else if (actortarget.UsesEssence())
					{
						if (actortarget.GetCurrentHealth() >= actortarget.GetMaxHealth() * 0.5)
						{
							if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
							|| actortarget.GetRadius() >= 0.7
							)
							{
								damageMax = actortarget.GetMaxHealth() * ACS_SignComboSystemMaxHealthDamageWhenAboveHalfHealth()/2;
							}
							else
							{
								damageMax = actortarget.GetMaxHealth() * ACS_SignComboSystemMaxHealthDamageWhenAboveHalfHealth();
							}
						}
						else if (actortarget.GetCurrentHealth() < actortarget.GetMaxHealth() * 0.5)
						{
							if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
							|| actortarget.GetRadius() >= 0.7
							)
							{
								damageMax = (actortarget.GetMaxHealth() - actortarget.GetCurrentHealth()) * ACS_SignComboSystemMissingMaxHealthDamageWhenBelowHalfHealth()/2;
							}
							else
							{
								damageMax = (actortarget.GetMaxHealth() - actortarget.GetCurrentHealth()) * ACS_SignComboSystemMissingMaxHealthDamageWhenBelowHalfHealth();
							}
						}
					}

					witcher = GetWitcherPlayer();

					sp = witcher.GetTotalSignSpellPower(S_Magic_2);

					damageMax * (sp.valueMultiplicative*100);

					dmg.AddEffectInfo(EET_Burning, 1);

					ACSSignComboIconDestroyAll();

					ACSSignComboSystemRemoveTags();

					thePlayer.GainStat( BCS_Stamina, thePlayer.GetStatMax( BCS_Stamina) * 0.125 );

					RemoveTimer('RemoveSignComboStuffRepeating');
					RemoveTimer('RemoveSignComboStuff');

					actortarget.RemoveTag('ACS_Sign_Combo_Attack_1');
					actortarget.RemoveTag('ACS_Sign_Combo_Attack_2');
					actortarget.RemoveTag('ACS_Sign_Combo_Igni_Ready');
					actortarget.RemoveTag('ACS_Sign_Combo_Icon_Ready_To_Activate_NPC_Igni');
				}
				else
				{
					if (ACS_Forgotten_Wolf_Check_For_Item() || ACS_Armor_Equipped_Check())
					{
						dmg.AddEffectInfo(EET_Burning, 1);

						if (actortarget.UsesVitality())
						{
							damageMax = actortarget.GetCurrentHealth() * 0.0625;
						}
						else if (actortarget.UsesEssence())
						{
							if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
							|| actortarget.GetRadius() >= 0.7
							)
							{
								damageMax = actortarget.GetMaxHealth() * 0.03125;
							}
							else
							{
								damageMax = actortarget.GetMaxHealth() * 0.0625;
							}
						}
					}
					else
					{
						damageMax = 0;
					}
				}

				dmg.SetCanPlayHitParticle(false);

				dmg.SetSuppressHitSounds(true);
				
				dmg.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, damageMax );
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	function AardDealDamage()
	{
		var actors    																																						: array<CActor>;
		var i         																																						: int;
		var actortarget																																						: CActor;
		var dmg																																								: W3DamageAction;
		var damageMax																																						: float;
		var sp 																																								: SAbilityAttributeValue;
		var witcher 																																						: W3PlayerWitcher;
	
		actors.Clear();

		actors = thePlayer.GetNPCsAndPlayersInCone(8, VecHeading(thePlayer.GetHeadingVector()), 100, 50, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);

				if (actortarget.HasTag('ACS_Sign_Combo_Icon_Ready_To_Activate_NPC_Aard'))
				{
					if (actortarget.UsesVitality())
					{
						if (actortarget.GetCurrentHealth() >= actortarget.GetMaxHealth() * 0.5)
						{
							damageMax = actortarget.GetMaxHealth() * ACS_SignComboSystemMaxHealthDamageWhenAboveHalfHealth();
						}
						else if (actortarget.GetCurrentHealth() < actortarget.GetMaxHealth() * 0.5)
						{
							damageMax = (actortarget.GetMaxHealth() - actortarget.GetCurrentHealth()) * ACS_SignComboSystemMissingMaxHealthDamageWhenBelowHalfHealth();
						}
					}
					else if (actortarget.UsesEssence())
					{
						if (actortarget.GetCurrentHealth() >= actortarget.GetMaxHealth() * 0.5)
						{
							if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
							|| actortarget.GetRadius() >= 0.7
							)
							{
								damageMax = actortarget.GetMaxHealth() * ACS_SignComboSystemMaxHealthDamageWhenAboveHalfHealth()/2;
							}
							else
							{
								damageMax = actortarget.GetMaxHealth() * ACS_SignComboSystemMaxHealthDamageWhenAboveHalfHealth();
							}
						}
						else if (actortarget.GetCurrentHealth() < actortarget.GetMaxHealth() * 0.5)
						{
							if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
							|| actortarget.GetRadius() >= 0.7
							)
							{
								damageMax = (actortarget.GetMaxHealth() - actortarget.GetCurrentHealth()) * ACS_SignComboSystemMissingMaxHealthDamageWhenBelowHalfHealth()/2;
							}
							else
							{
								damageMax = (actortarget.GetMaxHealth() - actortarget.GetCurrentHealth()) * ACS_SignComboSystemMissingMaxHealthDamageWhenBelowHalfHealth();
							}
						}
					}

					witcher = GetWitcherPlayer();

					sp = witcher.GetTotalSignSpellPower(S_Magic_1);

					damageMax * (sp.valueMultiplicative*100);

					dmg.AddEffectInfo(EET_Stagger, 1);

					ACSSignComboIconDestroyAll();

					ACSSignComboSystemRemoveTags();

					thePlayer.GainStat( BCS_Stamina, thePlayer.GetStatMax( BCS_Stamina) * 0.125 );

					RemoveTimer('RemoveSignComboStuffRepeating');
					RemoveTimer('RemoveSignComboStuff');

					actortarget.RemoveTag('ACS_Sign_Combo_Attack_1');
					actortarget.RemoveTag('ACS_Sign_Combo_Attack_2');
					actortarget.RemoveTag('ACS_Sign_Combo_Igni_Ready');
					actortarget.RemoveTag('ACS_Sign_Combo_Icon_Ready_To_Activate_NPC_Igni');
				}
				else
				{
					if (ACS_Forgotten_Wolf_Check_For_Item() || ACS_Armor_Equipped_Check())
					{
						dmg.AddEffectInfo(EET_Knockdown, 1);
						dmg.AddEffectInfo(EET_Stagger, 1);

						if (actortarget.UsesVitality())
						{
							damageMax = actortarget.GetCurrentHealth() * 0.0625;
						}
						else if (actortarget.UsesEssence())
						{
							if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
							|| actortarget.GetRadius() >= 0.7
							)
							{
								damageMax = actortarget.GetMaxHealth() * 0.03125;
							}
							else
							{
								damageMax = actortarget.GetMaxHealth() * 0.0625;
							}
						}
					}
					else
					{
						damageMax = 0;
					}
				}

				dmg.SetCanPlayHitParticle(false);
				
				dmg.SetSuppressHitSounds(true);
				
				dmg.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, damageMax );
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	public timer function SignIconDelayFiresources(deltaTime : float , id : int)
	{
		var ent, ent_2 						: CEntity;
		var bone_vec, attach_vec, pPos		: Vector;
		var bone_rot, attach_rot			: EulerAngles;

		if (ACS_EnhancedSigns_Enabled())
		{
			ent = theGame.CreateEntity( (CEntityTemplate)LoadResource( 
			"dlc\dlc_acs\data\fx\sign_icons.w2ent"
			, true ), GetWitcherPlayer().GetWorldPosition(), GetWitcherPlayer().GetWorldRotation() );

			ent_2 = theGame.CreateEntity( (CEntityTemplate)LoadResource( 
			"dlc\dlc_acs\data\fx\sign_icons.w2ent"
			, true ), GetWitcherPlayer().GetWorldPosition(), GetWitcherPlayer().GetWorldRotation() );

			GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( GetWitcherPlayer().GetBoneIndex( 'l_handRoll' ), bone_vec, bone_rot );

			if ( GetWitcherPlayer().GetEquippedSign() == ST_Igni)
			{
				attach_rot.Roll = 0;
				attach_rot.Pitch = 0;
				attach_rot.Yaw = 0;
				attach_vec.X = 0.375;
				attach_vec.Y = 0.05;
				attach_vec.Z = 0.05;

				ent.CreateAttachmentAtBoneWS( GetWitcherPlayer(), 'l_handRoll', bone_vec, bone_rot );

				ent_2.CreateAttachment( ent, , attach_vec, attach_rot );

				ent_2.PlayEffectSingle('igni_icon_small');

				ent.DestroyAfter(0.75);
				ent_2.DestroyAfter(0.75);
			}
			else if ( GetWitcherPlayer().GetEquippedSign() == ST_Aard)
			{
				attach_rot.Roll = 0;
				attach_rot.Pitch = 0;
				attach_rot.Yaw = 0;
				attach_vec.X = 0.4;
				attach_vec.Y = 0;
				attach_vec.Z = -0.025;

				ent.CreateAttachmentAtBoneWS( GetWitcherPlayer(), 'l_handRoll', bone_vec, bone_rot );

				ent_2.CreateAttachment( ent, , attach_vec, attach_rot );

				ent_2.PlayEffectSingle('aard_icon_small');

				ent.DestroyAfter(0.75);
				ent_2.DestroyAfter(0.75);
			}
		}
	}

	public timer function SignIconDelay(deltaTime : float , id : int)
	{
		var ent, ent_2, ent_3, ent_4 		: CEntity;
		var bone_vec, attach_vec, pPos		: Vector;
		var bone_rot, attach_rot			: EulerAngles;
		var trapDurationAtt 				: SAbilityAttributeValue;
		var trapDuration					: float;

		if( thePlayer.GetBehaviorVariable( 'combatActionType' ) == (int)CAT_CastSign
		&& thePlayer.IsCastingSign()
		)
		{
			if (ACS_EnhancedSigns_Enabled())
			{
				ent = theGame.CreateEntity( (CEntityTemplate)LoadResource( 
				"dlc\dlc_acs\data\fx\sign_icons.w2ent"
				, true ), GetWitcherPlayer().GetWorldPosition(), GetWitcherPlayer().GetWorldRotation() );

				ent_2 = theGame.CreateEntity( (CEntityTemplate)LoadResource( 
				"dlc\dlc_acs\data\fx\sign_icons.w2ent"
				, true ), GetWitcherPlayer().GetWorldPosition(), GetWitcherPlayer().GetWorldRotation() );

				GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( GetWitcherPlayer().GetBoneIndex( 'l_handRoll' ), bone_vec, bone_rot );

				if ( GetWitcherPlayer().GetEquippedSign() == ST_Igni)
				{
					attach_rot.Roll = 0;
					attach_rot.Pitch = 0;
					attach_rot.Yaw = 0;
					attach_vec.X = 0.375;
					attach_vec.Y = 0.05;
					attach_vec.Z = 0.05;

					ent.CreateAttachmentAtBoneWS( GetWitcherPlayer(), 'l_handRoll', bone_vec, bone_rot );

					ent_2.CreateAttachment( ent, , attach_vec, attach_rot );

					ent_3 = theGame.CreateEntity( (CEntityTemplate)LoadResource( 
					"dlc\dlc_acs\data\fx\pc_igni_mq1060.w2ent"
					, true ), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );

					ent_3.CreateAttachment( thePlayer, , Vector( 0, 1, 1 ), EulerAngles(0,90,0) );

					if ((theGame.GetWorld().GetDepotPath() == "levels\skellige\skellige.w2w")
					)
					{
						if ((ACS_Forgotten_Wolf_Check_For_Item() || ACS_Armor_Equipped_Check()))
						{
							ent_2.PlayEffectSingle('igni_icon_red');
						}
						else
						{
							ent_2.PlayEffectSingle('igni_icon');
						}
					}
					else
					{
						if ((ACS_Forgotten_Wolf_Check_For_Item() || ACS_Armor_Equipped_Check()))
						{
							ent_2.PlayEffectSingle('igni_icon_red');

							if (!thePlayer.IsInCombat())
							{
								if (!ACS_AttitudeCheck(thePlayer.GetTarget()))
								{
									ent_3.PlayEffectSingle('cone_1_red');
									ent_3.PlayEffectSingle('cone_power_2_red');

									ent_3.StopEffect('cone_1_red');
									ent_3.StopEffect('cone_power_2_red');
								}
							}
							else
							{
								ent_3.PlayEffectSingle('cone_1_red');
								ent_3.PlayEffectSingle('cone_power_2_red');

								ent_3.StopEffect('cone_1_red');
								ent_3.StopEffect('cone_power_2_red');
							}
						}
						else
						{
							ent_2.PlayEffectSingle('igni_icon');

							if (!thePlayer.IsInCombat())
							{
								if (!ACS_AttitudeCheck(thePlayer.GetTarget()))
								{
									ent_3.PlayEffectSingle('cone_1');
									ent_3.PlayEffectSingle('cone_power_2');

									ent_3.StopEffect('cone_1');
									ent_3.StopEffect('cone_power_2');
								}
							}
							else
							{
								ent_3.PlayEffectSingle('cone_1');
								ent_3.PlayEffectSingle('cone_power_2');

								ent_3.StopEffect('cone_1');
								ent_3.StopEffect('cone_power_2');
							}
						}
					}

					if (!thePlayer.CanUseSkill(S_Magic_s02))
					{
						ent_2.DestroyAfter(0.5);
					}

					ent_3.DestroyAfter(3);

					IgniDealDamage();
				}
				else if ( GetWitcherPlayer().GetEquippedSign() == ST_Aard)
				{
					attach_rot.Roll = 0;
					attach_rot.Pitch = 0;
					attach_rot.Yaw = 0;
					attach_vec.X = 0.4;
					attach_vec.Y = 0;
					attach_vec.Z = -0.025;

					ent.CreateAttachmentAtBoneWS( GetWitcherPlayer(), 'l_handRoll', bone_vec, bone_rot );

					ent_2.CreateAttachment( ent, , attach_vec, attach_rot );

					if ((ACS_Forgotten_Wolf_Check_For_Item() || ACS_Armor_Equipped_Check()))
					{
						ent_2.PlayEffectSingle('aard_icon_red');

						if (!thePlayer.IsInCombat())
						{
							if (!ACS_AttitudeCheck(thePlayer.GetTarget()))
							{
								ent_3 = theGame.CreateEntity( (CEntityTemplate)LoadResource( 
								"dlc\dlc_acs\data\fx\pc_aard_mq1060.w2ent"
								, true ), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );

								ent_3.CreateAttachment( thePlayer, , Vector( 0, 1, 1 ), EulerAngles(0,0,0) );

								ent_3.PlayEffect('cone');
								ent_3.PlayEffect('cone');
								ent_3.PlayEffect('cone');
								ent_3.PlayEffect('cone');
								ent_3.PlayEffect('cone');
								ent_3.PlayEffect('cone');

								ent_3.DestroyAfter(5);


								ent_4 = theGame.CreateEntity( (CEntityTemplate)LoadResource( 
								"dlc\dlc_acs\data\fx\knightmare_scream_attack.w2ent"
								, true ), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );

								ent_4.CreateAttachment( thePlayer, , Vector( 0, 0.5, 0.375 ), EulerAngles(0,0,0) );

								ent_4.PlayEffect('cone');

								ent_4.PlayEffect('fx_push');
								ent_4.PlayEffect('fx_push');
								ent_4.PlayEffect('fx_push');
								ent_4.PlayEffect('fx_push');
								ent_4.PlayEffect('fx_push');

								ent_4.DestroyAfter(1);
							}
						}
						else
						{
							ent_3 = theGame.CreateEntity( (CEntityTemplate)LoadResource( 
							"dlc\dlc_acs\data\fx\pc_aard_mq1060.w2ent"
							, true ), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );

							ent_3.CreateAttachment( thePlayer, , Vector( 0, 1, 1 ), EulerAngles(0,0,0) );

							ent_3.PlayEffect('cone');
							ent_3.PlayEffect('cone');
							ent_3.PlayEffect('cone');
							ent_3.PlayEffect('cone');
							ent_3.PlayEffect('cone');
							ent_3.PlayEffect('cone');

							ent_3.DestroyAfter(5);


							ent_4 = theGame.CreateEntity( (CEntityTemplate)LoadResource( 
							"dlc\dlc_acs\data\fx\knightmare_scream_attack.w2ent"
							, true ), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );

							ent_4.CreateAttachment( thePlayer, , Vector( 0, 0.5, 0.375 ), EulerAngles(0,0,0) );

							ent_4.PlayEffect('cone');

							ent_4.PlayEffect('fx_push');
							ent_4.PlayEffect('fx_push');
							ent_4.PlayEffect('fx_push');
							ent_4.PlayEffect('fx_push');
							ent_4.PlayEffect('fx_push');

							ent_4.DestroyAfter(1);
						}
					}
					else
					{
						ent_2.PlayEffectSingle('aard_icon');

						if (!thePlayer.IsInCombat())
						{
							if (!ACS_AttitudeCheck(thePlayer.GetTarget()))
							{
								pPos = thePlayer.GetWorldPosition() + VecFromHeading( thePlayer.GetHeading() ) + thePlayer.GetWorldForward() * 1.5;

								pPos.Z += 1;

								ent_3 = theGame.CreateEntity( (CEntityTemplate)LoadResource( 
								"dlc\dlc_acs\data\fx\aard\pc_aard.w2ent"
								, true ), pPos, thePlayer.GetWorldRotation() );

								//ent_3.CreateAttachment( thePlayer, , Vector( 0, 1, 1 ), EulerAngles(0,0,0) );

								//ent_3.PlayEffect('cone');
								//ent_3.PlayEffect('cone_lv3_power');
								//ent_3.PlayEffect('cone_lv3_damage');
								ent_3.PlayEffect('cone_lv3');

								ent_3.DestroyAfter(5);
							}
						}
						else
						{
							pPos = thePlayer.GetWorldPosition() + VecFromHeading( thePlayer.GetHeading() ) + thePlayer.GetWorldForward() * 1.5;

							pPos.Z += 1;

							ent_3 = theGame.CreateEntity( (CEntityTemplate)LoadResource( 
							"dlc\dlc_acs\data\fx\aard\pc_aard.w2ent"
							, true ), pPos, thePlayer.GetWorldRotation() );

							//ent_3.CreateAttachment( thePlayer, , Vector( 0, 1, 1 ), EulerAngles(0,0,0) );

							//ent_3.PlayEffect('cone');
							//ent_3.PlayEffect('cone_lv3_power');
							//ent_3.PlayEffect('cone_lv3_damage');
							ent_3.PlayEffect('cone_lv3');

							ent_3.DestroyAfter(5);
						}
					}

					ent.DestroyAfter(0.5);
					ent_2.DestroyAfter(0.5);

					AardDealDamage();
				}
				else if ( GetWitcherPlayer().GetEquippedSign() == ST_Quen)
				{
					attach_rot.Roll = 0;
					attach_rot.Pitch = 0;
					attach_rot.Yaw = 0;
					attach_vec.X = 0.35;
					attach_vec.Y = 0.125;
					attach_vec.Z = 0;

					ent.CreateAttachmentAtBoneWS( GetWitcherPlayer(), 'l_handRoll', bone_vec, bone_rot );

					ent_2.CreateAttachment( ent, , attach_vec, attach_rot );

					if ((ACS_Forgotten_Wolf_Check_For_Item() || ACS_Armor_Equipped_Check()))
					{
						ent_2.PlayEffectSingle('quen_icon_red');

						ent_3 = theGame.CreateEntity( (CEntityTemplate)LoadResource( 
						"dlc\dlc_acs\data\fx\pc_quen_mq1060.w2ent"
						, true ), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );

						ent_3.CreateAttachment( thePlayer, , Vector( 0, 0, 0.75 ), EulerAngles(0,0,0) );

						ent_3.PlayEffect('default_fx');
						ent_3.DestroyAfter(0.5);


						ent_4 = theGame.CreateEntity( (CEntityTemplate)LoadResource( 
						"dlc\dlc_acs\data\fx\pc_quen_hit_mq1060.w2ent"
						, true ), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );

						ent_4.CreateAttachment( thePlayer, , Vector( 0, 0, 0.75 ), EulerAngles(0,0,0) );

						ent_4.PlayEffect('discharge');
						ent_4.DestroyAfter(3);
					}
					else
					{
						ent_2.PlayEffectSingle('quen_icon');
					}

					if (!thePlayer.CanUseSkill(S_Magic_s04))
					{
						ent.DestroyAfter(0.5);
						ent_2.DestroyAfter(0.5);
					}
				}
				else if ( GetWitcherPlayer().GetEquippedSign() == ST_Yrden)
				{
					attach_rot.Roll = 0;
					attach_rot.Pitch = 0;
					attach_rot.Yaw = 0;
					attach_vec.X = 0.25;
					attach_vec.Y = 0.125;
					attach_vec.Z = 0;

					ent.CreateAttachmentAtBoneWS( GetWitcherPlayer(), 'l_handRoll', bone_vec, bone_rot );

					ent_2.CreateAttachment( ent, , attach_vec, attach_rot );

					if ((ACS_Forgotten_Wolf_Check_For_Item() || ACS_Armor_Equipped_Check()))
					{
						ACSYrdenCircle1DestroyAll();

						ent_2.PlayEffectSingle('yrden_icon_red');

						if (!thePlayer.IsInCombat())
						{
							if (!ACS_AttitudeCheck(thePlayer.GetTarget()))
							{
								Red_Yrden_Slow();

								ent_3 = theGame.CreateEntity( (CEntityTemplate)LoadResource( 
								"dlc\dlc_acs\data\fx\sign_icons.w2ent"
								, true ), ACSPlayerFixZAxis(thePlayer.GetWorldPosition() + thePlayer.GetWorldForward() * 0.75 + thePlayer.GetWorldRight() * 0.25), thePlayer.GetWorldRotation() );

								ent_3.PlayEffect('ability_gryphon_set_red');
								ent_3.PlayEffect('ability_gryphon_set_red');

								trapDurationAtt = thePlayer.GetSkillAttributeValue(S_Magic_3, 'trap_duration', false, true);

								trapDurationAtt += thePlayer.GetTotalSignSpellPower(S_Magic_3);
								trapDurationAtt.valueMultiplicative -= 1;	
								trapDuration = CalculateAttributeValue(trapDurationAtt);

								ent_3.DestroyAfter(trapDuration + 1);

								ent_3.AddTag('ACS_Yrden_Trap_1');
							}
						}
						else
						{
							Red_Yrden_Slow();

							ent_3 = theGame.CreateEntity( (CEntityTemplate)LoadResource( 
							"dlc\dlc_acs\data\fx\sign_icons.w2ent"
							, true ), ACSPlayerFixZAxis(thePlayer.GetWorldPosition() + thePlayer.GetWorldForward() * 0.75 + thePlayer.GetWorldRight() * 0.25), thePlayer.GetWorldRotation() );

							ent_3.PlayEffect('ability_gryphon_set_red');
							ent_3.PlayEffect('ability_gryphon_set_red');

							trapDurationAtt = thePlayer.GetSkillAttributeValue(S_Magic_3, 'trap_duration', false, true);

							trapDurationAtt += thePlayer.GetTotalSignSpellPower(S_Magic_3);
							trapDurationAtt.valueMultiplicative -= 1;	
							trapDuration = CalculateAttributeValue(trapDurationAtt);

							ent_3.DestroyAfter(trapDuration + 1);

							ent_3.AddTag('ACS_Yrden_Trap_1');
						}
					}
					else
					{
						ent_2.PlayEffectSingle('yrden_icon');
					}

					ent.DestroyAfter(1.5);
					ent_2.DestroyAfter(1.5);
				}
				else if ( GetWitcherPlayer().GetEquippedSign() == ST_Axii)
				{
					attach_rot.Roll = 0;
					attach_rot.Pitch = 0;
					attach_rot.Yaw = 0;
					attach_vec.X = 0.4;
					attach_vec.Y = 0.15;
					attach_vec.Z = 0;

					ent.CreateAttachmentAtBoneWS( GetWitcherPlayer(), 'l_handRoll', bone_vec, bone_rot );

					ent_2.CreateAttachment( ent, , attach_vec, attach_rot );

					if ((ACS_Forgotten_Wolf_Check_For_Item() || ACS_Armor_Equipped_Check()))
					{
						ent_2.PlayEffectSingle('axii_icon_red');

						Red_Axii_Effect();
					}
					else
					{
						ent_2.PlayEffectSingle('axii_icon');
					}

					ent.DestroyAfter(0.5);
					ent_2.DestroyAfter(0.5);
				}

				ent.AddTag('ACS_Sign_Icon_Anchor');

				ent_2.AddTag('ACS_Sign_Icon');
			}
			else
			{
				if ( GetWitcherPlayer().GetEquippedSign() == ST_Igni)
				{
					IgniDealDamage();
				}
				else if ( GetWitcherPlayer().GetEquippedSign() == ST_Aard)
				{
					AardDealDamage();
				}
			}
		}
	}

	function Red_Yrden_Slow()
	{
		var actors																	: array<CActor>;
		var animcomp 																: CAnimatedComponent;
		var marker_ent, marker_ent_2												: CEntity;
		var marker_temp, marker_temp_2												: CEntityTemplate;
		var i																		: int;
		var attach_vec																: Vector;

		actors.Clear();
			
		actors = thePlayer.GetNPCsAndPlayersInRange( 6, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				if ( actors[i] )
				{
					actors[i].AddEffectDefault(EET_Slowdown, thePlayer, 'ACS_Augmented_Yrden_Slow');
					
					animcomp = (CAnimatedComponent)actors[i].GetComponentByClassName('CAnimatedComponent');

					animcomp.FreezePoseFadeIn(1.f);

					animcomp.UnfreezePoseFadeOut(4.f);

					marker_temp = (CEntityTemplate)LoadResource( "dlc\dlc_acs\data\fx\philippa_hit_marker.w2ent", true );

					marker_ent = (CEntity)theGame.CreateEntity( marker_temp, actors[i].GetWorldPosition(), actors[i].GetWorldRotation() );

					marker_ent.CreateAttachment(actors[i]);

					marker_ent.PlayEffect('marker_red');

					marker_ent.DestroyAfter(3.f);



					attach_vec.X = 0;
					attach_vec.Y = 0;

					if (((CMovingPhysicalAgentComponent)(actors[i].GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actors[i].GetRadius() >= 0.7
					)
					{
						attach_vec.Z = 4;
					}
					else
					{
						attach_vec.Z = 2;
					}



					marker_temp_2 = (CEntityTemplate)LoadResource( "dlc\dlc_acs\data\fx\sign_icons.w2ent", true );

					marker_ent_2 = (CEntity)theGame.CreateEntity( marker_temp_2, actors[i].GetWorldPosition(), actors[i].GetWorldRotation() );

					marker_ent_2.CreateAttachment(actors[i],,attach_vec);

					marker_ent_2.PlayEffect('yrden_icon_red');

					marker_ent_2.DestroyAfter(3.f);
				}
			}
		}
	}

	function Red_Yrden_Symbols()
	{
		var actors																	: array<CActor>;
		var animcomp 																: CAnimatedComponent;
		var marker_ent, ent															: CEntity;
		var marker_temp, temp														: CEntityTemplate;
		var i, j, count																: int;
		var playerPos, spawnPos														: Vector;
		var randAngle, randRange													: float;
		var playerRot																: EulerAngles;
		
		temp = (CEntityTemplate)LoadResource( 

		"dlc\dlc_acs\data\fx\sign_icons.w2ent"
			
		, true );

		playerPos = ACSPlayerFixZAxis(thePlayer.GetWorldPosition() + thePlayer.GetWorldForward() * 0.75 + thePlayer.GetWorldRight() * 0.25);

		playerRot = thePlayer.GetWorldRotation();

		count = 7;

		for( j = 0; j < count; j += 1 )
		{
			randRange = 5 + 5 * RandF();
			randAngle = 2 * Pi() * RandF();
			
			spawnPos.X = randRange * CosF( randAngle ) + playerPos.X;
			spawnPos.Y = randRange * SinF( randAngle ) + playerPos.Y;
			spawnPos.Z = playerPos.Z;

			ent = theGame.CreateEntity( temp, ACSPlayerFixZAxis(spawnPos), playerRot );

			ent.PlayEffect('yrden_shock_rune_red');

			ent.DestroyAfter(3);
		}
	}

	function Red_Axii_Effect()
	{
		var animcomp 																: CAnimatedComponent;
		var combatTarget 															: CActor;
		var marker_ent, marker_ent_2												: CEntity;
		var marker_temp, marker_temp_2												: CEntityTemplate;
		var attach_vec																: Vector;
	
		combatTarget = thePlayer.GetTarget();

		animcomp = (CAnimatedComponent)combatTarget.GetComponentByClassName('CAnimatedComponent');

		animcomp.FreezePoseFadeIn(1.0f);

		animcomp.UnfreezePoseFadeOut(15.f);


		marker_temp = (CEntityTemplate)LoadResource( "dlc\dlc_acs\data\fx\philippa_hit_marker.w2ent", true );

		marker_ent = (CEntity)theGame.CreateEntity( marker_temp, combatTarget.GetWorldPosition(), combatTarget.GetWorldRotation() );

		marker_ent.CreateAttachment(combatTarget);

		marker_ent.DestroyEffect('marker');

		marker_ent.PlayEffect('marker_red');

		marker_ent.DestroyAfter(10.f);

		attach_vec.X = 0;
		attach_vec.Y = 0;

		if (((CMovingPhysicalAgentComponent)(combatTarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
		|| combatTarget.GetRadius() >= 0.7
		)
		{
			attach_vec.Z = 4;
		}
		else
		{
			attach_vec.Z = 2;
		}

		marker_temp_2 = (CEntityTemplate)LoadResource( "dlc\dlc_acs\data\fx\sign_icons.w2ent", true );

		marker_ent_2 = (CEntity)theGame.CreateEntity( marker_temp_2, combatTarget.GetWorldPosition(), combatTarget.GetWorldRotation() );

		marker_ent_2.CreateAttachment(combatTarget,,attach_vec);

		marker_ent_2.PlayEffect('axii_icon_red');

		marker_ent_2.DestroyAfter(10.f);




	}

	public timer function SignIconDestroyDelay(deltaTime : float , id : int)
	{
		ACS_Sign_Icon_Anchor().DestroyAfter(0.5);
		ACS_Sign_Icon().DestroyAfter(0.5);
	}

	function CreateSignSymbol(action : SInputAction)
	{
		var signSkill 				: ESkill;

		if(IsPressed( action ))
		{
			if( !thePlayer.IsActionAllowed(EIAB_Signs) )
			{				
				return;
			}

			if ( thePlayer.IsHoldingItemInLHand() && thePlayer.IsUsableItemLBlocked() )
			{
				return;
			}

			signSkill = SignEnumToSkillEnum( thePlayer.GetEquippedSign() );

			if( signSkill != S_SUndefined )
			{
				if(!thePlayer.CanUseSkill(signSkill))
				{
					return;
				}
			
				if( thePlayer.HasStaminaToUseSkill( signSkill, false ) )
				{
					thePlayer.ClearAnimationSpeedMultipliers();

					ACS_Sign_Icon().Destroy();

					ACS_Sign_Icon_Anchor().Destroy();

					RemoveTimer('SignIconDestroyDelay');
					RemoveTimer('SignIconDelay');

					if (GetWitcherPlayer().GetEquippedSign() == ST_Yrden
					)
					{
						AddTimer('SignIconDelay', 0.375f/thePlayer.GetAnimationTimeMultiplier(), false);
					}
					else if ( GetWitcherPlayer().GetEquippedSign() == ST_Aard
					)
					{
						AddTimer('SignIconDelay', 0.35f/thePlayer.GetAnimationTimeMultiplier(), false);
					}
					else
					{
						AddTimer('SignIconDelay', 0.25f/thePlayer.GetAnimationTimeMultiplier(), false);
					}
				}
			}
		}

		if(IsReleased( action ))
		{
			ACS_Sign_Icon().StopEffect('burn');
			ACS_Sign_Icon().StopEffect('burn_upgrade');
			ACS_Sign_Icon().StopEffect('burn_1');
			ACS_Sign_Icon().StopEffect('burn_upgrade_1');

			ACS_Sign_Icon().StopEffect('burn_red');
			ACS_Sign_Icon().StopEffect('burn_upgrade_red');
			ACS_Sign_Icon().StopEffect('burn_1_red');
			ACS_Sign_Icon().StopEffect('burn_upgrade_1_red');
			
			RemoveTimer('SignIconDestroyDelay');

			if ( GetWitcherPlayer().GetEquippedSign() == ST_Aard
			|| GetWitcherPlayer().GetEquippedSign() == ST_Yrden
			)
			{
				AddTimer('SignIconDestroyDelay', 0.5, false);
			}
			else
			{
				AddTimer('SignIconDestroyDelay', 0.25, false);
			}
		}
	}

	function ACS_Sign_Icon_Anchor() : CEntity
	{
		var ent 			 : CEntity;
		
		ent = (CEntity)theGame.GetEntityByTag( 'ACS_Sign_Icon_Anchor' );
		return ent;
	}

	function ACS_Sign_Icon() : CEntity
	{
		var ent 			 : CEntity;
		
		ent = (CEntity)theGame.GetEntityByTag( 'ACS_Sign_Icon' );
		return ent;
	}

	event OnCastSign( action : SInputAction )
	{
		var signSkill : ESkill;

		if (ACS_Transformation_Activated_Check())
		{
			if (ACS_Transformation_Werewolf_Check())
			{
				DisableWerewolf();
			}

			if (ACS_Transformation_Vampiress_Check())
			{
				DisableVampiress();
			}

			if (ACS_Transformation_Vampire_Monster_Check())
			{
				if (GetTransformationVampireMonsterDiveProcess())
				{
					return false;
				}

				if (!GetACSTransformationVampireMonster().IsOnGround())
				{
					DisableTransformationVampireMonster_Actual_No_Teleport();

					return false;
				}

				DisableTransformationVampireMonster();
			}

			if (ACS_Transformation_Toad_Check())
			{
				DisableTransformationToad();
			}

			if (ACS_Transformation_Red_Miasmal_Check())
			{
				DisableRedMiasmal();
			}

			if (ACS_Transformation_Sharley_Check())
			{
				DisableSharley();
			}

			if (ACS_Transformation_Black_Wolf_Check())
			{
				DisableBlackWolf();
			}

			return false;
		}

		if ( theGame.IsFocusModeActive() 
		&& ACS_Firesources_Enabled()
		&& 
		(GetWitcherPlayer().GetEquippedSign() == ST_Igni
		|| GetWitcherPlayer().GetEquippedSign() == ST_Aard)
		&& ACS_LightFiresCheck()
		)
		{
			if (ACS_can_fire_source())
			{
				ACS_Lights_Tutorial();

				ACS_refresh_fire_source_cooldown();

				if (GetWitcherPlayer().IsAnyWeaponHeld() && !GetWitcherPlayer().IsWeaponHeld('fist'))
				{
					thePlayer.OnMeleeForceHolster( true );
					thePlayer.OnRangedForceHolster( true );
				}

				theGame.GetBehTreeReactionManager().CreateReactionEventIfPossible( thePlayer, 'CastSignAction', 1, 1.75f, -1.f, -1, true );

				if (GetWitcherPlayer().GetEquippedSign() == ST_Igni)
				{
					thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'man_ger_idle_sign_igni_light', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.875f) );

					if ( thePlayer.IsHoldingItemInLHand() )
					{
						thePlayer.OnUseSelectedItem( true );
						restoreItemLAtEnd = true;
					}

					RemoveTimer('ACS_LightFiresTimer');
					RemoveTimer('ACS_ExtinguishFiresTimer');

					RemoveTimer('SignIconDelayFiresources');

					AddTimer('ACS_LightFiresTimer', 1, false);

					AddTimer('SignIconDelayFiresources', 0.5, false);
				}
				else if (GetWitcherPlayer().GetEquippedSign() == ST_Aard)
				{
					thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'man_ger_idle_sign_aard_light', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.875f) );

					if ( thePlayer.IsHoldingItemInLHand() )
					{
						thePlayer.OnUseSelectedItem( true );
						restoreItemLAtEnd = true;
					}

					RemoveTimer('ACS_LightFiresTimer');
					RemoveTimer('ACS_ExtinguishFiresTimer');

					RemoveTimer('SignIconDelayFiresources');

					AddTimer('ACS_ExtinguishFiresTimer', 1, false);

					AddTimer('SignIconDelayFiresources', 0.5, false);
				}
			}
			
			return false;
		}

		CreateSignSymbol(action);

		if (ACS_GM_Installed() && ACS_GM_Enabled())
		{
			if (!GM_Can_Use_Sign(thePlayer.GetEquippedSign()))
			{
				return false;
			}
		}

		altSignCastingThing();

		if( altSignCasting )
		{
			//ApplyCastSettings(); 
		}
		
		if(altSignCasting && !theInput.LastUsedPCInput())
		{
			if(IsPressed( action ) && (theInput.GetActionValue( 'LockAndGuard' ) > 0) && !GetWitcherPlayer().IsCurrentSignChanneled()) 
			{
				CreateSignSymbol(action);
				AltCastSign(ST_Igni);
			}
			else if(IsPressed( action ))
			{
				thePlayer.BlockAction(EIAB_Interactions, 'NGE_CastSign_Block');
				thePlayer.BlockAction(EIAB_InteractionAction, 'NGE_CastSign_Block');
				thePlayer.BlockAction(EIAB_InteractionContainers, 'NGE_CastSign_Block');
			}
			else if(IsReleased( action ))
			{
				thePlayer.UnblockAction(EIAB_Interactions, 'NGE_CastSign_Block');
				thePlayer.UnblockAction(EIAB_InteractionAction, 'NGE_CastSign_Block');
				thePlayer.UnblockAction(EIAB_InteractionContainers, 'NGE_CastSign_Block');
			}
			
			return false;
		}
		
		if( !thePlayer.GetBIsInputAllowed() )
		{	
			return false;
		}
		
		if( IsPressed(action) )
		{
			if( !thePlayer.IsActionAllowed(EIAB_Signs) )
			{				
				thePlayer.DisplayActionDisallowedHudMessage(EIAB_Signs);
				return false;
			}

			if ( thePlayer.IsHoldingItemInLHand() && thePlayer.IsUsableItemLBlocked() )
			{
				thePlayer.DisplayActionDisallowedHudMessage(EIAB_Undefined, false, false, true);
				return false;
			}
			
			signSkill = SignEnumToSkillEnum( thePlayer.GetEquippedSign() );
			if( signSkill != S_SUndefined )
			{
				if(!thePlayer.CanUseSkill(signSkill))
				{
					thePlayer.DisplayActionDisallowedHudMessage(EIAB_Signs, false, false, true);
					return false;
				}
			
				if( thePlayer.HasStaminaToUseSkill( signSkill, false ) )
				{
					if( GetInvalidUniqueId() != thePlayer.inv.GetItemFromSlot( 'l_weapon' ) && !thePlayer.IsUsableItemLBlocked())
					{

						
						
					}
					//thePlayer.SetupCombatAction( EBAT_CastSign, BS_Pressed );

					if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
					{
						Grow_Geralt_Immediate_Fast(); //ACS

						thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
					}

					if( thePlayer.IsSwimming() )
					{
						ACS_Aard();
					}
					else
					{
						ACS_Setup_Combat_Action_CastSign();
					}
				}
				else
				{
					thePlayer.SoundEvent("gui_no_stamina");
				}
			}	
		}

	}

	function GM_Can_Use_Sign(signType : ESignType) : bool
	{
		switch(signType)
		{
			case ST_Aard: 	
			
			if (ACS_can_use_aard())
			{
				ACS_refresh_aard_cooldown();

				return true;
			}
			else
			{
				return false;
			}

			case ST_Igni: 	
			
			if (ACS_can_use_igni())
			{
				ACS_refresh_igni_cooldown();

				return true;
			}
			else
			{
				return false;
			}

			case ST_Yrden: 
			
			if (ACS_can_use_yrden())
			{
				ACS_refresh_yrden_cooldown();

				return true;
			}
			else
			{
				return false;
			}

			case ST_Quen: 	
			
			if (ACS_can_use_quen())
			{
				ACS_refresh_quen_cooldown();

				return true;
			}
			else
			{
				return false;
			}

			case ST_Axii: 	
			
			if (ACS_can_use_axii())
			{
				ACS_refresh_axii_cooldown();

				return true;
			}
			else
			{
				return false;
			}

			default:
			
			return true;
		}

		return true;
	}

	event OnAltQuen( action : SInputAction )
	{	
		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}

		altSignCastingThing();

		if( altSignCasting )
		{
			//ApplyCastSettings(); 
		}

		if(altSignCasting && !theInput.LastUsedPCInput() && IsPressed( action ) && theInput.GetActionValue('CastSign') > 0.7f && !GetWitcherPlayer().IsCurrentSignChanneled())
		{
			CreateSignSymbol(action);
			AltCastSign(ST_Quen);
		}
	}
	
	event OnCbtAttackWithAlternateLight( action : SInputAction )
	{
		if (theInput.GetActionValue('ControllerCastModifier') > 0.5)
		{
			return false;
		}
	
		CbtAttackPC( action, false);
	}

	function FocusModeOverlapCheck() : bool
	{
		if (theGame.GetFocusModeController().IsActive())
		{
			return false;
		}

		if (theInput.IsActionJustReleased('Focus'))
		{
			return false;
		}

		if (theInput.GetActionValue('Focus') > 0)
		{
			return false;
		}

		if (theInput.GetActionValue('Focus') < 0)
		{
			return false;
		}

		return true;	
	}
	
	
	event OnCbtAttackWithAlternateHeavy( action : SInputAction )
	{
		if (theInput.GetActionValue('ControllerCastModifier') > 0.5)
		return false;

		if ( !FocusModeOverlapCheck() )
		return false;
		
		CbtAttackPC( action, true);
	}
	
	function CbtAttackPC( action : SInputAction, isHeavy : bool )
	{
		var switchAttackType : bool;
		
		switchAttackType = ShouldSwitchAttackType();
		
		if ( !theInput.LastUsedPCInput() )
		{
			return;
		}
		
		if ( thePlayer.IsCiri() )
		{
			if ( switchAttackType != isHeavy) 
			{
				thePlayer.GetInputHandler().OnCbtCiriAttackHeavy(action);
			}
			else
			{
				OnCbtAttackLight(action);
			}
		}
		else
		{
			if ( switchAttackType != isHeavy) 
			{
				if ( !FocusModeOverlapCheck() )
				return;
		
				OnCbtAttackHeavy(action);
			}
			else
			{
				OnCbtAttackLight(action);
			}
		}
	}

	private function ShouldSwitchAttackType():bool
	{
		var outKeys : array<EInputKey>;	
		
		if ( theInput.LastUsedPCInput() )
		{		
			theInput.GetPCKeysForAction('PCAlternate',outKeys);
			if ( outKeys.Size() > 0 )
			{
				if ( theInput.IsActionPressed('PCAlternate') )
				{
					return true;
				}
			}
		}
		return false;
	}

	event OnCommSprint( action : SInputAction )
	{
		if (ACS_Transformation_Activated_Check())
		{
			if( IsPressed(action) )
			{
				if (ACS_Transformation_Werewolf_Check())
				{
					//ACS_Transformation_Werewolf_Light_Attacks();
				}

				if (ACS_Transformation_Vampiress_Check())
				{
					ACS_Transformation_Vampiress_Dash();
				}

				if (ACS_Transformation_Vampire_Monster_Check())
				{
					
				}

				if (ACS_Transformation_Toad_Check())
				{
					ACS_Transformation_Toad_Leap();
				}

				if (ACS_Transformation_Sharley_Check())
				{
					SharleyRollInit();
				}
			}

			if (IsReleased(action) )
			{
				if (ACS_Transformation_Sharley_Check())
				{
					GetACSTransformationSharley().RemoveTag('ACS_Sharley_Roll_Init');
				}
			}

			return false;
		}

		if (IsPressed( action ) && FactsQuerySum("ACS_Meditation_Camera_Override") > 0)
		{
			if (!ACSMeditationCampfire())
			{
				theGame.SetHoursPerMinute( storedHoursPerMinute * 450 );
			}
			else
			{
				theGame.SetHoursPerMinute( storedHoursPerMinute * 300 );
			}
		}
		
		if (IsReleased(action) && FactsQuerySum("ACS_Meditation_Camera_Override") > 0)
		{
			if (!ACSMeditationCampfire())
			{
				theGame.SetHoursPerMinute( storedHoursPerMinute * 180 );
			}
			else
			{
				theGame.SetHoursPerMinute( storedHoursPerMinute * 120 );
			}
		}

		if( IsPressed( action ) )
		{
			altSignCastingThing();

			if( altSignCasting )
			{
				//ApplyCastSettings(); 
			}

			if(altSignCasting && !theInput.LastUsedPCInput() && theInput.GetActionValue('CastSign') > 0.7f && !GetWitcherPlayer().IsCurrentSignChanneled())
			{
				CreateSignSymbol(action);
				AltCastSign(ST_Aard);
				return false;
			}

			if 
			(
			ACS_CombatToExplorationCheck()
			&& !thePlayer.IsInCombat() 
			&& !thePlayer.IsInCombatState()
			&& !thePlayer.IsInCombatAction()
			)
			{
				BruxaDash_NEW_For_Sprint();
			}
			else
			{
				if (thePlayer.IsInAir() 
				&& thePlayer.IsInCombat()
				&& ACS_BruxaLeapAttack_Enabled()
				&& ACS_BruxaDash_Enabled()
				&& ACS_BruxaDashInput() == 1
				&& ACS_BruxaDashSprintOrW() == 1
				)
				{
					air_jump_attack();
				}
			}

			thePlayer.SetSprintActionPressed(true);
			
			if ( thePlayer.rangedWeapon )
				thePlayer.rangedWeapon.OnSprintHolster();
		}
	}

	event OnCbtAttackLight( action : SInputAction )
	{
		var allowed, checkedFists 			: bool;

		if (ACS_Transformation_Activated_Check())
		{
			if( IsPressed(action) )
			{
				if( thePlayer.IsActionAllowed(EIAB_LightAttacks)  )
				{
					if (ACS_Transformation_Werewolf_Check())
					{
						ACS_Transformation_Werewolf_Light_Attacks();
					}

					if (ACS_Transformation_Vampiress_Check())
					{
						if (!GetACSTransformationVampiress().HasTag('ACS_Vampiress_Sorceress_Mode'))
						{
							ACS_Transformation_Vampiress_Light_Attacks_Melee();
						}
						else
						{
							ACS_Transformation_Vampiress_Light_Attacks_Ranged();
						}
					}

					if (ACS_Transformation_Vampire_Monster_Check())
					{
						if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Ground_Mode'))
						{
							ACS_Transformation_Vampire_Monster_Light_Attacks_Ground();
						}
						else
						{
							ACS_Transformation_Vampire_Monster_Light_Attacks_Air();
						}
					}

					if (ACS_Transformation_Toad_Check())
					{
						ACS_Transformation_Toad_Light_Attacks();
					}

					if (ACS_Transformation_Red_Miasmal_Check())
					{
						ACS_Transformation_Red_Miasmal_Light_Attacks();
					}

					if (ACS_Transformation_Sharley_Check())
					{
						ACS_Transformation_Sharley_Light_Attacks();
					}

					if (ACS_Transformation_Black_Wolf_Check())
					{
						ACS_Transformation_Black_Wolf_Light_Attacks();
					}

				}
			}

			return false;
		}
		
		if (theInput.GetActionValue('ControllerCastModifier') > 0.5)
		return false;

		if ( IsReleased( action )  )
		{
			RemoveTimer('SpearAttackRepeatWhirl');
			thePlayer.CancelHoldAttacks();
			return true;
		}

		if( IsPressed(action) )
		{
			altSignCastingThing();

			if(altSignCasting 
			&& !theInput.LastUsedPCInput() && theInput.GetActionValue('CastSign') > 0.7f && !GetWitcherPlayer().IsCurrentSignChanneled())
			{
				CreateSignSymbol(action);
				AltCastSign(ST_Axii);
				return false;
			}


			if( thePlayer.IsActionAllowed(EIAB_LightAttacks)  )
			{
				if (thePlayer.GetBIsInputAllowed())
				{
					allowed = false;					
					
					if( thePlayer.GetCurrentMeleeWeaponType() == PW_Fists || thePlayer.GetCurrentMeleeWeaponType() == PW_None )
					{
						checkedFists = true;
						if(thePlayer.IsActionAllowed(EIAB_Fists))
							allowed = true;
					}
					else if(thePlayer.IsActionAllowed(EIAB_SwordAttack))
					{
						checkedFists = false;
						allowed = true;
					}
					
					if(allowed)
					{
						Rage_Counter_Light_Attack_Manager(5);

						if ( ACS_Enabled() ) 
						{
							if( checkedFists)
							{
								ClawFistLightAttack(); //ACS
							}
							else
							{
								LightAttackSwitch(); //ACS
							}
						}
						else
						{
							thePlayer.SetupCombatAction( EBAT_LightAttack, BS_Pressed );
						}
					}
					else
					{
						if(checkedFists)
							thePlayer.DisplayActionDisallowedHudMessage(EIAB_Fists);
						else
							thePlayer.DisplayActionDisallowedHudMessage(EIAB_SwordAttack);
					}
				}
			}
			else  if ( !thePlayer.IsActionBlockedBy(EIAB_LightAttacks,'interaction') )
			{
				thePlayer.DisplayActionDisallowedHudMessage(EIAB_LightAttacks);
			}
		}
	}

	function GM_Can_Use_Whirl() : bool
	{
		if (ACS_can_use_whirl())
		{
			ACS_refresh_whirl_cooldown();

			return true;
		}
		else
		{
			return false;
		}

		return true;
	}

	event OnCbtSpecialAttackLight( action : SInputAction )
	{
		if (ACS_Transformation_Activated_Check())
		{
			if( IsPressed(action) )
			{
				if( thePlayer.IsActionAllowed(EIAB_LightAttacks)  )
				{
					if (thePlayer.GetBIsInputAllowed())
					{
						if (ACS_Transformation_Werewolf_Check())
						{
							ACS_Transformation_Werewolf_Special_Light_Attacks();
						}

						if (ACS_Transformation_Vampiress_Check())
						{
							if (!GetACSTransformationVampiress().HasTag('ACS_Vampiress_Sorceress_Mode'))
							{
								ACS_Transformation_Vampiress_Special_Light_Attacks_Melee();
							}
							else
							{
								ACS_Transformation_Vampiress_Special_Light_Attacks_Ranged();
							}
						}

						if (ACS_Transformation_Vampire_Monster_Check())
						{
							if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Ground_Mode'))
							{
								ACS_Transformation_Vampire_Monster_Special_Light_Attack_Ground();
							}
							else
							{
								ACS_Transformation_Vampire_Monster_Special_Light_Attack_Air();
							}
						}

						if (ACS_Transformation_Toad_Check())
						{
							ACS_Transformation_Toad_Special_Attack();
						}

						if (ACS_Transformation_Red_Miasmal_Check())
						{
							ACS_Transformation_Red_Miasmal_Special_Attack_Pressed();
						}

						if (ACS_Transformation_Sharley_Check())
						{
							ACS_Transformation_Sharley_Special_Attack_Pressed();
						}

						if (ACS_Transformation_Black_Wolf_Check())
						{
							ACS_Transformation_Black_Wolf_Special_Attack();
						}
					}
				}
			}

			if ( IsReleased( action )  )
			{
				if (ACS_Transformation_Red_Miasmal_Check())
				{
					ACS_Transformation_Red_Miasmal_Special_Attack_Released();
				}

				if (ACS_Transformation_Sharley_Check())
				{
					ACS_Transformation_Sharley_Special_Attack_Released();
				}
			}

			return false;
		}

		if (thePlayer.HasTag('acs_bow_active') || thePlayer.HasTag('acs_crossbow_active'))
		{
			return false;	
		}
		
		if (theInput.GetActionValue('ControllerCastModifier') > 0.5)
		return false;

		if(!theInput.LastUsedPCInput() && IsPressed( action ) && theInput.GetActionValue( 'CastSign' ) > 0)
		{
			return false;
		}
			
		if ( IsReleased( action )  )
		{
			RemoveTimer('SpearAttackRepeatWhirl');
			thePlayer.CancelHoldAttacks();
			return true;
		}

		if (ACS_GM_Installed() && ACS_GM_Enabled())
		{
			if (!GM_Can_Use_Whirl())
			{
				return false;
			}
		}
		
		if ( !IsPlayerAbleToPerformSpecialAttack() )
			return false;
		
		if( !thePlayer.IsActionAllowed(EIAB_LightAttacks) ) 
		{
			thePlayer.DisplayActionDisallowedHudMessage(EIAB_LightAttacks);
			return false;
		}
		if(!thePlayer.IsActionAllowed(EIAB_SpecialAttackLight) )
		{
			thePlayer.DisplayActionDisallowedHudMessage(EIAB_SpecialAttackLight);
			return false;
		}
		
		if( IsPressed(action) )	
		{
			if (
				(ACS_W3EE_Installed() && ACS_W3EE_Enabled() )
				||
				(ACS_W3EE_Redux_Installed() && ACS_W3EE_Redux_Enabled() )
				)
			{
				if ( ACS_Enabled() ) 
				{ 
					SpecialAttackSwitch(); //ACS
				} 
				else
				{
					thePlayer.PrepareToAttack();
					thePlayer.SetPlayedSpecialAttackMissingResourceSound(false);
					thePlayer.AddTimer( 'IsSpecialLightAttackInputHeld', 0.00001, true );
				}
			}
			else
			{
				if ( thePlayer.CanUseSkill(S_Sword_s01) )
				{
					if ( ACS_Enabled() ) 
					{ 
						SpecialAttackSwitch(); //ACS
					} 
					else
					{
						thePlayer.PrepareToAttack();
						thePlayer.SetPlayedSpecialAttackMissingResourceSound(false);
						thePlayer.AddTimer( 'IsSpecialLightAttackInputHeld', 0.00001, true );
					}
				}
			}	
		}
	}

	private var vampiressEquippedSpecialNum 		: int;

	default vampiressEquippedSpecialNum 			= 1;

	function VampiressSpecialAbilityEffectsSwitch()
	{
		VampiressSpecialAbilityEffectsStop();

		if (GetVampiressEquippedSpecial() == 1)
		{
			GetACSTransformationVampiress().PlayEffectSingle('special_ability_01');
		}
		else if (GetVampiressEquippedSpecial() == 2)
		{
			GetACSTransformationVampiress().PlayEffectSingle('special_ability_02');
		}
		else if (GetVampiressEquippedSpecial() == 3)
		{
			GetACSTransformationVampiress().PlayEffectSingle('special_ability_03');
		}
		else if (GetVampiressEquippedSpecial() == 4)
		{
			GetACSTransformationVampiress().PlayEffectSingle('special_ability_04');
		}
		else if (GetVampiressEquippedSpecial() == 5)
		{
			GetACSTransformationVampiress().PlayEffectSingle('special_ability_05');
		}
		else if (GetVampiressEquippedSpecial() == 6)
		{
			GetACSTransformationVampiress().PlayEffectSingle('special_ability_06');
		}
		else if (GetVampiressEquippedSpecial() == 7)
		{
			GetACSTransformationVampiress().PlayEffectSingle('special_ability_07');
		}
		else if (GetVampiressEquippedSpecial() == 8)
		{
			GetACSTransformationVampiress().PlayEffectSingle('special_ability_08');
		}
	}

	function VampiressSpecialAbilityEffectsStop()
	{
		GetACSTransformationVampiress().StopEffect('special_ability_01');
		GetACSTransformationVampiress().StopEffect('special_ability_02');
		GetACSTransformationVampiress().StopEffect('special_ability_03');
		GetACSTransformationVampiress().StopEffect('special_ability_04');
		GetACSTransformationVampiress().StopEffect('special_ability_05');
		GetACSTransformationVampiress().StopEffect('special_ability_06');
		GetACSTransformationVampiress().StopEffect('special_ability_07');
		GetACSTransformationVampiress().StopEffect('special_ability_08');
	}

	function GetVampiressEquippedSpecial() : int
	{
		return vampiressEquippedSpecialNum;
	}

	function ACS_Transformation_Vampiress_CycleSelectSpecial( bIsCyclingLeft : bool ) : int
	{
		var signOrder : array<int>;
		var i : int;
		
		signOrder.PushBack( 1 );
		signOrder.PushBack( 2 );
		signOrder.PushBack( 3 );
		signOrder.PushBack( 4 );
		signOrder.PushBack( 5 );
		signOrder.PushBack( 6 );
		signOrder.PushBack( 7 );
		//signOrder.PushBack( 8 );
			
		for( i = 0; i < signOrder.Size(); i += 1 )
			if( signOrder[i] == vampiressEquippedSpecialNum )
				break;
		
		if(bIsCyclingLeft)
			return signOrder[ (6 + i) % 7 ];	
		else
			return signOrder[ (8 + i) % 7 ];
	}

	public timer function ACS_Vampiress_Hand_Fx_Restart ( dt : float, id : int)
	{ 
		GetACSTransformationVampiress().PlayEffectSingle('hand_fx');

		GetACSTransformationVampiress().PlayEffectSingle('hand_fx_l');
	}

	private var vampiress_taunt_index_1																											: int;
	default vampiress_taunt_index_1 																											= -1;

	private var previous_vampiress_taunt_index_1																								: int;
	default previous_vampiress_taunt_index_1 																									= -1;

	function ACS_Transformation_Vampiress_Sorceress_Taunt()
	{
		vampiress_taunt_index_1 = RandDifferent(this.previous_vampiress_taunt_index_1 , 3);

		switch (vampiress_taunt_index_1) 
		{	
			case 2:
			if (RandF() < 0.5)
			{
				ACSTransformVampiressPlayAnim( 'woman_sorceress_taunt_03_rp', 0.25f, 0.325f);
			}
			else
			{
				ACSTransformVampiressPlayAnim( 'woman_sorceress_taunt_03_lp', 0.25f, 0.325f);
			}
			break;
			
			case 1:
			if (RandF() < 0.5)
			{
				ACSTransformVampiressPlayAnim( 'woman_sorceress_taunt_02_rp', 0.25f, 0.325f);
			}
			else
			{
				ACSTransformVampiressPlayAnim( 'woman_sorceress_taunt_02_lp', 0.25f, 0.325f);
			}
			break;
			
			default:
			if (RandF() < 0.5)
			{
				ACSTransformVampiressPlayAnim( 'woman_sorceress_taunt_01_rp', 0.25f, 0.325f);
			}
			else
			{
				ACSTransformVampiressPlayAnim( 'woman_sorceress_taunt_01_lp', 0.25f, 0.325f);
			}
			break;
		}

		this.previous_vampiress_taunt_index_1 = vampiress_taunt_index_1;
	}

	function ACS_Transformation_Vampiress_Hand_FX_Refresh()
	{
		ACS_Transformation_Vampiress_Sorceress_Taunt();

		thePlayer.SoundEvent("magic_triss_q303_power");
		thePlayer.SoundEvent("magic_triss_q303_kill");
		thePlayer.SoundEvent("magic_triss_q303_power");
		thePlayer.SoundEvent("magic_triss_q303_kill");
		thePlayer.SoundEvent("magic_triss_q303_power");
		thePlayer.SoundEvent("magic_triss_q303_kill");

		GetACSTransformationVampiress().StopEffect('hand_fx');

		GetACSTransformationVampiress().StopEffect('hand_fx_l');

		RemoveTimer('ACS_Vampiress_Hand_Fx_Restart');
		AddTimer('ACS_Vampiress_Hand_Fx_Restart', 1.5, false);
	}

	function ACS_Transformation_Vampiress_Toggle_Next_Special()
	{
		ACS_Transformation_Vampiress_SetSpecial(ACS_Transformation_Vampiress_CycleSelectSpecial( true ));

		VampiressSpecialAbilityEffectsSwitch();
	}
	
	function ACS_Transformation_Vampiress_Toggle_Previous_Special()
	{
		ACS_Transformation_Vampiress_SetSpecial(ACS_Transformation_Vampiress_CycleSelectSpecial( false ));

		VampiressSpecialAbilityEffectsSwitch();
	}

	function ACS_Transformation_Vampiress_SetSpecial( special_num : int )
	{
		vampiressEquippedSpecialNum = special_num;
	}

	function ACS_Deal_Damage_To_Abduction_Victim()
	{
		var dmg																		: W3DamageAction;
		var projDMG																	: float;

		if (GetACSTransformationVampireMonsterAbductionVictim().UsesVitality()) 
		{ 
			if ( GetACSTransformationVampireMonsterAbductionVictim().GetStat( BCS_Vitality ) >= GetACSTransformationVampireMonsterAbductionVictim().GetStatMax( BCS_Vitality ) * 0.25 )
			{
				projDMG = GetACSTransformationVampireMonsterAbductionVictim().GetStat( BCS_Vitality ) * 0.125; 
			}
			else if ( GetACSTransformationVampireMonsterAbductionVictim().GetStat( BCS_Vitality ) < GetACSTransformationVampireMonsterAbductionVictim().GetStatMax( BCS_Vitality ) * 0.25 )
			{
				projDMG = ( GetACSTransformationVampireMonsterAbductionVictim().GetStatMax( BCS_Vitality ) - GetACSTransformationVampireMonsterAbductionVictim().GetStat( BCS_Vitality ) ) * 0.125; 
			}
		} 
		else if (GetACSTransformationVampireMonsterAbductionVictim().UsesEssence()) 
		{ 
			if (((CMovingPhysicalAgentComponent)(GetACSTransformationVampireMonsterAbductionVictim().GetMovingAgentComponent())).GetCapsuleHeight() >= 2
			|| GetACSTransformationVampireMonsterAbductionVictim().GetRadius() >= 0.7
			)
			{
				if ( GetACSTransformationVampireMonsterAbductionVictim().GetStat( BCS_Essence ) >= GetACSTransformationVampireMonsterAbductionVictim().GetStatMax( BCS_Essence ) * 0.25 )
				{
					projDMG = GetACSTransformationVampireMonsterAbductionVictim().GetStat( BCS_Essence ) * 0.06125; 
				}
				else if ( GetACSTransformationVampireMonsterAbductionVictim().GetStat( BCS_Essence ) < GetACSTransformationVampireMonsterAbductionVictim().GetStatMax( BCS_Essence ) * 0.25 )
				{
					projDMG = ( GetACSTransformationVampireMonsterAbductionVictim().GetStatMax( BCS_Essence ) - GetACSTransformationVampireMonsterAbductionVictim().GetStat( BCS_Essence ) ) * 0.06125; 
				}
			}
			else
			{
				if ( GetACSTransformationVampireMonsterAbductionVictim().GetStat( BCS_Essence ) >= GetACSTransformationVampireMonsterAbductionVictim().GetStatMax( BCS_Essence ) * 0.25 )
				{
					projDMG = GetACSTransformationVampireMonsterAbductionVictim().GetStat( BCS_Essence ) * 0.125; 
				}
				else if ( GetACSTransformationVampireMonsterAbductionVictim().GetStat( BCS_Essence ) < GetACSTransformationVampireMonsterAbductionVictim().GetStatMax( BCS_Essence ) * 0.25 )
				{
					projDMG = ( GetACSTransformationVampireMonsterAbductionVictim().GetStatMax( BCS_Essence ) - GetACSTransformationVampireMonsterAbductionVictim().GetStat( BCS_Essence ) ) * 0.125; 
				}
			}
		}

		if (GetACSTransformationVampireMonsterAbductionVictim().UsesVitality()) 
		{
			if (GetACSTransformationVampireMonsterAbductionVictim().GetStat(BCS_Vitality) > GetACSTransformationVampireMonsterAbductionVictim().GetStatMax(BCS_Vitality) * 0.1) 
			{
				GetACSTransformationVampireMonsterAbductionVictim().DrainVitality(projDMG);
			}
			else
			{
				dmg =  new W3DamageAction in this;

				dmg.Initialize(GetWitcherPlayer(), GetACSTransformationVampireMonsterAbductionVictim(), GetWitcherPlayer(), GetWitcherPlayer().GetName(), EHRT_None, CPS_Undefined, false, false, true, false);

				dmg.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, 9999 );

				dmg.SetHitAnimationPlayType(EAHA_ForceNo);

				dmg.SetSuppressHitSounds(false);

				dmg.SetForceExplosionDismemberment();
				
				theGame.damageMgr.ProcessAction( dmg );
				
				delete dmg;
			}
		}
		else if (GetACSTransformationVampireMonsterAbductionVictim().UsesEssence()) 
		{
			if (GetACSTransformationVampireMonsterAbductionVictim().GetStat(BCS_Essence) > GetACSTransformationVampireMonsterAbductionVictim().GetStatMax(BCS_Essence) * 0.1) 
			{
				GetACSTransformationVampireMonsterAbductionVictim().DrainEssence(projDMG);
			}
			else
			{
				dmg =  new W3DamageAction in this;

				dmg.Initialize(GetWitcherPlayer(), GetACSTransformationVampireMonsterAbductionVictim(), GetWitcherPlayer(), GetWitcherPlayer().GetName(), EHRT_None, CPS_Undefined, false, false, true, false);

				dmg.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, 9999 );

				dmg.SetHitAnimationPlayType(EAHA_ForceNo);

				dmg.SetSuppressHitSounds(false);

				dmg.SetForceExplosionDismemberment();
				
				theGame.damageMgr.ProcessAction( dmg );
				
				delete dmg;
			}
		}

		if (GetACSTransformationVampireMonsterAbductionVictim())
		{
			thePlayer.GainStat( BCS_Vitality, thePlayer.GetCurrentHealth() * 0.06 );
		}
	}

	event OnToggleSigns( action : SInputAction )
	{
		var tolerance : float;
		tolerance = 2.5f;

		if( action.value < -tolerance )
		{
			if (ACS_Transformation_Activated_Check())
			{
				if (ACS_Transformation_Vampiress_Check())
				{
					if (GetACSTransformationVampiress().HasTag('ACS_Vampiress_Sorceress_Mode'))
					{
						ACS_Transformation_Vampiress_Toggle_Previous_Special();

						ACS_Transformation_Vampiress_Hand_FX_Refresh();
					}
				}

				if (ACS_Transformation_Vampire_Monster_Check())
				{
					if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Ground_Mode'))
					{
						
					}
					else
					{
						ACS_Deal_Damage_To_Abduction_Victim();
					}
				}

				return false;
			}

			GetWitcherPlayer().TogglePreviousSign();

			if ( ACS_Enabled() 
			&& !thePlayer.GetWeaponHolster().IsOnTheMiddleOfHolstering() 
			&& !GetWitcherPlayer().IsCiri()
			&& !GetWitcherPlayer().IsPerformingFinisher()
			&& !GetWitcherPlayer().HasTag('in_wraith')
			&& !GetWitcherPlayer().HasTag('blood_sucking')
			&& ACS_BuffCheck()
			&& GetWitcherPlayer().IsActionAllowed(EIAB_Dodge)
			&& !GetWitcherPlayer().IsInAir()
			&& GetWitcherPlayer().IsActionAllowed(EIAB_Movement)
			&& GetWitcherPlayer().IsActionAllowed(EIAB_LightAttacks)
			&& !ACS_Transformation_Activated_Check()
			&& !GetWitcherPlayer().IsCrossbowHeld() 
			&& !GetWitcherPlayer().IsInHitAnim() 
			)
			{  
				ACS_SignSwitchArsenalInit(); 
			} 
		}
		else if( action.value > tolerance )
		{
			if (ACS_Transformation_Activated_Check())
			{
				if (ACS_Transformation_Vampiress_Check())
				{
					if (GetACSTransformationVampiress().HasTag('ACS_Vampiress_Sorceress_Mode'))
					{
						ACS_Transformation_Vampiress_Toggle_Next_Special();

						ACS_Transformation_Vampiress_Hand_FX_Refresh();
					}
				}

				if (ACS_Transformation_Vampire_Monster_Check())
				{
					if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Ground_Mode'))
					{
						
					}
					else
					{
						ACS_Deal_Damage_To_Abduction_Victim();
					}
				}

				return false;
			}

			GetWitcherPlayer().ToggleNextSign();

			if ( ACS_Enabled() 
			&& !thePlayer.GetWeaponHolster().IsOnTheMiddleOfHolstering() 
			&& !GetWitcherPlayer().IsCiri()
			&& !GetWitcherPlayer().IsPerformingFinisher()
			&& !GetWitcherPlayer().HasTag('in_wraith')
			&& !GetWitcherPlayer().HasTag('blood_sucking')
			&& ACS_BuffCheck()
			&& GetWitcherPlayer().IsActionAllowed(EIAB_Dodge)
			&& !GetWitcherPlayer().IsInAir()
			&& GetWitcherPlayer().IsActionAllowed(EIAB_Movement)
			&& GetWitcherPlayer().IsActionAllowed(EIAB_LightAttacks)
			&& !ACS_Transformation_Activated_Check()
			&& !GetWitcherPlayer().IsCrossbowHeld() 
			&& !GetWitcherPlayer().IsInHitAnim() 
			)
			{ 
				ACS_SignSwitchArsenalInit(); 
			} 
		}
	}
	
	function PrimaryWeaponSwitch()
	{
		var vACS_PrimaryWeaponSwitch 		: cACS_PrimaryWeaponSwitch;

		if (ACS_Enabled()
		&& !ACS_Transformation_Activated_Check()
		&& !GetWitcherPlayer().HasTag('in_wraith') 
		)
		{	
			vACS_PrimaryWeaponSwitch = new cACS_PrimaryWeaponSwitch in this;
			vACS_PrimaryWeaponSwitch.Primary_Weapon_Switch_Engage();
		}
	}

	function SecondaryWeaponSwitch()
	{
		var vACS_SecondaryWeaponSwitch 		: cACS_SecondaryWeaponSwitch;

		if (ACS_Enabled())
		{		
			vACS_SecondaryWeaponSwitch = new cACS_SecondaryWeaponSwitch in this;
			vACS_SecondaryWeaponSwitch.Secondary_Weapon_Switch_Engage();
		}
	}

	function ACS_RangedWeaponSwitch()
	{
		var vACS_RangedWeaponSwitch : cACS_RangedWeaponSwitch;

		if (ACS_Enabled())
		{	
			vACS_RangedWeaponSwitch = new cACS_RangedWeaponSwitch in this;
			vACS_RangedWeaponSwitch.Engage();
			ACSGetEquippedSword().StopAllEffects();
		}
	}

	event OnCbtAttackHeavy( action : SInputAction )
	{
		var allowed, checkedSword : bool;
		var outKeys : array<EInputKey>;

		if (theInput.GetActionValue('ControllerCastModifier') > 0.5)
		return false;

		if ( !FocusModeOverlapCheck() )
		return false;

		if (ACS_Transformation_Activated_Check())
		{
			if( IsReleased(action) && theInput.GetLastActivationTime( action.aName ) < 0.2 )
			{
				if( thePlayer.IsActionAllowed(EIAB_HeavyAttacks)  )
				{
					if (thePlayer.GetBIsInputAllowed())
					{
						if (ACS_Transformation_Werewolf_Check())
						{
							ACS_Transformation_Werewolf_Heavy_Attacks();
						}

						if (ACS_Transformation_Vampiress_Check())
						{
							if (ACS_Transformation_Vampiress_Check())
							{
								if (!GetACSTransformationVampiress().HasTag('ACS_Vampiress_Sorceress_Mode'))
								{
									ACS_Transformation_Vampiress_Heavy_Attacks_Melee();
								}
								else
								{
									ACS_Transformation_Vampiress_Heavy_Attacks_Ranged();
								}
							}
						}

						if (ACS_Transformation_Vampire_Monster_Check())
						{
							if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Ground_Mode'))
							{
								ACS_Transformation_Vampire_Monster_Heavy_Attacks_Ground();
							}
							else
							{
								ACS_Transformation_Vampire_Monster_Heavy_Attack_Air();
							}
						}

						if (ACS_Transformation_Toad_Check())
						{
							ACS_Transformation_Toad_Heavy_Attacks();
						}

						if (ACS_Transformation_Red_Miasmal_Check())
						{
							ACS_Transformation_Red_Miasmal_Heavy_Attacks();
						}

						if (ACS_Transformation_Sharley_Check())
						{
							ACS_Transformation_Sharley_Heavy_Attacks();
						}

						if (ACS_Transformation_Black_Wolf_Check())
						{
							ACS_Transformation_Black_Wolf_Heavy_Attacks();
						}
					}
				}
			}

			return false;
		}
		
		if ( thePlayer.GetBIsInputAllowed() )
		{
			altSignCastingThing();

			if(altSignCasting 
			&& !theInput.LastUsedPCInput() && theInput.GetActionValue('CastSign') > 0.7f && !GetWitcherPlayer().IsCurrentSignChanneled())
			{
				if(IsPressed( action ))
				{
					CreateSignSymbol(action);
					AltCastSign(ST_Yrden);
					return false;
				}
				else if (IsReleased( action ))
				{
					return false;
				}
			}

			if( thePlayer.IsActionAllowed(EIAB_HeavyAttacks) )
			{
				allowed = false;
				
				if( thePlayer.GetCurrentMeleeWeaponType() == PW_Fists || thePlayer.GetCurrentMeleeWeaponType() == PW_None )
				{
					checkedSword = false;
					if(thePlayer.IsActionAllowed(EIAB_Fists))
						allowed = true;
				}
				else if(thePlayer.IsActionAllowed(EIAB_SwordAttack))
				{
					checkedSword = true;
					allowed = true;
				}
				
				if(allowed)
				{
					if( IsReleased(action) && theInput.GetLastActivationTime( action.aName ) < 0.2 )
					{
						Rage_Counter_Heavy_Attack_Manager(3);

						if ( ACS_Enabled() ) 
						{ 
							if ( checkedSword )
							{
								HeavyAttackSwitch(); //ACS
							}
							else
							{
								ClawFistHeavyAttack(); //ACS
							}
						} 
						else
						{
							thePlayer.SetupCombatAction( EBAT_HeavyAttack, BS_Released );
						}

						thePlayer.CancelHoldAttacks();
					}
				}
				else
				{
					if(checkedSword)
						thePlayer.DisplayActionDisallowedHudMessage(EIAB_SwordAttack);
					else					
						thePlayer.DisplayActionDisallowedHudMessage(EIAB_Fists);
				}
			}
			else if ( !thePlayer.IsActionBlockedBy(EIAB_HeavyAttacks,'interaction') )
			{
				thePlayer.DisplayActionDisallowedHudMessage(EIAB_HeavyAttacks);
			}
		}
	}

	event OnCbtSpecialAttackWithAlternateLight( action : SInputAction )
	{

		if (theInput.GetActionValue('ControllerCastModifier') > 0.5)
		return false;
		
		CbSpecialAttackPC( action, false);
	}
	
	event OnCbtSpecialAttackWithAlternateHeavy( action : SInputAction )
	{
		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}

		if (theInput.GetActionValue('ControllerCastModifier') > 0.5)
		return false;

		if ( !FocusModeOverlapCheck() )
		return false;
		
		CbSpecialAttackPC( action, true);
	}
	
	function CbSpecialAttackPC( action : SInputAction, isHeavy : bool ) 
	{
		var switchAttackType : bool;
		
		switchAttackType = ShouldSwitchAttackType();
		
		if ( !theInput.LastUsedPCInput() )
		{
			return;
		}
		
		if ( IsPressed(action) )
		{
			if ( thePlayer.IsCiri() )
			{
				
				thePlayer.GetInputHandler().OnCbtCiriSpecialAttackHeavy(action);
			}
			else
			{
				if (switchAttackType != isHeavy) 
				{
					OnCbtSpecialAttackHeavy(action);
				}
				else
				{
					OnCbtSpecialAttackLight(action);
				}
			}
		}
		else if ( IsReleased( action ) )
		{
			if ( thePlayer.IsCiri() )
			{
				thePlayer.GetInputHandler().OnCbtCiriSpecialAttackHeavy(action);
			}
			else
			{
				//OnCbtSpecialAttackHeavy(action);
				//OnCbtSpecialAttackLight(action);

				if (switchAttackType != isHeavy) 
				{
					OnCbtSpecialAttackHeavy(action);
				}
				else
				{
					OnCbtSpecialAttackLight(action);
				}
			}
		}
	}
	
	function GM_Can_Use_Rend() : bool
	{
		if (ACS_can_use_rend())
		{
			ACS_refresh_rend_cooldown();

			return true;
		}
		else
		{
			return false;
		}

		return true;
	}

	event OnCbtSpecialAttackHeavy( action : SInputAction )
	{	
		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}

		if ( !FocusModeOverlapCheck() )
		return false;

		if(!theInput.LastUsedPCInput() && IsPressed( action ) && theInput.GetActionValue( 'CastSign' ) > 0)
		{
			return false;
		}

		if (
			(ACS_W3EE_Installed() && ACS_W3EE_Enabled() )
			||
			(ACS_W3EE_Redux_Installed() && ACS_W3EE_Redux_Enabled() )
			)
		{
			if ( IsReleased(action) )
			{
				RemoveTimer('RendProjectileSwitchDelay');
				AddTimer('RendProjectileSwitchDelay', 0.25, false);

				thePlayer.GetInputHandler().OnCbtSpecialAttackHeavy(action);
			}

			if ( IsPressed(action) )
			{
				RemoveTimer('RendProjectileSwitchDelay');

				if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
				{
					Grow_Geralt_Immediate_Fast(); //ACS

					thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
				}

				if ( ACS_Enabled() ) 
				{ 
					if(thePlayer.GetStat(BCS_Stamina) > 0)
					{
						action_interrupt_with_igni_sword();
					}
				}

				ACSRendCheck();

				thePlayer.GetInputHandler().OnCbtSpecialAttackHeavy(action);
			}
		}
		else
		{
			if ( IsReleased( action )  )
			{
				thePlayer.CancelHoldAttacks();
				RemoveTimer('RendProjectileSwitchDelay');
				AddTimer('RendProjectileSwitchDelay', 0.25, false);
				return true;
			}

			if (ACS_GM_Installed() && ACS_GM_Enabled())
			{
				if (!GM_Can_Use_Rend())
				{
					return false;
				}
			}
			
			if ( !IsPlayerAbleToPerformSpecialAttack() )
				return false;
			
			if( !thePlayer.IsActionAllowed(EIAB_HeavyAttacks))
			{
				thePlayer.DisplayActionDisallowedHudMessage(EIAB_HeavyAttacks);
				return false;
			}		
			if(!thePlayer.IsActionAllowed(EIAB_SpecialAttackHeavy))
			{
				thePlayer.DisplayActionDisallowedHudMessage(EIAB_SpecialAttackHeavy);
				return false;
			}
			
			if ( IsPressed(action) )
			{
				RemoveTimer('RendProjectileSwitchDelay');

				if( thePlayer.CanUseSkill(S_Sword_s02) )	
				{	
					thePlayer.PrepareToAttack();
					thePlayer.SetPlayedSpecialAttackMissingResourceSound(false);

					if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
					{
						Grow_Geralt_Immediate_Fast(); //ACS

						thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
					}

					if ( ACS_Enabled() ) 
					{ 
						if(thePlayer.GetStat(BCS_Stamina) > 0)
						{
							action_interrupt_with_igni_sword();
						}
					}

					thePlayer.AddTimer( 'IsSpecialHeavyAttackInputHeld', 0.00001, true );
					ACSRendCheck();
				}
				else
				{
					if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
					{
						Grow_Geralt_Immediate_Fast(); //ACS

						thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
					}

					if ( ACS_Enabled() ) 
					{ 
						if(thePlayer.GetStat(BCS_Stamina) > 0)
						{
							action_interrupt_with_igni_sword();
						}
					}

					if ( theInput.IsActionPressed('AttackHeavy') )
					{
						theInput.ForceDeactivateAction('AttackHeavy');
					}
					else if ( theInput.IsActionPressed('AttackWithAlternateHeavy') )
					{
						theInput.ForceDeactivateAction('AttackWithAlternateHeavy');
					}
				}
			}
		}
	}

	private var acs_rendprojectilecheck : bool; 
	
	default acs_rendprojectilecheck = false;

	public function ACS_EnableRendProjectile( enable : bool )
	{
		acs_rendprojectilecheck = enable;
	}

	public function ACS_RendProjectileCheck() : bool
	{
		return acs_rendprojectilecheck;
	}

	function ACSRendCheck()
	{
		var cost : float;

		if ( 
		thePlayer.GetCurrentStateName() == 'CombatSteel' 
		|| thePlayer.GetCurrentStateName() == 'CombatSilver' 
		)
		{
			cost = CalculateAttributeValue(thePlayer.GetSkillAttributeValue(S_Sword_s02, 'stamina_cost_per_sec', false, false));
			
			if( thePlayer.GetBIsCombatActionAllowed() && thePlayer.IsActionAllowed(EIAB_SwordAttack))
			{
				if(thePlayer.GetStat(BCS_Stamina) >= cost)
				{
					ACS_EnableRendProjectile(true);

					RemoveTimer('RendProjectileCancelFailsafe');
					AddTimer('RendProjectileCancelFailsafe', 3, false);
				}
				else if(
				!thePlayer.playedSpecialAttackMissingResourceSound
				|| thePlayer.GetStat(BCS_Stamina) <= 0
				)
				{
					ACS_EnableRendProjectile(false);
				}
			}
		}
		else
		{
			ACS_EnableRendProjectile(false);
		}
	}

	public timer function RendProjectileSwitchDelay(deltaTime : float , id : int)
	{
		if ( ACS_Enabled()
		&& ACS_RendProjectileCheck() ) { ACS_Rend_Projectile_Switch(); }
	}

	event OnCommGuard( action : SInputAction )
	{
		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}

		if(thePlayer.IsCiri() && !GetCiriPlayer().HasSword())
			return false;
			
		if ( !thePlayer.IsInsideInteraction() )
		{
			if (  thePlayer.IsActionAllowed(EIAB_Parry) )
			{
				if( IsReleased(action) && thePlayer.GetCurrentStateName() == 'CombatFists' )
					thePlayer.OnGuardedReleased();
					if ( ACS_Enabled() ) { RemoveTimer('ACS_Shield_Spawn_Delay'); ACS_Axii_Shield_Destroy_DELAY(); return true;} //ACS
				
				if( IsPressed(action) )
				{
					thePlayer.AddCounterTimeStamp(theGame.GetEngineTime());	

					action_interrupt(); //ACS
					thePlayer.SetGuarded(true);
					thePlayer.OnPerformGuard();

					if ( ACS_Enabled() ) { GuardAttack(); } //ACS
				}
				else if( IsReleased(action) )
				{
					thePlayer.SetGuarded(false);
					if ( ACS_Enabled() ) { RemoveTimer('ACS_Shield_Spawn_Delay'); ACS_Axii_Shield_Destroy_DELAY(); return true;} //ACS
				}	
			}
			else
			{
				thePlayer.DisplayActionDisallowedHudMessage(EIAB_Parry);				
			}
		}
	}

	public timer function Vampire_Monster_Bats_Gatling(deltaTime : float , id : int)
	{
		GetVampireMonsterClass().ACS_VampireMonsterBatProjectileRepeating_Engage();
	}

	event OnCbtLockAndGuard( action : SInputAction )
	{
		if (ACS_Transformation_Activated_Check())
		{
			if( IsPressed(action) )
			{
				if (thePlayer.GetBIsInputAllowed())
				{
					if (ACS_Transformation_Vampiress_Check())
					{
						if (!GetACSTransformationVampiress().HasTag('ACS_Vampiress_Sorceress_Mode'))
						{
							ACS_Transformation_Vampiress_Repel_Melee();
						}
						else
						{
							ACS_Transformation_Vampiress_Repel_Ranged();
						}

						GetACSTransformationVampiress().AddTag('ACS_Vampiress_Is_Parrying');
					}

					if (ACS_Transformation_Vampire_Monster_Check())
					{
						if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Ground_Mode'))
						{
							ACSVampireMonsterRemoveAttackTimers();
							GetACSTransformationVampireMonster().AddTag('ACS_Transformation_Vampire_Monster_Is_Parrying');
						}
						else
						{
							thePlayer.SoundEvent('monster_dettlaff_monster_voice_heavy_charge');

							//ACS_Transformation_Vampire_Monster_Special_Light_Attack_Air_Gatling();
						}
					}
				}
			}

			if( IsReleased(action) )
			{
				if (ACS_Transformation_Vampire_Monster_Check())
				{
					RemoveTimer('Vampire_Monster_Bats_Gatling');

					GetWitcherPlayer().SoundEvent("q704_bats_stop");

					GetACSTransformationVampireMonster().RemoveTag('ACS_Transformation_Vampire_Monster_Is_Parrying');
				}

				if (ACS_Transformation_Vampiress_Check())
				{
					GetACSTransformationVampiress().RemoveTag('ACS_Vampiress_Is_Parrying');
				}
			}

			return false;
		}

		if (theInput.GetActionValue('ControllerCastModifier') > 0.5)
			return false;
			
		if(thePlayer.IsCiri() && !GetCiriPlayer().HasSword())
			return false;
		
		
		if( IsReleased(action) )
		{
			altSignCastingThing();

			if(altSignCasting
			&& !theInput.LastUsedPCInput() && theInput.GetActionValue('CastSign') > 0.7f && GetWitcherPlayer().IsCurrentSignChanneled())
			{				
				thePlayer.AbortSign();
			}

			thePlayer.SetGuarded(false);
			thePlayer.OnGuardedReleased();	
			if ( ACS_Enabled() ) { RemoveTimer('ACS_Shield_Spawn_Delay'); ACS_Axii_Shield_Destroy_DELAY(); return true;} //ACS
		}
		
		if( (thePlayer.IsWeaponHeld('fist') || thePlayer.GetCurrentStateName() == 'CombatFists') && !thePlayer.IsActionAllowed(EIAB_Fists))
		{
			if ( ACS_Enabled() ) { GuardAttack(); return true;} //ACS
			thePlayer.DisplayActionDisallowedHudMessage(EIAB_Fists);
			return false;
		}

		if( IsPressed(action) )
		{
			altSignCastingThing();

			if(altSignCasting
			&& !theInput.LastUsedPCInput() && theInput.GetActionValue('CastSign') > 0.7f && !GetWitcherPlayer().IsCurrentSignChanneled())
			{
				CreateSignSymbol(action);
				AltCastSign(ST_Igni);
				return false;
			}


			if( !thePlayer.IsActionAllowed(EIAB_Parry) )
			{
				if ( thePlayer.IsActionBlockedBy(EIAB_Parry,'UsableItem') )
				{
					thePlayer.DisplayActionDisallowedHudMessage(EIAB_Parry);
				}
				return true;
			}
				
			if ( thePlayer.GetCurrentStateName() == 'Exploration' )
				thePlayer.GoToCombatIfNeeded();
				
			if ( thePlayer.bLAxisReleased )
				thePlayer.ResetRawPlayerHeading();
			
			if ( thePlayer.rangedWeapon && thePlayer.rangedWeapon.GetCurrentStateName() != 'State_WeaponWait' )
				thePlayer.OnRangedForceHolster( true, true );
			
			thePlayer.AddCounterTimeStamp(theGame.GetEngineTime());	

			if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
			{
				 Grow_Geralt_Immediate_Fast(); //ACS

				thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
			}

			if (thePlayer.IsInCombat() || thePlayer.IsThreatened()){action_interrupt();} //ACS

			thePlayer.SetGuarded(true);
			thePlayer.OnPerformGuard();

			if ( ACS_Enabled() ) { GuardAttack(); } //ACS
		}	
	}

	private function IsPlayerAbleToPerformSpecialAttack() : bool
	{
		if( ( thePlayer.GetCurrentStateName() == 'Exploration' ) && !( thePlayer.IsWeaponHeld( 'silversword' ) || thePlayer.IsWeaponHeld( 'steelsword' ) ) )
		{
			return false;
		}
		return true;
	}

	event OnCbtCameraLockOrSpawnHorse( action : SInputAction )
	{
		if ( OnCbtCameraLock(action) )
			return true;
			
		if ( OnCommSpawnHorse(action) )
			return true;
			
		return false;
	}

	private var pressTimestamp : float;

	event OnCommSpawnHorse( action : SInputAction )
	{
		var isSpawnHorseSecondTap : bool;
		isSpawnHorseSecondTap = false;
		
		if( IsPressed( action ) )
			return false;
		
		isSpawnHorseSecondTap = pressTimestamp + DOUBLE_TAP_WINDOW >= theGame.GetEngineTimeAsSeconds();

		if( thePlayer.IsActionAllowed( EIAB_CallHorse ) 
			&& !thePlayer.IsInInterior() && !thePlayer.IsInAir()
			&& (isSpawnHorseSecondTap || theInput.LastUsedPCInput()) )
		{
			if ( thePlayer.IsHoldingItemInLHand () )
			{
				thePlayer.OnUseSelectedItem(true);
				thePlayer.SetPlayerActionToRestore ( PATR_CallHorse );
			}
			else
			{
				ACSOnSpawnPlayerHorse();
			}			
		}
		else if( isSpawnHorseSecondTap || theInput.LastUsedPCInput() )
		{
			if( thePlayer.IsInInterior() )
				thePlayer.DisplayActionDisallowedHudMessage( EIAB_Undefined, false, true );
			else
				thePlayer.DisplayActionDisallowedHudMessage( EIAB_CallHorse );
		}
			
		pressTimestamp = theGame.GetEngineTimeAsSeconds();
			
		return true;
	}

	function ACSOnSpawnPlayerHorse()
	{
		var createEntityHelper				: CR4CreateEntityHelper;
		var vehicle 						: CVehicleComponent;
		var horse 							: CNewNPC;

		horse = thePlayer.GetHorseWithInventory();

		if (ACS_Instant_Mount_Enabled())
		{
			if( !horse
			||	!horse.IsAlive()
			|| 	( !thePlayer.WasVisibleInScaledFrame( horse, 1.5f, 1.5f ) && VecDistanceSquared( thePlayer.GetWorldPosition(), horse.GetWorldPosition() ) > 900 )
			||  VecDistanceSquared( thePlayer.GetWorldPosition(), horse.GetWorldPosition() ) > 1600 )
			{
				thePlayer.RaiseEvent('HorseSummon');

				createEntityHelper = new CR4CreateEntityHelper in theGame;
				createEntityHelper.SetPostAttachedCallback( theGame, 'OnPlayerHorseSummoned' );
				theGame.SummonPlayerHorse( true, createEntityHelper ); 
			}
			else
			{
				thePlayer.RaiseEvent('HorseSummon');

				horse.SignalGameplayEventParamObject( 'HorseSummon', thePlayer );
				
				((W3HorseComponent)horse.GetHorseComponent()).NGELookatPlayer();
			}

			if( horse 
			&& !thePlayer.IsSailing() 
			&& !thePlayer.IsUsingHorse() 
			&& !thePlayer.IsUsingVehicle() 
			)
			{
				horse.TeleportWithRotation( thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() ); 

				horse.DestroyEffect('demonic_cast');
				horse.PlayEffectSingle( 'demonic_cast' );

				vehicle = (CVehicleComponent)( horse.GetHorseComponent() );

				if( vehicle )
				{
					vehicle.Mount(thePlayer, VMT_ImmediateUse, EVS_driver_slot);
				}
			}
		}
		else
		{
			if( !horse
			||	!horse.IsAlive()
			|| 	( !thePlayer.WasVisibleInScaledFrame( horse, 1.5f, 1.5f ) && VecDistanceSquared( thePlayer.GetWorldPosition(), horse.GetWorldPosition() ) > 900 )
			||  VecDistanceSquared( thePlayer.GetWorldPosition(), horse.GetWorldPosition() ) > 1600 )
			{
				thePlayer.RaiseEvent('HorseSummon');

				createEntityHelper = new CR4CreateEntityHelper in theGame;
				createEntityHelper.SetPostAttachedCallback( theGame, 'OnPlayerHorseSummoned' );
				theGame.SummonPlayerHorse( true, createEntityHelper ); 
			}
			else
			{
				horse.SignalGameplayEventParamObject( 'HorseSummon', thePlayer );
				
				((W3HorseComponent)horse.GetHorseComponent()).NGELookatPlayer();

				if( 
				VecDistanceSquared( thePlayer.GetWorldPosition(), horse.GetWorldPosition() ) <= 2 * 2 
				)
				{
					if( horse
					&&	horse.IsAlive()
					&& !thePlayer.IsSailing() 
					&& !thePlayer.IsUsingHorse() 
					&& !thePlayer.IsUsingVehicle() 
					)
					{
						thePlayer.ClearAnimationSpeedMultipliers();

						thePlayer.SetAnimationSpeedMultiplier( 2 );
																
						RemoveTimer('ACS_ResetAnimation'); 
						
						AddTimer('ACS_ResetAnimation', 2  , false);

						vehicle = (CVehicleComponent)( horse.GetHorseComponent() );

						if( vehicle )
						{
							vehicle.Mount(thePlayer, VMT_ApproachAndMount, EVS_driver_slot);
						}
					}
				}
				else
				{
					thePlayer.RaiseEvent('HorseSummon');
				}
			}
		}

		thePlayer.OnSpawnHorse();
	}

	event OnCbtCameraLock( action : SInputAction )
	{	
		if( IsPressed(action) )
		{
			AutoCat();

			if ( thePlayer.IsThreatened() || thePlayer.IsActorLockedToTarget() )
			{
				if( !thePlayer.IsActionAllowed(EIAB_CameraLock))
				{
					return false;
				}
				else if ( !thePlayer.IsHardLockEnabled() && thePlayer.GetDisplayTarget() && (CActor)( thePlayer.GetDisplayTarget() ) && thePlayer.IsActionAllowed(EIAB_HardLock))
				{	
					if ( thePlayer.bLAxisReleased )
						thePlayer.ResetRawPlayerHeading();
					
					thePlayer.HardLockToTarget( true );
				}
				else
				{
					thePlayer.HardLockToTarget( false );
				}	
				return true;
			}
		}

		if( IsReleased(action) )
		{
			DisableCat();
		}

		return false;
	}

	private var potionUpperHeld, potionLowerHeld : bool;	

	private var potionModeHold : bool;	

	default potionModeHold = true;

	event OnCommDrinkpotionUpperHeld( action : SInputAction )
	{
		if(!potionModeHold)
			return false;
			
		
		if(thePlayer.IsCiri())
			return false;
			
		if(IsReleased(action))
			return false;
		
		potionUpperHeld = true;
		GetWitcherPlayer().FlipSelectedPotion(true);
	}
	
	event OnCommDrinkpotionLowerHeld( action : SInputAction )
	{
		if(!potionModeHold)
			return false;
			
		
		if(thePlayer.IsCiri())
			return false;
			
		if(IsReleased(action))
			return false;
		
		potionLowerHeld = true;
		GetWitcherPlayer().FlipSelectedPotion(false);
	}
	
	public final function SetPotionSelectionMode(b : bool)
	{
		potionModeHold = b;
	}

	private final function DrinkPotion(action : SInputAction, upperSlot : bool) : bool
	{
		var witcher : W3PlayerWitcher;
		
		if ( potionModeHold && IsReleased(action) )
		{
			if(!potionUpperHeld && !potionLowerHeld)
			{
				GetWitcherPlayer().OnPotionDrinkInput(upperSlot);
			}
			
			if(upperSlot)
				potionUpperHeld = false;
			else
				potionLowerHeld = false;
		}		
		else if(!potionModeHold && IsPressed(action))
		{
			witcher = GetWitcherPlayer();
			if(!witcher.IsPotionDoubleTapRunning())
			{
				witcher.SetPotionDoubleTapRunning(true, upperSlot);
				return true;
			}
			else
			{
				witcher.SetPotionDoubleTapRunning(false);
				witcher.FlipSelectedPotion(upperSlot);				
				return true;
			}
		}
		
		return false;
	}

	public var potionaniminprogress : bool;

	function SetPotionaAnimProgress( flag : bool )
	{
		potionaniminprogress = flag;
	}

	function GetPotionAnimProgress() : bool 
	{
		return potionaniminprogress;
	}

	function AttachUseableItem(slot : EEquipmentSlots)
	{
		var item 															: SItemUniqueId;
		var temp															: CEntityTemplate;
		var ent																: CEntity;
		var attach_vec														: Vector;
		var attach_rot														: EulerAngles;
		var timeToDestroy, h												: float;
		var meshcomp														: CComponent;
		var animcomp 														: CAnimatedComponent;
	
		GetWitcherPlayer().GetItemEquippedOnSlot( slot, item );

		if (
		(GetWitcherPlayer().inv.GetItemCategory(item) == 'potion' 
		&& GetWitcherPlayer().inv.ItemHasTag(item, 'Potion'))
		)
		{
			temp = (CEntityTemplate)LoadResource(

				"dlc\bob\data\quests\main_quests\quest_files\q704_truth\entities\q704_dropped_potion_app.w2ent"
				//"items\quest_items\mh107\mh107_item_czart_lure_potion.w2ent"
				//"items\quest_items\q401\q401_item__drip\q401_item__drip_blue_potion.w2ent"
				//"items\quest_items\q401\q401_item__drip\q401_item__drip_gray_potion.w2ent"
				//"items\quest_items\q401\q401_item__drip\q401_item__drip_red_potion.w2ent"
				//"dlc\bob\data\quests\main_quests\quest_files\q704_truth\entities\q704_dropped_potion_app.w2ent"
				//"dlc\bob\data\quests\main_quests\quest_files\q704_truth\entities\q704_dropped_potion_container.w2ent"
				//"dlc\bob\data\items\quest_items\mh701\mh701_item_sharely_lure_potion.w2ent"
				//"dlc\bob\data\quests\minor_quests\quest_files\mq7017_talking_horse\entities\mq7017_4_potion_bottle.w2ent"
				//
				//

			, true );

			attach_rot.Roll = 0;
			attach_rot.Pitch = 180;
			attach_rot.Yaw = 0;
			attach_vec.X = 0;
			attach_vec.Y = 0;
			attach_vec.Z = 0.05;

			timeToDestroy = 2.5;
		}
		else if 
		(
			GetWitcherPlayer().inv.ItemHasTag(item, 'Edibles')
		)
		{
			if (GetWitcherPlayer().inv.ItemHasTag(item, 'Drinks'))
			{
				temp = (CEntityTemplate)LoadResource(

				"quests\prologue\quest_files\q002_emhyr\entities\q002_empty_bottles.w2ent"
				//"quests\sidequests\novigrad\quest_files\sq310_dangerous_game\entities\sq310_voka_bottle_container.w2ent"
				//"quests\part_1\quest_files\q105_witches\entities\q105_item__godling_bottle.w2ent"
				//"quests\part_1\quest_files\q303_treasure\entities\q303_wine_bottle.w2ent"
				//"quests\part_1\quest_files\q303_treasure\entities\loot\q303_wine_bottle_loot.w2ent"
				//"quests\prologue\quest_files\q002_emhyr\entities\q002_empty_bottles.w2ent"
				//"items\quest_items\mq1019\mq1019_item__holy_oil_bottle.w2ent"
				//"dlc\bob\data\items\quest_items\q704\q704_item__perfume_bottle.w2ent"
				//"dlc\bob\data\items\work\perfume_bottle\perfume_bottle.w2ent"
				//"quests\prologue\quest_files\q001_beggining\entities\q001_yennefer_apple_juice.w2ent"
				//""
				//""
				//""

				, true );

				attach_rot.Roll = 0;
				attach_rot.Pitch = 180;
				attach_rot.Yaw = 0;
				attach_vec.X = 0;
				attach_vec.Y = 0;
				attach_vec.Z = 0.2;

				timeToDestroy = 2.5;
			}
			else if ( GetWitcherPlayer().inv.ItemHasTag(item, 'Meat'))
			{
				if (
					StrContains( GetWitcherPlayer().inv.GetItemName(item), "raw" ) 
				)
				{
					temp = (CEntityTemplate)LoadResource(

					"items\cutscenes\meat_01\meat_01.w2ent"
					//"items\work\meat_01\meat_butcher.w2ent"
					//"items\work\meat_01\meat_food.w2ent"
					//"items\cutscenes\meat_01\meat_01.w2ent"
					//"dlc\bob\data\items\work\grapes\gen_fruit_grapes_red.w2ent"
					//"dlc\bob\data\items\work\grapes\gen_fruit_grapes_red_lying.w2ent"
					//"quests\prologue\quest_files\q002_emhyr\entities\q002_empty_bottles.w2ent"
					//"items\work\apple_bitten\apple_bitten.w2ent"
					//"items\work\goods\apple_01.w2ent"
					//"items\work\goods\goods_apple.w2ent"
					//"dlc\bob\data\items\quest_items\q701\q701_apple_lure.w2ent"
					//""
					//""
					//""

					, true );

					attach_rot.Roll = 90;
					attach_rot.Pitch = 0;
					attach_rot.Yaw = 90;
					attach_vec.X = -0.012;
					attach_vec.Y = 0.0125;
					attach_vec.Z = 0;
				}
				else
				{
					temp = (CEntityTemplate)LoadResource(

					"items\work\meat_01\meat_food.w2ent"
					//"items\work\meat_01\meat_butcher.w2ent"
					//"items\work\meat_01\meat_food.w2ent"
					//"items\cutscenes\meat_01\meat_01.w2ent"
					//"dlc\bob\data\items\work\grapes\gen_fruit_grapes_red.w2ent"
					//"dlc\bob\data\items\work\grapes\gen_fruit_grapes_red_lying.w2ent"
					//"quests\prologue\quest_files\q002_emhyr\entities\q002_empty_bottles.w2ent"
					//"items\work\apple_bitten\apple_bitten.w2ent"
					//"items\work\goods\apple_01.w2ent"
					//"items\work\goods\goods_apple.w2ent"
					//"dlc\bob\data\items\quest_items\q701\q701_apple_lure.w2ent"
					//""
					//""
					//""

					, true );

					attach_rot.Roll = 90;
					attach_rot.Pitch = 0;
					attach_rot.Yaw = 90;
					attach_vec.X = -0.012;
					attach_vec.Y = 0.0125;
					attach_vec.Z = 0.05;
				}

				timeToDestroy = 3;
			}
			else if ( GetWitcherPlayer().inv.ItemHasTag(item, 'Fruits'))
			{
				if (
					StrContains( GetWitcherPlayer().inv.GetItemName(item), "grape" ) 
				)
				{
					temp = (CEntityTemplate)LoadResource(

					"dlc\bob\data\items\work\grapes\gen_fruit_grapes_red.w2ent"
					//"environment\decorations\food\hanging_meat\meat_hanging_leg.w2ent"
					//"items\cutscenes\meat_01\meat_01.w2ent"
					//"environment\decorations\food\hanging_meat\meat_hanging_thigh.w2ent"
					//"dlc\bob\data\items\work\grapes\gen_fruit_grapes_red.w2ent"
					//"dlc\bob\data\items\work\grapes\gen_fruit_grapes_red_lying.w2ent"
					//"quests\prologue\quest_files\q002_emhyr\entities\q002_empty_bottles.w2ent"
					//"items\work\apple_bitten\apple_bitten.w2ent"
					//"items\work\goods\apple_01.w2ent"
					//"items\work\goods\goods_apple.w2ent"
					//"dlc\bob\data\items\quest_items\q701\q701_apple_lure.w2ent"
					//""
					//""
					//""

					, true );

					attach_rot.Roll = 0;
					attach_rot.Pitch = 180;
					attach_rot.Yaw = 0;
					attach_vec.X = 0;
					attach_vec.Y = 0;
					attach_vec.Z = 0.075;
				}
				else
				{
					temp = (CEntityTemplate)LoadResource(

					"items\work\goods\apple_01.w2ent"
					//"environment\decorations\food\hanging_meat\meat_hanging_leg.w2ent"
					//"items\cutscenes\meat_01\meat_01.w2ent"
					//"environment\decorations\food\hanging_meat\meat_hanging_thigh.w2ent"
					//"dlc\bob\data\items\work\grapes\gen_fruit_grapes_red.w2ent"
					//"dlc\bob\data\items\work\grapes\gen_fruit_grapes_red_lying.w2ent"
					//"quests\prologue\quest_files\q002_emhyr\entities\q002_empty_bottles.w2ent"
					//"items\work\apple_bitten\apple_bitten.w2ent"
					//"items\work\goods\apple_01.w2ent"
					//"items\work\goods\goods_apple.w2ent"
					//"dlc\bob\data\items\quest_items\q701\q701_apple_lure.w2ent"
					//""
					//""
					//""

					, true );

					attach_rot.Roll = 0;
					attach_rot.Pitch = 180;
					attach_rot.Yaw = 0;
					attach_vec.X = 0;
					attach_vec.Y = 0;
					attach_vec.Z = 0.075;
				}

				timeToDestroy = 3;
			}
			else if ( GetWitcherPlayer().inv.ItemHasTag(item, 'Wheat'))
			{
				temp = (CEntityTemplate)LoadResource(

				"items\work\bread\tool_bread_piece.w2ent"
				//"environment\decorations\food\hanging_meat\meat_hanging_leg.w2ent"
				//"items\cutscenes\meat_01\meat_01.w2ent"
				//"environment\decorations\food\hanging_meat\meat_hanging_thigh.w2ent"
				//"dlc\bob\data\items\work\grapes\gen_fruit_grapes_red.w2ent"
				//"dlc\bob\data\items\work\grapes\gen_fruit_grapes_red_lying.w2ent"
				//"quests\prologue\quest_files\q002_emhyr\entities\q002_empty_bottles.w2ent"
				//"items\work\apple_bitten\apple_bitten.w2ent"
				//"items\work\goods\apple_01.w2ent"
				//"items\work\goods\goods_apple.w2ent"
				//"dlc\bob\data\items\quest_items\q701\q701_apple_lure.w2ent"
				//""
				//""
				//""

				, true );

				attach_rot.Roll = 0;
				attach_rot.Pitch = 90;
				attach_rot.Yaw = 0;
				attach_vec.X = -0.04;
				attach_vec.Y = 0.05;
				attach_vec.Z = 0.1;

				timeToDestroy = 3;
			}
			else if ( GetWitcherPlayer().inv.ItemHasTag(item, 'Fish'))
			{
				temp = (CEntityTemplate)LoadResource(

				"items\work\bread\tool_bread_piece.w2ent"
				//"environment\decorations\food\hanging_meat\meat_hanging_leg.w2ent"
				//"items\cutscenes\meat_01\meat_01.w2ent"
				//"environment\decorations\food\hanging_meat\meat_hanging_thigh.w2ent"
				//"dlc\bob\data\items\work\grapes\gen_fruit_grapes_red.w2ent"
				//"dlc\bob\data\items\work\grapes\gen_fruit_grapes_red_lying.w2ent"
				//"quests\prologue\quest_files\q002_emhyr\entities\q002_empty_bottles.w2ent"
				//"items\work\apple_bitten\apple_bitten.w2ent"
				//"items\work\goods\apple_01.w2ent"
				//"items\work\goods\goods_apple.w2ent"
				//"dlc\bob\data\items\quest_items\q701\q701_apple_lure.w2ent"
				//""
				//""
				//""

				, true );

				attach_rot.Roll = 0;
				attach_rot.Pitch = 90;
				attach_rot.Yaw = 0;
				attach_vec.X = -0.04;
				attach_vec.Y = 0.05;
				attach_vec.Z = 0.1;

				timeToDestroy = 3;
			}
			else if ( GetWitcherPlayer().inv.ItemHasTag(item, 'Sweets'))
			{
				temp = (CEntityTemplate)LoadResource(

				"quests\part_1\quest_files\q105_witches\entities\sweets\q105_sweet_illusion_clue01.w2ent"
				//"environment\decorations\food\hanging_meat\meat_hanging_leg.w2ent"
				//"items\cutscenes\meat_01\meat_01.w2ent"
				//"environment\decorations\food\hanging_meat\meat_hanging_thigh.w2ent"
				//"dlc\bob\data\items\work\grapes\gen_fruit_grapes_red.w2ent"
				//"dlc\bob\data\items\work\grapes\gen_fruit_grapes_red_lying.w2ent"
				//"quests\prologue\quest_files\q002_emhyr\entities\q002_empty_bottles.w2ent"
				//"items\work\apple_bitten\apple_bitten.w2ent"
				//"items\work\goods\apple_01.w2ent"
				//"items\work\goods\goods_apple.w2ent"
				//"dlc\bob\data\items\quest_items\q701\q701_apple_lure.w2ent"
				//""
				//""
				//""

				, true );

				attach_rot.Roll = 0;
				attach_rot.Pitch = 180;
				attach_rot.Yaw = 0;
				attach_vec.X = 0;
				attach_vec.Y = 0;
				attach_vec.Z = 0.075;

				timeToDestroy = 3;
			}
			else if ( GetWitcherPlayer().inv.ItemHasTag(item, 'Vegetables'))
			{
				temp = (CEntityTemplate)LoadResource(

				"items\work\bread\tool_bread_piece.w2ent"
				//"environment\decorations\food\hanging_meat\meat_hanging_leg.w2ent"
				//"items\cutscenes\meat_01\meat_01.w2ent"
				//"environment\decorations\food\hanging_meat\meat_hanging_thigh.w2ent"
				//"dlc\bob\data\items\work\grapes\gen_fruit_grapes_red.w2ent"
				//"dlc\bob\data\items\work\grapes\gen_fruit_grapes_red_lying.w2ent"
				//"quests\prologue\quest_files\q002_emhyr\entities\q002_empty_bottles.w2ent"
				//"items\work\apple_bitten\apple_bitten.w2ent"
				//"items\work\goods\apple_01.w2ent"
				//"items\work\goods\goods_apple.w2ent"
				//"dlc\bob\data\items\quest_items\q701\q701_apple_lure.w2ent"
				//""
				//""
				//""

				, true );

				attach_rot.Roll = 0;
				attach_rot.Pitch = 90;
				attach_rot.Yaw = 0;
				attach_vec.X = -0.04;
				attach_vec.Y = 0.05;
				attach_vec.Z = 0.1;

				timeToDestroy = 3;
			}
			else if ( GetWitcherPlayer().inv.ItemHasTag(item, 'Dairy'))
			{
				temp = (CEntityTemplate)LoadResource(

				"items\work\bread\tool_bread_piece.w2ent"
				//"environment\decorations\food\hanging_meat\meat_hanging_leg.w2ent"
				//"items\cutscenes\meat_01\meat_01.w2ent"
				//"environment\decorations\food\hanging_meat\meat_hanging_thigh.w2ent"
				//"dlc\bob\data\items\work\grapes\gen_fruit_grapes_red.w2ent"
				//"dlc\bob\data\items\work\grapes\gen_fruit_grapes_red_lying.w2ent"
				//"quests\prologue\quest_files\q002_emhyr\entities\q002_empty_bottles.w2ent"
				//"items\work\apple_bitten\apple_bitten.w2ent"
				//"items\work\goods\apple_01.w2ent"
				//"items\work\goods\goods_apple.w2ent"
				//"dlc\bob\data\items\quest_items\q701\q701_apple_lure.w2ent"
				//""
				//""
				//""

				, true );

				attach_rot.Roll = 0;
				attach_rot.Pitch = 90;
				attach_rot.Yaw = 0;
				attach_vec.X = -0.04;
				attach_vec.Y = 0.05;
				attach_vec.Z = 0.1;

				timeToDestroy = 3;
			}
			else
			{
				temp = (CEntityTemplate)LoadResource(

				"items\work\bread\tool_bread_piece.w2ent"
				//"environment\decorations\food\hanging_meat\meat_hanging_leg.w2ent"
				//"items\cutscenes\meat_01\meat_01.w2ent"
				//"environment\decorations\food\hanging_meat\meat_hanging_thigh.w2ent"
				//"dlc\bob\data\items\work\grapes\gen_fruit_grapes_red.w2ent"
				//"dlc\bob\data\items\work\grapes\gen_fruit_grapes_red_lying.w2ent"
				//"quests\prologue\quest_files\q002_emhyr\entities\q002_empty_bottles.w2ent"
				//"items\work\apple_bitten\apple_bitten.w2ent"
				//"items\work\goods\apple_01.w2ent"
				//"items\work\goods\goods_apple.w2ent"
				//"dlc\bob\data\items\quest_items\q701\q701_apple_lure.w2ent"
				//""
				//""
				//""

				, true );

				attach_rot.Roll = 0;
				attach_rot.Pitch = 90;
				attach_rot.Yaw = 0;
				attach_vec.X = -0.04;
				attach_vec.Y = 0.05;
				attach_vec.Z = 0.1;

				timeToDestroy = 3;
			}
		}
		else if 
		(
			(GetWitcherPlayer().inv.GetItemCategory(item) == 'alchemy_ingredient' 
			&& GetWitcherPlayer().inv.ItemHasTag(item, 'StrongAlcohol'))
		)
		{
			temp = (CEntityTemplate)LoadResource(

				"quests\prologue\quest_files\q002_emhyr\entities\q002_empty_bottles.w2ent"
				//"quests\sidequests\novigrad\quest_files\sq310_dangerous_game\entities\sq310_voka_bottle_container.w2ent"
				//"quests\part_1\quest_files\q105_witches\entities\q105_item__godling_bottle.w2ent"
				//"quests\part_1\quest_files\q303_treasure\entities\q303_wine_bottle.w2ent"
				//"quests\part_1\quest_files\q303_treasure\entities\loot\q303_wine_bottle_loot.w2ent"
				//"quests\prologue\quest_files\q002_emhyr\entities\q002_empty_bottles.w2ent"
				//"items\quest_items\mq1019\mq1019_item__holy_oil_bottle.w2ent"
				//"dlc\bob\data\items\quest_items\q704\q704_item__perfume_bottle.w2ent"
				//"dlc\bob\data\items\work\perfume_bottle\perfume_bottle.w2ent"
				//"quests\prologue\quest_files\q001_beggining\entities\q001_yennefer_apple_juice.w2ent"
				//""
				//""
				//""

			, true );


			attach_rot.Roll = 0;
			attach_rot.Pitch = 180;
			attach_rot.Yaw = 0;
			attach_vec.X = 0;
			attach_vec.Y = 0;
			attach_vec.Z = 0.15;

			timeToDestroy = 3;
		}

		GetACSUseableItem().Destroy();

		ent = theGame.CreateEntity( temp, thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );

		if ( 
		GetWitcherPlayer().inv.ItemHasTag(item, 'Meat')
		|| GetWitcherPlayer().inv.ItemHasTag(item, 'Dairy')
		|| GetWitcherPlayer().inv.ItemHasTag(item, 'Vegetables')
		|| GetWitcherPlayer().inv.ItemHasTag(item, 'Fish')
		)
		{
			animcomp = (CAnimatedComponent)ent.GetComponentByClassName('CAnimatedComponent');
			meshcomp = ent.GetComponentByClassName('CMeshComponent');
			h = 0.5;
			animcomp.SetScale(Vector(h,h,h,1));
			meshcomp.SetScale(Vector(h,h,h,1));	
		}
		else if ( 
		GetWitcherPlayer().inv.ItemHasTag(item, 'Wheat')
		)
		{
			animcomp = (CAnimatedComponent)ent.GetComponentByClassName('CAnimatedComponent');
			meshcomp = ent.GetComponentByClassName('CMeshComponent');
			h = 0.25;
			animcomp.SetScale(Vector(h,h,h,1));
			meshcomp.SetScale(Vector(h,h,h,1));	
		}

		ent.CreateAttachment( GetWitcherPlayer(), 'l_weapon', attach_vec, attach_rot );

		ent.AddTag('ACS_Useable_Item');

		AddTimer('UseableItemTeleportDestroy', timeToDestroy, false);
	}

	public timer function UseableItemTeleportDestroy(deltaTime : float , id : int)
	{
		GetACSUseableItem().BreakAttachment(); 
		GetACSUseableItem().Teleport( GetWitcherPlayer().GetWorldPosition() + Vector( 0, 0, -200 ) );
		GetACSUseableItem().DestroyAfter(0.00125);
	}

	function PotionOrFoodSwitch(slot : EEquipmentSlots)
	{
		var item 		: SItemUniqueId;

		if ( !thePlayer.IsHoldingItemInLHand() && !thePlayer.IsCrossbowHeld() ) 
		{
			GetWitcherPlayer().GetItemEquippedOnSlot( slot, item );

			AttachUseableItem(slot);

			if (
			(GetWitcherPlayer().inv.GetItemCategory(item) == 'potion' && GetWitcherPlayer().inv.ItemHasTag(item, 'Potion'))
			|| (GetWitcherPlayer().inv.ItemHasTag(item, 'Edibles') && GetWitcherPlayer().inv.ItemHasTag(item, 'Drinks'))
			|| (GetWitcherPlayer().inv.GetItemCategory(item) == 'alchemy_ingredient' && GetWitcherPlayer().inv.ItemHasTag(item, 'StrongAlcohol'))
			)
			{
				thePlayer.SetBehaviorVariable( 'SelectedItemL', (int)UI_Horn, true );	
			}
			else if (
			(GetWitcherPlayer().inv.ItemHasTag(item, 'Edibles') && !GetWitcherPlayer().inv.ItemHasTag(item, 'Drinks'))
			)
			{
				thePlayer.SetBehaviorVariable( 'SelectedItemL', (int)UI_Mask, true );	

				AddTimer('EdiblesDelayAnim', 2, false);
			}
			
			thePlayer.RaiseEvent( 'ItemUseL' );

			GetWitcherPlayer().SelectQuickslotItem( EES_RangedWeapon );	

			thePlayer.BlockAction( EIAB_UsableItem,				'ACS_Item_Anim_Hack');
			thePlayer.BlockAction( EIAB_Crossbow,				'ACS_Item_Anim_Hack');
			thePlayer.BlockAction( EIAB_CallHorse,				'ACS_Item_Anim_Hack');
			thePlayer.BlockAction( EIAB_InteractionAction, 		'ACS_Item_Anim_Hack');
			thePlayer.BlockAction( EIAB_Interactions, 			'ACS_Item_Anim_Hack');
			thePlayer.BlockAction( EIAB_InteractionContainers,  'ACS_Item_Anim_Hack');
		}

		SetPotionaAnimProgress(true);
	}

	/*
	function PotionOrFoodAnimSwitch(slot : EEquipmentSlots)
	{
		var item 		: SItemUniqueId;

		GetWitcherPlayer().GetItemEquippedOnSlot( slot, item );

		if (
		(GetWitcherPlayer().inv.GetItemCategory(item) == 'potion' && GetWitcherPlayer().inv.ItemHasTag(item, 'Potion'))
		|| (GetWitcherPlayer().inv.ItemHasTag(item, 'Edibles') && GetWitcherPlayer().inv.ItemHasTag(item, 'Drinks'))
		|| (GetWitcherPlayer().inv.GetItemCategory(item) == 'alchemy_ingredient' && GetWitcherPlayer().inv.ItemHasTag(item, 'StrongAlcohol'))
		)
		{
			((CActor)thePlayer).PlayMimicAnimationAsync('geralt_neutral_gesture_chewing_face');
		}
		else if (
		(GetWitcherPlayer().inv.ItemHasTag(item, 'Edibles') && !GetWitcherPlayer().inv.ItemHasTag(item, 'Drinks'))
		)
		{
			((CActor)thePlayer).PlayMimicAnimationAsync('geralt_neutral_gesture_eating_apple_face');
		}
	}
	*/

	function PotionOrFoodAnimSwitch(slot : EEquipmentSlots)
	{
		var headcComponent 	: array< CComponent >;
		var item 			: SItemUniqueId;
			
		GetWitcherPlayer().GetItemEquippedOnSlot( slot, item );

		headcComponent.Clear();

		headcComponent = thePlayer.GetComponentsByClassName( 'CHeadManagerComponent' );

		if (
		(GetWitcherPlayer().inv.GetItemCategory(item) == 'potion' && GetWitcherPlayer().inv.ItemHasTag(item, 'Potion'))
		|| (GetWitcherPlayer().inv.ItemHasTag(item, 'Edibles') && GetWitcherPlayer().inv.ItemHasTag(item, 'Drinks'))
		|| (GetWitcherPlayer().inv.GetItemCategory(item) == 'alchemy_ingredient' && GetWitcherPlayer().inv.ItemHasTag(item, 'StrongAlcohol'))
		)
		{
			( ( CHeadManagerComponent ) headcComponent[0] ).MimicTest( 'geralt_neutral_gesture_chewing_face' );
		}
		else if (
		(GetWitcherPlayer().inv.ItemHasTag(item, 'Edibles') && !GetWitcherPlayer().inv.ItemHasTag(item, 'Drinks'))
		)
		{
			( ( CHeadManagerComponent ) headcComponent[0] ).MimicTest( 'geralt_neutral_gesture_eating_apple_face' );
		}
	}

	public timer function EdiblesDelayAnim(deltaTime : float , id : int)
	{
		if ( !thePlayer.IsHoldingItemInLHand() && !thePlayer.IsCrossbowHeld() ) 
		{
			thePlayer.SetBehaviorVariable( 'SelectedItemL', (int)UI_Mask, true );	

			thePlayer.RaiseEvent( 'ItemUseL' );

			thePlayer.BlockAction( EIAB_UsableItem,				'ACS_Item_Anim_Hack');
			thePlayer.BlockAction( EIAB_Crossbow,				'ACS_Item_Anim_Hack');
			thePlayer.BlockAction( EIAB_CallHorse,				'ACS_Item_Anim_Hack');
			thePlayer.BlockAction( EIAB_InteractionAction, 		'ACS_Item_Anim_Hack');
			thePlayer.BlockAction( EIAB_Interactions, 			'ACS_Item_Anim_Hack');
			thePlayer.BlockAction( EIAB_InteractionContainers,  'ACS_Item_Anim_Hack');

			GetWitcherPlayer().SelectQuickslotItem( EES_RangedWeapon );	
		}
	}

	public timer function SetPotionsAnimProgressDelay(deltaTime : float , id : int)
	{
		thePlayer.UnblockAction( EIAB_UsableItem,				'ACS_Item_Anim_Hack');
		thePlayer.UnblockAction( EIAB_Crossbow,					'ACS_Item_Anim_Hack');
		thePlayer.UnblockAction( EIAB_CallHorse,				'ACS_Item_Anim_Hack');
		thePlayer.UnblockAction( EIAB_InteractionAction, 		'ACS_Item_Anim_Hack');
		thePlayer.UnblockAction( EIAB_Interactions, 			'ACS_Item_Anim_Hack');
		thePlayer.UnblockAction( EIAB_InteractionContainers,  	'ACS_Item_Anim_Hack');

		SetPotionaAnimProgress(false);
	}

	function PlayHornAnim()
	{
		if ( !thePlayer.IsHoldingItemInLHand() && !thePlayer.IsCrossbowHeld() ) 
		{
			thePlayer.SetBehaviorVariable( 'SelectedItemL', (int)UI_Horn, true );	

			thePlayer.RaiseEvent( 'ItemUseL' );

			thePlayer.BlockAction( EIAB_UsableItem,				'ACS_Item_Anim_Hack');
			thePlayer.BlockAction( EIAB_Crossbow,				'ACS_Item_Anim_Hack');
			thePlayer.BlockAction( EIAB_CallHorse,				'ACS_Item_Anim_Hack');
			thePlayer.BlockAction( EIAB_InteractionAction, 		'ACS_Item_Anim_Hack');
			thePlayer.BlockAction( EIAB_Interactions, 			'ACS_Item_Anim_Hack');
			thePlayer.BlockAction( EIAB_InteractionContainers,  'ACS_Item_Anim_Hack');

			GetWitcherPlayer().SelectQuickslotItem( EES_RangedWeapon );	
		}
	}

	event OnCommDrinkPotion1( action : SInputAction )
	{
		var radialModule : CR4HudModuleRadialMenu;
		var hud : CR4ScriptedHud;

		if(thePlayer.IsCiri())
			return false;
		
		if( !thePlayer.IsActionAllowed( EIAB_QuickSlots ) )
		{
			thePlayer.DisplayActionDisallowedHudMessage(EIAB_QuickSlots);
			return false;
		}

		if (GetPotionAnimProgress())
		{
			return false;
		}

		if (GetFacemaskProgress())
		{
			return false;
		}

		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}

		hud = (CR4ScriptedHud)theGame.GetHud();

		radialModule = (CR4HudModuleRadialMenu)hud.GetHudModule("RadialMenuModule");

		if( hud )
		{
			if (radialModule && radialModule.IsRadialMenuOpened())
			{
				if (ACS_Transformation_Activated_Check())
				{
					return false;
				}

				if (GetFacemaskProgress() == true)
				{
					return false;
				}

				if ( IsPressed( action ) )
				{	
					if (!facemasktoggle)
					{
						Facegear_Include();
					}
					else
					{
						Facegear_Exclude();
					}	
				}

				return false;
			}
		}
		
		if ( theInput.LastUsedGamepad() )
		{
			return DrinkPotion(action, true);
		}
		else
		if ( IsReleased(action) )
		{
			if (ACS_PotionAndFoodAnimation_Enabled())
			{
				if ( !thePlayer.IsHoldingItemInLHand() && !thePlayer.IsCrossbowHeld() ) 
				{
					PotionOrFoodSwitch(EES_Potion1);
					PotionOrFoodAnimSwitch(EES_Potion1);
					AddTimer('Potion1Delay', 1, false);
				}
				else
				{
					RemoveTimer('Potion1DelayNoAnim');
					AddTimer('Potion1DelayNoAnim', 1, false);
				}
			}
			else
			{
				GetWitcherPlayer().OnPotionDrinkKeyboardsInput(EES_Potion1);
			}

			return true;
		}
		
		return false;
	}

	public timer function Potion1Delay(deltaTime : float , id : int)
	{
		GetWitcherPlayer().OnPotionDrinkKeyboardsInput(EES_Potion1);

		AddTimer('SetPotionsAnimProgressDelay', 3, false);
	}

	public timer function Potion1DelayNoAnim(deltaTime : float , id : int)
	{
		GetWitcherPlayer().OnPotionDrinkKeyboardsInput(EES_Potion1);
	}
	
	event OnCommDrinkPotion2( action : SInputAction )
	{
		var witcher : W3PlayerWitcher;
		var hud : CR4ScriptedHud;
		var radialModule : CR4HudModuleRadialMenu;
		
		
		if(thePlayer.IsCiri())
			return false;
		
		if( !thePlayer.IsActionAllowed( EIAB_QuickSlots ) )
		{
			thePlayer.DisplayActionDisallowedHudMessage(EIAB_QuickSlots);
			return false;
		}

		if (GetPotionAnimProgress())
		{
			return false;
		}

		if (GetFacemaskProgress())
		{
			return false;
		}

		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}

		hud = (CR4ScriptedHud)theGame.GetHud();

		radialModule = (CR4HudModuleRadialMenu)hud.GetHudModule("RadialMenuModule");

		if( hud )
		{
			if (radialModule && radialModule.IsRadialMenuOpened())
			{
				if (ACS_Armor_Equipped_Check())
				{
					if (GetHoodToggle())
					{
						return false;
					}

					if (!GetHelmToggle() && !ACS_Transformation_Activated_Check() && !GetHoodToggle())
					{
						thePlayer.PlayEffectSingle('demonic_possession');
						thePlayer.StopEffect('demonic_possession');

						RemoveTimer('ACS_AdditionalHelmetsSpawnDelay');
						RemoveTimer('ACS_AdditionalHelmetsDespawnDelay');

						AddTimer('ACS_AdditionalHelmetsSpawnDelay', 0.75, false);
					}
					else
					{
						thePlayer.PlayEffectSingle('demonic_possession');
						thePlayer.StopEffect('demonic_possession');

						RemoveTimer('ACS_AdditionalHelmetsSpawnDelay');
						RemoveTimer('ACS_AdditionalHelmetsDespawnDelay');

						AddTimer('ACS_AdditionalHelmetsDespawnDelay', 0.75, false);
					}
				}
				else
				{
					if (GetHelmToggle())
					{
						return false;
					}

					if (!helmtoggle && !ACS_Transformation_Activated_Check() && !GetHoodToggle())
					{
						thePlayer.PlayEffectSingle('demonic_possession');
						thePlayer.StopEffect('demonic_possession');

						RemoveTimer('Hood_Include_Delay');
						RemoveTimer('Hood_Exclude_Delay');

						AddTimer('Hood_Include_Delay', 0.75, false);

					}
					else
					{
						thePlayer.PlayEffectSingle('demonic_possession');
						thePlayer.StopEffect('demonic_possession');

						RemoveTimer('Hood_Include_Delay');
						RemoveTimer('Hood_Exclude_Delay');

						AddTimer('Hood_Exclude_Delay', 0.75, false);
					}
				}
				
				return false;
			}
		}
		
		if ( theInput.LastUsedGamepad() )
		{
			return DrinkPotion(action, false);
		}
		else
		if ( IsReleased(action) )
		{
			if (ACS_PotionAndFoodAnimation_Enabled())
			{
				if ( !thePlayer.IsHoldingItemInLHand() && !thePlayer.IsCrossbowHeld() ) 
				{
					PotionOrFoodSwitch(EES_Potion2);
					PotionOrFoodAnimSwitch(EES_Potion2);
					AddTimer('Potion2Delay', 1, false);
				}
				else
				{
					RemoveTimer('Potion2DelayNoAnim');
					AddTimer('Potion2DelayNoAnim', 1, false);
				}
			}
			else
			{
				GetWitcherPlayer().OnPotionDrinkKeyboardsInput(EES_Potion2);
			}

			return true;
		}
		
		return false;
	}
	
	public timer function Potion2Delay(deltaTime : float , id : int)
	{
		GetWitcherPlayer().OnPotionDrinkKeyboardsInput(EES_Potion2);

		AddTimer('SetPotionsAnimProgressDelay', 3, false);
	}

	public timer function Potion2DelayNoAnim(deltaTime : float , id : int)
	{
		GetWitcherPlayer().OnPotionDrinkKeyboardsInput(EES_Potion2);
	}
	
	event OnCommDrinkPotion3( action : SInputAction )
	{
		var radialModule : CR4HudModuleRadialMenu;
		var hud : CR4ScriptedHud;
		
		if(thePlayer.IsCiri())
			return false;
		
		if( !thePlayer.IsActionAllowed( EIAB_QuickSlots ) )
		{
			thePlayer.DisplayActionDisallowedHudMessage(EIAB_QuickSlots);
			return false;
		}

		if (GetPotionAnimProgress())
		{
			return false;
		}

		if (GetFacemaskProgress())
		{
			return false;
		}

		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}

		hud = (CR4ScriptedHud)theGame.GetHud();

		radialModule = (CR4HudModuleRadialMenu)hud.GetHudModule("RadialMenuModule");

		if( hud )
		{
			if (radialModule && radialModule.IsRadialMenuOpened())
			{
				if (ACS_Armor_Equipped_Check() && !ACS_Transformation_Activated_Check())
				{
					thePlayer.PlayEffectSingle('special_attack_only_black_fx');
					thePlayer.StopEffect('special_attack_only_black_fx');

					thePlayer.PlayEffectSingle('ethereal_appear');
					thePlayer.StopEffect('ethereal_appear');

					thePlayer.PlayEffectSingle('embers_particles_test');
					thePlayer.StopEffect('embers_particles_test');

					RemoveTimer('ACS_ShoulderToggleDelay');
					AddTimer('ACS_ShoulderToggleDelay', 0.5, false);
				}
				else
				{
					CloakToggle();
				}

				return false;
			}
		}
		
		if ( IsReleased(action) )
		{
			if (ACS_PotionAndFoodAnimation_Enabled())
			{
				if ( !thePlayer.IsHoldingItemInLHand() && !thePlayer.IsCrossbowHeld() ) 
				{
					PotionOrFoodSwitch(EES_Potion3);
					PotionOrFoodAnimSwitch(EES_Potion3);
					AddTimer('Potion3Delay', 1, false);
				}
				else
				{
					RemoveTimer('Potion3DelayNoAnim');
					AddTimer('Potion3DelayNoAnim', 1, false);
				}
			}
			else
			{
				GetWitcherPlayer().OnPotionDrinkKeyboardsInput(EES_Potion3);
			}

			return true;
		}
		
		return false;
	}

	public timer function Potion3Delay(deltaTime : float , id : int)
	{
		GetWitcherPlayer().OnPotionDrinkKeyboardsInput(EES_Potion3);

		AddTimer('SetPotionsAnimProgressDelay', 3, false);
	}

	public timer function Potion3DelayNoAnim(deltaTime : float , id : int)
	{
		GetWitcherPlayer().OnPotionDrinkKeyboardsInput(EES_Potion3);
	}
	
	
	event OnCommDrinkPotion4( action : SInputAction )
	{
		var witcher : W3PlayerWitcher;
		var radialModule : CR4HudModuleRadialMenu;
		var hud : CR4ScriptedHud;
		
		
		if(thePlayer.IsCiri())
			return false;
		
		if( !thePlayer.IsActionAllowed( EIAB_QuickSlots ) )
		{
			thePlayer.DisplayActionDisallowedHudMessage(EIAB_QuickSlots);
			return false;
		}

		if (GetPotionAnimProgress())
		{
			return false;
		}

		if (GetFacemaskProgress())
		{
			return false;
		}

		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}

		hud = (CR4ScriptedHud)theGame.GetHud();

		radialModule = (CR4HudModuleRadialMenu)hud.GetHudModule("RadialMenuModule");

		if( hud )
		{
			if (radialModule && radialModule.IsRadialMenuOpened())
			{
				if (GetHelmToggle())
				{
					return false;
				}

				if (!helmtoggle && !GetHoodToggle())
				{
					thePlayer.PlayEffectSingle('demonic_possession');
					thePlayer.StopEffect('demonic_possession');

					RemoveTimer('Hood_Include_Delay');
					RemoveTimer('Hood_Exclude_Delay');

					AddTimer('Hood_Include_Delay', 0.75, false);

				}
				else
				{
					thePlayer.PlayEffectSingle('demonic_possession');
					thePlayer.StopEffect('demonic_possession');

					RemoveTimer('Hood_Include_Delay');
					RemoveTimer('Hood_Exclude_Delay');

					AddTimer('Hood_Exclude_Delay', 0.75, false);
				}

				return false;
			}
		}
		
		if ( IsReleased(action) )
		{
			if (ACS_PotionAndFoodAnimation_Enabled())
			{
				if ( !thePlayer.IsHoldingItemInLHand() && !thePlayer.IsCrossbowHeld() ) 
				{
					PotionOrFoodSwitch(EES_Potion4);
					PotionOrFoodAnimSwitch(EES_Potion4);
					AddTimer('Potion4Delay', 1, false);
				}
				else
				{
					RemoveTimer('Potion4DelayNoAnim');
					AddTimer('Potion4DelayNoAnim', 1, false);
				}
			}
			else
			{
				GetWitcherPlayer().OnPotionDrinkKeyboardsInput(EES_Potion4);
			}

			return true;
		}
		
		return false;
	}

	public timer function Potion4Delay(deltaTime : float , id : int)
	{
		GetWitcherPlayer().OnPotionDrinkKeyboardsInput(EES_Potion4);

		AddTimer('SetPotionsAnimProgressDelay', 3, false);
	}

	public timer function Potion4DelayNoAnim(deltaTime : float , id : int)
	{
		GetWitcherPlayer().OnPotionDrinkKeyboardsInput(EES_Potion4);
	}


	event OnCommDrinkPotion1Alt( action : SInputAction )
	{
		if ( ACS_QuestTrackingCheck() && IsReleased( action ) )
		{
			ACS_QuestTrackingSwap_Tutorial();
			ACS_TrackQuestSwitch( -1 );

			RemoveTimer('ACSTrackedQuestsEntsDestroyDelay');

			if (ACS_Untracked_Quest_Marker_Despawn_Delay() != 0)
			{
				GuidingEntities();
			}

			return false;
		}
	}

	event OnCommDrinkPotion2Alt( action : SInputAction )
	{
		var witcher : W3PlayerWitcher;
		
		if ( ACS_QuestTrackingCheck() && IsReleased( action ) )
		{
			ACS_QuestTrackingSwap_Tutorial();
			ACS_TrackQuestSwitch( 1 );

			RemoveTimer('ACSTrackedQuestsEntsDestroyDelay');

			if (ACS_Untracked_Quest_Marker_Despawn_Delay() != 0)
			{
				GuidingEntities();
			}

			return false;
		}
	}

	event OnCommPanelMeditation( action : SInputAction )
	{
		if(theGame.GetFocusModeController().CanUseFocusMode()
		&& !thePlayer.IsInCombat()
		&& !thePlayer.IsThreatened()
		&& GetWitcherPlayer().CanMeditate()
		&& GetWitcherPlayer().CanMeditateHere()
		&& !ACS_Transformation_Activated_Check()
		)
		{
			if( IsPressed(action) )
			{
				ACS_QuickMeditation_Tutorial();

				if( MeditateCallTime + DOUBLE_TAP_WINDOW >= theGame.GetEngineTimeAsSeconds() )
				{
					MeditateDoubleTap = true;
				}
				else
				{
					MeditateDoubleTap = false;	
				}

				if (MeditateDoubleTap)
				{
					SpawnCampFire();

					RemoveTimer('LightCampFire');
					AddTimer('LightCampFire', 2, false);

					MeditateStartDoubleTap();
				}
				else
				{
					MeditateStart();
				}

				MeditateCallTime = theGame.GetEngineTimeAsSeconds();
			}
			
			if ( IsReleased( action ) )
			{
				
			}
		}
		else
		{
			return false;
		}
	}

	private var storedHoursPerMinute 					: float;	

	private var meditationCamera 						: ACSMeditationCamera;

	public function SetMeditationCamera( a : ACSMeditationCamera )
	{
		this.meditationCamera = a;
	}

	public function GetMeditationCamera() : ACSMeditationCamera
	{
		return this.meditationCamera;
	}

	function ACS_Meditation_Create_Savelock()
	{
		theGame.CreateNoSaveLock( "ACS_Meditation_Active", ACS_Meditation_Savelock_ID, false, false );
	}

	public timer function ACS_Meditation_Start_Delay(deltaTime : float , id : int)
	{
		var fastForward 		: CGameFastForwardSystem;
		var comp 				: CComponent;

		if (RandF() < 0.5)
		{
			PlayerPlayAnimation('meditation_idle01');
		}
		else
		{
			PlayerPlayAnimation('meditation_idle_2');
		}

		RemoveTimer('ACS_Meditate_Loop');
		AddTimer('ACS_Meditate_Loop', 0.001, true);

		fastForward = theGame.GetFastForwardSystem();
		fastForward.BeginFastForward(true, false);

		if (!ACSMeditationCampfire())
		{
			theGame.SetHoursPerMinute( storedHoursPerMinute * 180 );
		}
		else
		{
			theGame.SetHoursPerMinute( storedHoursPerMinute * 120 );
		}

		if (thePlayer.IsThreatened()
		|| thePlayer.IsInCombat()
		|| theGame.IsDialogOrCutscenePlaying() 
		|| thePlayer.IsInNonGameplayCutscene() 
		|| thePlayer.IsInGameplayScene() 
		|| theGame.IsCurrentlyPlayingNonGameplayScene()
		|| theGame.IsFading()
		|| theGame.IsBlackscreen()
		)
		{
			if (thePlayer.IsThreatened()
			|| thePlayer.IsInCombat())
			{
				PlayerPlayAnimationInterrupt('');
			}
			else
			{
				if (!ACSMeditationCampfire())
				{
					PlayerPlayAnimation('meditation_stop_long');
				}
				else
				{
					PlayerPlayAnimation('meditation_stop_long_2');
				}
			}

			GetMeditationCamera().Stop();

			GetMeditationCamera().DestroyAfter(1.1);

			if (FactsQuerySum("ACS_Meditation_Camera_Override") > 0)
			{
				FactsRemove("ACS_Meditation_Camera_Override");
			}

			thePlayer.UnblockAction( EIAB_Crossbow, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_CallHorse,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Signs, 				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_DrawWeapon, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_FastTravel, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Fists, 				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_InteractionAction, 	'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_UsableItem,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_ThrowBomb,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_SwordAttack,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_LightAttacks,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_HeavyAttacks,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_SpecialAttackLight,	'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_SpecialAttackHeavy,	'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Dodge,				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Roll,					'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Parry,				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_MeditationWaiting,	'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenMeditation,		'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_RadialMenu,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Movement,				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Interactions, 		'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Jump, 				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_QuickSlots, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenFastMenu, 		'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenInventory,		'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenPreparation, 		'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenMap, 				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenCharacterPanel, 	'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenJournal, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenAlchemy, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenGlossary,			'ACS_Meditation');

			fastForward = theGame.GetFastForwardSystem();
			fastForward.AllowFastForwardSelfCompletion();

			theGame.SetHoursPerMinute( storedHoursPerMinute );

			theGame.ReleaseNoSaveLock( ACS_Meditation_Savelock_ID );

			ACSMeditationCampfire().DestroyAfter(1.5);

			FactsRemove("ACS_In_Meditation");

			RemoveTimer('ACS_Meditate_Loop');
			RemoveTimer('ACS_Meditation_Start_Delay');
		}
	}

	function ACS_RemovePotionEffects()
	{
		var i : int;
		var buffs : array< CBaseGameplayEffect >;
		
		thePlayer.RemoveAllPotionEffects();
		
		thePlayer.DrainToxicity(thePlayer.GetStatMax( BCS_Toxicity ));
		
		buffs = thePlayer.GetBuffs( EET_WellFed );
		for( i=buffs.Size()-1; i>=0; i-=1 )
		{
			thePlayer.RemoveEffect( buffs[i] );
		}
		
		
		buffs.Clear();
		buffs = thePlayer.GetBuffs( EET_WellHydrated );
		for( i=buffs.Size()-1; i>=0; i-=1 )
		{
			thePlayer.RemoveEffect( buffs[i] );
		}
	}

	public timer function ACS_Meditate_Loop(deltaTime : float , id : int)
	{
		var fastForward 			: CGameFastForwardSystem;
		var comp 					: CComponent;

		if (RandF() < 0.5)
		{
			PlayerPlayAnimation('meditation_idle01');
		}
		else
		{
			PlayerPlayAnimation('meditation_idle_2');
		}

		if (ACSMeditationCampfire())
		{
			thePlayer.inv.SingletonItemsRefillAmmoNoAlco(false);

			if (!thePlayer.inv.HasItem('ACS_Knife'))
			{
				thePlayer.inv.AddAnItem('ACS_Knife', 3);
			}

			if(thePlayer.GetCurrentHealth() < thePlayer.GetMaxHealth())
			{
				thePlayer.GainStat( BCS_Vitality, thePlayer.GetMaxHealth() * 0.0005 );
			}
		}
		
		ACS_RemovePotionEffects();

		if (thePlayer.IsThreatened()
		|| thePlayer.IsInCombat()
		|| theGame.IsDialogOrCutscenePlaying() 
		|| thePlayer.IsInNonGameplayCutscene() 
		|| thePlayer.IsInGameplayScene() 
		|| theGame.IsCurrentlyPlayingNonGameplayScene()
		|| theGame.IsFading()
		|| theGame.IsBlackscreen()
		)
		{
			if (thePlayer.IsThreatened()
			|| thePlayer.IsInCombat())
			{
				PlayerPlayAnimationInterrupt('');
			}
			else
			{
				if (!ACSMeditationCampfire())
				{
					PlayerPlayAnimation('meditation_stop_long');
				}
				else
				{
					PlayerPlayAnimation('meditation_stop_long_2');
				}
			}

			GetMeditationCamera().Stop();

			GetMeditationCamera().DestroyAfter(1.1);

			if (FactsQuerySum("ACS_Meditation_Camera_Override") > 0)
			{
				FactsRemove("ACS_Meditation_Camera_Override");
			}

			thePlayer.UnblockAction( EIAB_Crossbow, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_CallHorse,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Signs, 				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_DrawWeapon, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_FastTravel, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Fists, 				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_InteractionAction, 	'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_UsableItem,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_ThrowBomb,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_SwordAttack,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_LightAttacks,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_HeavyAttacks,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_SpecialAttackLight,	'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_SpecialAttackHeavy,	'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Dodge,				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Roll,					'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Parry,				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_MeditationWaiting,	'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenMeditation,		'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_RadialMenu,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Movement,				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Interactions, 		'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Jump, 				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_QuickSlots, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenFastMenu, 		'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenInventory,		'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenPreparation, 		'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenMap, 				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenCharacterPanel, 	'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenJournal, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenAlchemy, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenGlossary,			'ACS_Meditation');

			fastForward = theGame.GetFastForwardSystem();
			fastForward.AllowFastForwardSelfCompletion();

			theGame.SetHoursPerMinute( storedHoursPerMinute );

			theGame.ReleaseNoSaveLock( ACS_Meditation_Savelock_ID );

			FactsRemove("ACS_In_Meditation");

			ACSMeditationCampfire().DestroyAfter(1.5);

			RemoveTimer('ACS_Meditate_Loop');
		}
	}

	function SpawnCampFire()
	{
		var template : CEntityTemplate;
		var pos : Vector;
		var z : float;
		var rot : EulerAngles;
		var campfire : W3Campfire;
		var comp : CComponent;
		
		template = (CEntityTemplate)LoadResource( "environment\decorations\light_sources\campfire\campfire_01.w2ent", true);

		pos = thePlayer.GetWorldPosition() + VecFromHeading( thePlayer.GetHeading() ) * Vector(0.8, 0.8, 0);

		if( theGame.GetWorld().NavigationComputeZ( pos, pos.Z - 128, pos.Z + 128, z ) )
		{
			pos.Z = z;
		}
		if( theGame.GetWorld().PhysicsCorrectZ( pos, z ) )
		{
			pos.Z = z;
		}

		rot = thePlayer.GetWorldRotation();

		ACSMeditationCampfire().Destroy();

		campfire = (W3Campfire)theGame.CreateEntity(template, pos, rot);

		comp = campfire.GetComponentByClassName('CGameplayLightComponent');

		((CGameplayLightComponent)comp).SetInteractive(false);

		campfire.AddTag('ACS_Meditation_Campfire');
	}

	public timer function LightCampFire(deltaTime : float , id : int)
	{
		var comp : CComponent;

		thePlayer.UnblockAction( EIAB_OpenFastMenu, 					'ACS_Meditation');
		thePlayer.UnblockAction( EIAB_OpenInventory,					'ACS_Meditation');
		thePlayer.UnblockAction( EIAB_OpenPreparation, 					'ACS_Meditation');
		thePlayer.UnblockAction( EIAB_OpenMap, 							'ACS_Meditation');
		thePlayer.UnblockAction( EIAB_OpenCharacterPanel, 				'ACS_Meditation');
		thePlayer.UnblockAction( EIAB_OpenJournal, 						'ACS_Meditation');
		thePlayer.UnblockAction( EIAB_OpenAlchemy, 						'ACS_Meditation');
		thePlayer.UnblockAction( EIAB_OpenGlossary,						'ACS_Meditation');

		thePlayer.DestroyEffect('fire_interaction');
		thePlayer.PlayEffectSingle('fire_interaction');
		thePlayer.StopEffect('fire_interaction');

		thePlayer.DestroyEffect('no_cast_igni_right');
		thePlayer.PlayEffectSingle('no_cast_igni_right');
		thePlayer.StopEffect('no_cast_igni_right');

		thePlayer.DestroyEffect('no_cast_igni');
		thePlayer.PlayEffectSingle('no_cast_igni');
		thePlayer.StopEffect('no_cast_igni');

		thePlayer.DestroyEffect('power_place_igni');
		thePlayer.PlayEffectSingle('power_place_igni');
		thePlayer.StopEffect('power_place_igni');

		comp = ACSMeditationCampfire().GetComponentByClassName('CGameplayLightComponent');

		((CGameplayLightComponent)comp).SetFadeLight(true);
	}

	function CamerasDestroy()
	{
		RemoveTimer('MeditationCustomCameraDelaySpawn');

		ACS_Focus_Mode_Camera_Destroy();

		ACS_Meditation_Camera_Destroy();

		ACS_Transformation_Camera_Destroy();

		ACS_Kestral_Camera_Destroy();
	}

	function MeditationCustomCamera()
	{
		RemoveTimer('MeditationCustomCameraDelaySpawn');

		ACS_Transformation_Camera_Destroy();
		ACS_Meditation_Camera_Destroy();
		GetPlayerCamera().Destroy();

		GetFocusModeCamera().Stop();
		GetFocusModeCamera().DestroyAfter(1.1);

		if (FactsQuerySum("ACS_Meditation_Camera_Override") <= 0)
		{
			FactsAdd("ACS_Meditation_Camera_Override", 1, -1);
		}
		
		AddTimer('MeditationCustomCameraDelaySpawn', 1.1, false);
	}

	timer function MeditationCustomCameraDelaySpawn( deltaTime : float , id : int)	
	{
		var template	: CEntityTemplate;
		var ent			: CEntity;

		template = (CEntityTemplate)LoadResource("dlc\dlc_acs\data\entities\other\meditation_camera.w2ent", true);

		ent = (CStaticCamera)theGame.CreateEntity(template, theCamera.GetCameraPosition(), theCamera.GetCameraRotation());	

		ent.AddTag('ACS_Meditation_Custom_Camera');
	}

	function MeditateStart()
	{
		if (FactsQuerySum("ACS_In_Meditation") <= 0)
		{
			MeditationCustomCamera();

			thePlayer.OnMeleeForceHolster( true );
			thePlayer.OnRangedForceHolster( true );

			storedHoursPerMinute = theGame.GetHoursPerMinute();

			ACS_Meditation_Create_Savelock();

			if (!ACSMeditationCampfire())
			{
				PlayerPlayAnimation('meditation_start_long');

				RemoveTimer('ACS_Meditation_Start_Delay');
				RemoveTimer('ACS_Meditate_Loop');
				AddTimer('ACS_Meditation_Start_Delay', 2.5, false);
			}
			else
			{
				PlayerPlayAnimation('meditation_start_long_2');

				RemoveTimer('ACS_Meditation_Start_Delay');
				RemoveTimer('ACS_Meditate_Loop');
				AddTimer('ACS_Meditation_Start_Delay', 3.5, false);
			}

			thePlayer.BlockAction( EIAB_Crossbow, 			'ACS_Meditation');
			thePlayer.BlockAction( EIAB_CallHorse,			'ACS_Meditation');
			thePlayer.BlockAction( EIAB_Signs, 				'ACS_Meditation');
			thePlayer.BlockAction( EIAB_DrawWeapon, 		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_FastTravel, 		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_Fists, 				'ACS_Meditation');
			thePlayer.BlockAction( EIAB_InteractionAction, 	'ACS_Meditation');
			thePlayer.BlockAction( EIAB_UsableItem,			'ACS_Meditation');
			thePlayer.BlockAction( EIAB_ThrowBomb,			'ACS_Meditation');
			thePlayer.BlockAction( EIAB_SwordAttack,		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_LightAttacks,		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_HeavyAttacks,		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_SpecialAttackLight,	'ACS_Meditation');
			thePlayer.BlockAction( EIAB_SpecialAttackHeavy,	'ACS_Meditation');
			thePlayer.BlockAction( EIAB_Dodge,				'ACS_Meditation');
			thePlayer.BlockAction( EIAB_Roll,				'ACS_Meditation');
			thePlayer.BlockAction( EIAB_Parry,				'ACS_Meditation');
			thePlayer.BlockAction( EIAB_MeditationWaiting,	'ACS_Meditation');
			thePlayer.BlockAction( EIAB_OpenMeditation,		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_RadialMenu,			'ACS_Meditation');
			thePlayer.BlockAction( EIAB_Movement,			'ACS_Meditation');
			thePlayer.BlockAction( EIAB_Interactions, 		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_Jump, 				'ACS_Meditation');
			thePlayer.BlockAction( EIAB_QuickSlots, 		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_OpenFastMenu, 		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_OpenInventory,		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_OpenPreparation, 	'ACS_Meditation');
			thePlayer.BlockAction( EIAB_OpenMap, 			'ACS_Meditation');
			thePlayer.BlockAction( EIAB_OpenCharacterPanel, 'ACS_Meditation');
			thePlayer.BlockAction( EIAB_OpenJournal, 		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_OpenAlchemy, 		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_OpenGlossary,		'ACS_Meditation');
			

			FactsAdd("ACS_In_Meditation", 1, -1);
		}
		else if (FactsQuerySum("ACS_In_Meditation") > 0)
		{
			GetMeditationCamera().Stop();

			GetMeditationCamera().DestroyAfter(1.1);

			if (FactsQuerySum("ACS_Meditation_Camera_Override") > 0)
			{
				FactsRemove("ACS_Meditation_Camera_Override");
			}

			RemoveTimer('ACS_Meditation_Start_Delay');
			RemoveTimer('ACS_Meditate_Loop');

			if (!ACSMeditationCampfire())
			{
				PlayerPlayAnimation('meditation_stop_long');
			}
			else
			{
				PlayerPlayAnimation('meditation_stop_long_2');
			}

			theGame.ReleaseNoSaveLock( ACS_Meditation_Savelock_ID );

			thePlayer.UnblockAction( EIAB_Crossbow, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_CallHorse,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Signs, 				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_DrawWeapon, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_FastTravel, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Fists, 				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_InteractionAction, 	'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_UsableItem,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_ThrowBomb,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_SwordAttack,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_LightAttacks,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_HeavyAttacks,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_SpecialAttackLight,	'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_SpecialAttackHeavy,	'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Dodge,				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Roll,					'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Parry,				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_MeditationWaiting,	'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenMeditation,		'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_RadialMenu,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Movement,				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Interactions, 		'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Jump, 				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_QuickSlots, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenFastMenu, 		'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenInventory,		'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenPreparation, 		'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenMap, 				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenCharacterPanel, 	'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenJournal, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenAlchemy, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenGlossary,			'ACS_Meditation');

			theGame.SetHoursPerMinute( storedHoursPerMinute );

			ACSMeditationCampfire().DestroyAfter(1.5);

			FactsRemove("ACS_In_Meditation");
		}
	}

	function MeditateStartDoubleTap()
	{
		if (FactsQuerySum("ACS_In_Meditation") <= 0)
		{
			thePlayer.OnMeleeForceHolster( true );
			thePlayer.OnRangedForceHolster( true );

			storedHoursPerMinute = theGame.GetHoursPerMinute();

			ACS_Meditation_Create_Savelock();

			if (!ACSMeditationCampfire())
			{
				PlayerPlayAnimation('meditation_start_long');

				RemoveTimer('ACS_Meditation_Start_Delay');
				RemoveTimer('ACS_Meditate_Loop');
				AddTimer('ACS_Meditation_Start_Delay', 2.5, false);
			}
			else
			{
				PlayerPlayAnimation('meditation_start_long_2');

				RemoveTimer('ACS_Meditation_Start_Delay');
				RemoveTimer('ACS_Meditate_Loop');
				AddTimer('ACS_Meditation_Start_Delay', 3.5, false);
			}

			thePlayer.BlockAction( EIAB_Crossbow, 			'ACS_Meditation');
			thePlayer.BlockAction( EIAB_CallHorse,			'ACS_Meditation');
			thePlayer.BlockAction( EIAB_Signs, 				'ACS_Meditation');
			thePlayer.BlockAction( EIAB_DrawWeapon, 		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_FastTravel, 		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_Fists, 				'ACS_Meditation');
			thePlayer.BlockAction( EIAB_InteractionAction, 	'ACS_Meditation');
			thePlayer.BlockAction( EIAB_UsableItem,			'ACS_Meditation');
			thePlayer.BlockAction( EIAB_ThrowBomb,			'ACS_Meditation');
			thePlayer.BlockAction( EIAB_SwordAttack,		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_LightAttacks,		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_HeavyAttacks,		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_SpecialAttackLight,	'ACS_Meditation');
			thePlayer.BlockAction( EIAB_SpecialAttackHeavy,	'ACS_Meditation');
			thePlayer.BlockAction( EIAB_Dodge,				'ACS_Meditation');
			thePlayer.BlockAction( EIAB_Roll,				'ACS_Meditation');
			thePlayer.BlockAction( EIAB_Parry,				'ACS_Meditation');
			thePlayer.BlockAction( EIAB_MeditationWaiting,	'ACS_Meditation');
			thePlayer.BlockAction( EIAB_OpenMeditation,		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_RadialMenu,			'ACS_Meditation');
			thePlayer.BlockAction( EIAB_Movement,			'ACS_Meditation');
			thePlayer.BlockAction( EIAB_Interactions, 		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_Jump, 				'ACS_Meditation');
			thePlayer.BlockAction( EIAB_QuickSlots, 		'ACS_Meditation');

			FactsAdd("ACS_In_Meditation", 1, -1);
		}
	}

	event OnCommDrinkPotion3Alt( action : SInputAction )
	{
		if( IsPressed(action) )
		{
			ACS_QuickMeditation_Tutorial();

			if( MeditateCallTime + DOUBLE_TAP_WINDOW >= theGame.GetEngineTimeAsSeconds() )
			{
				MeditateDoubleTap = true;
			}
			else
			{
				MeditateDoubleTap = false;	
			}

			if (MeditateDoubleTap)
			{
				SpawnCampFire();

				RemoveTimer('LightCampFire');
				AddTimer('LightCampFire', 2, false);

				MeditateStartDoubleTap();
			}
			else
			{
				MeditateStart();
			}

			MeditateCallTime = theGame.GetEngineTimeAsSeconds();
		}
		
		if ( IsReleased( action ) )
		{
			
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	event OnMovementDoubleTapW( action : SInputAction )
	{
		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}

		if( !thePlayer.IsActionAllowed(EIAB_Dodge)) 
		{
			return false;
		}

		if ( IsPressed( action ) )
		{			
			if ( !thePlayer.IsDodgeTimerRunning() || action.aName != lastACSMovementDoubleTapName )
			{
				thePlayer.StartDodgeTimer();
				lastACSMovementDoubleTapName = action.aName;
			}
			else
			{
				thePlayer.StopDodgeTimer();

				if (ACS_BruxaLeapAttack_Enabled())
				{
					GetACSWatcher().JumpAttackCombat();
				}
				else
				{
					GetACSWatcher().ACS_BruxaDodgeSlideBackInit();
				}
			}
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function SetHoodToggle( flag : bool )
	{
		hoodtoggle = flag;
	}

	function GetHoodToggle() : bool 
	{
		return hoodtoggle;
	}

	function Hood_Include()
	{
		if ( !GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_Armor) )
		{
			return;
		}

		Hood_Include_Actual();
	}

	var vACS_Hood : cACS_Hood;

	function Hood_Include_Actual()
	{
		vACS_Hood = new cACS_Hood in this;

		thePlayer.PlayEffectSingle('demonic_possession');
		thePlayer.StopEffect('demonic_possession');

		vACS_Hood.ACS_Hood_Enable_Engage();

		SetHoodToggle(true);

		ACS_Hood_And_Mask_Tutorial();

		if ( FactsQuerySum("ACS_Hood_Enabled") <= 0 )
		{
			FactsAdd("ACS_Hood_Enabled", 1, -1);
		}
	}

	function Hood_Exclude()
	{
		if ( !GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_Armor) )
		{
			return;
		}

		Hood_Exclude_Actual();
	}

	function Hood_Exclude_Actual()
	{
		vACS_Hood = new cACS_Hood in this;

		thePlayer.PlayEffectSingle('demonic_possession');
		thePlayer.StopEffect('demonic_possession');

		vACS_Hood.ACS_Hood_Disable_Engage();

		SetHoodToggle(false);

		ACS_Hood_And_Mask_Tutorial();

		if (FactsQuerySum("ACS_Hood_Enabled") > 0)
		{
			FactsRemove("ACS_Hood_Enabled");
		}
	}

	public timer function Hood_Include_Delay(deltaTime : float , id : int)
	{
		Hood_Include();
	}

	public timer function Hood_Exclude_Delay(deltaTime : float , id : int)
	{
		Hood_Exclude();
	}

	var vACS_Additional_Helmets : cACS_Additional_Helmets;

	function Additional_Helmets()
	{
		vACS_Additional_Helmets = new cACS_Additional_Helmets in this;

		thePlayer.PlayEffectSingle('demonic_possession');
		thePlayer.StopEffect('demonic_possession');

		vACS_Additional_Helmets.Engage();
	}

	function Additional_Helmets_Destroy()
	{	
		var helm_destroy_1, helm_destroy_2, helm_destroy_3, helm_destroy_4, anchor_destroy	: CEntity;	

		thePlayer.PlayEffectSingle('demonic_possession');
		thePlayer.StopEffect('demonic_possession');

		GetACSHelm1().Destroy();

		GetACSHelm2().Destroy();

		GetACSHelm3().Destroy();

		GetACSHelm4().Destroy();
					
		GetACSHelmAnchor().Destroy();

		Additional_Helmet_Appearance_Destroy();
	}

	var vACS_Additional_Helmet_Appearance_Destroy : cACS_Additional_Helmet_Appearance_Destroy;

	function Additional_Helmet_Appearance_Destroy()
	{
		vACS_Additional_Helmet_Appearance_Destroy = new cACS_Additional_Helmet_Appearance_Destroy in this;

		vACS_Additional_Helmet_Appearance_Destroy.Engage();
	}

	public timer function ACS_AdditionalHelmetsSpawnDelay(deltaTime : float , id : int)
	{
		Additional_Helmets();

		RemoveTimer('ACS_Embers_Timer');
		AddTimer('ACS_Embers_Timer', 0.004, true);

		RemoveTimer('ACSArmorBreathingTimer');
		AddTimer('ACSArmorBreathingTimer', 1, true);

		if (!thePlayer.IsEffectActive('demon_cs', false))
		{
			thePlayer.PlayEffectSingle('demon_cs');
		}

		if (!thePlayer.IsEffectActive('him_smoke_red', false))
		{
			thePlayer.PlayEffectSingle('him_smoke_red');
		}

		if(thePlayer.IsAnyWeaponHeld())
		{
			if (!thePlayer.IsEffectActive('acs_armor_effect_1', false))
			{
				thePlayer.PlayEffectSingle('acs_armor_effect_1');
			}
		}

		//AddTimer('ACS_Embers_Particles_Timer', 2, true);

		helmtoggle = true;
	}

	public timer function ACS_AdditionalHelmetsDespawnDelay(deltaTime : float , id : int)
	{
		Additional_Helmets_Destroy();

		RemoveTimer('ACS_Embers_Timer');

		RemoveTimer('ACSArmorBreathingTimer');

		//RemoveTimer('ACS_Embers_Particles_Timer');

		if (thePlayer.IsEffectActive('acs_armor_effect_1', false))
		{
			thePlayer.StopEffect('acs_armor_effect_1');
		}
		
		if (thePlayer.IsEffectActive('acs_armor_effect_2', false))
		{
			thePlayer.StopEffect('acs_armor_effect_2');
		}

		if (thePlayer.IsEffectActive('demon_cs', false))
		{
			thePlayer.StopEffect('demon_cs');
		}

		if (thePlayer.IsEffectActive('him_smoke_red', false))
		{
			thePlayer.StopEffect('him_smoke_red');
		}

		helmtoggle = false;
	}

	function SetHelmToggle( flag : bool )
	{
		helmtoggle = flag;
	}

	function GetHelmToggle() : bool 
	{
		return helmtoggle;
	}

	private var helmPressTimestamp : float;
	private const var DOUBLE_TAP_WINDOW_HELM	: float;
	default DOUBLE_TAP_WINDOW_HELM = 0.4;

	event OnACSHelmToggle( action : SInputAction )
	{
		var hoodSecondTap : bool;
		hoodSecondTap = false;

		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}

		hoodSecondTap = helmPressTimestamp + DOUBLE_TAP_WINDOW_HELM >= theGame.GetEngineTimeAsSeconds();

		if ( IsPressed( action ) )
		{	
			if (ACS_Armor_Equipped_Check())
			{
				if (hoodSecondTap)
				{
					if (GetHelmToggle())
					{
						return false;
					}

					RemoveTimer('ACS_AdditionalHelmetsSpawnDelay');
					RemoveTimer('ACS_AdditionalHelmetsDespawnDelay');

					if (!GetHelmToggle() && !GetHoodToggle())
					{
						thePlayer.PlayEffectSingle('demonic_possession');
						thePlayer.StopEffect('demonic_possession');

						RemoveTimer('Hood_Include_Delay');
						RemoveTimer('Hood_Exclude_Delay');

						AddTimer('Hood_Include_Delay', 0.75, false);

					}
					else
					{
						thePlayer.PlayEffectSingle('demonic_possession');
						thePlayer.StopEffect('demonic_possession');

						RemoveTimer('Hood_Include_Delay');
						RemoveTimer('Hood_Exclude_Delay');

						AddTimer('Hood_Exclude_Delay', 0.75, false);
					}
				}
				else
				{
					if (GetHoodToggle())
					{
						return false;
					}

					if (!GetHelmToggle() && !GetHoodToggle())
					{
						thePlayer.PlayEffectSingle('demonic_possession');
						thePlayer.StopEffect('demonic_possession');

						RemoveTimer('ACS_AdditionalHelmetsSpawnDelay');
						RemoveTimer('ACS_AdditionalHelmetsDespawnDelay');

						AddTimer('ACS_AdditionalHelmetsSpawnDelay', 0.75, false);
					}
					else
					{
						thePlayer.PlayEffectSingle('demonic_possession');
						thePlayer.StopEffect('demonic_possession');

						RemoveTimer('ACS_AdditionalHelmetsSpawnDelay');
						RemoveTimer('ACS_AdditionalHelmetsDespawnDelay');

						AddTimer('ACS_AdditionalHelmetsDespawnDelay', 0.75, false);
					}
				}
			}
			else
			{
				if (hoodSecondTap)
				{
					CloakToggle();
				}
				else
				{
					if (!helmtoggle && !GetHoodToggle())
					{
						thePlayer.PlayEffectSingle('demonic_possession');
						thePlayer.StopEffect('demonic_possession');

						RemoveTimer('Hood_Include_Delay');
						RemoveTimer('Hood_Exclude_Delay');

						AddTimer('Hood_Include_Delay', 0.75, false);

					}
					else
					{
						thePlayer.PlayEffectSingle('demonic_possession');
						thePlayer.StopEffect('demonic_possession');

						RemoveTimer('Hood_Include_Delay');
						RemoveTimer('Hood_Exclude_Delay');

						AddTimer('Hood_Exclude_Delay', 0.75, false);
					}
				}
			}
		}

		helmPressTimestamp = theGame.GetEngineTimeAsSeconds();
	}

	public var facegearinprogress : bool;

	function SetFacemaskProgress( flag : bool )
	{
		facegearinprogress = flag;
	}

	function GetFacemaskProgress() : bool 
	{
		return facegearinprogress;
	}

	function Facegear_Include_Startup()
	{
		Facegear_Include_Actual();

		if ( FactsQuerySum("ACS_Mask_Enabled") <= 0 )
		{
			FactsAdd("ACS_Mask_Enabled", 1, -1);
		}
	}

	function Facegear_Include_No_Anim()
	{
		if ( FactsQuerySum("ACS_Mask_Enabled") <= 0 )
		{
			Facegear_Include_Actual();

			FactsAdd("ACS_Mask_Enabled", 1, -1);
		}
	}

	function Facegear_Exclude_No_Anim()
	{
		if ( FactsQuerySum("ACS_Mask_Enabled") > 0 )
		{
			Facegear_Exclude_Actual();

			FactsRemove("ACS_Mask_Enabled");
		}
	}

	function Facegear_Include()
	{
		if ( !GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_Armor) )
		{
			return;
		}

		if (theGame.IsDialogOrCutscenePlaying() 
		|| thePlayer.IsInNonGameplayCutscene() 
		|| thePlayer.IsInGameplayScene() 
		|| theGame.IsCurrentlyPlayingNonGameplayScene()
		|| theGame.IsFading()
		|| theGame.IsBlackscreen()
		|| thePlayer.IsHoldingItemInLHand() 
		|| thePlayer.IsCrossbowHeld()
		)
		{
			if ( FactsQuerySum("ACS_Mask_Enabled") <= 0 )
			{
				Facegear_Include_Actual();

				FactsAdd("ACS_Mask_Enabled", 1, -1);
			}
		}
		else
		{
			if (!ACS_MaskAnimation_Enabled())
			{
				if ( FactsQuerySum("ACS_Mask_Enabled") <= 0 )
				{
					Facegear_Include_Actual();

					FactsAdd("ACS_Mask_Enabled", 1, -1);
				}

				return;
			}
			else
			{
				if (GetFacemaskProgress())
				{
					return;
				}

				if (GetPotionAnimProgress())
				{
					return;
				}

				ACS_Hood_And_Mask_Tutorial();

				SetFacemaskProgress(true);

				if ( !thePlayer.IsHoldingItemInLHand() && !thePlayer.IsCrossbowHeld() ) 
				{
					thePlayer.SetBehaviorVariable( 'SelectedItemL', (int)UI_Mask, true );	

					thePlayer.RaiseEvent( 'ItemUseL' );

					thePlayer.BlockAction( EIAB_UsableItem,					'ACS_Item_Anim_Hack');
					thePlayer.BlockAction( EIAB_Crossbow,					'ACS_Item_Anim_Hack');
					thePlayer.BlockAction( EIAB_CallHorse,					'ACS_Item_Anim_Hack');
					thePlayer.BlockAction( EIAB_InteractionAction, 			'ACS_Item_Anim_Hack');
					thePlayer.BlockAction( EIAB_Interactions, 				'ACS_Item_Anim_Hack');
					thePlayer.BlockAction( EIAB_InteractionContainers,  	'ACS_Item_Anim_Hack');

					GetWitcherPlayer().SelectQuickslotItem( EES_RangedWeapon );	
				}

				AddTimer('ACS_FaceGearIncludeDelay', 1.125, false);
			}
		}
	}

	function Facegear_Exclude()
	{
		if ( !GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_Armor) )
		{
			return;
		}

		if (theGame.IsDialogOrCutscenePlaying() 
		|| thePlayer.IsInNonGameplayCutscene() 
		|| thePlayer.IsInGameplayScene() 
		|| theGame.IsCurrentlyPlayingNonGameplayScene()
		|| theGame.IsFading()
		|| theGame.IsBlackscreen()
		|| thePlayer.IsHoldingItemInLHand() 
		|| thePlayer.IsCrossbowHeld()
		)
		{
			if ( FactsQuerySum("ACS_Mask_Enabled") > 0 )
			{
				Facegear_Exclude_Actual();

				FactsRemove("ACS_Mask_Enabled");
			}
		}
		else
		{
			if (!ACS_MaskAnimation_Enabled())
			{
				if ( FactsQuerySum("ACS_Mask_Enabled") > 0 )
				{
					Facegear_Exclude_Actual();

					FactsRemove("ACS_Mask_Enabled");
				}
			}
			else
			{
				if (GetFacemaskProgress())
				{
					return;
				}

				if (GetPotionAnimProgress())
				{
					return;
				}

				ACS_Hood_And_Mask_Tutorial();

				SetFacemaskProgress(true);

				if ( !thePlayer.IsHoldingItemInLHand() && !thePlayer.IsCrossbowHeld() ) 
				{
					thePlayer.SetBehaviorVariable( 'SelectedItemL', (int)UI_Mask, true );	

					thePlayer.RaiseEvent( 'ItemUseL' );

					thePlayer.BlockAction( EIAB_UsableItem,					'ACS_Item_Anim_Hack');
					thePlayer.BlockAction( EIAB_Crossbow,					'ACS_Item_Anim_Hack');
					thePlayer.BlockAction( EIAB_CallHorse,					'ACS_Item_Anim_Hack');
					thePlayer.BlockAction( EIAB_InteractionAction, 			'ACS_Item_Anim_Hack');
					thePlayer.BlockAction( EIAB_Interactions, 				'ACS_Item_Anim_Hack');
					thePlayer.BlockAction( EIAB_InteractionContainers,  	'ACS_Item_Anim_Hack');

					GetWitcherPlayer().SelectQuickslotItem( EES_RangedWeapon );	
				}

				AddTimer('ACS_FaceGearExcludeDelay', 1.5, false);
			}
		}
	}

	public timer function ACS_FaceGearIncludeDelay(deltaTime : float , id : int)
	{
		Facegear_Include_Actual();

		if ( FactsQuerySum("ACS_Mask_Enabled") <= 0 )
		{
			FactsAdd("ACS_Mask_Enabled", 1, -1);
		}

		AddTimer('ACS_MaskAnimDelay', 0.5, false);
	}

	public timer function ACS_FaceGearExcludeDelay(deltaTime : float , id : int)
	{
		if (ACS_MaskAnimation_Enabled())
		{
			Facegear_Exclude_Actual();

			if ( FactsQuerySum("ACS_Mask_Enabled") > 0 )
			{
				FactsRemove("ACS_Mask_Enabled");
			}

			if ( !thePlayer.IsHoldingItemInLHand() && !thePlayer.IsCrossbowHeld() ) 
			{
				thePlayer.SetBehaviorVariable( 'SelectedItemL', (int)UI_Mask, true );	

				thePlayer.RaiseEvent( 'ItemUseL' );

				thePlayer.BlockAction( EIAB_UsableItem,					'ACS_Item_Anim_Hack');
				thePlayer.BlockAction( EIAB_Crossbow,					'ACS_Item_Anim_Hack');
				thePlayer.BlockAction( EIAB_CallHorse,					'ACS_Item_Anim_Hack');
				thePlayer.BlockAction( EIAB_InteractionAction, 			'ACS_Item_Anim_Hack');
				thePlayer.BlockAction( EIAB_Interactions, 				'ACS_Item_Anim_Hack');
				thePlayer.BlockAction( EIAB_InteractionContainers,  	'ACS_Item_Anim_Hack');

				GetWitcherPlayer().SelectQuickslotItem( EES_RangedWeapon );	
			}

			AddTimer('ACS_MaskProgressDelay', 2, false);
		}
		else
		{
			if ( FactsQuerySum("ACS_Mask_Enabled") > 0 )
			{
				Facegear_Exclude_Actual();

				FactsRemove("ACS_Mask_Enabled");
			}
		}
	}

	public timer function ACS_MaskAnimDelay(deltaTime : float , id : int)
	{
		if (ACS_MaskAnimation_Enabled())
		{
			if ( !thePlayer.IsHoldingItemInLHand() && !thePlayer.IsCrossbowHeld() ) 
			{
				thePlayer.SetBehaviorVariable( 'SelectedItemL', (int)UI_Mask, true );	

				thePlayer.RaiseEvent( 'ItemUseL' );

				thePlayer.BlockAction( EIAB_UsableItem,					'ACS_Item_Anim_Hack');
				thePlayer.BlockAction( EIAB_Crossbow,					'ACS_Item_Anim_Hack');
				thePlayer.BlockAction( EIAB_CallHorse,					'ACS_Item_Anim_Hack');
				thePlayer.BlockAction( EIAB_InteractionAction, 			'ACS_Item_Anim_Hack');
				thePlayer.BlockAction( EIAB_Interactions, 				'ACS_Item_Anim_Hack');
				thePlayer.BlockAction( EIAB_InteractionContainers,  	'ACS_Item_Anim_Hack');

				GetWitcherPlayer().SelectQuickslotItem( EES_RangedWeapon );	
			}

			AddTimer('ACS_MaskProgressDelay', 2, false);
		}
		else
		{
			if ( FactsQuerySum("ACS_Mask_Enabled") <= 0 )
			{
				Facegear_Include_Actual();

				FactsAdd("ACS_Mask_Enabled", 1, -1);
			}
		}
	}

	public timer function ACS_MaskProgressDelay(deltaTime : float , id : int)
	{
		thePlayer.UnblockAction( EIAB_UsableItem,				'ACS_Item_Anim_Hack');
		thePlayer.UnblockAction( EIAB_Crossbow,					'ACS_Item_Anim_Hack');
		thePlayer.UnblockAction( EIAB_CallHorse,				'ACS_Item_Anim_Hack');
		thePlayer.UnblockAction( EIAB_InteractionAction, 		'ACS_Item_Anim_Hack');
		thePlayer.UnblockAction( EIAB_Interactions, 			'ACS_Item_Anim_Hack');
		thePlayer.UnblockAction( EIAB_InteractionContainers,  	'ACS_Item_Anim_Hack');

		SetFacemaskProgress(false);
	}

	var vACS_Facegear_Include : cACS_Facegear_Include;

	function Facegear_Include_Actual()
	{
		vACS_Facegear_Include = new cACS_Facegear_Include in this;
				
		vACS_Facegear_Include.Engage();

		SetFacemaskToggle(true);
	}

	var vACS_Facegear_Exclude : cACS_Facegear_Exclude;

	function Facegear_Exclude_Actual()
	{
		vACS_Facegear_Exclude = new cACS_Facegear_Exclude in this;
				
		vACS_Facegear_Exclude.Engage();

		SetFacemaskToggle(false);
	}

	function SetFacemaskToggle( flag : bool )
	{
		facemasktoggle = flag;
	}

	function GetFacemaskToggle() : bool 
	{
		return facemasktoggle;
	}

	event OnACSFacemaskToggle( action : SInputAction )
	{
		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}

		if (GetFacemaskProgress() == true)
		{
			return false;
		}

		if ( IsPressed( action ) )
		{	
			if (!facemasktoggle)
			{
				Facegear_Include();
			}
			else
			{
				Facegear_Exclude();
			}	
		}
	}

	function CloakToggle()
	{
		RemoveTimer('CloakToggleDelay');
		AddTimer('CloakToggleDelay', 0.5, false);
	}

	public timer function CloakToggleDelay(deltaTime : float , id : int)
	{
		var p_comp				: CComponent;
		var temp, tempfur1		: CEntityTemplate;

		p_comp = thePlayer.GetComponentByClassName( 'CAppearanceComponent' );

		if ( ACS_SOI_Installed() && ACS_SOI_Enabled() )
		{
			temp = (CEntityTemplate)LoadResource(

			"dlc\dlc_acs\data\entities\other\geralt_cloak_shades.w2ent"
			
			, true);
		}
		else
		{
			temp = (CEntityTemplate)LoadResource(

			"dlc\dlc_acs\data\entities\other\geralt_cloak_normal.w2ent"
			
			, true);
		}	

		if ((theGame.GetWorld().GetDepotPath() == "levels\skellige\skellige.w2w")
		|| (theGame.GetWorld().GetDepotPath() == "levels\prolog_village_winter\prolog_village.w2w")
		|| ACS_AlwaysFurCloak()
		)
		{
			tempfur1 = (CEntityTemplate)LoadResource(

			"dlc\dlc_acs\data\armor\old_stuff\fur\red_fur_black.w2ent"
			
			, true);

			if ( FactsQuerySum("ACS_Cloak_Equipped") <= 0 )
			{
				((CAppearanceComponent)p_comp).IncludeAppearanceTemplate(temp);

				((CAppearanceComponent)p_comp).IncludeAppearanceTemplate(tempfur1);

				FactsAdd("ACS_Cloak_Equipped", 1, -1);
			}
			else if (FactsQuerySum("ACS_Cloak_Equipped") > 0)
			{
				((CAppearanceComponent)p_comp).ExcludeAppearanceTemplate(temp);

				((CAppearanceComponent)p_comp).ExcludeAppearanceTemplate(tempfur1);

				FactsRemove("ACS_Cloak_Equipped");
			}
		}
		else
		{
			if ( FactsQuerySum("ACS_Cloak_Equipped") <= 0 )
			{
				((CAppearanceComponent)p_comp).IncludeAppearanceTemplate(temp);

				FactsAdd("ACS_Cloak_Equipped", 1, -1);
			}
			else if (FactsQuerySum("ACS_Cloak_Equipped") > 0)
			{
				((CAppearanceComponent)p_comp).ExcludeAppearanceTemplate(temp);

				FactsRemove("ACS_Cloak_Equipped");
			}
		}
	}

	function CloakToggleOff()
	{
		var p_comp									: CComponent;
		var temp, tempfur1							: CEntityTemplate;

		RemoveTimer('CloakToggleDelay');

		if (FactsQuerySum("ACS_Cloak_Equipped") > 0)
		{
			p_comp = thePlayer.GetComponentByClassName( 'CAppearanceComponent' );

			if ( ACS_SOI_Installed() && ACS_SOI_Enabled() )
			{
				temp = (CEntityTemplate)LoadResource(

				"dlc\dlc_acs\data\entities\other\geralt_cloak_shades.w2ent"
				
				, true);
			}
			else
			{
				temp = (CEntityTemplate)LoadResource(

				"dlc\dlc_acs\data\entities\other\geralt_cloak_normal.w2ent"
				
				, true);
			}

			((CAppearanceComponent)p_comp).ExcludeAppearanceTemplate(temp);

			if ((theGame.GetWorld().GetDepotPath() == "levels\skellige\skellige.w2w")
			|| (theGame.GetWorld().GetDepotPath() == "levels\prolog_village_winter\prolog_village.w2w")
			|| ACS_AlwaysFurCloak()
			)
			{
				tempfur1 = (CEntityTemplate)LoadResource(

				"dlc\dlc_acs\data\armor\old_stuff\fur\red_fur_black.w2ent"
				
				, true);

				((CAppearanceComponent)p_comp).ExcludeAppearanceTemplate(tempfur1);
			}

			FactsRemove("ACS_Cloak_Equipped");
		}
	}

	function CloakToggleStartup()
	{
		var p_comp				: CComponent;
		var temp, tempfur1		: CEntityTemplate;

		RemoveTimer('CloakToggleDelay');

		if (FactsQuerySum("ACS_Cloak_Equipped") > 0)
		{
			p_comp = thePlayer.GetComponentByClassName( 'CAppearanceComponent' );

			if ( ACS_SOI_Installed() && ACS_SOI_Enabled() )
			{
				temp = (CEntityTemplate)LoadResource(

				"dlc\dlc_acs\data\entities\other\geralt_cloak_shades.w2ent"
				
				, true);
			}
			else
			{
				temp = (CEntityTemplate)LoadResource(

				"dlc\dlc_acs\data\entities\other\geralt_cloak_normal.w2ent"
				
				, true);
			}

			if ((theGame.GetWorld().GetDepotPath() == "levels\skellige\skellige.w2w")
			|| (theGame.GetWorld().GetDepotPath() == "levels\prolog_village_winter\prolog_village.w2w")
			|| ACS_AlwaysFurCloak()
			)
			{
				tempfur1 = (CEntityTemplate)LoadResource(

				"dlc\dlc_acs\data\armor\old_stuff\fur\red_fur_black.w2ent"
				
				, true);

				((CAppearanceComponent)p_comp).IncludeAppearanceTemplate(tempfur1);
			}

			((CAppearanceComponent)p_comp).IncludeAppearanceTemplate(temp);
		}
	}

	var vACS_Warden_Tail_Include : cACS_Warden_Tail_Include;

	function Red_Warden_Tail_Include()
	{
		vACS_Warden_Tail_Include = new cACS_Warden_Tail_Include in this;
				
		vACS_Warden_Tail_Include.Engage();
	}

	var vACS_Warden_Tail_Exclude : cACS_Warden_Tail_Exclude;

	function Silver_Warden_Tail_Include()
	{
		vACS_Warden_Tail_Exclude = new cACS_Warden_Tail_Exclude in this;
				
		vACS_Warden_Tail_Exclude.Engage();
	}

	function EquipACSArmorOmega()
	{
		var newID : array<SItemUniqueId>;

		GetWitcherPlayer().UnequipItemFromSlot(EES_Armor);

		if ( ACS_SOI_Installed() && ACS_SOI_Enabled() && helmtoggle )
		{
			Red_Warden_Tail_Include();
		}

		if (thePlayer.inv.HasItem('ACS_Armor_Omega'))
		{
			thePlayer.EquipItem( thePlayer.inv.GetItemId('ACS_Armor_Omega'));
		}
		else
		{
			newID = thePlayer.inv.AddAnItem('ACS_Armor_Omega', 1);

			thePlayer.EquipItem(newID[0]);
		}
	}

	function EquipNGPACSArmorOmega()
	{
		var newID : array<SItemUniqueId>;

		GetWitcherPlayer().UnequipItemFromSlot(EES_Armor);

		if ( ACS_SOI_Installed() && ACS_SOI_Enabled() && helmtoggle )
		{
			Red_Warden_Tail_Include();
		}

		if (thePlayer.inv.HasItem('NGP_ACS_Armor_Omega'))
		{
			thePlayer.EquipItem( thePlayer.inv.GetItemId('NGP_ACS_Armor_Omega'));
		}
		else
		{
			newID = thePlayer.inv.AddAnItem('NGP_ACS_Armor_Omega', 1);

			thePlayer.EquipItem(newID[0]);
		}
	}

	function EquipACSArmorAlpha()
	{
		var newID : array<SItemUniqueId>;

		GetWitcherPlayer().UnequipItemFromSlot(EES_Armor);

		if ( ACS_SOI_Installed() && ACS_SOI_Enabled() && helmtoggle )
		{
			Silver_Warden_Tail_Include();
		}
	
		if (thePlayer.inv.HasItem('ACS_Armor_Alpha'))
		{
			thePlayer.EquipItem( thePlayer.inv.GetItemId('ACS_Armor_Alpha'));
		}
		else
		{
			newID = thePlayer.inv.AddAnItem('ACS_Armor_Alpha', 1);

			thePlayer.EquipItem(newID[0]);
		}
	}

	function EquipNGPACSArmorAlpha()
	{
		var newID : array<SItemUniqueId>;

		GetWitcherPlayer().UnequipItemFromSlot(EES_Armor);

		if ( ACS_SOI_Installed() && ACS_SOI_Enabled() && helmtoggle )
		{
			Silver_Warden_Tail_Include();
		}

		if (thePlayer.inv.HasItem('NGP_ACS_Armor_Alpha'))
		{
			thePlayer.EquipItem( thePlayer.inv.GetItemId('NGP_ACS_Armor_Alpha'));
		}
		else
		{
			newID = thePlayer.inv.AddAnItem('NGP_ACS_Armor_Alpha', 1);

			thePlayer.EquipItem(newID[0]);
		}
	}

	public timer function ACS_ShoulderToggleDelay(deltaTime : float , id : int)
	{
		if (GetWitcherPlayer().IsItemEquippedByName('ACS_Armor_Omega'))
		{
			EquipACSArmorAlpha();
		}
		else if (GetWitcherPlayer().IsItemEquippedByName('NGP_ACS_Armor_Omega'))
		{
			EquipNGPACSArmorAlpha();
		}
		else if (GetWitcherPlayer().IsItemEquippedByName('ACS_Armor_Alpha'))
		{
			EquipACSArmorOmega();
		}
		else if (GetWitcherPlayer().IsItemEquippedByName('NGP_ACS_Armor_Alpha'))
		{
			EquipNGPACSArmorOmega();
		}

		if (hoodtoggle || helmtoggle)
		{
			Hair_Thing();
		}
	}

	event OnACSShoulderToggle( action : SInputAction )
	{
		if (!ACS_Armor_Equipped_Check())
		{
			return false;
		}

		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}

		if ( IsPressed( action ) )
		{	
			thePlayer.PlayEffectSingle('special_attack_only_black_fx');
			thePlayer.StopEffect('special_attack_only_black_fx');

			thePlayer.PlayEffectSingle('ethereal_appear');
			thePlayer.StopEffect('ethereal_appear');

			thePlayer.PlayEffectSingle('embers_particles_test');
			thePlayer.StopEffect('embers_particles_test');

			RemoveTimer('ACS_ShoulderToggleDelay');
			AddTimer('ACS_ShoulderToggleDelay', 0.5, false);
		}
	}
	
	event OnMovementDoubleTapA( action : SInputAction )
	{
		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}

		if( !thePlayer.IsActionAllowed(EIAB_Dodge)) 
		{
			return false;
		}

		if ( IsPressed( action ) )
		{			
			if ( !thePlayer.IsDodgeTimerRunning() || action.aName != lastACSMovementDoubleTapName )
			{
				thePlayer.StartDodgeTimer();
				lastACSMovementDoubleTapName = action.aName;
			}
			else
			{
				thePlayer.StopDodgeTimer();
				
				ACS_BruxaDodgeBackLeftInit();
			}
		}
	}
	
	event OnMovementDoubleTapS( action : SInputAction )
	{
		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}

		if( !thePlayer.IsActionAllowed(EIAB_Dodge)) 
		{
			return false;
		}

		if ( IsPressed( action ) )
		{			
			if ( !thePlayer.IsDodgeTimerRunning() || action.aName != lastACSMovementDoubleTapName )
			{
				thePlayer.StartDodgeTimer();
				lastACSMovementDoubleTapName = action.aName;
			}
			else
			{
				thePlayer.StopDodgeTimer();
		
				ACS_BruxaDodgeBackCenterInit();	
			}
		}
	}
	
	event OnMovementDoubleTapD( action : SInputAction )
	{
		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}

		if( !thePlayer.IsActionAllowed(EIAB_Dodge)) 
		{
			return false;
		}

		if ( IsPressed( action ) )
		{			
			if ( !thePlayer.IsDodgeTimerRunning() || action.aName != lastACSMovementDoubleTapName )
			{
				thePlayer.StartDodgeTimer();
				lastACSMovementDoubleTapName = action.aName;
			}
			else
			{
				thePlayer.StopDodgeTimer();
				
				ACS_BruxaDodgeBackRightInit();
			}
		}
	}

	public timer function SwordWalkUnblockInteractionDelay(deltaTime : float , id : int)
	{
		GetWitcherPlayer().UnblockAction( EIAB_InteractionAction, 		'ACS_Defalt_Swordwalk');
		GetWitcherPlayer().UnblockAction( EIAB_Interactions, 			'ACS_Defalt_Swordwalk');
		GetWitcherPlayer().UnblockAction( EIAB_InteractionContainers,  	'ACS_Defalt_Swordwalk');

		theGame.ReleaseNoSaveLock( ACS_Swordwalk_Savelock_ID );
	}

	function ACS_Swordwalk_Create_Savelock()
	{
		theGame.CreateNoSaveLock( "ACS_Swordwalk_Active", ACS_Swordwalk_Savelock_ID, false, false );
	}

	public timer function DefaltSwordWalk(deltaTime : float , id : int)
	{
		if 
		(
		theInput.GetActionValue('Sprint') > 0.7f
		|| theInput.GetActionValue('Jump') > 0.7f 
		|| theInput.GetActionValue('MovementDoubleTapW') > 0.7f
		|| theInput.GetActionValue('MovementDoubleTapS') > 0.7f 
		|| theInput.GetActionValue('MovementDoubleTapA') > 0.7f 
		|| theInput.GetActionValue('MovementDoubleTapD') > 0.7f 
		|| theInput.GetActionValue('Dodge') > 0.7f 
		|| theInput.GetActionValue('CastSign') > 0.7f 
		|| theInput.GetActionValue('AltQuenCasting') > 0.7f 
		|| theInput.GetActionValue('BruxaBite') > 0.7f 
		|| theInput.GetActionValue('AttackHeavy') > 0.7f 
		|| theInput.GetActionValue('AttackHeavy') < -0.7f 
		|| theInput.GetActionValue('AttackWithAlternateLight') > 0.7f 
		|| theInput.GetActionValue('AttackWithAlternateHeavy') > 0.7f 
		|| theInput.GetActionValue('AttackLight') > 0.7f 
		|| theInput.GetActionValue('SpecialAttackLight') > 0.7f 
		|| theInput.GetActionValue('SpecialAttackWithAlternateLight') > 0.7f 
		|| theInput.GetActionValue('SpecialAttackWithAlternateHeavy') > 0.7f 
		|| theInput.GetActionValue('ToggleSigns') > 0.7f 
		|| theInput.GetActionValue('SpecialAttackHeavy') > 0.7f 
		|| theInput.GetActionValue('SpecialAttackHeavy') < -0.7f 
		|| theInput.GetActionValue('CbtRoll') > 0.7f 
		|| theInput.GetActionValue('LockAndGuard') > 0.7f 
		|| theInput.GetActionValue('Guard') > 0.7f 
		|| thePlayer.GetIsSprinting()
		|| thePlayer.GetIsRunning()
		|| thePlayer.substateManager.GetStateCur() == 'Sprint'
		|| thePlayer.substateManager.GetStateCur() == 'Vault'
		|| thePlayer.substateManager.GetStateCur() == 'Climb' 
		|| thePlayer.substateManager.GetStateCur() == 'Jump' 
		|| thePlayer.substateManager.GetStateCur() == 'Ragdoll' 
		|| thePlayer.substateManager.GetStateCur() == 'Slide' 
		|| thePlayer.substateManager.GetStateCur() == 'StartFalling' 
		|| thePlayer.substateManager.GetStateCur() == 'IdleJump' 
		|| thePlayer.substateManager.GetStateCur() == 'AirCollision' 
		|| thePlayer.substateManager.GetStateCur() == 'PrepareJump' 
		|| thePlayer.substateManager.GetStateCur() == 'TransitionPrepareToJump' 
		|| thePlayer.substateManager.GetStateCur() == 'TurnToJump' 
		|| thePlayer.substateManager.GetStateCur() == 'Roll' 
		|| thePlayer.substateManager.GetStateCur() == 'CombatExploration' 
		|| thePlayer.substateManager.GetStateCur() == 'Land'
		|| !thePlayer.IsActionAllowed(EIAB_Movement)
		|| thePlayer.IsInCombat() 
		|| thePlayer.IsInCombatState()
		|| thePlayer.IsInCombatAction() 
		|| thePlayer.IsThreatened()
		|| theGame.IsDialogOrCutscenePlaying() 
		|| thePlayer.IsInNonGameplayCutscene() 
		|| thePlayer.IsInGameplayScene()
		|| !theGame.GetFocusModeController().CanUseFocusMode()
		|| thePlayer.IsUsingHorse()
		|| thePlayer.IsUsingVehicle()
		|| !thePlayer.IsAnyWeaponHeld()
		|| thePlayer.IsCastingSign()
		|| thePlayer.IsInsideInteraction()
		|| thePlayer.IsInsideHorseInteraction()
		)
		{
			if (thePlayer.HasTag('ACS_IsSwordWalking'))
			{
				thePlayer.ClearAnimationSpeedMultipliers();

				thePlayer.RemoveTag('ACS_Is_Sneaking');

				RemoveTimer('DefaltSwordWalk');

				RemoveTimer('DefaltSwordWalkStart');

				RemoveTimer('AlternateDefaltSwordWalkStart');

				thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( '', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0) );

				thePlayer.ClearAnimationSpeedMultipliers();

				thePlayer.RemoveTag('ACS_Manual_Combat_Control');

				RemoveTimer('SwordWalkUnblockInteractionDelay');
				AddTimer('SwordWalkUnblockInteractionDelay', 1.5, false);

				thePlayer.RemoveTag('ACS_IsSwordWalking');
			}
		}
		else
		{
			thePlayer.ClearAnimationSpeedMultipliers();

			thePlayer.SetAnimationSpeedMultiplier( 1 );

			if (thePlayer.HasTag('ACS_Is_Sneaking'))
			{
				thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'ep1_geralt_sneaking_cycle_loop', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0) );
			}
			else
			{
				if (ACS_ShouldChangeWeaponWalkOneHandWeaponCheck_Steel() || ACS_ShouldChangeWeaponWalkOneHandWeaponCheck_Silver())
				{
					thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'man_work_guard_walk', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0) );
				}
				else if (ACS_ShouldChangeWeaponWalkTwoHandWeaponCheck_Steel() || ACS_ShouldChangeWeaponWalkTwoHandWeaponCheck_Silver())
				{
					thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'man_work_carry_stick_walk', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0) );
				}
				else
				{
					thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'i3_combat_override_v1_ACS', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0) );
				}
			}
		}
	}

	function DefaltSwordWalkingFinishCheck()
	{
		if (ACS_CombatToExplorationCheck()
		&& theGame.GetFocusModeController().CanUseFocusMode())
		{
			if (thePlayer.HasTag('ACS_IsSwordWalkingFinished'))
			{
				//if (!ACS_SwordWalk_Enabled())
				//{
					thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( '', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.25, 0.25) );
				//}

				RemoveTimer('SwordWalkUnblockInteractionDelay');
				AddTimer('SwordWalkUnblockInteractionDelay', 1.5, false);

				thePlayer.RemoveTag('ACS_IsSwordWalkingFinished');
			}
		}
	}

	function RemoveDefaltSwordWalk()
	{
		if (thePlayer.HasTag('ACS_IsSwordWalking'))
		{
			RemoveTimer('SwordWalkUnblockInteractionDelay');
			AddTimer('SwordWalkUnblockInteractionDelay', 1.5, false);

			thePlayer.RemoveTag('ACS_Is_Sneaking');

			RemoveTimer('DefaltSwordWalk');

			RemoveTimer('DefaltSwordWalkStart');

			RemoveTimer('AlternateDefaltSwordWalkStart');

			thePlayer.ClearAnimationSpeedMultipliers();

			if( thePlayer.GetIsRunning() || thePlayer.GetIsSprinting())
			{
				thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( '', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.5, 0.5) );
			}
			else 
			{
				if (RandF() < 0.5)
				{
					thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'combat_locomotion_walk_leftforward_to_idle', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 0.25f) );
				}
				else
				{
					thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'combat_locomotion_walk_leftup_to_idle', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 0.25f) );
				}
			}

			thePlayer.RemoveTag('ACS_Manual_Combat_Control');

			thePlayer.RemoveTag('ACS_IsSwordWalking');
		}
	}

	function RemoveDefaltSwordWalkCancel()
	{
		if (thePlayer.HasTag('ACS_IsSwordWalking'))
		{
			RemoveTimer('SwordWalkUnblockInteractionDelay');
			AddTimer('SwordWalkUnblockInteractionDelay', 1.5, false);

			thePlayer.ClearAnimationSpeedMultipliers();

			thePlayer.RemoveTag('ACS_Is_Sneaking');

			RemoveTimer('DefaltSwordWalk');

			RemoveTimer('DefaltSwordWalkStart');

			RemoveTimer('AlternateDefaltSwordWalkStart');

			thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( '', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(1, 1) );

			thePlayer.RemoveTag('ACS_Manual_Combat_Control');

			thePlayer.RemoveTag('ACS_IsSwordWalking');
		}
	}

	public timer function DefaltSwordWalkStart(deltaTime : float , id : int)
	{
		thePlayer.ClearAnimationSpeedMultipliers();

		thePlayer.RemoveTag('ACS_Is_Sneaking');

		RemoveTimer('DefaltSwordWalk');

		if (ACS_ShouldChangeWeaponWalkOneHandWeaponCheck_Steel() || ACS_ShouldChangeWeaponWalkOneHandWeaponCheck_Silver())
		{
			thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'man_work_guard_walk', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.325f, 0) );
			AddTimer('DefaltSwordWalk', 1.133333, true);
		}
		else if (ACS_ShouldChangeWeaponWalkTwoHandWeaponCheck_Steel() || ACS_ShouldChangeWeaponWalkTwoHandWeaponCheck_Silver())
		{
			thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'man_work_carry_stick_walk', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.325f, 0) );
			AddTimer('DefaltSwordWalk', 1.2, true);
		}
		else
		{
			if (theInput.GetActionValue('Focus') > 0.7f && ACS_Sneaking_Enabled())
			{
				ACS_Sneaking_Tutorial();

				thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'ep1_geralt_sneaking_cycle_loop', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.325f, 0) );
				
				AddTimer('DefaltSwordWalk', 2.799999, true);

				thePlayer.AddTag('ACS_Is_Sneaking');
			}
			else
			{
				thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'i3_combat_override_v1_ACS', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.325f, 0) );
				AddTimer('DefaltSwordWalk', 1.033333, true);
			}
		}
	}

	public timer function AlternateDefaltSwordWalkStart(deltaTime : float , id : int)
	{
		thePlayer.ClearAnimationSpeedMultipliers();

		thePlayer.RemoveTag('ACS_Is_Sneaking');

		RemoveTimer('DefaltSwordWalk');

		if (ACS_ShouldChangeWeaponWalkOneHandWeaponCheck_Steel() || ACS_ShouldChangeWeaponWalkOneHandWeaponCheck_Silver())
		{
			thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'man_work_guard_walk', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.325f, 0) );
			AddTimer('DefaltSwordWalk', 1.133333, true);
		}
		else if (ACS_ShouldChangeWeaponWalkTwoHandWeaponCheck_Steel() || ACS_ShouldChangeWeaponWalkTwoHandWeaponCheck_Silver())
		{
			thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'man_work_carry_stick_walk', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.325f, 0) );
			AddTimer('DefaltSwordWalk', 1.2, true);
		}
		else
		{
			if (theInput.GetActionValue('Focus') > 0.7f && ACS_Sneaking_Enabled())
			{
				ACS_Sneaking_Tutorial();

				thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'ep1_geralt_sneaking_cycle_loop', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.325f, 0) );

				AddTimer('DefaltSwordWalk', 2.799999, true);

				thePlayer.AddTag('ACS_Is_Sneaking');
			}
			else
			{
				thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'i3_combat_override_v1_ACS', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.325f, 0) );

				AddTimer('DefaltSwordWalk', 1.033333, true);
			}
		}
	}

	function DefaltSwordWalkInit()
	{
		if ( 
		!thePlayer.GetIsRunning()
		&& thePlayer.substateManager.GetStateTimeF() > 1
		&& !thePlayer.GetIsSprinting()
		&& thePlayer.IsAnyWeaponHeld()
		&& !thePlayer.IsWeaponHeld('fist')
		&& ACS_CombatToExplorationCheck()
		&& !thePlayer.IsInCombatState()
		&& !thePlayer.IsInCombatAction()
		&& !thePlayer.IsThreatened()
		&& thePlayer.substateManager.GetStateCur() != 'Combat'
		&& thePlayer.GetCurrentStateName() != 'Combat'
		&& !thePlayer.IsInAir()
		&& thePlayer.IsOnGround()
		&& theGame.GetFocusModeController().CanUseFocusMode()
		&& thePlayer.GetIsWalking() 
		&& ( thePlayer.GetMovingAgentComponent().GetSpeed() >= 0.6 )
		)
		{
			if (!thePlayer.HasTag('ACS_IsSwordWalking'))
			{
				RemoveTimer('SwordWalkUnblockInteractionDelay');
				GetWitcherPlayer().BlockAction(EIAB_InteractionAction, 			'ACS_Defalt_Swordwalk');
				GetWitcherPlayer().BlockAction( EIAB_Interactions, 				'ACS_Defalt_Swordwalk');
				GetWitcherPlayer().BlockAction( EIAB_InteractionContainers,  	'ACS_Defalt_Swordwalk');

				ACS_Swordwalk_Create_Savelock();

				thePlayer.ClearAnimationSpeedMultipliers();

				RemoveTimer('DefaltSwordWalkStart');

				thePlayer.RemoveTag('ACS_Is_Sneaking');

				RemoveTimer('DefaltSwordWalk');

				RemoveTimer('AlternateDefaltSwordWalkStart');

				AddTimer('DefaltSwordWalkStart', 0.000001, false);

				thePlayer.AddTag('ACS_IsSwordWalking');
			}
		}
		else
		{
			RemoveDefaltSwordWalk();
		}
	}

	function AlternateDefaltSwordWalkInit()
	{
		if ( 
		!thePlayer.GetIsRunning()
		&& !thePlayer.GetIsSprinting()
		&& thePlayer.IsAnyWeaponHeld()
		&& !thePlayer.IsWeaponHeld('fist')
		&& ACS_CombatToExplorationCheck()
		&& !thePlayer.IsInCombat()
		&& !thePlayer.IsInCombatState()
		&& !thePlayer.IsInCombatAction()
		&& !thePlayer.IsThreatened()
		&& thePlayer.substateManager.GetStateCur() != 'Combat'
		&& thePlayer.GetCurrentStateName() != 'Combat'
		&& thePlayer.substateManager.GetStateCur() != 'CombatExploration'
		&& thePlayer.GetCurrentStateName() != 'CombatExploration'
		&& !thePlayer.IsInAir()
		&& thePlayer.IsOnGround()
		&& theGame.GetFocusModeController().CanUseFocusMode()
		)
		{
			if (!thePlayer.HasTag('ACS_IsSwordWalking'))
			{
				RemoveTimer('SwordWalkUnblockInteractionDelay');

				GetWitcherPlayer().BlockAction(EIAB_InteractionAction, 		'ACS_Defalt_Swordwalk');
				GetWitcherPlayer().BlockAction( EIAB_Interactions, 			'ACS_Defalt_Swordwalk');
				GetWitcherPlayer().BlockAction( EIAB_InteractionContainers,  'ACS_Defalt_Swordwalk');

				ACS_Swordwalk_Create_Savelock();

				thePlayer.ClearAnimationSpeedMultipliers();

				RemoveTimer('DefaltSwordWalkStart');

				thePlayer.RemoveTag('ACS_Is_Sneaking');

				RemoveTimer('DefaltSwordWalk');

				RemoveTimer('AlternateDefaltSwordWalkStart');

				AddTimer('AlternateDefaltSwordWalkStart', 0.000001, false);

				thePlayer.AddTag('ACS_IsSwordWalking');
			}
		}
		else
		{
			RemoveDefaltSwordWalk();
		}
	}

	timer function MovementRestoreDelay( time : float , id : int )
	{
		thePlayer.RemoveTag('ACS_Movement_Prevention_Tag');
	}

	event OnMoveForward ( action : SInputAction )
	{
		if (thePlayer.IsSwimming()
		|| thePlayer.IsDiving()
		)
		{
			return false;
		}

		if (thePlayer.IsInGameplayScene()
		|| theGame.IsFading()
		|| theGame.IsBlackscreen()
		)
		{
			return false;
		}

		if (thePlayer.HasBuff(EET_AirDrain)
		|| thePlayer.HasBuff(EET_Choking)
		|| thePlayer.HasBuff(EET_Drowning)
		)
		{
			return false;
		}

		if (!thePlayer.IsActionAllowed(EIAB_Movement) )
		{
			return false;
		}

		if (
		ACS_Movement_Prevention()
		)
		{
			return false;
		}

		if (FactsQuerySum("ACS_Enter_Unconscious_Start") > 0)
		{
			return false;
		}

		if (thePlayer.IsInsideInteraction())
		{
			return false;
		}

		if (thePlayer.IsCiri() 
		|| ACS_New_Replacers_Female_Active()
		|| thePlayer.HasTag('ACS_In_Ciri_Special_Attack')
		)
		{
			return false;
		}

		if (thePlayer.HasTag('ACS_Special_Dodge') && thePlayer.IsActionAllowed(EIAB_Movement) && !thePlayer.IsCurrentlyDodging() )
		{
			action_interrupt_on_movement(); //ACS
			
			thePlayer.RemoveTag('ACS_Special_Dodge');
		}

		if ( ACS_Enabled() 
		&& thePlayer.IsActionAllowed(EIAB_Movement) 
		)
		{
			if ( action.value > 0.1f )
			{
				if (ACS_Transformation_Activated_Check())
				{
					return false;
				}

				if (thePlayer.IsUsingVehicle())
				{
					return false;
				}

				if 
				(
				(
				ACS_CombatToExplorationCheck()
				&& theInput.GetActionValue('Sprint') > 0.7f 
				&& theInput.GetActionValue('Jump') == 0 
				&& thePlayer.GetSprintingTime() <= 0.2f 
				&& thePlayer.substateManager.GetStateTimeF() > 1
				&& thePlayer.substateManager.GetStateCur() != 'Sprint'
				&& thePlayer.substateManager.GetStateCur() != 'Vault'
				&& thePlayer.substateManager.GetStateCur() != 'Climb' 
				&& thePlayer.substateManager.GetStateCur() != 'Jump' 
				&& thePlayer.substateManager.GetStateCur() != 'Ragdoll' 
				&& thePlayer.substateManager.GetStateCur() != 'Slide' 
				&& thePlayer.substateManager.GetStateCur() != 'StartFalling' 
				&& thePlayer.substateManager.GetStateCur() != 'IdleJump' 
				&& thePlayer.substateManager.GetStateCur() != 'AirCollision' 
				&& thePlayer.substateManager.GetStateCur() != 'PrepareJump' 
				&& thePlayer.substateManager.GetStateCur() != 'TransitionPrepareToJump' 
				&& thePlayer.substateManager.GetStateCur() != 'TurnToJump' 
				&& thePlayer.substateManager.GetStateCur() != 'Roll' 
				&& thePlayer.substateManager.GetStateCur() != 'CombatExploration' 
				&& thePlayer.substateManager.GetStateCur() != 'Land'
				&& thePlayer.IsActionAllowed(EIAB_Movement)
				&& !thePlayer.IsInCombat() 
				&& !thePlayer.IsInCombatState()
				&& !thePlayer.IsInCombatAction()
				&& !thePlayer.IsThreatened()
				)
				)
				{
					BruxaDash_NEW();
				}
				else
				{
					if (thePlayer.HasTag('ACS_Special_Dodge') && thePlayer.IsActionAllowed(EIAB_Movement) && !thePlayer.IsCurrentlyDodging() )
					{
						action_interrupt_on_movement(); //ACS
						
						thePlayer.RemoveTag('ACS_Special_Dodge');
					}

					if (!thePlayer.IsInCombat())
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control'))
						{
							thePlayer.RemoveTag('ACS_Manual_Combat_Control');
						} 
						
						RemoveTimer('Manual_Combat_Control_Remove'); 

						if (thePlayer.HasTag('ACS_IsSwordWalking'))
						{
							if ( thePlayer.GetMovingAgentComponent().GetSpeed() < 0.6 
							//&& !ACS_SwordWalk_Enabled()
							)
							{
								RemoveTimer('SwordWalkUnblockInteractionDelay');
								AddTimer('SwordWalkUnblockInteractionDelay', 1.5, false);

								thePlayer.ClearAnimationSpeedMultipliers();

								thePlayer.RemoveTag('ACS_Is_Sneaking');

								RemoveTimer('DefaltSwordWalk');

								RemoveTimer('DefaltSwordWalkStart');

								RemoveTimer('AlternateDefaltSwordWalkStart');

								thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( '', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.25, 0.25) );

								thePlayer.ClearAnimationSpeedMultipliers();

								thePlayer.RemoveTag('ACS_Manual_Combat_Control');

								thePlayer.RemoveTag('ACS_IsSwordWalking');
							}
						}
						else
						{
							DefaltSwordWalkingFinishCheck();

							DefaltSwordWalkInit();
						}
					}

					ACS_Hijack_YAxis_Up_Forward();
				}
			}
			else if ( action.value < -0.1f )
			{
				if (ACS_Transformation_Activated_Check())
				{
					return false;
				}

				if (thePlayer.IsUsingVehicle())
				{
					return false;
				}

				if (thePlayer.HasTag('ACS_Special_Dodge') && thePlayer.IsActionAllowed(EIAB_Movement) && !thePlayer.IsCurrentlyDodging() )
				{
					action_interrupt_on_movement(); //ACS
					
					thePlayer.RemoveTag('ACS_Special_Dodge');
				}

				if (!thePlayer.IsInCombat())
				{
					if(thePlayer.HasTag('ACS_Manual_Combat_Control'))
					{
						thePlayer.RemoveTag('ACS_Manual_Combat_Control');
					} 
					
					RemoveTimer('Manual_Combat_Control_Remove'); 

					if (thePlayer.HasTag('ACS_IsSwordWalking'))
					{
						if ( thePlayer.GetMovingAgentComponent().GetSpeed() < 0.6 
						//&& !ACS_SwordWalk_Enabled()
						)
						{
							RemoveTimer('SwordWalkUnblockInteractionDelay');
							AddTimer('SwordWalkUnblockInteractionDelay', 1.5, false);

							thePlayer.ClearAnimationSpeedMultipliers();

							thePlayer.RemoveTag('ACS_Is_Sneaking');

							RemoveTimer('DefaltSwordWalk');

							RemoveTimer('DefaltSwordWalkStart');

							RemoveTimer('AlternateDefaltSwordWalkStart');

							thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( '', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.25, 0.25) );

							thePlayer.ClearAnimationSpeedMultipliers();

							thePlayer.RemoveTag('ACS_Manual_Combat_Control');

							thePlayer.RemoveTag('ACS_IsSwordWalking');
						}
					}
					else
					{
						DefaltSwordWalkingFinishCheck();

						DefaltSwordWalkInit();
					}
				}
			}
			else if ( action.value == 0 )
			{	
				if (ACS_Transformation_Activated_Check())
				{
					return false;
				}

				if (thePlayer.IsUsingVehicle())
				{
					return false;
				}

				RemoveTimer('ACS_HijackMoveForward');

				if (theInput.GetActionValue('GI_AxisLeftX') == 0 )
				{
					RemoveDefaltSwordWalk();

					if (!thePlayer.HasTag('ACS_IsSwordWalkingFinished'))
					{
						thePlayer.AddTag('ACS_IsSwordWalkingFinished');
					}
				}
			}
		}
	}

	event OnMoveSide ( action : SInputAction )
	{
		if (thePlayer.IsSwimming()
		|| thePlayer.IsDiving()
		)
		{
			return false;
		}

		if (thePlayer.IsInGameplayScene()
		|| theGame.IsFading()
		|| theGame.IsBlackscreen()
		)
		{
			return false;
		}

		if (thePlayer.HasBuff(EET_AirDrain)
		|| thePlayer.HasBuff(EET_Choking)
		|| thePlayer.HasBuff(EET_Drowning)
		)
		{
			return false;
		}

		if (!thePlayer.IsActionAllowed(EIAB_Movement) )
		{
			return false;
		}

		if (
		ACS_Movement_Prevention()
		)
		{
			return false;
		}

		if (FactsQuerySum("ACS_Enter_Unconscious_Start") > 0)
		{
			return false;
		}

		if (thePlayer.IsInsideInteraction())
		{
			return false;
		}

		if (thePlayer.IsCiri() 
		|| ACS_New_Replacers_Female_Active()
		|| thePlayer.HasTag('ACS_In_Ciri_Special_Attack')
		)
		{
			return false;
		}

		if (thePlayer.HasTag('ACS_Special_Dodge') && thePlayer.IsActionAllowed(EIAB_Movement) && !thePlayer.IsCurrentlyDodging() )
		{
			action_interrupt_on_movement(); //ACS
			
			thePlayer.RemoveTag('ACS_Special_Dodge');
		}

		if ( ACS_Enabled() 
		&& thePlayer.IsActionAllowed(EIAB_Movement) 
		&& thePlayer.IsAnyWeaponHeld()
		&& !thePlayer.IsWeaponHeld('fist')
		)
		{
			if ( action.value > 0.1f )
			{
				if (ACS_Transformation_Activated_Check())
				{
					return false;
				}

				if (thePlayer.IsUsingVehicle())
				{
					return false;
				}

				if (thePlayer.HasTag('ACS_Special_Dodge') && thePlayer.IsActionAllowed(EIAB_Movement) && !thePlayer.IsCurrentlyDodging())
				{
					action_interrupt_on_movement(); //ACS

					thePlayer.RemoveTag('ACS_Special_Dodge');
				}

				if (!thePlayer.IsInCombat())
				{
					if(thePlayer.HasTag('ACS_Manual_Combat_Control'))
					{
						thePlayer.RemoveTag('ACS_Manual_Combat_Control');
					} 
					
					RemoveTimer('Manual_Combat_Control_Remove');

					if (thePlayer.HasTag('ACS_IsSwordWalking'))
					{
						if ( thePlayer.GetMovingAgentComponent().GetSpeed() < 0.6 
						//&& !ACS_SwordWalk_Enabled()
						)
						{
							RemoveTimer('SwordWalkUnblockInteractionDelay');
							AddTimer('SwordWalkUnblockInteractionDelay', 1.5, false);

							thePlayer.ClearAnimationSpeedMultipliers();

							thePlayer.RemoveTag('ACS_Is_Sneaking');

							RemoveTimer('DefaltSwordWalk');

							RemoveTimer('DefaltSwordWalkStart');

							RemoveTimer('AlternateDefaltSwordWalkStart');

							thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( '', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.25, 0.25) );

							thePlayer.ClearAnimationSpeedMultipliers();

							thePlayer.RemoveTag('ACS_Manual_Combat_Control');

							thePlayer.RemoveTag('ACS_IsSwordWalking');
						}
					}
					else
					{
						DefaltSwordWalkingFinishCheck();

						DefaltSwordWalkInit();
					}
				}
			}
			else if ( action.value < -0.1f )
			{
				if (ACS_Transformation_Activated_Check())
				{
					return false;
				}

				if (thePlayer.IsUsingVehicle())
				{
					return false;
				}

				if (thePlayer.HasTag('ACS_Special_Dodge') && thePlayer.IsActionAllowed(EIAB_Movement) && !thePlayer.IsCurrentlyDodging())
				{
					action_interrupt_on_movement(); //ACS
					
					thePlayer.RemoveTag('ACS_Special_Dodge');
				}

				if (!thePlayer.IsInCombat())
				{
					if(thePlayer.HasTag('ACS_Manual_Combat_Control'))
					{
						thePlayer.RemoveTag('ACS_Manual_Combat_Control');
					} 
					
					RemoveTimer('Manual_Combat_Control_Remove');

					if (thePlayer.HasTag('ACS_IsSwordWalking'))
					{
						if ( thePlayer.GetMovingAgentComponent().GetSpeed() < 0.6 
						//&& !ACS_SwordWalk_Enabled()
						)
						{
							RemoveTimer('SwordWalkUnblockInteractionDelay');
							AddTimer('SwordWalkUnblockInteractionDelay', 1.5, false);

							thePlayer.ClearAnimationSpeedMultipliers();

							thePlayer.RemoveTag('ACS_Is_Sneaking');

							RemoveTimer('DefaltSwordWalk');

							RemoveTimer('DefaltSwordWalkStart');

							RemoveTimer('AlternateDefaltSwordWalkStart');

							thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( '', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.25, 0.25) );

							thePlayer.ClearAnimationSpeedMultipliers();

							thePlayer.RemoveTag('ACS_Manual_Combat_Control');

							thePlayer.RemoveTag('ACS_IsSwordWalking');
						}
					}
					else
					{
						DefaltSwordWalkingFinishCheck();

						DefaltSwordWalkInit();
					}
				}
			}
			else if ( action.value == 0 )
			{	
				if (ACS_Transformation_Activated_Check())
				{
					return false;
				}

				if (thePlayer.IsUsingVehicle())
				{
					return false;
				}

				if (theInput.GetActionValue('GI_AxisLeftY') == 0 )
				{
					RemoveDefaltSwordWalk();

					if (!thePlayer.HasTag('ACS_IsSwordWalkingFinished'))
					{
						thePlayer.AddTag('ACS_IsSwordWalkingFinished');
					}
				}
			}
		}
	}

	function ACS_Wings_Entity_Anchor() : CEntity
	{
		var ent 			 : CEntity;
		
		ent = (CEntity)theGame.GetEntityByTag( 'ACS_Wings_Entity_Anchor' );
		return ent;
	}

	function ACS_Wings_Entity() : CEntity
	{
		var ent 			 : CEntity;
		
		ent = (CEntity)theGame.GetEntityByTag( 'ACS_Wings_Entity' );
		return ent;
	}

	function ACS_Igni_Glide_Entity_R() : CEntity
	{
		var ent 			 : CEntity;
		
		ent = (CEntity)theGame.GetEntityByTag( 'ACS_Igni_Glide_Entity_R' );
		return ent;
	}

	function ACS_Igni_Glide_Entity_L() : CEntity
	{
		var ent 			 : CEntity;
		
		ent = (CEntity)theGame.GetEntityByTag( 'ACS_Igni_Glide_Entity_L' );
		return ent;
	}

	function ACS_Igni_Glide_Entity_R_Leg() : CEntity
	{
		var ent 			 : CEntity;
		
		ent = (CEntity)theGame.GetEntityByTag( 'ACS_Igni_Glide_Entity_R_Leg' );
		return ent;
	}

	function ACS_Igni_Glide_Entity_L_Leg() : CEntity
	{
		var ent 			 : CEntity;
		
		ent = (CEntity)theGame.GetEntityByTag( 'ACS_Igni_Glide_Entity_L_Leg' );
		return ent;
	}

	timer function WerewolfAnimatedMovementReset( time : float , id : int )
	{
		((CMovingPhysicalAgentComponent)GetACSTransformationWerewolf().GetMovingAgentComponent()).SetAnimatedMovement( false );
	}

	function ACS_Glide_Create_Savelock()
	{
		theGame.CreateNoSaveLock( "ACS_Glide_Active", ACS_Glide_Savelock_ID, false, false );
	}

	public timer function Player_Wings_Sound(deltaTime : float , id : int)
	{
		if (RandF() < 0.5)
		{
			thePlayer.SoundEvent("monster_cockatrice_wing_flap");
		}
		else
		{
			thePlayer.SoundEvent("monster_griffon_wing_flap");
		}
	}

	event OnJump ( action : SInputAction )
	{
		var ent, ent_1, ent_2, ent_3, ent_4, wings_torso_anchor_1					: CEntity;
		var anchor_temp																: CEntityTemplate;
		var bonePosition															: Vector;
		var boneRotation															: EulerAngles;

		if (thePlayer.IsInGameplayScene()
		|| theGame.IsFading()
		|| theGame.IsBlackscreen()
		)
		{
			return false;
		}

		if (thePlayer.HasBuff(EET_AirDrain)
		|| thePlayer.HasBuff(EET_Choking)
		|| thePlayer.HasBuff(EET_Drowning)
		)
		{
			return false;
		}

		if (
		ACS_Movement_Prevention()
		)
		{
			return false;
		}

		if ( ACS_Enabled() )
		{
			if (FactsQuerySum("ACS_Enter_Unconscious_Start") > 0)
			{
				return false;
			}

			if (FactsQuerySum("ACS_In_Meditation") > 0)
			{
				return false;
			}

			if (ACS_Transformation_Activated_Check())
			{
				/*
				thePlayer.ActionCancelAll();

				thePlayer.RaiseForceEvent('Idle');

				thePlayer.RaiseForceEvent('ForceIdle');

				if( thePlayer.IsActionAllowed(EIAB_Movement)  )
				{
					if (thePlayer.GetBIsInputAllowed())
					{
						if (ACS_Transformation_Werewolf_Check())
						{
							if ( IsPressed(action) )
							{
								ACSTransformWerewolfMovementAdjustJump();

								((CMovingPhysicalAgentComponent)GetACSTransformationWerewolf().GetMovingAgentComponent()).SetAnimatedMovement( true );

								ACSTransformWerewolfPlayAnim('monster_werewolf_run_to_idle', 0.25f, 0.25f);

								AddTimer('WerewolfAnimatedMovementReset', 1, false);
							}
						}
					}
				}
				*/

				return false;
			}

			thePlayer.ClearAnimationSpeedMultipliers();

			thePlayer.RemoveTag('ACS_Is_Sneaking');

			RemoveTimer('DefaltSwordWalk');

			thePlayer.RemoveTag('ACS_Manual_Combat_Control');

			RemoveTimer('SwordWalkUnblockInteractionDelay');
			AddTimer('SwordWalkUnblockInteractionDelay', 1.5, false);

			thePlayer.RemoveTag('ACS_IsSwordWalking');

			if ( IsPressed(action) )
			{
				action_interrupt_on_jump(); //ACS

				if (thePlayer.IsInAir() 
				&& !thePlayer.IsInCombat() 
				&& !thePlayer.IsInInterior()
				&& !thePlayer.IsThreatened()
				&& !thePlayer.HasTag('in_wraith')
				&& !thePlayer.HasTag('vampire_claws_equipped')
				&& !thePlayer.IsOnGround()
				&& ACS_JumpGlide_Enabled()
				)
				{
					if (FactsQuerySum("ACS_Is_Gliding") <= 0
					&& ACS_can_glide())
					{
						ACS_refresh_glide_cooldown();
						
						ACS_Glide_Create_Savelock();

						ACS_Glide_Tutorial();

						thePlayer.BlockAction( EIAB_Crossbow, 			'ACS_Gliding');
						thePlayer.BlockAction( EIAB_CallHorse,			'ACS_Gliding');
						thePlayer.BlockAction( EIAB_Signs, 				'ACS_Gliding');
						thePlayer.BlockAction( EIAB_DrawWeapon, 		'ACS_Gliding');
						thePlayer.BlockAction( EIAB_FastTravel, 		'ACS_Gliding');
						thePlayer.BlockAction( EIAB_Fists, 				'ACS_Gliding');
						thePlayer.BlockAction( EIAB_InteractionAction, 	'ACS_Gliding');
						thePlayer.BlockAction( EIAB_UsableItem,			'ACS_Gliding');
						thePlayer.BlockAction( EIAB_ThrowBomb,			'ACS_Gliding');
						thePlayer.BlockAction( EIAB_SwordAttack,		'ACS_Gliding');
						thePlayer.BlockAction( EIAB_LightAttacks,		'ACS_Gliding');
						thePlayer.BlockAction( EIAB_HeavyAttacks,		'ACS_Gliding');
						thePlayer.BlockAction( EIAB_SpecialAttackLight,	'ACS_Gliding');
						thePlayer.BlockAction( EIAB_SpecialAttackHeavy,	'ACS_Gliding');
						thePlayer.BlockAction( EIAB_Dodge,				'ACS_Gliding');
						thePlayer.BlockAction( EIAB_Roll,				'ACS_Gliding');
						thePlayer.BlockAction( EIAB_Parry,				'ACS_Gliding');
						thePlayer.BlockAction( EIAB_MeditationWaiting,	'ACS_Gliding');
						thePlayer.BlockAction( EIAB_OpenMeditation,		'ACS_Gliding');
						thePlayer.BlockAction( EIAB_RadialMenu,			'ACS_Gliding');
						thePlayer.BlockAction( EIAB_Movement,			'ACS_Gliding');
						thePlayer.BlockAction( EIAB_Interactions, 		'ACS_Gliding');
						thePlayer.BlockAction( EIAB_Jump, 				'ACS_Gliding');
						thePlayer.BlockAction( EIAB_QuickSlots, 		'ACS_Gliding');

						AddTimer('ACS_Gliding', 0.00000000000000000000000001, true);

						thePlayer.DestroyEffect('acs_glide_disappear');

						thePlayer.RemoveTag('ACS_Wild_Hunt_Horse_Flying');

						ACS_Wings_Entity_Anchor().Destroy();

						ACS_Wings_Entity().Destroy();

						ACS_Igni_Glide_Entity_R().Destroy();

						ACS_Igni_Glide_Entity_L().Destroy();

						ACS_Igni_Glide_Entity_L_Leg().Destroy();

						ACS_Igni_Glide_Entity_R_Leg().Destroy();

						RemoveTimer('Fleder_Glide_Fear');

						RemoveTimer('Player_Wings_Sound');

						if (ACS_JumpGlideForm() == 2)
						{
							thePlayer.SoundEvent("monster_dettlaff_monster_movement_wing_flap_long_massive");

							thePlayer.SoundEvent("monster_dettlaff_monster_movement_whoosh_large");

							/*

							ent = theGame.CreateEntity( (CEntityTemplate)LoadResource( 
							//"dlc\dlc_acs\data\entities\other\shadow_wings.w2ent"

							"dlc\dlc_acs\data\entities\other\shadow_wings_orig.w2ent"

							, true ), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
							
							//ent.CreateAttachment( thePlayer, 'blood_point', Vector( -1.825, 0.2, -0.05 ), EulerAngles(0,0,90) );

							ent.CreateAttachment( thePlayer, 'blood_point', Vector( -1.7, -0.125, 0 ), EulerAngles(0,0,90) );

							//ent.CreateAttachment( thePlayer, 'blood_point', Vector( 0, 0 , -10 ), EulerAngles(0,0,0) );

							ent.PlayEffectSingle('embers_red');
							ent.StopEffect('embers_red');

							//ent.PlayEffectSingle('blood_color_all');

							*/

							anchor_temp = (CEntityTemplate)LoadResource( "dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true );

							GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( GetWitcherPlayer().GetBoneIndex( 'Trajectory' ), bonePosition, boneRotation );
							wings_torso_anchor_1 = (CEntity)theGame.CreateEntity( anchor_temp, GetWitcherPlayer().GetWorldPosition() + Vector( 0, 0, -10 ) );
							wings_torso_anchor_1.AddTag('ACS_Wings_Entity_Anchor');

							ent = theGame.CreateEntity( (CEntityTemplate)LoadResource( 

							"dlc\dlc_acs\data\entities\other\custom_wings\custom_fleder_wings.w2ent"

							, true ), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
							
							ent.CreateAttachment( wings_torso_anchor_1, , Vector( 0, 1, -1 ), EulerAngles(0,0,0) );

							ent.PlayEffect('summoning_burst');

							ent.PlayEffect('summoning_burst_2');

							ent.PlayEffect('crow_trail');
							
							ent.PlayEffect('feathers_fx');


							ent.AddTag('ACS_Wings_Entity');

							thePlayer.SetVisibility(false);

							AddTimer('Fleder_Glide_Fear', 0.001, true);
						}
						else if (ACS_JumpGlideForm() == 0)
						{
							thePlayer.SoundEvent("monster_dettlaff_monster_movement_wing_flap_long_massive");

							thePlayer.SoundEvent("monster_dettlaff_monster_movement_whoosh_large");

							anchor_temp = (CEntityTemplate)LoadResource( "dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true );

							GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( GetWitcherPlayer().GetBoneIndex( 'Trajectory' ), bonePosition, boneRotation );
							wings_torso_anchor_1 = (CEntity)theGame.CreateEntity( anchor_temp, GetWitcherPlayer().GetWorldPosition() + Vector( 0, 0, -10 ) );
							//wings_torso_anchor_1.CreateAttachmentAtBoneWS( GetWitcherPlayer(), 'Trajectory', bonePosition, boneRotation );
							wings_torso_anchor_1.AddTag('ACS_Wings_Entity_Anchor');

							ent = theGame.CreateEntity( (CEntityTemplate)LoadResource( 

							"dlc\dlc_acs\data\entities\other\custom_wings\custom_crow_wings.w2ent"

							, true ), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
							
							ent.CreateAttachment( wings_torso_anchor_1, , Vector( 0, 1, 0.75 ), EulerAngles(0,0,0) );

							ent.PlayEffect('summoning_burst');

							ent.PlayEffect('summoning_burst_2');

							ent.PlayEffect('crow_trail');

							ent.PlayEffect('feathers_fx');

							ent.AddTag('ACS_Wings_Entity');

							thePlayer.SetVisibility(false);
						}
						else if (ACS_JumpGlideForm() == 1)
						{
							thePlayer.SoundEvent("monster_dettlaff_monster_movement_wing_flap_long_massive");

							thePlayer.SoundEvent("monster_dettlaff_monster_movement_whoosh_large");

							anchor_temp = (CEntityTemplate)LoadResource( "dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true );

							GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( GetWitcherPlayer().GetBoneIndex( 'Trajectory' ), bonePosition, boneRotation );
							wings_torso_anchor_1 = (CEntity)theGame.CreateEntity( anchor_temp, GetWitcherPlayer().GetWorldPosition() + Vector( 0, 0, -10 ) );
							wings_torso_anchor_1.AddTag('ACS_Wings_Entity_Anchor');

							ent = theGame.CreateEntity( (CEntityTemplate)LoadResource( 

							"dlc\dlc_acs\data\entities\other\custom_wings\custom_owl_wings.w2ent"

							, true ), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
							
							ent.CreateAttachment( wings_torso_anchor_1, , Vector( 0, 1, 0.75 ), EulerAngles(-5.625,0,0) );

							ent.PlayEffect('summoning_burst');

							ent.PlayEffect('summoning_burst_2');

							ent.PlayEffect('crow_trail');

							ent.PlayEffect('feathers_fx');

							ent.AddTag('ACS_Owl_Wing_Entity');
					
							ent.AddTag('ACS_Wings_Entity');

							thePlayer.SetVisibility(false);
						}
						else if (ACS_JumpGlideForm() == 4)
						{
							thePlayer.SoundEvent("monster_dettlaff_monster_movement_wing_flap_long_massive");

							thePlayer.SoundEvent("monster_dettlaff_monster_movement_whoosh_large");

							//anchor_temp = (CEntityTemplate)LoadResource( "dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true );

							//GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( GetWitcherPlayer().GetBoneIndex( 'Trajectory' ), bonePosition, boneRotation );
							//wings_torso_anchor_1 = (CEntity)theGame.CreateEntity( anchor_temp, GetWitcherPlayer().GetWorldPosition() + Vector( 0, 0, -10 ) );
							//wings_torso_anchor_1.AddTag('ACS_Wings_Entity_Anchor');

							ent = theGame.CreateEntity( (CEntityTemplate)LoadResource( 

							"dlc\dlc_acs\data\entities\other\custom_wings\custom_wild_hunt_wings.w2ent"

							, true ), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
							
							ent.CreateAttachment( thePlayer, 'r_foot', Vector( 0.35, -0.85, -0.4 ), EulerAngles(-5,-60,-90) );

							ent.PlayEffect('ice_armor_no_smoke');
					
							ent.AddTag('ACS_Wings_Entity');

							thePlayer.AddTag('ACS_Wild_Hunt_Horse_Flying');

							AddTimer('Fleder_Glide_Fear', 0.001, true);
						}
						else if (ACS_JumpGlideForm() == 3)
						{
							/*
							thePlayer.StopEffect('glide_fx');
							thePlayer.PlayEffectSingle('glide_fx');	

							thePlayer.StopEffect( 'bruxa_dash_trails' );
							thePlayer.PlayEffectSingle( 'bruxa_dash_trails' );

							thePlayer.PlayEffectSingle('embers_particles_test');
							thePlayer.StopEffect('embers_particles_test');

							ent_1 = theGame.CreateEntity( (CEntityTemplate)LoadResource( 
							"dlc\dlc_acs\data\fx\slide_particles.w2ent"
							, true ), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );

							ent_1.CreateAttachment( thePlayer, 'blood_point', Vector( 0, 0, 0.75 ), EulerAngles(0,180,0) );

							ent_1.PlayEffectSingle('burn');
							ent_1.PlayEffectSingle('burn_2');
							ent_1.PlayEffectSingle('igni_reaction_djinn');

							ent_1.AddTag('ACS_Igni_Glide_Entity_R');


							ent_2 = theGame.CreateEntity( (CEntityTemplate)LoadResource( 
							"dlc\dlc_acs\data\fx\slide_particles.w2ent"
							, true ), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );

							ent_2.CreateAttachment( thePlayer, 'blood_point', Vector( 0, 0, -0.75 ), EulerAngles(0,180,0) );

							ent_2.PlayEffectSingle('burn');
							ent_2.PlayEffectSingle('burn_2');
							ent_2.PlayEffectSingle('igni_reaction_djinn');

							ent_2.AddTag('ACS_Igni_Glide_Entity_L');






							ent_3 = theGame.CreateEntity( (CEntityTemplate)LoadResource( 
							"dlc\dlc_acs\data\fx\slide_particles.w2ent"
							, true ), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );

							ent_3.CreateAttachment( thePlayer, 'blood_point', Vector( -1.6, -0.5, 0.25 ), EulerAngles(0,180,0) );

							ent_3.PlayEffectSingle('burn');
							ent_3.PlayEffectSingle('burn_2');
							ent_3.PlayEffectSingle('igni_reaction_djinn');

							ent_3.AddTag('ACS_Igni_Glide_Entity_R_Leg');


							ent_4 = theGame.CreateEntity( (CEntityTemplate)LoadResource( 
							"dlc\dlc_acs\data\fx\slide_particles.w2ent"
							, true ), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );

							ent_4.CreateAttachment( thePlayer, 'blood_point', Vector( -1.6, -0.5, -0.25 ), EulerAngles(0,180,0) );

							ent_4.PlayEffectSingle('burn');
							ent_4.PlayEffectSingle('burn_2');
							ent_4.PlayEffectSingle('igni_reaction_djinn');

							ent_4.AddTag('ACS_Igni_Glide_Entity_L_Leg');
							*/


							thePlayer.SoundEvent("monster_dettlaff_monster_movement_wing_flap_long_massive");

							thePlayer.SoundEvent("monster_dettlaff_monster_movement_whoosh_large");

							thePlayer.StopEffect('glide_fx');
							thePlayer.PlayEffectSingle('glide_fx');	

							thePlayer.StopEffect( 'bruxa_dash_trails' );
							thePlayer.PlayEffectSingle( 'bruxa_dash_trails' );

							thePlayer.PlayEffectSingle('embers_particles_test');
							thePlayer.StopEffect('embers_particles_test');

							//anchor_temp = (CEntityTemplate)LoadResource( "dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true );

							//GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( GetWitcherPlayer().GetBoneIndex( 'Trajectory' ), bonePosition, boneRotation );
							//wings_torso_anchor_1 = (CEntity)theGame.CreateEntity( anchor_temp, GetWitcherPlayer().GetWorldPosition() + Vector( 0, 0, -10 ) );
							//wings_torso_anchor_1.CreateAttachmentAtBoneWS( GetWitcherPlayer(), 'Trajectory', bonePosition, boneRotation );
							//wings_torso_anchor_1.AddTag('ACS_Wings_Entity_Anchor');

							ent = theGame.CreateEntity( (CEntityTemplate)LoadResource( 

							"dlc\dlc_acs\data\entities\other\custom_wings\custom_crow_wings_large.w2ent"

							, true ), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
							
							//ent.CreateAttachment( wings_torso_anchor_1, , Vector( 0, 0.25, 0.125 ), EulerAngles(10,0,0) );

							ent.CreateAttachment( thePlayer, 'blood_point', Vector( 0, 0.4, -0.03 ), EulerAngles(0,-90,90) );

							ent.PlayEffect('summoning_burst');

							ent.PlayEffect('summoning_burst_2');

							ent.PlayEffect('crow_trail');

							ent.PlayEffect('feathers_fx');

							ent.AddTag('ACS_Wings_Entity');

							if (RandF() < 0.5)
							{
								thePlayer.SoundEvent("monster_cockatrice_wing_flap");
							}
							else
							{
								thePlayer.SoundEvent("monster_griffon_wing_flap");
							}

							//AddTimer('Player_Wings_Sound', 0.75f, true);

							AddTimer('Fleder_Glide_Fear', 0.001, true);
						}
						
						thePlayer.EnableCollisions(false);
						thePlayer.EnableCharacterCollisions(false);

						thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 

						if (thePlayer.HasTag('ACS_Wild_Hunt_Horse_Flying'))
						{
							if (thePlayer.IsAnyWeaponHeld() && !thePlayer.IsWeaponHeld('fist'))
							{
								PlayerPlayAnimationGlide( 'horse_speed_walk_right_pose_loop' );

								((CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent')).FreezePoseFadeIn(0.75f);
							}
							else
							{
								PlayerPlayAnimationGlide( 'horse_gallop' );

								((CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent')).FreezePoseFadeIn(0.3f);
							}
						}
						else
						{
							PlayerPlayAnimationGlide( 'swim_underwater_f_fast_ACS' );

							((CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent')).FreezePoseFadeIn(0.875);
						}

						if (!thePlayer.HasTag('ACS_Wild_Hunt_Horse_Flying'))
						{
							if (!thePlayer.HasTag('ACS_HideWeaponOnDodge'))
							{
								thePlayer.AddTag('ACS_HideWeaponOnDodge');
							}

							if (!thePlayer.HasTag('aard_sword_equipped'))
							{
								ACS_Weapon_Invisible();
							}
						}

						FactsAdd("ACS_Is_Gliding", 1, -1);
					}
				}
			}
			else if ( IsReleased( action ) )
			{
				if (FactsQuerySum("ACS_Is_Gliding") > 0)
				{
					theGame.ReleaseNoSaveLock( ACS_Glide_Savelock_ID );

					thePlayer.UnblockAction( EIAB_Crossbow, 			'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_CallHorse,			'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_Signs, 				'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_DrawWeapon, 			'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_FastTravel, 			'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_Fists, 				'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_InteractionAction, 	'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_UsableItem,			'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_ThrowBomb,			'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_SwordAttack,			'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_LightAttacks,			'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_HeavyAttacks,			'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_SpecialAttackLight,	'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_SpecialAttackHeavy,	'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_Dodge,				'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_Roll,					'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_Parry,				'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_MeditationWaiting,	'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_OpenMeditation,		'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_RadialMenu,			'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_Movement,				'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_Interactions, 		'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_Jump, 				'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_QuickSlots, 			'ACS_Gliding');

					RemoveTimer('ACS_Gliding');

					thePlayer.StopEffect('glide_fx');
					thePlayer.PlayEffectSingle('glide_fx');
					thePlayer.StopEffect('glide_fx');

					thePlayer.StopEffect( 'bruxa_dash_trails' );
					thePlayer.PlayEffectSingle( 'bruxa_dash_trails' );
					thePlayer.StopEffect( 'bruxa_dash_trails' );

					thePlayer.PlayEffectSingle('embers_particles_test');
					thePlayer.StopEffect('embers_particles_test');

					thePlayer.EnableCollisions(true);
					thePlayer.EnableCharacterCollisions(true);

					thePlayer.SetImmortalityMode( AIM_None, AIC_Combat ); 

					thePlayer.SetVisibility( true );

					thePlayer.DestroyEffect('acs_glide_disappear');

					thePlayer.RemoveTag('ACS_Wild_Hunt_Horse_Flying');

					ACS_Wings_Entity_Anchor().Destroy();

					ACS_Wings_Entity().Destroy();

					ACS_Igni_Glide_Entity_R().Destroy();

					ACS_Igni_Glide_Entity_L().Destroy();

					ACS_Igni_Glide_Entity_L_Leg().Destroy();

					ACS_Igni_Glide_Entity_R_Leg().Destroy();

					RemoveTimer('Fleder_Glide_Fear');

					RemoveTimer('Player_Wings_Sound');

					((CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent')).UnfreezePoseFadeOut(0.1);

					((CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent')).UnfreezePose();

					if ( thePlayer.IsOnGround() )
					{
						if ( thePlayer.IsAnyWeaponHeld() )
						{
							if (thePlayer.IsWeaponHeld('fist') )
							{
								PlayerPlayAnimation( 'man_geralt_sword_dodge_roll_rp_f_01_fist' );
							}
							else
							{
								PlayerPlayAnimation( 'man_geralt_sword_dodge_roll_rp_f_01' );
							}
						}
						else
						{
							PlayerPlayAnimation( 'man_geralt_sword_dodge_roll_rp_f_01_fist' );
						}
					}
					else
					{
						PlayerPlayAnimation( 'ex_fall_start' );
					}

					thePlayer.SoundEvent("monster_dettlaff_monster_movement_wing_flap_long_hard");

					thePlayer.SoundEvent("monster_dettlaff_monster_movement_land");

					if ( thePlayer.HasTag('ACS_HideWeaponOnDodge') )
					{
						if (!thePlayer.HasTag('aard_sword_equipped'))
						{
							ACS_Weapon_Respawn();
						}
						
						thePlayer.RemoveTag('ACS_HideWeaponOnDodge');

						thePlayer.RemoveTag('ACS_HideWeaponOnDodge_Claw_Effect');
					}

					FactsRemove("ACS_Is_Gliding");
				}
			} 
		}
	}

	event OnWerewolfJump ( action : SInputAction )
	{
		var ent														: CEntity;
	
		if ( ACS_Enabled() )
		{
			if (ACS_Transformation_Activated_Check())
			{
				return false;
			}

			if ( IsPressed(action) )
			{

			}
			else if ( IsReleased( action ) )
			{
				
			}
		}
	}

	event OnCbtDodge( action : SInputAction )
	{
		if (ACS_Transformation_Activated_Check())
		{
			if( thePlayer.IsActionAllowed(EIAB_Dodge)  )
			{
				if (thePlayer.GetBIsInputAllowed())
				{
					if (ACS_Transformation_Werewolf_Check())
					{
						if ( IsPressed(action) )
						{
							ACS_Transformation_Werewolf_Dodge();
						}
					}

					if (ACS_Transformation_Vampiress_Check())
					{
						if ( IsPressed(action) )
						{
							if (!GetACSTransformationVampiress().HasTag('ACS_Vampiress_Sorceress_Mode'))
							{
								ACS_Transformation_Vampiress_Dodge_Melee();
							}
							else
							{
								ACS_Transformation_Vampiress_Dodge_Ranged();
							}
						}
					}

					if (ACS_Transformation_Vampire_Monster_Check())
					{
						if ( IsPressed(action) )
						{
							if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Ground_Mode'))
							{
								ACS_Transformation_Vampire_Monster_Teleport_Dodge();
							}
						}
					}

					if (ACS_Transformation_Red_Miasmal_Check())
					{
						if ( IsPressed(action) )
						{
							if (!thePlayer.IsInInterior())
							{
								ACS_Transformation_Red_Miasmal_Dodge();
							}
						}
					}

					if (ACS_Transformation_Sharley_Check())
					{
						if ( IsPressed(action) )
						{
							ACS_Transformation_Sharley_Dodge();
						}
					}

					if (ACS_Transformation_Black_Wolf_Check())
					{
						if ( IsPressed(action) )
						{
							ACS_Transformation_Black_Wolf_Dodge();
						}
					}
				}
			}

			return false;
		}

		altSignCastingThing();

		if(altSignCasting
		&& !theInput.LastUsedPCInput() && !thePlayer.IsCastingSign() && theInput.GetActionValue('CastSign') > 0.7f && !GetWitcherPlayer().IsCurrentSignChanneled())
		{
			//AltCastSign(ST_Quen);
			return false;
		}

		if( !thePlayer.IsActionAllowed(EIAB_Dodge)) 
		{
			return false;
		}

		if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');
		
		if ( theInput.LastUsedPCInput() )
		{		
			if ( IsPressed(action) )
			{
				Rage_Counter_Dodge_Manager(3);

				if ( ACS_Enabled() ) 
				{
					if( BruxaDashCallTime + DOUBLE_TAP_WINDOW_DODGE >= theGame.GetEngineTimeAsSeconds() )
					{
						BruxaDashDoubleTap = true;
					}
					else
					{
						BruxaDashDoubleTap = false;	
					}

					if
					(
					(theInput.IsActionPressed('Sprint') || thePlayer.GetIsSprinting())
					&& ACS_CombatJump_Enabled()
					)
					{
						action_interrupt_on_jump(); //ACS

						thePlayer.substateManager.QueueStateExternal('Jump');

						ACS_ExplorationDelayHack();
					}
					else
					{
						if (BruxaDashDoubleTap)
						{
							if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
							{
								if (ACS_BruxaLeapAttack_Enabled() && thePlayer.IsInCombat())
								{
									JumpAttackCombat();
								}
								else if ( ACS_BruxaDash_Enabled() )
								{
									BruxaDash_Combat();
								}
								else
								{
									if (thePlayer.HasTag('blood_sucking'))
									{
										bruxa_blood_suck_end_actual();
									}

									if (ACS_HoldToRoll_Enabled())
									{
										ACS_BruxaDodgeSlideBackInit();

										RemoveTimer('RollDelay');
										AddTimer('RollDelay', 0.75, false);
									}
									else
									{
										ACS_BruxaDodgeSlideBackInit();
									}
								}
							}
							else
							{
								if ( ACS_BruxaDash_Enabled() )
								{
									BruxaDash_Combat();
								}
								else
								{
									if (thePlayer.HasTag('blood_sucking'))
									{
										bruxa_blood_suck_end_actual();
									}

									if (ACS_HoldToRoll_Enabled())
									{
										ACS_BruxaDodgeSlideBackInit();

										RemoveTimer('RollDelay');
										AddTimer('RollDelay', 0.75, false);
									}
									else
									{
										ACS_BruxaDodgeSlideBackInit();
									}
								}
							}
						}
						else
						{
							if (thePlayer.HasTag('blood_sucking'))
							{
								bruxa_blood_suck_end_actual();
							}

							if (ACS_HoldToRoll_Enabled())
							{
								ACS_BruxaDodgeSlideBackInit();

								RemoveTimer('RollDelay');
								AddTimer('RollDelay', 0.75, false);
							}
							else
							{
								ACS_BruxaDodgeSlideBackInit();
							}
						}
					}

					BruxaDashCallTime = theGame.GetEngineTimeAsSeconds();

					return true;
				}
				else
				{
					thePlayer.EvadePressed(EBAT_Dodge);
				}
			}

			if (IsReleased( action ))
			{
				RemoveTimer('RollDelay');
			}
		}
		else if ( !theInput.LastUsedPCInput() )
		{
			if(altSignCasting && (thePlayer.IsCastingSign() || theInput.GetActionValue('CastSign') > 0.7f))
			{
				return false;
			}

			if (GetCastSignProcess())
			{
				return false;
			}

			if ( IsPressed(action) )
			{
				if(altSignCasting && !theInput.LastUsedPCInput() && theInput.GetActionValue('CastSign') > 0.7f)
				{
					
					
				}			
				else
				{
					Rage_Counter_Dodge_Manager(3);

					if ( ACS_Enabled() ) 
					{
						if (thePlayer.HasTag('blood_sucking'))
						{
							bruxa_blood_suck_end_actual();
						}

						if( BruxaDashCallTime + DOUBLE_TAP_WINDOW_DODGE >= theGame.GetEngineTimeAsSeconds() )
						{
							BruxaDashDoubleTap = true;
						}
						else
						{
							BruxaDashDoubleTap = false;	
						}

						if (BruxaDashDoubleTap)
						{
							if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
							{
								if (ACS_BruxaLeapAttack_Enabled() && thePlayer.IsInCombat())
								{
									JumpAttackCombat();
								}
								else if ( ACS_BruxaDash_Enabled() )
								{
									BruxaDash_Combat();
								}
								else
								{
									ACS_BruxaDodgeSlideBackInit();
								}
							}
							else
							{
								if ( ACS_BruxaDash_Enabled() )
								{
									BruxaDash_Combat();
								}
								else
								{
									ACS_BruxaDodgeSlideBackInit();
								}
							}
						}
						else
						{
							ACS_BruxaDodgeSlideBackInit();
						}
						
						BruxaDashCallTime = theGame.GetEngineTimeAsSeconds();

						return true;
					}
					else
					{
						thePlayer.EvadePressed(EBAT_Dodge);
					}
				}
			}
		}
	}

	timer function RollDelay( time : float , id : int )
	{
		ACS_Hold_To_Roll_Tutorial();
		ACS_RollInit();
	}

	event OnCbtRoll( action : SInputAction )
	{
		if (ACS_Transformation_Activated_Check())
		{
			if( thePlayer.IsActionAllowed(EIAB_Roll)  )
			{
				if (thePlayer.GetBIsInputAllowed())
				{
					if (ACS_Transformation_Werewolf_Check())
					{
						if ( IsPressed(action) )
						{
							ACS_Transformation_Werewolf_Dodge();
						}
					}

					if (ACS_Transformation_Vampiress_Check())
					{
						if ( IsPressed(action) )
						{
							if (!GetACSTransformationVampiress().HasTag('ACS_Vampiress_Sorceress_Mode'))
							{
								if (thePlayer.IsInInterior())
								{
									ACS_Transformation_Vampiress_Dodge_Melee();
								}
								else
								{
									ACS_Transformation_Vampiress_Roll_Melee();
								}
							}
							else
							{
								if (thePlayer.IsInInterior())
								{
									ACS_Transformation_Vampiress_Dodge_Ranged();
								}
								else
								{
									ACS_Transformation_Vampiress_Roll_Ranged();
								}
								
							}
						}
					}

					if (ACS_Transformation_Vampire_Monster_Check())
					{
						if ( IsPressed(action) )
						{
							if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Ground_Mode'))
							{
								ACS_Transformation_Vampire_Monster_Teleport_Dodge();
							}
						}
					}

					if (ACS_Transformation_Red_Miasmal_Check())
					{
						if ( IsPressed(action) )
						{
							if (!thePlayer.IsInInterior())
							{
								ACS_Transformation_Red_Miasmal_Dodge();
							}
						}
					}

					if (ACS_Transformation_Sharley_Check())
					{
						if ( IsPressed(action) )
						{
							ACS_Transformation_Sharley_Dodge();
						}
					}

					if (ACS_Transformation_Black_Wolf_Check())
					{
						if ( IsPressed(action) )
						{
							ACS_Transformation_Black_Wolf_Dodge();
						}
					}
				}
			}

			return false;
		}

		altSignCastingThing();

		if(altSignCasting
		&& !theInput.LastUsedPCInput() && !thePlayer.IsCastingSign() && theInput.GetActionValue('CastSign') > 0.7f && !GetWitcherPlayer().IsCurrentSignChanneled())
		{
			//CreateSignSymbol(action);
			//AltCastSign(ST_Aard);
			return false;
		}

		if( !thePlayer.IsActionAllowed(EIAB_Roll)) 
		{
			return false;
		}

		if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');
		
		if ( theInput.LastUsedPCInput() )
		{
			if ( IsPressed( action ) )
			{
				Rage_Counter_Dodge_Manager(3);

				if ( ACS_Enabled() ) 
				{
					if (thePlayer.HasTag('blood_sucking'))
					{
						bruxa_blood_suck_end_actual();
					}

					if( TeleportCallTime + DOUBLE_TAP_WINDOW_DODGE >= theGame.GetEngineTimeAsSeconds() )
					{
						TeleportDoubleTap = true;
					}
					else
					{
						TeleportDoubleTap = false;	
					}

					if
					(
					(theInput.IsActionPressed('Sprint') || thePlayer.GetIsSprinting())
					&& ACS_CombatJump_Enabled()
					)
					{
						action_interrupt_on_jump(); //ACS

						thePlayer.substateManager.QueueStateExternal('Jump');

						ACS_ExplorationDelayHack();
					}
					else
					{
						if (TeleportDoubleTap)
						{
							if (thePlayer.HasTag('blood_sucking'))
							{
								bruxa_blood_suck_end_actual();
							}

							if ( ACS_WildHuntBlink_Enabled() 
							|| ACS_GetItem_MageStaff() 
							|| ACS_Armor_Equipped_Check()
							|| ACS_WH_Armor_Equipped_Check()
							|| ACS_Eredin_Armor_Equipped_Check()
							|| ACS_Imlerith_Armor_Equipped_Check()
							|| ACS_Caranthir_Armor_Equipped_Check()
							|| ACS_VGX_Eredin_Armor_Equipped_Check()
							|| thePlayer.HasTag('vampire_claws_equipped')
							)
							{
								ACS_WildHuntBlinkInit();
							}
							else
							{
								if (ACS_HoldToRoll_Enabled())
								{
									ACS_BruxaDodgeSlideBackInit();

									RemoveTimer('RollDelay');
									AddTimer('RollDelay', 0.75, false);
								}
								else
								{
									ACS_RollInit();
								}
							}
						}
						else
						{
							if (ACS_HoldToRoll_Enabled())
							{
								ACS_BruxaDodgeSlideBackInit();

								RemoveTimer('RollDelay');
								AddTimer('RollDelay', 0.75, false);
							}
							else
							{
								ACS_RollInit();
							}
						}
					}

					TeleportCallTime = theGame.GetEngineTimeAsSeconds();

					return true;
				} //ACS
				else
				{
					thePlayer.EvadePressed(EBAT_Roll);
				}
			}

			if (IsReleased( action ))
			{
				RemoveTimer('RollDelay');
			}
		}
		else if ( !theInput.LastUsedPCInput() )
		{
			if(altSignCasting && (thePlayer.IsCastingSign() || theInput.GetActionValue('CastSign') > 0.7f))
			{
				return false;
			}

			if (GetCastSignProcess())
			{
				return false;
			}

			if ( IsPressed( action ) )
			{
				if(altSignCasting && theInput.IsActionPressed('CastSign'))
				{
					return false;					
				}
				else
				{
					Rage_Counter_Dodge_Manager(3);

					if ( ACS_Enabled() ) 
					{
						if (thePlayer.HasTag('blood_sucking'))
						{
							bruxa_blood_suck_end_actual();
						}

						if( TeleportCallTime + DOUBLE_TAP_WINDOW_DODGE >= theGame.GetEngineTimeAsSeconds() )
						{
							TeleportDoubleTap = true;
						}
						else
						{
							TeleportDoubleTap = false;	
						}

						if (TeleportDoubleTap)
						{
							if ( ACS_WildHuntBlink_Enabled() 
							|| ACS_GetItem_MageStaff() 
							|| ACS_Armor_Equipped_Check()
							|| ACS_WH_Armor_Equipped_Check()
							|| ACS_Eredin_Armor_Equipped_Check()
							|| ACS_Imlerith_Armor_Equipped_Check()
							|| ACS_Caranthir_Armor_Equipped_Check()
							|| ACS_VGX_Eredin_Armor_Equipped_Check()
							|| thePlayer.HasTag('vampire_claws_equipped')
							)
							{
								ACS_WildHuntBlinkInit();
							}
							else
							{
								ACS_RollInit();
							}
						}
						else
						{
							ACS_RollInit();
						}

						TeleportCallTime = theGame.GetEngineTimeAsSeconds();

						return true;
					} 
					else
					{
						thePlayer.StartDodgeTimer();
					}
				}
			}
			else if ( IsReleased( action ) )
			{
				if ( thePlayer.IsDodgeTimerRunning() )
				{
					thePlayer.StopDodgeTimer();

					if ( !thePlayer.IsInsideInteraction() )
					{
						thePlayer.EvadePressed(EBAT_Roll);
					}	
				}
			}
		}
	}


	event OnThrowBomb(action : SInputAction)
	{
		var selectedItemId : SItemUniqueId;

		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}
	
		selectedItemId = thePlayer.GetSelectedItemId();
		if(!thePlayer.inv.IsItemBomb(selectedItemId))
			return false;
		
		if( thePlayer.inv.SingletonItemGetAmmo(selectedItemId) == 0 && !thePlayer.inv.ItemHasTag(selectedItemId, 'ThrowingKnife'))
		{
			
			if(IsPressed(action))
			{			
				thePlayer.SoundEvent( "gui_ingame_low_stamina_warning" );
			}
			
			return false;
		}
		
		if ( IsReleased(action) )
		{
			if ( thePlayer.IsThrowHold() )
			{
				if ( thePlayer.playerAiming.GetAimedTarget() )
				{
					if ( thePlayer.AllowAttack( thePlayer.playerAiming.GetAimedTarget(), EBAT_ItemUse ) )
					{
						thePlayer.PushCombatActionOnBuffer( EBAT_ItemUse, BS_Released );
						thePlayer.ProcessCombatActionBuffer();
					}
					else
						thePlayer.BombThrowAbort();
				}
				else
				{
					thePlayer.PushCombatActionOnBuffer( EBAT_ItemUse, BS_Released );
					thePlayer.ProcessCombatActionBuffer();				
				}
				
				thePlayer.SetThrowHold( false );
	
				return true;
		
			}
			else
			{
				if(!thePlayer.IsActionAllowed(EIAB_ThrowBomb))
				{
					thePlayer.DisplayActionDisallowedHudMessage(EIAB_ThrowBomb);
					return false;
				}

				if ( thePlayer.IsHoldingItemInLHand() && !thePlayer.IsUsableItemLBlocked() )
				{
					thePlayer.SetPlayerActionToRestore ( PATR_ThrowBomb );
					thePlayer.OnUseSelectedItem( true );
					return true;
				}
				if(thePlayer.CanSetupCombatAction_Throw() && theInput.GetLastActivationTime( action.aName ) < 0.3f )	
				{
					
					thePlayer.SetupCombatAction( EBAT_ItemUse, BS_Pressed );
					return true;
				}		
			
				thePlayer.SetupCombatAction( EBAT_ItemUse, BS_Released );
				return true;
			}
		}
		
		return false;
	}
	
	event OnThrowBombHold(action : SInputAction)
	{
		var locks : array<SInputActionLock>;
		var ind : int;

		var selectedItemId : SItemUniqueId;

		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}
	
		selectedItemId = thePlayer.GetSelectedItemId();
		if(!thePlayer.inv.IsItemBomb(selectedItemId))
			return false;
		
		if( thePlayer.inv.SingletonItemGetAmmo(selectedItemId) == 0 && !thePlayer.inv.ItemHasTag(selectedItemId, 'ThrowingKnife'))
		{
			
			if(IsPressed(action))
			{			
				thePlayer.SoundEvent( "gui_ingame_low_stamina_warning" );
			}
			
			return false;
		}
			
		if( IsPressed(action) )
		{
			if(!thePlayer.IsActionAllowed(EIAB_ThrowBomb))
			{
				thePlayer.DisplayActionDisallowedHudMessage(EIAB_ThrowBomb);
				return false;
			}
			else if(GetWitcherPlayer().GetBombDelay(GetWitcherPlayer().GetItemSlot(selectedItemId)) > 0 )
			{
				
				return false;
			}
			if ( thePlayer.IsHoldingItemInLHand() && !thePlayer.IsUsableItemLBlocked() )
			{
				thePlayer.SetPlayerActionToRestore ( PATR_ThrowBomb );
				thePlayer.OnUseSelectedItem( true );
				return true;
			}
			if(thePlayer.CanSetupCombatAction_Throw() && theInput.GetLastActivationTime( action.aName ) < 0.3f )	
			{
				if( thePlayer.GetBIsCombatActionAllowed() )
				{
					thePlayer.PushCombatActionOnBuffer( EBAT_ItemUse, BS_Pressed );
					thePlayer.ProcessCombatActionBuffer();
				}
			}		
		
			
			
			locks = thePlayer.GetActionLocks(EIAB_ThrowBomb);
			ind = thePlayer.GetInputHandler().FindActionLockIndex(EIAB_ThrowBomb, 'BombThrow');
			if(ind >= 0)
				locks.Erase(ind);
			
			if(locks.Size() != 0)
				return false;
			
			thePlayer.SetThrowHold( true );
			return true;
		}

		return false;
	}
	
	event OnThrowBombAbort(action : SInputAction)
	{		
		if( IsPressed(action) )
		{	
			if (ACS_Transformation_Activated_Check())
			{
				return false;
			}

			thePlayer.BombThrowAbort();
		}
	}
	
	private var vACS_Shield_Summon 																											: cACS_Shield_Summon;

	function GetACSShieldClass() : cACS_Shield_Summon
	{
		vACS_Shield_Summon = new cACS_Shield_Summon in this; 

		return vACS_Shield_Summon;
	}

	timer function ACS_Player_Tentacle_Damage_Delay( time : float , id : int )
	{
		var actortarget						: CActor;
		var victims			 				: array<CActor>;
		var dmg								: W3DamageAction;
		var i								: int;
		var params 							: SCustomEffectParams;

		victims.Clear();

		victims = thePlayer.GetNPCsAndPlayersInCone(3, VecHeading(thePlayer.GetHeadingVector()), 35, 20, , FLAG_OnlyAliveActors + FLAG_Attitude_Hostile + FLAG_ExcludePlayer );

		if( victims.Size() > 0)
		{
			for( i = 0; i < victims.Size(); i += 1 )
			{
				actortarget = (CActor)victims[i];

				if (actortarget != thePlayer
				&& actortarget != GetACSTentacle_1()
				&& actortarget != GetACSTentacle_2()
				&& actortarget != GetACSTentacle_3()
				&& actortarget != GetACSTentacleAnchor()
				&& actortarget != GetACSNecrofiendTentacle_1()
				&& actortarget != GetACSNecrofiendTentacle_2()
				&& actortarget != GetACSNecrofiendTentacle_3()
				&& actortarget != GetACSNecrofiendTentacle_4()
				&& actortarget != GetACSNecrofiendTentacle_5()
				&& actortarget != GetACSNecrofiendTentacle_6()
				&& actortarget != GetACSNecrofiendTentacleAnchor()
				)
				{
					movementAdjustor = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

					ticket = movementAdjustor.GetRequest( 'ACS_Player_Tentacle_Hit_Rotate');
					movementAdjustor.CancelByName( 'ACS_Player_Tentacle_Hit_Rotate' );
					movementAdjustor.CancelAll();

					ticket = movementAdjustor.CreateNewRequest( 'ACS_Player_Tentacle_Hit_Rotate' );
					movementAdjustor.AdjustmentDuration( ticket, 0.1 );
					movementAdjustor.MaxRotationAdjustmentSpeed( ticket, 50000 );

					movementAdjustor.RotateTowards( ticket, thePlayer );

					actortarget.SoundEvent("cmb_play_hit_heavy");

					params.effectType = EET_Knockdown;
					params.creator = thePlayer;
					params.sourceName = "ACS_Tentacle_Knockdown";
					params.duration = 1;

					actortarget.AddEffectCustom( params );	

					params.effectType = EET_Poison;
					params.creator = thePlayer;
					params.sourceName = "ACS_Tentacle_Poison";
					params.duration = 1;

					actortarget.AddEffectCustom( params );	
				}
			}
		}
	}

	event OnCbtThrowItem( action : SInputAction )
	{			
		var isUsableItem, isCrossbow, isBomb, ret : bool;
		var itemId : SItemUniqueId;		

		if( ACS_EH_EX_Installed() 
		&& ACS_EH_EX_Enabled() )
		{
			if ( GetWitcherPlayer().IsItemEquippedByName('acs_babilu_item') )
			{
				if( IsPressed(action) )
				{
					ACS_GatesOfBabylon();
				}

				return false;
			}

			if ( GetWitcherPlayer().IsItemEquippedByName('acs_swordspikes_item') )
			{
				if( IsPressed(action))
				{
					if (!thePlayer.HasTag('ACS_BackSwords_Equipped'))
					{
						ACS_Swordsanoo_Normal();

						thePlayer.AddTag('ACS_BackSwords_Equipped');
					}
					else if (thePlayer.HasTag('ACS_BackSwords_Equipped'))
					{
						ACS_Swordsanoo_Destroy();

						thePlayer.RemoveTag('ACS_BackSwords_Equipped');
					}
				}

				return false;
			}
		}

		if ( GetWitcherPlayer().IsItemEquippedByName('acs_bow_item') )
		{
			return false;
		}

		if ( GetWitcherPlayer().IsItemEquippedByName('acs_crossbow_item') )
		{
			return false;
		}

		if ( GetWitcherPlayer().IsItemEquippedByName('acs_knife_thrower_item') )
		{
			if( IsPressed(action) )
			{
				geraltThrowKnife();
			}

			return false;
		}

		if ( GetWitcherPlayer().IsItemEquippedByName('acs_shades_summon_item') )
		{
			if( IsPressed(action))
			{
				PlayerPlayAnimation( 'man_geralt_yrden_ground');	
							
				ACS_Spawn_Shades();
			}

			return false;
		}

		if ( GetWitcherPlayer().IsItemEquippedByName('acs_beam_attack_item') )
		{
			if( IsPressed(action) && thePlayer.IsInCombat())
			{
				ACS_Beam_Attack();
			}

			return false;
		}

		if ( GetWitcherPlayer().IsItemEquippedByName('acs_sword_array_item') )
		{
			if( IsPressed(action) && thePlayer.IsInCombat())
			{
				ACS_Sword_Array();
			}

			return false;
		}

		if ( GetWitcherPlayer().IsItemEquippedByName('acs_shield_entity_item') )
		{
			if( IsPressed(action) && thePlayer.IsInCombat())
			{
				if (!thePlayer.HasTag('ACS_Shielded_Entity')
				)
				{
					GetACSShieldClass().Axii_Shield_Entity();
				}
				else
				{
					ACS_Axii_Shield_Entity_Destroy();
				}
			}

			return false;
		}

		if ( GetWitcherPlayer().IsItemEquippedByName('acs_quen_monster_item') )
		{
			if( IsPressed(action) && thePlayer.IsInCombat())
			{
				PlayerPlayAnimation( 'man_geralt_yrden_ground');	

				if (!thePlayer.HasTag('ACS_Quen_Monster_Summoned'))
				{
					GetACSShieldClass().Quen_Monster_Summon();
				}
				else
				{
					Quen_Monsters_Despawn();
				}
			}

			return false;
		}

		if ( GetWitcherPlayer().IsItemEquippedByName('acs_yrden_skele_item') )
		{
			if( IsPressed(action) && thePlayer.IsInCombat())
			{
				PlayerPlayAnimation( 'man_geralt_yrden_ground');	

				GetACSShieldClass().Yrden_Skele_Summon();
			}

			return false;
		}

		if ( GetWitcherPlayer().IsItemEquippedByName('acs_aard_pull_item') )
		{
			if( IsPressed(action) )
			{
				if (!thePlayer.HasTag('ACS_AardPull_Active') && thePlayer.IsInCombat())
				{
					PlayerPlayAnimation( 'man_geralt_yrden_ground');	

					GetACSShieldClass().Aard_Pull();

					AddTimer('ACS_Bats_Summon_Repeat', 0.5, true);
				}
				else if (thePlayer.HasTag('ACS_AardPull_Active'))
				{
					AardPull_Deactivate();
				}
			}

			return false;
		}

		if ( GetWitcherPlayer().IsItemEquippedByName('acs_bruxa_camo_item') )
		{
			if( IsPressed(action) )
			{
				if (!thePlayer.HasTag('ACS_Camo_Active'))
				{
					GetACSShieldClass().BruxaCamoDecoy();

					AddTimer('ACS_npc_fear_reaction', 0.875, true);
					AddTimer('ACS_Bruxa_Camo_Sonar_Timer', 2.5, true);
				}
				else if (thePlayer.HasTag('ACS_Camo_Active'))
				{
					Bruxa_Camo_Decoy_Deactivate();
				}
			}

			return false;
		}

		if ( GetWitcherPlayer().IsItemEquippedByName('acs_wraith_mode_item') )
		{
			if( IsPressed(action) )
			{
				if ( !thePlayer.HasTag('in_wraith') )
				{
					if (!thePlayer.IsInCombat()) 
					{
						WraithModeActivate();
					}
				}
				else
				{
					wraith_unfreeze_pose();
			
					WraithModeDeactivate();
				}
			}

			return false;
		}

		if ( GetWitcherPlayer().IsItemEquippedByName('acs_bruxa_bite_item') )
		{
			if( IsPressed(action) && thePlayer.IsInCombat())
			{
				if ( !thePlayer.HasTag('blood_sucking') )
				{
					ACS_BruxaBiteInit();
				}
				else
				{
					bruxa_blood_suck_end_actual();
				}
			}

			return false;
		}

		if ( GetWitcherPlayer().IsItemEquippedByName('acs_drowner_extract_item') )
		{
			if( IsPressed(action))
			{
				ACS_Player_Tentacles(1);

				RemoveTimer('ACS_Player_Tentacle_Damage_Delay');
				AddTimer('ACS_Player_Tentacle_Damage_Delay', 1, false);
			}

			return false;
		}

		thePlayer.UnblockAction( EIAB_Crossbow, 			'BombThrow');
		thePlayer.UnblockAction( EIAB_ThrowBomb, 			'BombThrow');

		action_interrupt();

		if (ACS_Transformation_Activated_Check())
		{
			if (ACS_Transformation_Vampiress_Check())
			{
				if (GetACSTransformationVampiress().HasTag('ACS_Vampiress_Sorceress_Mode'))
				{
					if( IsPressed(action))
					{
						if( theInput.GetActionValue('Sprint') > 0.7f )
						{
							ACS_Transformation_Vampiress_Toggle_Next_Special();
						}
						else
						{

							ACS_Transformation_Vampiress_Toggle_Previous_Special();
						}

						ACS_Transformation_Vampiress_Hand_FX_Refresh();
					}
				}

				if (GetACSTransformationVampiress().HasTag('ACS_Transformation_Bruxa'))
				{
					if( IsPressed(action))
					{
						ACS_Transformation_Vampiress_Bruxa_Scream();
					}
				}
			}

			if (ACS_Transformation_Vampire_Monster_Check())
			{
				if(theInput.GetActionValue('Sprint'))
				{
					return false;
				}

				if( IsPressed(action))
				{
					if (!GetACSTransformationVampireMonster().HasTag('ACS_Transformation_Vampire_Monster_Camo_Active'))
					{
						GetACSTransformationVampireMonster().DestroyEffect('disappear_');
						GetACSTransformationVampireMonster().PlayEffectSingle('disappear_');

						GetACSTransformationVampireMonster().AddTag('ACS_Transformation_Vampire_Monster_Camo_Active');
					}
				}

				if( IsReleased(action))
				{
					if (GetACSTransformationVampireMonster().HasTag('ACS_Transformation_Vampire_Monster_Camo_Active'))
					{
						GetACSTransformationVampireMonster().DestroyEffect('disappear_');

						GetACSTransformationVampireMonster().RemoveTag('ACS_Transformation_Vampire_Monster_Camo_Active');
					}
				}
			}

			return false;
		}
		
		
		if(thePlayer.IsInAir() || thePlayer.GetWeaponHolster().IsOnTheMiddleOfHolstering())
			return false;
			
		if( thePlayer.IsSwimming() && !thePlayer.OnCheckDiving() && thePlayer.GetCurrentStateName() != 'AimThrow' )
			return false;
				
		itemId = thePlayer.GetSelectedItemId();
		
		if(!thePlayer.inv.IsIdValid(itemId))
			return false;
		
		isCrossbow = thePlayer.inv.IsItemCrossbow(itemId);
		if(!isCrossbow)
		{
			isBomb = thePlayer.inv.IsItemBomb(itemId);
			if(!isBomb)
			{
				isUsableItem = true;
			}
		}
		
		if( isCrossbow )
		{
			if ( thePlayer.IsActionAllowed(EIAB_Crossbow) )
			{
				if( IsPressed(action))
				{
					if ( thePlayer.IsHoldingItemInLHand() && !thePlayer.IsUsableItemLBlocked() )
					{

						
						thePlayer.SetPlayerActionToRestore ( PATR_Crossbow );
						thePlayer.OnUseSelectedItem( true );
						ret = true;						
					}
					else if ( thePlayer.GetBIsInputAllowed() && !thePlayer.IsCurrentlyUsingItemL() )
					{
						thePlayer.SetIsAimingCrossbow( true );
						thePlayer.SetupCombatAction( EBAT_ItemUse, BS_Pressed );
						
						
						ret = true;
					}
				}
				else
				{

					if ( thePlayer.GetIsAimingCrossbow() && !thePlayer.IsCurrentlyUsingItemL() )
					{
						thePlayer.SetupCombatAction( EBAT_ItemUse, BS_Released );
						thePlayer.SetIsAimingCrossbow( false );
						ret = true;
					}
				}
			}
			else
			{
				if ( !thePlayer.IsInShallowWater() )
					thePlayer.DisplayActionDisallowedHudMessage(EIAB_Crossbow);				
			}

			if (ret = true )
			{
				action_interrupt();
			}
			
			if ( IsPressed(action) )
				thePlayer.AddTimer( 'IsItemUseInputHeld', 0.00001, true );
			else
				thePlayer.RemoveTimer('IsItemUseInputHeld');

			return ret;
		}
		else if(isBomb)
		{
			return OnThrowBomb(action);
		}
		else if(isUsableItem && !thePlayer.IsSwimming() )
		{
			if( thePlayer.IsActionAllowed(EIAB_UsableItem) )
			{
				if(IsPressed(action) && thePlayer.HasStaminaToUseAction(ESAT_UsableItem))
				{
					thePlayer.SetPlayerActionToRestore ( PATR_Default );
					thePlayer.OnUseSelectedItem();
					return true;
				}

			}
			else
			{
				thePlayer.DisplayActionDisallowedHudMessage(EIAB_UsableItem);
			}
		}
		
		return false;
	}
	
	event OnCbtThrowItemHold( action : SInputAction )
	{
		var isBomb, isCrossbow, isUsableItem : bool;
		var itemId : SItemUniqueId;

		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}
		
		
		if(thePlayer.IsInAir() || thePlayer.GetWeaponHolster().IsOnTheMiddleOfHolstering() )
			return false;
			
		if( thePlayer.IsSwimming() && !thePlayer.OnCheckDiving() && thePlayer.GetCurrentStateName() != 'AimThrow' )
			return false;			
				
		itemId = thePlayer.GetSelectedItemId();
		
		if(!thePlayer.inv.IsIdValid(itemId))
			return false;
		
		isCrossbow = thePlayer.inv.IsItemCrossbow(itemId);
		if(!isCrossbow)
		{
			isBomb = thePlayer.inv.IsItemBomb(itemId);
			if(isBomb)
			{
				return OnThrowBombHold(action);
			}
			else
			{
				isUsableItem = true;
			}
		}
		
		
		if(IsPressed(action))
		{
			if( isCrossbow && !thePlayer.IsActionAllowed(EIAB_Crossbow) )
			{
				thePlayer.DisplayActionDisallowedHudMessage(EIAB_Crossbow);
				return false;
			}
			
			if( isUsableItem)
			{
				if(!thePlayer.IsActionAllowed(EIAB_UsableItem))
				{
					thePlayer.DisplayActionDisallowedHudMessage(EIAB_UsableItem);
					return false;
				}
				else if(thePlayer.IsSwimming())
				{
					thePlayer.DisplayActionDisallowedHudMessage(EIAB_Undefined, false, false, true);
					return false;
				}
			}
		}
	
		if( IsPressed(action) )
		{
			thePlayer.SetThrowHold( true );
			return true;
		}
		else if( IsReleased(action) && thePlayer.IsThrowHold())
		{
			thePlayer.SetupCombatAction( EBAT_ItemUse, BS_Released );
			thePlayer.SetThrowHold( false );
			return true;
		}
		
		return false;
	}
	
	event OnCbtThrowCastAbort( action : SInputAction )
	{
		var player : W3PlayerWitcher;
		var throwStage : EThrowStage;

		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}
		
		if(thePlayer.inv.IsItemBomb(thePlayer.GetSelectedItemId()))
		{
			return OnThrowBombAbort(action);							
		}
		
		if( IsPressed(action) )
		{
			player = GetWitcherPlayer();
			if(player)
			{
				if( player.IsCastingSign() )
				{
					player.CastSignAbort();
				}
				else
				{
					if ( thePlayer.inv.IsItemCrossbow( thePlayer.inv.GetItemFromSlot( 'l_weapon' ) ) )
					{
						thePlayer.OnRangedForceHolster();
					}
					else
					{
						throwStage = (int)thePlayer.GetBehaviorVariable( 'throwStage', (int)TS_Stop);
						
						if(throwStage == TS_Start || throwStage == TS_Loop)
							player.ThrowingAbort();
					}
				}
			}
		}
	}

	event OnSpare( action : SInputAction )
	{

	}

	event OnSelectSign(action : SInputAction)
	{
		altSignCastingThing();

		if( IsPressed( action ) )
		{
			if(altSignCasting)
			{
				CreateSignSymbol(action);

				switch( action.aName )
				{				
					case 'SelectAard' :
						AltCastSign(ST_Aard);
						break;
					case 'SelectYrden' :
						AltCastSign(ST_Yrden);
						break;
					case 'SelectIgni' :
						AltCastSign(ST_Igni);
						break;
					case 'SelectQuen' :
						AltCastSign(ST_Quen);
						break;
					case 'SelectAxii' :
						AltCastSign(ST_Axii);
						break;
					default :
						break;
				}
			}
			
			else
			{
				switch( action.aName )
				{
					case 'SelectAard' :
						GetWitcherPlayer().SetEquippedSign(ST_Aard);
						break;
					case 'SelectYrden' :
						GetWitcherPlayer().SetEquippedSign(ST_Yrden);
						break;
					case 'SelectIgni' :
						GetWitcherPlayer().SetEquippedSign(ST_Igni);
						break;
					case 'SelectQuen' :
						GetWitcherPlayer().SetEquippedSign(ST_Quen);
						break;
					case 'SelectAxii' :
						GetWitcherPlayer().SetEquippedSign(ST_Axii);
						break;
					default :
						break;
				}
			}
		}

		if (IsReleased(action) && altSignCasting)
		{
			ACS_Sign_Icon().StopEffect('burn');
			ACS_Sign_Icon().StopEffect('burn_upgrade');
			ACS_Sign_Icon().StopEffect('burn_1');
			ACS_Sign_Icon().StopEffect('burn_upgrade_1');

			ACS_Sign_Icon().StopEffect('burn_red');
			ACS_Sign_Icon().StopEffect('burn_upgrade_red');
			ACS_Sign_Icon().StopEffect('burn_1_red');
			ACS_Sign_Icon().StopEffect('burn_upgrade_1_red');

			RemoveTimer('SignIconDestroyDelay');

			if ( GetWitcherPlayer().GetEquippedSign() == ST_Aard
			|| GetWitcherPlayer().GetEquippedSign() == ST_Yrden
			)
			{
				AddTimer('SignIconDestroyDelay', 0.5, false);
			}
			else
			{
				AddTimer('SignIconDestroyDelay', 0.25, false);
			}
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function SetPlayerTarget()
	{
		if (ACS_GetTargetMode() == 1 || ACS_Transformation_Activated_Check())
		{
			if ( thePlayer.IsHardLockEnabled() && thePlayer.GetTarget() )
			{
				actor = (CActor)( thePlayer.GetDisplayTarget() );	
			}
			else
			{
				thePlayer.FindMoveTarget();

				if ( thePlayer.moveTarget )
				{
					actor = (CActor)( thePlayer.moveTarget );	
				}	
			}
		}
		else
		{
			if ( thePlayer.IsHardLockEnabled() && thePlayer.GetTarget() )
			{
				actor = (CActor)( thePlayer.GetDisplayTarget() );	
			}
			else
			{
				if ( thePlayer.GetTarget() )
				{
					actor = (CActor)( thePlayer.GetTarget() );	
				}
			}
		}
	
		if( actor 
		&& ACS_AttitudeCheck ( actor )
		&& actor.IsInCombat()
		)
		{
			thePlayer.SetPlayerTarget( actor );

			thePlayer.SetPlayerCombatTarget( actor );

			thePlayer.UpdateDisplayTarget( true );

			//thePlayer.OnBecomeAwareAndCanAttack( actor );

			//thePlayer.OnCanFindPath( actor );

			//thePlayer.UpdateLookAtTarget();
		}
	}

	function ACS_INIT()
	{
		if (ACS_GetTargetMode() == 1)
		{
			if ( thePlayer.IsHardLockEnabled() && thePlayer.GetDisplayTarget() )
			{
				actor = (CActor)( thePlayer.GetDisplayTarget() );	
			}
			else
			{
				if (thePlayer.HasTag('acs_bow_active') || thePlayer.HasTag('acs_crossbow_active'))
				{
					actor = (CActor)( thePlayer.GetDisplayTarget() );	
				}
				else
				{
					if ( thePlayer.moveTarget )
					{
						actor = (CActor)( thePlayer.moveTarget );	
					}
				}
			}
		}
		else
		{
			if ( thePlayer.GetDisplayTarget() )
			{
				actor = (CActor)( thePlayer.GetDisplayTarget() );	
			}
		}

		targetDistance = VecDistanceSquared2D( thePlayer.GetWorldPosition(), actor.GetWorldPosition() ) ;
			
		dist = (((CMovingPhysicalAgentComponent)actor.GetMovingAgentComponent()).GetCapsuleRadius() 
		+ ((CMovingPhysicalAgentComponent)thePlayer.GetMovingAgentComponent()).GetCapsuleRadius()) * 1.25;
		
		distJump = (((CMovingPhysicalAgentComponent)actor.GetMovingAgentComponent()).GetCapsuleRadius() 
		+ ((CMovingPhysicalAgentComponent)thePlayer.GetMovingAgentComponent()).GetCapsuleRadius());
		
		distVampSpecialDash = (((CMovingPhysicalAgentComponent)actor.GetMovingAgentComponent()).GetCapsuleRadius() 
		+ ((CMovingPhysicalAgentComponent)thePlayer.GetMovingAgentComponent()).GetCapsuleRadius()) * 2;

		distClawWhirl = (((CMovingPhysicalAgentComponent)actor.GetMovingAgentComponent()).GetCapsuleRadius() 
		+ ((CMovingPhysicalAgentComponent)thePlayer.GetMovingAgentComponent()).GetCapsuleRadius()) * 1.5;

		distArmorSpecialDash = (((CMovingPhysicalAgentComponent)actor.GetMovingAgentComponent()).GetCapsuleRadius() * 2.5 
		+ ((CMovingPhysicalAgentComponent)thePlayer.GetMovingAgentComponent()).GetCapsuleRadius() * 2.5);
	
		movementAdjustor = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();
		
		movementAdjustor.CancelAll();
		
		movementAdjustor.CancelByName('ACS_Movement_Adjust');
		ticket = movementAdjustor.CreateNewRequest( 'ACS_Movement_Adjust' );
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if (thePlayer.HasTag('acs_bow_active') || thePlayer.HasTag('acs_crossbow_active'))
			{
				movementAdjustor.AdjustmentDuration( ticket, 0.125 );
			}
			else
			{
				if( targetDistance <= 3*3 ) 
				{
					movementAdjustor.AdjustmentDuration( ticket, 0.1 );
				}
				else if( targetDistance > 3 * 3 && targetDistance <= 4 * 4 ) 
				{
					movementAdjustor.AdjustmentDuration( ticket, 0.125 );
				}
				else
				{
					movementAdjustor.AdjustmentDuration( ticket, 0.25 );
				}
			}
		}
		else
		{
			movementAdjustor.AdjustmentDuration( ticket, 0.25 );
		}
		
		//movementAdjustor.ShouldStartAt(ticket, thePlayer.GetWorldPosition());
		movementAdjustor.MaxRotationAdjustmentSpeed( ticket, 50000 );
		movementAdjustor.MaxLocationAdjustmentSpeed( ticket, 50000 );

		if (ACS_Player_Scale() > 1)
		{
			dist -= ACS_Player_Scale() * 0.25;

			distJump -= ACS_Player_Scale() * 0.25;

			distVampSpecialDash -= ACS_Player_Scale() * 0.25;

			distClawWhirl -= ACS_Player_Scale() * 0.25;

			targetDistance += ACS_Player_Scale() * 0.25;
		}
		else if (ACS_Player_Scale() < 1)
		{
			dist += ACS_Player_Scale() * 0.5;

			distJump += ACS_Player_Scale() * 0.5;

			distVampSpecialDash += ACS_Player_Scale() * 0.5;

			distClawWhirl += ACS_Player_Scale() * 0.5;

			targetDistance -= ACS_Player_Scale() * 0.25;
		}

		if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');
	}

	function PlayerPlayAnimation(animation_name: name)
	{
		thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( animation_name, 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.75f) );
	}

	function PlayerPlayAnimationWraith(animation_name: name)
	{
		thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( animation_name, 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.15f, 1.0f) );
	}

	function PlayerPlayAnimationGlide(animation_name: name)
	{
		thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( animation_name, 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 1.0f) );
	}

	function PlayerPlayAnimationInterrupt(animation_name: name)
	{	
		thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( animation_name, 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(1.f, 1.f) );
	}
	
	function MovementAdjustWraith()
	{		
		ACS_INIT();
		
		movementAdjustor.AdjustLocationVertically( ticket, true );
		movementAdjustor.ScaleAnimationLocationVertically( ticket, true );
	}
	
	function MovementAdjustBruxaDash()
	{
		ACS_INIT();

		if (thePlayer.IsSwimming())
		{
			movementAdjustor.AdjustLocationVertically( ticket, true );
			movementAdjustor.ScaleAnimationLocationVertically( ticket, true );
		}

		movementAdjustor.AdjustmentDuration( ticket, 0.5 );

		if(!thePlayer.HasTag('ACS_Camo_Active'))
		{
			//thePlayer.StopAllEffects();
		}
		
		if (thePlayer.HasTag('ACS_ember_particles_active'))
		{
			thePlayer.StopEffect('embers_particles_test');
			thePlayer.PlayEffectSingle('embers_particles_test');
		}
	}
	
	function MovementAdjust()
	{
		ACS_INIT();

		if(!thePlayer.HasTag('ACS_Camo_Active'))
		{
			//thePlayer.StopAllEffects();
		}
		
		if (thePlayer.HasTag('ACS_ember_particles_active'))
		{
			thePlayer.StopEffect('embers_particles_test');
			thePlayer.PlayEffectSingle('embers_particles_test');
		}
	
		movementAdjustor.AdjustLocationVertically( ticket, true );
		movementAdjustor.ScaleAnimationLocationVertically( ticket, true );
	}

	function UpdateHeading()
	{
		//thePlayer.UpdateCustomRotationHeading('ACS_Movement_Regular', VecHeading(actor.GetWorldPosition() - thePlayer.GetWorldPosition()));
		//thePlayer.SetCustomRotation('ACS_Movement_Regular', VecHeading(actor.GetWorldPosition() - thePlayer.GetWorldPosition()), 0.f, 0.2f, false);
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function DeactivateThings()
	{
		if ( thePlayer.IsInCombat() || thePlayer.IsCombatMusicEnabled() )
		{
			if (!thePlayer.HasTag('blood_sucking'))
			{
				thePlayer.SetImmortalityMode( AIM_None, AIC_Combat ); 

				thePlayer.SetCanPlayHitAnim(true); 
				
				thePlayer.EnableCharacterCollisions(true); 
				if( thePlayer.IsAlive() && thePlayer.IsInCombat() ){ thePlayer.SetVisibility( true ); }		 
				thePlayer.RemoveBuffImmunity_AllNegative('acs_dodge'); 
				thePlayer.RemoveBuffImmunity_AllNegative('acs_finisher');
				thePlayer.SetIsCurrentlyDodging(false);

				if (thePlayer.HasTag('ACS_HideWeaponOnDodge') 
				//&& !thePlayer.HasTag('blood_sucking')
				)
				{
					if (!thePlayer.HasTag('aard_sword_equipped'))
					{
						ACS_Weapon_Respawn();
					}

					thePlayer.RemoveTag('ACS_HideWeaponOnDodge');

					thePlayer.RemoveTag('ACS_HideWeaponOnDodge_Claw_Effect');
				}
			}
		}

		thePlayer.RemoveTimer('curio_script_watcher_whirl');

		thePlayer.UnblockAction(EIAB_SpecialAttackLight, 'curio_nowhirl_weapons');

		RemoveBlindnessHack();

		sword_destroy();

		if ( !thePlayer.HasTag('axii_sword_equipped') || !thePlayer.IsGuarded() )
		{
			RemoveTimer('ACS_Shield_Spawn_Delay');

			ACS_Axii_Shield_Destroy_IMMEDIATE();
		}
		
		if ( !thePlayer.HasTag('vampire_claws_equipped') || !thePlayer.HasTag('ACS_Camo_Active') )
		{
			Bruxa_Camo_Decoy_Deactivate();
		}

		thePlayer.DestroyEffect('mind_control');
	}

	function DeactivateThings_BruxaDash()
	{
		camera = (CCustomCamera)theCamera.GetTopmostCameraObject();

		camera.StopAnimation('camera_shake_loop_lvl1_1');

		theGame.GetGameCamera().StopAnimation( 'camera_shake_loop_lvl1_1' );

		camera.StopAnimation('camera_shake_loop_lvl1_5');

		theGame.GetGameCamera().StopAnimation( 'camera_shake_loop_lvl1_5' );

		if (thePlayer.IsInCombat() || thePlayer.IsCombatMusicEnabled() )
		{
			if (!thePlayer.HasTag('blood_sucking'))
			{
				if( thePlayer.IsAlive() && thePlayer.IsInCombat() ){ thePlayer.SetVisibility( true ); }		
			}
		}

		thePlayer.RemoveTimer('curio_script_watcher_whirl');

		thePlayer.UnblockAction(EIAB_SpecialAttackLight, 'curio_nowhirl_weapons');

		

		sword_destroy();

		if ( !thePlayer.HasTag('axii_sword_equipped') || !thePlayer.IsGuarded() )
		{
			RemoveTimer('ACS_Shield_Spawn_Delay');

			ACS_Axii_Shield_Destroy_IMMEDIATE();
		}

		if ( !thePlayer.HasTag('vampire_claws_equipped') || !thePlayer.HasTag('ACS_Camo_Active') )
		{
			Bruxa_Camo_Decoy_Deactivate();
		}

		thePlayer.DestroyEffect('mind_control');
	}

	function action_interrupt()
	{
		if ( thePlayer.HasTag('ACS_HideWeaponOnDodge') 
		//&& !thePlayer.HasTag('blood_sucking')
		)
		{
			if (!thePlayer.HasTag('aard_sword_equipped'))
			{
				ACS_Weapon_Respawn();
			}
			
			thePlayer.RemoveTag('ACS_HideWeaponOnDodge');

			thePlayer.RemoveTag('ACS_HideWeaponOnDodge_Claw_Effect');
		}

		//thePlayer.RaiseEvent( 'AttackInterrupt' );

		//if (thePlayer.IsInCombat())
		//{
			if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}

			movementAdjustor = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

			movementAdjustor.CancelAll();

			ticket = movementAdjustor.CreateNewRequest( 'ACS_Action_Interrupt_Adjust' );

			actor = (CActor)( thePlayer.GetTarget() );
				
			movementAdjustor.AdjustmentDuration( ticket, 0.25 );

			movementAdjustor.ShouldStartAt(ticket, thePlayer.GetWorldPosition());
			movementAdjustor.MaxRotationAdjustmentSpeed( ticket, 50000 );
			movementAdjustor.MaxLocationAdjustmentSpeed( ticket, 50000 );

			if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
			{	
				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
					}
				}
			}

			if (thePlayer.IsAlive() && !thePlayer.HasTag('igni_sword_equipped') && !thePlayer.HasTag('igni_secondary_sword_equipped') )
			{
				PlayerPlayAnimationInterrupt( '' );
			}
			
			if( !thePlayer.HasTag('axii_sword_equipped') && !thePlayer.IsGuarded() )
			{
				//if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );}
			}
		//}
	}

	function action_interrupt_with_igni_sword()
	{
		if ( thePlayer.HasTag('ACS_HideWeaponOnDodge') 
		//&& !thePlayer.HasTag('blood_sucking')
		)
		{
			if (!thePlayer.HasTag('aard_sword_equipped'))
			{
				ACS_Weapon_Respawn();
			}
			
			thePlayer.RemoveTag('ACS_HideWeaponOnDodge');

			thePlayer.RemoveTag('ACS_HideWeaponOnDodge_Claw_Effect');
		}

		if( thePlayer.IsAlive()) 
		{
			thePlayer.ClearAnimationSpeedMultipliers();

			PlayerPlayAnimationInterrupt( '' );
		}
	}

	function action_interrupt_on_jump()
	{
		if (thePlayer.IsAlive() 
		&& !thePlayer.IsInAir()
		)
		{
			if (thePlayer.HasTag('ACS_Size_Adjusted'))
			{
				Grow_Geralt_Immediate();

				thePlayer.RemoveTag('ACS_Size_Adjusted');
			}

			if ( thePlayer.HasTag('ACS_HideWeaponOnDodge') 
			//&& !thePlayer.HasTag('blood_sucking')
			)
			{
				if (!thePlayer.HasTag('aard_sword_equipped'))
				{
					ACS_Weapon_Respawn();
				}
				
				thePlayer.RemoveTag('ACS_HideWeaponOnDodge');

				thePlayer.RemoveTag('ACS_HideWeaponOnDodge_Claw_Effect');
			}
			
			if (!ACS_W3EE_Installed() && !ACS_W3EE_Enabled())
			{
				movementAdjustor = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();
				movementAdjustor.CancelAll();
				thePlayer.ClearAnimationSpeedMultipliers();
				PlayerPlayAnimationInterrupt( '' );
			}
			else
			{
				if (ACS_CombatToExplorationCheck()
					&& !thePlayer.IsInCombat())
				{
					movementAdjustor = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();
					movementAdjustor.CancelAll();
					thePlayer.ClearAnimationSpeedMultipliers();
					PlayerPlayAnimationInterrupt( '' );
				}
			}
		}
	}

	function action_interrupt_on_movement()
	{
		if ( thePlayer.HasTag('ACS_HideWeaponOnDodge') 
		&& !thePlayer.HasTag('blood_sucking')
		)
		{
			if (!thePlayer.HasTag('aard_sword_equipped'))
			{
				ACS_Weapon_Respawn();
			}
			
			thePlayer.RemoveTag('ACS_HideWeaponOnDodge');

			thePlayer.RemoveTag('ACS_HideWeaponOnDodge_Claw_Effect');
		}

		if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}

		movementAdjustor = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		movementAdjustor.CancelAll();

		ticket = movementAdjustor.CreateNewRequest( 'ACS_Action_Interrupt_On_Movement_Adjust' );

		actor = (CActor)( thePlayer.GetTarget() );
			
		movementAdjustor.AdjustmentDuration( ticket, 0.25 );

		movementAdjustor.ShouldStartAt(ticket, thePlayer.GetWorldPosition());
		movementAdjustor.MaxRotationAdjustmentSpeed( ticket, 50000 );
		movementAdjustor.MaxLocationAdjustmentSpeed( ticket, 50000 );

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
		}

		if (thePlayer.IsAlive())
		{
			PlayerPlayAnimationInterrupt( '' );
		}

		if( !thePlayer.HasTag('axii_sword_equipped') && !thePlayer.IsGuarded() )
		{
			//if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );}
		}

		thePlayer.RemoveTag('ACS_Special_Dodge');
	}

	function finisherUnblockAction()
	{
		thePlayer.BlockAllActions( 'ACS_Finisher_Action_Block', false );	
		thePlayer.BlockAllActions( 'Mutation11', false );

		thePlayer.SetImmortalityMode( AIM_None, AIC_Combat ); 
		thePlayer.SetCanPlayHitAnim(true);
		//thePlayer.EnableCharacterCollisions(true); 
		thePlayer.RemoveBuffImmunity_AllNegative('ACS_Finisher_Immune_Negative'); 
		thePlayer.RemoveBuffImmunity_AllCritical('ACS_Finisher_Immune_Critical'); 

		if ( theGame.GetDifficultyLevel() == EDM_Hardcore)
		{
			ACS_FinisherHeal();
		}

		//ResetInteractionPriority();

		thePlayer.RemoveTag('ACS_IsPerformingFinisher');
	}

	function ACS_PerformFinisher(combatTarget : CActor)
	{
		var finisher_anim_names												: array< name >;

		//combatTarget = thePlayer.GetTarget();

		if(  thePlayer.IsDoingSpecialAttack( false ) )
		{
			return;
		}

		finisherDist = 2.75f;

		if (ACS_Player_Scale() > 1)
		{
			finisherDist += ACS_Player_Scale() * 0.75;
		}

		if( 
		combatTarget 
		&& thePlayer.IsInCombat() 
		&& !thePlayer.HasTag('ACS_IsPerformingFinisher')
		&& VecDistanceSquared2D( thePlayer.GetWorldPosition(), combatTarget.GetNearestPointInBothPersonalSpaces( thePlayer.GetWorldPosition() ) ) < finisherDist * finisherDist
		)
		{
			if ( thePlayer.IsAnyWeaponHeld() )
			{
				thePlayer.RemoveTag('ACS_Manual_Combat_Control');

				if (thePlayer.IsWeaponHeld('fist') )
				{
					if (combatTarget.IsHuman() && combatTarget.IsMan())
					{
						if (combatTarget.HasTag('ACS_Final_Fear_Stack'))
						{
							combatTarget.RemoveTag('ACS_Final_Fear_Stack');
							
							ACS_SetupSyncAnimInternalHuman('man_trample', thePlayer, combatTarget );
						}
						else
						{
							ACS_SetupSyncAnimInternalHuman('man_finisher_head', thePlayer, combatTarget );
						}			

						return;
					}
					else
					{
						
					}

					return;
				}
				else if (!thePlayer.IsWeaponHeld('fist') )
				{
					if (combatTarget.HasTag('ACS_Final_Fear_Stack') && combatTarget.IsHuman())
					{
						combatTarget.RemoveTag('ACS_Final_Fear_Stack');

						if (combatTarget.HasTag('ACS_Scared_On_Ground'))
						{
							ACS_SetupSyncAnimInternalHuman('man_ger_crawl_finish', thePlayer, combatTarget );
						}
						else
						{
							return;
						}

						return;
					}
					else
					{
						finisher_anim_names.Clear();

						if (combatTarget.IsHuman())
						{
							if (ACS_CustomFinishersEnabled())
							{
								ACS_Finisher_Tutorial();

								if (CustomFinishersBindTrigger(ACS_GetFinishersTorsoBind()))
								{
									finisher_anim_names.PushBack('man_finisher_dlc_torso_rp');
									finisher_anim_names.PushBack('man_finisher_dlc_torso_lp');

									ACS_Human_Death_Explode(combatTarget, combatTarget.GetWorldPosition(), 1);
								}

								if (CustomFinishersBindTrigger(ACS_GetFinishersStabBind()))
								{
									finisher_anim_names.PushBack('man_finisher_04_lp');
									finisher_anim_names.PushBack('man_finisher_06_lp');
									finisher_anim_names.PushBack('man_finisher_03_rp');
									finisher_anim_names.PushBack('man_finisher_05_rp');
								}

								if (CustomFinishersBindTrigger(ACS_GetFinishersNeckBind()))
								{
									finisher_anim_names.PushBack('man_finisher_dlc_neck_rp');
									finisher_anim_names.PushBack('man_finisher_08_lp');
								}

								if (CustomFinishersBindTrigger(ACS_GetFinishersHeadLeftBind()))
								{
									finisher_anim_names.PushBack('man_finisher_02_lp');
									finisher_anim_names.PushBack('man_finisher_07_lp');
								}

								if (CustomFinishersBindTrigger(ACS_GetFinishersHeadRightBind()))
								{
									finisher_anim_names.PushBack('man_finisher_01_rp');
									finisher_anim_names.PushBack('man_finisher_dlc_head_rp');
								}

								if (CustomFinishersBindTrigger(ACS_GetFinishersArmLeftBind()))
								{
									finisher_anim_names.PushBack('man_finisher_dlc_arm_lp');
								}

								if (CustomFinishersBindTrigger(ACS_GetFinishersArmRightBind()))
								{
									finisher_anim_names.PushBack('man_finisher_dlc_arm_rp');
								}

								if (CustomFinishersBindTrigger(ACS_GetFinishersLegLeftBind()))
								{
									finisher_anim_names.PushBack('man_finisher_dlc_legs_lp');
								}

								if (CustomFinishersBindTrigger(ACS_GetFinishersLegRightBind()))
								{
									finisher_anim_names.PushBack('man_finisher_dlc_legs_rp');
								}
							}
							else
							{
								finisher_anim_names.PushBack('man_finisher_02_lp');
								finisher_anim_names.PushBack('man_finisher_07_lp');
								finisher_anim_names.PushBack('man_finisher_08_lp');
								finisher_anim_names.PushBack('man_finisher_04_lp');
								finisher_anim_names.PushBack('man_finisher_06_lp');
								finisher_anim_names.PushBack('man_finisher_01_rp');
								finisher_anim_names.PushBack('man_finisher_03_rp');
								finisher_anim_names.PushBack('man_finisher_05_rp');
								finisher_anim_names.PushBack('man_finisher_dlc_arm_lp');
								finisher_anim_names.PushBack('man_finisher_dlc_legs_lp');
								finisher_anim_names.PushBack('man_finisher_dlc_torso_lp');
								finisher_anim_names.PushBack('man_finisher_dlc_arm_rp');
								finisher_anim_names.PushBack('man_finisher_dlc_legs_rp');
								finisher_anim_names.PushBack('man_finisher_dlc_torso_rp');
								finisher_anim_names.PushBack('man_finisher_dlc_head_rp');
								finisher_anim_names.PushBack('man_finisher_dlc_neck_rp');
							}

							ACS_SetupSyncAnimInternalHuman(finisher_anim_names[RandRange(finisher_anim_names.Size())], thePlayer, combatTarget );

							return;
						}
						else
						{
							if (
							combatTarget.HasAbility('mon_siren_base')
							|| combatTarget.HasAbility('mon_nekker_base')
							|| combatTarget.HasAbility('mon_drowner_base')
							|| combatTarget.HasAbility('mon_ghoul_base')
							|| combatTarget.HasAbility('mon_gravehag_base')
							|| combatTarget.HasAbility('mon_harpy_base')
							|| combatTarget.HasAbility('mon_boar_base')
							|| combatTarget.HasAbility('mon_werewolf_base')
							|| combatTarget.HasAbility('mon_basilisk')
							|| combatTarget.HasAbility('mon_wyvern_base')
							|| combatTarget.HasAbility('mon_draco_base')
							|| combatTarget.HasAbility('mon_wild_hunt_default')
							|| combatTarget.HasAbility('mon_troll_base')
							|| combatTarget.HasAbility('mon_endriaga_base')
							|| combatTarget.HasAbility('mon_arachas_base')
							|| combatTarget.HasAbility('mon_kikimore_base')
							|| combatTarget.HasAbility('mon_black_spider_base')
							|| combatTarget.HasAbility('mon_black_spider_ep2_base')
							|| combatTarget.HasAbility('mon_bies_base')
							|| combatTarget.HasAbility('mon_bruxa_base')
							)
							{
								finisher_anim_names.PushBack('monster_slice_finisher');
							}
							else if (
							combatTarget.HasAbility('mon_wolf_base') 
							|| combatTarget.HasAbility('mon_wolf_summon_were')
							|| (combatTarget.HasAbility('mon_gryphon_base') && !combatTarget.HasAbility('mon_basilisk'))
							)
							{
								finisher_anim_names.PushBack('monster_stab_finisher');
							} 
							else
							{
								return;
							}

							ACS_SetupSyncAnimInternalMonster(finisher_anim_names[RandRange(finisher_anim_names.Size())], thePlayer, combatTarget );
						}
					}
				}
				else
				{
					return;
				}
			}
			else
			{
				return;
			}
		}
	}

	function ACSGetActorPosition( ent : CEntity ) : Vector
	{
		var pos 			: Vector;
		var actor			: CActor;
		var torsoBoneIndex	: int;
	
		pos = ent.GetWorldPosition();
		actor = (CActor)ent;
		if ( actor )
		{
			torsoBoneIndex = actor.GetTorsoBoneIndex();
			if ( torsoBoneIndex != -1 )
			{
				pos = MatrixGetTranslation( actor.GetBoneWorldMatrixByIndex( torsoBoneIndex ) );
			}
			else
			{
				pos = actor.GetWorldPosition();
			}
		}
		
		return pos;	
	}

	private function ProcessFinisherCameraAnimName( finisherAnimName : name ) : name
	{
		var camera 							: CCustomCamera;
		var playerToCamHeading 				: float;
		var playerTocamAnimInitialHeading 	: float;
		var angleDiffs						: array<float>;
		var i 								: int;	
		var finisherCameraAnimName			: name;

		camera = theGame.GetGameCamera();
		
		playerToCamHeading = VecHeading( camera.GetWorldPosition() - thePlayer.GetWorldPosition() ); 
		playerTocamAnimInitialHeading = thePlayer.GetHeading();
		
		for ( i = 0; i < 4; i += 1 )
		{
			angleDiffs.PushBack( AbsF( AngleDistance( playerToCamHeading, playerTocamAnimInitialHeading ) ) );
			playerTocamAnimInitialHeading += 90.f;
		}
		
		i = ArrayFindMinF( angleDiffs );	
		
		if ( i >= 3 )
		{
			switch ( finisherAnimName )
			{
				case 'man_finisher_02_lp':	finisherCameraAnimName = 'man_finisher_02_lp_camera_right'; break;
				case 'man_finisher_04_lp':	finisherCameraAnimName ='man_finisher_04_lp_camera_right'; break;
				case 'man_finisher_06_lp':	finisherCameraAnimName = 'man_finisher_06_lp_camera_right'; break;
				case 'man_finisher_07_lp':	finisherCameraAnimName = 'man_finisher_07_lp_camera_right'; break;
				case 'man_finisher_08_lp':	finisherCameraAnimName = 'man_finisher_08_lp_camera_right'; break;
				case 'man_finisher_dlc_arm_lp':	finisherCameraAnimName = 'man_finisher_dlc_arm_lp_camera_right'; break;
				case 'man_finisher_dlc_legs_lp':	finisherCameraAnimName = 'man_finisher_dlc_legs_lp_camera_right'; break;
				case 'man_finisher_dlc_torso_lp':	finisherCameraAnimName = 'man_finisher_dlc_torso_lp_camera_right'; break;

				case 'man_finisher_01_rp':	finisherCameraAnimName = 'man_finisher_01_rp_camera_right'; break;
				case 'man_finisher_03_rp':	finisherCameraAnimName = 'man_finisher_03_rp_camera_right'; break;
				case 'man_finisher_05_rp':	finisherCameraAnimName = 'man_finisher_05_rp_camera_right'; break;

				case 'man_finisher_dlc_arm_rp':	finisherCameraAnimName = 'man_finisher_dlc_arm_rp_camera_right'; break;
				case 'man_finisher_dlc_legs_rp':	finisherCameraAnimName = 'man_finisher_dlc_legs_rp_camera_right'; break;
				case 'man_finisher_dlc_torso_rp':	finisherCameraAnimName = 'man_finisher_dlc_torso_rp_camera_right'; break;
				case 'man_finisher_dlc_head_rp':	finisherCameraAnimName = 'man_finisher_dlc_head_rp_camera_right'; break;
				case 'man_finisher_dlc_neck_rp':	finisherCameraAnimName = 'man_finisher_dlc_neck_rp_camera_right'; break;

				case 'man_finisher_head_01_lp_ACS':	finisherCameraAnimName ='man_finisher_04_lp_camera_right'; break;
				case 'man_finisher_head_01_rp_ACS':	finisherCameraAnimName = 'man_finisher_03_rp_camera_right'; break;

				default : finisherCameraAnimName = 'man_finisher_02_lp_camera_right'; break;
			}
		}
		else if  ( i >= 2 )
		{
			switch ( finisherAnimName )
			{
				case 'man_finisher_02_lp':	finisherCameraAnimName = 'man_finisher_02_lp_camera_back'; break;
				case 'man_finisher_04_lp':	finisherCameraAnimName = 'man_finisher_04_lp_camera_back'; break;
				case 'man_finisher_06_lp':	finisherCameraAnimName = 'man_finisher_06_lp_camera_back'; break;
				case 'man_finisher_07_lp':	finisherCameraAnimName = 'man_finisher_07_lp_camera_back'; break;
				case 'man_finisher_08_lp':	finisherCameraAnimName = 'man_finisher_08_lp_camera_back'; break;
				case 'man_finisher_dlc_arm_lp':	finisherCameraAnimName = 'man_finisher_dlc_arm_lp_camera_back'; break;
				case 'man_finisher_dlc_legs_lp':	finisherCameraAnimName = 'man_finisher_dlc_legs_lp_camera_back'; break;
				case 'man_finisher_dlc_torso_lp':	finisherCameraAnimName = 'man_finisher_dlc_torso_lp_camera_back'; break;

				case 'man_finisher_01_rp':	finisherCameraAnimName = 'man_finisher_01_rp_camera_back'; break;
				case 'man_finisher_03_rp':	finisherCameraAnimName = 'man_finisher_03_rp_camera_back'; break;
				case 'man_finisher_05_rp':	finisherCameraAnimName = 'man_finisher_05_rp_camera_back'; break;

				case 'man_finisher_dlc_arm_rp':	finisherCameraAnimName = 'man_finisher_dlc_arm_rp_camera_back'; break;
				case 'man_finisher_dlc_legs_rp':	finisherCameraAnimName = 'man_finisher_dlc_legs_rp_camera_back'; break;
				case 'man_finisher_dlc_torso_rp':	finisherCameraAnimName = 'man_finisher_dlc_torso_rp_camera_back'; break;
				case 'man_finisher_dlc_head_rp':	finisherCameraAnimName = 'man_finisher_dlc_head_rp_camera_back'; break;
				case 'man_finisher_dlc_neck_rp':	finisherCameraAnimName = 'man_finisher_dlc_neck_rp_camera_back'; break;

				case 'man_finisher_head_01_lp_ACS':	finisherCameraAnimName ='man_finisher_04_lp_camera_back'; break;
				case 'man_finisher_head_01_rp_ACS':	finisherCameraAnimName = 'man_finisher_03_rp_camera_back'; break;

				default : finisherCameraAnimName = 'man_finisher_02_lp_camera_back'; break;
			}
		}
		else if  ( i >= 1 )
		{
			switch ( finisherAnimName )
			{
				case 'man_finisher_02_lp':	finisherCameraAnimName = 'man_finisher_02_lp_camera_left'; break;
				case 'man_finisher_04_lp':	finisherCameraAnimName = 'man_finisher_04_lp_camera_left'; break;
				case 'man_finisher_06_lp':	finisherCameraAnimName = 'man_finisher_06_lp_camera_left'; break;
				case 'man_finisher_07_lp':	finisherCameraAnimName = 'man_finisher_07_lp_camera_left'; break;
				case 'man_finisher_08_lp':	finisherCameraAnimName = 'man_finisher_08_lp_camera_left'; break;
				case 'man_finisher_dlc_arm_lp':	finisherCameraAnimName = 'man_finisher_dlc_arm_lp_camera_left'; break;
				case 'man_finisher_dlc_legs_lp':	finisherCameraAnimName = 'man_finisher_dlc_legs_lp_camera_left'; break;
				case 'man_finisher_dlc_torso_lp':	finisherCameraAnimName = 'man_finisher_dlc_torso_lp_camera_left'; break;

				case 'man_finisher_01_rp':	finisherCameraAnimName = 'man_finisher_01_rp_camera_left'; break;
				case 'man_finisher_03_rp':	finisherCameraAnimName = 'man_finisher_03_rp_camera_left'; break;
				case 'man_finisher_05_rp':	finisherCameraAnimName = 'man_finisher_05_rp_camera_left'; break;

				case 'man_finisher_dlc_arm_rp':	finisherCameraAnimName = 'man_finisher_dlc_arm_rp_camera_left'; break;
				case 'man_finisher_dlc_legs_rp':	finisherCameraAnimName = 'man_finisher_dlc_legs_rp_camera_left'; break;
				case 'man_finisher_dlc_torso_rp':	finisherCameraAnimName = 'man_finisher_dlc_torso_rp_camera_left'; break;
				case 'man_finisher_dlc_head_rp':	finisherCameraAnimName = 'man_finisher_dlc_head_rp_camera_left'; break;
				case 'man_finisher_dlc_neck_rp':	finisherCameraAnimName = 'man_finisher_dlc_neck_rp_camera_left'; break;

				case 'man_finisher_head_01_lp_ACS':	finisherCameraAnimName ='man_finisher_04_lp_camera_left'; break;
				case 'man_finisher_head_01_rp_ACS':	finisherCameraAnimName = 'man_finisher_03_rp_camera_left'; break;

				default : finisherCameraAnimName = 'man_finisher_02_lp_camera_left'; break;
			}
		}
		else
		{
			switch ( finisherAnimName )
			{
				case 'man_finisher_02_lp':	finisherCameraAnimName = 'man_finisher_02_lp_camera_front'; break;
				case 'man_finisher_04_lp':	finisherCameraAnimName = 'man_finisher_04_lp_camera_front'; break;
				case 'man_finisher_06_lp':	finisherCameraAnimName = 'man_finisher_06_lp_camera_front'; break;
				case 'man_finisher_07_lp':	finisherCameraAnimName = 'man_finisher_07_lp_camera_front'; break;
				case 'man_finisher_08_lp':	finisherCameraAnimName = 'man_finisher_08_lp_camera_front'; break;
				case 'man_finisher_dlc_arm_lp':	finisherCameraAnimName = 'man_finisher_dlc_arm_lp_camera_front'; break;
				case 'man_finisher_dlc_legs_lp':	finisherCameraAnimName = 'man_finisher_dlc_legs_lp_camera_front'; break;
				case 'man_finisher_dlc_torso_lp':	finisherCameraAnimName = 'man_finisher_dlc_torso_lp_camera_front'; break;

				case 'man_finisher_01_rp':	finisherCameraAnimName = 'man_finisher_01_rp_camera_front'; break;
				case 'man_finisher_03_rp':	finisherCameraAnimName = 'man_finisher_03_rp_camera_front'; break;
				case 'man_finisher_05_rp':	finisherCameraAnimName = 'man_finisher_05_rp_camera_front'; break;

				case 'man_finisher_dlc_arm_rp':	finisherCameraAnimName = 'man_finisher_dlc_arm_rp_camera_front'; break;
				case 'man_finisher_dlc_legs_rp':	finisherCameraAnimName = 'man_finisher_dlc_legs_rp_camera_front'; break;
				case 'man_finisher_dlc_torso_rp':	finisherCameraAnimName = 'man_finisher_dlc_torso_rp_camera_front'; break;
				case 'man_finisher_dlc_head_rp':	finisherCameraAnimName = 'man_finisher_dlc_head_rp_camera_front'; break;
				case 'man_finisher_dlc_neck_rp':	finisherCameraAnimName = 'man_finisher_dlc_neck_rp_camera_front'; break;

				case 'man_finisher_head_01_lp_ACS':	finisherCameraAnimName ='man_finisher_04_lp_camera_front'; break;
				case 'man_finisher_head_01_rp_ACS':	finisherCameraAnimName = 'man_finisher_03_rp_camera_front'; break;

				default : finisherCameraAnimName = 'man_finisher_02_lp_camera_front'; break;
			}
		}
		
		return finisherCameraAnimName;
	}

	public function ACS_SetupSyncAnimInternalHuman( syncAction : name, master, slave : CEntity ) : bool
	{
		var masterDef, slaveDef						: SAnimationSequenceDefinition;
		var masterSequencePart, slaveSequencePart	: SAnimationSequencePartDefinition;
		var syncInstance							: CAnimationManualSlotSyncInstance;
		
		var instanceIndex							: int;
		var sequenceIndex							: int;
		
		var temp 									: name; 
		var tempF 									: float;
		var rot 									: EulerAngles;
		
		var finisherAnim 							: bool;
		var pos 									: Vector;
		
		var syncAnimName, cameraAnimName			: name;
		
		var node, node1 							: CNode; 
		var rot0, rot1, slaveRot 					: EulerAngles;
		
		var masterAnim, slaveAnim 					: name;
		var syncAnimIndex							: int;
		var currentAnimInstance						: CAnimationManualSlotSyncInstance;
		var actorMaster, actorSlave 				: CActor;

		var fear_actors								: array<CActor>;
		var j, k 									: int;
		var fear_actor								: CActor;
		var animatedComponentFearActor				: CAnimatedComponent;
		var movementAdjustorFinisher				: CMovementAdjustor;
		var ticketFinisher 							: SMovementAdjustmentRequestTicket;
	
		
		syncInstance = theGame.GetSyncAnimManager().CreateNewSyncInstance( instanceIndex );
		syncAnimIndex = instanceIndex;
		currentAnimInstance = syncInstance;

		action_interrupt_with_igni_sword();

		movementAdjustorFinisher = GetWitcherPlayer().GetMovingAgentComponent().GetMovementAdjustor();

		movementAdjustorFinisher.CancelAll();
		
		ticketFinisher = movementAdjustorFinisher.CreateNewRequest( 'ACS_Finisher_Rotate' );
			
		movementAdjustorFinisher.AdjustmentDuration( ticketFinisher, 1 );

		movementAdjustorFinisher.ShouldStartAt(ticketFinisher, GetWitcherPlayer().GetWorldPosition());
		movementAdjustorFinisher.MaxRotationAdjustmentSpeed( ticketFinisher, 5000000 );
		movementAdjustorFinisher.MaxLocationAdjustmentSpeed( ticketFinisher, 5000000 );

		movementAdjustorFinisher.RotateTowards( ticketFinisher, slave );

		if (thePlayer.HasTag('ACS_Size_Adjusted'))
		{
			Grow_Geralt_Immediate_Fast();

			thePlayer.RemoveTag('ACS_Size_Adjusted');
		}

		//AddTimer( 'ACS_Set_Player_Scale', 0.01, true );

		thePlayer.BlockAllActions( 'ACS_Finisher_Action_Block', true );

		thePlayer.SetGuarded(false);
		thePlayer.OnGuardedReleased();

		ACS_Axii_Shield_Destroy_IMMEDIATE();

		thePlayer.AddTag('ACS_IsPerformingFinisher');

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
		thePlayer.SetCanPlayHitAnim(false); 
		//thePlayer.EnableCharacterCollisions(false); 
		thePlayer.AddBuffImmunity_AllNegative('ACS_Finisher_Immune_Negative', true); 
		thePlayer.AddBuffImmunity_AllCritical('ACS_Finisher_Immune_Critical', true); 

		//ChangeInteractionPriority();
		
		RemoveTimer('ACS_Finisher_Unblock_Action');

		/*

		combatTarget.Kill( 'AutoFinisher', false, thePlayer );
		thePlayer.SetFinisherVictim( combatTarget );
		thePlayer.CleanCombatActionBuffer();
		forcedFinisherVictim = combatTarget;

		moveTargets.Clear();
		moveTargets = thePlayer.GetMoveTargets();
				
		for( i = 0; i < moveTargets.Size(); i += 1 )
		{
			if( combatTarget != moveTargets[i] )
				moveTargets[i].SignalGameplayEvent( 'InterruptChargeAttack' );
		}	
		
		if( theGame.GetInGameConfigWrapper().GetVarValue( 'Gameplay', 'AutomaticFinishersEnabled' ) == "true" )
			combatTarget.AddAbility( 'ForceFinisher', false );
		
		if( combatTarget.HasTag( 'ForceFinisher' ) )
			combatTarget.AddAbility( 'ForceFinisher', false );
			
		combatTarget.SignalGameplayEvent( 'ForceFinisher' );
		
		thePlayer.FindMoveTarget();

		AddTimer( 'ACS_SignalFinisher', 0.2, false );

		*/

		moveTargets.Clear();
		moveTargets = thePlayer.GetMoveTargets();
				
		for( j = 0; j < moveTargets.Size(); j += 1 )
		{
			fear_actor = ((CActor)(moveTargets[j]));

			animatedComponentFearActor = (CAnimatedComponent)fear_actor.GetComponentByClassName( 'CAnimatedComponent' );

			if ( fear_actor 
			&& !fear_actor.HasTag('ACS_Final_Fear_Stack')
			)
			{
				fear_actor.SignalGameplayEvent( 'InterruptChargeAttack' );
				
				animatedComponentFearActor.FreezePoseFadeIn(0.125f);

				animatedComponentFearActor.UnfreezePoseFadeOut(3.f);
			}	
		}
		
		if (((CActor)slave).IsAlive())
		{
			((CActor)slave).Kill( 'ACS_Finisher', false, thePlayer );
		}

		switch( syncAction )
		{
			case 'man_trample':
			{
				AddTimer('ACS_Finisher_Unblock_Action', 1.5, false);

				if (RandF() < 0.5)
				{
					masterSequencePart.animation			= 'man_geralt_sword_repel_lp_kick_ACS';
				}
				else
				{
					masterSequencePart.animation			= 'man_geralt_sword_repel_rp_kick_ACS';
				}

				masterSequencePart.syncType				= AMST_SyncBeginning;
				masterSequencePart.useRefBone			= 'Reference';
				masterSequencePart.rotationTypeUsingRefBone = SRT_TowardsOtherEntity;
				masterSequencePart.shouldSlide			= true;
				masterSequencePart.shouldRotate			= true;
				
				masterSequencePart.blendInTime			= 0.1f;
				masterSequencePart.blendOutTime			= 0.75f;
				masterSequencePart.sequenceIndex		= 0;
				
				masterDef.parts.PushBack( masterSequencePart );
				masterDef.entity						= master;
				
				masterDef.manualSlotName			= 'GAMEPLAY_SLOT';

				masterDef.freezeAtEnd					= false;
				
				slave.SetKinematic( true );
				slave.AddTag('ACS_man_trample');
				slaveSequencePart.animation				= 'man_npc_sword_1hand_wounded_crawl_killed';	
				slaveSequencePart.syncType				= AMST_SyncBeginning;
				slaveSequencePart.useRefBone			= 'Reference';	
				slaveSequencePart.rotationTypeUsingRefBone = SRT_ToMatchOthersRotation;
				slaveSequencePart.shouldRotate			= false;
				slaveSequencePart.shouldSlide			= false;
				slaveSequencePart.finalHeading			= thePlayer.GetHeading();
				
				slaveSequencePart.blendInTime			= 0.3f;
				slaveSequencePart.blendOutTime			= 1.0f;
				slaveSequencePart.sequenceIndex			= 0;
				slaveSequencePart.disableProxyCollisions = true;
				
				slaveDef.parts.PushBack( slaveSequencePart );
				slaveDef.entity							= slave;
		
				slaveDef.manualSlotName					= 'GAMEPLAY_SLOT';
				slaveDef.freezeAtEnd					= false;

				finisherAnim 							= false;
				
				break;	
			}
			case 'man_finisher_head':
			{
				AddTimer('ACS_Finisher_Unblock_Action', 1.5, false);

				if (RandF() < 0.5)
				{
					masterSequencePart.animation			= 'man_finisher_head_01_lp_ACS';

					cameraAnimName = ProcessFinisherCameraAnimName( 'man_finisher_head_01_lp_ACS' );
				}
				else
				{
					masterSequencePart.animation			= 'man_finisher_head_01_rp_ACS';

					cameraAnimName = ProcessFinisherCameraAnimName( 'man_finisher_head_01_rp_ACS' );
				}

				masterSequencePart.syncType				= AMST_SyncBeginning;
				masterSequencePart.useRefBone			= 'Reference';
				masterSequencePart.rotationTypeUsingRefBone = SRT_TowardsOtherEntity;
				masterSequencePart.shouldSlide			= true;
				masterSequencePart.shouldRotate			= true;
				
				masterSequencePart.blendInTime			= 0.1f;
				masterSequencePart.blendOutTime			= 0.75f;
				masterSequencePart.sequenceIndex		= 0;
				
				masterDef.parts.PushBack( masterSequencePart );
				masterDef.entity						= master;
				
				masterDef.manualSlotName			= 'GAMEPLAY_SLOT';

				masterDef.freezeAtEnd					= false;


				if ((thePlayer.IsLastEnemyKilled() && ACS_CustomFinishersCameraSettings() == 1) || ACS_CustomFinishersCameraSettings() == 2)
				{
					PlayCustomCamAnim( cameraAnimName, 0.15f, 3.0f, 1.f, 2.0f, true, CAP_Highest );
				}
				else if (ACS_CustomFinishersCameraSettings() == 0)
				{

				}
				
				slave.SetKinematic( true );
				slave.AddTag('ACS_man_finisher_head');
				slaveSequencePart.animation				= 'man_finisher_head_01_reaction_ACS';	
				slaveSequencePart.syncType				= AMST_SyncBeginning;
				slaveSequencePart.useRefBone			= 'Reference';	
				slaveSequencePart.rotationTypeUsingRefBone = SRT_ToMatchOthersRotation;
				slaveSequencePart.shouldRotate			= false;
				slaveSequencePart.shouldSlide			= false;
				slaveSequencePart.finalHeading			= thePlayer.GetHeading();
				
				slaveSequencePart.blendInTime			= 0.3f;
				slaveSequencePart.blendOutTime			= 1.0f;
				slaveSequencePart.sequenceIndex			= 0;
				slaveSequencePart.disableProxyCollisions = true;
				
				slaveDef.parts.PushBack( slaveSequencePart );
				slaveDef.entity							= slave;
		
				slaveDef.manualSlotName					= 'GAMEPLAY_SLOT';
				slaveDef.freezeAtEnd					= false;

				finisherAnim 							= false;
				
				break;	
			}
			case 'man_ger_crawl_finish':
			{
				AddTimer('ACS_Finisher_Unblock_Action', 2.5, false);

				masterSequencePart.animation			= 'man_ger_crawl_finish';
				masterSequencePart.syncType				= AMST_SyncBeginning;
				masterSequencePart.shouldSlide			= true;
				masterSequencePart.shouldRotate			= true;

				pos = ACSGetActorPosition( slave );				
				masterSequencePart.finalPosition	= 1.15 * VecNormalize( master.GetWorldPosition() - pos ) + pos;
				masterSequencePart.finalHeading		= VecHeading( pos - master.GetWorldPosition() );
				
				masterSequencePart.blendInTime			= 0.5f;
				masterSequencePart.blendOutTime			= 1.0f;
				masterSequencePart.sequenceIndex		= 0;
				
				masterDef.parts.PushBack( masterSequencePart );
				masterDef.entity						= master;
				
				masterDef.manualSlotName			= 'GAMEPLAY_SLOT';

				masterDef.freezeAtEnd					= false;
				
				slave.SetKinematic( true );

				slave.AddTag('ACS_man_ger_crawl_finish');

				slaveSequencePart.animation				= 'man_npc_sword_1hand_wounded_crawl_killed';	
				slaveSequencePart.syncType				= AMST_SyncBeginning;
				slaveSequencePart.shouldRotate			= false;
				slaveSequencePart.shouldSlide			= false;
				slaveSequencePart.finalHeading			= thePlayer.GetHeading();
				
				slaveSequencePart.blendInTime			= 0.5f;
				slaveSequencePart.blendOutTime			= 1.0f;
				slaveSequencePart.sequenceIndex			= 0;
				slaveSequencePart.disableProxyCollisions = true;
				
				slaveDef.parts.PushBack( slaveSequencePart );
				slaveDef.entity							= slave;
		
				slaveDef.manualSlotName					= 'GAMEPLAY_SLOT';
				slaveDef.freezeAtEnd					= false;

				finisherAnim 							= false;
				
				break;
			}
			case 'man_finisher_dlc_legs_rp':
			{
				AddTimer('ACS_Finisher_Unblock_Action', 1.5, false);

				masterSequencePart.animation			= 'man_finisher_dlc_legs_rp';
				masterSequencePart.syncType				= AMST_SyncBeginning;
				masterSequencePart.useRefBone			= 'Reference';
				masterSequencePart.rotationTypeUsingRefBone = SRT_TowardsOtherEntity;
				masterSequencePart.shouldSlide			= true;
				masterSequencePart.shouldRotate			= true;
				
				masterSequencePart.blendInTime			= 0.5f;
				masterSequencePart.blendOutTime			= 1.0f;
				masterSequencePart.sequenceIndex		= 0;
				
				masterDef.parts.PushBack( masterSequencePart );
				masterDef.entity						= master;
				
				masterDef.manualSlotName			= 'GAMEPLAY_SLOT';
	
				if ((thePlayer.IsLastEnemyKilled() && ACS_CustomFinishersCameraSettings() == 1) || ACS_CustomFinishersCameraSettings() == 2)
				{
					cameraAnimName = ProcessFinisherCameraAnimName( 'man_finisher_dlc_legs_rp' );

					PlayCustomCamAnim( cameraAnimName, 0.15f, 3.0f, 1.f, 2.0f, true, CAP_Highest );
				}
				else if (ACS_CustomFinishersCameraSettings() == 0)
				{

				}

				masterDef.freezeAtEnd					= false;
				
				slave.SetKinematic( true );
				slave.AddTag('ACS_man_finisher_dlc_legs_rp');
				slaveSequencePart.animation				= 'man_finisher_dlc_legs_rp';	
				slaveSequencePart.syncType				= AMST_SyncBeginning;
				slaveSequencePart.useRefBone			= 'Reference';	
				slaveSequencePart.rotationTypeUsingRefBone = SRT_ToMatchOthersRotation;
				slaveSequencePart.shouldRotate			= false;
				slaveSequencePart.shouldSlide			= false;
				slaveSequencePart.finalHeading			= thePlayer.GetHeading();
				
				slaveSequencePart.blendInTime			= 0.5f;
				slaveSequencePart.blendOutTime			= 0.f;
				slaveSequencePart.sequenceIndex			= 0;
				slaveSequencePart.disableProxyCollisions = true;
				
				slaveDef.parts.PushBack( slaveSequencePart );
				slaveDef.entity							= slave;
		
				slaveDef.manualSlotName					= 'GAMEPLAY_SLOT';
				slaveDef.freezeAtEnd					= false;

				finisherAnim 							= false;
				
				break;		
			}
			case 'man_finisher_dlc_legs_lp':
			{
				AddTimer('ACS_Finisher_Unblock_Action', 1.5, false);

				masterSequencePart.animation			= 'man_finisher_dlc_legs_lp';
				masterSequencePart.syncType				= AMST_SyncBeginning;
				masterSequencePart.useRefBone			= 'Reference';
				masterSequencePart.rotationTypeUsingRefBone = SRT_TowardsOtherEntity;
				masterSequencePart.shouldSlide			= true;
				masterSequencePart.shouldRotate			= true;
				
				masterSequencePart.blendInTime			= 0.5f;
				masterSequencePart.blendOutTime			= 1.0f;
				masterSequencePart.sequenceIndex		= 0;
				
				masterDef.parts.PushBack( masterSequencePart );
				masterDef.entity						= master;
				
				masterDef.manualSlotName			= 'GAMEPLAY_SLOT';

				if ((thePlayer.IsLastEnemyKilled() && ACS_CustomFinishersCameraSettings() == 1) || ACS_CustomFinishersCameraSettings() == 2)
				{
					cameraAnimName = ProcessFinisherCameraAnimName( 'man_finisher_dlc_legs_lp' );

					PlayCustomCamAnim( cameraAnimName, 0.15f, 3.0f, 1.f, 2.0f, true, CAP_Highest );
				}
				else if (ACS_CustomFinishersCameraSettings() == 0)
				{

				}

				masterDef.freezeAtEnd					= false;
				
				slave.SetKinematic( true );
				slave.AddTag('ACS_man_finisher_dlc_legs_lp');
				slaveSequencePart.animation				= 'man_finisher_dlc_legs_lp';	
				slaveSequencePart.syncType				= AMST_SyncBeginning;
				slaveSequencePart.useRefBone			= 'Reference';	
				slaveSequencePart.rotationTypeUsingRefBone = SRT_ToMatchOthersRotation;
				slaveSequencePart.shouldRotate			= false;
				slaveSequencePart.shouldSlide			= false;
				slaveSequencePart.finalHeading			= thePlayer.GetHeading();
				
				slaveSequencePart.blendInTime			= 0.5f;
				slaveSequencePart.blendOutTime			= 0.f;
				slaveSequencePart.sequenceIndex			= 0;
				slaveSequencePart.disableProxyCollisions = true;
				
				slaveDef.parts.PushBack( slaveSequencePart );
				slaveDef.entity							= slave;
		
				slaveDef.manualSlotName					= 'GAMEPLAY_SLOT';
				slaveDef.freezeAtEnd					= false;

				finisherAnim 							= false;
				
				break;		
			}
			case 'man_finisher_dlc_arm_rp':
			{
				AddTimer('ACS_Finisher_Unblock_Action', 2.5, false);

				masterSequencePart.animation			= 'man_finisher_dlc_arm_rp';
				masterSequencePart.syncType				= AMST_SyncBeginning;
				masterSequencePart.useRefBone			= 'Reference';
				masterSequencePart.rotationTypeUsingRefBone = SRT_TowardsOtherEntity;
				masterSequencePart.shouldSlide			= true;
				masterSequencePart.shouldRotate			= true;
				
				masterSequencePart.blendInTime			= 0.5f;
				masterSequencePart.blendOutTime			= 0.85f;
				masterSequencePart.sequenceIndex		= 0;
				
				masterDef.parts.PushBack( masterSequencePart );
				masterDef.entity						= master;
				
				masterDef.manualSlotName			= 'GAMEPLAY_SLOT';

				if ((thePlayer.IsLastEnemyKilled() && ACS_CustomFinishersCameraSettings() == 1) || ACS_CustomFinishersCameraSettings() == 2)
				{
					cameraAnimName = ProcessFinisherCameraAnimName( 'man_finisher_dlc_arm_rp' );

					PlayCustomCamAnim( cameraAnimName, 0.15f, 3.0f, 1.f, 2.0f, true, CAP_Highest );
				}
				else if (ACS_CustomFinishersCameraSettings() == 0)
				{

				}

				masterDef.freezeAtEnd					= false;
				
				slave.SetKinematic( true );
				slave.AddTag('ACS_man_finisher_dlc_arm_rp');
				slaveSequencePart.animation				= 'man_finisher_dlc_arm_rp';	
				slaveSequencePart.syncType				= AMST_SyncBeginning;
				slaveSequencePart.useRefBone			= 'Reference';	
				slaveSequencePart.rotationTypeUsingRefBone = SRT_ToMatchOthersRotation;
				slaveSequencePart.shouldRotate			= false;
				slaveSequencePart.shouldSlide			= false;
				slaveSequencePart.finalHeading			= thePlayer.GetHeading();
				
				slaveSequencePart.blendInTime			= 0.25f;
				slaveSequencePart.blendOutTime			= 0;
				slaveSequencePart.sequenceIndex			= 0;
				slaveSequencePart.disableProxyCollisions = true;
				
				slaveDef.parts.PushBack( slaveSequencePart );
				slaveDef.entity							= slave;
		
				slaveDef.manualSlotName					= 'GAMEPLAY_SLOT';
				slaveDef.freezeAtEnd					= false;

				finisherAnim 							= false;
				
				break;		
			}
			case 'man_finisher_dlc_arm_lp':
			{
				AddTimer('ACS_Finisher_Unblock_Action', 2.5, false);

				masterSequencePart.animation			= 'man_finisher_dlc_arm_lp';
				masterSequencePart.syncType				= AMST_SyncBeginning;
				masterSequencePart.useRefBone			= 'Reference';
				masterSequencePart.rotationTypeUsingRefBone = SRT_TowardsOtherEntity;
				masterSequencePart.shouldSlide			= true;
				masterSequencePart.shouldRotate			= true;
				
				masterSequencePart.blendInTime			= 0.5f;
				masterSequencePart.blendOutTime			= 0.85f;
				masterSequencePart.sequenceIndex		= 0;
				
				masterDef.parts.PushBack( masterSequencePart );
				masterDef.entity						= master;
				
				masterDef.manualSlotName			= 'GAMEPLAY_SLOT';

				if ((thePlayer.IsLastEnemyKilled() && ACS_CustomFinishersCameraSettings() == 1) || ACS_CustomFinishersCameraSettings() == 2)
				{
					cameraAnimName = ProcessFinisherCameraAnimName( 'man_finisher_dlc_arm_lp' );

					PlayCustomCamAnim( cameraAnimName, 0.15f, 3.0f, 1.f, 2.0f, true, CAP_Highest );
				}
				else if (ACS_CustomFinishersCameraSettings() == 0)
				{

				}

				masterDef.freezeAtEnd					= false;
				
				slave.SetKinematic( true );
				slave.AddTag('ACS_man_finisher_dlc_arm_lp');
				slaveSequencePart.animation				= 'man_finisher_dlc_arm_lp';	
				slaveSequencePart.syncType				= AMST_SyncBeginning;
				slaveSequencePart.useRefBone			= 'Reference';	
				slaveSequencePart.rotationTypeUsingRefBone = SRT_ToMatchOthersRotation;
				slaveSequencePart.shouldRotate			= false;
				slaveSequencePart.shouldSlide			= false;
				slaveSequencePart.finalHeading			= thePlayer.GetHeading();
				
				slaveSequencePart.blendInTime			= 0.25f;
				slaveSequencePart.blendOutTime			= 0;
				slaveSequencePart.sequenceIndex			= 0;
				slaveSequencePart.disableProxyCollisions = true;
				
				slaveDef.parts.PushBack( slaveSequencePart );
				slaveDef.entity							= slave;
		
				slaveDef.manualSlotName					= 'GAMEPLAY_SLOT';
				slaveDef.freezeAtEnd					= false;
				
				finisherAnim 							= false;
				
				break;		
			}
			case 'man_finisher_dlc_head_rp':
			{
				AddTimer('ACS_Finisher_Unblock_Action', 2.5, false);

				masterSequencePart.animation			= 'man_finisher_dlc_head_rp';
				masterSequencePart.syncType				= AMST_SyncBeginning;
				masterSequencePart.useRefBone			= 'Reference';
				masterSequencePart.rotationTypeUsingRefBone = SRT_TowardsOtherEntity;
				masterSequencePart.shouldSlide			= true;
				masterSequencePart.shouldRotate			= true;
				
				masterSequencePart.blendInTime			= 0.5f;
				masterSequencePart.blendOutTime			= 1.25f;
				masterSequencePart.sequenceIndex		= 0;
				
				masterDef.parts.PushBack( masterSequencePart );
				masterDef.entity						= master;
				
				masterDef.manualSlotName			= 'GAMEPLAY_SLOT';

				if ((thePlayer.IsLastEnemyKilled() && ACS_CustomFinishersCameraSettings() == 1) || ACS_CustomFinishersCameraSettings() == 2)
				{
					cameraAnimName = ProcessFinisherCameraAnimName( 'man_finisher_dlc_head_rp' );

					PlayCustomCamAnim( cameraAnimName, 0.15f, 3.0f, 1.f, 2.0f, true, CAP_Highest );
				}
				else if (ACS_CustomFinishersCameraSettings() == 0)
				{

				}

				masterDef.freezeAtEnd					= false;
				
				slave.SetKinematic( true );
				slave.AddTag('ACS_man_finisher_dlc_head_rp');
				slaveSequencePart.animation				= 'man_finisher_dlc_head_rp';	
				slaveSequencePart.syncType				= AMST_SyncBeginning;
				slaveSequencePart.useRefBone			= 'Reference';	
				slaveSequencePart.rotationTypeUsingRefBone = SRT_ToMatchOthersRotation;
				slaveSequencePart.shouldRotate			= false;
				slaveSequencePart.shouldSlide			= false;
				slaveSequencePart.finalHeading			= thePlayer.GetHeading();
				
				slaveSequencePart.blendInTime			= 0.5f;
				slaveSequencePart.blendOutTime			= 0.5f;
				slaveSequencePart.sequenceIndex			= 0;
				slaveSequencePart.disableProxyCollisions = true;
				
				slaveDef.parts.PushBack( slaveSequencePart );
				slaveDef.entity							= slave;
		
				slaveDef.manualSlotName					= 'GAMEPLAY_SLOT';
				slaveDef.freezeAtEnd					= false;
				
				finisherAnim 							= false;

				ACS_Human_Death_Explode(((CActor)(slave)), ((CActor)(slave)).GetWorldPosition(), 0.5);
				
				break;		
			}
			case 'man_finisher_01_rp':
			{
				AddTimer('ACS_Finisher_Unblock_Action', 2.5, false);

				masterSequencePart.animation			= 'man_finisher_01_rp';
				masterSequencePart.syncType				= AMST_SyncBeginning;
				masterSequencePart.useRefBone			= 'Reference';
				masterSequencePart.rotationTypeUsingRefBone = SRT_TowardsOtherEntity;
				masterSequencePart.shouldSlide			= true;
				masterSequencePart.shouldRotate			= true;
				
				masterSequencePart.blendInTime			= 0.5f;
				masterSequencePart.blendOutTime			= 1.25f;
				masterSequencePart.sequenceIndex		= 0;
				
				masterDef.parts.PushBack( masterSequencePart );
				masterDef.entity						= master;
				
				masterDef.manualSlotName			= 'GAMEPLAY_SLOT';

				if ((thePlayer.IsLastEnemyKilled() && ACS_CustomFinishersCameraSettings() == 1) || ACS_CustomFinishersCameraSettings() == 2)
				{
					cameraAnimName = ProcessFinisherCameraAnimName( 'man_finisher_01_rp' );

					PlayCustomCamAnim( cameraAnimName, 0.15f, 3.0f, 1.f, 2.0f, true, CAP_Highest );
				}
				else if (ACS_CustomFinishersCameraSettings() == 0)
				{

				}

				masterDef.freezeAtEnd					= false;
				
				slave.SetKinematic( true );
				slave.AddTag('ACS_man_finisher_01_rp');
				slaveSequencePart.animation				= 'man_finisher_01_rp';	
				slaveSequencePart.syncType				= AMST_SyncBeginning;
				slaveSequencePart.useRefBone			= 'Reference';	
				slaveSequencePart.rotationTypeUsingRefBone = SRT_ToMatchOthersRotation;
				slaveSequencePart.shouldRotate			= false;
				slaveSequencePart.shouldSlide			= false;
				slaveSequencePart.finalHeading			= thePlayer.GetHeading();
				
				slaveSequencePart.blendInTime			= 0.5f;
				slaveSequencePart.blendOutTime			= 0.5f;
				slaveSequencePart.sequenceIndex			= 0;
				slaveSequencePart.disableProxyCollisions = true;
				
				slaveDef.parts.PushBack( slaveSequencePart );
				slaveDef.entity							= slave;
		
				slaveDef.manualSlotName					= 'GAMEPLAY_SLOT';
				slaveDef.freezeAtEnd					= false;
				
				finisherAnim 							= false;
				
				break;		
			}
			case 'man_finisher_07_lp':
			{
				AddTimer('ACS_Finisher_Unblock_Action', 2.5, false);

				masterSequencePart.animation			= 'man_finisher_07_lp';
				masterSequencePart.syncType				= AMST_SyncBeginning;
				masterSequencePart.useRefBone			= 'Reference';
				masterSequencePart.rotationTypeUsingRefBone = SRT_TowardsOtherEntity;
				masterSequencePart.shouldSlide			= true;
				masterSequencePart.shouldRotate			= true;
				
				masterSequencePart.blendInTime			= 0.5f;
				masterSequencePart.blendOutTime			= 2.5f;
				masterSequencePart.sequenceIndex		= 0;
				
				masterDef.parts.PushBack( masterSequencePart );
				masterDef.entity						= master;
				
				masterDef.manualSlotName			= 'GAMEPLAY_SLOT';

				if ((thePlayer.IsLastEnemyKilled() && ACS_CustomFinishersCameraSettings() == 1) || ACS_CustomFinishersCameraSettings() == 2)
				{
					cameraAnimName = ProcessFinisherCameraAnimName( 'man_finisher_07_lp' );

					PlayCustomCamAnim( cameraAnimName, 0.15f, 3.0f, 1.f, 2.0f, true, CAP_Highest );
				}
				else if (ACS_CustomFinishersCameraSettings() == 0)
				{

				}

				masterDef.freezeAtEnd					= false;
				
				slave.SetKinematic( true );
				slave.AddTag('ACS_man_finisher_07_lp');
				slaveSequencePart.animation				= 'man_finisher_07_lp';	
				slaveSequencePart.syncType				= AMST_SyncBeginning;
				slaveSequencePart.useRefBone			= 'Reference';	
				slaveSequencePart.rotationTypeUsingRefBone = SRT_ToMatchOthersRotation;
				slaveSequencePart.shouldRotate			= false;
				slaveSequencePart.shouldSlide			= false;
				slaveSequencePart.finalHeading			= thePlayer.GetHeading();
				
				slaveSequencePart.blendInTime			= 0.5f;
				slaveSequencePart.blendOutTime			= 0.5f;
				slaveSequencePart.sequenceIndex			= 0;
				slaveSequencePart.disableProxyCollisions = true;
				
				slaveDef.parts.PushBack( slaveSequencePart );
				slaveDef.entity							= slave;
		
				slaveDef.manualSlotName					= 'GAMEPLAY_SLOT';
				slaveDef.freezeAtEnd					= false;

				finisherAnim 							= false;

				ACS_Human_Death_Explode(((CActor)(slave)), ((CActor)(slave)).GetWorldPosition(), 0.5);
				
				break;		
			}
			case 'man_finisher_02_lp':
			{
				AddTimer('ACS_Finisher_Unblock_Action', 2.5, false);

				masterSequencePart.animation			= 'man_finisher_02_lp';
				masterSequencePart.syncType				= AMST_SyncBeginning;
				masterSequencePart.useRefBone			= 'Reference';
				masterSequencePart.rotationTypeUsingRefBone = SRT_TowardsOtherEntity;
				masterSequencePart.shouldSlide			= true;
				masterSequencePart.shouldRotate			= true;
				
				masterSequencePart.blendInTime			= 0.5f;
				masterSequencePart.blendOutTime			= 2.5f;
				masterSequencePart.sequenceIndex		= 0;
				
				masterDef.parts.PushBack( masterSequencePart );
				masterDef.entity						= master;
				
				masterDef.manualSlotName			= 'GAMEPLAY_SLOT';

				if ((thePlayer.IsLastEnemyKilled() && ACS_CustomFinishersCameraSettings() == 1) || ACS_CustomFinishersCameraSettings() == 2)
				{
					cameraAnimName = ProcessFinisherCameraAnimName( 'man_finisher_02_lp' );

					PlayCustomCamAnim( cameraAnimName, 0.15f, 3.0f, 1.f, 2.0f, true, CAP_Highest );
				}
				else if (ACS_CustomFinishersCameraSettings() == 0)
				{

				}

				masterDef.freezeAtEnd					= false;
				
				slave.SetKinematic( true );
				slave.AddTag('ACS_man_finisher_02_lp');
				slaveSequencePart.animation				= 'man_finisher_02_lp';	
				slaveSequencePart.syncType				= AMST_SyncBeginning;
				slaveSequencePart.useRefBone			= 'Reference';	
				slaveSequencePart.rotationTypeUsingRefBone = SRT_ToMatchOthersRotation;
				slaveSequencePart.shouldRotate			= false;
				slaveSequencePart.shouldSlide			= false;
				slaveSequencePart.finalHeading			= thePlayer.GetHeading();
				
				slaveSequencePart.blendInTime			= 0.5f;
				slaveSequencePart.blendOutTime			= 0.5f;
				slaveSequencePart.sequenceIndex			= 0;
				slaveSequencePart.disableProxyCollisions = true;
				
				slaveDef.parts.PushBack( slaveSequencePart );
				slaveDef.entity							= slave;
		
				slaveDef.manualSlotName					= 'GAMEPLAY_SLOT';
				slaveDef.freezeAtEnd					= false;

				finisherAnim 							= false;
				
				break;		
			}
			case 'man_finisher_08_lp':
			{
				AddTimer('ACS_Finisher_Unblock_Action', 2.5, false);

				masterSequencePart.animation			= 'man_finisher_08_lp';
				masterSequencePart.syncType				= AMST_SyncBeginning;
				masterSequencePart.useRefBone			= 'Reference';
				masterSequencePart.rotationTypeUsingRefBone = SRT_TowardsOtherEntity;
				masterSequencePart.shouldSlide			= true;
				masterSequencePart.shouldRotate			= true;
				
				masterSequencePart.blendInTime			= 0.5f;
				masterSequencePart.blendOutTime			= 3.0f;
				masterSequencePart.sequenceIndex		= 0;
				
				masterDef.parts.PushBack( masterSequencePart );
				masterDef.entity						= master;
				
				masterDef.manualSlotName			= 'GAMEPLAY_SLOT';

				if ((thePlayer.IsLastEnemyKilled() && ACS_CustomFinishersCameraSettings() == 1) || ACS_CustomFinishersCameraSettings() == 2)
				{
					cameraAnimName = ProcessFinisherCameraAnimName( 'man_finisher_08_lp' );

					PlayCustomCamAnim( cameraAnimName, 0.15f, 3.0f, 1.f, 2.0f, true, CAP_Highest );
				}
				else if (ACS_CustomFinishersCameraSettings() == 0)
				{

				}

				masterDef.freezeAtEnd					= false;
				
				slave.SetKinematic( true );
				slave.AddTag('ACS_man_finisher_08_lp');
				slaveSequencePart.animation				= 'man_finisher_08_lp';	
				slaveSequencePart.syncType				= AMST_SyncBeginning;
				slaveSequencePart.useRefBone			= 'Reference';	
				slaveSequencePart.rotationTypeUsingRefBone = SRT_ToMatchOthersRotation;
				slaveSequencePart.shouldRotate			= false;
				slaveSequencePart.shouldSlide			= false;
				slaveSequencePart.finalHeading			= thePlayer.GetHeading();
				
				slaveSequencePart.blendInTime			= 0.5f;
				slaveSequencePart.blendOutTime			= 0.5f;
				slaveSequencePart.sequenceIndex			= 0;
				slaveSequencePart.disableProxyCollisions = true;
				
				slaveDef.parts.PushBack( slaveSequencePart );
				slaveDef.entity							= slave;
		
				slaveDef.manualSlotName					= 'GAMEPLAY_SLOT';
				slaveDef.freezeAtEnd					= false;
				
				finisherAnim 							= false;
				
				break;		
			}
			case 'man_finisher_dlc_neck_rp':
			{
				AddTimer('ACS_Finisher_Unblock_Action', 2.5, false);

				masterSequencePart.animation			= 'man_finisher_dlc_neck_rp';
				masterSequencePart.syncType				= AMST_SyncBeginning;
				masterSequencePart.useRefBone			= 'Reference';
				masterSequencePart.rotationTypeUsingRefBone = SRT_TowardsOtherEntity;
				masterSequencePart.shouldSlide			= true;
				masterSequencePart.shouldRotate			= true;
				
				masterSequencePart.blendInTime			= 0.5f;
				masterSequencePart.blendOutTime			= 1.25f;
				masterSequencePart.sequenceIndex		= 0;
				
				masterDef.parts.PushBack( masterSequencePart );
				masterDef.entity						= master;
				
				masterDef.manualSlotName			= 'GAMEPLAY_SLOT';
	
				if ((thePlayer.IsLastEnemyKilled() && ACS_CustomFinishersCameraSettings() == 1) || ACS_CustomFinishersCameraSettings() == 2)
				{
					cameraAnimName = ProcessFinisherCameraAnimName( 'man_finisher_dlc_neck_rp' );

					PlayCustomCamAnim( cameraAnimName, 0.15f, 3.0f, 1.f, 2.0f, true, CAP_Highest );
				}
				else if (ACS_CustomFinishersCameraSettings() == 0)
				{

				}

				masterDef.freezeAtEnd					= false;
				
				slave.SetKinematic( true );
				slave.AddTag('ACS_man_finisher_dlc_neck_rp');
				slaveSequencePart.animation				= 'man_finisher_dlc_neck_rp';	
				slaveSequencePart.syncType				= AMST_SyncBeginning;
				slaveSequencePart.useRefBone			= 'Reference';	
				slaveSequencePart.rotationTypeUsingRefBone = SRT_ToMatchOthersRotation;
				slaveSequencePart.shouldRotate			= false;
				slaveSequencePart.shouldSlide			= false;
				slaveSequencePart.finalHeading			= thePlayer.GetHeading();
				
				slaveSequencePart.blendInTime			= 0.5f;
				slaveSequencePart.blendOutTime			= 0.5f;
				slaveSequencePart.sequenceIndex			= 0;
				slaveSequencePart.disableProxyCollisions = true;
				
				slaveDef.parts.PushBack( slaveSequencePart );
				slaveDef.entity							= slave;
		
				slaveDef.manualSlotName					= 'GAMEPLAY_SLOT';
				slaveDef.freezeAtEnd					= false;

				finisherAnim 							= false;
				
				break;		
			}
			case 'man_finisher_03_rp':
			{
				AddTimer('ACS_Finisher_Unblock_Action', 2.5, false);

				masterSequencePart.animation			= 'man_finisher_03_rp';
				masterSequencePart.syncType				= AMST_SyncBeginning;
				masterSequencePart.useRefBone			= 'Reference';
				masterSequencePart.rotationTypeUsingRefBone = SRT_TowardsOtherEntity;
				masterSequencePart.shouldSlide			= false;
				masterSequencePart.shouldRotate			= true;
				
				masterSequencePart.blendInTime			= 0.5f;
				masterSequencePart.blendOutTime			= 2.5f;
				masterSequencePart.sequenceIndex		= 0;
				
				masterDef.parts.PushBack( masterSequencePart );
				masterDef.entity						= master;
				
				masterDef.manualSlotName			= 'GAMEPLAY_SLOT';

				if ((thePlayer.IsLastEnemyKilled() && ACS_CustomFinishersCameraSettings() == 1) || ACS_CustomFinishersCameraSettings() == 2)
				{
					cameraAnimName = ProcessFinisherCameraAnimName( 'man_finisher_03_rp' );

					PlayCustomCamAnim( cameraAnimName, 0.15f, 3.0f, 1.f, 2.0f, true, CAP_Highest );
				}
				else if (ACS_CustomFinishersCameraSettings() == 0)
				{

				}

				masterDef.freezeAtEnd					= false;
				
				slave.SetKinematic( true );
				slave.AddTag('ACS_man_finisher_03_rp');
				slaveSequencePart.animation				= 'man_finisher_03_rp';	
				slaveSequencePart.syncType				= AMST_SyncBeginning;
				slaveSequencePart.useRefBone			= 'Reference';	
				slaveSequencePart.rotationTypeUsingRefBone = SRT_ToMatchOthersRotation;
				slaveSequencePart.shouldRotate			= true;
				slaveSequencePart.shouldSlide			= false;
				slaveSequencePart.finalHeading			= thePlayer.GetHeading();
				
				slaveSequencePart.blendInTime			= 0.5f;
				slaveSequencePart.blendOutTime			= 0.5f;
				slaveSequencePart.sequenceIndex			= 0;
				slaveSequencePart.disableProxyCollisions = true;
				
				slaveDef.parts.PushBack( slaveSequencePart );
				slaveDef.entity							= slave;
		
				slaveDef.manualSlotName					= 'GAMEPLAY_SLOT';
				slaveDef.freezeAtEnd					= false;

				finisherAnim 							= false;
				
				break;		
			}
			case 'man_finisher_06_lp':
			{
				AddTimer('ACS_Finisher_Unblock_Action', 2.5, false);

				masterSequencePart.animation			= 'man_finisher_06_lp';
				masterSequencePart.syncType				= AMST_SyncBeginning;
				masterSequencePart.useRefBone			= 'Reference';
				masterSequencePart.rotationTypeUsingRefBone = SRT_TowardsOtherEntity;
				masterSequencePart.shouldSlide			= false;
				masterSequencePart.shouldRotate			= true;
				
				masterSequencePart.blendInTime			= 0.5f;
				masterSequencePart.blendOutTime			= 2.5f;
				masterSequencePart.sequenceIndex		= 0;
				
				masterDef.parts.PushBack( masterSequencePart );
				masterDef.entity						= master;
				
				masterDef.manualSlotName			= 'GAMEPLAY_SLOT';

				if ((thePlayer.IsLastEnemyKilled() && ACS_CustomFinishersCameraSettings() == 1) || ACS_CustomFinishersCameraSettings() == 2)
				{
					cameraAnimName = ProcessFinisherCameraAnimName( 'man_finisher_06_lp' );

					PlayCustomCamAnim( cameraAnimName, 0.15f, 3.0f, 1.f, 2.0f, true, CAP_Highest );
				}
				else if (ACS_CustomFinishersCameraSettings() == 0)
				{

				}
				
				masterDef.freezeAtEnd					= false;
				
				slave.SetKinematic( true );
				slave.AddTag('ACS_man_finisher_06_lp');
				slaveSequencePart.animation				= 'man_finisher_06_lp';	
				slaveSequencePart.syncType				= AMST_SyncBeginning;
				slaveSequencePart.useRefBone			= 'Reference';	
				slaveSequencePart.rotationTypeUsingRefBone = SRT_ToMatchOthersRotation;
				slaveSequencePart.shouldRotate			= true;
				slaveSequencePart.shouldSlide			= false;
				slaveSequencePart.finalHeading			= thePlayer.GetHeading();
				
				slaveSequencePart.blendInTime			= 0.5f;
				slaveSequencePart.blendOutTime			= 0.5f;
				slaveSequencePart.sequenceIndex			= 0;
				slaveSequencePart.disableProxyCollisions = true;
				
				slaveDef.parts.PushBack( slaveSequencePart );
				slaveDef.entity							= slave;
		
				slaveDef.manualSlotName					= 'GAMEPLAY_SLOT';
				slaveDef.freezeAtEnd					= false;

				finisherAnim 							= false;
				
				break;		
			}
			case 'man_finisher_04_lp':
			{
				AddTimer('ACS_Finisher_Unblock_Action', 2.5, false);

				masterSequencePart.animation			= 'man_finisher_04_lp';
				masterSequencePart.syncType				= AMST_SyncBeginning;
				masterSequencePart.useRefBone			= 'Reference';
				masterSequencePart.rotationTypeUsingRefBone = SRT_TowardsOtherEntity;
				masterSequencePart.shouldSlide			= false;
				masterSequencePart.shouldRotate			= true;
				
				masterSequencePart.blendInTime			= 0.5f;
				masterSequencePart.blendOutTime			= 2.5f;
				masterSequencePart.sequenceIndex		= 0;
				
				masterDef.parts.PushBack( masterSequencePart );
				masterDef.entity						= master;
				
				masterDef.manualSlotName			= 'GAMEPLAY_SLOT';

				if ((thePlayer.IsLastEnemyKilled() && ACS_CustomFinishersCameraSettings() == 1) || ACS_CustomFinishersCameraSettings() == 2)
				{
					cameraAnimName = ProcessFinisherCameraAnimName( 'man_finisher_04_lp' );

					PlayCustomCamAnim( cameraAnimName, 0.15f, 3.0f, 1.f, 2.0f, true, CAP_Highest );
				}
				else if (ACS_CustomFinishersCameraSettings() == 0)
				{

				}

				masterDef.freezeAtEnd					= false;
				
				slave.SetKinematic( true );
				slave.AddTag('ACS_man_finisher_04_lp');
				slaveSequencePart.animation				= 'man_finisher_04_lp';	
				slaveSequencePart.syncType				= AMST_SyncBeginning;
				slaveSequencePart.useRefBone			= 'Reference';	
				slaveSequencePart.rotationTypeUsingRefBone = SRT_ToMatchOthersRotation;
				slaveSequencePart.shouldRotate			= true;
				slaveSequencePart.shouldSlide			= false;
				slaveSequencePart.finalHeading			= thePlayer.GetHeading();
				
				slaveSequencePart.blendInTime			= 0.5f;
				slaveSequencePart.blendOutTime			= 0.5f;
				slaveSequencePart.sequenceIndex			= 0;
				slaveSequencePart.disableProxyCollisions = true;
				
				slaveDef.parts.PushBack( slaveSequencePart );
				slaveDef.entity							= slave;
		
				slaveDef.manualSlotName					= 'GAMEPLAY_SLOT';
				slaveDef.freezeAtEnd					= false;
				
				finisherAnim 							= false;
				
				break;		
			}	
			case 'man_finisher_05_rp':
			{
				AddTimer('ACS_Finisher_Unblock_Action', 2.5, false);

				masterSequencePart.animation			= 'man_finisher_05_rp';
				masterSequencePart.syncType				= AMST_SyncBeginning;
				masterSequencePart.useRefBone			= 'Reference';
				masterSequencePart.rotationTypeUsingRefBone = SRT_TowardsOtherEntity;
				masterSequencePart.shouldSlide			= false;
				masterSequencePart.shouldRotate			= true;
				
				masterSequencePart.blendInTime			= 0.5f;
				masterSequencePart.blendOutTime			= 2.5f;
				masterSequencePart.sequenceIndex		= 0;
				
				masterDef.parts.PushBack( masterSequencePart );
				masterDef.entity						= master;
				
				masterDef.manualSlotName			= 'GAMEPLAY_SLOT';

				if ((thePlayer.IsLastEnemyKilled() && ACS_CustomFinishersCameraSettings() == 1) || ACS_CustomFinishersCameraSettings() == 2)
				{
					cameraAnimName = ProcessFinisherCameraAnimName( 'man_finisher_05_rp' );

					PlayCustomCamAnim( cameraAnimName, 0.15f, 3.0f, 1.f, 2.0f, true, CAP_Highest );
				}
				else if (ACS_CustomFinishersCameraSettings() == 0)
				{

				}

				masterDef.freezeAtEnd					= false;
				
				slave.SetKinematic( true );
				slave.AddTag('ACS_man_finisher_05_rp');
				slaveSequencePart.animation				= 'man_finisher_05_rp';	
				slaveSequencePart.syncType				= AMST_SyncBeginning;
				slaveSequencePart.useRefBone			= 'Reference';	
				slaveSequencePart.rotationTypeUsingRefBone = SRT_ToMatchOthersRotation;
				slaveSequencePart.shouldRotate			= true;
				slaveSequencePart.shouldSlide			= false;
				slaveSequencePart.finalHeading			= thePlayer.GetHeading();
				
				slaveSequencePart.blendInTime			= 0.5f;
				slaveSequencePart.blendOutTime			= 0.5f;
				slaveSequencePart.sequenceIndex			= 0;
				slaveSequencePart.disableProxyCollisions = true;
				
				slaveDef.parts.PushBack( slaveSequencePart );
				slaveDef.entity							= slave;
		
				slaveDef.manualSlotName					= 'GAMEPLAY_SLOT';
				slaveDef.freezeAtEnd					= false;

				finisherAnim 							= false;
				
				break;		
			}
			case 'man_finisher_dlc_torso_lp':
			{
				AddTimer('ACS_Finisher_Unblock_Action', 1.5, false);

				masterSequencePart.animation			= 'man_finisher_dlc_torso_lp';
				masterSequencePart.syncType				= AMST_SyncBeginning;
				masterSequencePart.useRefBone			= 'Reference';
				masterSequencePart.rotationTypeUsingRefBone = SRT_TowardsOtherEntity;
				masterSequencePart.shouldSlide			= true;
				masterSequencePart.shouldRotate			= true;
				
				masterSequencePart.blendInTime			= 0.5f;
				if (thePlayer.IsLastEnemyKilled())
				{
					masterSequencePart.blendOutTime			= 0.5f;
				}
				else
				{
					masterSequencePart.blendOutTime			= 1.5f;
				}
				masterSequencePart.sequenceIndex		= 0;
				
				masterDef.parts.PushBack( masterSequencePart );
				masterDef.entity						= master;
				
				masterDef.manualSlotName			= 'GAMEPLAY_SLOT';

				if ((thePlayer.IsLastEnemyKilled() && ACS_CustomFinishersCameraSettings() == 1) || ACS_CustomFinishersCameraSettings() == 2)
				{
					cameraAnimName = ProcessFinisherCameraAnimName( 'man_finisher_dlc_torso_lp' );

					PlayCustomCamAnim( cameraAnimName, 0.15f, 3.0f, 1.f, 2.0f, true, CAP_Highest );
				}
				else if (ACS_CustomFinishersCameraSettings() == 0)
				{

				}
				
				masterDef.freezeAtEnd					= false;
				
				slave.SetKinematic( true );
				slave.AddTag('ACS_man_finisher_dlc_torso_lp');
				slaveSequencePart.animation				= 'man_finisher_dlc_torso_lp';	
				slaveSequencePart.syncType				= AMST_SyncBeginning;
				slaveSequencePart.useRefBone			= 'Reference';	
				slaveSequencePart.rotationTypeUsingRefBone = SRT_ToMatchOthersRotation;
				slaveSequencePart.shouldRotate			= false;
				slaveSequencePart.shouldSlide			= false;
				slaveSequencePart.finalHeading			= thePlayer.GetHeading();
				
				slaveSequencePart.blendInTime			= 0.2f;
				slaveSequencePart.blendOutTime			= 2.5;
				slaveSequencePart.sequenceIndex			= 0;
				slaveSequencePart.disableProxyCollisions = true;
				
				slaveDef.parts.PushBack( slaveSequencePart );
				slaveDef.entity							= slave;
		
				slaveDef.manualSlotName					= 'GAMEPLAY_SLOT';
				slaveDef.freezeAtEnd					= false;
				
				finisherAnim 							= false;
				
				break;		
			}
			case 'man_finisher_dlc_torso_rp':
			{
				AddTimer('ACS_Finisher_Unblock_Action', 1.5, false);

				masterSequencePart.animation			= 'man_finisher_dlc_torso_rp';
				masterSequencePart.syncType				= AMST_SyncBeginning;
				masterSequencePart.useRefBone			= 'Reference';
				masterSequencePart.rotationTypeUsingRefBone = SRT_TowardsOtherEntity;
				masterSequencePart.shouldSlide			= true;
				masterSequencePart.shouldRotate			= true;
				
				masterSequencePart.blendInTime			= 0.5f;

				if (thePlayer.IsLastEnemyKilled())
				{
					masterSequencePart.blendOutTime			= 0.5f;
				}
				else
				{
					masterSequencePart.blendOutTime			= 1.5f;
				}
				
				masterSequencePart.sequenceIndex		= 0;
				
				masterDef.parts.PushBack( masterSequencePart );
				masterDef.entity						= master;
				
				masterDef.manualSlotName			= 'GAMEPLAY_SLOT';

				if ((thePlayer.IsLastEnemyKilled() && ACS_CustomFinishersCameraSettings() == 1) || ACS_CustomFinishersCameraSettings() == 2)
				{
					cameraAnimName = ProcessFinisherCameraAnimName( 'man_finisher_dlc_torso_rp' );

					PlayCustomCamAnim( cameraAnimName, 0.15f, 3.0f, 1.f, 2.0f, true, CAP_Highest );
				}
				else if (ACS_CustomFinishersCameraSettings() == 0)
				{

				}

				masterDef.freezeAtEnd					= false;
				
				slave.SetKinematic( true );

				slave.AddTag('ACS_man_finisher_dlc_torso_rp');

				slaveSequencePart.animation				= 'man_finisher_dlc_torso_rp';	
				slaveSequencePart.syncType				= AMST_SyncBeginning;
				slaveSequencePart.useRefBone			= 'Reference';	
				slaveSequencePart.rotationTypeUsingRefBone = SRT_ToMatchOthersRotation;
				slaveSequencePart.shouldRotate			= false;
				slaveSequencePart.shouldSlide			= false;
				slaveSequencePart.finalHeading			= thePlayer.GetHeading();
				
				slaveSequencePart.blendInTime			= 0.2f;
				slaveSequencePart.blendOutTime			= 2.5;
				slaveSequencePart.sequenceIndex			= 0;
				slaveSequencePart.disableProxyCollisions = true;
				
				slaveDef.parts.PushBack( slaveSequencePart );
				slaveDef.entity							= slave;
		
				slaveDef.manualSlotName					= 'GAMEPLAY_SLOT';
				slaveDef.freezeAtEnd					= false;
				
				finisherAnim 							= false;
				
				break;		
			}			
			default : 
			{
				AddTimer('ACS_Finisher_Unblock_Action', 0.5, false);
				return false;
			}
		}
		
		sequenceIndex = syncInstance.RegisterMaster( masterDef );
		
		
		actorMaster = (CActor)master;
		actorSlave = (CActor)slave;
		
		if(actorMaster)
		{
			actorMaster.SignalGameplayEventParamInt( 'SetupSyncInstance', instanceIndex );
			actorMaster.SignalGameplayEventParamInt( 'SetupSequenceIndex', sequenceIndex );
			if ( finisherAnim )
				actorMaster.SignalGameplayEvent( 'PlayFinisherSyncedAnim' );
			else
				actorMaster.SignalGameplayEvent( 'PlaySyncedAnim' );
			
		}
		
		sequenceIndex = syncInstance.RegisterSlave( slaveDef );
		if( sequenceIndex == -1 ) 
		{
			return false;
		}
		
		if(actorSlave)
		{
			if( syncAction == 'Throat' )
				actorSlave.SignalGameplayEventParamCName( 'SetupEndEvent', 'CriticalState' );
				
			actorSlave.SignalGameplayEventParamInt( 'SetupSyncInstance', instanceIndex );
			actorSlave.SignalGameplayEventParamInt( 'SetupSequenceIndex', sequenceIndex );
			if ( finisherAnim )
				actorSlave.SignalGameplayEvent( 'PlayFinisherSyncedAnim' );
			else
				actorSlave.SignalGameplayEvent( 'PlaySyncedAnim' );
		}
		
		return true;
	}

	var monster_finisher_index : int;

	default monster_finisher_index = -1;

	var previous_monster_finisher_index : int;

	default previous_monster_finisher_index = -1;

	public function ACS_SetupSyncAnimInternalMonster( syncAction : name, master, slave : CEntity ) : bool
	{
		var masterDef, slaveDef						: SAnimationSequenceDefinition;
		var masterSequencePart, slaveSequencePart	: SAnimationSequencePartDefinition;
		var syncInstance							: CAnimationManualSlotSyncInstance;
		
		var instanceIndex							: int;
		var sequenceIndex							: int;
		
		var temp 									: name; 
		var tempF 									: float;
		var rot 									: EulerAngles;
		
		var finisherAnim 							: bool;
		var pos 									: Vector;
		
		var syncAnimName, cameraAnimName			: name;
		
		var node, node1 							: CNode; 
		var rot0, rot1 								: EulerAngles;
		
		var masterAnim, slaveAnim 					: name;
		var syncAnimIndex							: int;
		var currentAnimInstance						: CAnimationManualSlotSyncInstance;
		var actorMaster, actorSlave 				: CActor;

		var fear_actors								: array<CActor>;
		var j, k 									: int;
		var fear_actor								: CActor;
		var animatedComponentFearActor				: CAnimatedComponent;

		var finisher_actor							: CActor;
		var animatedComponentFinisherActor			: CAnimatedComponent;
		
		syncInstance = theGame.GetSyncAnimManager().CreateNewSyncInstance( instanceIndex );
		syncAnimIndex = instanceIndex;
		currentAnimInstance = syncInstance;
		
		//thePlayer.BlockAction(EIAB_Interactions, 'SyncManager' );
		//thePlayer.BlockAction(EIAB_FastTravel, 'SyncManager' );

		action_interrupt_with_igni_sword();

		movementAdjustor.CancelAll();

		if (thePlayer.HasTag('ACS_Size_Adjusted'))
		{
			Grow_Geralt_Immediate_Fast();

			thePlayer.RemoveTag('ACS_Size_Adjusted');
		}

		//AddTimer( 'ACS_Set_Player_Scale', 0.01, true );

		thePlayer.BlockAllActions( 'ACS_Finisher_Action_Block', true );

		thePlayer.SetGuarded(false);
		thePlayer.OnGuardedReleased();

		ACS_Axii_Shield_Destroy_IMMEDIATE();

		thePlayer.AddTag('ACS_IsPerformingFinisher');

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
		thePlayer.SetCanPlayHitAnim(false); 
		//thePlayer.EnableCharacterCollisions(false); 
		thePlayer.AddBuffImmunity_AllNegative('ACS_Finisher_Immune_Negative', true); 
		thePlayer.AddBuffImmunity_AllCritical('ACS_Finisher_Immune_Critical', true); 

		//ChangeInteractionPriority();
		
		RemoveTimer('ACS_Finisher_Unblock_Action');
		AddTimer('ACS_Finisher_Unblock_Action', 1.5, false);

		/*

		combatTarget.Kill( 'AutoFinisher', false, thePlayer );
		thePlayer.SetFinisherVictim( combatTarget );
		thePlayer.CleanCombatActionBuffer();
		forcedFinisherVictim = combatTarget;

		moveTargets.Clear();
		moveTargets = thePlayer.GetMoveTargets();
				
		for( i = 0; i < moveTargets.Size(); i += 1 )
		{
			if( combatTarget != moveTargets[i] )
				moveTargets[i].SignalGameplayEvent( 'InterruptChargeAttack' );
		}	
		
		if( theGame.GetInGameConfigWrapper().GetVarValue( 'Gameplay', 'AutomaticFinishersEnabled' ) == "true" )
			combatTarget.AddAbility( 'ForceFinisher', false );
		
		if( combatTarget.HasTag( 'ForceFinisher' ) )
			combatTarget.AddAbility( 'ForceFinisher', false );
			
		combatTarget.SignalGameplayEvent( 'ForceFinisher' );
		
		thePlayer.FindMoveTarget();

		AddTimer( 'ACS_SignalFinisher', 0.2, false );

		*/

		moveTargets.Clear();
		moveTargets = thePlayer.GetMoveTargets();
				
		for( j = 0; j < moveTargets.Size(); j += 1 )
		{
			fear_actor = ((CActor)(moveTargets[j]));

			animatedComponentFearActor = (CAnimatedComponent)fear_actor.GetComponentByClassName( 'CAnimatedComponent' );

			if ( fear_actor 
			&& !fear_actor.HasTag('ACS_Final_Fear_Stack')
			)
			{
				fear_actor.SignalGameplayEvent( 'InterruptChargeAttack' );
				
				animatedComponentFearActor.FreezePoseFadeIn(0.125f);

				animatedComponentFearActor.UnfreezePoseFadeOut(3.f);
			}	
		}
		
		if (((CActor)slave).IsAlive())
		{
			((CActor)slave).Kill( 'ACS_Finisher', false, thePlayer );
		}

		switch( syncAction )
		{
			case 'monster_stab_finisher':
			{
				masterSequencePart.animation			= 'man_ger_crawl_finish';
				masterSequencePart.syncType				= AMST_SyncBeginning;
				masterSequencePart.shouldSlide			= true;
				masterSequencePart.shouldRotate			= true;

				pos = ACSGetActorPosition( slave );				
				masterSequencePart.finalPosition	= 1.15 * VecNormalize( master.GetWorldPosition() - pos ) + pos;
				masterSequencePart.finalHeading		= VecHeading( pos - master.GetWorldPosition() );
				
				masterSequencePart.blendInTime			= 0.5f;
				masterSequencePart.blendOutTime			= 1.0f;
				masterSequencePart.sequenceIndex		= 0;
				
				masterDef.parts.PushBack( masterSequencePart );
				masterDef.entity						= master;
				
				masterDef.manualSlotName			= 'GAMEPLAY_SLOT';

				masterDef.freezeAtEnd					= false;
				
				//slave.SetKinematic( true );

				slave.AddTag('ACS_monster_stab_finisher');

				slaveSequencePart.animation				= '';	
				slaveSequencePart.syncType				= AMST_SyncBeginning;
				slaveSequencePart.shouldRotate			= false;
				slaveSequencePart.shouldSlide			= false;
				slaveSequencePart.finalHeading			= thePlayer.GetHeading();
				
				slaveSequencePart.blendInTime			= 0;
				slaveSequencePart.blendOutTime			= 0;
				slaveSequencePart.sequenceIndex			= 0;
				slaveSequencePart.disableProxyCollisions = false;
				
				slaveDef.parts.PushBack( slaveSequencePart );
				slaveDef.entity							= slave;
		
				slaveDef.manualSlotName					= 'GAMEPLAY_SLOT';
				slaveDef.freezeAtEnd					= false;
				
				finisherAnim 							= false;
				
				break;		
			}
			case 'monster_slice_finisher':
			{
				monster_finisher_index = RandDifferent(previous_monster_finisher_index , 8);

				switch (monster_finisher_index) 
				{			
					case 7:

					masterSequencePart.animation			= 'man_finisher_dlc_legs_rp';
					masterSequencePart.blendInTime			= 0.5f;
					masterSequencePart.blendOutTime			= 1.0f;
					cameraAnimName = ProcessFinisherCameraAnimName( 'man_finisher_dlc_legs_rp' );
					break;	
						
					case 6:

					masterSequencePart.animation			= 'man_finisher_dlc_legs_lp';
					masterSequencePart.blendInTime			= 0.5f;
					masterSequencePart.blendOutTime			= 1.0f;
					cameraAnimName = ProcessFinisherCameraAnimName( 'man_finisher_dlc_legs_lp' );
					break;	

					case 5:

					masterSequencePart.animation			= 'man_finisher_dlc_legs_rp';
					masterSequencePart.blendInTime			= 0.5f;
					masterSequencePart.blendOutTime			= 1.0f;
					cameraAnimName = ProcessFinisherCameraAnimName( 'man_finisher_dlc_legs_rp' );
					break;	
						
					case 4:

					masterSequencePart.animation			= 'man_finisher_dlc_legs_lp';
					masterSequencePart.blendInTime			= 0.5f;
					masterSequencePart.blendOutTime			= 1.0f;
					cameraAnimName = ProcessFinisherCameraAnimName( 'man_finisher_dlc_legs_lp' );
					break;	

					case 3:

					masterSequencePart.animation			= 'man_finisher_dlc_torso_lp';
					masterSequencePart.blendInTime			= 0.5f;
					if (thePlayer.IsLastEnemyKilled())
					{
						masterSequencePart.blendOutTime			= 0.5f;
					}
					else
					{
						masterSequencePart.blendOutTime			= 1.5f;
					}
					cameraAnimName = ProcessFinisherCameraAnimName( 'man_finisher_dlc_torso_lp' );
					break;	
							
					case 2:

					masterSequencePart.animation			= 'man_finisher_dlc_torso_rp';
					masterSequencePart.blendInTime			= 0.5f;
					if (thePlayer.IsLastEnemyKilled())
					{
						masterSequencePart.blendOutTime			= 0.5f;
					}
					else
					{
						masterSequencePart.blendOutTime			= 1.5f;
					}
					cameraAnimName = ProcessFinisherCameraAnimName( 'man_finisher_dlc_torso_rp' );
					break;	

					case 1:

					masterSequencePart.animation			= 'man_finisher_dlc_legs_rp';
					masterSequencePart.blendInTime			= 0.5f;
					masterSequencePart.blendOutTime			= 1.0f;
					cameraAnimName = ProcessFinisherCameraAnimName( 'man_finisher_dlc_legs_rp' );
					break;	
						
					default:

					masterSequencePart.animation			= 'man_finisher_dlc_legs_lp';
					masterSequencePart.blendInTime			= 0.5f;
					masterSequencePart.blendOutTime			= 1.0f;
					cameraAnimName = ProcessFinisherCameraAnimName( 'man_finisher_dlc_legs_lp' );
					break;	
				}

				previous_monster_finisher_index = monster_finisher_index;

				masterSequencePart.syncType				= AMST_SyncBeginning;
				masterSequencePart.useRefBone			= 'Reference';
				masterSequencePart.rotationTypeUsingRefBone = SRT_TowardsOtherEntity;
				masterSequencePart.shouldSlide			= true;
				masterSequencePart.shouldRotate			= true;
				masterSequencePart.sequenceIndex		= 0;
				masterDef.parts.PushBack( masterSequencePart );
				masterDef.entity						= master;
				masterDef.manualSlotName			= 'GAMEPLAY_SLOT';

				masterDef.freezeAtEnd					= false;
				
				//slave.SetKinematic( true );

				slave.AddTag('ACS_monster_slice_finisher');

				finisher_actor = ((CActor)(slave));

				animatedComponentFinisherActor = (CAnimatedComponent)finisher_actor.GetComponentByClassName( 'CAnimatedComponent' );

				if 
				(finisher_actor.HasAbility('mon_ghoul_base')
				|| finisher_actor.HasTag('ACS_Nekker_Guardian'))
				{
					finisher_actor.SetAnimationSpeedMultiplier(0.5);
				}
				else
				{
					animatedComponentFinisherActor.FreezePoseFadeIn(0.125f);

					animatedComponentFinisherActor.UnfreezePoseFadeOut(2.75f);
				}
				

				if ((thePlayer.IsLastEnemyKilled() && ACS_CustomFinishersCameraSettings() == 1) || ACS_CustomFinishersCameraSettings() == 2)
				{
					PlayCustomCamAnim( cameraAnimName, 0.15f, 3.0f, 1.f, 2.0f, true, CAP_Highest );
				}
				else if (ACS_CustomFinishersCameraSettings() == 0)
				{

				}

				slaveSequencePart.animation				= '';	
				slaveSequencePart.syncType				= AMST_SyncBeginning;
				slaveSequencePart.shouldRotate			= false;
				slaveSequencePart.shouldSlide			= false;
				slaveSequencePart.finalHeading			= thePlayer.GetHeading();
				
				slaveSequencePart.blendInTime			= 0;
				slaveSequencePart.blendOutTime			= 0;
				slaveSequencePart.sequenceIndex			= 0;
				slaveSequencePart.disableProxyCollisions = false;
				
				slaveDef.parts.PushBack( slaveSequencePart );
				slaveDef.entity							= slave;
		
				slaveDef.manualSlotName					= 'GAMEPLAY_SLOT';
				slaveDef.freezeAtEnd					= false;
				
				finisherAnim 							= false;
				
				break;		
			}		
			default : 
			{
				return false;
			}
		}
		
		sequenceIndex = syncInstance.RegisterMaster( masterDef );
		
		
		actorMaster = (CActor)master;
		actorSlave = (CActor)slave;
		
		if(actorMaster)
		{
			actorMaster.SignalGameplayEventParamInt( 'SetupSyncInstance', instanceIndex );
			actorMaster.SignalGameplayEventParamInt( 'SetupSequenceIndex', sequenceIndex );
			if ( finisherAnim )
				actorMaster.SignalGameplayEvent( 'PlayFinisherSyncedAnim' );
			else
				actorMaster.SignalGameplayEvent( 'PlaySyncedAnim' );
			
		}
		
		sequenceIndex = syncInstance.RegisterSlave( slaveDef );
		if( sequenceIndex == -1 ) 
		{
			return false;
		}
		
		/*
		if(actorSlave)
		{
			if( syncAction == 'Throat' )
				actorSlave.SignalGameplayEventParamCName( 'SetupEndEvent', 'CriticalState' );
				
			actorSlave.SignalGameplayEventParamInt( 'SetupSyncInstance', instanceIndex );
			actorSlave.SignalGameplayEventParamInt( 'SetupSequenceIndex', sequenceIndex );
			if ( finisherAnim )
				actorSlave.SignalGameplayEvent( 'PlayFinisherSyncedAnim' );
			else
				actorSlave.SignalGameplayEvent( 'PlaySyncedAnim' );
		}
		*/

		return true;
	}

	timer function ACS_RemoveCoveredBlood( time : float , id : int )
	{
		RemoveAllCoveredBlood();
	}

	function RemoveAllCoveredBlood()
	{
		thePlayer.DestroyEffect('covered_blood_red_ACS');

		thePlayer.DestroyEffect('covered_blood_black_ACS');

		thePlayer.DestroyEffect('covered_blood_yellow_ACS');

		thePlayer.DestroyEffect('covered_blood_green_ACS');

		if (GetACSTransformationWerewolf())
		{
			GetACSTransformationWerewolf().StopEffect('blood_effect_claws_test');
			GetACSTransformationWerewolf().StopEffect('blood_effect_claws_left');
			GetACSTransformationWerewolf().StopEffect('blood_effect_claws_right');

			GetACSTransformationWerewolf().StopEffect('blood_effect_claws_test_black');
			GetACSTransformationWerewolf().StopEffect('blood_effect_claws_left_black');
			GetACSTransformationWerewolf().StopEffect('blood_effect_claws_right_black');

			GetACSTransformationWerewolf().StopEffect('blood_effect_claws_test_green');
			GetACSTransformationWerewolf().StopEffect('blood_effect_claws_left_green');
			GetACSTransformationWerewolf().StopEffect('blood_effect_claws_right_green');

			GetACSTransformationWerewolf().StopEffect('blood_effect_claws_test_yellow');
			GetACSTransformationWerewolf().StopEffect('blood_effect_claws_left_yellow');
			GetACSTransformationWerewolf().StopEffect('blood_effect_claws_right_yellow');

			GetACSTransformationWerewolf().StopEffect('blood_effect_jaw');
			GetACSTransformationWerewolf().StopEffect('blood_effect_jaw_black');
			GetACSTransformationWerewolf().StopEffect('blood_effect_jaw_green');
			GetACSTransformationWerewolf().StopEffect('blood_effect_jaw_yellow');
		}

		if (GetACSTransformationVampiress())
		{
			GetACSTransformationVampiress().StopEffect('blood_effect_claws_test');

			GetACSTransformationVampiress().StopEffect('blood_effect_claws_test_black');

			GetACSTransformationVampiress().StopEffect('blood_effect_claws_test_green');

			GetACSTransformationVampiress().StopEffect('blood_effect_claws_test_yellow');
		}
	}

	function NPC_BloodCovered_Effect(action : W3DamageAction)
	{
		var tmpBool 				: bool;
		var mc 						: EMonsterCategory;
		var tmpName 				: name;
	
		npc = (CActor)action.victim;

		playerAttacker = (CPlayer)action.attacker;

		if (playerAttacker 
		&& npc
		&& !action.WasDodged() 
		&& !(((W3Action_Attack)action).IsParried())
		)
		{
			theGame.GetMonsterParamsForActor(npc, mc, tmpName, tmpBool, tmpBool, tmpBool);

			RemoveAllCoveredBlood();

			if( ((CNewNPC)npc).GetBloodType() == BT_Red) 
			{
				if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
				{
					if (npc.HasAbility('mon_lessog_base')
					|| npc.HasAbility('mon_sprigan_base')
					)
					{						
						if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}
					} 
					else
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}
					}
				}
			}
			else if( ((CNewNPC)npc).GetBloodType() == BT_Green) 
			{
				if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
				{
					if (npc.HasAbility('mon_kikimore_base')
					|| npc.HasAbility('mon_black_spider_base')
					|| npc.HasAbility('mon_black_spider_ep2_base')
					)
					{						
						if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}
					} 
					else 
					{
						if (!thePlayer.IsEffectActive('covered_blood_green_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_green_ACS');}
					}
				}
			}
			else if( ((CNewNPC)npc).GetBloodType() == BT_Yellow) 
			{
				if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
				{
					if (npc.HasAbility('mon_archespor_base'))
					{
						if (!thePlayer.IsEffectActive('covered_blood_yellow_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_yellow_ACS');}
					} 
					else 
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}
					}
				}
			}
			else if( ((CNewNPC)npc).GetBloodType() == BT_Black) 
			{
				if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
				{
					if ( mc == MC_Vampire ) 
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}
					}
					else if ( mc == MC_Magicals ) 
					{
						if (npc.HasAbility('mon_golem_base')
						|| npc.HasAbility('mon_djinn')
						|| npc.HasAbility('mon_gargoyle')
						)
						{
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}
						}
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}
						}
					}
					else
					{
						if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}
					}
				}
			}
			else
			{
				if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
				{
					if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}
				}
			}

			RemoveTimer('ACS_RemoveCoveredBlood');
			AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
		}
	}
	
	function Fear_Stack()
	{
		var fear_actors																	: array<CActor>;
		var k 																			: int;
		var fear_actor																	: CActor;
		var animatedComponentFearActor													: CAnimatedComponent;
		var movementAdjustorFearActor													: CMovementAdjustor;
		var ticketFearActor																: SMovementAdjustmentRequestTicket;

		fear_actors.Clear();
			
		fear_actors = thePlayer.GetNPCsAndPlayersInRange( 20, 2, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors + FLAG_Attitude_Hostile);

		if( fear_actors.Size() > 0 )
		{
			for( k = 0; k < fear_actors.Size(); k += 1 )
			{
				fear_actor = fear_actors[k];

				animatedComponentFearActor = (CAnimatedComponent)fear_actor.GetComponentByClassName( 'CAnimatedComponent' );

				movementAdjustorFearActor = fear_actor.GetMovingAgentComponent().GetMovementAdjustor();

				targetDistance = VecDistanceSquared2D( thePlayer.GetWorldPosition(), fear_actor.GetWorldPosition() ) ;
			
				if ( fear_actor 
				&& fear_actor.IsHuman()
				&& fear_actor.IsMan()
				&& !fear_actor.HasTag('ACS_Shades_Crusader')
				&& !fear_actor.HasTag('ACS_Shades_Hunter')
				&& ((CNewNPC)fear_actor).GetNPCType() != ENGT_Quest
				&& !fear_actor.HasTag('ACS_Swapped_To_Shield')
				//&& RandF() < 0.875
				&& !fear_actor.IsUsingHorse()
				&& !fear_actor.IsUsingVehicle()
				&& !fear_actor.HasAbility('Boss')
				&& !fear_actor.HasAbility('ablIgnoreSigns')
				&& !fear_actor.HasAbility('DisableFinishers')
				&& !fear_actor.HasAbility('MonsterMHBoss')
				)
				{
					if (!fear_actor.HasTag('ACS_1st_Fear_Stack')
					&& !fear_actor.HasTag('ACS_2nd_Fear_Stack')
					)
					{
						fear_actor.AddTag('ACS_1st_Fear_Stack');
					}
					else if (fear_actor.HasTag('ACS_1st_Fear_Stack')
					&& !fear_actor.HasTag('ACS_2nd_Fear_Stack')
					)
					{
						fear_actor.AddTag('ACS_2nd_Fear_Stack');
					}
					else if (fear_actor.HasTag('ACS_1st_Fear_Stack')
					&& fear_actor.HasTag('ACS_2nd_Fear_Stack')	
					)
					{
						if (!fear_actor.HasTag('ACS_Final_Fear_Stack'))
						{
							if (!fear_actor.HasAbility('DisableFinishers'))
							{
								fear_actor.AddAbility( 'DisableFinishers', true);
							}

							if (fear_actor.HasAbility('ForceFinisher'))
							{
								fear_actor.RemoveAbility( 'ForceFinisher');
							} 

							fear_actor.SignalGameplayEvent('DisableFinisher');

							if( ((CNewNPC)fear_actor).IsShielded( NULL ) )
							{
								((CNewNPC)fear_actor).ProcessShieldDestruction();
							}

							//fear_actor.SignalGameplayEvent('LeaveCurrentCombatStyle');

							//fear_actor.SetBehaviorVariable( 'combatTauntType', 0.f );

							(fear_actor.GetInventory().GetItemEntityUnsafe( fear_actor.GetInventory().GetItemFromSlot( 'r_weapon' ) )).SetHideInGame(true);

							fear_actor.AddEffectDefault( EET_Blindness, fear_actor, 'console' );

							ticketFearActor = movementAdjustorFearActor.GetRequest( 'ACS_NPC_Fear_Rotate');
							movementAdjustorFearActor.CancelByName( 'ACS_NPC_Fear_Rotate' );
							movementAdjustorFearActor.CancelAll();

							ticketFearActor = movementAdjustorFearActor.CreateNewRequest( 'ACS_NPC_Fear_Rotate' );
							movementAdjustorFearActor.AdjustmentDuration( ticketFearActor, 0.25 );
							movementAdjustorFearActor.MaxRotationAdjustmentSpeed( ticketFearActor, 500000 );

							if( targetDistance <= 3 * 3 ) 
							{
								if (RandF() < 0.33)
								{
									fear_actor.AddTag('ACS_Scared_On_Ground');

									movementAdjustorFearActor.RotateTowards( ticketFearActor, thePlayer );

									if (RandF() < 0.5)
									{
										animatedComponentFearActor.PlaySlotAnimationAsync ( 'man_ex_scared_ground_start_1', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
									}
									else
									{
										animatedComponentFearActor.PlaySlotAnimationAsync ( 'man_ex_scared_ground_start_2', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
									}
								}
								else
								{
									fear_actor.AddTag('ACS_Scared_Standing');

									if (RandF() < 0.5)
									{
										movementAdjustorFearActor.RotateTowards( ticketFearActor, thePlayer, RandRangeF(225,135) );

										animatedComponentFearActor.PlaySlotAnimationAsync ( 'dialogue_man_ex_scared_run_loop', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
									}
									else
									{
										movementAdjustorFearActor.RotateTowards( ticketFearActor, thePlayer );

										if (RandF() < 0.5)
										{
											animatedComponentFearActor.PlaySlotAnimationAsync ( 'man_ex_scared_loop_1', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
										}
										else
										{
											animatedComponentFearActor.PlaySlotAnimationAsync ( 'man_ex_scared_loop_2', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
										}
									}
								}
							}
							else if( targetDistance > 3 * 3 && targetDistance <= 20 * 20 ) 
							{
								if (RandF() < 0.25)
								{
									fear_actor.AddTag('ACS_Scared_On_Ground');

									movementAdjustorFearActor.RotateTowards( ticketFearActor, thePlayer );

									if (RandF() < 0.5)
									{
										animatedComponentFearActor.PlaySlotAnimationAsync ( 'man_ex_scared_ground_start_1', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
									}
									else
									{
										animatedComponentFearActor.PlaySlotAnimationAsync ( 'man_ex_scared_ground_start_2', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
									}
								}
								else
								{
									fear_actor.AddTag('ACS_Scared_Standing');

									if (RandF() < 0.5)
									{
										movementAdjustorFearActor.RotateTowards( ticketFearActor, thePlayer, RandRangeF(225,135) );

										animatedComponentFearActor.PlaySlotAnimationAsync ( 'dialogue_man_ex_scared_run_loop', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
									}
									else
									{
										movementAdjustorFearActor.RotateTowards( ticketFearActor, thePlayer );

										if (RandF() < 0.5)
										{
											animatedComponentFearActor.PlaySlotAnimationAsync ( 'man_ex_scared_loop_1', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
										}
										else
										{
											animatedComponentFearActor.PlaySlotAnimationAsync ( 'man_ex_scared_loop_2', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
										}
									}
								}
							}

							fear_actor.AddTag('ACS_Final_Fear_Stack');
						}
					}
				}
			}
		}
	}

	function Finisher_Fear()
	{
		var fear_actors																	: array<CActor>;
		var k 																			: int;
		var fear_actor																	: CActor;
		var animatedComponentFearActor													: CAnimatedComponent;

		fear_actors.Clear();
			
		fear_actors = thePlayer.GetNPCsAndPlayersInRange( 5, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors + FLAG_Attitude_Hostile);

		if( fear_actors.Size() > 0 )
		{
			for( k = 0; k < fear_actors.Size(); k += 1 )
			{
				fear_actor = fear_actors[k];

				animatedComponentFearActor = (CAnimatedComponent)fear_actor.GetComponentByClassName( 'CAnimatedComponent' );
			
				if ( fear_actor 
				&& !fear_actor.HasTag('ACS_Final_Fear_Stack')
				)
				{
					fear_actor.SignalGameplayEvent( 'InterruptChargeAttack' );

					animatedComponentFearActor.FreezePoseFadeIn(0.5f);

					animatedComponentFearActor.UnfreezePoseFadeOut(2.f);
				}
			}
		}
	}

	var vACS_Unseen_Blade_Summon 		: cACS_Unseen_Blade_Summon;

	timer function unseen_blade_spawn_delay( time : float , id : int )
	{
		if(
		!theGame.IsDialogOrCutscenePlaying() 
		&& !thePlayer.IsInNonGameplayCutscene() 
		&& !thePlayer.IsInGameplayScene())
		{
			if(
			!ACS_Blade_Of_The_Unseen()
			&& !ACS_Blade_Of_The_Unseen().IsAlive()
			&& !ACS_PlayerSettlementCheck(50))
			{
				GetACSStorage().Number_Of_Bruxae_Slain_Reset();

				RemoveTimer('unseen_blade_spawn_delay');
				RemoveTimer('unseen_blade_hunt_delay');
				AddTimer('unseen_blade_hunt_delay', 60, true);

				vACS_Unseen_Blade_Summon = new cACS_Unseen_Blade_Summon in this;

				vACS_Unseen_Blade_Summon.ACS_Unseen_Blade_Summon_Start_Engage();
			}
			else
			{
				if( RandF() < 0.5 ) 
				{
					GetWitcherPlayer().DisplayHudMessage( "The blood of those vampiresses are on your hands. You cannot evade me forever..." );
				}
				else
				{
					GetWitcherPlayer().DisplayHudMessage( "You will pay for the blood of those vampiresses you've slain." );
				}
			}
		}
	}

	timer function unseen_blade_hunt_delay( time : float , id : int )
	{
		var playerRot, rotationAdjusted 				: EulerAngles;
		var spawnPos									: Vector;

		if(
		!theGame.IsDialogOrCutscenePlaying() 
		&& !thePlayer.IsInNonGameplayCutscene() 
		&& !thePlayer.IsInGameplayScene())
		{
			if(
			ACS_Blade_Of_The_Unseen()
			&& ACS_Blade_Of_The_Unseen().IsAlive()
			&& !ACS_PlayerSettlementCheck(50))
			{
				playerRot = thePlayer.GetWorldRotation();

				playerRot.Yaw += 180;

				rotationAdjusted = EulerAngles(0,0,0);

				rotationAdjusted.Yaw = playerRot.Yaw;

				spawnPos = theCamera.GetCameraPosition() + VecFromHeading(theCamera.GetCameraHeading()) * 10;

				theGame.GetWorld().NavigationFindSafeSpot(spawnPos, 0.5f, 20.f, spawnPos);

				ACS_Blade_Of_The_Unseen().TeleportWithRotation(ACSPlayerFixZAxis(spawnPos), rotationAdjusted);
			}
			else
			{
				if( RandF() < 0.5 ) 
				{
					GetWitcherPlayer().DisplayHudMessage( "The blood of those vampiresses are on your hands. You cannot evade me forever..." );
				}
				else
				{
					GetWitcherPlayer().DisplayHudMessage( "You will pay for the blood of those vampiresses you've slain." );
				}
			}
		}
	}

	function PlayerCommentEnd()
	{
		player_comment_index_COMBAT_END = RandDifferent(this.previous_player_comment_index_COMBAT_END , 2);

		switch (player_comment_index_COMBAT_END) 
		{				
			case 1:
			thePlayer.PlayBattleCry( 'BattleCryMonstersEnd', 1, true, false);
			break;	
						
			default:
			thePlayer.PlayBattleCry('BattleCryHumansEnd', 1, true, false);
			break;
		}

		this.previous_player_comment_index_COMBAT_END = player_comment_index_COMBAT_END;
	}

	function ACS_Finisher_Internal(npc : CActor, action : W3DamageAction)
	{
		var params 																														: SCustomEffectParams;
	
		if (ACS_Transformation_Activated_Check())
		{
			return;
		}

		if (npc.GetImmortalityMode() != AIM_Invulnerable
		&& npc.GetImmortalityMode() != AIM_Immortal
		&& !npc.IsUsingHorse()
		&& !npc.IsUsingVehicle()
		)
		{
			wounds.Clear();

			finisherDist = 2.75f;

			if (ACS_Player_Scale() > 1)
			{
				finisherDist += ACS_Player_Scale() * 0.75;
			}

			npc.SetBehaviorMimicVariable( 'gameplayMimicsMode', (float)(int)GMM_Tpose );

			if ( npc.HasTag('ACS_Final_Fear_Stack') 
			&& npc.IsHuman()
			&& ACS_BuffCheck()
			&& CrossbowCheck()
			&& FinisherCheck() 
			)
			{	
				dismembermentComp = (CDismembermentComponent)(npc.GetComponentByClassName( 'CDismembermentComponent' ));
				if(!dismembermentComp) return;
				
				dismembermentComp.GetWoundsNames( wounds );

				//for( i=0; i < wounds.Size(); i+=1 )
				for( i=wounds.Size()-1; i>=0; i-=1 )
				{
					if( !StrContains( wounds[ i ], "gash" ) 
					)
					{
						wounds.EraseFast( i );
					}
				}
				
				if ( wounds.Size() > 0 )
				{
					usedWound = wounds[ RandRange( wounds.Size() ) ];
				}

				movementAdjustor.CancelAll();
			
				if (!thePlayer.IsWeaponHeld('fist') )
				{
					npc.SetDismembermentInfo( usedWound, npc.GetWorldPosition() - npc.GetWorldPosition(), false, DETF_Igni );
				}

				npc.AddTimer( 'DelayedDismemberTimer', 0.05f, false );

				action_interrupt_with_igni_sword();

				ACS_PerformFinisher(npc);

				npc.SoundEvent("cmb_play_hit_heavy");
				GetWitcherPlayer().SoundEvent("cmb_play_hit_heavy");
				GetWitcherPlayer().SoundEvent("cmb_play_dismemberment_gore");
				GetWitcherPlayer().SoundEvent("monster_dettlaff_monster_vein_hit_blood");

				npc.DrainStamina( ESAT_FixedValue, npc.GetStatMax( BCS_Stamina ), 60 );

				if( RandF() < 0.25 ) 
				{
					PlayerCommentEnd();
				}

				if (ACS_Armor_Equipped_Check())
				{
					thePlayer.SoundEvent("monster_caretaker_fx_black_exhale");

					thePlayer.SoundEvent("monster_caretaker_fx_summon");
					
					if (thePlayer.GetStat(BCS_Focus) == thePlayer.GetStatMax(BCS_Focus)
					&& thePlayer.GetStat(BCS_Stamina) == thePlayer.GetStatMax(BCS_Stamina))
					{
						npc.DestroyEffect('critical_burning');
						npc.PlayEffectSingle('critical_burning');
					}
				}

				return;
			}
			else if (
			( npc.GetCurrentHealth() <= 0.01 )
			&& FinisherCheck() 
			&& ACS_BuffCheck()
			&& CrossbowCheck()
			//&& !npc.HasTag('ACS_caretaker_shade')
			//&& !npc.HasTag('ACS_Wild_Hunt_Rider')
			)
			{	
				if ( VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetNearestPointInBothPersonalSpaces( thePlayer.GetWorldPosition() ) ) < finisherDist * finisherDist )
				{
					Fear_Stack();
					
					if (npc.HasTag('ACS_Poise_Finisher'))
					{
						npc.RemoveAllBuffsOfType(EET_Blindness);
					}

					if (thePlayer.HasTag('ACS_Size_Adjusted'))
					{
						Grow_Geralt_Immediate_Fast();

						thePlayer.RemoveTag('ACS_Size_Adjusted');
					}

					dismembermentComp = (CDismembermentComponent)(npc.GetComponentByClassName( 'CDismembermentComponent' ));
					if(!dismembermentComp) return;
					
					dismembermentComp.GetWoundsNames( wounds );

					//for( i=0; i < wounds.Size(); i+=1 )
					for( i=wounds.Size()-1; i>=0; i-=1 )
					{
						if( !StrContains( wounds[ i ], "gash" ) 
						)
						{
							wounds.EraseFast( i );
						}
					}
					
					if ( wounds.Size() > 0 )
					{
						usedWound = wounds[ RandRange( wounds.Size() ) ];
					}

					movementAdjustor.CancelAll();
					
					if (!thePlayer.IsWeaponHeld('fist') )
					{
						npc.SetDismembermentInfo( usedWound, npc.GetWorldPosition() - npc.GetWorldPosition(), false, DETF_Igni );
					}

					npc.AddTimer( 'DelayedDismemberTimer', 0.05f, false );
	
					action_interrupt_with_igni_sword();

					ACS_PerformFinisher(npc);

					npc.SoundEvent("cmb_play_hit_heavy");
					GetWitcherPlayer().SoundEvent("cmb_play_hit_heavy");
					GetWitcherPlayer().SoundEvent("cmb_play_dismemberment_gore");
					GetWitcherPlayer().SoundEvent("monster_dettlaff_monster_vein_hit_blood");

					npc.DrainStamina( ESAT_FixedValue, npc.GetStatMax( BCS_Stamina ), 60 );

					if( RandF() < 0.25 ) 
					{
						PlayerCommentEnd();
					}

					if (ACS_Armor_Equipped_Check())
					{
						thePlayer.SoundEvent("monster_caretaker_fx_black_exhale");

						thePlayer.SoundEvent("monster_caretaker_fx_summon");
						
						if (thePlayer.GetStat(BCS_Focus) == thePlayer.GetStatMax(BCS_Focus)
						&& thePlayer.GetStat(BCS_Stamina) == thePlayer.GetStatMax(BCS_Stamina))
						{
							npc.DestroyEffect('critical_burning');
							npc.PlayEffectSingle('critical_burning');
						}
					}

					//ACS_EventHack_Attack();
				}
			}
			else if (
			( npc.GetStat( BCS_Stamina ) <= 0.01 )
			&& ( npc.GetStat( BCS_Vitality ) <= 0.75 )
			&& FinisherCheck() 
			&& CrossbowCheck()
			&& ACS_BuffCheck()
			&& npc.IsHuman()
			//&& !npc.HasTag('ACS_caretaker_shade')
			//&& !npc.HasTag('ACS_Wild_Hunt_Rider')
			)
			{	
				if ( VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetNearestPointInBothPersonalSpaces( thePlayer.GetWorldPosition() ) ) < finisherDist * finisherDist )
				{
					if (npc.HasTag('ACS_Poise_Finisher'))
					{
						npc.RemoveAllBuffsOfType(EET_Blindness);
					}
					else
					{
						params.effectType = EET_Blindness;
						params.creator = npc;
						params.sourceName = "acs_poise_finisher_effect";
						params.duration = 600;

						npc.AddEffectCustom( params );	

						npc.AddTag('ACS_Poise_Finisher');
					}

					if (thePlayer.HasTag('ACS_Size_Adjusted'))
					{
						Grow_Geralt_Immediate_Fast();

						thePlayer.RemoveTag('ACS_Size_Adjusted');
					}

					dismembermentComp = (CDismembermentComponent)(npc.GetComponentByClassName( 'CDismembermentComponent' ));
					if(!dismembermentComp) return;
					
					dismembermentComp.GetWoundsNames( wounds );

					//for( i=0; i < wounds.Size(); i+=1 )
					for( i=wounds.Size()-1; i>=0; i-=1 )
					{
						if( !StrContains( wounds[ i ], "gash" ) 
						)
						{
							wounds.EraseFast( i );
						}
					}
					
					if ( wounds.Size() > 0 )
					{
						usedWound = wounds[ RandRange( wounds.Size() ) ];
					}

					movementAdjustor.CancelAll();
					
					if (!thePlayer.IsWeaponHeld('fist') )
					{
						npc.SetDismembermentInfo( usedWound, npc.GetWorldPosition() - npc.GetWorldPosition(), false, DETF_Igni );
					}

					npc.AddTimer( 'DelayedDismemberTimer', 0.05f, false );
	
					action_interrupt_with_igni_sword();

					ACS_PerformFinisher(npc);

					npc.SoundEvent("cmb_play_hit_heavy");
					GetWitcherPlayer().SoundEvent("cmb_play_hit_heavy");
					GetWitcherPlayer().SoundEvent("cmb_play_dismemberment_gore");
					GetWitcherPlayer().SoundEvent("monster_dettlaff_monster_vein_hit_blood");

					npc.DrainStamina( ESAT_FixedValue, npc.GetStatMax( BCS_Stamina ), 600 );

					//ACS_EventHack_Attack();
				}
			}
		}
	}

	function RemoveBlindnessHack()
	{
		var targetNPC : CActor;

		targetNPC = (CActor)( thePlayer.GetTarget() );

		if ( VecDistanceSquared2D( thePlayer.GetWorldPosition(), targetNPC.GetNearestPointInBothPersonalSpaces( thePlayer.GetWorldPosition() ) ) < finisherDist * finisherDist )
		{
			if (targetNPC.HasTag('ACS_Poise_Finisher'))
			{
				targetNPC.RemoveAllBuffsOfType(EET_Blindness);
			}
		}
	}

	function ACS_Dismember_Internal(npc : CActor, action : W3DamageAction)
	{
		var tmpBool 				: bool;
		var mc 						: EMonsterCategory;
		var tmpName 				: name;
		var i						: int;

		if (ACS_Transformation_Activated_Check())
		{
			return;
		}

		if (npc.GetImmortalityMode() != AIM_Invulnerable
		&& npc.GetImmortalityMode() != AIM_Immortal)
		{
			wounds.Clear();

			theGame.GetMonsterParamsForActor(npc, mc, tmpName, tmpBool, tmpBool, tmpBool);

			if (npc.IsHuman() 
			&& !npc.IsUsingHorse()
			&& !npc.IsUsingVehicle()
			)
			{
				if ( npc.UsesVitality() && npc.GetStat( BCS_Vitality ) <= 0 )
				{	
					if (npc.HasAbility('ForceFinisher'))
					{
						npc.RemoveAbility( 'ForceFinisher');
					}

					npc.SetBehaviorMimicVariable( 'gameplayMimicsMode', (float)(int)GMM_Tpose );

					Fear_Stack();

					npc.GetComponent("Finish").SetEnabled(false);
					
					dismembermentComp = (CDismembermentComponent)(npc.GetComponentByClassName( 'CDismembermentComponent' ));
					if(!dismembermentComp) return;
					
					dismembermentComp.GetWoundsNames( wounds );

					for( i=wounds.Size()-1; i>=0; i-=1 )
					{
						if( !StrContains( wounds[ i ], "_torso" ) 
						)
						{
							wounds.EraseFast( i );
						}
					}
					
					if ( wounds.Size() >= 0 )
					{
						usedWound = wounds[ RandRange( wounds.Size() ) ];
					}
					
					npc.SetDismembermentInfo( usedWound, npc.GetWorldPosition() - npc.GetWorldPosition(), false );

					npc.AddTimer( 'DelayedDismemberTimer', 0.05f, false );

					//npc.Kill('ACS_Dismember', false, thePlayer);

					if (npc.IsHuman() && npc.HasTag('ACS_caretaker_shade'))
					{
						thePlayer.GainStat( BCS_Vitality, thePlayer.GetStatMax( BCS_Vitality ) * 0.10 );
					}

					if (thePlayer.HasTag('vampire_claws_equipped'))
					{
						if(RandF() < 0.5)
						{
							thePlayer.SoundEvent("monster_dettlaff_monster_combat_geralt_deathblow_01");
						}
						else
						{
							thePlayer.SoundEvent("monster_dettlaff_monster_combat_geralt_deathblow_02");
						}

						if( ((CNewNPC)npc).GetBloodType() == BT_Red) 
						{
							if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
							{
								if (npc.HasAbility('mon_lessog_base')
								|| npc.HasAbility('mon_sprigan_base')
								)
								{						
									thePlayer.PlayEffectSingle('blood_effect_claws_test_black');
									thePlayer.StopEffect('blood_effect_claws_test_black');
								} 
								else
								{
									thePlayer.PlayEffectSingle('blood_effect_claws_test');
									thePlayer.StopEffect('blood_effect_claws_test');
								}
							}
						}
						else if( ((CNewNPC)npc).GetBloodType() == BT_Green) 
						{
							if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
							{
								if (npc.HasAbility('mon_kikimore_base')
								|| npc.HasAbility('mon_black_spider_base')
								|| npc.HasAbility('mon_black_spider_ep2_base')
								)
								{						
									thePlayer.PlayEffectSingle('blood_effect_claws_test_black');
									thePlayer.StopEffect('blood_effect_claws_test_black');
								} 
								else 
								{
									thePlayer.PlayEffectSingle('blood_effect_claws_test_green');
									thePlayer.StopEffect('blood_effect_claws_test_green');
								}
							}
						}
						else if( ((CNewNPC)npc).GetBloodType() == BT_Yellow) 
						{
							if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
							{
								if (npc.HasAbility('mon_archespor_base'))
								{
									thePlayer.PlayEffectSingle('blood_effect_claws_test_yellow');
									thePlayer.StopEffect('blood_effect_claws_test_yellow');
								} 
								else 
								{
									thePlayer.PlayEffectSingle('blood_effect_claws_test');
									thePlayer.StopEffect('blood_effect_claws_test');
								}
							}
						}
						else if( ((CNewNPC)npc).GetBloodType() == BT_Black) 
						{
							if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
							{
								if ( mc == MC_Vampire ) 
								{
									thePlayer.PlayEffectSingle('blood_effect_claws_test');
									thePlayer.StopEffect('blood_effect_claws_test');
								}
								else if ( mc == MC_Magicals ) 
								{
									if (npc.HasAbility('mon_golem_base')
									|| npc.HasAbility('mon_djinn')
									|| npc.HasAbility('mon_gargoyle')
									)
									{
										thePlayer.PlayEffectSingle('blood_effect_claws_black');
										thePlayer.StopEffect('blood_effect_claws_black');
									}
									else
									{
										thePlayer.PlayEffectSingle('blood_effect_claws_test');
										thePlayer.StopEffect('blood_effect_claws_test');
									}
								}
								else
								{
									thePlayer.PlayEffectSingle('blood_effect_claws_black');
									thePlayer.StopEffect('blood_effect_claws_black');
								}
							}
						}
						else
						{
							if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
							{
								thePlayer.PlayEffectSingle('blood_effect_claws_test');
								thePlayer.StopEffect('blood_effect_claws_test');
							}
						}
					}

					if ( ((CNewNPC)npc).GetNPCType() != ENGT_Quest )
					{
						if ( ((CNewNPC)npc).GetNPCType() == ENGT_Guard )
						{
							npc.DestroyAfter(30);
						}
						else
						{
							npc.DestroyAfter(20);
						}
					}

					if (ACS_Armor_Equipped_Check())
					{
						thePlayer.SoundEvent("monster_caretaker_fx_black_exhale");

						thePlayer.SoundEvent("monster_caretaker_fx_summon");

						if (thePlayer.GetStat(BCS_Focus) == thePlayer.GetStatMax(BCS_Focus)
						&& thePlayer.GetStat(BCS_Stamina) == thePlayer.GetStatMax(BCS_Stamina))
						{
							npc.DestroyEffect('critical_burning');
							npc.PlayEffectSingle('critical_burning');
						}
					}
				}
				else if ( npc.UsesEssence() && npc.GetStat( BCS_Essence ) <= 0 )
				{	
					npc.GetComponent("Finish").SetEnabled(false);
					
					dismembermentComp = (CDismembermentComponent)(npc.GetComponentByClassName( 'CDismembermentComponent' ));
					if(!dismembermentComp) return;
					
					dismembermentComp.GetWoundsNames( wounds );

					for( i=wounds.Size()-1; i>=0; i-=1 )
					{
						if( !StrContains( wounds[ i ], "_torso" ) 
						)
						{
							wounds.EraseFast( i );
						}
					}
					
					if ( wounds.Size() >= 0 )
					{
						usedWound = wounds[ RandRange( wounds.Size() ) ];
					}
					
					npc.SetDismembermentInfo( usedWound, npc.GetWorldPosition() - npc.GetWorldPosition(), false );

					npc.AddTimer( 'DelayedDismemberTimer', 0.05f, false );

					//npc.Kill('ACS_Dismember', false, thePlayer);

					if (npc.IsHuman() && npc.HasTag('ACS_caretaker_shade'))
					{
						thePlayer.GainStat( BCS_Vitality, thePlayer.GetStatMax( BCS_Vitality ) * 0.10 );
					}

					if (thePlayer.HasTag('vampire_claws_equipped'))
					{
						if(RandF() < 0.5)
						{
							thePlayer.SoundEvent("monster_dettlaff_monster_combat_geralt_deathblow_01");
						}
						else
						{
							thePlayer.SoundEvent("monster_dettlaff_monster_combat_geralt_deathblow_02");
						}

						if( ((CNewNPC)npc).GetBloodType() == BT_Red) 
						{
							if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
							{
								if (npc.HasAbility('mon_lessog_base')
								|| npc.HasAbility('mon_sprigan_base')
								)
								{						
									thePlayer.PlayEffectSingle('blood_effect_claws_test_black');
									thePlayer.StopEffect('blood_effect_claws_test_black');
								} 
								else
								{
									thePlayer.PlayEffectSingle('blood_effect_claws_test');
									thePlayer.StopEffect('blood_effect_claws_test');
								}
							}
						}
						else if( ((CNewNPC)npc).GetBloodType() == BT_Green) 
						{
							if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
							{
								if (npc.HasAbility('mon_kikimore_base')
								|| npc.HasAbility('mon_black_spider_base')
								|| npc.HasAbility('mon_black_spider_ep2_base')
								)
								{						
									thePlayer.PlayEffectSingle('blood_effect_claws_test_black');
									thePlayer.StopEffect('blood_effect_claws_test_black');
								} 
								else 
								{
									thePlayer.PlayEffectSingle('blood_effect_claws_test_green');
									thePlayer.StopEffect('blood_effect_claws_test_green');
								}
							}
						}
						else if( ((CNewNPC)npc).GetBloodType() == BT_Yellow) 
						{
							if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
							{
								if (npc.HasAbility('mon_archespor_base'))
								{
									thePlayer.PlayEffectSingle('blood_effect_claws_test_yellow');
									thePlayer.StopEffect('blood_effect_claws_test_yellow');
								} 
								else 
								{
									thePlayer.PlayEffectSingle('blood_effect_claws_test');
									thePlayer.StopEffect('blood_effect_claws_test');
								}
							}
						}
						else if( ((CNewNPC)npc).GetBloodType() == BT_Black) 
						{
							if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
							{
								if ( mc == MC_Vampire ) 
								{
									thePlayer.PlayEffectSingle('blood_effect_claws_test');
									thePlayer.StopEffect('blood_effect_claws_test');
								}
								else if ( mc == MC_Magicals ) 
								{
									if (npc.HasAbility('mon_golem_base')
									|| npc.HasAbility('mon_djinn')
									|| npc.HasAbility('mon_gargoyle')
									)
									{
										thePlayer.PlayEffectSingle('blood_effect_claws_black');
										thePlayer.StopEffect('blood_effect_claws_black');
									}
									else
									{
										thePlayer.PlayEffectSingle('blood_effect_claws_test');
										thePlayer.StopEffect('blood_effect_claws_test');
									}
								}
								else
								{
									thePlayer.PlayEffectSingle('blood_effect_claws_black');
									thePlayer.StopEffect('blood_effect_claws_black');
								}
							}
						}
						else
						{
							if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
							{
								thePlayer.PlayEffectSingle('blood_effect_claws_test');
								thePlayer.StopEffect('blood_effect_claws_test');
							}
						}
					}

					if ( ((CNewNPC)npc).GetNPCType() != ENGT_Quest )
					{
						if ( ((CNewNPC)npc).GetNPCType() == ENGT_Guard )
						{
							npc.DestroyAfter(30);
						}
						else
						{
							npc.DestroyAfter(20);
						}
					}

					if (ACS_Armor_Equipped_Check())
					{
						thePlayer.SoundEvent("monster_caretaker_fx_black_exhale");

						thePlayer.SoundEvent("monster_caretaker_fx_summon");

						if (thePlayer.GetStat(BCS_Focus) == thePlayer.GetStatMax(BCS_Focus)
						&& thePlayer.GetStat(BCS_Stamina) == thePlayer.GetStatMax(BCS_Stamina))
						{
							npc.DestroyEffect('critical_burning');
							npc.PlayEffectSingle('critical_burning');
						}
					}
				}
			}
			else
			{
				if ( npc.UsesVitality() && npc.GetStat( BCS_Vitality ) <= 0 )
				{	
					npc.GetComponent("Finish").SetEnabled(false);

					npc.SetBehaviorMimicVariable( 'gameplayMimicsMode', (float)(int)GMM_Tpose );

					Fear_Stack();
					
					dismembermentComp = (CDismembermentComponent)(npc.GetComponentByClassName( 'CDismembermentComponent' ));
					if(!dismembermentComp) return;
					
					dismembermentComp.GetWoundsNames( wounds );

					for( i=wounds.Size()-1; i>=0; i-=1 )
					{
						if(StrContains( wounds[ i ], "gash" ) )
						{
							wounds.EraseFast( i );
						}
					}

					if ( wounds.Size() >= 0 )
					{
						usedWound = wounds[ RandRange( wounds.Size() ) ];
					}
					
					npc.SetDismembermentInfo( usedWound, npc.GetWorldPosition() - npc.GetWorldPosition(), false );

					npc.AddTimer( 'DelayedDismemberTimer', 0.05f, false );

					if (thePlayer.HasTag('vampire_claws_equipped'))
					{
						if(RandF() < 0.5)
						{
							thePlayer.SoundEvent("monster_dettlaff_monster_combat_geralt_deathblow_01");
						}
						else
						{
							thePlayer.SoundEvent("monster_dettlaff_monster_combat_geralt_deathblow_02");
						}

						if( ((CNewNPC)npc).GetBloodType() == BT_Red) 
						{
							if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
							{
								if (npc.HasAbility('mon_lessog_base')
								|| npc.HasAbility('mon_sprigan_base')
								)
								{						
									thePlayer.PlayEffectSingle('blood_effect_claws_test_black');
									thePlayer.StopEffect('blood_effect_claws_test_black');
								} 
								else
								{
									thePlayer.PlayEffectSingle('blood_effect_claws_test');
									thePlayer.StopEffect('blood_effect_claws_test');
								}
							}
						}
						else if( ((CNewNPC)npc).GetBloodType() == BT_Green) 
						{
							if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
							{
								if (npc.HasAbility('mon_kikimore_base')
								|| npc.HasAbility('mon_black_spider_base')
								|| npc.HasAbility('mon_black_spider_ep2_base')
								)
								{						
									thePlayer.PlayEffectSingle('blood_effect_claws_test_black');
									thePlayer.StopEffect('blood_effect_claws_test_black');
								} 
								else 
								{
									thePlayer.PlayEffectSingle('blood_effect_claws_test_green');
									thePlayer.StopEffect('blood_effect_claws_test_green');
								}
							}
						}
						else if( ((CNewNPC)npc).GetBloodType() == BT_Yellow) 
						{
							if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
							{
								if (npc.HasAbility('mon_archespor_base'))
								{
									thePlayer.PlayEffectSingle('blood_effect_claws_test_yellow');
									thePlayer.StopEffect('blood_effect_claws_test_yellow');
								} 
								else 
								{
									thePlayer.PlayEffectSingle('blood_effect_claws_test');
									thePlayer.StopEffect('blood_effect_claws_test');
								}
							}
						}
						else if( ((CNewNPC)npc).GetBloodType() == BT_Black) 
						{
							if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
							{
								if ( mc == MC_Vampire ) 
								{
									thePlayer.PlayEffectSingle('blood_effect_claws_test');
									thePlayer.StopEffect('blood_effect_claws_test');
								}
								else if ( mc == MC_Magicals ) 
								{
									if (npc.HasAbility('mon_golem_base')
									|| npc.HasAbility('mon_djinn')
									|| npc.HasAbility('mon_gargoyle')
									)
									{
										thePlayer.PlayEffectSingle('blood_effect_claws_black');
										thePlayer.StopEffect('blood_effect_claws_black');
									}
									else
									{
										thePlayer.PlayEffectSingle('blood_effect_claws_test');
										thePlayer.StopEffect('blood_effect_claws_test');
									}
								}
								else
								{
									thePlayer.PlayEffectSingle('blood_effect_claws_black');
									thePlayer.StopEffect('blood_effect_claws_black');
								}
							}
						}
						else
						{
							if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
							{
								thePlayer.PlayEffectSingle('blood_effect_claws_test');
								thePlayer.StopEffect('blood_effect_claws_test');
							}
						}
					}
					else
					{
						if ((action.GetHitReactionType() == EHRT_Heavy && ACS_HeavyAttackAlwaysDismember_Enabled())
						|| (npc.HasBuff(EET_Burning) && ACS_BurningAlwaysDismember_Enabled())
						|| npc.HasBuff(EET_Frozen)
						)
						{
							
						}
						else
						{
							ACS_PerformFinisher(npc);
						}
					}

					if (ACS_Armor_Equipped_Check())
					{
						thePlayer.SoundEvent("monster_caretaker_fx_black_exhale");

						thePlayer.SoundEvent("monster_caretaker_fx_summon");

						if (thePlayer.GetStat(BCS_Focus) == thePlayer.GetStatMax(BCS_Focus)
						&& thePlayer.GetStat(BCS_Stamina) == thePlayer.GetStatMax(BCS_Stamina))
						{
							npc.DestroyEffect('critical_burning');
							npc.PlayEffectSingle('critical_burning');
						}
					}
				}
				else if ( npc.UsesEssence() && npc.GetStat( BCS_Essence ) <= 0 )
				{	
					dismembermentComp = (CDismembermentComponent)(npc.GetComponentByClassName( 'CDismembermentComponent' ));
					if(!dismembermentComp) return;
					
					dismembermentComp.GetWoundsNames( wounds );

					/*
					for( i=wounds.Size()-1; i>=0; i-=1 )
					{
						if( StrContains( wounds[ i ], "cut_01" ) 
						|| StrContains( wounds[ i ], "cut_02" ) 
						|| StrContains( wounds[ i ], "cut_03" ) 
						|| StrContains( wounds[ i ], "cut_04" ) 
						|| StrContains( wounds[ i ], "gash_01" ) 
						|| StrContains( wounds[ i ], "gash_02" ) 
						|| StrContains( wounds[ i ], "gash_03" ) 
						|| StrContains( wounds[ i ], "gash_04" ) 
						|| StrContains( wounds[ i ], "explode" ) 
						)
						{
							wounds.EraseFast( i );
						}
					}
					*/

					for( i=wounds.Size()-1; i>=0; i-=1 )
					{
						if(StrContains( wounds[ i ], "gash" ) )
						{
							wounds.EraseFast( i );
						}
					}

					if ( wounds.Size() >= 0 )
					{
						usedWound = wounds[ RandRange( wounds.Size() ) ];
					}
					
					npc.SetDismembermentInfo( usedWound, npc.GetWorldPosition() - npc.GetWorldPosition(), false );

					npc.AddTimer( 'DelayedDismemberTimer', 0.05f, false );

					//npc.Kill('ACS_Dismember', false, thePlayer);

					if (thePlayer.HasTag('vampire_claws_equipped'))
					{
						if(RandF() < 0.5)
						{
							thePlayer.SoundEvent("monster_dettlaff_monster_combat_geralt_deathblow_01");
						}
						else
						{
							thePlayer.SoundEvent("monster_dettlaff_monster_combat_geralt_deathblow_02");
						}

						if( ((CNewNPC)npc).GetBloodType() == BT_Red) 
						{
							if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
							{
								if (npc.HasAbility('mon_lessog_base')
								|| npc.HasAbility('mon_sprigan_base')
								)
								{						
									thePlayer.PlayEffectSingle('blood_effect_claws_test_black');
									thePlayer.StopEffect('blood_effect_claws_test_black');
								} 
								else
								{
									thePlayer.PlayEffectSingle('blood_effect_claws_test');
									thePlayer.StopEffect('blood_effect_claws_test');
								}
							}
						}
						else if( ((CNewNPC)npc).GetBloodType() == BT_Green) 
						{
							if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
							{
								if (npc.HasAbility('mon_kikimore_base')
								|| npc.HasAbility('mon_black_spider_base')
								|| npc.HasAbility('mon_black_spider_ep2_base')
								)
								{						
									thePlayer.PlayEffectSingle('blood_effect_claws_test_black');
									thePlayer.StopEffect('blood_effect_claws_test_black');
								} 
								else 
								{
									thePlayer.PlayEffectSingle('blood_effect_claws_test_green');
									thePlayer.StopEffect('blood_effect_claws_test_green');
								}
							}
						}
						else if( ((CNewNPC)npc).GetBloodType() == BT_Yellow) 
						{
							if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
							{
								if (npc.HasAbility('mon_archespor_base'))
								{
									thePlayer.PlayEffectSingle('blood_effect_claws_test_yellow');
									thePlayer.StopEffect('blood_effect_claws_test_yellow');
								} 
								else 
								{
									thePlayer.PlayEffectSingle('blood_effect_claws_test');
									thePlayer.StopEffect('blood_effect_claws_test');
								}
							}
						}
						else if( ((CNewNPC)npc).GetBloodType() == BT_Black) 
						{
							if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
							{
								if ( mc == MC_Vampire ) 
								{
									thePlayer.PlayEffectSingle('blood_effect_claws_test');
									thePlayer.StopEffect('blood_effect_claws_test');
								}
								else if ( mc == MC_Magicals ) 
								{
									if (npc.HasAbility('mon_golem_base')
									|| npc.HasAbility('mon_djinn')
									|| npc.HasAbility('mon_gargoyle')
									)
									{
										thePlayer.PlayEffectSingle('blood_effect_claws_black');
										thePlayer.StopEffect('blood_effect_claws_black');
									}
									else
									{
										thePlayer.PlayEffectSingle('blood_effect_claws_test');
										thePlayer.StopEffect('blood_effect_claws_test');
									}
								}
								else
								{
									thePlayer.PlayEffectSingle('blood_effect_claws_black');
									thePlayer.StopEffect('blood_effect_claws_black');
								}
							}
						}
						else
						{
							if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
							{
								thePlayer.PlayEffectSingle('blood_effect_claws_test');
								thePlayer.StopEffect('blood_effect_claws_test');
							}
						}
					}
					else
					{
						ACS_PerformFinisher(npc);
					}

					if (ACS_Armor_Equipped_Check())
					{
						thePlayer.SoundEvent("monster_caretaker_fx_black_exhale");

						thePlayer.SoundEvent("monster_caretaker_fx_summon");

						if (thePlayer.GetStat(BCS_Focus) == thePlayer.GetStatMax(BCS_Focus)
						&& thePlayer.GetStat(BCS_Stamina) == thePlayer.GetStatMax(BCS_Stamina))
						{
							npc.DestroyEffect('critical_burning');
							npc.PlayEffectSingle('critical_burning');
						}
					}
				}
			}
		}
	}

	function ACS_Dismember_Vampire_Claws()
	{
		var tmpBool 				: bool;
		var mc 						: EMonsterCategory;
		var tmpName 				: name;

		if (npc.GetImmortalityMode() != AIM_Invulnerable
		&& npc.GetImmortalityMode() != AIM_Immortal)
		{
			wounds.Clear();

			thePlayer.AddTimer( 'RemoveForceFinisher', 0.0, false );

			npc.AddAbility( 'InstantKillImmune' );

			theGame.GetMonsterParamsForActor(npc, mc, tmpName, tmpBool, tmpBool, tmpBool);

			if (!npc.HasAbility('DisableFinishers'))
			{
				npc.AddAbility( 'DisableFinishers', true);
			}

			if (npc.HasAbility('ForceFinisher'))
			{
				npc.RemoveAbility( 'ForceFinisher');
			} 

			npc.SignalGameplayEvent('DisableFinisher');

			if ( npc.UsesVitality() && npc.GetStat( BCS_Vitality ) <= 0 )
			{
				dismembermentComp = (CDismembermentComponent)(npc.GetComponentByClassName( 'CDismembermentComponent' ));
				if(!dismembermentComp) return;
				
				dismembermentComp.GetWoundsNames( wounds, WTF_Explosion );
				
				if ( wounds.Size() > 0 )
				{
					usedWound = wounds[ RandRange( wounds.Size() ) ];
				}
				
				npc.SetDismembermentInfo( usedWound, npc.GetWorldPosition() - npc.GetWorldPosition(), false );

				npc.AddTimer( 'DelayedDismemberTimer', 0.05f, false );

				//npc.Kill('ACS_Dismember', false, thePlayer);

				if( ((CNewNPC)npc).GetBloodType() == BT_Red) 
				{
					if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
					{
						if (npc.HasAbility('mon_lessog_base')
						|| npc.HasAbility('mon_sprigan_base')
						)
						{						
							thePlayer.PlayEffectSingle('blood_effect_claws_test_black');
							thePlayer.StopEffect('blood_effect_claws_test_black');
						} 
						else
						{
							thePlayer.PlayEffectSingle('blood_effect_claws_test');
							thePlayer.StopEffect('blood_effect_claws_test');
						}
					}
				}
				else if( ((CNewNPC)npc).GetBloodType() == BT_Green) 
				{
					if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
					{
						if (npc.HasAbility('mon_kikimore_base')
						|| npc.HasAbility('mon_black_spider_base')
						|| npc.HasAbility('mon_black_spider_ep2_base')
						)
						{						
							thePlayer.PlayEffectSingle('blood_effect_claws_test_black');
							thePlayer.StopEffect('blood_effect_claws_test_black');
						} 
						else 
						{
							thePlayer.PlayEffectSingle('blood_effect_claws_test_green');
							thePlayer.StopEffect('blood_effect_claws_test_green');
						}
					}
				}
				else if( ((CNewNPC)npc).GetBloodType() == BT_Yellow) 
				{
					if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
					{
						if (npc.HasAbility('mon_archespor_base'))
						{
							thePlayer.PlayEffectSingle('blood_effect_claws_test_yellow');
							thePlayer.StopEffect('blood_effect_claws_test_yellow');
						} 
						else 
						{
							thePlayer.PlayEffectSingle('blood_effect_claws_test');
							thePlayer.StopEffect('blood_effect_claws_test');
						}
					}
				}
				else if( ((CNewNPC)npc).GetBloodType() == BT_Black) 
				{
					if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
					{
						if ( mc == MC_Vampire ) 
						{
							thePlayer.PlayEffectSingle('blood_effect_claws_test');
							thePlayer.StopEffect('blood_effect_claws_test');
						}
						else if ( mc == MC_Magicals ) 
						{
							if (npc.HasAbility('mon_golem_base')
							|| npc.HasAbility('mon_djinn')
							|| npc.HasAbility('mon_gargoyle')
							)
							{
								thePlayer.PlayEffectSingle('blood_effect_claws_black');
								thePlayer.StopEffect('blood_effect_claws_black');
							}
							else
							{
								thePlayer.PlayEffectSingle('blood_effect_claws_test');
								thePlayer.StopEffect('blood_effect_claws_test');
							}
						}
						else
						{
							thePlayer.PlayEffectSingle('blood_effect_claws_black');
							thePlayer.StopEffect('blood_effect_claws_black');
						}
					}
				}
				else
				{
					if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
					{
						thePlayer.PlayEffectSingle('blood_effect_claws_test');
						thePlayer.StopEffect('blood_effect_claws_test');
					}
				}

				if (npc.IsHuman() && npc.HasTag('ACS_caretaker_shade'))
				{
					thePlayer.GainStat( BCS_Vitality, thePlayer.GetStatMax( BCS_Vitality ) * 0.10 );
				}

				return;
			}

			if ( npc.UsesEssence() && npc.GetStat( BCS_Essence ) <= 0 )
			{
				dismembermentComp = (CDismembermentComponent)(npc.GetComponentByClassName( 'CDismembermentComponent' ));
				if(!dismembermentComp) return;
				
				dismembermentComp.GetWoundsNames( wounds, WTF_Explosion );
				
				if ( wounds.Size() > 0 )
				{
					usedWound = wounds[ RandRange( wounds.Size() ) ];
				}
				
				npc.SetDismembermentInfo( usedWound, npc.GetWorldPosition() - npc.GetWorldPosition(), false );

				npc.AddTimer( 'DelayedDismemberTimer', 0.05f, false );

				//npc.Kill('ACS_Dismember', false, thePlayer);

				if( ((CNewNPC)npc).GetBloodType() == BT_Red) 
				{
					if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
					{
						if (npc.HasAbility('mon_lessog_base')
						|| npc.HasAbility('mon_sprigan_base')
						)
						{						
							thePlayer.PlayEffectSingle('blood_effect_claws_test_black');
							thePlayer.StopEffect('blood_effect_claws_test_black');
						} 
						else
						{
							thePlayer.PlayEffectSingle('blood_effect_claws_test');
							thePlayer.StopEffect('blood_effect_claws_test');
						}
					}
				}
				else if( ((CNewNPC)npc).GetBloodType() == BT_Green) 
				{
					if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
					{
						if (npc.HasAbility('mon_kikimore_base')
						|| npc.HasAbility('mon_black_spider_base')
						|| npc.HasAbility('mon_black_spider_ep2_base')
						)
						{						
							thePlayer.PlayEffectSingle('blood_effect_claws_test_black');
							thePlayer.StopEffect('blood_effect_claws_test_black');
						} 
						else 
						{
							thePlayer.PlayEffectSingle('blood_effect_claws_test_green');
							thePlayer.StopEffect('blood_effect_claws_test_green');
						}
					}
				}
				else if( ((CNewNPC)npc).GetBloodType() == BT_Yellow) 
				{
					if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
					{
						if (npc.HasAbility('mon_archespor_base'))
						{
							thePlayer.PlayEffectSingle('blood_effect_claws_test_yellow');
							thePlayer.StopEffect('blood_effect_claws_test_yellow');
						} 
						else 
						{
							thePlayer.PlayEffectSingle('blood_effect_claws_test');
							thePlayer.StopEffect('blood_effect_claws_test');
						}
					}
				}
				else if( ((CNewNPC)npc).GetBloodType() == BT_Black) 
				{
					if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
					{
						if ( mc == MC_Vampire ) 
						{
							thePlayer.PlayEffectSingle('blood_effect_claws_test');
							thePlayer.StopEffect('blood_effect_claws_test');
						}
						else if ( mc == MC_Magicals ) 
						{
							if (npc.HasAbility('mon_golem_base')
							|| npc.HasAbility('mon_djinn')
							|| npc.HasAbility('mon_gargoyle')
							)
							{
								thePlayer.PlayEffectSingle('blood_effect_claws_black');
								thePlayer.StopEffect('blood_effect_claws_black');
							}
							else
							{
								thePlayer.PlayEffectSingle('blood_effect_claws_test');
								thePlayer.StopEffect('blood_effect_claws_test');
							}
						}
						else
						{
							thePlayer.PlayEffectSingle('blood_effect_claws_black');
							thePlayer.StopEffect('blood_effect_claws_black');
						}
					}
				}
				else
				{
					if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
					{
						thePlayer.PlayEffectSingle('blood_effect_claws_test');
						thePlayer.StopEffect('blood_effect_claws_test');
					}
				}

				if (npc.IsHuman() && npc.HasTag('ACS_caretaker_shade'))
				{
					thePlayer.GainStat( BCS_Vitality, thePlayer.GetStatMax( BCS_Vitality ) * 0.10 );
				}

				return;
			}
		}
	}

	private var acsarmorbreath : bool;

	public timer function ACSArmorBreathingTimer ( dt : float, id : int){ ACSArmorBreathing(); } 

	function ACSArmorBreathing()
	{
		if (!theGame.IsFading()
		&& !theGame.IsBlackscreen()
		&& thePlayer.GetVisibility()
		&& !theGame.IsDialogOrCutscenePlaying() 
		&& !thePlayer.IsInNonGameplayCutscene() 
		&& !thePlayer.IsInGameplayScene() 
		&& !theGame.IsCurrentlyPlayingNonGameplayScene()
		)
		{
			if (!acsarmorbreath)
			{
				thePlayer.SoundEvent("monster_caretaker_vo_breath_in", 'head' );

				acsarmorbreath = true;
			}
			else
			{
				thePlayer.SoundEvent("monster_caretaker_vo_breath_out", 'head' );

				acsarmorbreath = false;
			}
		}
	}

	function EmbersIndicator()
	{
		if (!thePlayer.HasTag('in_wraith') 
		&& !thePlayer.HasTag('ACS_Camo_Active') 
		&& !theGame.IsFading()
		&& !theGame.IsBlackscreen()
		&& thePlayer.GetVisibility()
		)
		{
			if (thePlayer.HasBuff(EET_BlackBlood) && thePlayer.HasTag('vampire_claws_equipped'))
			{
				thePlayer.DestroyEffect('embers_indicator');
				thePlayer.DestroyEffect('ice_armor_no_smoke');
				thePlayer.DestroyEffect('rift_fx_special');

				if (GetACSHelm1())
				{
					GetACSHelm1().DestroyEffect('ice_armor_no_smoke');
					GetACSHelm1().DestroyEffect('embers_indicator');
				}

				if (GetACSHelm2())
				{
					GetACSHelm2().DestroyEffect('ice_armor_no_smoke');
					GetACSHelm2().DestroyEffect('embers_indicator');
				}

				if (GetACSHelm3())
				{
					GetACSHelm3().DestroyEffect('ice_armor_no_smoke');
					GetACSHelm3().DestroyEffect('embers_indicator');
				}

				if (GetACSHelm4())
				{
					GetACSHelm4().DestroyEffect('ice_armor_no_smoke');
					GetACSHelm4().DestroyEffect('embers_indicator');
				}
			}
			else
			{
				if (GetWitcherPlayer().IsAnyQuenActive())
				{
					thePlayer.DestroyEffect('embers_indicator');

					thePlayer.PlayEffectSingle('ice_armor_no_smoke');
					thePlayer.StopEffect('ice_armor_no_smoke');

					if (!thePlayer.IsEffectActive('rift_fx_special', false))
					{
						thePlayer.PlayEffectSingle('rift_fx_special');
					}

					if (GetACSHelm1())
					{
						GetACSHelm1().DestroyEffect('embers_indicator');
						GetACSHelm1().PlayEffectSingle('ice_armor_no_smoke');
						GetACSHelm1().StopEffect('ice_armor_no_smoke');
					}

					if (GetACSHelm2())
					{
						GetACSHelm2().DestroyEffect('embers_indicator');
						GetACSHelm2().PlayEffectSingle('ice_armor_no_smoke');
						GetACSHelm2().StopEffect('ice_armor_no_smoke');
					}

					if (GetACSHelm3())
					{
						GetACSHelm3().DestroyEffect('embers_indicator');
						GetACSHelm3().PlayEffectSingle('ice_armor_no_smoke');
						GetACSHelm3().StopEffect('ice_armor_no_smoke');
					}

					if (GetACSHelm4())
					{
						GetACSHelm4().DestroyEffect('embers_indicator');
						GetACSHelm4().PlayEffectSingle('ice_armor_no_smoke');
						GetACSHelm4().StopEffect('ice_armor_no_smoke');
					}
				}
				else
				{
					thePlayer.DestroyEffect('ice_armor_no_smoke');
					thePlayer.DestroyEffect('rift_fx_special');

					thePlayer.PlayEffectSingle('embers_indicator');
					thePlayer.StopEffect('embers_indicator');

					if (GetACSHelm1())
					{
						GetACSHelm1().DestroyEffect('ice_armor_no_smoke');
						GetACSHelm1().PlayEffectSingle('embers_indicator');
						GetACSHelm1().StopEffect('embers_indicator');
					}

					if (GetACSHelm2())
					{
						GetACSHelm2().DestroyEffect('ice_armor_no_smoke');
						GetACSHelm2().PlayEffectSingle('embers_indicator');
						GetACSHelm2().StopEffect('embers_indicator');
					}

					if (GetACSHelm3())
					{
						GetACSHelm3().DestroyEffect('ice_armor_no_smoke');
						GetACSHelm3().PlayEffectSingle('embers_indicator');
						GetACSHelm3().StopEffect('embers_indicator');
					}

					if (GetACSHelm4())
					{
						GetACSHelm4().DestroyEffect('ice_armor_no_smoke');
						GetACSHelm4().PlayEffectSingle('embers_indicator');
						GetACSHelm4().StopEffect('embers_indicator');
					}
				}
			}
		}
		else
		{
			thePlayer.DestroyEffect('embers_indicator');
			thePlayer.DestroyEffect('ice_armor_no_smoke');
			thePlayer.DestroyEffect('rift_fx_special');

			if (GetACSHelm1())
			{
				GetACSHelm1().DestroyEffect('ice_armor_no_smoke');
				GetACSHelm1().DestroyEffect('embers_indicator');
			}

			if (GetACSHelm2())
			{
				GetACSHelm2().DestroyEffect('ice_armor_no_smoke');
				GetACSHelm2().DestroyEffect('embers_indicator');
			}

			if (GetACSHelm3())
			{
				GetACSHelm3().DestroyEffect('ice_armor_no_smoke');
				GetACSHelm3().DestroyEffect('embers_indicator');
			}

			if (GetACSHelm4())
			{
				GetACSHelm4().DestroyEffect('ice_armor_no_smoke');
				GetACSHelm4().DestroyEffect('embers_indicator');
			}
		}
	}

	function IceArmorIndicator()
	{
		if (!thePlayer.HasTag('in_wraith') 
		&& !thePlayer.HasTag('ACS_Camo_Active') 
		&& !theGame.IsFading()
		&& !theGame.IsBlackscreen()
		&& thePlayer.GetVisibility()
		)
		{
			if (thePlayer.HasBuff(EET_BlackBlood) && thePlayer.HasTag('vampire_claws_equipped'))
			{
				thePlayer.DestroyEffect('ice_armor_no_smoke');
				thePlayer.DestroyEffect('rift_fx_special');

				if (GetACSImlerithSkirt())
				{
					GetACSImlerithSkirt().DestroyEffect('ice_armor_no_smoke');
				}

				if (GetACSEredinCloak())
				{
					GetACSEredinCloak().DestroyEffect('ice_armor_no_smoke');
				}

				if (GetACSEredinSkirt())
				{
					GetACSEredinSkirt().DestroyEffect('ice_armor_no_smoke');
				}
			}
			else
			{
				if (GetWitcherPlayer().IsAnyQuenActive())
				{
					thePlayer.PlayEffectSingle('ice_armor_no_smoke');
					thePlayer.StopEffect('ice_armor_no_smoke');

					if (!thePlayer.IsEffectActive('rift_fx_special', false))
					{
						thePlayer.PlayEffectSingle('rift_fx_special');
					}

					if (GetACSImlerithSkirt())
					{
						GetACSImlerithSkirt().PlayEffectSingle('ice_armor_no_smoke');
						GetACSImlerithSkirt().StopEffect('ice_armor_no_smoke');
					}

					if (GetACSEredinCloak())
					{
						GetACSEredinCloak().PlayEffectSingle('ice_armor_no_smoke');
						GetACSEredinCloak().StopEffect('ice_armor_no_smoke');
					}

					if (GetACSEredinSkirt())
					{
						GetACSEredinSkirt().PlayEffectSingle('ice_armor_no_smoke');
						GetACSEredinSkirt().StopEffect('ice_armor_no_smoke');
					}
				}
				else
				{
					thePlayer.DestroyEffect('ice_armor_no_smoke');
					thePlayer.DestroyEffect('rift_fx_special');

					if (GetACSImlerithSkirt())
					{
						GetACSImlerithSkirt().DestroyEffect('ice_armor_no_smoke');
					}

					if (GetACSEredinCloak())
					{
						GetACSEredinCloak().DestroyEffect('ice_armor_no_smoke');
					}

					if (GetACSEredinSkirt())
					{
						GetACSEredinSkirt().DestroyEffect('ice_armor_no_smoke');
					}
				}
			}
		}
		else
		{
			thePlayer.DestroyEffect('ice_armor_no_smoke');
			thePlayer.DestroyEffect('rift_fx_special');

			if (GetACSImlerithSkirt())
			{
				GetACSImlerithSkirt().DestroyEffect('ice_armor_no_smoke');
			}

			if (GetACSEredinCloak())
			{
				GetACSEredinCloak().DestroyEffect('ice_armor_no_smoke');
			}

			if (GetACSEredinSkirt())
			{
				GetACSEredinSkirt().DestroyEffect('ice_armor_no_smoke');
			}
		}
	}

	function VampireQuenIndicator()
	{
		if (GetWitcherPlayer().IsAnyQuenActive() && thePlayer.HasTag('vampire_claws_equipped'))
		{
			if (!thePlayer.IsEffectActive('bat_circle', false))
			{
				thePlayer.PlayEffectSingle('bat_circle');
			}
		}
		else
		{
			if (!ACS_GetItem_AllBlack_Equipped_Held())
			{
				if (thePlayer.IsEffectActive('bat_circle', false))
				{
					thePlayer.StopEffect('bat_circle');
				}
			}
		}
	}


	function EmbersParticlesIndicator()
	{
		if (!thePlayer.HasTag('in_wraith') 
		&& !thePlayer.HasTag('ACS_Camo_Active') 
		&& !theGame.IsFading()
		&& !theGame.IsBlackscreen()
		)
		{
			if (!thePlayer.IsEffectActive('embers_particles_test', false))
			{
				thePlayer.PlayEffectSingle('embers_particles_test');
				//thePlayer.StopEffect('embers_particles_test');
			}
		}
		else
		{
			thePlayer.DestroyEffect('embers_particles_test');
		}
	}

	function Sword_Hold_Forcer()
	{
		if (!thePlayer.HasTag('ACS_HideWeaponOnDodge')
		&& !thePlayer.HasTag('in_wraith')
		&& !thePlayer.HasTag('blood_sucking'))
		{
			ACSGetSteelSwordUpdateEnhancements_Permaglow();
			ACSGetSilverSwordUpdateEnhancements_Permaglow();
		}

		playerAnimcomp = thePlayer.GetComponentByClassName('CAnimatedComponent');
		playerMeshcomp = thePlayer.GetComponentByClassName('CMeshComponent');

		if ( !thePlayer.IsAnyWeaponHeld() || thePlayer.IsWeaponHeld('fist') )
		{
			if (thePlayer.HasTag('vampire_claws_equipped'))
			{
				thePlayer.SetBehaviorVariable( 'playerWeapon', (int) PW_Steel );
				thePlayer.SetBehaviorVariable( 'playerWeaponForOverlay', (int) PW_Steel );
			}
			else if (thePlayer.IsWeaponHeld('fist') && !thePlayer.HasTag('vampire_claws_equipped'))
			{
				thePlayer.SetBehaviorVariable( 'isHoldingWeaponR', 0.0, true );

				thePlayer.SetBehaviorVariable( 'playerWeapon', (int) PW_Fists );
				thePlayer.SetBehaviorVariable( 'playerWeaponForOverlay', (int) PW_Fists );
			}
			else
			{
				thePlayer.SetBehaviorVariable( 'isHoldingWeaponR', 0.0, true );

				thePlayer.SetBehaviorVariable( 'playerWeapon', (int) PW_None );
				thePlayer.SetBehaviorVariable( 'playerWeaponForOverlay', (int) PW_None );
			}

			/*
			if ( thePlayer.HasTag('vampire_claws_equipped') )
			{
				if ( thePlayer.GetIsSprinting() && !thePlayer.HasTag('ACS_Vampire_Claws_Despawn_Sprinting') )
				{
					ClawDestroy_NOTAG();

					thePlayer.RemoveTag('ACS_Vampire_Claws_Equip_Not_Sprinting');

					thePlayer.AddTag('ACS_Vampire_Claws_Despawn_Sprinting');
				}
				else if ( !thePlayer.GetIsSprinting() && thePlayer.HasTag('ACS_Vampire_Claws_Despawn_Sprinting') && !thePlayer.HasTag('ACS_Vampire_Claws_Equip_Not_Sprinting'))
				{
					ACS_ClawEquip_OnDodge();

					thePlayer.RemoveTag('ACS_Vampire_Claws_Despawn_Sprinting');

					thePlayer.AddTag('ACS_Vampire_Claws_Equip_Not_Sprinting');
				}
			}
			*/

			//if (thePlayer.HasTag('quen_sword_equipped'))
			//{
				QuenSwordDestroyIMMEDIATE();
			//}
			//else if (thePlayer.HasTag('axii_sword_equipped'))
			//{
				AxiiSwordDestroyIMMEDIATE();
			//}
			//else if (thePlayer.HasTag('aard_sword_equipped'))
			//{
				AardSwordDestroyIMMEDIATE();
			//}
			//else if (thePlayer.HasTag('yrden_sword_equipped'))
			//{
				YrdenSwordDestroyIMMEDIATE();
			//}
			//else if (thePlayer.HasTag('quen_secondary_sword_equipped'))
			//{
				QuenSecondarySwordDestroyIMMEDIATE();
			//}
			//else if (thePlayer.HasTag('axii_secondary_sword_equipped'))
			//{
				AxiiSecondarySwordDestroyIMMEDIATE();
			//}
			//else if (thePlayer.HasTag('aard_secondary_sword_equipped'))
			//{
				AardSecondarySwordDestroyIMMEDIATE();
			//}
			//else if (thePlayer.HasTag('yrden_secondary_sword_equipped'))
			//{
				YrdenSecondarySwordDestroyIMMEDIATE();
			//}

				IgniBowDestroyIMMEDIATE();

				AxiiBowDestroyIMMEDIATE();

				AardBowDestroyIMMEDIATE();

				YrdenBowDestroyIMMEDIATE();

				QuenBowDestroyIMMEDIATE();

				IgniCrossbowDestroyIMMEDIATE();

				AxiiCrossbowDestroyIMMEDIATE();

				AardCrossbowDestroyIMMEDIATE();

				YrdenCrossbowDestroyIMMEDIATE();

				QuenCrossbowDestroyIMMEDIATE();

				ACS_Sword_Trail_1().Destroy();
				ACS_Sword_Trail_2().Destroy();
				ACS_Sword_Trail_3().Destroy();
				ACS_Sword_Trail_4().Destroy();
				ACS_Sword_Trail_5().Destroy();
				ACS_Sword_Trail_6().Destroy();
				ACS_Sword_Trail_7().Destroy();
				ACS_Sword_Trail_8().Destroy();

				GetACSArmorEtherSword().Destroy();

				//thePlayer.SoundEvent("magic_sorceress_vfx_lightning_fx_loop_stop");

			if (thePlayer.HasTag('ACS_Holster_Sword_Effect'))
			{
				thePlayer.RemoveTag('ACS_Holster_Sword_Effect');
			}
		}
		else
		{
			if (!thePlayer.HasTag('ACS_HideWeaponOnDodge')
			&& !thePlayer.HasTag('in_wraith')
			&& !thePlayer.HasTag('blood_sucking')
			&& !GetACSArmorEtherSword()
			)
			{
				ACSGetEquippedSwordUpdateEnhancements_Permaglow();
			}

			if ( thePlayer.IsWeaponHeld( 'steelsword' ) )
			{
				thePlayer.SetBehaviorVariable( 'playerWeapon', (int) PW_Steel );
				thePlayer.SetBehaviorVariable( 'playerWeaponForOverlay', (int) PW_Steel );
			}
			else if ( thePlayer.IsWeaponHeld( 'silversword' ) )
			{
				thePlayer.SetBehaviorVariable( 'playerWeapon', (int) PW_Silver );
				thePlayer.SetBehaviorVariable( 'playerWeaponForOverlay', (int) PW_Silver );
			}

			if (!thePlayer.HasTag('quen_sword_equipped'))
			{
				QuenSwordDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('axii_sword_equipped'))
			{
				AxiiSwordDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('aard_sword_equipped'))
			{
				AardSwordDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('yrden_sword_equipped'))
			{
				YrdenSwordDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('quen_secondary_sword_equipped'))
			{
				QuenSecondarySwordDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('axii_secondary_sword_equipped'))
			{
				AxiiSecondarySwordDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('aard_secondary_sword_equipped'))
			{
				AardSecondarySwordDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('yrden_secondary_sword_equipped'))
			{
				YrdenSecondarySwordDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('igni_bow_equipped'))
			{
				IgniBowDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('axii_bow_equipped'))
			{
				AxiiBowDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('aard_bow_equipped'))
			{
				AardBowDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('yrden_bow_equipped'))
			{
				YrdenBowDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('quen_bow_equipped'))
			{
				QuenBowDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('igni_crossbow_equipped'))
			{
				IgniCrossbowDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('axii_crossbow_equipped'))
			{
				AxiiCrossbowDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('aard_crossbow_equipped'))
			{
				AardCrossbowDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('yrden_crossbow_equipped'))
			{
				YrdenCrossbowDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('quen_crossbow_equipped'))
			{
				QuenCrossbowDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('vampire_claws_equipped'))
			{
				//ClawDestroy();
			}

			if (thePlayer.HasTag('ACS_Holster_Sword_Effect'))
			{
				thePlayer.RemoveTag('ACS_Holster_Sword_Effect');
			}
		}

		if ( thePlayer.IsPerformingFinisher()
		|| thePlayer.HasTag('ACS_IsPerformingFinisher')
		)
		{
			if (ACS_Player_Scale() != 1)
			{
				if (thePlayer.HasTag('ACS_Player_Scale_Revert'))
				{
					thePlayer.RemoveTag('ACS_Player_Scale_Revert');
				}

				if (!thePlayer.HasTag('ACS_Player_Scale_Force_Changed'))
				{
					//RemoveTimer('ACS_Embers_Timer');

					//thePlayer.StopAllEffects();

					thePlayer.PlayEffectSingle('ethereal_appear');
					thePlayer.StopEffect('ethereal_appear');

					thePlayer.PlayEffectSingle('special_attack_only_black_fx');
					thePlayer.StopEffect('special_attack_only_black_fx');

					thePlayer.AddTag('ACS_Player_Scale_Force_Changed');
				}
			}

			playerAnimcomp.SetScale(Vector(ACS_Player_Scale()/ACS_Player_Scale(),ACS_Player_Scale()/ACS_Player_Scale(),ACS_Player_Scale()/ACS_Player_Scale(),ACS_Player_Scale()/ACS_Player_Scale()));
		}
	}

	function Sword_Persistent_Effects()
	{
		/*
		if (quen_sword_1().HasTag('quen_sword_upgraded_2'))
		{
			if (!quen_sword_1().IsEffectActive('special_attack_charged_no_overlay', false))
			{
				quen_sword_1().PlayEffectSingle('special_attack_charged_no_overlay');
			}

			if (!quen_sword_2().IsEffectActive('special_attack_charged_no_overlay', false))
			{
				quen_sword_2().PlayEffectSingle('special_attack_charged_no_overlay');
			}

			if (!quen_sword_3().IsEffectActive('special_attack_charged_no_overlay', false))
			{
				quen_sword_3().PlayEffectSingle('special_attack_charged_no_overlay');
			}
		}
		else
		{
			quen_sword_1().StopEffect('special_attack_charged_no_overlay');
			quen_sword_2().StopEffect('special_attack_charged_no_overlay');
			quen_sword_3().StopEffect('special_attack_charged_no_overlay');
		}
		*/

		if (ACS_GetItem_Iris())
		{
			if (ACS_GetWeaponMode() == 0
			|| ACS_GetWeaponMode() == 1
			|| ACS_GetWeaponMode() == 2
			)
			{
				if ((thePlayer.HasTag('igni_secondary_sword_equipped')
				|| thePlayer.HasTag('igni_secondary_sword_equipped_TAG')
				|| thePlayer.HasTag('igni_sword_equipped')
				|| thePlayer.HasTag('igni_sword_equipped_TAG'))
				&& !ACS_IconicSwordVFXOff_Enabled())
				{
					if (!ACSGetEquippedSword().IsEffectActive('special_attack_charged_no_overlay', false))
					{
						ACSGetEquippedSword().PlayEffectSingle('special_attack_charged_no_overlay');
					}
				}
				else
				{
					if (ACSGetEquippedSword().IsEffectActive('special_attack_charged_no_overlay', false))
					{
						ACSGetEquippedSword().StopEffect('special_attack_charged_no_overlay');
					}
				}
			}
			else if (ACS_GetWeaponMode() == 3
			)
			{
				if (thePlayer.HasTag('quen_sword_equipped')
				&& !ACS_IconicSwordVFXOff_Enabled())
				{
					if (!ACSGetEquippedSword().IsEffectActive('special_attack_charged_no_overlay', false))
					{
						ACSGetEquippedSword().PlayEffectSingle('special_attack_charged_no_overlay');
					}
				}
				else
				{
					if (ACSGetEquippedSword().IsEffectActive('special_attack_charged_no_overlay', false))
					{
						ACSGetEquippedSword().StopEffect('special_attack_charged_no_overlay');
					}
				}
			}
		}

		if (GetACSSparagmosEffect())
		{
			GetACSSparagmosEffect().StopEffect('sword_slash_blue_large');
			GetACSSparagmosEffect().PlayEffectSingle('sword_slash_blue_large');
		}

		if (thePlayer.HasTag('vampire_claws_equipped'))
		{
			if (thePlayer.IsUsingHorse()
			|| thePlayer.IsUsingVehicle()
			|| !ACS_Enabled()
			//|| !thePlayer.HasTag('ACS_ExplorationDelayTag')
			)
			{
				ClawDestroy();

				if (!ACS_HideVampireClaws_Enabled())
				{
					thePlayer.PlayEffectSingle('claws_effect');
					thePlayer.StopEffect('claws_effect');
				}
			}

			theGame.GetBehTreeReactionManager().CreateReactionEventIfPossible( thePlayer, 'CastSignAction', -1, 10.0f, -1.f, -1, true );

			if (ACS_Vampire_Back_Claw_Get())
			{
				if (!ACS_DodgeEffects_Enabled())
				{
					ACS_Vampire_Back_Claw_Get().Destroy();
				}
			}

			if (thePlayer.HasBuff(EET_BlackBlood))
			{
				thePlayer.StopEffect('blood_color');
				thePlayer.PlayEffectSingle('blood_color');

				if (GetACSHelm1())
				{
					GetACSHelm1().PlayEffectSingle('blood_color');
					GetACSHelm1().StopEffect('blood_color');
				}

				if (GetACSHelm2())
				{
					GetACSHelm2().PlayEffectSingle('blood_color');
					GetACSHelm2().StopEffect('blood_color');
				}

				if (GetACSHelm3())
				{
					GetACSHelm3().PlayEffectSingle('blood_color');
					GetACSHelm3().StopEffect('blood_color');
				}

				if (GetACSHelm4())
				{
					GetACSHelm4().PlayEffectSingle('blood_color');
					GetACSHelm4().StopEffect('blood_color');
				}

				if (GetACSEredinSkirt())
				{
					GetACSEredinSkirt().PlayEffectSingle('blood_color');
					GetACSEredinSkirt().StopEffect('blood_color');
				}

				if (GetACSEredinCloak())
				{
					GetACSEredinCloak().PlayEffectSingle('blood_color');
					GetACSEredinCloak().StopEffect('blood_color');
				}

				if (GetACSVGXEredinCloak())
				{
					GetACSVGXEredinCloak().PlayEffectSingle('blood_color');
					GetACSVGXEredinCloak().StopEffect('blood_color');
				}

				if (GetACSImlerithSkirt())
				{
					GetACSImlerithSkirt().PlayEffectSingle('blood_color');
					GetACSImlerithSkirt().StopEffect('blood_color');
				}
				
				ACS_Vampire_Head_Get().PlayEffectSingle('blood_color');

				ACS_Vampire_Head_Get().StopEffect('blood_color');

				if (!thePlayer.HasTag('ACS_blood_armor'))
				{
					ACS_BloodArmorStandalone();
				}
			}
			else
			{
				ACS_Blood_Armor_Destroy_Without_Back_Claw_IMMEDIATE();
			}
		}
		else if (thePlayer.HasTag('aard_sword_equipped'))
		{
			ACSGetEquippedSword().StopAllEffects();
		}

		/*
		else if (!thePlayer.HasTag('vampire_claws_equipped'))
		{
			//ClawDestroy_NOTAG();
		}
		*/
	}

	function BladeOfTheUnseenDeathEffects()
	{
		if (ACS_Blade_Of_The_Unseen())
		{
			if (!ACS_Blade_Of_The_Unseen().IsAlive())
			{
				if(!ACS_Blade_Of_The_Unseen().HasTag('unseen_blade_despawn'))
				{
					GetACS_Blade_Of_The_Unseen_L_Blade().Destroy();

					GetACS_Blade_Of_The_Unseen_L_Anchor().Destroy();

					GetACS_Blade_Of_The_Unseen_R_Blade().Destroy();

					GetACS_Blade_Of_The_Unseen_R_Anchor().Destroy();

					ACS_VampireBatsSpawnEffect(ACS_Blade_Of_The_Unseen().GetWorldPosition());

					RemoveTimer('unseen_blade_spawn_delay');

					RemoveTimer('unseen_blade_hunt_delay');

					ACS_Blade_Of_The_Unseen().SetVisibility(false);

					ACS_Blade_Of_The_Unseen().StopAllEffects();

					ACS_Blade_Of_The_Unseen().DestroyAfter(1);

					if (GetACSStorage().Unseen_Blade_Death_Count() == 0)
					{
						GetWitcherPlayer().DisplayHudMessage( "<b>You are ... worthy. Pray that we do not meet again.</b>" );
					}
					else if (GetACSStorage().Unseen_Blade_Death_Count() == 1)
					{
						GetWitcherPlayer().DisplayHudMessage( "<b>You are warned. Next time I shall not be so kind.</b>" );
					}
					else if (GetACSStorage().Unseen_Blade_Death_Count() == 2)
					{
						GetWitcherPlayer().DisplayHudMessage( "<b>WITCHER. ONLY YOUR DEATH SHALL APPEASE ME NOW.</b>" );

						AddTimer('Unseen_Monster_Summon', 5, false);
					}

					GetACSStorage().Unseen_Blade_Death_Count_Increment();

					ACS_Blade_Of_The_Unseen().AddTag('unseen_blade_despawn');
				}
			}
		}
	}

	private var undergroundVampireDroppeditemID : SItemUniqueId;

	function NovigradUndergroundVampireDeathEffects()
	{
		if (ACS_Novigrad_Underground_Vampire())
		{
			if (!ACS_Novigrad_Underground_Vampire().IsAlive())
			{
				if(!ACS_Novigrad_Underground_Vampire().HasTag('novigrad_underground_vampire_despawn'))
				{
					GetWitcherPlayer().DisplayHudMessage( "<b>Fuck you and fuck this shit. I'm out.</b>" );

					ACS_VampireBatsSpawnEffect(ACS_Novigrad_Underground_Vampire().GetWorldPosition());

					//ACS_Novigrad_Underground_Vampire().Teleport( thePlayer.GetWorldPosition() + Vector( 0, 0, -200 ) );

					//AddTimer('novigrad_underground_vampire_despawn', 0.1, false);

					ACS_Novigrad_Underground_Vampire().GetInventory().AddAnItem( 'acs_quen_monster_item', 1 );

					undergroundVampireDroppeditemID = ACS_Novigrad_Underground_Vampire().GetInventory().GetItemId('acs_quen_monster_item');

					ACS_Novigrad_Underground_Vampire().GetInventory().DropItemInBag(undergroundVampireDroppeditemID, 1);

					ACS_Novigrad_Underground_Vampire().SetVisibility(false);

					ACS_Novigrad_Underground_Vampire().StopAllEffects();

					ACS_Novigrad_Underground_Vampire().AddTag('novigrad_underground_vampire_despawn');
				}
			}
		}
	}

	private var rejkDroppeditemID : SItemUniqueId;

	function HubertRejkDeathEffects()
	{
		if (ACS_Hubert_Rejk_Vampire())
		{
			if (!ACS_Hubert_Rejk_Vampire().IsAlive())
			{
				if(!ACS_Hubert_Rejk_Vampire().HasTag('hubert_rejk_vampire_despawn'))
				{
					GetWitcherPlayer().DisplayHudMessage( "<b>I hope we meet again. May the Eternal Fire guide and protect you.</b>" );

					ACS_VampireBatsSpawnEffect(ACS_Hubert_Rejk_Vampire().GetWorldPosition());

					ACS_Hubert_Rejk_Vampire().SetVisibility(false);

					ACS_Hubert_Rejk_Vampire().StopAllEffects();

					ACS_Hubert_Rejk_Vampire().GetInventory().AddAnItem( 'acs_aard_pull_item' , 1 );

					rejkDroppeditemID = ACS_Hubert_Rejk_Vampire().GetInventory().GetItemId('acs_aard_pull_item');

					ACS_Hubert_Rejk_Vampire().GetInventory().DropItemInBag(rejkDroppeditemID, 1);

					ACS_Hubert_Rejk_Vampire().AddTag('hubert_rejk_vampire_despawn');
				}
			}
		}
	}

	timer function OriannaDeathDelay( time : float , id : int )
	{
		GetWitcherPlayer().DisplayHudMessage( "I ask you, my dear witcher, who is the real monster here? You, or me?" );

		ACS_VampireBatsSpawnEffect(ACS_Orianna_Vampire().GetWorldPosition());

		ACS_Orianna_Vampire().SetVisibility(false);
		
		ACS_Orianna_Vampire().DestroyAfter(1);
	}

	function OriannaDeathEffects()
	{
		if (ACS_Orianna_Vampire())
		{
			if (!ACS_Orianna_Vampire().IsAlive())
			{
				if(!ACS_Orianna_Vampire().HasTag('acs_orianna_despawn'))
				{
					ACS_Orianna_Vampire().StopAllEffects();

					RemoveTimer('OriannaDeathDelay');

					AddTimer('OriannaDeathDelay', 7, false);

					if ( FactsQuerySum("ACS_Orianna_Killed") <= 0 )
					{
						FactsAdd("ACS_Orianna_Killed", 1, -1);
					}

					ACS_Orianna_Vampire().AddTag('acs_orianna_despawn');
				}
			}
		}
	}

	private var droppeditemID : SItemUniqueId;

	function FireBearDeathEffects()
	{
		if (ACSFireBear())
		{
			if (!ACSFireBear().IsAlive())
			{
				if(!ACSFireBear().HasTag('acs_fire_bear_despawn'))
				{
					if( FactsQuerySum("NewGamePlus") > 0 )
					{
						ACSFireBear().GetInventory().AddAnItem( 'NGP_ACS_Armor_Omega' , 1 );

						droppeditemID = ACSFireBear().GetInventory().GetItemId('NGP_ACS_Armor_Omega');
					}
					else
					{
						ACSFireBear().GetInventory().AddAnItem( 'ACS_Armor_Omega' , 1 );

						droppeditemID = ACSFireBear().GetInventory().GetItemId('ACS_Armor_Omega');
					}

					ACSFireBear().GetInventory().DropItemInBag(droppeditemID, 1);

					RemoveTimer('DropBearMeteorStart');

					RemoveTimer('DropBearMeteorAscend');

					RemoveTimer('DropBearMeteor');

					RemoveTimer('DropBearSummon');

					GetWitcherPlayer().DisplayHudMessage( "<b>AVATAR OF THE CHAOS FLAME VANQUISHED</b>" );

					GetACSFireSkyEnt().Destroy();

					ACS_FireBearDespawnEffect();

					animatedComponentA = (CAnimatedComponent)((CNewNPC)ACSFireBear()).GetComponentByClassName( 'CAnimatedComponent' );

					animatedComponentA.PlaySlotAnimationAsync ( 'bear_death_burning', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0));
	
					animatedComponentA.FreezePoseFadeIn(6.25);

					//ACSFireBear().SetVisibility(false);

					ACSFireBear().StopEffect('flames');
					ACSFireBear().StopEffect('critical_burning');

					//ACSFireBear().DestroyAfter(1);

					ACSFireBear().AddTag('acs_fire_bear_despawn');
				}
			}
		}
	}

	function FireBearAltarDeathEffects()
	{
		if (ACSFireBearAltarEntity())
		{
			if (!ACSFireBearAltarEntity().IsAlive())
			{
				if(!ACSFireBearAltarEntity().HasTag('acs_fire_bear_spawn'))
				{
					GetWitcherPlayer().DisplayHudMessage( "<b>AVATAR OF THE CHAOS FLAME SUMMONED</b>" );

					ACS_FireBearSpawnEffect();

					ACS_dropbearbossfight();

					ACSFireBearAltarEntity().DestroyAfter(1);

					ACSFireBearAltar().DestroyAfter(1);

					ACSFireBearAltarEntity().AddTag('acs_fire_bear_spawn');
				}
			}
		}
	}

	function SheWhoKnowsDeathEffects()
	{
		if (ACSSheWhoKnows())
		{
			if (!ACSSheWhoKnows().IsAlive())
			{
				if(!ACSSheWhoKnows().HasTag('acs_she_who_knows_despawn'))
				{
					if( FactsQuerySum("NewGamePlus") > 0 )
					{
						ACSSheWhoKnows().GetInventory().AddAnItem( 'NGP_ACS_Gloves' , 1 );

						droppeditemID = ACSSheWhoKnows().GetInventory().GetItemId('NGP_ACS_Gloves');
					}
					else
					{
						ACSSheWhoKnows().GetInventory().AddAnItem( 'ACS_Gloves' , 1 );

						droppeditemID = ACSSheWhoKnows().GetInventory().GetItemId('ACS_Gloves');
					}

					ACSSheWhoKnows().GetInventory().DropItemInBag(droppeditemID, 1);

					RemoveTimer('SheWhoKnowsHide');

					RemoveTimer('SheWhoKnowsProjectileVolley1');

					RemoveTimer('SheWhoKnowsProjectileVolley2');

					RemoveTimer('SheWhoKnowsProjectileVolley3');

					RemoveTimer('SheWhoKnowsTeleport');

					RemoveTimer('SheWhoKnowsProjectileSingle');

					RemoveTimer('SheWhoKnowsProjectileSingleStop');

					GetWitcherPlayer().DisplayHudMessage( "<b>PESTILENCE VANQUISHED</b>" );

					animatedComponentA = (CAnimatedComponent)((CNewNPC)ACSSheWhoKnows()).GetComponentByClassName( 'CAnimatedComponent' );

					animatedComponentA.PlaySlotAnimationAsync ( 'death_burning', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 1));

					ACSSheWhoKnows().PlayEffectSingle('fire_hit');
					ACSSheWhoKnows().PlayEffectSingle('critical_burning');
					ACSSheWhoKnows().PlayEffectSingle('critical_burning');
					ACSSheWhoKnows().PlayEffectSingle('critical_burning');
					ACSSheWhoKnows().PlayEffectSingle('critical_burning');
					ACSSheWhoKnows().PlayEffectSingle('critical_burning');

					ACSSheWhoKnows().DestroyAfter(6);

					ACSSheWhoKnows().AddTag('acs_she_who_knows_despawn');
				}
			}
		}
	}

	function KnightmareEternumDeathEffects()
	{
		if (GetACSKnightmareEternum())
		{
			if (!thePlayer.IsAlive())
			{
				GetACSKnightmareEternum().StopAllEffects();

				GetACSKnightmareEternum().SetVisibility(false);

				GetACSKnightmareSwordTrail().Destroy();

				GetACSKnightmareQuenHit().Destroy();

				GetACSKnightmareQuen().Destroy();

				GetACSKnightmareChestBlade4().Destroy();

				GetACSKnightmareChestBlade3().Destroy();

				GetACSKnightmareChestBlade2().Destroy();

				GetACSKnightmareChestBlade1().Destroy();

				GetACSKnightmareEternum().DestroyAfter(1);
			}
			else
			{
				if (GetACSKnightmareEternum().IsAlive())
				{
					if ( GetACSKnightmareEternum().HasAbility('EtherealActive') )
					{
						(GetACSKnightmareEternum().GetInventory().GetItemEntityUnsafe( GetACSKnightmareEternum().GetInventory().GetItemFromSlot( 'r_weapon' ) )).SetHideInGame(true);

						GetACSKnightmareSwordTrail().StopEffect('special_attack_iris');
						GetACSKnightmareSwordTrail().PlayEffectSingle('special_attack_iris');

						//GetACSKnightmareSwordTrail().StopEffect('special_attack_charged_iris');
						//GetACSKnightmareSwordTrail().PlayEffectSingle('special_attack_charged_iris');

						GetACSKnightmareSwordTrail().StopEffect('special_attack_ready_iris');
						GetACSKnightmareSwordTrail().PlayEffectSingle('special_attack_ready_iris');

						GetACSKnightmareChestBlade1().StopEffect('chest_sword_1');
						GetACSKnightmareChestBlade1().PlayEffectSingle('chest_sword_1');

						GetACSKnightmareChestBlade2().StopEffect('chest_sword_1');
						GetACSKnightmareChestBlade2().PlayEffectSingle('chest_sword_1');

						GetACSKnightmareChestBlade3().StopEffect('chest_sword_1');
						GetACSKnightmareChestBlade3().PlayEffectSingle('chest_sword_1');

						GetACSKnightmareChestBlade4().StopEffect('chest_sword_1');
						GetACSKnightmareChestBlade4().PlayEffectSingle('chest_sword_1');
					}
				}
				else
				{
					if(!GetACSKnightmareEternum().HasTag('acs_knightmare_despawn'))
					{
						if( FactsQuerySum("NewGamePlus") > 0 )
						{
							GetACSKnightmareEternum().GetInventory().AddAnItem( 'NGP_ACS_Boots' , 1 );

							droppeditemID = GetACSKnightmareEternum().GetInventory().GetItemId('NGP_ACS_Boots');
						}
						else
						{
							GetACSKnightmareEternum().GetInventory().AddAnItem( 'ACS_Boots' , 1 );

							droppeditemID = GetACSKnightmareEternum().GetInventory().GetItemId('ACS_Boots');
						}

						GetACSKnightmareEternum().GetInventory().DropItemInBag(droppeditemID, 1);

						RemoveTimer('KnightmareEternumShout');

						RemoveTimer('KnightmareEternumIgni');

						GetACSKnightmareEternum().StopAllEffects();

						GetACSKnightmareEternum().SetVisibility(false);

						GetACSKnightmareSwordTrail().Destroy();

						GetACSKnightmareQuenHit().Destroy();

						GetACSKnightmareQuen().Destroy();

						GetACSKnightmareChestBlade4().Destroy();

						GetACSKnightmareChestBlade3().Destroy();

						GetACSKnightmareChestBlade2().Destroy();

						GetACSKnightmareChestBlade1().Destroy();

						GetACSKnightmareEternum().DestroyAfter(1);

						GetACSKnightmareEternum().AddTag('acs_knightmare_despawn');
					}
				}
			}
		}
		else
		{
			return;
		}
	}

	function ForestGodDeathEffects()
	{
		if (ACS_Forest_God())
		{
			if (!ACS_Forest_God().IsAlive())
			{
				if(!ACS_Forest_God().HasTag('acs_forest_god_despawn'))
				{
					ACS_Forest_God().GetInventory().AddAnItem( 'ACS_Steel_Aerondight' , 1 );

					droppeditemID = ACS_Forest_God().GetInventory().GetItemId('ACS_Steel_Aerondight');
	
					ACS_Forest_God().GetInventory().DropItemInBag(droppeditemID, 1);

					ACS_Forest_God().StopAllEffects();

					ACS_Forest_God().PlayEffectSingle('hym_despawn');

					ACS_Forest_God().PlayEffectSingle('hym_summon');

					ACS_Forest_God().SetVisibility(false);

					ACS_Forest_God().DestroyAfter(2);

					ACS_Forest_God().AddTag('acs_forest_god_despawn');
				}
			}
		}
		else
		{
			return;
		}
	}

	private var droppeditemIDVampireMonsterRing : SItemUniqueId;

	function VampreMonsterDeathEffects()
	{
		if (ACSVampireMonsterBossBar())
		{
			if (!ACSVampireMonsterBossBar().IsAlive())
			{
				if(!ACSVampireMonsterBossBar().HasTag('acs_vampire_monster_despawn'))
				{
					GetWitcherPlayer().DisplayHudMessage( "<b>NIGHTMARE REPELLED</b>" );

					if( FactsQuerySum("NewGamePlus") > 0 )
					{
						ACSVampireMonsterBossBar().GetInventory().AddAnItem( 'NGP_ACS_Pants' , 1 );

						droppeditemID = ACSVampireMonsterBossBar().GetInventory().GetItemId('NGP_ACS_Pants');
					}
					else
					{
						ACSVampireMonsterBossBar().GetInventory().AddAnItem( 'ACS_Pants' , 1 );

						droppeditemID = ACSVampireMonsterBossBar().GetInventory().GetItemId('ACS_Pants');
					}

					ACSVampireMonsterBossBar().GetInventory().DropItemInBag(droppeditemID, 1);

					ACSVampireMonsterBossBar().GetInventory().AddAnItem( 'acs_vampire_ring' , 1 );

					droppeditemIDVampireMonsterRing = ACSVampireMonsterBossBar().GetInventory().GetItemId('acs_vampire_ring');

					ACSVampireMonsterBossBar().GetInventory().DropItemInBag(droppeditemIDVampireMonsterRing, 1);

					ACS_VampireBatsSpawnEffect(ACSVampireMonster().GetWorldPosition());

					ACSVampireMonster().DestroyAfter(0.5);

					ACSVampireMonsterBossBar().DestroyAfter(0.5);

					ACSVampireMonsterBossBar().AddTag('acs_vampire_monster_despawn');
				}
			}
		}

		if (ACSVampireMonster())
		{
			if (!ACSVampireMonster().IsAlive())
			{
				if(!ACSVampireMonster().HasTag('acs_vampire_monster_not_alive_state'))
				{
					ACS_VampireBatsSpawnEffect(ACSVampireMonster().GetWorldPosition());

					ACSVampireMonster().SetVisibility(false);

					AddTimer('Vampire_Monster_Respwan_Reveal', 10, false);

					ACSVampireMonster().AddTag('acs_vampire_monster_not_alive_state');
				}
			}
		}
	}

	function BigLizardDeathEffects()
	{
		if (ACSBigLizard())
		{
			if (!ACSBigLizard().IsAlive())
			{
				if(!ACSBigLizard().HasTag('acs_big_lizard_not_alive_state'))
				{
					ACSBigLizard().StopAllEffects();

					ACSBigLizard().PlayEffectSingle('fire_hit');

					ACSBigLizard().AddTag('acs_big_lizard_not_alive_state');
				}
			}
		}
		else
		{
			return;
		}
	}

	function RatMageDeathEffects()
	{
		if (GetACSRatMage())
		{
			if (!GetACSRatMage().IsAlive())
			{
				if(!GetACSRatMage().HasTag('acs_rat_mage_not_alive_state'))
				{
					animatedComponentA = (CAnimatedComponent)((CNewNPC)GetACSRatMage()).GetComponentByClassName( 'CAnimatedComponent' );

					animatedComponentA.PlaySlotAnimationAsync ( 'man_npc_longsword_death_front_01', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 1));

					GetACSRatMage().PlayEffectSingle('ethereal_debuff');

					GetACSRatMage().DestroyAfter(1.5);

					GetACSRatMage().AddTag('acs_rat_mage_not_alive_state');
				}
			}
		}
		else
		{
			return;
		}
	}

	timer function EredinDeathPortalDelay( time : float , id : int )
	{
		var temp											: CEntityTemplate;
		var ent												: CEntity;
		var playerRot, rotationAdjusted 					: EulerAngles;

		temp = (CEntityTemplate)LoadResource( 

		"quests\part_1\quest_files\q203_him\entities\q203_ciri_portal.w2ent"
			
		, true );

		playerRot = thePlayer.GetWorldRotation();

		playerRot.Yaw += 180;

		rotationAdjusted = EulerAngles(0,0,0);

		rotationAdjusted.Yaw = playerRot.Yaw;

		ent = theGame.CreateEntity( temp, GetACSEredin().GetWorldPosition(), rotationAdjusted );

		ent.PlayEffectSingle('teleport_fx');

		ent.DestroyAfter(4.25);

		GetACSEredin().AddTag('acs_eredin_not_alive_state_play_loop_anim');

		GetACSEredin().StopAllEffects();
	}

	timer function EredinDeathEffectDelay( time : float , id : int )
	{
		GetACSEredin().StopAllEffects();

		GetACSEredin().PlayEffectSingle('disintegration2');

		GetACSEredin().PlayEffectSingle('rift_fx_special');

		GetACSEredin().PlayEffectSingle('disappear');
	}

	function CreateCanarisLoot()
	{
		var loot_temp							: CEntityTemplate;
		var loot 								: CEntity;
		var droppeditemID 						: SItemUniqueId;

		loot_temp = (CEntityTemplate)LoadResource( "dlc\dlc_acs\data\fx\acs_guiding_light.w2ent", true );

		loot = (CEntity)theGame.CreateEntity( loot_temp, thePlayer.GetWorldPosition() );

		((CNewNPC)loot).EnableCharacterCollisions(false);
		((CNewNPC)loot).EnableCollisions(false);

		((CActor)loot).AddBuffImmunity_AllNegative('ACS_Loot_Entity', true);

		((CActor)loot).AddBuffImmunity_AllCritical('ACS_Loot_Entity', true);

		((CActor)loot).SetUnpushableTarget(thePlayer);

		((CActor)loot).SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
		((CActor)loot).SetCanPlayHitAnim(false); 

		((CNewNPC)loot).SetTemporaryAttitudeGroup( 'q104_avallach_friendly_to_all', AGP_Default );

		((CActor)(loot)).GetInventory().RemoveAllItems();

		((CActor)(loot)).GetInventory().AddAnItem( 'ACS_Steel_Zireal_Sword' , 1 );

		droppeditemID = ((CActor)(loot)).GetInventory().GetItemId('ACS_Steel_Zireal_Sword');

		((CActor)(loot)).GetInventory().DropItemInBag(droppeditemID, 1);

		loot.DestroyAfter(0.5);
	}

	private var droppeditemIDSteelZireal : SItemUniqueId;

	function ACSEredinDeathEffects()
	{
		var movementAdjustorNPC																									: CMovementAdjustor; 
		var ticketNPC 																											: SMovementAdjustmentRequestTicket;
	
		if (GetACSEredin())
		{
			if (!GetACSEredin().IsAlive())
			{
				animatedComponentA = (CAnimatedComponent)((CNewNPC)GetACSEredin()).GetComponentByClassName( 'CAnimatedComponent' );

				if (GetACSEredin().HasTag('acs_eredin_not_alive_state_play_loop_anim'))
				{
					animatedComponentA.PlaySlotAnimationAsync ( 'swordground_ready_loop_01', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.1f, 0.1f));
				}

				if(!GetACSEredin().HasTag('acs_eredin_not_alive_state'))
				{
					RemoveTimer('ACS_Eredin_Kill_Timer');

					movementAdjustorNPC = GetACSEredin().GetMovingAgentComponent().GetMovementAdjustor();

					ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_Eredin_Death_Rotate');
					movementAdjustorNPC.CancelByName( 'ACS_Eredin_Death_Rotate' );
					movementAdjustorNPC.CancelAll();

					ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_Eredin_Death_Rotate' );
					movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.125 );
					movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 500000 );
					movementAdjustorNPC.AdjustLocationVertically( ticketNPC, true );
					movementAdjustorNPC.ScaleAnimationLocationVertically( ticketNPC, true );

					movementAdjustorNPC.RotateTowards( ticketNPC, GetWitcherPlayer() );

					movementAdjustorNPC.SlideTo( ticketNPC, ACSPlayerFixZAxis(GetACSEredin().GetWorldPosition() + GetACSEredin().GetWorldForward() * -3) );

					animatedComponentA.PlaySlotAnimationAsync ( 'blink_start_back_ready', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));

					AddTimer('EredinDeathPortalDelay', 0.75, false);

					AddTimer('EredinDeathEffectDelay', 4.75, false);

					GetACSEredin().DestroyAfter(5.25);

					GetACSEredin().AddTag('acs_eredin_not_alive_state');
				}
			}
			else
			{
				if (!GetACSEredin().IsEffectActive('cold', false))
				{
					//GetACSEredin().PlayEffectSingle('cold');
				}

				if (!GetACSEredin().IsEffectActive('ice_armor_cutscene', false))
				{
					//GetACSEredin().PlayEffectSingle('ice_armor_cutscene');
				}
			}
		}
		else
		{
			return;
		}
	}

	timer function CanarisDeathEffectDelay( time : float , id : int )
	{
		GetACSCanaris().StopAllEffects();

		GetACSCanaris().DestroyEffect('teleport_short');
		GetACSCanaris().PlayEffectSingle('teleport_short');
		GetACSCanaris().StopEffect('teleport_short');

		GetACSCanaris().DestroyEffect('ice_armor');
		GetACSCanaris().PlayEffectSingle('ice_armor');
	}

	function ACSCaranthirnDeathEffects()
	{
		var movementAdjustorNPC																									: CMovementAdjustor; 
		var ticketNPC 																											: SMovementAdjustmentRequestTicket;
	
		if (GetACSCanaris())
		{
			if (!GetACSCanaris().IsAlive())
			{
				animatedComponentA = (CAnimatedComponent)((CNewNPC)GetACSCanaris()).GetComponentByClassName( 'CAnimatedComponent' );

				if(!GetACSCanaris().HasTag('acs_canaris_not_alive_state'))
				{
					GetACSCanaris().GetInventory().RemoveAllItems();

					GetACSCanarisMeleeEffect().PlayEffectSingle('explode');

					GetACSCanarisMeleeEffect().DestroyAfter(0.5);

					animatedComponentA.PlaySlotAnimationAsync ( 'man_npc_2hhammer_death_front_01', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.5f));

					GetACSCanaris().AddTag('acs_canaris_not_alive_state');

					animatedComponentA.FreezePoseFadeIn(5);

					AddTimer('CanarisDeathEffectDelay', 1.5, false);

					GetACSCanaris().DestroyAfter(2);

					//CreateCanarisLoot();

					GetACSCanaris().GetInventory().AddAnItem( 'ACS_Steel_Zireal_Sword' , 1 );

					droppeditemIDSteelZireal = GetACSCanaris().GetInventory().GetItemId('ACS_Steel_Zireal_Sword');

					GetACSCanaris().GetInventory().DropItemInBag(droppeditemIDSteelZireal, 1);

					GetACSCanaris().AddTag('acs_canaris_not_alive_state');
				}
			}
		}
		else
		{
			return;
		}
	}

	timer function NightStalkerDeathCamo( time : float , id : int )
	{
		GetACSNightStalker().StopAllEffects();

		GetACSNightStalker().DestroyEffect('glow');

		GetACSNightStalker().DestroyEffect('disappear');

		GetACSNightStalker().DestroyEffect('predator_mode');

		GetACSNightStalker().DestroyEffect('special_force_r');

		GetACSNightStalker().DestroyEffect('special_force_l');

		GetACSNightStalker().PlayEffectSingle('disappear');

		GetACSNightStalker().PlayEffectSingle('predator_mode');
	}

	timer function NightStalkerDeathTeleport( time : float , id : int )
	{
		GetACSNightStalker().Teleport( GetWitcherPlayer().GetWorldPosition() + Vector( 0, 0, -200 ) );
	}

	timer function NightStalkerCamo( time : float , id : int )
	{
		GetACSNightStalker().DestroyEffect('demonic_possession');

		GetACSNightStalker().DestroyEffect('glow');

		GetACSNightStalker().DestroyEffect('disappear');

		GetACSNightStalker().DestroyEffect('special_force_r');

		GetACSNightStalker().DestroyEffect('special_force_l');

		if (!GetACSNightStalker().IsEffectActive('predator_mode', true))
		{
			GetACSNightStalker().DestroyEffect('demonic_possession');

			GetACSNightStalker().DestroyEffect('glow');

			GetACSNightStalker().DestroyEffect('disappear');

			GetACSNightStalker().DestroyEffect('predator_mode');

			GetACSNightStalker().DestroyEffect('special_force_r');

			GetACSNightStalker().DestroyEffect('special_force_l');

			GetACSNightStalker().PlayEffectSingle('predator_mode');

			GetACSNightStalker().SetTatgetableByPlayer(false);

			//AddTimer('NightStalkerVisibility', 1.5, false);
		}
	}

	timer function NightStalkerVisibility( time : float , id : int )
	{
		GetACSNightStalker().DestroyEffect('glow');

		GetACSNightStalker().DestroyEffect('disappear');

		GetACSNightStalker().DestroyEffect('predator_mode');

		GetACSNightStalker().DestroyEffect('special_force_r');

		GetACSNightStalker().DestroyEffect('special_force_l');

		GetACSNightStalker().PlayEffectSingle('predator_mode');
	}

	function NightStalkerDeathEffects()
	{
		var movementAdjustorNPC																									: CMovementAdjustor; 
		var ticketNPC 																											: SMovementAdjustmentRequestTicket;
	
		if (GetACSNightStalker())
		{
			if (!GetACSNightStalker().IsAlive())
			{
				animatedComponentA = (CAnimatedComponent)((CNewNPC)GetACSNightStalker()).GetComponentByClassName( 'CAnimatedComponent' );

				if(!GetACSNightStalker().HasTag('acs_night_stalker_not_alive_state'))
				{
					RemoveTimer('NightStalkerCamo');

					RemoveTimer('NightStalkerVisibility');

					RemoveTimer('ACS_NightStalker_Kill_Timer');

					GetACSNightStalker().DestroyEffect('disappear');

					GetACSNightStalker().DestroyEffect('predator_mode');

					GetACSNightStalker().DestroyEffect('glow');

					GetACSNightStalker().PlayEffectSingle('glow');

					GetACSNightStalker().EnableCharacterCollisions(false);
					//GetACSNightStalker().EnableCollisions(false);

					movementAdjustorNPC = GetACSNightStalker().GetMovingAgentComponent().GetMovementAdjustor();

					ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_Night_Stalker_Death_Rotate');
					movementAdjustorNPC.CancelByName( 'ACS_Night_Stalker_Death_Rotate' );
					movementAdjustorNPC.CancelAll();

					ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_Night_Stalker_Death_Rotate' );
					movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.25 );
					movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 500000 );
					movementAdjustorNPC.AdjustLocationVertically( ticketNPC, true );
					movementAdjustorNPC.ScaleAnimationLocationVertically( ticketNPC, true );

					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer, RandRangeF(225,135) );

					animatedComponentA.PlaySlotAnimationAsync ( 'monster_katakan_q704_jumping_across_roof', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));

					RemoveTimer('NightStalkerDeathCamo');
					AddTimer('NightStalkerDeathCamo', 1.4, false);

					RemoveTimer('NightStalkerDeathTeleport');
					AddTimer('NightStalkerDeathTeleport', 1.55, false);

					GetACSNightStalker().DestroyAfter(1.75);

					GetACSNightStalker().AddTag('acs_night_stalker_not_alive_state');
				}
			}
		}
		else
		{
			return;
		}
	}

	function XenoTyrantDeathEffects()
	{
		if (GetACSXenoTyrant())
		{
			if (!GetACSXenoTyrant().IsAlive())
			{
				if(!GetACSXenoTyrant().HasTag('acs_xeno_tyrant_despawn'))
				{
					if( FactsQuerySum("NewGamePlus") > 0 )
					{
						GetACSXenoTyrant().GetInventory().AddAnItem( 'ACS_Silver_Zireal_Sword' , 1 );

						droppeditemID = GetACSXenoTyrant().GetInventory().GetItemId('ACS_Silver_Zireal_Sword');
					}
					else
					{
						GetACSXenoTyrant().GetInventory().AddAnItem( 'ACS_Silver_Zireal_Sword' , 1 );

						droppeditemID = GetACSXenoTyrant().GetInventory().GetItemId('ACS_Silver_Zireal_Sword');
					}

					GetACSXenoTyrant().GetInventory().DropItemInBag(droppeditemID, 1);

					GetACSXenoTyrant().PlayEffectSingle('critical_burning');

					GetACSXenoTyrant().AddTag('acs_xeno_tyrant_despawn');
				}
			}
		}
		else
		{
			return;
		}
	}

	function FireGargoyleDeathEffects()
	{
		if (GetACSFireGargoyle())
		{
			if (!GetACSFireGargoyle().IsAlive())
			{
				if(!GetACSFireGargoyle().HasTag('acs_fire_gargoyle_despawn'))
				{
					RemoveTimer('FireGargoyleFireballDelay');

					RemoveTimer('FireGargoyleJumpInDelay');

					animatedComponentA = (CAnimatedComponent)((CNewNPC)GetACSFireGargoyle()).GetComponentByClassName( 'CAnimatedComponent' );

					if(RandF() < 0.5)
					{
						animatedComponentA.PlaySlotAnimationAsync ( 'death_01', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
					}
					else
					{
						animatedComponentA.PlaySlotAnimationAsync ( 'death_02', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
					}

					animatedComponentA.FreezePoseFadeIn(3);

					GetACSFireGargoyle().PlayEffectSingle('fire_hit');

					//GetACSFireGargoyle().DestroyAfter(6);

					GetACSFireGargoyle().AddTag('acs_fire_gargoyle_despawn');
				}
			}
		}
		else
		{
			return;
		}
	}

	function FluffyDeathEffects()
	{
		if (GetACSFluffy())
		{
			if (!GetACSFluffy().IsAlive())
			{
				if(!GetACSFluffy().HasTag('acs_fluffy_despawn'))
				{
					GetACSFluffyKillAdds();

					animatedComponentA = (CAnimatedComponent)((CNewNPC)GetACSFluffy()).GetComponentByClassName( 'CAnimatedComponent' );

					animatedComponentA.PlaySlotAnimationAsync ( 'wolf_burning_death', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));

					animatedComponentA.FreezePoseFadeIn(2);

					GetACSFluffy().DestroyAfter(4);

					GetACSFluffy().AddTag('acs_fluffy_despawn');
				}
			}
		}
		else
		{
			return;
		}
	}

	function FogAssassinDeathEffects()
	{
		if (GetACSFogAssassin())
		{
			if (!GetACSFogAssassin().IsAlive())
			{
				if(!GetACSFogAssassin().HasTag('acs_fog_assassin_despawn'))
				{
					GetACSFogAssassinKillAdds();

					GetACSFogAssassinDestroyFogEnts();

					GetACSFogAssassin().AddTag('acs_fog_assassin_despawn');
				}
			}
		}
		else
		{
			return;
		}
	}

	function MelusineDeathEffects()
	{
		if (GetACSMelusine())
		{
			if (!GetACSMelusine().IsAlive())
			{
				if(!GetACSMelusine().HasTag('acs_melusine_despawn'))
				{
					GetACSMelusineCloud().Destroy();

					GetACSMelusineBossbar().Destroy();

					GetACSMelusine().AddTag('acs_melusine_despawn');
				}
			}
		}
		else
		{
			return;
		}
	}

	function Enemy_Death_Effects()
	{
		BladeOfTheUnseenDeathEffects();

		NovigradUndergroundVampireDeathEffects();

		HubertRejkDeathEffects();

		OriannaDeathEffects();

		FireBearDeathEffects();

		FireBearAltarDeathEffects();

		SheWhoKnowsDeathEffects();

		KnightmareEternumDeathEffects();

		ForestGodDeathEffects();

		VampreMonsterDeathEffects();

		BigLizardDeathEffects();

		RatMageDeathEffects();

		ACSEredinDeathEffects();

		ACSCaranthirnDeathEffects();

		NightStalkerDeathEffects();

		XenoTyrantDeathEffects();

		FireGargoyleDeathEffects();

		FluffyDeathEffects();

		FogAssassinDeathEffects();

		MelusineDeathEffects();
	}

	timer function Unseen_Monster_Summon( time : float , id : int )
	{
		GetACSStorage().Unseen_Blade_Death_Count_Reset();
		
		vACS_Unseen_Blade_Summon = new cACS_Unseen_Blade_Summon in this;

		vACS_Unseen_Blade_Summon.ACS_Unseen_Monster_Summon_Start_Engage();
	}

	timer function Vampire_Monster_Respwan_Reveal( time : float , id : int )
	{
		ACSVampireMonster().SetVisibility(true);

		ACSVampireMonster().RemoveTag('acs_vampire_monster_not_alive_state');
	}

	timer function novigrad_underground_vampire_despawn( time : float , id : int )
	{
		ACS_Novigrad_Underground_Vampire().Destroy();
	}

	timer function unseen_blade_despawn( time : float , id : int )
	{
		ACS_Blade_Of_The_Unseen().Destroy();
	}

	timer function hubert_rejk_vampire_despawn( time : float , id : int )
	{
		ACS_Hubert_Rejk_Vampire().Destroy();
	}

	function Critical_Low_Health_Fix()
	{
		thePlayer.DestroyEffect('critical_low_health');

		thePlayer.DestroyEffect('covered_blood');

		/*
		if (!((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("WolfHeadModule")).GetEnabled())
		{
			if( thePlayer.GetStat( BCS_Vitality ) == thePlayer.GetStatMax( BCS_Vitality ) )
			{
				thePlayer.StopEffect('acs_critical_low_health');
				thePlayer.StopEffect('acs_half_health');
				thePlayer.StopEffect('acs_critical_half_health');
				thePlayer.StopEffect('acs_three_quarter_health');
			}
			else if( thePlayer.GetStat( BCS_Vitality ) < thePlayer.GetStatMax( BCS_Vitality ) 
			&& thePlayer.GetStat( BCS_Vitality ) >= thePlayer.GetStatMax( BCS_Vitality ) * 0.75 
			)
			{
				thePlayer.StopEffect('acs_critical_low_health');
				thePlayer.StopEffect('acs_critical_half_health');
				thePlayer.StopEffect('acs_half_health');

				thePlayer.PlayEffectSingle('acs_three_quarter_health');
			}
			else if( thePlayer.GetStat( BCS_Vitality ) < thePlayer.GetStatMax( BCS_Vitality ) * 0.75 
			&& thePlayer.GetStat( BCS_Vitality ) >= thePlayer.GetStatMax( BCS_Vitality ) * 0.5 
			)
			{
				thePlayer.StopEffect('acs_critical_low_health');
				thePlayer.StopEffect('acs_critical_half_health');
				thePlayer.StopEffect('acs_three_quarter_health');

				thePlayer.PlayEffectSingle('acs_half_health');
			}
			else if( thePlayer.GetStat( BCS_Vitality ) < thePlayer.GetStatMax( BCS_Vitality ) * 0.5 
			&& thePlayer.GetStat( BCS_Vitality ) >= thePlayer.GetStatMax( BCS_Vitality ) * 0.25 )
			{
				thePlayer.StopEffect('acs_critical_low_health');
				thePlayer.StopEffect('acs_three_quarter_health');
				thePlayer.StopEffect('acs_half_health');

				thePlayer.PlayEffectSingle('acs_critical_half_health');
			}
			else if( thePlayer.GetStat( BCS_Vitality ) < thePlayer.GetStatMax( BCS_Vitality ) * 0.25 )
			{
				thePlayer.StopEffect('acs_half_health');
				thePlayer.StopEffect('acs_three_quarter_health');
				thePlayer.StopEffect('acs_critical_half_health');

				thePlayer.PlayEffectSingle('acs_critical_low_health');
			}
		}
		else
		{
			if( thePlayer.GetStat( BCS_Vitality ) < thePlayer.GetStatMax( BCS_Vitality ) * 0.25 )
			{
				thePlayer.PlayEffectSingle('acs_critical_low_health');
			}
			else
			{
				thePlayer.StopEffect('acs_critical_low_health');
				thePlayer.DestroyEffect('acs_half_health');
				thePlayer.DestroyEffect('acs_critical_half_health');
				thePlayer.DestroyEffect('acs_three_quarter_health');
			}
		}
		*/
	}

	function HudSettingsCheck(nam : name) : string
	{
		var conf: CInGameConfigWrapper;
		var value: string;
		
		conf = (CInGameConfigWrapper)theGame.GetInGameConfigWrapper();
		
		value = conf.GetVarValue('Hud', nam);

		return value;
	}

	function BuffsHudEnabled(): bool 
	{
		var configValue :int;
		var configValueString : string;
		
		configValueString = HudSettingsCheck('BuffsModule');
		configValue =(int) configValueString;

		if(configValueString=="" || configValue<0)
		{
			return true;
		}

		else return (bool)configValueString;
	}

	function WolfHeadHudEnabled(): bool 
	{
		var configValue :int;
		var configValueString : string;
		
		configValueString = HudSettingsCheck('WolfHeadModule');
		configValue =(int) configValueString;

		if(configValueString=="" || configValue<0)
		{
			return true;
		}

		else return (bool)configValueString;
	}

	function ItemHudEnabled(): bool 
	{
		var configValue :int;
		var configValueString : string;
		
		configValueString = HudSettingsCheck('ItemInfoModule');
		configValue =(int) configValueString;

		if(configValueString=="" || configValue<0)
		{
			return true;
		}

		else return (bool)configValueString;
	}

	function MinimapHudEnabled(): bool 
	{
		var configValue :int;
		var configValueString : string;
		
		configValueString = HudSettingsCheck('Minimap2Module');
		configValue =(int) configValueString;

		if(configValueString=="" || configValue<0)
		{
			return true;
		}

		else return (bool)configValueString;
	}

	function QuestHudEnabled(): bool 
	{
		var configValue :int;
		var configValueString : string;
		
		configValueString = HudSettingsCheck('QuestsModule');
		configValue =(int) configValueString;

		if(configValueString=="" || configValue<0)
		{
			return true;
		}

		else return (bool)configValueString;
	}

	function ControlHintsHudEnabled(): bool 
	{
		var configValue :int;
		var configValueString : string;
		
		configValueString = HudSettingsCheck('ControlsFeedbackModule');
		configValue =(int) configValueString;

		if(configValueString=="" || configValue<0)
		{
			return true;
		}

		else return (bool)configValueString;
	}

	public timer function MinimapModuleDespawnDelay ( dt : float, id : int)
	{
		if (((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("Minimap2Module")).GetEnabled())
		{
			((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("Minimap2Module")).SetEnabled(false);
			((CR4ScriptedHud)theGame.GetHud()).UpdateHUD();
		}
	}

	public timer function QuestModuleDespawnDelay ( dt : float, id : int)
	{
		if (((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("QuestsModule")).GetEnabled())
		{
			((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("QuestsModule")).SetEnabled(false);
			((CR4ScriptedHud)theGame.GetHud()).UpdateHUD();
		}
	}

	public timer function ControlHintModuleDespawnDelay ( dt : float, id : int)
	{
		if (((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("ControlsFeedbackModule")).GetEnabled())
		{
			((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("ControlsFeedbackModule")).SetEnabled(false);
			((CR4ScriptedHud)theGame.GetHud()).UpdateHUD();
		}
	}

	public timer function BuffsModuleDespawnDelay ( dt : float, id : int)
	{
		if (((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("BuffsModule")).GetEnabled())
		{
			((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("BuffsModule")).SetEnabled(false);
			((CR4ScriptedHud)theGame.GetHud()).UpdateHUD();
		}
	}

	function MenuCutsceneHUDFix()
	{
		if ( theGame.IsDialogOrCutscenePlaying() 
		|| thePlayer.IsInNonGameplayCutscene() 
		|| thePlayer.IsInGameplayScene() 
		|| theGame.IsCurrentlyPlayingNonGameplayScene()
		|| theGame.IsFading()
		|| theGame.IsBlackscreen()
		|| theGame.IsPaused() 
		)
		{
			if ( FactsQuerySum("ACS_Player_Entered_Cutscene_Hud_Fact") <= 0 )
			{
				RemoveTimer('MinimapModuleDespawnDelay');

				if (FactsQuerySum("ACS_Minimap_Module_Hide") > 0)
				{
					FactsRemove("ACS_Minimap_Module_Hide");
				}

				RemoveTimer('QuestModuleDespawnDelay');

				if (FactsQuerySum("ACS_Quest_Module_Hide") > 0)
				{
					FactsRemove("ACS_Quest_Module_Hide");
				}

				RemoveTimer('ControlHintModuleDespawnDelay');

				if (FactsQuerySum("ACS_Control_Hint_Module_Hide") > 0)
				{
					FactsRemove("ACS_Control_Hint_Module_Hide");
				}

				RemoveTimer('BuffsModuleDespawnDelay');

				if (FactsQuerySum("ACS_Buffs_Module_Hide") > 0)
				{
					FactsRemove("ACS_Buffs_Module_Hide");
				}

				FactsAdd("ACS_Player_Entered_Cutscene_Hud_Fact", 1, -1);
			}
		}
		else
		{
			if (FactsQuerySum("ACS_Player_Entered_Cutscene_Hud_Fact") > 0)
			{
				RemoveTimer('MinimapModuleDespawnDelay');

				if (FactsQuerySum("ACS_Minimap_Module_Hide") > 0)
				{
					FactsRemove("ACS_Minimap_Module_Hide");
				}

				RemoveTimer('QuestModuleDespawnDelay');

				if (FactsQuerySum("ACS_Quest_Module_Hide") > 0)
				{
					FactsRemove("ACS_Quest_Module_Hide");
				}

				RemoveTimer('ControlHintModuleDespawnDelay');

				if (FactsQuerySum("ACS_Control_Hint_Module_Hide") > 0)
				{
					FactsRemove("ACS_Control_Hint_Module_Hide");
				}

				RemoveTimer('BuffsModuleDespawnDelay');

				if (FactsQuerySum("ACS_Buffs_Module_Hide") > 0)
				{
					FactsRemove("ACS_Buffs_Module_Hide");
				}

				FactsRemove("ACS_Player_Entered_Cutscene_Hud_Fact");
			}
		}
	}

	var last_hud_refresh_time : float;

	function ACS_can_refresh_hud(): bool 
	{
		return theGame.GetEngineTimeAsSeconds() - last_hud_refresh_time > 0.25f;
	}

	function ACS_refresh_hud_cooldown() 
	{
		last_hud_refresh_time = theGame.GetEngineTimeAsSeconds();
	}

	function HudModulesAutoHide()
	{
		var hud 						: CR4ScriptedHud;
		var hudWolfHeadModule 			: CR4HudModuleWolfHead;	
		var hudItemModule 				: CR4HudModuleItemInfo;	

		hud = (CR4ScriptedHud)theGame.GetHud();

		hudWolfHeadModule = (CR4HudModuleWolfHead)hud.GetHudModule( "WolfHeadModule" );

		hudItemModule = (CR4HudModuleItemInfo)hud.GetHudModule("ItemInfoModule");

		if ( hud )
		{
			if (!QuestHudEnabled())
			{
				if 
				(
				!ACS_CombatToExplorationCheck()
				|| thePlayer.IsInCombat()
				|| thePlayer.IsInCombatState()
				|| theGame.IsFocusModeActive()
				|| thePlayer.IsThreatened()
				|| ((CR4HudModuleRadialMenu)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("RadialMenuModule")).IsRadialMenuOpened()
				|| thePlayer.GetStat(BCS_Vitality) < thePlayer.GetStatMax(BCS_Vitality)
				)
				{
					if (FactsQuerySum("ACS_Quest_Module_Hide") > 0)
					{
						RemoveTimer('QuestModuleDespawnDelay');

						if (!((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("QuestsModule")).GetEnabled())
						{
							((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("QuestsModule")).SetEnabled(true);
							((CR4ScriptedHud)theGame.GetHud()).UpdateHUD();
						}

						FactsRemove("ACS_Quest_Module_Hide");
					}
				}
				else
				{
					if ( FactsQuerySum("ACS_Quest_Module_Hide") <= 0 )
					{
						RemoveTimer('QuestModuleDespawnDelay');
						AddTimer('QuestModuleDespawnDelay', 3.125, false);

						FactsAdd("ACS_Quest_Module_Hide", 1, -1);
					}
				}
			}
			else
			{
				RemoveTimer('QuestModuleDespawnDelay');

				if (FactsQuerySum("ACS_Quest_Module_Hide") > 0)
				{
					FactsRemove("ACS_Quest_Module_Hide");
				}
			}

			if (ControlHintsHudEnabled())
			{
				if 
				(
				!ACS_CombatToExplorationCheck()
				|| thePlayer.IsInCombat()
				|| thePlayer.IsInCombatState()
				|| theGame.IsFocusModeActive()
				|| thePlayer.IsThreatened()
				|| ((CR4HudModuleRadialMenu)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("RadialMenuModule")).IsRadialMenuOpened()
				|| thePlayer.GetStat(BCS_Vitality) < thePlayer.GetStatMax(BCS_Vitality)
				)
				{
					if (FactsQuerySum("ACS_Control_Hint_Module_Hide") > 0)
					{
						RemoveTimer('ControlHintModuleDespawnDelay');

						if (!((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("ControlsFeedbackModule")).GetEnabled())
						{
							((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("ControlsFeedbackModule")).SetEnabled(true);
							((CR4ScriptedHud)theGame.GetHud()).UpdateHUD();
						}

						FactsRemove("ACS_Control_Hint_Module_Hide");
					}
				}
				else
				{
					if ( FactsQuerySum("ACS_Control_Hint_Module_Hide") <= 0 )
					{
						RemoveTimer('ControlHintModuleDespawnDelay');
						AddTimer('ControlHintModuleDespawnDelay', 3.125, false);

						FactsAdd("ACS_Control_Hint_Module_Hide", 1, -1);
					}
				}
			}
			else
			{
				RemoveTimer('ControlHintModuleDespawnDelay');

				if (FactsQuerySum("ACS_Control_Hint_Module_Hide") > 0)
				{
					FactsRemove("ACS_Control_Hint_Module_Hide");
				}
			}

			if (BuffsHudEnabled())
			{
				if 
				(
				!ACS_CombatToExplorationCheck()
				|| thePlayer.IsInCombat()
				|| thePlayer.IsInCombatState()
				|| theGame.IsFocusModeActive()
				|| thePlayer.IsThreatened()
				|| ((CR4HudModuleRadialMenu)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("RadialMenuModule")).IsRadialMenuOpened()
				|| thePlayer.GetStat(BCS_Vitality) < thePlayer.GetStatMax(BCS_Vitality)
				)
				{
					if (FactsQuerySum("ACS_Buffs_Module_Hide") > 0)
					{
						RemoveTimer('BuffsModuleDespawnDelay');

						if (!((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("BuffsModule")).GetEnabled())
						{
							((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("BuffsModule")).SetEnabled(true);
							((CR4ScriptedHud)theGame.GetHud()).UpdateHUD();
						}

						FactsRemove("ACS_Buffs_Module_Hide");
					}
				}
				else
				{
					if ( FactsQuerySum("ACS_Buffs_Module_Hide") <= 0 )
					{
						RemoveTimer('BuffsModuleDespawnDelay');
						AddTimer('BuffsModuleDespawnDelay', 3.125, false);

						FactsAdd("ACS_Buffs_Module_Hide", 1, -1);
					}
				}
			}
			else
			{
				RemoveTimer('BuffsModuleDespawnDelay');

				if (FactsQuerySum("ACS_Buffs_Module_Hide") > 0)
				{
					FactsRemove("ACS_Buffs_Module_Hide");
				}
			}

			if (!MinimapHudEnabled())
			{
				if 
				(
				!ACS_CombatToExplorationCheck()
				|| thePlayer.IsInCombat()
				|| thePlayer.IsInCombatState()
				|| theGame.IsFocusModeActive()
				|| thePlayer.IsThreatened()
				|| ((CR4HudModuleRadialMenu)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("RadialMenuModule")).IsRadialMenuOpened()
				|| thePlayer.GetStat(BCS_Vitality) < thePlayer.GetStatMax(BCS_Vitality)
				)
				{
					if (FactsQuerySum("ACS_Minimap_Module_Hide") > 0)
					{
						RemoveTimer('MinimapModuleDespawnDelay');

						if (!((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("Minimap2Module")).GetEnabled())
						{
							((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("Minimap2Module")).SetEnabled(true);
							((CR4ScriptedHud)theGame.GetHud()).UpdateHUD();
						}

						FactsRemove("ACS_Minimap_Module_Hide");
					}
					else if (FactsQuerySum("ACS_Minimap_Module_Hide") <= 0)
					{
						if (!((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("Minimap2Module")).GetEnabled())
						{
							FactsAdd("ACS_Minimap_Module_Hide", 1, -1);
						}
					}
				}
				else
				{
					if ( FactsQuerySum("ACS_Minimap_Module_Hide") <= 0 )
					{
						RemoveTimer('MinimapModuleDespawnDelay');
						AddTimer('MinimapModuleDespawnDelay', 3.125, false);

						FactsAdd("ACS_Minimap_Module_Hide", 1, -1);
					}
				}
			}
			else
			{
				RemoveTimer('MinimapModuleDespawnDelay');

				if (FactsQuerySum("ACS_Minimap_Module_Hide") > 0)
				{
					FactsRemove("ACS_Minimap_Module_Hide");
				}
			}

			if (ACS_can_refresh_hud())
			{
				ACS_refresh_hud_cooldown();

				if (WolfHeadHudEnabled())
				{
					if 
					(
					!ACS_CombatToExplorationCheck()
					|| thePlayer.IsInCombat()
					|| thePlayer.IsInCombatState()
					|| theGame.IsFocusModeActive()
					|| thePlayer.IsThreatened()
					|| ((CR4HudModuleRadialMenu)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("RadialMenuModule")).IsRadialMenuOpened()
					|| thePlayer.GetStat(BCS_Vitality) < thePlayer.GetStatMax(BCS_Vitality)
					)
					{
						hudWolfHeadModule.SetAlwaysDisplayed(true);
					}
					else
					{
						hudWolfHeadModule.SetAlwaysDisplayed(false);
					}
				}

				if (ItemHudEnabled())
				{
					if 
					(
					!ACS_CombatToExplorationCheck()
					|| thePlayer.IsInCombat()
					|| thePlayer.IsInCombatState()
					|| theGame.IsFocusModeActive()
					|| thePlayer.IsThreatened()
					|| ((CR4HudModuleRadialMenu)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("RadialMenuModule")).IsRadialMenuOpened()
					|| thePlayer.GetStat(BCS_Vitality) < thePlayer.GetStatMax(BCS_Vitality)
					)
					{
						hudItemModule.SetAlwaysDisplayed(true);
					}
					else
					{
						hudItemModule.SetAlwaysDisplayed(false);
					}
				}
			}
		}
		else
		{
			RemoveTimer('MinimapModuleDespawnDelay');

			if (FactsQuerySum("ACS_Minimap_Module_Hide") > 0)
			{
				FactsRemove("ACS_Minimap_Module_Hide");
			}

			RemoveTimer('QuestModuleDespawnDelay');

			if (FactsQuerySum("ACS_Quest_Module_Hide") > 0)
			{
				FactsRemove("ACS_Quest_Module_Hide");
			}

			RemoveTimer('ControlHintModuleDespawnDelay');

			if (FactsQuerySum("ACS_Control_Hint_Module_Hide") > 0)
			{
				FactsRemove("ACS_Control_Hint_Module_Hide");
			}

			RemoveTimer('BuffsModuleDespawnDelay');

			if (FactsQuerySum("ACS_Buffs_Module_Hide") > 0)
			{
				FactsRemove("ACS_Buffs_Module_Hide");
			}
		}
	}

	function HudModuleAutoHideAfterCombat()
	{
		if (!MinimapHudEnabled())
		{
			if (FactsQuerySum("ACS_Minimap_Module_Hide") > 0)
			{
				FactsRemove("ACS_Minimap_Module_Hide");
			}

			if ( FactsQuerySum("ACS_Minimap_Module_Hide") <= 0 )
			{
				RemoveTimer('MinimapModuleDespawnDelay');
				AddTimer('MinimapModuleDespawnDelay', 0.125, false);

				FactsAdd("ACS_Minimap_Module_Hide", 1, -1);
			}
		}
		else
		{
			RemoveTimer('MinimapModuleDespawnDelay');

			if (FactsQuerySum("ACS_Minimap_Module_Hide") > 0)
			{
				FactsRemove("ACS_Minimap_Module_Hide");
			}
		}

		if (!QuestHudEnabled())
		{
			if (FactsQuerySum("ACS_Quest_Module_Hide") > 0)
			{
				FactsRemove("ACS_Quest_Module_Hide");
			}

			if ( FactsQuerySum("ACS_Quest_Module_Hide") <= 0 )
			{
				RemoveTimer('QuestModuleDespawnDelay');
				AddTimer('QuestModuleDespawnDelay', 0.125, false);

				FactsAdd("ACS_Quest_Module_Hide", 1, -1);
			}
		}
		else
		{
			RemoveTimer('QuestModuleDespawnDelay');

			if (FactsQuerySum("ACS_Quest_Module_Hide") > 0)
			{
				FactsRemove("ACS_Quest_Module_Hide");
			}
		}

		if (ControlHintsHudEnabled())
		{
			if (FactsQuerySum("ACS_Control_Hint_Module_Hide") > 0)
			{
				FactsRemove("ACS_Control_Hint_Module_Hide");
			}

			if ( FactsQuerySum("ACS_Control_Hint_Module_Hide") <= 0 )
			{
				RemoveTimer('ControlHintModuleDespawnDelay');
				AddTimer('ControlHintModuleDespawnDelay', 0.125, false);

				FactsAdd("ACS_Control_Hint_Module_Hide", 1, -1);
			}
		}
		else
		{
			RemoveTimer('ControlHintModuleDespawnDelay');

			if (FactsQuerySum("ACS_Control_Hint_Module_Hide") > 0)
			{
				FactsRemove("ACS_Control_Hint_Module_Hide");
			}
		}

		if (BuffsHudEnabled())
		{
			if (FactsQuerySum("ACS_Buffs_Module_Hide") > 0)
			{
				FactsRemove("ACS_Buffs_Module_Hide");
			}

			if ( FactsQuerySum("ACS_Buffs_Module_Hide") <= 0 )
			{
				RemoveTimer('BuffsModuleDespawnDelay');
				AddTimer('BuffsModuleDespawnDelay', 0.125, false);

				FactsAdd("ACS_Buffs_Module_Hide", 1, -1);
			}
		}
		else
		{
			RemoveTimer('BuffsModuleDespawnDelay');

			if (FactsQuerySum("ACS_Buffs_Module_Hide") > 0)
			{
				FactsRemove("ACS_Buffs_Module_Hide");
			}
		}
	}

	function HudModuleHideStartup()
	{
		if (!MinimapHudEnabled())
		{
			if 
			(
			!ACS_CombatToExplorationCheck()
			|| thePlayer.IsInCombat()
			|| thePlayer.IsInCombatState()
			|| theGame.IsFocusModeActive()
			|| thePlayer.IsThreatened()
			|| ((CR4HudModuleRadialMenu)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("RadialMenuModule")).IsRadialMenuOpened()
			|| thePlayer.GetStat(BCS_Vitality) < thePlayer.GetStatMax(BCS_Vitality)
			)
			{
				if (!((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("Minimap2Module")).GetEnabled())
				{
					((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("Minimap2Module")).SetEnabled(true);
					((CR4ScriptedHud)theGame.GetHud()).UpdateHUD();
				}
			}
			else
			{
				if (((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("Minimap2Module")).GetEnabled())
				{
					((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("Minimap2Module")).SetEnabled(false);
					((CR4ScriptedHud)theGame.GetHud()).UpdateHUD();
				}
			}
		}

		if (!QuestHudEnabled())
		{
			if 
			(
			!ACS_CombatToExplorationCheck()
			|| thePlayer.IsInCombat()
			|| thePlayer.IsInCombatState()
			|| theGame.IsFocusModeActive()
			|| thePlayer.IsThreatened()
			|| ((CR4HudModuleRadialMenu)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("RadialMenuModule")).IsRadialMenuOpened()
			|| thePlayer.GetStat(BCS_Vitality) < thePlayer.GetStatMax(BCS_Vitality)
			)
			{
				if (!((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("QuestsModule")).GetEnabled())
				{
					((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("QuestsModule")).SetEnabled(true);
					((CR4ScriptedHud)theGame.GetHud()).UpdateHUD();
				}
			}
			else
			{
				if (((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("QuestsModule")).GetEnabled())
				{
					((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("QuestsModule")).SetEnabled(false);
					((CR4ScriptedHud)theGame.GetHud()).UpdateHUD();
				}
			}
		}

		if (ControlHintsHudEnabled())
		{
			if 
			(
			!ACS_CombatToExplorationCheck()
			|| thePlayer.IsInCombat()
			|| thePlayer.IsInCombatState()
			|| theGame.IsFocusModeActive()
			|| thePlayer.IsThreatened()
			|| ((CR4HudModuleRadialMenu)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("RadialMenuModule")).IsRadialMenuOpened()
			|| thePlayer.GetStat(BCS_Vitality) < thePlayer.GetStatMax(BCS_Vitality)
			)
			{
				if (!((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("ControlsFeedbackModule")).GetEnabled())
				{
					((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("ControlsFeedbackModule")).SetEnabled(true);
					((CR4ScriptedHud)theGame.GetHud()).UpdateHUD();
				}
			}
			else
			{
				if (((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("ControlsFeedbackModule")).GetEnabled())
				{
					((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("ControlsFeedbackModule")).SetEnabled(false);
					((CR4ScriptedHud)theGame.GetHud()).UpdateHUD();
				}
			}
		}

		if (BuffsHudEnabled())
		{
			if 
			(
			!ACS_CombatToExplorationCheck()
			|| thePlayer.IsInCombat()
			|| thePlayer.IsInCombatState()
			|| theGame.IsFocusModeActive()
			|| thePlayer.IsThreatened()
			|| ((CR4HudModuleRadialMenu)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("RadialMenuModule")).IsRadialMenuOpened()
			|| thePlayer.GetStat(BCS_Vitality) < thePlayer.GetStatMax(BCS_Vitality)
			)
			{
				if (!((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("BuffsModule")).GetEnabled())
				{
					((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("BuffsModule")).SetEnabled(true);
					((CR4ScriptedHud)theGame.GetHud()).UpdateHUD();
				}
			}
			else
			{
				if (((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("BuffsModule")).GetEnabled())
				{
					((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("BuffsModule")).SetEnabled(false);
					((CR4ScriptedHud)theGame.GetHud()).UpdateHUD();
				}
			}
		}
	}

	function SteelSwordHide( b : bool )
	{
		var steelID																		: SItemUniqueId;
		var steelswordentity 															: CEntity;

		GetWitcherPlayer().GetItemEquippedOnSlot(EES_SteelSword, steelID);

		steelswordentity = thePlayer.GetInventory().GetItemEntityUnsafe(steelID);

		if (!GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_SteelSword))
		{
			steelswordentity.SetHideInGame(true); 
		}
		else
		{
			steelswordentity.SetHideInGame(b); 
		}
	}

	function SteelSwordScabbardSetVisible( b : bool )
	{
		var scabbard_steel																: CDrawableComponent;
		var scabbards_steel 															: array<SItemUniqueId>;
		var i																			: int;
	
		scabbards_steel = thePlayer.GetInventory().GetItemsByCategory('steel_scabbards');

		for ( i=0; i < scabbards_steel.Size() ; i+=1 )
		{
			scabbard_steel = (CDrawableComponent)((thePlayer.GetInventory().GetItemEntityUnsafe(scabbards_steel[i])).GetMeshComponent());

			if (!GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_SteelSword))
			{
				scabbard_steel.SetVisible(false);
			}
			else
			{
				scabbard_steel.SetVisible(b);
			}
		}
	}

	function SilverSwordHide( b : bool )
	{
		var silverID																		: SItemUniqueId;
		var silverswordentity 																: CEntity;

		GetWitcherPlayer().GetItemEquippedOnSlot(EES_SilverSword, silverID);

		silverswordentity = thePlayer.GetInventory().GetItemEntityUnsafe(silverID);

		if (!GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_SilverSword))
		{
			silverswordentity.SetHideInGame(true); 
		}
		else
		{
			silverswordentity.SetHideInGame(b); 
		}
	}

	function SilverSwordScabbardSetVisible( b : bool )
	{
		var scabbard_silver																: CDrawableComponent;
		var scabbards_silver 															: array<SItemUniqueId>;
		var i																			: int;

		scabbards_silver = thePlayer.GetInventory().GetItemsByCategory('silver_scabbards');

		for ( i=0; i < scabbards_silver.Size() ; i+=1 )
		{
			scabbard_silver = (CDrawableComponent)((thePlayer.GetInventory().GetItemEntityUnsafe(scabbards_silver[i])).GetMeshComponent());

			if (!GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_SilverSword))
			{
				scabbard_silver.SetVisible(false);
			}
			else
			{
				scabbard_silver.SetVisible(b);
			}
		}
	}

	function CrossbowHide( b : bool )
	{
		var rangedID 				: SItemUniqueId;
		var crossbowentity			: CEntity;

		GetWitcherPlayer().GetItemEquippedOnSlot(EES_RangedWeapon, rangedID);

		crossbowentity = thePlayer.GetInventory().GetItemEntityUnsafe(rangedID);

		if (!GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_RangedWeapon))
		{
			crossbowentity.SetHideInGame(true);
		}
		else
		{
			crossbowentity.SetHideInGame(b);
		}
			
	}

	function AlternateSteelScabbardLoad()
	{
		var p_comp				: CComponent;
		var temp 				: CEntityTemplate;

		p_comp = thePlayer.GetComponentByClassName( 'CAppearanceComponent' );

		temp = (CEntityTemplate)LoadResource(

		"dlc\dlc_acs\data\entities\equipment_mode_weapons\acs_steel_aerondight_scabbard.w2ent"
		
		, true);

		((CAppearanceComponent)p_comp).IncludeAppearanceTemplate(temp);
	}

	function AlternateSilverScabbardLoad()
	{
		var p_comp				: CComponent;
		var temp 				: CEntityTemplate;

		p_comp = thePlayer.GetComponentByClassName( 'CAppearanceComponent' );

		temp = (CEntityTemplate)LoadResource(

		"dlc\dlc_acs\data\entities\equipment_mode_weapons\acs_silver_aerondight_scabbard.w2ent"
		
		, true);
	
		((CAppearanceComponent)p_comp).IncludeAppearanceTemplate(temp);
	}

	function AlternateSteelScabbardUnload()
	{
		var p_comp				: CComponent;
		var temp 				: CEntityTemplate;

		p_comp = thePlayer.GetComponentByClassName( 'CAppearanceComponent' );

		temp = (CEntityTemplate)LoadResource(

		"dlc\dlc_acs\data\entities\equipment_mode_weapons\acs_steel_aerondight_scabbard.w2ent"
		
		, true);

		((CAppearanceComponent)p_comp).ExcludeAppearanceTemplate(temp);
	}

	function AlternateSilverScabbardUnload()
	{
		var p_comp				: CComponent;
		var temp 				: CEntityTemplate;

		p_comp = thePlayer.GetComponentByClassName( 'CAppearanceComponent' );

		temp = (CEntityTemplate)LoadResource(

		"dlc\dlc_acs\data\entities\equipment_mode_weapons\acs_silver_aerondight_scabbard.w2ent"
		
		, true);

		((CAppearanceComponent)p_comp).ExcludeAppearanceTemplate(temp);
	}


	function BowQuiverLoad()
	{
		var p_comp				: CComponent;
		var temp 				: CEntityTemplate;

		p_comp = thePlayer.GetComponentByClassName( 'CAppearanceComponent' );

		temp = (CEntityTemplate)LoadResource(

		"dlc\dlc_acs\data\models\bow_quiver\acs_bow_quiver.w2ent"
		
		, true);
	
		((CAppearanceComponent)p_comp).IncludeAppearanceTemplate(temp);
	}

	function BowQuiverUnload()
	{
		var p_comp				: CComponent;
		var temp 				: CEntityTemplate;

		p_comp = thePlayer.GetComponentByClassName( 'CAppearanceComponent' );

		temp = (CEntityTemplate)LoadResource(

		"dlc\dlc_acs\data\models\bow_quiver\acs_bow_quiver.w2ent"
		
		, true);

		((CAppearanceComponent)p_comp).ExcludeAppearanceTemplate(temp);
	}

	function Scabbard_Thing()
	{
		var steelID, silverID							: SItemUniqueId;

		GetWitcherPlayer().GetItemEquippedOnSlot(EES_SteelSword, steelID);

		GetWitcherPlayer().GetItemEquippedOnSlot(EES_SilverSword, silverID);

		if (
			(GetWitcherPlayer().GetInventory().IsIdValid( steelID )
			|| GetWitcherPlayer().GetInventory().IsIdValid( silverID ))
		)
		{

		}

		if ( 
		ACS_GetWeaponMode() == 0
		|| ACS_GetWeaponMode() == 1
		|| ACS_GetWeaponMode() == 2
		)
		{
			if (
			thePlayer.HasTag('axii_sword_equipped')	
			|| thePlayer.HasTag('aard_sword_equipped')	
			|| thePlayer.HasTag('yrden_sword_equipped')	
			|| thePlayer.HasTag('quen_sword_equipped')
			|| thePlayer.HasTag('axii_secondary_sword_equipped')
			|| thePlayer.HasTag('aard_secondary_sword_equipped')
			|| thePlayer.HasTag('yrden_secondary_sword_equipped')
			|| thePlayer.HasTag('quen_secondary_sword_equipped')
			)	
			{
				if ( thePlayer.GetInventory().IsItemHeld(steelID) )
				{
					SteelSwordHide(true);
				}
				else if( thePlayer.GetInventory().IsItemHeld(silverID) )
				{
					SilverSwordHide(true);
				}

				ACSGetEquippedSword().StopAllEffects();
			}
			
			if (thePlayer.HasTag('acs_bow_active'))
			{
				if (!thePlayer.IsCrossbowHeld())
				{
					CrossbowHide(true);
					thePlayer.rangedWeapon.ClearDeployedEntity(true);
				}
				else if (thePlayer.IsCrossbowHeld())
				{
					CrossbowHide(false);
				} 

				if (!thePlayer.GetInventory().IsItemHeld(steelID))
				{
					SteelSwordHide(true);
				}

				if (!thePlayer.GetInventory().IsItemHeld(silverID))
				{
					SilverSwordHide(true);
				}

				if ( FactsQuerySum("ACS_Alternate_Steel_Scabbard") > 0 )
				{
					AlternateSteelScabbardUnload();

					FactsRemove("ACS_Alternate_Steel_Scabbard");
				}

				if ( FactsQuerySum("ACS_Alternate_Silver_Scabbard") > 0 )
				{
					AlternateSilverScabbardUnload();

					FactsRemove("ACS_Alternate_Silver_Scabbard");
				}

				SteelSwordScabbardSetVisible(false);

				SilverSwordScabbardSetVisible(false);
				
				if ( FactsQuerySum("ACS_Bow_Quiver_Loaded") <= 0 )
				{
					BowQuiverLoad();

					FactsAdd("ACS_Bow_Quiver_Loaded");
				}
			}
			else if (ACS_CloakEquippedCheck() 
			|| ACS_HideSwordsheathes_Enabled()
			|| thePlayer.HasTag('acs_crossbow_active')
			|| ACS_NonItemCloakEquippedCheck() )
			{
				if (!thePlayer.IsCrossbowHeld())
				{
					CrossbowHide(true);
					thePlayer.rangedWeapon.ClearDeployedEntity(true);
				}
				else if (thePlayer.IsCrossbowHeld())
				{
					CrossbowHide(false);
				} 

				if (!thePlayer.GetInventory().IsItemHeld(steelID))
				{
					SteelSwordHide(true);
				}

				if (!thePlayer.GetInventory().IsItemHeld(silverID))
				{
					SilverSwordHide(true);
				}

				if ( FactsQuerySum("ACS_Alternate_Steel_Scabbard") > 0 )
				{
					AlternateSteelScabbardUnload();

					FactsRemove("ACS_Alternate_Steel_Scabbard");
				}

				if ( FactsQuerySum("ACS_Alternate_Silver_Scabbard") > 0 )
				{
					AlternateSilverScabbardUnload();

					FactsRemove("ACS_Alternate_Silver_Scabbard");
				}

				SteelSwordScabbardSetVisible(false);

				SilverSwordScabbardSetVisible(false);

				if (!thePlayer.HasTag('acs_bow_active'))
				{
					if ( FactsQuerySum("ACS_Bow_Quiver_Loaded") > 0 )
					{
						BowQuiverUnload();

						FactsRemove("ACS_Bow_Quiver_Loaded");
					}
				}
			}
			else
			{
				if ( !thePlayer.GetInventory().IsItemHeld(steelID) )
				{
					if (ACS_ShouldHideWeaponCheck_Steel())
					{
						SteelSwordHide(true);
					}
					else
					{
						SteelSwordHide(false);
					}
				}

				if ( !thePlayer.GetInventory().IsItemHeld(silverID) )
				{
					if (ACS_ShouldHideWeaponCheck_Silver())
					{
						SilverSwordHide(true);
					}
					else
					{
						SilverSwordHide(false);
					}
				}

				if (ACS_AlternateScabbardSteel_Enabled() 
				&& !ACS_ShouldHideWeaponCheck_Steel()
				&& !ACS_DontReplaceScabbardSteel()
				&& GetWitcherPlayer().GetInventory().IsIdValid( steelID )
				)
				{
					if ( FactsQuerySum("ACS_Alternate_Steel_Scabbard") <= 0 )
					{
						AlternateSteelScabbardLoad();

						FactsAdd("ACS_Alternate_Steel_Scabbard", 1, -1);
					}

					SteelSwordScabbardSetVisible(false);
				}
				else
				{
					if (FactsQuerySum("ACS_Alternate_Steel_Scabbard") > 0)
					{
						AlternateSteelScabbardUnload();

						FactsRemove("ACS_Alternate_Steel_Scabbard");
					}

					SteelSwordScabbardSetVisible(true);
				}

				if (ACS_AlternateScabbardSilver_Enabled() 
				&& !ACS_ShouldHideWeaponCheck_Silver()
				&& !ACS_DontReplaceScabbardSilver()
				&& GetWitcherPlayer().GetInventory().IsIdValid( silverID )
				)
				{
					if ( FactsQuerySum("ACS_Alternate_Silver_Scabbard") <= 0 )
					{
						AlternateSilverScabbardLoad();

						FactsAdd("ACS_Alternate_Silver_Scabbard", 1, -1);
					}

					SilverSwordScabbardSetVisible(false);
				}
				else
				{
					if (FactsQuerySum("ACS_Alternate_Silver_Scabbard") > 0)
					{
						AlternateSilverScabbardUnload();

						FactsRemove("ACS_Alternate_Silver_Scabbard");
					}

					SilverSwordScabbardSetVisible(true);
				}

				if (!thePlayer.HasTag('acs_bow_active'))
				{
					if ( FactsQuerySum("ACS_Bow_Quiver_Loaded") > 0 )
					{
						BowQuiverUnload();

						FactsRemove("ACS_Bow_Quiver_Loaded");
					}
				}

				CrossbowHide(false);
			}
		}
		else
		{
			if (thePlayer.HasTag('acs_bow_active'))
			{
				if (thePlayer.IsCrossbowHeld())
				{
					CrossbowHide(false);
				}
				else if (!thePlayer.IsCrossbowHeld())
				{
					CrossbowHide(true);
					thePlayer.rangedWeapon.ClearDeployedEntity(true);
				}

				if (thePlayer.GetInventory().IsItemHeld(steelID))
				{
					SteelSwordHide(false); 
				}
				else if (!thePlayer.GetInventory().IsItemHeld(steelID))
				{
					SteelSwordHide(true); 
				}

				if (thePlayer.GetInventory().IsItemHeld(silverID))
				{
					SilverSwordHide(false);
				}
				else if (!thePlayer.GetInventory().IsItemHeld(silverID))
				{
					SilverSwordHide(true);
				}

				if ( FactsQuerySum("ACS_Alternate_Steel_Scabbard") > 0 )
				{
					AlternateSteelScabbardUnload();

					FactsRemove("ACS_Alternate_Steel_Scabbard");
				}

				if ( FactsQuerySum("ACS_Alternate_Silver_Scabbard") > 0 )
				{
					AlternateSilverScabbardUnload();

					FactsRemove("ACS_Alternate_Silver_Scabbard");
				}
				
				SteelSwordScabbardSetVisible(false);

				SilverSwordScabbardSetVisible(false);

				if ( FactsQuerySum("ACS_Bow_Quiver_Loaded") <= 0 )
				{
					BowQuiverLoad();

					FactsAdd("ACS_Bow_Quiver_Loaded");
				}
			}
			else if (ACS_CloakEquippedCheck() 
			|| ACS_HideSwordsheathes_Enabled()
			|| thePlayer.HasTag('acs_crossbow_active') 
			|| ACS_NonItemCloakEquippedCheck()
			)
			{
				if (thePlayer.IsCrossbowHeld())
				{
					CrossbowHide(false);
				}
				else if (!thePlayer.IsCrossbowHeld())
				{
					CrossbowHide(true);
					thePlayer.rangedWeapon.ClearDeployedEntity(true);
				}

				if (thePlayer.GetInventory().IsItemHeld(steelID))
				{
					SteelSwordHide(false); 
				}
				else if (!thePlayer.GetInventory().IsItemHeld(steelID))
				{
					SteelSwordHide(true); 
				}

				if (thePlayer.GetInventory().IsItemHeld(silverID))
				{
					SilverSwordHide(false);
				}
				else if (!thePlayer.GetInventory().IsItemHeld(silverID))
				{
					SilverSwordHide(true);
				}

				if ( FactsQuerySum("ACS_Alternate_Steel_Scabbard") > 0 )
				{
					AlternateSteelScabbardUnload();

					FactsRemove("ACS_Alternate_Steel_Scabbard");
				}

				if ( FactsQuerySum("ACS_Alternate_Silver_Scabbard") > 0 )
				{
					AlternateSilverScabbardUnload();

					FactsRemove("ACS_Alternate_Silver_Scabbard");
				}
				
				SteelSwordScabbardSetVisible(false);

				SilverSwordScabbardSetVisible(false);

				if (!thePlayer.HasTag('acs_bow_active'))
				{
					if ( FactsQuerySum("ACS_Bow_Quiver_Loaded") > 0 )
					{
						BowQuiverUnload();

						FactsRemove("ACS_Bow_Quiver_Loaded");
					}
				}
			}
			else
			{
				CrossbowHide(false);

				if (!thePlayer.HasTag('acs_bow_active'))
				{
					if ( FactsQuerySum("ACS_Bow_Quiver_Loaded") > 0 )
					{
						BowQuiverUnload();

						FactsRemove("ACS_Bow_Quiver_Loaded");
					}
				}

				if (thePlayer.GetInventory().IsItemHeld(steelID))
				{
					SteelSwordHide(false); 
				}
				else if (!thePlayer.GetInventory().IsItemHeld(steelID)
				&& ACS_ShouldHideWeaponCheck_Steel()
				)
				{
					SteelSwordHide(true);
				}
				else 
				{
					SteelSwordHide(false);
				}

				if (thePlayer.GetInventory().IsItemHeld(silverID))
				{
					SilverSwordHide(false);
				}
				else if (!thePlayer.GetInventory().IsItemHeld(silverID)
				&& ACS_ShouldHideWeaponCheck_Silver()
				)
				{
					SilverSwordHide(true);
				}
				else
				{
					SilverSwordHide(false);
				}

				if (ACS_AlternateScabbardSteel_Enabled() 
				&& !ACS_ShouldHideWeaponCheck_Steel()
				&& !ACS_DontReplaceScabbardSteel()
				&& GetWitcherPlayer().GetInventory().IsIdValid( steelID )
				)
				{
					if ( FactsQuerySum("ACS_Alternate_Steel_Scabbard") <= 0 )
					{
						AlternateSteelScabbardLoad();

						FactsAdd("ACS_Alternate_Steel_Scabbard", 1, -1);
					}

					SteelSwordScabbardSetVisible(false);
				}
				else 
				{
					if (FactsQuerySum("ACS_Alternate_Steel_Scabbard") > 0)
					{
						AlternateSteelScabbardUnload();

						FactsRemove("ACS_Alternate_Steel_Scabbard");
					}

					SteelSwordScabbardSetVisible(true);
				}

				if (ACS_AlternateScabbardSilver_Enabled() 
				&& !ACS_ShouldHideWeaponCheck_Silver()
				&& !ACS_DontReplaceScabbardSilver()
				&& GetWitcherPlayer().GetInventory().IsIdValid( silverID )
				)
				{
					if ( FactsQuerySum("ACS_Alternate_Silver_Scabbard") <= 0 )
					{
						AlternateSilverScabbardLoad();

						FactsAdd("ACS_Alternate_Silver_Scabbard", 1, -1);
					}

					SilverSwordScabbardSetVisible(false);
				}
				else
				{
					if (FactsQuerySum("ACS_Alternate_Silver_Scabbard") > 0)
					{
						AlternateSilverScabbardUnload();

						FactsRemove("ACS_Alternate_Silver_Scabbard");
					}

					SilverSwordScabbardSetVisible(true);
				}
			}
		}

		if (thePlayer.HasTag('ACS_HideWeaponOnDodge')
		|| thePlayer.HasTag('in_wraith')
		|| thePlayer.HasTag('blood_sucking')
		|| GetACSArmorEtherSword()
		)
		{
			ACSGetEquippedSword().StopAllEffects();
		}
	}

	private var cloakHidden : bool;
	default cloakHidden = false;

	function CloakUnequip()
	{
		if (ACS_UnequipCloakWhileInCombat())
		{
			if(!cloakHidden)
			{
				ACS_UnequipCloak();

				if (FactsQuerySum("ACS_Cloak_Equipped") > 0)
				{
					CloakToggle();

					FactsAdd("ACS_Virtual_Cloak_Temporarily_Unequipped", 1, -1);
				}

				cloakHidden = true;
			}
		}
	}

	function CloakEquip()
	{
		if(cloakHidden)
		{
			ACS_EquipCloak();

			if (FactsQuerySum("ACS_Virtual_Cloak_Temporarily_Unequipped") > 0)
			{
				CloakToggle();

				FactsRemove("ACS_Virtual_Cloak_Temporarily_Unequipped");
			}

			cloakHidden = false;
		}
	}

	var vACS_Arrow_Create : cACS_Arrow_Create;

	function ACS_Arrow_Create()
	{
		vACS_Arrow_Create = new cACS_Arrow_Create in this;
				
		vACS_Arrow_Create.ACS_Arrow_Create_Engage();
	}

	function ACS_Arrow_Create_Ready()
	{
		vACS_Arrow_Create = new cACS_Arrow_Create in this;
				
		vACS_Arrow_Create.ACS_Arrow_Create_Ready_Engage();
	}

	function ACS_Arrow_Create_Ready_Arrow_Rain()
	{
		vACS_Arrow_Create = new cACS_Arrow_Create in this;
				
		vACS_Arrow_Create.ACS_Arrow_Create_Ready_Arrow_Rain_Engage();
	}

	function ACS_CreateCrossbow_Arrow()
	{
		vACS_Arrow_Create = new cACS_Arrow_Create in this;
				
		vACS_Arrow_Create.ACS_Arrow_Create_Crossbow_Engage();
	}

	function ACS_ShootCrossbow_Arrow()
	{
		vACS_Arrow_Create = new cACS_Arrow_Create in this;
				
		vACS_Arrow_Create.ACS_ShootCrossbow_Arrow_Engage();
	}

	var vACS_CrowSwarm 	: cACS_CrowSwarm;

	function Crow_Swarm()
	{
		vACS_CrowSwarm = new cACS_CrowSwarm in this;

		vACS_CrowSwarm.ACS_CrowSwarmSpawn();
	}

	public timer function StopCrowSwarmSound ( dt : float, id : int)
	{
		thePlayer.SoundEvent("animals_crow_swarm_end");
	}

	timer function CrowSwarmsReset( time : float , id : int )
	{
		ACS_DestroyCrowSwarms();
	}

	var vACS_ShadesKara_Spawn_Adds : cACS_ShadesKara_Spawn_Adds;

	function ShadesKara_Spawn_Adds_Manager()
	{
		if( !GetACS_ShadesKara() || !GetACS_ShadesKara().IsAlive() )
		{
			return;
		}

		vACS_ShadesKara_Spawn_Adds = new cACS_ShadesKara_Spawn_Adds in this;
	
		vACS_ShadesKara_Spawn_Adds.ACS_ShadesKara_Spawn_Adds_Engage();
	}

	var vACS_Werewolf_Spawn_Adds : cACS_Werewolf_Spawn_Adds;

	function Werewolf_Spawn_Adds_Manager()
	{
		vACS_Werewolf_Spawn_Adds = new cACS_Werewolf_Spawn_Adds in this;
	
		vACS_Werewolf_Spawn_Adds.ACS_Werewolf_Spawn_Adds_Engage();
	}

	var vACS_Human_Death_Controller: cACS_Human_Death_Controller;

	function Human_Death_Controller_Spawner()
	{
		vACS_Human_Death_Controller = new cACS_Human_Death_Controller in this;

		vACS_Human_Death_Controller.ACS_Human_Death_Controller_Engage();
	}

	function Witch_Hunter_Bomb_Manager()
	{
		if (ACS_witch_hunter_proj())
		{
			ACS_refresh_witch_hunter_proj_cooldown();

			Witch_Hunter_Throw_Bomb();
		}	
	}

	var vACS_Witch_Hunter_Throw_Bomb 	: cACS_Witch_Hunter_Throw_Bomb;

	function Witch_Hunter_Throw_Bomb()
	{
		vACS_Witch_Hunter_Throw_Bomb = new cACS_Witch_Hunter_Throw_Bomb in this;

		vACS_Witch_Hunter_Throw_Bomb.ACS_Witch_Hunter_Throw_Bomb_Engage();
	}

	function Witch_Hunter_Throw_Bomb_Delay()
	{
		vACS_Witch_Hunter_Throw_Bomb = new cACS_Witch_Hunter_Throw_Bomb in this;

		vACS_Witch_Hunter_Throw_Bomb.ACS_Witch_Hunter_Throw_Bomb_Actual_Engage();
	}

	var vACS_Ghoul_Venom 	: cACS_Ghoul_Venom;

	function Ghoul_Venom_Manager()
	{
		if (ACS_ghoul_proj())
		{
			ACS_refresh_ghoul_proj_cooldown();

			Ghoul_Venom_Start();

			RemoveTimer('Ghoul_Venom_Delay');
			AddTimer('Ghoul_Venom_Delay', 2, false);
		}	
	}

	function Ghoul_Venom_Start()
	{
		vACS_Ghoul_Venom = new cACS_Ghoul_Venom in this;

		vACS_Ghoul_Venom.ACS_Ghoul_Venom_Start_Engage();
	}

	function Ghoul_Venom()
	{
		vACS_Ghoul_Venom = new cACS_Ghoul_Venom in this;

		vACS_Ghoul_Venom.ACS_Ghoul_Venom_Engage();
	}

	function Tentacle_Manager()
	{
		if (ACS_tentacle_proj())
		{
			ACS_refresh_tentacle_proj_cooldown();

			Tentacle_Start();
		}	
	}

	var vACS_Tentacle 		: cACS_Tentacle;

	function Tentacle_Start()
	{
		vACS_Tentacle = new cACS_Tentacle in this;

		vACS_Tentacle.ACS_Tentacle_Start_Engage();
	}

	function Necrofiend_Manager()
	{
		if (ACS_necrofiend_proj() && GetACSNecrofiend())
		{
			ACS_refresh_necrofiend_proj_cooldown();

			Necrofiend_Proj_Start();
		}	
	}

	var vACS_Necrofiend 		: cACS_Necrofiend;

	function Necrofiend_Proj_Start()
	{
		vACS_Necrofiend = new cACS_Necrofiend in this;

		vACS_Necrofiend.ACS_Necrofiend_Proj_Start_Engage();
	}

	function Necrofiend_Proj()
	{
		vACS_Necrofiend = new cACS_Necrofiend in this;

		vACS_Necrofiend.ACS_Necrofiend_Proj_Engage();
	}

	var vACS_Nekker_Guardian 		: cACS_Nekker_Guardian;

	private var can_summon_nekker_guardian : bool; 
	
	default can_summon_nekker_guardian = true;

	public function CanSpawnNekkerGuardian( enable : bool )
	{
		can_summon_nekker_guardian = enable;
	}

	public function NekkerGuardianSpawnCheck() : bool
	{
		return can_summon_nekker_guardian;
	}

	public timer function Nekker_Guardian_Spawn_Reset ( dt : float, id : int)
	{
		CanSpawnNekkerGuardian(true);
	}

	function Nekker_Guardian_Manager()
	{
		if (GetACSNekkerGuardian() && GetACSNekkerGuardian().IsAlive())
		{
			if (ACS_nekker_guardian_heal())
			{
				ACS_refresh_nekker_guardian_heal_cooldown();

				vACS_Nekker_Guardian = new cACS_Nekker_Guardian in this;

				vACS_Nekker_Guardian.ACS_Nekker_Guardian_Heal_Engage();
			}
		}
		else
		{
			if (NekkerGuardianSpawnCheck())
			{
				vACS_Nekker_Guardian = new cACS_Nekker_Guardian in this;

				vACS_Nekker_Guardian.ACS_Nekker_Guardian_Start_Engage();
			}
		}
	}

	var vACS_Katakan_Summon 		: cACS_Katakan_Summon;

	function Katakan_Summon_Manager()
	{
		if (ACS_Novigrad_Underground_Vampire() && !ACS_Novigrad_Underground_Vampire().HasTag('ACS_Novigrad_Underground_Vampire_Has_Summoned_Katakan'))
		{
			vACS_Katakan_Summon = new cACS_Katakan_Summon in this;

			vACS_Katakan_Summon.ACS_Katakan_Summon_Start_Engage();

			ACS_Novigrad_Underground_Vampire().AddTag('ACS_Novigrad_Underground_Vampire_Has_Summoned_Katakan');
		}
	}

	var vACS_Fire_Bear_Projectiles			: cACS_Fire_Bear_Projectiles;

	function ACS_Bear_FireballLeft()
	{
		vACS_Fire_Bear_Projectiles = new cACS_Fire_Bear_Projectiles in this;

		vACS_Fire_Bear_Projectiles.ACS_Fire_Bear_FireballLeft_Start_Engage();
	}

	function ACS_Bear_FireballRight()
	{
		vACS_Fire_Bear_Projectiles = new cACS_Fire_Bear_Projectiles in this;

		vACS_Fire_Bear_Projectiles.ACS_Fire_Bear_FireballRight_Start_Engage();
	}

	function ACS_Bear_FireLines()
	{
		vACS_Fire_Bear_Projectiles = new cACS_Fire_Bear_Projectiles in this;

		vACS_Fire_Bear_Projectiles.ACS_Fire_Bear_FireLines_Start_Engage();
	}

	var vACS_Caranthir_Ice_Spear : cACS_Caranthir_Abilities;

	function ACS_Caranthir_Ice_Spear_Summon()
	{
		vACS_Caranthir_Ice_Spear = new cACS_Caranthir_Abilities in this;
				
		vACS_Caranthir_Ice_Spear.ACS_Caranthir_Ice_Spear_Summon_Engage();

		RemoveTimer('ACS_Caranthir_Ice_Spear_Fire_Delay');
		AddTimer('ACS_Caranthir_Ice_Spear_Fire_Delay', 2, false);
	}

	function ACS_Caranthir_Ice_Spear_Fire()
	{
		vACS_Caranthir_Ice_Spear = new cACS_Caranthir_Abilities in this;
				
		vACS_Caranthir_Ice_Spear.ACS_Caranthir_Ice_Spear_Fire_Engage();
	}

	function ACS_Caranthir_Meteorite_Storm()
	{
		vACS_Caranthir_Ice_Spear = new cACS_Caranthir_Abilities in this;
				
		vACS_Caranthir_Ice_Spear.ACS_Caranthir_Meteorite_Storm_Engage();
	}

	function ACS_Caranthir_Ice_Spike()
	{
		vACS_Caranthir_Ice_Spear = new cACS_Caranthir_Abilities in this;
				
		vACS_Caranthir_Ice_Spear.ACS_Caranthir_Ice_Spike_Engage();
	}

	function ACS_Caranthir_Summon_Minion()
	{
		vACS_Caranthir_Ice_Spear = new cACS_Caranthir_Abilities in this;
				
		vACS_Caranthir_Ice_Spear.ACS_Caranthir_Summon_Minion_Engage();
	}

	function ACS_Caranthir_Summon_Minion_Ice_Line_Prep()
	{
		vACS_Caranthir_Ice_Spear = new cACS_Caranthir_Abilities in this;
				
		vACS_Caranthir_Ice_Spear.ACS_Caranthir_Minion_Prep_Ice_Line_Engage();
	}

	function ACS_Caranthir_Summon_Golem()
	{
		vACS_Caranthir_Ice_Spear = new cACS_Caranthir_Abilities in this;
				
		vACS_Caranthir_Ice_Spear.ACS_Caranthir_Summon_Golem_Engage();
	}

	function ACS_Caranthir_Ice_Spear_Single_Summon()
	{
		vACS_Caranthir_Ice_Spear = new cACS_Caranthir_Abilities in this;
				
		vACS_Caranthir_Ice_Spear.ACS_Caranthir_Ice_Spear_Single_Summon_Engage();
	}

	function ACS_Caranthir_Ice_Spear_Single_Fire()
	{
		vACS_Caranthir_Ice_Spear = new cACS_Caranthir_Abilities in this;
				
		vACS_Caranthir_Ice_Spear.ACS_Caranthir_Ice_Spear_Single_Fire_Engage();
	}

	function ACS_Caranthir_Ice_Line_Single_Fire()
	{
		vACS_Caranthir_Ice_Spear = new cACS_Caranthir_Abilities in this;
				
		vACS_Caranthir_Ice_Spear.ACS_Caranthir_Ice_Line_Single_Fire_Engage();
	}

	function ACS_Caranthir_Teleport_FX()
	{
		vACS_Caranthir_Ice_Spear = new cACS_Caranthir_Abilities in this;
				
		vACS_Caranthir_Ice_Spear.ACS_Caranthir_Teleport_FX_Engage();
	}

	function ACS_Caranthir_Summon()
	{
		vACS_Caranthir_Ice_Spear = new cACS_Caranthir_Abilities in this;
				
		vACS_Caranthir_Ice_Spear.ACS_Caranthir_Summon_Engage();
	}

	function ACS_Caranthir_Weapon_FX()
	{
		vACS_Caranthir_Ice_Spear = new cACS_Caranthir_Abilities in this;
				
		vACS_Caranthir_Ice_Spear.ACS_Caranthir_Weapon_FX_Engage();
	}

	public timer function ACS_Caranthir_Ice_Spear_Summon_Delay ( dt : float, id : int)
	{
		ACS_Caranthir_Ice_Spear_Summon();
	}

	public timer function ACS_Caranthir_Ice_Spear_Fire_Delay ( dt : float, id : int)
	{
		ACS_Caranthir_Ice_Spear_Fire();
	}

	public timer function ACS_Caranthir_Meteorite_Storm_Delay ( dt : float, id : int)
	{
		ACS_Caranthir_Meteorite_Storm();
	}

	public timer function ACS_Caranthir_Ice_Spike_Delay_1 ( dt : float, id : int)
	{
		ACS_Caranthir_Ice_Spike();
	}

	public timer function ACS_Caranthir_Ice_Spike_Delay_2 ( dt : float, id : int)
	{
		ACS_Caranthir_Ice_Spike();
	}

	public timer function ACS_Caranthir_Ice_Spike_Delay_3 ( dt : float, id : int)
	{
		ACS_Caranthir_Ice_Spike();
	}

	public timer function ACS_Caranthir_Summon_Minion_Delay ( dt : float, id : int)
	{
		ACS_Caranthir_Summon_Minion();
	}

	public timer function ACS_Caranthir_Summon_Golem_Delay ( dt : float, id : int)
	{
		ACS_Caranthir_Summon_Golem();
	}

	public timer function ACS_Caranthir_Golem_Kill_Delay ( dt : float, id : int)
	{
		GetACSCanarisGolem().Kill('ACS_Canaris_Golem_Explode', false, GetACSCanaris());
	}

	public timer function ACS_Caranthir_Ice_Spear_Single_Fire_Delay_1 ( dt : float, id : int)
	{
		ACS_Canaris_Fire_Attached_Ice_Spear();
	}

	public timer function ACS_Caranthir_Ice_Spear_Single_Fire_Delay_2 ( dt : float, id : int)
	{
		ACS_Caranthir_Ice_Spear_Single_Fire();
	}

	public timer function ACS_Caranthir_Ice_Spear_Single_Fire_Delay_3 ( dt : float, id : int)
	{
		ACS_Caranthir_Ice_Spear_Single_Fire();
	}

	public timer function ACS_Caranthir_Ice_Spear_Single_Fire_Delay_4 ( dt : float, id : int)
	{
		ACS_Caranthir_Ice_Spear_Single_Fire();
	}

	public timer function ACS_Caranthir_Ice_Line_Single_Fire_Delay_1 ( dt : float, id : int)
	{
		ACS_Caranthir_Ice_Line_Single_Fire();
	}

	public timer function ACS_Caranthir_Ice_Line_Single_Fire_Delay_2 ( dt : float, id : int)
	{
		ACS_Caranthir_Ice_Line_Single_Fire();
	}

	public timer function ACS_Caranthir_Set_Visibility ( dt : float, id : int)
	{
		GetACSCanaris().DestroyEffect('teleport_short');
		GetACSCanaris().PlayEffectSingle('teleport_short');
		GetACSCanaris().StopEffect('teleport_short');

		if (FactsQuerySum("q501_canaris_died") > 0)
		{
			GetACSCanaris().PlayEffectSingle('him_smoke');
			GetACSCanaris().PlayEffectSingle('smokeman');
			GetACSCanaris().PlayEffectSingle('him_smoke_red');
		}

		GetACSCanaris().SetVisibility(true);
	}

	public timer function ACS_Caranthir_Weapon_FX_Attach ( dt : float, id : int)
	{
		ACS_Caranthir_Weapon_FX();
	}

	private var acs_caranthir_magic_index_1							: int;
	private var previous_acs_caranthir_magic_index_1 				: int;

	function CaranthirMagicAttacks()
	{
		var caranthirAnimatedComponentA							: CAnimatedComponent;

		caranthirAnimatedComponentA = (CAnimatedComponent)((CNewNPC)GetACSCanaris()).GetComponentByClassName( 'CAnimatedComponent' );	

		acs_caranthir_magic_index_1 = RandDifferent(this.previous_acs_caranthir_magic_index_1 , 7);

		switch (acs_caranthir_magic_index_1) 
		{	
			case 6:

			caranthirAnimatedComponentA.PlaySlotAnimationAsync ( 'weak_rift_09', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 0.85f));

			AddTimer('ACS_Caranthir_Ice_Line_Single_Fire_Delay_1', 2, false);

			AddTimer('ACS_Caranthir_Ice_Line_Single_Fire_Delay_2', 3, false);

			break;

			case 5:

			caranthirAnimatedComponentA.PlaySlotAnimationAsync ( 'weak_spell_hand_04', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 0.85f));

			ACS_Caranthir_Ice_Spear_Single_Summon();

			AddTimer('ACS_Caranthir_Ice_Spear_Single_Fire_Delay_1', 3, false);

			AddTimer('ACS_Caranthir_Ice_Spear_Single_Fire_Delay_2', 3.5, false);

			AddTimer('ACS_Caranthir_Ice_Spear_Single_Fire_Delay_3', 4, false);

			break;

			case 4:

			caranthirAnimatedComponentA.PlaySlotAnimationAsync ( 'weak_spell_hand_05', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 0.85f));

			AddTimer('ACS_Caranthir_Summon_Golem_Delay', 2.5, false);

			break;

			case 3:

			caranthirAnimatedComponentA.PlaySlotAnimationAsync ( 'weak_rift_02', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 0.85f));

			AddTimer('ACS_Caranthir_Meteorite_Storm_Delay', 1, false);

			break;

			case 2:

			caranthirAnimatedComponentA.PlaySlotAnimationAsync ( 'weak_rift_08', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 0.85f));

			AddTimer('ACS_Caranthir_Ice_Spike_Delay_1', 1, false);

			AddTimer('ACS_Caranthir_Ice_Spike_Delay_2', 3, false);

			AddTimer('ACS_Caranthir_Ice_Spike_Delay_3', 5, false);

			break;	

			case 1:

			caranthirAnimatedComponentA.PlaySlotAnimationAsync ( 'weak_spell_staff_01', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 0.85f));

			AddTimer('ACS_Caranthir_Ice_Spear_Summon_Delay', 0.5, false);

			break;

			default:

			caranthirAnimatedComponentA.PlaySlotAnimationAsync ( 'weak_spell_hand_06', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 0.85f));

			ACS_Caranthir_Summon_Minion_Ice_Line_Prep();

			AddTimer('ACS_Caranthir_Summon_Minion_Delay', 2.5, false);

			break;
		}
			
		this.previous_acs_caranthir_magic_index_1 = acs_caranthir_magic_index_1;
	}


	private var acs_draug_attack_index_1						: int;
	private var previous_acs_draug_attack_index_1 				: int;

	function DraugAttacks_CloseRange()
	{
		var draugAnimatedComponentA							: CAnimatedComponent;

		draugAnimatedComponentA = (CAnimatedComponent)((CNewNPC)ACSDraug()).GetComponentByClassName( 'CAnimatedComponent' );	

		acs_draug_attack_index_1 = RandDifferent(this.previous_acs_draug_attack_index_1 , 5);

		switch (acs_draug_attack_index_1) 
		{	
			case 4:

			draugAnimatedComponentA.PlaySlotAnimationAsync ( 'giant_combat_attack_f_3_ACS', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));

			ACS_Draug_Swap_Close_Range();

			AddTimer('ACS_Draug_Anchor_Respawn', 2, false);

			break;

			case 3:

			draugAnimatedComponentA.PlaySlotAnimationAsync ( 'giant_combat_attack_f_2_ACS', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));

			ACS_Draug_Swap_Close_Range();

			AddTimer('ACS_Draug_Anchor_Respawn', 2, false);

			break;

			case 2:

			draugAnimatedComponentA.PlaySlotAnimationAsync ( 'giant_combat_attack_f_1_ACS', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));

			ACS_Draug_Swap_Close_Range();

			AddTimer('ACS_Draug_Anchor_Respawn', 2, false);

			break;	

			case 1:

			draugAnimatedComponentA.PlaySlotAnimationAsync ( 'giant_whirlwind_attack_ACS', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));

			ACS_Draug_Swap_Close_Range();

			AddTimer('ACS_Draug_Anchor_Respawn', 3, false);

			break;

			default:

			draugAnimatedComponentA.PlaySlotAnimationAsync ( 'giant_combat_attack_charge', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));

			ACS_Draug_Swap_Close_Range();

			AddTimer('ACS_Draug_Anchor_Respawn', 3, false);

			break;
		}
			
		this.previous_acs_draug_attack_index_1 = acs_draug_attack_index_1;
	}

	private var acs_draug_attack_index_2						: int;
	private var previous_acs_draug_attack_index_2 				: int;

	function DraugAttacks_FarRange()
	{
		var draugAnimatedComponentA							: CAnimatedComponent;

		draugAnimatedComponentA = (CAnimatedComponent)((CNewNPC)ACSDraug()).GetComponentByClassName( 'CAnimatedComponent' );	

		acs_draug_attack_index_2 = RandDifferent(this.previous_acs_draug_attack_index_2 , 4);

		switch (acs_draug_attack_index_2) 
		{	
			case 3:

			draugAnimatedComponentA.PlaySlotAnimationAsync ( 'giant_combat_anchor_attack_far_f_ACS', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));

			ACS_Draug_Swap_Close_Range();

			AddTimer('ACS_Draug_Anchor_Respawn', 2, false);

			break;

			case 2:

			draugAnimatedComponentA.PlaySlotAnimationAsync ( 'giant_combat_anchor_attack_distance_ACS', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));

			ACS_Draug_Swap_Close_Range();

			AddTimer('ACS_Draug_Anchor_Respawn', 3, false);

			break;	

			case 1:

			draugAnimatedComponentA.PlaySlotAnimationAsync ( 'giant_whirlwind_attack_long_ACS', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));

			ACS_Draug_Swap_Close_Range();

			AddTimer('ACS_Draug_Anchor_Respawn', 4, false);

			break;

			default:

			draugAnimatedComponentA.PlaySlotAnimationAsync ( 'giant_combat_attack_charge', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));

			ACS_Draug_Swap_Close_Range();

			AddTimer('ACS_Draug_Anchor_Respawn', 3, false);

			break;
		}
			
		this.previous_acs_draug_attack_index_2 = acs_draug_attack_index_2;
	}

	function CutsceneDelayCheck() : bool
	{
		var recentDialogueTime, currentTime : GameTime;

		recentDialogueTime = theGame.GetRecentDialogOrCutsceneEndGameTime();
		currentTime = theGame.GetGameTime();
		
		if( GameTimeDTAtLeastRealSecs( currentTime, recentDialogueTime, 1 ) )
		{
			return true;
		}

		return false;
	}

	function Player_In_Combat()
	{
		if ((thePlayer.IsInCombat() || thePlayer.IsThreatened())
		&& thePlayer.IsAlive()
		)
		{
			if (!CutsceneDelayCheck())
			{
				return;
			}

			SetPlayerTarget();

			if(thePlayer.HasTag('ACS_Camo_Active'))
			{
				if (theInput.GetActionValue('GI_AxisLeftX') == 0 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
				{
					thePlayer.DrainVitality( thePlayer.GetStat( BCS_Vitality ) * 0.00005 );
				}
				else
				{
					thePlayer.DrainVitality( thePlayer.GetStat( BCS_Vitality ) * 0.00025 );
				}
			}

			if(thePlayer.HasTag('ACS_AardPull_Active'))
			{
				if (thePlayer.GetStat( BCS_Stamina ) > 0.01)
				{
					ACS_Bat_Damage();
				}
				else
				{
					AardPull_Deactivate();
				}	
			}

			Ghoul_Venom_Manager();

			Tentacle_Manager();

			Necrofiend_Manager();

			Werewolf_Spawn_Adds_Manager();

			ShadesKara_Spawn_Adds_Manager();

			Nekker_Guardian_Manager();

			Katakan_Summon_Manager();

			ACS_Fire_Bear_Flames_Manager();

			ACS_KnightmareEternumManager();

			ACS_RatMageManager();

			ACS_SheWhoKnowsManager();

			ACS_VampireMonsterManager();

			Witch_Hunter_Bomb_Manager();

			Human_Death_Controller_Spawner();

			ACS_CanarisManager();

			ACS_FireGargoyleManager();

			ACS_FluffyManager();

			ACS_FogAssassinManager();

			ACS_DuskwraithManager();

			ACS_DraugManager();

			//ACS_Bat_Projectile_Manager();

			Guard_Manager();

			CloakUnequip();

			if (theInput.GetActionValue('SpecialAttackLight') > 0.5
			//|| thePlayer.IsInCombatAction_SpecialAttack()
			//|| thePlayer.IsInCombatAction()
			|| thePlayer.IsDoingSpecialAttack(true)
			|| thePlayer.IsDoingSpecialAttack(false)
			|| thePlayer.IsGuarded()
			//|| thePlayer.IsInCombatAction_Attack()
			//|| thePlayer.IsInCombatAction_NonSpecialAttack()
			)
			{
				if (!thePlayer.IsPerformingFinisher())
				{
					ACS_Rage_Marker_Manager();
				}
			}
		}
		else
		{
			CloakEquip();
		}
	}

	function ACS_NPC_Add_Health()
	{
		var actors		    																								: array<CActor>;
		var i 																												: int;
		var npc																												: CNewNPC;

		if (ACS_Enemy_Health_Multiplier() == 1)
		{
			return;
		}

		actors.Clear();

		actors = thePlayer.GetNPCsAndPlayersInRange( 100, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				npc = (CNewNPC)actors[i];

				if(
				!npc.HasTag('ACS_Add_Health')
				)
				{
					if (npc.UsesEssence())
					{
						npc.abilityManager.SetStatPointMax(BCS_Essence, npc.GetMaxHealth() * ACS_Enemy_Health_Multiplier() );
					}
					else if (npc.UsesVitality())
					{
						npc.abilityManager.SetStatPointMax(BCS_Vitality, npc.GetMaxHealth() * ACS_Enemy_Health_Multiplier() );
					}
					
					npc.SetHealth(npc.GetMaxHealth());

					npc.AddTag('ACS_Add_Health');
				}	
			}
		}
	}

	function Guard_Manager()
	{
		if
		(
		!thePlayer.HasTag('blood_sucking') 
		&&
		(
			//thePlayer.IsInGuardedState()
			//|| 
			thePlayer.IsGuarded()
		)
		&& ACS_RageMechanic_Enabled()
		)
		{
			if (!thePlayer.IsImmuneToBuff(EET_Stagger))
			{
				thePlayer.AddBuffImmunity	( EET_Stagger,					'acs_guard', true);
			}
			
			if (!thePlayer.IsImmuneToBuff(EET_LongStagger))
			{
				thePlayer.AddBuffImmunity	( EET_LongStagger,				'acs_guard', true);
			}
		}
		else
		{
			thePlayer.RemoveBuffImmunity( EET_Stagger,					'acs_guard');
			thePlayer.RemoveBuffImmunity( EET_LongStagger,				'acs_guard');
		}
	}

	function FUCKING_SECOND_LIFE_HACK()
	{
		if( thePlayer.IsActionBlockedBy(EIAB_Movement, 'Mutation11') && GetWitcherPlayer().IsMutationActive( EPMT_Mutation11 ) && !GetWitcherPlayer().HasBuff( EET_Mutation11Debuff ) && !GetWitcherPlayer().IsInAir() )
		{
			thePlayer.AddTag('ACS_Second_Life_Active');
		}
	}

	function Nekker_Guardian_Check()
	{
		if (!GetACSNekkerGuardian())
		{
			return;
		}

		if (GetACSNekkerGuardian().GetAttitude(thePlayer) != AIA_Hostile)
		{
			GetACSNekkerGuardian().SetAttitude(thePlayer, AIA_Hostile);
		}

		nekkerGuardianTargetDistance = VecDistanceSquared2D( thePlayer.GetWorldPosition(), GetACSNekkerGuardian().GetWorldPosition() ) ;

		if( nekkerGuardianTargetDistance > 30 * 30 && nekkerGuardianTargetDistance <= 50 * 50 ) 
		{
			if (!GetACSNekkerGuardian().IsInCombat())
			{
				GetACSNekkerGuardian().Destroy();
			}
		}
	}

	function DisableCameraAnim()
	{
		theGame.GetGameCamera().StopAnimation('camera_shake_loop_lvl1_5');

		theGame.GetGameCamera().StopAnimation('camera_shake_loop_lvl1_1');
	}

	function InterruptChargeAttackForSwappedBeh()
	{
		var swapped_beh_actors_shield, swapped_beh_actors_vamp, interrupt_actors		: array<CActor>;
		var i, j, k 																	: int;
		var interrupt_actor																: CActor; 

		/*
		swapped_beh_actors_shield.Clear();

		theGame.GetActorsByTag( 'ACS_Swapped_To_Shield', swapped_beh_actors_shield );	

		for( i = 0; i < swapped_beh_actors_shield.Size(); i += 1 )
		{
			swapped_beh_actors_shield[i].SignalGameplayEvent( 'InterruptChargeAttack' );
		}

		swapped_beh_actors_vamp.Clear();

		theGame.GetActorsByTag( 'ACS_Swapped_To_Vampire', swapped_beh_actors_vamp );	

		for( j = 0; j < swapped_beh_actors_vamp.Size(); j += 1 )
		{
			swapped_beh_actors_vamp[j].SignalGameplayEvent( 'InterruptChargeAttack' );
		}
		*/

		if(!thePlayer.IsInCombat())
		{
			return;
		}

		interrupt_actors.Clear();

		interrupt_actors = thePlayer.GetNPCsAndPlayersInRange( 20, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors + FLAG_Attitude_Hostile);

		if( interrupt_actors.Size() > 0 )
		{
			for( i = 0; i < interrupt_actors.Size(); i += 1 )
			{
				if (interrupt_actors[i].IsHuman())
				{
					if (interrupt_actors[i].HasTag('ACS_Swapped_To_Shield')
					|| interrupt_actors[i].HasTag('ACS_Swapped_To_Vampire')
					|| interrupt_actors[i].HasTag('ACS_Swapped_To_1h_Sword')
					|| interrupt_actors[i].HasTag('ACS_Swapped_To_2h_Sword')
					|| interrupt_actors[i].HasTag('ACS_Swapped_To_Witcher')
					|| interrupt_actors[i].HasTag('ACS_Final_Fear_Stack')
					)
					{
						interrupt_actors[i].SignalGameplayEvent( 'InterruptChargeAttack' );
					}
					else 
					{
						if( RandF() < 0.01 )
						{
							interrupt_actors[i].SignalGameplayEvent( 'InterruptChargeAttack' );
						}
					}
				}
			}
		}
	}

	function Manual_Camera_Control()
	{
		if (!thePlayer.IsHardLockEnabled())
		{
			if (!thePlayer.IsUsingHorse() 
			&& !thePlayer.IsUsingVehicle() 
			&& !thePlayer.IsPerformingFinisher()
			//&& thePlayer.IsInCombat()
			&& thePlayer.HasTag('ACS_Manual_Combat_Control')) 
			{
				movementAdjustor = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

				movementAdjustor.CancelAll();
				
				ticket = movementAdjustor.CreateNewRequest( 'ACS_Manual_Combat_Control_Rotate' );
					
				movementAdjustor.AdjustmentDuration( ticket, 0.25 );

				movementAdjustor.ShouldStartAt(ticket, thePlayer.GetWorldPosition());
				movementAdjustor.MaxRotationAdjustmentSpeed( ticket, 5000000 );
				movementAdjustor.MaxLocationAdjustmentSpeed( ticket, 5000000 );

				movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );
			}
		}
	}

	function Glide_Collision_Check(): bool
	{
		var tempEndPoint_1, tempEndPoint_2, normal_1, normal_2			: Vector;
		var collisionGroupsNames										: array<name>;	

		collisionGroupsNames.Clear();

		collisionGroupsNames.PushBack( 'Terrain');
		collisionGroupsNames.PushBack( 'Static');
		collisionGroupsNames.PushBack( 'Water'); 
        collisionGroupsNames.PushBack( 'Door' );
        collisionGroupsNames.PushBack( 'Dangles' );
        collisionGroupsNames.PushBack( 'Foliage' );
        collisionGroupsNames.PushBack( 'Destructible' );
        collisionGroupsNames.PushBack( 'RigidBody' );
        collisionGroupsNames.PushBack( 'Boat' );
        collisionGroupsNames.PushBack( 'BoatDocking' );
        collisionGroupsNames.PushBack( 'Platforms' );
       	collisionGroupsNames.PushBack( 'Corpse' );
        collisionGroupsNames.PushBack( 'Projectile' );
       	collisionGroupsNames.PushBack( 'ParticleCollider' ); 
        collisionGroupsNames.PushBack( 'Ragdoll' ); 

		if ( 
		theGame.GetWorld().StaticTrace( thePlayer.GetWorldPosition(), thePlayer.GetWorldPosition() + thePlayer.GetHeadingVector() * 2, tempEndPoint_1, normal_1, collisionGroupsNames ) 
		|| theGame.GetWorld().StaticTrace( thePlayer.GetWorldPosition(), thePlayer.GetWorldPosition() + thePlayer.GetWorldUp() * -1.49, tempEndPoint_2, normal_2, collisionGroupsNames )
		)		
		{
			return true;
		}
		
		return false;
	}

	function Glide_Stop()
	{
		if(Glide_Collision_Check()
		//|| thePlayer.IsOnGround()
		)
		{
			if (FactsQuerySum("ACS_Is_Gliding") > 0)
			{
				theGame.ReleaseNoSaveLock( ACS_Glide_Savelock_ID );

				thePlayer.UnblockAction( EIAB_Crossbow, 			'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_CallHorse,			'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_Signs, 				'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_DrawWeapon, 			'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_FastTravel, 			'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_Fists, 				'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_InteractionAction, 	'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_UsableItem,			'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_ThrowBomb,			'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_SwordAttack,			'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_LightAttacks,			'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_HeavyAttacks,			'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_SpecialAttackLight,	'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_SpecialAttackHeavy,	'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_Dodge,				'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_Roll,					'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_Parry,				'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_MeditationWaiting,	'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_OpenMeditation,		'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_RadialMenu,			'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_Movement,				'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_Interactions, 		'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_Jump, 				'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_QuickSlots, 			'ACS_Gliding');

				RemoveTimer('ACS_Gliding');

				thePlayer.StopEffect('glide_fx');
				thePlayer.PlayEffectSingle('glide_fx');
				thePlayer.StopEffect('glide_fx');

				thePlayer.StopEffect( 'bruxa_dash_trails' );
				thePlayer.PlayEffectSingle( 'bruxa_dash_trails' );
				thePlayer.StopEffect( 'bruxa_dash_trails' );

				thePlayer.PlayEffectSingle('embers_particles_test');
				thePlayer.StopEffect('embers_particles_test');

				thePlayer.EnableCollisions(true);
				thePlayer.EnableCharacterCollisions(true);

				thePlayer.SetImmortalityMode( AIM_None, AIC_Combat ); 

				thePlayer.RemoveTag('ACS_Wild_Hunt_Horse_Flying');

				ACS_Wings_Entity_Anchor().Destroy();

				thePlayer.DestroyEffect('acs_glide_disappear');

				ACS_Wings_Entity().Destroy();

				ACS_Igni_Glide_Entity_R().Destroy();

				ACS_Igni_Glide_Entity_L().Destroy();

				ACS_Igni_Glide_Entity_L_Leg().Destroy();

				ACS_Igni_Glide_Entity_R_Leg().Destroy();

				RemoveTimer('Fleder_Glide_Fear');

				RemoveTimer('Player_Wings_Sound');

				thePlayer.SetVisibility( true );

				((CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent')).UnfreezePoseFadeOut(0.1);

				((CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent')).UnfreezePose();

				if (thePlayer.IsOnGround())
				{
					if ( thePlayer.IsAnyWeaponHeld() )
					{
						if (thePlayer.IsWeaponHeld('fist') )
						{
							PlayerPlayAnimation( 'man_geralt_sword_dodge_roll_rp_f_01_fist' );
						}
						else
						{
							PlayerPlayAnimation( 'man_geralt_sword_dodge_roll_rp_f_01' );
						}
					}
					else
					{
						PlayerPlayAnimation( 'man_geralt_sword_dodge_roll_rp_f_01_fist' );
					}
				}
				else
				{
					PlayerPlayAnimation( 'ex_fall_start' );
				}		

				thePlayer.SoundEvent("monster_dettlaff_monster_movement_wing_flap_long_hard");

				thePlayer.SoundEvent("monster_dettlaff_monster_movement_land");

				if ( thePlayer.HasTag('ACS_HideWeaponOnDodge') 
				//&& !thePlayer.HasTag('blood_sucking')
				)
				{
					if (!thePlayer.HasTag('aard_sword_equipped'))
					{
						ACS_Weapon_Respawn();
					}
					
					thePlayer.RemoveTag('ACS_HideWeaponOnDodge');

					thePlayer.RemoveTag('ACS_HideWeaponOnDodge_Claw_Effect');
				}

				FactsRemove("ACS_Is_Gliding");
			}
		}
	}

	function SwordWalkCancelFallback()
	{
		if ( theInput.GetActionValue('GI_AxisLeftY') == 0
		&& theInput.GetActionValue('GI_AxisLeftX') == 0
		//&& !thePlayer.GetIsWalking()
		)
		{
			RemoveDefaltSwordWalkCancel();

			//ACS_Transformation_Werewolf_Stop_Moving_Failsafe();
		}
	}

	private var acs_enabledQuestTracking : bool; 
	
	default acs_enabledQuestTracking = false;

	public function ACS_EnableQuestTracking( enable : bool )
	{
		acs_enabledQuestTracking = enable;
	}

	public function ACS_QuestTrackingCheck() : bool
	{
		return acs_enabledQuestTracking;
	}

	public timer function ACSTrackedQuestsEntsDestroyDelay ( dt : float, id : int)
	{
		ACSTrackedQuestsEntsDestroy();
	}

	function ACS_Tracked_Quest_Ents_Control()
	{
		if (ACS_Untracked_Quest_Marker_Despawn_Delay() != 0)
		{
			ACSTrackedQuestsEntsTeleportRotate();
		}
		else
		{
			ACSTrackedQuestsEntsDestroy();
		}

		if(theGame.GetFocusModeController().CanUseFocusMode()
		&& theGame.IsFocusModeActive()
		&& !thePlayer.IsInCombat()
		&& !thePlayer.IsThreatened()
		)
		{
			if (FactsQuerySum("ACS_TrackedQuestEntsControl") <= 0)
			{
				RemoveTimer('ACSTrackedQuestsEntsDestroyDelay');

				if (!ACS_IsNight_Adjustable())
				{
					Activate_Focus_Mode_Env();
				}

				if (ACS_Untracked_Quest_Marker_Despawn_Delay() != 0)
				{
					GuidingEntities();
				}

				//ScentEnable();

				FactsAdd("ACS_TrackedQuestEntsControl", 1, -1);
			}
		}
		else
		{
			if (FactsQuerySum("ACS_TrackedQuestEntsControl") > 0)
			{
				Deactivate_Focus_Mode_Env();

				RemoveTimer('ACSTrackedQuestsEntsDestroyDelay');
				AddTimer('ACSTrackedQuestsEntsDestroyDelay', ACS_Untracked_Quest_Marker_Despawn_Delay(), false);

				FactsRemove("ACS_TrackedQuestEntsControl");
			}
		}
	}

	function ACS_QuestTrackControl()
	{
		if(theGame.GetFocusModeController().CanUseFocusMode()
		&& theGame.IsFocusModeActive()
		&& !thePlayer.IsInCombat()
		&& !thePlayer.IsThreatened()
		)
		{
			if (FactsQuerySum("ACS_HijackPotionControl") <= 0)
			{
				ACS_EnableQuestTracking( true );

				theInput.UnregisterListener( this, 'DrinkPotion1' );

				theInput.UnregisterListener( this, 'DrinkPotion2' ); 

				theInput.RegisterListener( this, 'OnCommDrinkPotion1Alt', 'DrinkPotion1' );

				theInput.RegisterListener( this, 'OnCommDrinkPotion2Alt', 'DrinkPotion2' );

				FactsAdd("ACS_HijackPotionControl", 1, -1);
			}
		}
		else
		{
			if (FactsQuerySum("ACS_HijackPotionControl") > 0)
			{
				ACS_EnableQuestTracking( false );

				theInput.UnregisterListener( this, 'DrinkPotion1' );

				theInput.UnregisterListener( this, 'DrinkPotion2' ); 

				theInput.RegisterListener( this, 'OnCommDrinkPotion1', 'DrinkPotion1' );

				theInput.RegisterListener( this, 'OnCommDrinkPotion2', 'DrinkPotion2' );

				FactsRemove("ACS_HijackPotionControl");
			}
		}
	}

	function ACS_MeditationControl()
	{
		if(theGame.GetFocusModeController().CanUseFocusMode()
		&& theGame.IsFocusModeActive()
		&& !thePlayer.IsInCombat()
		&& !thePlayer.IsThreatened()
		&& GetWitcherPlayer().CanMeditate()
		&& GetWitcherPlayer().CanMeditateHere()
		&& !ACS_Transformation_Activated_Check()
		)
		{
			if (FactsQuerySum("ACS_HijackWalkControl") <= 0)
			{
				theInput.UnregisterListener( this, 'DrinkPotion3' ); 
				theInput.RegisterListener( this, 'OnCommDrinkPotion3Alt', 'DrinkPotion3' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'Sprint' );
				theInput.RegisterListener( this, 'OnCommSprint', 'Sprint' );

				FactsAdd("ACS_HijackWalkControl", 1, -1);
			}
		}
		else
		{
			if (FactsQuerySum("ACS_HijackWalkControl") > 0)
			{
				theInput.UnregisterListener( this, 'DrinkPotion3' );

				theInput.RegisterListener( this, 'OnCommDrinkPotion3', 'DrinkPotion3' );

				if ( ACS_BruxaDashSprintOrW() == 1 
				|| ACS_WraithModeSprintOrW() == 1
				|| ACS_Transformation_Activated_Check()
				)
				{
					theInput.UnregisterListener( thePlayer.GetInputHandler(), 'Sprint' );
					theInput.RegisterListener( this, 'OnCommSprint', 'Sprint' );
				}
				else
				{
					theInput.UnregisterListener( this, 'Sprint' );
					theInput.RegisterListener( thePlayer.GetInputHandler(), 'OnCommSprint', 'Sprint' );
				}

				FactsRemove("ACS_HijackWalkControl");
			}
		}
	}

	function ACS_TrackQuestSwitch( dir : int )
	{
		var i, newQuestIndex : int;
		var activeQuests : array< CJournalBase >;
		var trackedQuest : CJournalQuest;
		
		theGame.GetJournalManager().GetActivatedOfType( 'CJournalQuest', activeQuests );
		trackedQuest = theGame.GetJournalManager().GetTrackedQuest();
		
		for ( i = activeQuests.Size() - 1; i >= 0; i -= 1 )
		{
			if ( theGame.GetJournalManager().GetEntryStatus( activeQuests[ i ] ) != JS_Active )
			{
				activeQuests.Erase( i );
			}
		}

		if ( activeQuests.Size() <= 1 )
		{
			return;
		}

		for ( i = 0; i < activeQuests.Size(); i += 1 )
		{
			if ( trackedQuest == activeQuests[ i ] )
			{
				newQuestIndex = ( i + dir + activeQuests.Size() ) % activeQuests.Size();
				theGame.GetJournalManager().SetTrackedQuest( activeQuests[ newQuestIndex ] );
				return;
			}
		}
	}

	function PlayerWerewolfTeleportation()
	{
		var werewolfPos : Vector;
		var werewolfRot : EulerAngles;

		werewolfPos = ((GetACSTransformationWerewolf().GetBoneWorldPosition('r_hand') + GetACSTransformationWerewolf().GetBoneWorldPosition('l_hand'))/2);
		werewolfRot = GetACSTransformationWerewolf().GetWorldRotation();

		thePlayer.TeleportWithRotation(werewolfPos, werewolfRot);
	}

	function Transformation_Control()
	{
		if ( ACS_Transformation_Activated_Check() )
		{
			if ( theGame.IsDialogOrCutscenePlaying() 
			|| thePlayer.IsInNonGameplayCutscene() 
			|| thePlayer.IsInGameplayScene() 
			|| theGame.IsCurrentlyPlayingNonGameplayScene()
			)
			{
				if (ACS_Transformation_Werewolf_Check())
				{
					DisableWerewolf_Actual();
				}

				if (ACS_Transformation_Vampiress_Check())
				{
					DisableVampiress_Actual();
				}

				if (ACS_Transformation_Vampire_Monster_Check())
				{
					DisableTransformationVampireMonster_Actual_No_Teleport();
				}

				if (ACS_Transformation_Toad_Check())
				{
					DisableTransformationToad_Actual();
				}

				if (ACS_Transformation_Red_Miasmal_Check())
				{
					DisableRedMiasmal_Actual();
				}

				if (ACS_Transformation_Sharley_Check())
				{
					DisableSharley_Actual();
				}

				if (ACS_Transformation_Black_Wolf_Check())
				{
					DisableBlackWolf_Actual();
				}
			}
			else
			{
				if (thePlayer.IsEffectActive('acs_armor_effect_1', false))
				{
					thePlayer.DestroyEffect('acs_armor_effect_1');
				}
				
				if (thePlayer.IsEffectActive('acs_armor_effect_2', false))
				{
					thePlayer.DestroyEffect('acs_armor_effect_2');
				}

				if (thePlayer.IsEffectActive('vampire_magic_step_r', false))
				{
					thePlayer.DestroyEffect('vampire_magic_step_r');
				}

				if (thePlayer.IsEffectActive('vampire_magic_step_l', false))
				{
					thePlayer.DestroyEffect('vampire_magic_step_l');
				}

				if (thePlayer.IsEffectActive('odim_magic_step_l', false))
				{
					thePlayer.DestroyEffect('odim_magic_step_l');
				}

				if (thePlayer.IsEffectActive('odim_magic_step_r', false))
				{
					thePlayer.DestroyEffect('odim_magic_step_r');
				}

				if (thePlayer.IsEffectActive('demon_cs', false))
				{
					thePlayer.DestroyEffect('demon_cs');
				}

				if (thePlayer.IsEffectActive('him_smoke_red', false))
				{
					thePlayer.DestroyEffect('him_smoke_red');
				}

				thePlayer.SetVisibility(false);

				thePlayer.EnableCollisions(false);

				thePlayer.SetCanPlayHitAnim(false); 

				thePlayer.EnableCharacterCollisions(false); 

				if (!((CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent')).HasFrozenPose())
				{
					((CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent')).FreezePose();
				}

				if (FactsQuerySum("block_geralts_battlecries") <= 0)
				{
					FactsAdd("block_geralts_battlecries", 1, -1);
				}

				GetWitcherPlayer().DestroyEffect('blood');
				GetWitcherPlayer().DestroyEffect('death_blood');
				GetWitcherPlayer().DestroyEffect('heavy_hit');
				GetWitcherPlayer().DestroyEffect('light_hit');
				GetWitcherPlayer().DestroyEffect('blood_spill');
				GetWitcherPlayer().DestroyEffect('fistfight_heavy_hit');
				GetWitcherPlayer().DestroyEffect('heavy_hit_horseriding');
				GetWitcherPlayer().DestroyEffect('fistfight_hit');
				GetWitcherPlayer().DestroyEffect('critical hit');
				GetWitcherPlayer().DestroyEffect('death_hit');
				GetWitcherPlayer().DestroyEffect('blood_throat_cut');
				GetWitcherPlayer().DestroyEffect('hit_back');
				GetWitcherPlayer().DestroyEffect('standard_hit');
				GetWitcherPlayer().DestroyEffect('critical_bleeding'); 
				GetWitcherPlayer().DestroyEffect('fistfight_hit_back'); 
				GetWitcherPlayer().DestroyEffect('heavy_hit_back'); 
				GetWitcherPlayer().DestroyEffect('light_hit_back'); 

				if (ACS_Transformation_Werewolf_Check()
				&& GetACSTransformationWerewolf())
				{
					ACS_Werewolf_Move_Controls();

					if (FactsQuerySum("ACS_Transformation_Attached") <= 0)
					{
						thePlayer.CreateAttachment( GetACSTransformationWerewolf(), 'attach_slot' , Vector( 0, 0, 1 ), EulerAngles(0,0,0) );

						FactsAdd("ACS_Transformation_Attached", 1, -1);
					}
				}

				if (ACS_Transformation_Vampiress_Check()
				&& GetACSTransformationVampiress())
				{
					ACS_Vampiress_Move_Controls();

					if (FactsQuerySum("ACS_Transformation_Attached") <= 0)
					{
						thePlayer.CreateAttachment( GetACSTransformationVampiress(), 'attach_slot' , Vector( 0, 0, 0 ), EulerAngles(0,0,0) );

						FactsAdd("ACS_Transformation_Attached", 1, -1);
					}
				}

				if (ACS_Transformation_Vampire_Monster_Check()
				&& GetACSTransformationVampireMonster())
				{
					ACS_Transformation_Vampire_Monster_Move_Controls();

					GetACSTransformationVampireMonster().DestroyEffect('shadowdash');

					if (FactsQuerySum("ACS_Transformation_Attached") <= 0)
					{
						thePlayer.CreateAttachment( GetACSTransformationVampireMonster(), 'Trajectory' , Vector( 0, 0, 0.5 ), EulerAngles(0,0,0) );

						FactsAdd("ACS_Transformation_Attached", 1, -1);
					}
				}

				if (ACS_Transformation_Toad_Check()
				&& GetACSTransformationToad())
				{
					ACS_Transformation_Toad_Move_Controls();

					if (FactsQuerySum("ACS_Transformation_Attached") <= 0)
					{
						thePlayer.CreateAttachment( GetACSTransformationToad(), 'attach_slot' , Vector( 0, 0, 1 ), EulerAngles(0,0,0) );

						FactsAdd("ACS_Transformation_Attached", 1, -1);
					}
				}

				if (ACS_Transformation_Red_Miasmal_Check()
				&& GetACSTransformationRedMiasmal())
				{
					ACS_Transformation_Red_Miasmal_Move_Controls();

					if (FactsQuerySum("ACS_Transformation_Attached") <= 0)
					{
						thePlayer.CreateAttachment( GetACSTransformationRedMiasmal(), 'attach_slot' , Vector( 0, 0, 1 ), EulerAngles(0,0,0) );

						FactsAdd("ACS_Transformation_Attached", 1, -1);
					}
				}

				if (ACS_Transformation_Sharley_Check()
				&& GetACSTransformationSharley())
				{
					ACS_Transformation_Sharley_Move_Controls();

					if (FactsQuerySum("ACS_Transformation_Attached") <= 0)
					{
						thePlayer.CreateAttachment( GetACSTransformationSharley(), 'attach_slot' , Vector( 0, 0, 0 ), EulerAngles(0,0,0) );

						FactsAdd("ACS_Transformation_Attached", 1, -1);
					}
				}

				if (ACS_Transformation_Black_Wolf_Check()
				&& GetACSTransformationBlackWolf())
				{
					ACS_Transformation_Black_Wolf_Move_Controls();

					if (FactsQuerySum("ACS_Transformation_Attached") <= 0)
					{
						thePlayer.CreateAttachment( GetACSTransformationBlackWolf(), 'attach_slot' , Vector( 0, 0, 0 ), EulerAngles(0,0,0) );

						FactsAdd("ACS_Transformation_Attached", 1, -1);
					}
				}
			}
		}
	}

	function AutoRead()
	{
		var inv																	: CInventoryComponent;
		var items1, items2, allItems											: array< SItemUniqueId >;
		var	i																	: int;

		if (!ACS_AutoRead_Enabled())
		{
			return;
		}

		if(!theGame.IsFocusModeActive())
		{
			if (FactsQuerySum("ACS_Focus_Mode_Auto_Read") > 0)
			{
				FactsRemove("ACS_Focus_Mode_Auto_Read");
			}

			return;
		}
		else
		{
			if (FactsQuerySum("ACS_Focus_Mode_Auto_Read") <= 0)
			{
				ACS_Reading_All_Items_Tutorial();

				items1.Clear();
				items2.Clear();

				allItems.Clear();

				inv = thePlayer.inv;

				items1 = inv.GetItemsByTag( 'ReadableItem' );
				items2 = inv.GetItemsByTag( 'Painting' );

				ArrayOfIdsAppend( allItems, items1 );
				ArrayOfIdsAppend( allItems, items2 );

				for ( i = 0; i < allItems.Size(); i += 1 )
				{
					inv.ReadSchematicsAndRecipes(allItems[i]);
				}

				FactsAdd("ACS_Focus_Mode_Auto_Read", 1, -1);
			}
		}
	}

	function Durability_Always_Max()
	{
		var inv																	: CInventoryComponent;
		var items1, items2, items3, items4, items5, items6, allItems			: array< SItemUniqueId >;
		var	i																	: int;

		if (!ACS_UnlimitedDurability_Enabled())
		{
			return;
		}

		if(!theGame.IsFocusModeActive())
		{
			if (FactsQuerySum("ACS_Focus_Mode_Durability_Max") > 0)
			{
				FactsRemove("ACS_Focus_Mode_Durability_Max");
			}

			return;
		}
		else
		{
			if (FactsQuerySum("ACS_Focus_Mode_Durability_Max") <= 0)
			{
				items1.Clear();
				items2.Clear();
				items3.Clear();
				items4.Clear();
				items5.Clear();
				items6.Clear();
				allItems.Clear();

				inv = thePlayer.inv;

				items1 = inv.GetItemsByCategory( 'steelsword' );
				items2 = inv.GetItemsByCategory( 'silversword' );
				items3 = inv.GetItemsByCategory( 'armor' );
				items4 = inv.GetItemsByCategory( 'gloves' );
				items5 = inv.GetItemsByCategory( 'pants' );
				items6 = inv.GetItemsByCategory( 'boots' );
				
				ArrayOfIdsAppend( allItems, items1 );
				ArrayOfIdsAppend( allItems, items2 );
				ArrayOfIdsAppend( allItems, items3 );
				ArrayOfIdsAppend( allItems, items4 );
				ArrayOfIdsAppend( allItems, items5 );
				ArrayOfIdsAppend( allItems, items6 );

				for ( i = 0; i < allItems.Size(); i += 1 )
				{
					if ( inv.HasItemDurability( allItems[ i ] ) )
					{
						if ( inv.GetItemDurability(allItems[i]) != inv.GetItemMaxDurability(allItems[i]) )
						{
							ACS_Durability_Tutorial();

							inv.SetItemDurabilityScript( allItems[ i ], inv.GetItemMaxDurability( allItems[ i ] ) );
						}
					}
					else
					{
						inv.SetItemDurabilityScript( allItems[ i ], inv.GetItemMaxDurability( allItems[ i ] ) );
					}
				}

				FactsAdd("ACS_Focus_Mode_Durability_Max", 1, -1);
			}
		}
	}

	function ACS_Armor_Add()
	{
		if (thePlayer.inv.HasItem('ACS_Armor_Omega'))
		{
			if( !thePlayer.inv.HasItem( 'ACS_Armor_Alpha' ) )
			{
				thePlayer.inv.AddAnItem( 'ACS_Armor_Alpha', 1 );
			}
		}

		if (thePlayer.inv.HasItem('ACS_Armor_Alpha'))
		{
			if( !thePlayer.inv.HasItem( 'ACS_Armor_Omega' ) )
			{
				thePlayer.inv.AddAnItem( 'ACS_Armor_Omega', 1 );
			}
		}

		if (thePlayer.inv.HasItem('NGP_ACS_Armor_Omega'))
		{
			if( !thePlayer.inv.HasItem( 'NGP_ACS_Armor_Alpha' ) )
			{
				thePlayer.inv.AddAnItem( 'NGP_ACS_Armor_Alpha', 1 );
			}
		}

		if (thePlayer.inv.HasItem('NGP_ACS_Armor_Alpha'))
		{
			if( !thePlayer.inv.HasItem( 'NGP_ACS_Armor_Omega' ) )
			{
				thePlayer.inv.AddAnItem( 'NGP_ACS_Armor_Omega', 1 );
			}
		}
	}

	function ACS_Give_Stuff()
	{
		if (ACS_Wolf_School_Check_For_Item())
		{
			if (!thePlayer.inv.HasItem('acs_wolf_medallion'))
			{
				thePlayer.inv.AddAnItem('acs_wolf_medallion', 1);
			}

			if (thePlayer.inv.HasItem('acs_bear_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_bear_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_cat_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_cat_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_griffin_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_griffin_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_manticore_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_manticore_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_forgotten_wolf_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_forgotten_wolf_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_viper_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_viper_medallion', -1);
			}
		}
		else if (ACS_Bear_School_Check_For_Item())
		{
			if (!thePlayer.inv.HasItem('acs_bear_medallion'))
			{
				thePlayer.inv.AddAnItem('acs_bear_medallion', 1);
			}

			if (thePlayer.inv.HasItem('acs_wolf_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_wolf_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_cat_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_cat_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_griffin_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_griffin_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_manticore_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_manticore_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_forgotten_wolf_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_forgotten_wolf_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_viper_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_viper_medallion', -1);
			}
		}
		else if (ACS_Cat_School_Check_For_Item())
		{
			if (!thePlayer.inv.HasItem('acs_cat_medallion'))
			{
				thePlayer.inv.AddAnItem('acs_cat_medallion', 1);
			}

			if (thePlayer.inv.HasItem('acs_wolf_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_wolf_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_bear_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_bear_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_griffin_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_griffin_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_manticore_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_manticore_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_forgotten_wolf_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_forgotten_wolf_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_viper_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_viper_medallion', -1);
			}
		}
		else if (ACS_Griffin_School_Check_For_Item())
		{
			if (!thePlayer.inv.HasItem('acs_griffin_medallion'))
			{
				thePlayer.inv.AddAnItem('acs_griffin_medallion', 1);
			}

			if (thePlayer.inv.HasItem('acs_wolf_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_wolf_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_bear_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_bear_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_cat_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_cat_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_manticore_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_manticore_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_forgotten_wolf_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_forgotten_wolf_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_viper_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_viper_medallion', -1);
			}
		}
		else if (ACS_Manticore_School_Check_For_Item())
		{
			if (!thePlayer.inv.HasItem('acs_manticore_medallion'))
			{
				thePlayer.inv.AddAnItem('acs_manticore_medallion', 1);
			}

			if (thePlayer.inv.HasItem('acs_wolf_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_wolf_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_bear_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_bear_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_cat_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_cat_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_griffin_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_griffin_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_forgotten_wolf_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_forgotten_wolf_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_viper_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_viper_medallion', -1);
			}
		}
		else if (ACS_Forgotten_Wolf_Check_For_Item())
		{
			if (!thePlayer.inv.HasItem('acs_forgotten_wolf_medallion'))
			{
				thePlayer.inv.AddAnItem('acs_forgotten_wolf_medallion', 1);
			}

			if (thePlayer.inv.HasItem('acs_wolf_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_wolf_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_bear_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_bear_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_cat_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_cat_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_griffin_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_griffin_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_manticore_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_manticore_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_viper_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_viper_medallion', -1);
			}
		}
		else if (ACS_Viper_School_Check_For_Item())
		{
			if (!thePlayer.inv.HasItem('acs_viper_medallion'))
			{
				thePlayer.inv.AddAnItem('acs_viper_medallion', 1);
			}

			if (thePlayer.inv.HasItem('acs_wolf_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_wolf_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_bear_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_bear_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_cat_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_cat_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_griffin_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_griffin_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_manticore_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_manticore_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_forgotten_wolf_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_forgotten_wolf_medallion', -1);
			}
		}
		else
		{
			if (thePlayer.inv.HasItem('acs_wolf_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_wolf_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_bear_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_bear_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_cat_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_cat_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_griffin_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_griffin_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_manticore_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_manticore_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_forgotten_wolf_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_forgotten_wolf_medallion', -1);
			}

			if (thePlayer.inv.HasItem('acs_viper_medallion'))
			{
				thePlayer.inv.RemoveItemByName('acs_viper_medallion', -1);
			}
		}

		if (FactsQuerySum("q110_completed") > 0)
		{
			if (FactsQuerySum("ACS_WH_Armor_Added") <= 0 )
			{
				if( FactsQuerySum("NewGamePlus") > 0 )
				{
					if (!thePlayer.inv.HasItem('NGP_ACS_WH_Armor'))
					{
						thePlayer.inv.AddAnItem('NGP_ACS_WH_Armor', 1);
					}

					if (!thePlayer.inv.HasItem('NGP_ACS_WH_Gloves'))
					{
						thePlayer.inv.AddAnItem('NGP_ACS_WH_Gloves', 1);
					}

					if (!thePlayer.inv.HasItem('NGP_ACS_WH_Pants'))
					{
						thePlayer.inv.AddAnItem('NGP_ACS_WH_Pants', 1);
					}

					if (!thePlayer.inv.HasItem('NGP_ACS_WH_Boots'))
					{
						thePlayer.inv.AddAnItem('NGP_ACS_WH_Boots', 1);
					}
				}
				else
				{
					if (!thePlayer.inv.HasItem('ACS_WH_Armor'))
					{
						thePlayer.inv.AddAnItem('ACS_WH_Armor', 1);
					}

					if (!thePlayer.inv.HasItem('ACS_WH_Gloves'))
					{
						thePlayer.inv.AddAnItem('ACS_WH_Gloves', 1);
					}

					if (!thePlayer.inv.HasItem('ACS_WH_Pants'))
					{
						thePlayer.inv.AddAnItem('ACS_WH_Pants', 1);
					}

					if (!thePlayer.inv.HasItem('ACS_WH_Boots'))
					{
						thePlayer.inv.AddAnItem('ACS_WH_Boots', 1);
					}
				}

				FactsAdd("ACS_WH_Armor_Added", 1, -1);
			}
		}

		if (FactsQuerySum("q501_eredin_died") > 0)
		{
			if (FactsQuerySum("ACS_Eredin_Armor_Added") <= 0 )
			{
				if( FactsQuerySum("NewGamePlus") > 0 )
				{
					if (!thePlayer.inv.HasItem('NGP_ACS_Eredin_Armor'))
					{
						thePlayer.inv.AddAnItem('NGP_ACS_Eredin_Armor', 1);
					}

					if (!thePlayer.inv.HasItem('NGP_ACS_Eredin_Gloves'))
					{
						thePlayer.inv.AddAnItem('NGP_ACS_Eredin_Gloves', 1);
					}

					if (!thePlayer.inv.HasItem('NGP_ACS_Eredin_Pants'))
					{
						thePlayer.inv.AddAnItem('NGP_ACS_Eredin_Pants', 1);
					}

					if (!thePlayer.inv.HasItem('NGP_ACS_Eredin_Boots'))
					{
						thePlayer.inv.AddAnItem('NGP_ACS_Eredin_Boots', 1);
					}
				}
				else
				{
					if (!thePlayer.inv.HasItem('ACS_Eredin_Armor'))
					{
						thePlayer.inv.AddAnItem('ACS_Eredin_Armor', 1);
					}

					if (!thePlayer.inv.HasItem('ACS_Eredin_Gloves'))
					{
						thePlayer.inv.AddAnItem('ACS_Eredin_Gloves', 1);
					}

					if (!thePlayer.inv.HasItem('ACS_Eredin_Pants'))
					{
						thePlayer.inv.AddAnItem('ACS_Eredin_Pants', 1);
					}

					if (!thePlayer.inv.HasItem('ACS_Eredin_Boots'))
					{
						thePlayer.inv.AddAnItem('ACS_Eredin_Boots', 1);
					}
				}

				FactsAdd("ACS_Eredin_Armor_Added", 1, -1);
			}

			if (FactsQuerySum("ACS_VGX_Eredin_Armor_Added") <= 0 
			)
			{
				if (ACS_VGX_Eredin_Appearance_Mod_Installed_Check())
				{
					if( FactsQuerySum("NewGamePlus") > 0 )
					{
						if (!thePlayer.inv.HasItem('NGP_ACS_VGX_Eredin_Armor'))
						{
							thePlayer.inv.AddAnItem('NGP_ACS_VGX_Eredin_Armor', 1);
						}

						if (!thePlayer.inv.HasItem('NGP_ACS_VGX_Eredin_Gloves'))
						{
							thePlayer.inv.AddAnItem('NGP_ACS_VGX_Eredin_Gloves', 1);
						}

						if (!thePlayer.inv.HasItem('NGP_ACS_VGX_Eredin_Pants'))
						{
							thePlayer.inv.AddAnItem('NGP_ACS_VGX_Eredin_Pants', 1);
						}

						if (!thePlayer.inv.HasItem('NGP_ACS_VGX_Eredin_Boots'))
						{
							thePlayer.inv.AddAnItem('NGP_ACS_VGX_Eredin_Boots', 1);
						}
					}
					else
					{
						if (!thePlayer.inv.HasItem('ACS_VGX_Eredin_Armor'))
						{
							thePlayer.inv.AddAnItem('ACS_VGX_Eredin_Armor', 1);
						}

						if (!thePlayer.inv.HasItem('ACS_VGX_Eredin_Gloves'))
						{
							thePlayer.inv.AddAnItem('ACS_VGX_Eredin_Gloves', 1);
						}

						if (!thePlayer.inv.HasItem('ACS_VGX_Eredin_Pants'))
						{
							thePlayer.inv.AddAnItem('ACS_VGX_Eredin_Pants', 1);
						}

						if (!thePlayer.inv.HasItem('ACS_VGX_Eredin_Boots'))
						{
							thePlayer.inv.AddAnItem('ACS_VGX_Eredin_Boots', 1);
						}
					}
				}

				FactsAdd("ACS_VGX_Eredin_Armor_Added", 1, -1);
			}
		}

		if (FactsQuerySum("q111_imlerith_dead") > 0)
		{
			if (FactsQuerySum("ACS_Imlerith_Armor_Added") <= 0 )
			{
				if( FactsQuerySum("NewGamePlus") > 0 )
				{
					if (!thePlayer.inv.HasItem('NGP_ACS_Imlerith_Armor'))
					{
						thePlayer.inv.AddAnItem('NGP_ACS_Imlerith_Armor', 1);
					}

					if (!thePlayer.inv.HasItem('NGP_ACS_Imlerith_Gloves'))
					{
						thePlayer.inv.AddAnItem('NGP_ACS_Imlerith_Gloves', 1);
					}

					if (!thePlayer.inv.HasItem('NGP_ACS_Imlerith_Pants'))
					{
						thePlayer.inv.AddAnItem('NGP_ACS_Imlerith_Pants', 1);
					}

					if (!thePlayer.inv.HasItem('NGP_ACS_Imlerith_Boots'))
					{
						thePlayer.inv.AddAnItem('NGP_ACS_Imlerith_Boots', 1);
					}
				}
				else
				{
					if (!thePlayer.inv.HasItem('ACS_Imlerith_Armor'))
					{
						thePlayer.inv.AddAnItem('ACS_Imlerith_Armor', 1);
					}

					if (!thePlayer.inv.HasItem('ACS_Imlerith_Gloves'))
					{
						thePlayer.inv.AddAnItem('ACS_Imlerith_Gloves', 1);
					}

					if (!thePlayer.inv.HasItem('ACS_Imlerith_Pants'))
					{
						thePlayer.inv.AddAnItem('ACS_Imlerith_Pants', 1);
					}

					if (!thePlayer.inv.HasItem('ACS_Imlerith_Boots'))
					{
						thePlayer.inv.AddAnItem('ACS_Imlerith_Boots', 1);
					}
				}

				FactsAdd("ACS_Imlerith_Armor_Added", 1, -1);
			}
		}

		if (FactsQuerySum("q501_canaris_died") > 0)
		{
			if (FactsQuerySum("ACS_Caranthir_Armor_Added") <= 0 )
			{
				if( FactsQuerySum("NewGamePlus") > 0 )
				{
					if (!thePlayer.inv.HasItem('NGP_ACS_Caranthir_Armor'))
					{
						thePlayer.inv.AddAnItem('NGP_ACS_Caranthir_Armor', 1);
					}

					if (!thePlayer.inv.HasItem('NGP_ACS_Caranthir_Gloves'))
					{
						thePlayer.inv.AddAnItem('NGP_ACS_Caranthir_Gloves', 1);
					}

					if (!thePlayer.inv.HasItem('NGP_ACS_Caranthir_Pants'))
					{
						thePlayer.inv.AddAnItem('NGP_ACS_Caranthir_Pants', 1);
					}

					if (!thePlayer.inv.HasItem('NGP_ACS_Caranthir_Boots'))
					{
						thePlayer.inv.AddAnItem('NGP_ACS_Caranthir_Boots', 1);
					}
				}
				else
				{
					if (!thePlayer.inv.HasItem('ACS_Caranthir_Armor'))
					{
						thePlayer.inv.AddAnItem('ACS_Caranthir_Armor', 1);
					}

					if (!thePlayer.inv.HasItem('ACS_Caranthir_Gloves'))
					{
						thePlayer.inv.AddAnItem('ACS_Caranthir_Gloves', 1);
					}

					if (!thePlayer.inv.HasItem('ACS_Caranthir_Pants'))
					{
						thePlayer.inv.AddAnItem('ACS_Caranthir_Pants', 1);
					}

					if (!thePlayer.inv.HasItem('ACS_Caranthir_Boots'))
					{
						thePlayer.inv.AddAnItem('ACS_Caranthir_Boots', 1);
					}
				}

				FactsAdd("ACS_Caranthir_Armor_Added", 1, -1);
			}
		}

		if (FactsQuerySum("q602_had_sex_with_shani") > 0)
		{
			if (FactsQuerySum("ACS_Toad_Prince_Venom_Added") <= 0 )
			{
				if (!thePlayer.inv.HasItem('acs_toad_slime'))
				{
					thePlayer.inv.AddAnItem('acs_toad_slime', 1);
				}

				FactsAdd("ACS_Toad_Prince_Venom_Added", 1, -1);
			}
		}

		if ( FactsQuerySum("q604_fdb_rose_taken") > 0 )
		{
			if (FactsQuerySum("ACS_Novalis_Added") <= 0 )
			{
				if (!thePlayer.inv.HasItem('ACS_Novalis'))
				{
					thePlayer.inv.AddAnItem('ACS_Novalis', 1);
				}

				FactsAdd("ACS_Novalis_Added", 1, -1);
			}
		}

		if ( FactsQuerySum("q604_fdb_rose_taken") > 0 && FactsQuerySum("q605_mirror_banished") > 0 )
		{
			if (FactsQuerySum("ACS_True_Iris_Added") <= 0 )
			{
				if (!thePlayer.inv.HasItem('ACS_True_Iris'))
				{
					thePlayer.inv.AddAnItem('ACS_True_Iris', 1);
				}

				FactsAdd("ACS_True_Iris_Added", 1, -1);
			}
		}

		if ( FactsQuerySum("sq202_yen_girlfriend") > 0 )
		{
			if (FactsQuerySum("ACS_Kestral_Skull_Added") <= 0 )
			{
				if (!thePlayer.inv.HasItem('acs_kestral_skull'))
				{
					thePlayer.inv.AddAnItem('acs_kestral_skull', 1);
				}

				FactsAdd("ACS_Kestral_Skull_Added", 1, -1);
			}
		}

		if ( FactsQuerySum("q309_triss_lover") > 0 )
		{
			if (FactsQuerySum("ACS_Phoenix_Ashes_Added") <= 0 )
			{
				if (!thePlayer.inv.HasItem('acs_phoenix_ashes'))
				{
					thePlayer.inv.AddAnItem('acs_phoenix_ashes', 1);
				}

				FactsAdd("ACS_Phoenix_Ashes_Added", 1, -1);
			}
		}

		if (thePlayer.inv.HasItem('ACS_Knife'))
		{
			if (!thePlayer.inv.HasItem('acs_knife_thrower_item'))
			{
				thePlayer.inv.AddAnItem('acs_knife_thrower_item', 1);

				thePlayer.EquipItem( thePlayer.inv.GetItemId('acs_knife_thrower_item'));

				GetWitcherPlayer().SelectQuickslotItem( EES_Quickslot1 );
			}
		}
		else
		{
			if (thePlayer.inv.HasItem('acs_knife_thrower_item'))
			{
				KnifeThrowerSlotSwap();

				thePlayer.inv.RemoveItemByName('acs_knife_thrower_item', -1);
			}
		}

		if (thePlayer.HasTag('vampire_claws_equipped'))
		{
			if (thePlayer.IsInCombat())
			{
				if (!thePlayer.inv.HasItem('acs_bruxa_bite_item'))
				{
					thePlayer.inv.AddAnItem('acs_bruxa_bite_item', 1);
				}

				if (!thePlayer.inv.HasItem('acs_bruxa_camo_item'))
				{
					thePlayer.inv.AddAnItem('acs_bruxa_camo_item', 1);

					thePlayer.EquipItem( thePlayer.inv.GetItemId('acs_bruxa_camo_item'));

					GetWitcherPlayer().SelectQuickslotItem( EES_Quickslot1 );
				}
			}
			else
			{
				if (thePlayer.inv.HasItem('acs_bruxa_bite_item'))
				{
					BruxaBiteSlotSwap();

					thePlayer.inv.RemoveItemByName('acs_bruxa_bite_item', -1);
				}

				if (thePlayer.inv.HasItem('acs_bruxa_camo_item'))
				{
					BruxaCamoSlotSwap();

					thePlayer.inv.RemoveItemByName('acs_bruxa_camo_item', -1);
				}
			}
		}
		else
		{
			if (thePlayer.inv.HasItem('acs_bruxa_bite_item'))
			{
				BruxaBiteSlotSwap();

				thePlayer.inv.RemoveItemByName('acs_bruxa_bite_item', -1);
			}

			if (thePlayer.inv.HasItem('acs_bruxa_camo_item'))
			{
				BruxaCamoSlotSwap();

				thePlayer.inv.RemoveItemByName('acs_bruxa_camo_item', -1);
			}
		}

		if (ACS_GetItem_Aerondight_Steel_Held())
		{
			if (thePlayer.IsInCombat())
			{
				if (!thePlayer.inv.HasItem('acs_sword_array_item'))
				{
					thePlayer.inv.AddAnItem('acs_sword_array_item', 1);

					thePlayer.EquipItem( thePlayer.inv.GetItemId('acs_sword_array_item'));

					GetWitcherPlayer().SelectQuickslotItem( EES_Quickslot1 );
				}
			}
			else
			{
				if (thePlayer.inv.HasItem('acs_sword_array_item'))
				{
					SwordArraySlotSwap();

					thePlayer.inv.RemoveItemByName('acs_sword_array_item', -1);
				}
			}
		}
		else
		{
			if (thePlayer.inv.HasItem('acs_sword_array_item'))
			{
				SwordArraySlotSwap();

				thePlayer.inv.RemoveItemByName('acs_sword_array_item', -1);
			}
		}

		if ( FactsQuerySum("q601_fdb_ofir_mage_killed") > 0 )
		{
			if (FactsQuerySum("ACS_Sand_Staff_Added") <= 0 )
			{
				if (!thePlayer.inv.HasItem('ACS_Sand_Staff'))
				{
					thePlayer.inv.AddAnItem('ACS_Sand_Staff', 1);
				}

				FactsAdd("ACS_Sand_Staff_Added", 1, -1);
			}
		}

		if ( FactsQuerySum("mq7006_hermit_fight") > 0 )
		{
			if (FactsQuerySum("ACS_Water_Staff_Added") <= 0 )
			{
				if (!thePlayer.inv.HasItem('ACS_Water_Staff'))
				{
					thePlayer.inv.AddAnItem('ACS_Water_Staff', 1);
				}

				FactsAdd("ACS_Water_Staff_Added", 1, -1);
			}
		}

		if ( FactsQuerySum("ACS_Carduin_Killed") > 0 )
		{
			if (FactsQuerySum("ACS_Fire_Staff_Added") <= 0 )
			{
				if (!thePlayer.inv.HasItem('ACS_Fire_Staff'))
				{
					thePlayer.inv.AddAnItem('ACS_Fire_Staff', 1);
				}

				FactsAdd("ACS_Fire_Staff_Added", 1, -1);
			}
		}
	}

	function KnifeThrowerSlotSwap()
	{
		var itemId 			: SItemUniqueId;

		thePlayer.GetInventory().GetItemEquippedOnSlot(EES_Quickslot1, itemId);

		if( thePlayer.GetInventory().GetItemName( itemId ) == 'acs_knife_thrower_item')
		{
			GetWitcherPlayer().SelectQuickslotItem( EES_RangedWeapon );
		}
	}

	function BruxaCamoSlotSwap()
	{
		var itemId 			: SItemUniqueId;

		thePlayer.GetInventory().GetItemEquippedOnSlot(EES_Quickslot1, itemId);

		if( thePlayer.GetInventory().GetItemName( itemId ) == 'acs_bruxa_camo_item')
		{
			GetWitcherPlayer().SelectQuickslotItem( EES_RangedWeapon );
		}
	}

	function BruxaBiteSlotSwap()
	{
		var itemId 			: SItemUniqueId;

		thePlayer.GetInventory().GetItemEquippedOnSlot(EES_Quickslot1, itemId);

		if( thePlayer.GetInventory().GetItemName( itemId ) == 'acs_bruxa_bite_item')
		{
			GetWitcherPlayer().SelectQuickslotItem( EES_RangedWeapon );
		}
	}

	function SwordArraySlotSwap()
	{
		var itemId 			: SItemUniqueId;

		thePlayer.GetInventory().GetItemEquippedOnSlot(EES_Quickslot1, itemId);

		if( thePlayer.GetInventory().GetItemName( itemId ) == 'acs_sword_array_item')
		{
			GetWitcherPlayer().SelectQuickslotItem( EES_RangedWeapon );
		}
	}

	function ACS_Phantom_Weapon_Manager()
	{
		if (ACS_GetItem_Iris())
		{
			if (ACS_GetWeaponMode() == 0
			|| ACS_GetWeaponMode() == 1
			|| ACS_GetWeaponMode() == 2
			)
			{
				if ((thePlayer.HasTag('igni_secondary_sword_equipped')
				|| thePlayer.HasTag('igni_secondary_sword_equipped_TAG')
				|| thePlayer.HasTag('igni_sword_equipped')
				|| thePlayer.HasTag('igni_sword_equipped_TAG')))
				{
					if( thePlayer.GetPhantomWeaponMgr().IsWeaponCharged() )
					{
						if (!ACSGetEquippedSword().IsEffectActive('special_attack_charged'))
						{
							ACSGetEquippedSword().PlayEffectSingle( 'special_attack_charged' );
						}
					}
					else
					{
						ACSGetEquippedSword().StopEffect( 'special_attack_charged' );
					}
				}
				else
				{
					ACSGetEquippedSword().StopEffect( 'special_attack_charged' );
				}
			}
			else if (ACS_GetWeaponMode() == 3
			)
			{
				if (thePlayer.HasTag('quen_sword_equipped'))
				{
					if( thePlayer.GetPhantomWeaponMgr().IsWeaponCharged() )
					{
						if (!ACSGetEquippedSword().IsEffectActive('special_attack_charged'))
						{
							ACSGetEquippedSword().PlayEffectSingle( 'special_attack_charged' );
						}
					}
					else
					{
						ACSGetEquippedSword().StopEffect( 'special_attack_charged' );
					}
				}
				else
				{
					ACSGetEquippedSword().StopEffect( 'special_attack_charged' );
				}
			}
		}

		if(ACS_GetItem_MageStaff())
		{
			if (thePlayer.GetStat( BCS_Focus ) > thePlayer.GetStatMax( BCS_Focus ) * 0
			&& thePlayer.GetStat( BCS_Stamina ) > thePlayer.GetStatMax( BCS_Stamina ) * 0)
			{
				if (!ACSGetEquippedSword().IsEffectActive('fx_staff_interrior'))
				{
					ACSGetEquippedSword().PlayEffectSingle( 'fx_staff_interrior' );
				}
			}
			else
			{
				ACSGetEquippedSword().DestroyEffect( 'fx_staff_interrior' );
				ACSGetEquippedSword().DestroyEffect( 'heavy_trail_fx' );
				ACSGetEquippedSword().DestroyEffect( 'light_trail_fx' );
			}
		}
	}

	function ACS_Armor_Scale()
	{
		ACS_Steel_Aerondight_Scale();
		ACS_Novalis_Scale();
		ACS_True_Iris_Scale();
		ACS_Zireal_Scale();
		ACS_Silver_Zireal_Scale();
		ACS_All_Black_Scale();

		ACS_Armor_Omega_Scale();
		ACS_NGP_Armor_Omega_Scale();
		ACS_Armor_Alpha_Scale();
		ACS_NGP_Armor_Alpha_Scale();
		ACS_Gloves_Scale();
		ACS_NGP_Gloves_Scale();
		ACS_Pants_Scale();
		ACS_NGP_Pants_Scale();
		ACS_Boots_Scale();
		ACS_NGP_Boots_Scale();

		ACS_WH_Armor_Scale();
		ACS_NGP_WH_Armor_Scale();
		ACS_WH_Gloves_Scale();
		ACS_NGP_WH_Gloves_Scale();
		ACS_WH_Pants_Scale();
		ACS_NGP_WH_Pants_Scale();
		ACS_WH_Boots_Scale();
		ACS_NGP_WH_Boots_Scale();

		ACS_Eredin_Armor_Scale();
		ACS_NGP_Eredin_Armor_Scale();
		ACS_Eredin_Gloves_Scale();
		ACS_NGP_Eredin_Gloves_Scale();
		ACS_Eredin_Pants_Scale();
		ACS_NGP_Eredin_Pants_Scale();
		ACS_Eredin_Boots_Scale();
		ACS_NGP_Eredin_Boots_Scale();

		ACS_Imlerith_Armor_Scale();
		ACS_NGP_Imlerith_Armor_Scale();
		ACS_Imlerith_Gloves_Scale();
		ACS_NGP_Imlerith_Gloves_Scale();
		ACS_Imlerith_Pants_Scale();
		ACS_NGP_Imlerith_Pants_Scale();
		ACS_Imlerith_Boots_Scale();
		ACS_NGP_Imlerith_Boots_Scale();

		ACS_Caranthir_Armor_Scale();
		ACS_NGP_Caranthir_Armor_Scale();
		ACS_Caranthir_Gloves_Scale();
		ACS_NGP_Caranthir_Gloves_Scale();
		ACS_Caranthir_Pants_Scale();
		ACS_NGP_Caranthir_Pants_Scale();
		ACS_Caranthir_Boots_Scale();
		ACS_NGP_Caranthir_Boots_Scale();

		if (GetWitcherPlayer().GetLevel() > 100)
		{
			return;
		}

		if (ACS_DisableItemAutoscale())
		{
			return;
		}

		ACS_Aerondight_Scale();
		ACS_Iris_Scale();
		ACS_Toussaint_Knights_Steel_Sword_Scale();
		ACS_Wolf_Set_Scale();
		ACS_Bear_Set_Scale();
		ACS_Lynx_Set_Scale();
		ACS_Gryphon_Set_Scale();
		ACS_Red_Wolf_Set_Scale();
		ACS_Viper_Set_Scale();
		ACS_Netflix_Set_Scale();
	}

	function ACS_Aerondight_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Aerondight EP2'))
		{
			item = thePlayer.inv.GetItemId('Aerondight EP2');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_silver_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_silver_dmg');
				}
			}
		}
	}

	function ACS_Steel_Aerondight_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('ACS_Steel_Aerondight'))
		{
			item = thePlayer.inv.GetItemId('ACS_Steel_Aerondight');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_silver_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_silver_dmg');
				}
			}
		}
	}

	function ACS_Iris_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Olgierd Sabre'))
		{
			item = thePlayer.inv.GetItemId('Olgierd Sabre');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_steel_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_steel_dmg');
				}
			}
		}
	}

	function ACS_True_Iris_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('ACS_True_Iris'))
		{
			item = thePlayer.inv.GetItemId('ACS_True_Iris');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_steel_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_steel_dmg');
				}
			}
		}
	}

	function ACS_Novalis_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('ACS_Novalis'))
		{
			item = thePlayer.inv.GetItemId('ACS_Novalis');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_silver_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_silver_dmg');
				}
			}
		}
	}

	function ACS_Zireal_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('ACS_Steel_Zireal_Sword'))
		{
			item = thePlayer.inv.GetItemId('ACS_Steel_Zireal_Sword');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_steel_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_steel_dmg');
				}
			}
		}
	}

	function ACS_Silver_Zireal_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('ACS_Silver_Zireal_Sword'))
		{
			item = thePlayer.inv.GetItemId('ACS_Silver_Zireal_Sword');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_silver_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_silver_dmg');
				}
			}
		}
	}

	function ACS_Toussaint_Knights_Steel_Sword_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Knights steel sword 3'))
		{
			item = thePlayer.inv.GetItemId('Knights steel sword 3');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_steel_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_steel_dmg');
				}
			}
		}
	}

	function ACS_All_Black_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('ACS_AllBlackNecrosword'))
		{
			item = thePlayer.inv.GetItemId('ACS_AllBlackNecrosword');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_steel_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_steel_dmg');
				}
			}
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function ACS_Armor_Omega_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('ACS_Armor_Omega'))
		{
			item = thePlayer.inv.GetItemId('ACS_Armor_Omega');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_armor_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_armor_armor');
				}
			}
		}
	}

	function ACS_NGP_Armor_Omega_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP_ACS_Armor_Omega'))
		{
			item = thePlayer.inv.GetItemId('NGP_ACS_Armor_Omega');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_armor_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_armor_armor');
				}
			}
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function ACS_Armor_Alpha_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('ACS_Armor_Alpha'))
		{
			item = thePlayer.inv.GetItemId('ACS_Armor_Alpha');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_armor_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_armor_armor');
				}
			}
		}
	}

	function ACS_NGP_Armor_Alpha_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP_ACS_Armor_Alpha'))
		{
			item = thePlayer.inv.GetItemId('NGP_ACS_Armor_Alpha');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_armor_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_armor_armor');
				}
			}
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function ACS_Gloves_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('ACS_Gloves'))
		{
			item = thePlayer.inv.GetItemId('ACS_Gloves');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_gloves_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_gloves_armor');
				}
			}
		}
	}

	function ACS_NGP_Gloves_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP_ACS_Gloves'))
		{
			item = thePlayer.inv.GetItemId('NGP_ACS_Gloves');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_gloves_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_gloves_armor');
				}
			}
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function ACS_Pants_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('ACS_Pants'))
		{
			item = thePlayer.inv.GetItemId('ACS_Pants');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_NGP_Pants_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP_ACS_Pants'))
		{
			item = thePlayer.inv.GetItemId('NGP_ACS_Pants');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function ACS_Boots_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('ACS_Boots'))
		{
			item = thePlayer.inv.GetItemId('ACS_Boots');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_NGP_Boots_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP_ACS_Boots'))
		{
			item = thePlayer.inv.GetItemId('NGP_ACS_Boots');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function ACS_WH_Armor_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('ACS_WH_Armor'))
		{
			item = thePlayer.inv.GetItemId('ACS_WH_Armor');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_armor_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_armor_armor');
				}
			}
		}
	}

	function ACS_NGP_WH_Armor_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP_ACS_WH_Armor'))
		{
			item = thePlayer.inv.GetItemId('NGP_ACS_WH_Armor');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_armor_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_armor_armor');
				}
			}
		}
	}

	function ACS_WH_Gloves_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('ACS_WH_Gloves'))
		{
			item = thePlayer.inv.GetItemId('ACS_WH_Gloves');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_gloves_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_gloves_armor');
				}
			}
		}
	}

	function ACS_NGP_WH_Gloves_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP_ACS_WH_Gloves'))
		{
			item = thePlayer.inv.GetItemId('NGP_ACS_WH_Gloves');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_gloves_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_gloves_armor');
				}
			}
		}
	}

	function ACS_WH_Pants_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('ACS_WH_Pants'))
		{
			item = thePlayer.inv.GetItemId('ACS_WH_Pants');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_NGP_WH_Pants_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP_ACS_WH_Pants'))
		{
			item = thePlayer.inv.GetItemId('NGP_ACS_WH_Pants');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_WH_Boots_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('ACS_WH_Boots'))
		{
			item = thePlayer.inv.GetItemId('ACS_WH_Boots');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_NGP_WH_Boots_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP_ACS_WH_Boots'))
		{
			item = thePlayer.inv.GetItemId('NGP_ACS_WH_Boots');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function ACS_Eredin_Armor_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('ACS_Eredin_Armor'))
		{
			item = thePlayer.inv.GetItemId('ACS_Eredin_Armor');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_armor_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_armor_armor');
				}
			}
		}
	}

	function ACS_NGP_Eredin_Armor_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP_ACS_Eredin_Armor'))
		{
			item = thePlayer.inv.GetItemId('NGP_ACS_Eredin_Armor');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_armor_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_armor_armor');
				}
			}
		}
	}

	function ACS_Eredin_Gloves_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('ACS_Eredin_Gloves'))
		{
			item = thePlayer.inv.GetItemId('ACS_Eredin_Gloves');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_gloves_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_gloves_armor');
				}
			}
		}
	}

	function ACS_NGP_Eredin_Gloves_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP_ACS_Eredin_Gloves'))
		{
			item = thePlayer.inv.GetItemId('NGP_ACS_Eredin_Gloves');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_gloves_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_gloves_armor');
				}
			}
		}
	}

	function ACS_Eredin_Pants_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('ACS_Eredin_Pants'))
		{
			item = thePlayer.inv.GetItemId('ACS_Eredin_Pants');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_NGP_Eredin_Pants_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP_ACS_Eredin_Pants'))
		{
			item = thePlayer.inv.GetItemId('NGP_ACS_Eredin_Pants');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_Eredin_Boots_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('ACS_Eredin_Boots'))
		{
			item = thePlayer.inv.GetItemId('ACS_Eredin_Boots');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_NGP_Eredin_Boots_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP_ACS_Eredin_Boots'))
		{
			item = thePlayer.inv.GetItemId('NGP_ACS_Eredin_Boots');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function ACS_Imlerith_Armor_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('ACS_Imlerith_Armor'))
		{
			item = thePlayer.inv.GetItemId('ACS_Imlerith_Armor');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_armor_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_armor_armor');
				}
			}
		}
	}

	function ACS_NGP_Imlerith_Armor_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP_ACS_Imlerith_Armor'))
		{
			item = thePlayer.inv.GetItemId('NGP_ACS_Imlerith_Armor');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_armor_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_armor_armor');
				}
			}
		}
	}

	function ACS_Imlerith_Gloves_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('ACS_Imlerith_Gloves'))
		{
			item = thePlayer.inv.GetItemId('ACS_Imlerith_Gloves');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_gloves_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_gloves_armor');
				}
			}
		}
	}

	function ACS_NGP_Imlerith_Gloves_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP_ACS_Imlerith_Gloves'))
		{
			item = thePlayer.inv.GetItemId('NGP_ACS_Imlerith_Gloves');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_gloves_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_gloves_armor');
				}
			}
		}
	}

	function ACS_Imlerith_Pants_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('ACS_Imlerith_Pants'))
		{
			item = thePlayer.inv.GetItemId('ACS_Imlerith_Pants');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_NGP_Imlerith_Pants_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP_ACS_Imlerith_Pants'))
		{
			item = thePlayer.inv.GetItemId('NGP_ACS_Imlerith_Pants');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_Imlerith_Boots_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('ACS_Imlerith_Boots'))
		{
			item = thePlayer.inv.GetItemId('ACS_Imlerith_Boots');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_NGP_Imlerith_Boots_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP_ACS_Imlerith_Boots'))
		{
			item = thePlayer.inv.GetItemId('NGP_ACS_Imlerith_Boots');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function ACS_Caranthir_Armor_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('ACS_Caranthir_Armor'))
		{
			item = thePlayer.inv.GetItemId('ACS_Caranthir_Armor');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_armor_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_armor_armor');
				}
			}
		}
	}

	function ACS_NGP_Caranthir_Armor_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP_ACS_Caranthir_Armor'))
		{
			item = thePlayer.inv.GetItemId('NGP_ACS_Caranthir_Armor');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_armor_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_armor_armor');
				}
			}
		}
	}

	function ACS_Caranthir_Gloves_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('ACS_Caranthir_Gloves'))
		{
			item = thePlayer.inv.GetItemId('ACS_Caranthir_Gloves');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_gloves_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_gloves_armor');
				}
			}
		}
	}

	function ACS_NGP_Caranthir_Gloves_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP_ACS_Caranthir_Gloves'))
		{
			item = thePlayer.inv.GetItemId('NGP_ACS_Caranthir_Gloves');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_gloves_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_gloves_armor');
				}
			}
		}
	}

	function ACS_Caranthir_Pants_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('ACS_Caranthir_Pants'))
		{
			item = thePlayer.inv.GetItemId('ACS_Caranthir_Pants');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_NGP_Caranthir_Pants_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP_ACS_Caranthir_Pants'))
		{
			item = thePlayer.inv.GetItemId('NGP_ACS_Caranthir_Pants');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_Caranthir_Boots_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('ACS_Caranthir_Boots'))
		{
			item = thePlayer.inv.GetItemId('ACS_Caranthir_Boots');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_NGP_Caranthir_Boots_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP_ACS_Caranthir_Boots'))
		{
			item = thePlayer.inv.GetItemId('NGP_ACS_Caranthir_Boots');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}
	

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	function ACS_Wolf_Set_Scale()
	{
		ACS_Wolf_Armor_Scale();
		ACS_NGP_Wolf_Armor_Scale();
		ACS_Wolf_Gloves_Scale();
		ACS_NGP_Wolf_Gloves_Scale();
		ACS_Wolf_Pants_Scale();
		ACS_NGP_Wolf_Pants_Scale();
		ACS_Wolf_Boots_Scale();
		ACS_NGP_Wolf_Boots_Scale();
		ACS_Wolf_Steel_Sword_Scale();
		ACS_NGP_Wolf_Steel_Sword_Scale();
		ACS_Wolf_Silver_Sword_Scale();
		ACS_NGP_Wolf_Silver_Sword_Scale();
	}

	function ACS_Wolf_Armor_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Wolf Armor 4'))
		{
			item = thePlayer.inv.GetItemId('Wolf Armor 4');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_armor_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_armor_armor');
				}
			}
		}
	}

	function ACS_NGP_Wolf_Armor_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Wolf Armor 4'))
		{
			item = thePlayer.inv.GetItemId('NGP Wolf Armor 4');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_armor_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_armor_armor');
				}
			}
		}
	}
	
	function ACS_Wolf_Gloves_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Wolf Gloves 5'))
		{
			item = thePlayer.inv.GetItemId('Wolf Gloves 5');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_gloves_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_gloves_armor');
				}
			}
		}
	}

	function ACS_NGP_Wolf_Gloves_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Wolf Gloves 5'))
		{
			item = thePlayer.inv.GetItemId('NGP Wolf Gloves 5');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_gloves_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_gloves_armor');
				}
			}
		}
	}

	function ACS_Wolf_Pants_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Wolf Pants 5'))
		{
			item = thePlayer.inv.GetItemId('Wolf Pants 5');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_NGP_Wolf_Pants_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Wolf Pants 5'))
		{
			item = thePlayer.inv.GetItemId('NGP Wolf Pants 5');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_Wolf_Boots_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Wolf Boots 5'))
		{
			item = thePlayer.inv.GetItemId('Wolf Boots 5');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_NGP_Wolf_Boots_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Wolf Boots 5'))
		{
			item = thePlayer.inv.GetItemId('NGP Wolf Boots 5');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_Wolf_Steel_Sword_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Wolf School steel sword 3'))
		{
			item = thePlayer.inv.GetItemId('Wolf School steel sword 3');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_steel_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_steel_dmg');
				}
			}
		}
	}
	
	function ACS_NGP_Wolf_Steel_Sword_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Wolf School steel sword 3'))
		{
			item = thePlayer.inv.GetItemId('NGP Wolf School steel sword 3');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_steel_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_steel_dmg');
				}
			}
		}
	}

	function ACS_Wolf_Silver_Sword_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Wolf School silver sword 3'))
		{
			item = thePlayer.inv.GetItemId('Wolf School silver sword 3');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_silver_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_silver_dmg');
				}
			}
		}
	}
	
	function ACS_NGP_Wolf_Silver_Sword_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Wolf School silver sword 3'))
		{
			item = thePlayer.inv.GetItemId('NGP Wolf School silver sword 3');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_silver_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_silver_dmg');
				}
			}
		}
	}

	function ACS_Bear_Set_Scale()
	{
		ACS_Bear_Armor_Scale();
		ACS_NGP_Bear_Armor_Scale();
		ACS_Bear_Gloves_Scale();
		ACS_NGP_Bear_Gloves_Scale();
		ACS_Bear_Pants_Scale();
		ACS_NGP_Bear_Pants_Scale();
		ACS_Bear_Boots_Scale();
		ACS_NGP_Bear_Boots_Scale();
		ACS_Bear_Steel_Sword_Scale();
		ACS_NGP_Bear_Steel_Sword_Scale();
		ACS_Bear_Silver_Sword_Scale();
		ACS_NGP_Bear_Silver_Sword_Scale();
	}
	
	function ACS_Bear_Armor_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Bear Armor 4'))
		{
			item = thePlayer.inv.GetItemId('Bear Armor 4');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_armor_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_armor_armor');
				}
			}
		}
	}

	function ACS_NGP_Bear_Armor_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Bear Armor 4'))
		{
			item = thePlayer.inv.GetItemId('NGP Bear Armor 4');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_armor_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_armor_armor');
				}
			}
		}
	}
	
	function ACS_Bear_Gloves_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Bear Gloves 5'))
		{
			item = thePlayer.inv.GetItemId('Bear Gloves 5');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_gloves_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_gloves_armor');
				}
			}
		}
	}

	function ACS_NGP_Bear_Gloves_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Bear Gloves 5'))
		{
			item = thePlayer.inv.GetItemId('NGP Bear Gloves 5');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_gloves_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_gloves_armor');
				}
			}
		}
	}

	function ACS_Bear_Pants_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Bear Pants 5'))
		{
			item = thePlayer.inv.GetItemId('Bear Pants 5');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_NGP_Bear_Pants_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Bear Pants 5'))
		{
			item = thePlayer.inv.GetItemId('NGP Bear Pants 5');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_Bear_Boots_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Bear Boots 5'))
		{
			item = thePlayer.inv.GetItemId('Bear Boots 5');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_NGP_Bear_Boots_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Bear Boots 5'))
		{
			item = thePlayer.inv.GetItemId('NGP Bear Boots 5');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}
	
	function ACS_Bear_Steel_Sword_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Bear School steel sword 3'))
		{
			item = thePlayer.inv.GetItemId('Bear School steel sword 3');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_steel_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_steel_dmg');
				}
			}
		}
	}
	
	function ACS_NGP_Bear_Steel_Sword_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Bear School steel sword 3'))
		{
			item = thePlayer.inv.GetItemId('NGP Bear School steel sword 3');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_steel_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_steel_dmg');
				}
			}
		}
	}

	function ACS_Bear_Silver_Sword_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Bear School silver sword 3'))
		{
			item = thePlayer.inv.GetItemId('Bear School silver sword 3');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_silver_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_silver_dmg');
				}
			}
		}
	}
	
	function ACS_NGP_Bear_Silver_Sword_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Bear School silver sword 3'))
		{
			item = thePlayer.inv.GetItemId('NGP Bear School silver sword 3');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_silver_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_silver_dmg');
				}
			}
		}
	}

	function ACS_Lynx_Set_Scale()
	{
		ACS_Lynx_Armor_Scale();
		ACS_NGP_Lynx_Armor_Scale();
		ACS_Lynx_Gloves_Scale();
		ACS_NGP_Lynx_Gloves_Scale();
		ACS_Lynx_Pants_Scale();
		ACS_NGP_Lynx_Pants_Scale();
		ACS_Lynx_Boots_Scale();
		ACS_NGP_Lynx_Boots_Scale();
		ACS_Lynx_Steel_Sword_Scale();
		ACS_NGP_Lynx_Steel_Sword_Scale();
		ACS_Lynx_Silver_Sword_Scale();
		ACS_NGP_Lynx_Silver_Sword_Scale();
	}
	
	function ACS_Lynx_Armor_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Lynx Armor 4'))
		{
			item = thePlayer.inv.GetItemId('Lynx Armor 4');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_armor_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_armor_armor');
				}
			}
		}
	}

	function ACS_NGP_Lynx_Armor_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Lynx Armor 4'))
		{
			item = thePlayer.inv.GetItemId('NGP Lynx Armor 4');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_armor_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_armor_armor');
				}
			}
		}
	}
	
	function ACS_Lynx_Gloves_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Lynx Gloves 5'))
		{
			item = thePlayer.inv.GetItemId('Lynx Gloves 5');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_gloves_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_gloves_armor');
				}
			}
		}
	}

	function ACS_NGP_Lynx_Gloves_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Lynx Gloves 5'))
		{
			item = thePlayer.inv.GetItemId('NGP Lynx Gloves 5');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_gloves_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_gloves_armor');
				}
			}
		}
	}

	function ACS_Lynx_Pants_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Lynx Pants 5'))
		{
			item = thePlayer.inv.GetItemId('Lynx Pants 5');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_NGP_Lynx_Pants_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Lynx Pants 5'))
		{
			item = thePlayer.inv.GetItemId('NGP Lynx Pants 5');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_Lynx_Boots_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Lynx Boots 5'))
		{
			item = thePlayer.inv.GetItemId('Lynx Boots 5');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_NGP_Lynx_Boots_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Lynx Boots 5'))
		{
			item = thePlayer.inv.GetItemId('NGP Lynx Boots 5');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}
	
	function ACS_Lynx_Steel_Sword_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Lynx School steel sword 3'))
		{
			item = thePlayer.inv.GetItemId('Lynx School steel sword 3');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_steel_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_steel_dmg');
				}
			}
		}
	}
	
	function ACS_NGP_Lynx_Steel_Sword_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Lynx School steel sword 3'))
		{
			item = thePlayer.inv.GetItemId('NGP Lynx School steel sword 3');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_steel_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_steel_dmg');
				}
			}
		}
	}

	function ACS_Lynx_Silver_Sword_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Lynx School silver sword 3'))
		{
			item = thePlayer.inv.GetItemId('Lynx School silver sword 3');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_silver_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_silver_dmg');
				}
			}
		}
	}
	
	function ACS_NGP_Lynx_Silver_Sword_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Lynx School silver sword 3'))
		{
			item = thePlayer.inv.GetItemId('NGP Lynx School silver sword 3');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_silver_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_silver_dmg');
				}
			}
		}
	}

	function ACS_Gryphon_Set_Scale()
	{
		ACS_Gryphon_Armor_Scale();
		ACS_NGP_Gryphon_Armor_Scale();
		ACS_Gryphon_Gloves_Scale();
		ACS_NGP_Gryphon_Gloves_Scale();
		ACS_Gryphon_Pants_Scale();
		ACS_NGP_Gryphon_Pants_Scale();
		ACS_Gryphon_Boots_Scale();
		ACS_NGP_Gryphon_Boots_Scale();
		ACS_Gryphon_Steel_Sword_Scale();
		ACS_NGP_Gryphon_Steel_Sword_Scale();
		ACS_Gryphon_Silver_Sword_Scale();
		ACS_NGP_Gryphon_Silver_Sword_Scale();
	}
	
	function ACS_Gryphon_Armor_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Gryphon Armor 4'))
		{
			item = thePlayer.inv.GetItemId('Gryphon Armor 4');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_armor_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_armor_armor');
				}
			}
		}
	}

	function ACS_NGP_Gryphon_Armor_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Gryphon Armor 4'))
		{
			item = thePlayer.inv.GetItemId('NGP Gryphon Armor 4');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_armor_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_armor_armor');
				}
			}
		}
	}
	
	function ACS_Gryphon_Gloves_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Gryphon Gloves 5'))
		{
			item = thePlayer.inv.GetItemId('Gryphon Gloves 5');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_gloves_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_gloves_armor');
				}
			}
		}
	}

	function ACS_NGP_Gryphon_Gloves_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Gryphon Gloves 5'))
		{
			item = thePlayer.inv.GetItemId('NGP Gryphon Gloves 5');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_gloves_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_gloves_armor');
				}
			}
		}
	}

	function ACS_Gryphon_Pants_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Gryphon Pants 5'))
		{
			item = thePlayer.inv.GetItemId('Gryphon Pants 5');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_NGP_Gryphon_Pants_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Gryphon Pants 5'))
		{
			item = thePlayer.inv.GetItemId('NGP Gryphon Pants 5');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_Gryphon_Boots_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Gryphon Boots 5'))
		{
			item = thePlayer.inv.GetItemId('Gryphon Boots 5');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_NGP_Gryphon_Boots_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Gryphon Boots 5'))
		{
			item = thePlayer.inv.GetItemId('NGP Gryphon Boots 5');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}
	
	function ACS_Gryphon_Steel_Sword_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Gryphon School steel sword 3'))
		{
			item = thePlayer.inv.GetItemId('Gryphon School steel sword 3');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_steel_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_steel_dmg');
				}
			}
		}
	}
	
	function ACS_NGP_Gryphon_Steel_Sword_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Gryphon School steel sword 3'))
		{
			item = thePlayer.inv.GetItemId('NGP Gryphon School steel sword 3');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_steel_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_steel_dmg');
				}
			}
		}
	}

	function ACS_Gryphon_Silver_Sword_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Gryphon School silver sword 3'))
		{
			item = thePlayer.inv.GetItemId('Gryphon School silver sword 3');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_silver_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_silver_dmg');
				}
			}
		}
	}
	
	function ACS_NGP_Gryphon_Silver_Sword_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Gryphon School silver sword 3'))
		{
			item = thePlayer.inv.GetItemId('NGP Gryphon School silver sword 3');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_silver_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_silver_dmg');
				}
			}
		}
	}

	function ACS_Red_Wolf_Set_Scale()
	{
		ACS_Red_Wolf_Armor_Scale();
		ACS_NGP_Red_Wolf_Armor_Scale();
		ACS_Red_Wolf_Gloves_Scale();
		ACS_NGP_Red_Wolf_Gloves_Scale();
		ACS_Red_Wolf_Pants_Scale();
		ACS_NGP_Red_Wolf_Pants_Scale();
		ACS_Red_Wolf_Boots_Scale();
		ACS_NGP_Red_Wolf_Boots_Scale();
		ACS_Red_Wolf_Steel_Sword_Scale();
		ACS_NGP_Red_Wolf_Steel_Sword_Scale();
		ACS_Red_Wolf_Silver_Sword_Scale();
		ACS_NGP_Red_Wolf_Silver_Sword_Scale();
	}
	
	function ACS_Red_Wolf_Armor_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Red Wolf Armor 4'))
		{
			item = thePlayer.inv.GetItemId('Red Wolf Armor 4');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_armor_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_armor_armor');
				}
			}
		}
	}

	function ACS_NGP_Red_Wolf_Armor_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Red Wolf Armor 4'))
		{
			item = thePlayer.inv.GetItemId('NGP Red Wolf Armor 4');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_armor_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_armor_armor');
				}
			}
		}
	}
	
	function ACS_Red_Wolf_Gloves_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Red Wolf Gloves 5'))
		{
			item = thePlayer.inv.GetItemId('Red Wolf Gloves 5');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_gloves_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_gloves_armor');
				}
			}
		}
	}

	function ACS_NGP_Red_Wolf_Gloves_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Red Wolf Gloves 5'))
		{
			item = thePlayer.inv.GetItemId('NGP Red Wolf Gloves 5');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_gloves_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_gloves_armor');
				}
			}
		}
	}

	function ACS_Red_Wolf_Pants_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Red Wolf Pants 5'))
		{
			item = thePlayer.inv.GetItemId('Red Wolf Pants 5');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_NGP_Red_Wolf_Pants_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Red Wolf Pants 5'))
		{
			item = thePlayer.inv.GetItemId('NGP Red Wolf Pants 5');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_Red_Wolf_Boots_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Red Wolf Boots 5'))
		{
			item = thePlayer.inv.GetItemId('Red Wolf Boots 5');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_NGP_Red_Wolf_Boots_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Red Wolf Boots 5'))
		{
			item = thePlayer.inv.GetItemId('NGP Red Wolf Boots 5');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}
	
	function ACS_Red_Wolf_Steel_Sword_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Red Wolf School steel sword 3'))
		{
			item = thePlayer.inv.GetItemId('Red Wolf School steel sword 3');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_steel_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_steel_dmg');
				}
			}
		}
	}
	
	function ACS_NGP_Red_Wolf_Steel_Sword_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Red Wolf School steel sword 3'))
		{
			item = thePlayer.inv.GetItemId('NGP Red Wolf School steel sword 3');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_steel_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_steel_dmg');
				}
			}
		}
	}

	function ACS_Red_Wolf_Silver_Sword_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Red Wolf School silver sword 3'))
		{
			item = thePlayer.inv.GetItemId('Red Wolf School silver sword 3');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_silver_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_silver_dmg');
				}
			}
		}
	}
	
	function ACS_NGP_Red_Wolf_Silver_Sword_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Red Wolf School silver sword 3'))
		{
			item = thePlayer.inv.GetItemId('NGP Red Wolf School silver sword 3');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_silver_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_silver_dmg');
				}
			}
		}
	}

	function ACS_Viper_Set_Scale()
	{
		ACS_Viper_Armor_Scale();
		ACS_NGP_Viper_Armor_Scale();
		ACS_Viper_Gloves_Scale();
		ACS_NGP_Viper_Gloves_Scale();
		ACS_Viper_Pants_Scale();
		ACS_NGP_Viper_Pants_Scale();
		ACS_Viper_Boots_Scale();
		ACS_NGP_Viper_Boots_Scale();
		ACS_Viper_Steel_Sword_Scale();
		ACS_NGP_Viper_Steel_Sword_Scale();
		ACS_Viper_Silver_Sword_Scale();
		ACS_NGP_Viper_Silver_Sword_Scale();
	}
	
	function ACS_Viper_Armor_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('EP1 Witcher Armor'))
		{
			item = thePlayer.inv.GetItemId('EP1 Witcher Armor');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_armor_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_armor_armor');
				}
			}
		}
	}

	function ACS_NGP_Viper_Armor_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP EP1 Witcher Armor'))
		{
			item = thePlayer.inv.GetItemId('NGP EP1 Witcher Armor');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_armor_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_armor_armor');
				}
			}
		}
	}
	
	function ACS_Viper_Gloves_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('EP1 Witcher Gloves'))
		{
			item = thePlayer.inv.GetItemId('EP1 Witcher Gloves');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_gloves_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_gloves_armor');
				}
			}
		}
	}

	function ACS_NGP_Viper_Gloves_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP EP1 Witcher Gloves'))
		{
			item = thePlayer.inv.GetItemId('NGP EP1 Witcher Gloves');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_gloves_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_gloves_armor');
				}
			}
		}
	}

	function ACS_Viper_Pants_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('EP1 Witcher Pants'))
		{
			item = thePlayer.inv.GetItemId('EP1 Witcher Pants');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_NGP_Viper_Pants_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP EP1 Witcher Pants'))
		{
			item = thePlayer.inv.GetItemId('NGP EP1 Witcher Pants');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_Viper_Boots_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('EP1 Witcher Boots'))
		{
			item = thePlayer.inv.GetItemId('EP1 Witcher Boots');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_NGP_Viper_Boots_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP EP1 Witcher Boots'))
		{
			item = thePlayer.inv.GetItemId('NGP EP1 Witcher Boots');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}
	
	function ACS_Viper_Steel_Sword_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('EP1 Viper School steel sword'))
		{
			item = thePlayer.inv.GetItemId('EP1 Viper School steel sword');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_steel_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_steel_dmg');
				}
			}
		}
	}
	
	function ACS_NGP_Viper_Steel_Sword_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP EP1 Viper School steel sword'))
		{
			item = thePlayer.inv.GetItemId('NGP EP1 Viper School steel sword');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_steel_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_steel_dmg');
				}
			}
		}
	}

	function ACS_Viper_Silver_Sword_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('EP1 Viper School silver sword'))
		{
			item = thePlayer.inv.GetItemId('EP1 Viper School silver sword');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_silver_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_silver_dmg');
				}
			}
		}
	}
	
	function ACS_NGP_Viper_Silver_Sword_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP EP1 Viper School silver sword'))
		{
			item = thePlayer.inv.GetItemId('NGP EP1 Viper School silver sword');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_silver_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_silver_dmg');
				}
			}
		}
	}

	function ACS_Netflix_Set_Scale()
	{
		ACS_Netflix_Armor_Scale();
		ACS_NGP_Netflix_Armor_Scale();
		ACS_Netflix_Gloves_Scale();
		ACS_NGP_Netflix_Gloves_Scale();
		ACS_Netflix_Pants_Scale();
		ACS_NGP_Netflix_Pants_Scale();
		ACS_Netflix_Boots_Scale();
		ACS_NGP_Netflix_Boots_Scale();
		ACS_Netflix_Steel_Sword_Scale();
		ACS_NGP_Netflix_Steel_Sword_Scale();
		ACS_Netflix_Silver_Sword_Scale();
		ACS_NGP_Netflix_Silver_Sword_Scale();
	}
	
	function ACS_Netflix_Armor_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Netflix Armor 2'))
		{
			item = thePlayer.inv.GetItemId('Netflix Armor 2');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_armor_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_armor_armor');
				}
			}
		}
	}

	function ACS_NGP_Netflix_Armor_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Netflix Armor 2'))
		{
			item = thePlayer.inv.GetItemId('NGP Netflix Armor 2');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_armor_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_armor_armor');
				}
			}
		}
	}
	
	function ACS_Netflix_Gloves_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Netflix Gloves 2'))
		{
			item = thePlayer.inv.GetItemId('Netflix Gloves 2');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_gloves_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_gloves_armor');
				}
			}
		}
	}

	function ACS_NGP_Netflix_Gloves_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Netflix Gloves 2'))
		{
			item = thePlayer.inv.GetItemId('NGP Netflix Gloves 2');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_gloves_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_gloves_armor');
				}
			}
		}
	}

	function ACS_Netflix_Pants_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Netflix Pants 2'))
		{
			item = thePlayer.inv.GetItemId('Netflix Pants 2');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_NGP_Netflix_Pants_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Netflix Pants 2'))
		{
			item = thePlayer.inv.GetItemId('NGP Netflix Pants 2');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_Netflix_Boots_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Netflix Boots 2'))
		{
			item = thePlayer.inv.GetItemId('Netflix Boots 2');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_NGP_Netflix_Boots_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Netflix Boots 2'))
		{
			item = thePlayer.inv.GetItemId('NGP Netflix Boots 2');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}
	
	function ACS_Netflix_Steel_Sword_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Netflix steel sword 2'))
		{
			item = thePlayer.inv.GetItemId('Netflix steel sword 2');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_steel_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_steel_dmg');
				}
			}
		}
	}
	
	function ACS_NGP_Netflix_Steel_Sword_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Netflix steel sword 2'))
		{
			item = thePlayer.inv.GetItemId('NGP Netflix steel sword 2');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_steel_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_steel_dmg');
				}
			}
		}
	}

	function ACS_Netflix_Silver_Sword_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Netflix silver sword 2'))
		{
			item = thePlayer.inv.GetItemId('Netflix silver sword 2');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_silver_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_silver_dmg');
				}
			}
		}
	}
	
	function ACS_NGP_Netflix_Silver_Sword_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP Netflix silver sword 2'))
		{
			item = thePlayer.inv.GetItemId('NGP Netflix silver sword 2');

			if (!GetWitcherPlayer().IsItemEquipped( item ))
			{
				return;
			}

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_silver_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_silver_dmg');
				}
			}
		}
	}

	function removeEffectsFromPlayer()
	{
		if (!ACS_PlayerEffects_Enabled())
		{
			thePlayer.DestroyEffect('drain_energy_caretaker_shovel');
			thePlayer.DestroyEffect('mutation_10');
			thePlayer.DestroyEffect('runeword_10_stamina');
			thePlayer.DestroyEffect('runeword_20_adrenaline');
			thePlayer.DestroyEffect('runeword_4');
			thePlayer.DestroyEffect('mutation_7_baff');
			thePlayer.DestroyEffect('use_potion');
			thePlayer.DestroyEffect('mutation_7_adrenaline_burst');
			thePlayer.DestroyEffect('mutation_7_adrenaline_drop');
			thePlayer.DestroyEffect('mutation_10_euphoria');
			thePlayer.DestroyEffect('mutation_1_aard_power');
			thePlayer.DestroyEffect('mutation_6_power');
			thePlayer.DestroyEffect('mutation_7_power');
			thePlayer.DestroyEffect('mutation_7_less_power');
			thePlayer.DestroyEffect('mutation_1_igni_power');
			thePlayer.DestroyEffect('mutation_1_yrden_power');
			thePlayer.DestroyEffect('mutation_1_quen_power');
			thePlayer.DestroyEffect('mutation_5');
			thePlayer.DestroyEffect('mutation_7_debaff');
			thePlayer.DestroyEffect('mutation_5_stage_01');
			thePlayer.DestroyEffect('mutation_5_stage_02');
			thePlayer.DestroyEffect('mutation_5_stage_03');
			thePlayer.DestroyEffect('mutation_energy');
			thePlayer.DestroyEffect('mutation_10_energy');
			thePlayer.DestroyEffect('runeword_8');
		}
		else
		{
			return;
		}
	}

	var last_idle_action_time : float;

	function ACS_can_play_idle_action(): bool 
	{
		return theGame.GetEngineTimeAsSeconds() - last_idle_action_time > 1;
	}

	function ACS_refresh_idle_action_cooldown() 
	{
		last_idle_action_time = theGame.GetEngineTimeAsSeconds();
	}

	function Enemy_Idle_Action()
	{
		if (ACS_can_play_idle_action())
		{
			ACS_refresh_idle_action_cooldown();

			GetACSHostileToAllIdleAction();

			GetACSFogAssassinIdleAction();

			GetACSSvalblodIdleAction();

			GetACSSvalblodBearIdleAction();

			GetACSCultistBossIdleAction();

			GetACSCultistIdleAction();

			GetACSMegaWraithIdleAction();

			GetACSInfectedPrimeIdleAction();

			GetACSInfectedSpawnIdleAction();

			GetACSNecrofiendIdleAction();

			GetACSNecrofiendSpawnsIdleAction();

			GetACSShadesHunterIdleAction();

			GetACSShadesRogueIdleAction();

			GetACSShadesRogueEnemiesIdleAction();

			GetACSShadowPixieIdleAction();

			GetACSPlumardIdleAction();

			GetACSMaerolornIdleAction();

			GetACSHellhoundIdleAction();

			GetACSDaoIdleAction();

			GetACSElderbloodAssassinIdleAction();

			GetACSWeaponizedRabbitIdleAction();

			GetACSKnockerIdleAction();

			GetACSNekuratIdleAction();
		}
		
		XenoSwitch();

		Fluffy_Idle_Action();
	}

	var last_fluffy_idle_action_time : float;

	function ACS_can_play_fluffy_idle_action(): bool 
	{
		return theGame.GetEngineTimeAsSeconds() - last_fluffy_idle_action_time > 3;
	}

	function ACS_refresh_fluffy_idle_action_cooldown() 
	{
		last_fluffy_idle_action_time = theGame.GetEngineTimeAsSeconds();
	}

	function Fluffy_Idle_Action()
	{
		if (ACS_can_play_fluffy_idle_action())
		{
			ACS_refresh_fluffy_idle_action_cooldown();

			GetACSFluffyIdleAction();
		}
	}

	private var magicstepalt : bool;
	default magicstepalt = true;

	public timer function ACS_Magic_Step_Timer ( dt : float, id : int)
	{
		if (magicstepalt)
		{
			if (GetWitcherPlayer().IsAnyQuenActive())
			{
				thePlayer.DestroyEffect('vampire_magic_step_r');

				thePlayer.PlayEffectSingle('odim_magic_step_r');
				thePlayer.StopEffect('odim_magic_step_r');
			}
			else
			{
				thePlayer.DestroyEffect('odim_magic_step_r');

				thePlayer.PlayEffectSingle('vampire_magic_step_r');
				thePlayer.StopEffect('vampire_magic_step_r');
			}

			magicstepalt = false;
		}
		else
		{
			if (GetWitcherPlayer().IsAnyQuenActive())
			{
				thePlayer.DestroyEffect('vampire_magic_step_l');

				thePlayer.PlayEffectSingle('odim_magic_step_l');
				thePlayer.StopEffect('odim_magic_step_l');
			}
			else
			{
				thePlayer.DestroyEffect('odim_magic_step_l');

				thePlayer.PlayEffectSingle('vampire_magic_step_l');
				thePlayer.StopEffect('vampire_magic_step_l');
			}

			magicstepalt = true;
		}
	} 

	public timer function ACS_RedBladeProjectile_1 ( dt : float, id : int)
	{
		ACS_RedBladeProjectileActual();
	}

	public timer function ACS_RedBladeProjectile_2 ( dt : float, id : int)
	{
		ACS_RedBladeProjectileActual();
	}

	public timer function ACS_RedBladeProjectile_3 ( dt : float, id : int)
	{
		ACS_RedBladeProjectileActual();
	}
	
	function RedBladeProjectileSingle()
	{
		if (ACS_Armor_Equipped_Check())
		{
			RemoveTimer('ACS_RedBladeProjectile_1');
			RemoveTimer('ACS_RedBladeProjectile_2');
			RemoveTimer('ACS_RedBladeProjectile_3');
			AddTimer('ACS_RedBladeProjectile_1', 0.75, false);
		}
	}

	function RedBladeProjectileTriple()
	{
		if (ACS_Armor_Equipped_Check())
		{
			RemoveTimer('ACS_RedBladeProjectile_1');
			RemoveTimer('ACS_RedBladeProjectile_2');
			RemoveTimer('ACS_RedBladeProjectile_3');
			AddTimer('ACS_RedBladeProjectile_1', 0.75, false);
			AddTimer('ACS_RedBladeProjectile_2', 0.875, false);
			AddTimer('ACS_RedBladeProjectile_3', 1, false);
		}
	}

	function NPC_Stay_Away()
	{
		var actor							: CActor; 
		var actors		    				: array<CActor>;
		var i								: int;
		var npc								: CNewNPC;
		var movementAdjustorNPC				: CMovementAdjustor;
		var ticketNPC						: SMovementAdjustmentRequestTicket;
		var voiceTagName 					: name;
		var voiceTagStr						: string;
		var appearanceName 					: name;
		var appearanceStr					: string;
		var npcAnimatedComponent 			: CAnimatedComponent;
		var l_aiTree						: CAIPlayAnimationSlotAction;

		if (thePlayer.IsInCombat()
		|| thePlayer.IsThreatened()
		|| theGame.IsDialogOrCutscenePlaying() 
		|| GetWitcherPlayer().IsInNonGameplayCutscene() 
		|| GetWitcherPlayer().IsInGameplayScene()
		|| theGame.IsCurrentlyPlayingNonGameplayScene()
		|| theGame.IsFading()
		|| theGame.IsBlackscreen()
		|| theGame.IsPaused()
		)
		{
			return;
		}

		//if (ACS_can_push_npc())
		{
			//ACS_refresh_npc_push_cooldown();

			actors.Clear();

			actors = thePlayer.GetNPCsAndPlayersInRange( 2, 10, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors);

			if( actors.Size() > 0 )
			{
				for( i = 0; i < actors.Size(); i += 1 )
				{
					npc = (CNewNPC)actors[i];

					if (((CNewNPC)npc).GetNPCType() != ENGT_Quest)
					{
						npcAnimatedComponent = (CAnimatedComponent)npc.GetComponentByClassName( 'CAnimatedComponent' );

						voiceTagName =  npc.GetVoicetag();
						voiceTagStr = NameToString( voiceTagName );
						
						appearanceName =  npc.GetAppearance();
						appearanceStr = NameToString( appearanceName );

						movementAdjustorNPC = npc.GetMovingAgentComponent().GetMovementAdjustor();

						ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_ACS_Armor_Rotate');
						movementAdjustorNPC.CancelByName( 'ACS_NPC_ACS_Armor_Rotate' );
						movementAdjustorNPC.CancelAll();

						ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_ACS_Armor_Rotate' );
						movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.25 );
						movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 500000 );

						targetDistance = VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) ;
						
						l_aiTree = new CAIPlayAnimationSlotAction in npc;
						l_aiTree.OnCreated();
						
						l_aiTree.slotName = 'NPC_ANIM_SLOT';

						if (npc.IsUsingVehicle()) 
						{
							npc.SignalGameplayEventParamInt( 'RidingManagerDismountHorse', DT_shakeOff | DT_fromScript);
						}
						else
						{
							if (npc.IsMan()
							|| npc.IsWoman()
							|| npc.GetMovingAgentComponent().GetName() == "dwarf_base"
							)
							{
								movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );

								//if (ACS_can_push_npc())
								{
									//ACS_refresh_npc_push_cooldown();

									if (
										(npc.GetInventory().IsIdValid( npc.GetInventory().GetItemFromSlot('r_weapon') )
										|| npc.GetInventory().IsIdValid( npc.GetInventory().GetItemFromSlot('l_weapon') ))
										&& ((CNewNPC)(npc)).GetNPCType()!=ENGT_Guard
									)
									{
										npc.DropItemFromSlot('r_weapon');
										npc.DropItemFromSlot('l_weapon');
									}
									else
									{
										if (RandF() < 0.5)
										{
											if (RandF() < 0.5)
											{
												l_aiTree.animName = 'push_forward';
											}
											else
											{
												l_aiTree.animName = 'push_hard_forward';
											}
										}
										else
										{
											if (RandF() < 0.5)
											{
												l_aiTree.animName = 'push_hard_left';
											}
											else
											{
												l_aiTree.animName = 'push_hard_right';
											}
										}

										npc.ForceAIBehavior( l_aiTree, BTAP_Emergency);
									}
								}
							}
							else if (StrFindFirst(voiceTagStr, "BOY") >= 0
							|| StrFindFirst(voiceTagStr, "GIRL") >= 0
							|| StrFindFirst(appearanceStr, "BOY") >= 0
							|| StrFindFirst(appearanceStr, "GIRL") >= 0
							)
							{
								//if (ACS_can_push_npc())
								{
									//ACS_refresh_npc_push_cooldown();

									if ( !npc.GetInventory().IsEmpty(false) )
									{
										npc.GetInventory().RemoveAllItems();
									}
									else
									{
										npc.GetInventory().RemoveAllItems();

										movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );

										if (RandF() < 0.5)
										{
											if (RandF() < 0.5)
											{
												l_aiTree.animName = 'push_hard_left';
											}
											else
											{
												l_aiTree.animName = 'push_hard_right';
											}
										}
										else
										{
											l_aiTree.animName = 'push_hard_front';

											if (RandF() < 0.5)
											{
												l_aiTree.animName = 'push_hard_front';
											}
											else
											{
												l_aiTree.animName = 'push_front';
											}
										}

										npc.ForceAIBehavior( l_aiTree, BTAP_Emergency);
									}
								}
							}
							else if (npc.IsHorse() && npc != thePlayer.GetHorseWithInventory())
							{
								if (ACS_can_push_npc())
								{
									ACS_refresh_npc_push_cooldown();

									if (RandF() < 0.5)
									{
										npcAnimatedComponent.PlaySlotAnimationAsync ( 'horse_rearing01', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25, 0.25) );
									}
									else
									{
										npcAnimatedComponent.PlaySlotAnimationAsync ( 'horse_throw_off_the_rider_start', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25, 0.25) );
									}

									npc.PlayEffectSingle('demonic_cast');
									npc.StopEffect('demonic_cast');
								}
							}	

							npc.SignalGameplayEvent( 'AI_GetOutOfTheWay' ); 
		
							npc.SignalGameplayEventParamObject( 'CollideWithPlayer', thePlayer ); 
	
							theGame.GetBehTreeReactionManager().CreateReactionEvent( npc, 'BumpAction', 1, 1, 1, 1, false );
						}
					}
				}
			}
		}
	}

	function Hair_Thing()
	{
		var inv : CInventoryComponent;
		var witcher : W3PlayerWitcher;
		var ids : array<SItemUniqueId>;
		var size : int;
		var i : int;

		witcher = GetWitcherPlayer();
		inv = witcher.GetInventory();
		
		ids = inv.GetItemsByCategory( 'hair' );
		size = ids.Size();
			
		if( size > 0 )
		{					
			for( i = 0; i < size; i+=1 )
			{
				if(inv.IsItemMounted( ids[i] ) )
				{
					inv.DespawnItem(ids[i]);
				}
			}				
		}		

		ids.Clear();
	}

	function AllBlackControl()
	{
		if (ACS_GetItem_AllBlack_Equipped())
		{
			if (GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_SilverSword))
			{
				GetWitcherPlayer().UnequipItemFromSlot(EES_SilverSword);
			}

			if (ACS_GetItem_AllBlack_Equipped_Held())
			{
				if (thePlayer.GetCurrentHealth() > thePlayer.GetMaxHealth() * 0.5)
				{
					thePlayer.DrainVitality( thePlayer.GetStat( BCS_Vitality ) * 0.0125 );
				}

				if (!GetACSSummonedConstruct_1() 
				&& !GetACSSummonedConstruct_2()
				&& !thePlayer.HasTag('ACS_Player_Has_Summoned_Constructs')
				)
				{
					ACS_Construct_Summon();

					RemoveTimer('ACS_AllBlackHealthRevert');
					RemoveTimer('ACS_AllBlackHealthRevertRemove');

					if (!thePlayer.IsEffectActive('bat_circle', false))
					{
						thePlayer.PlayEffectSingle('bat_circle');
					}

					thePlayer.AddTag('ACS_Player_Has_Summoned_Constructs');
				}
			}
			else
			{
				if (GetACSSummonedConstruct_1() && GetACSSummonedConstruct_2())
				{
					RemoveTimer('ACS_AllBlackHealthRevert');
					AddTimer('ACS_AllBlackHealthRevert', 0.00001, true);
					AddTimer('ACS_AllBlackHealthRevertRemove', 1, false);
					Summoned_Construct_Destroy();

					if (thePlayer.IsEffectActive('bat_circle', false))
					{
						thePlayer.StopEffect('bat_circle');
					}

					thePlayer.RemoveTag('ACS_Player_Has_Summoned_Constructs');
				}
			}
		}
		else
		{
			if (GetACSSummonedConstruct_1() && GetACSSummonedConstruct_2())
			{
				RemoveTimer('ACS_AllBlackHealthRevert');
				AddTimer('ACS_AllBlackHealthRevert', 0.00001, true);
				AddTimer('ACS_AllBlackHealthRevertRemove', 1, false);
				Summoned_Construct_Destroy();

				if (thePlayer.IsEffectActive('bat_circle', false))
				{
					thePlayer.StopEffect('bat_circle');
				}

				thePlayer.RemoveTag('ACS_Player_Has_Summoned_Constructs');
			}
		}
	}

	var vACS_Construct_Summon : cACS_Construct_Summon;

	function ACS_Construct_Summon()
	{
		vACS_Construct_Summon = new cACS_Construct_Summon in this;
				
		vACS_Construct_Summon.Construct_Summon_Engage();
	}

	timer function ACS_AllBlackHealthRevertRemove( time : float , id : int )
	{
		RemoveTimer('ACS_AllBlackHealthRevert');
	}

	timer function ACS_AllBlackHealthRevert( time : float , id : int )
	{
		if (thePlayer.GetCurrentHealth() == thePlayer.GetMaxHealth())
		{
			RemoveTimer('ACS_AllBlackHealthRevert');
		}
		else if (thePlayer.GetCurrentHealth() < thePlayer.GetMaxHealth())
		{
			thePlayer.GainStat( BCS_Vitality, thePlayer.GetStat( BCS_Vitality ) * 0.0125 );
		}
	}

	function Summoned_Construct_Destroy()
	{
		var animatedComponentA												: CAnimatedComponent;

		if (!GetACSSummonedConstruct_1().HasTag('ACS_Summoned_Construct_Destroy_Start'))
		{
			//GetACSSummonedConstruct_1().PlayEffectSingle('avatar_death_swollen_no_decal');
			//GetACSSummonedConstruct_1().StopEffect('avatar_death_swollen_no_decal');

			//GetACSSummonedConstruct_1().PlayEffectSingle('shadowdash');
			//GetACSSummonedConstruct_1().StopEffect('shadowdash');

			GetACSSummonedConstruct_1().DestroyAfter(1.5);

			animatedComponentA = (CAnimatedComponent)(GetACSSummonedConstruct_1()).GetComponentByClassName( 'CAnimatedComponent' );	

			animatedComponentA.PlaySlotAnimationAsync ( 'dettlaff_construct_death', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 0.5f));

			GetACSSummonedConstruct_1().AddTag('ACS_Summoned_Construct_Destroy_Start');
		}

		if (!GetACSSummonedConstruct_2().HasTag('ACS_Summoned_Construct_Destroy_Start'))
		{
			//GetACSSummonedConstruct_2().PlayEffectSingle('avatar_death_swollen_no_decal');
			//GetACSSummonedConstruct_2().StopEffect('avatar_death_swollen_no_decal');

			//GetACSSummonedConstruct_2().PlayEffectSingle('shadowdash');
			//GetACSSummonedConstruct_2().StopEffect('shadowdash');

			GetACSSummonedConstruct_2().DestroyAfter(1.5);

			animatedComponentA = (CAnimatedComponent)(GetACSSummonedConstruct_2()).GetComponentByClassName( 'CAnimatedComponent' );	

			animatedComponentA.PlaySlotAnimationAsync ( 'dettlaff_construct_death', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 0.5f));

			GetACSSummonedConstruct_2().AddTag('ACS_Summoned_Construct_Destroy_Start');
		}
	}

	var vACS_EtherSword_Summon : cACS_EtherSword_Summon;

	function Ether_Sword_Summon()
	{
		if (!GetACSArmorEtherSword() 
		&& (thePlayer.HasTag('igni_secondary_sword_equipped')
		|| thePlayer.HasTag('igni_secondary_sword_equipped_TAG')
		|| thePlayer.HasTag('igni_sword_equipped')
		|| thePlayer.HasTag('igni_sword_equipped_TAG'))
		&& !thePlayer.HasTag('quen_sword_equipped')
		&& !thePlayer.HasTag('axii_sword_equipped')
		&& !thePlayer.HasTag('aard_sword_equipped')
		&& !thePlayer.HasTag('yrden_sword_equipped')
		&& !thePlayer.HasTag('quen_secondary_sword_equipped')
		&& !thePlayer.HasTag('axii_secondary_sword_equipped')
		&& !thePlayer.HasTag('aard_secondary_sword_equipped')
		&& !thePlayer.HasTag('yrden_secondary_sword_equipped')
		&& !thePlayer.HasTag('ACS_HideWeaponOnDodge')
		&& !thePlayer.HasTag('ACS_HideWeaponOnDodge_Claw_Effect')
		&& !ACS_GetItem_AllBlack_Equipped_Held()
		)
		{
			vACS_EtherSword_Summon = new cACS_EtherSword_Summon in this;

			vACS_EtherSword_Summon.EtherSword_Spawner_Engage();
		}
	}

	function EtherSwordFireConntrol()
	{
		if (thePlayer.GetStat(BCS_Focus) == thePlayer.GetStatMax(BCS_Focus)
		&& thePlayer.GetStat(BCS_Stamina) == thePlayer.GetStatMax(BCS_Stamina))
		{
			if (!GetACSArmorEtherSword().IsEffectActive('red_runeword_igni_2', false))
			{
				GetACSArmorEtherSword().PlayEffectSingle('red_runeword_igni_2');
			}

			if (!GetACSArmorEtherSword().IsEffectActive('red_runeword_igni_1', false))
			{
				GetACSArmorEtherSword().PlayEffectSingle('red_runeword_igni_1');
			}
		}
		else
		{
			if (GetACSArmorEtherSword().IsEffectActive('red_runeword_igni_2', false))
			{
				GetACSArmorEtherSword().StopEffect('red_runeword_igni_2');
			}

			if (GetACSArmorEtherSword().IsEffectActive('red_runeword_igni_1', false))
			{
				GetACSArmorEtherSword().StopEffect('red_runeword_igni_1');
			}
		}
	}

	function ACS_Armor_Omega_Ether_Swords()
	{
		if (GetACSArmorEtherSword().IsEffectActive('andurial_glow', false))
		{
			GetACSArmorEtherSword().DestroyEffect('andurial_glow');
		}

		if (GetACSArmorEtherSword().IsEffectActive('pridefall_glow', false))
		{
			GetACSArmorEtherSword().DestroyEffect('pridefall_glow');
		}

		if (GetACSArmorEtherSword().IsEffectActive('doomsword_glow', false))
		{
			GetACSArmorEtherSword().DestroyEffect('doomsword_glow');
		}

		if (GetACSArmorEtherSword().IsEffectActive('doomsword_amasii_glow', false))
		{
			GetACSArmorEtherSword().DestroyEffect('doomsword_amasii_glow');
		}

		if(GetWitcherPlayer().IsWeaponHeld( 'silversword' ) )
		{
			if (GetACSArmorEtherSword().IsEffectActive('war_sword_glow', false))
			{
				GetACSArmorEtherSword().DestroyEffect('war_sword_glow');
			}

			if (!GetACSArmorEtherSword().IsEffectActive('soul_edge_glow', false))
			{
				thePlayer.SoundEvent("fx_rune_activate_igni");
				thePlayer.SoundEvent("fx_rune_activate_igni");
				thePlayer.SoundEvent("fx_rune_activate_igni");

				GetACSArmorEtherSword().DestroyEffect('fire_sparks_trail');
				GetACSArmorEtherSword().PlayEffectSingle('fire_sparks_trail');

				GetACSArmorEtherSword().DestroyEffect('red_fast_attack_buff');
				GetACSArmorEtherSword().PlayEffectSingle('red_fast_attack_buff');

				GetACSArmorEtherSword().DestroyEffect('red_fast_attack_buff_hit');
				GetACSArmorEtherSword().PlayEffectSingle('red_fast_attack_buff_hit');

				GetACSArmorEtherSword().PlayEffectSingle('soul_edge_glow');
			}
		}
		else if(GetWitcherPlayer().IsWeaponHeld( 'steelsword' ))
		{
			if (GetACSArmorEtherSword().IsEffectActive('soul_edge_glow', false))
			{
				GetACSArmorEtherSword().DestroyEffect('soul_edge_glow');
			}

			if (!GetACSArmorEtherSword().IsEffectActive('war_sword_glow', false))
			{
				thePlayer.SoundEvent("fx_rune_activate_igni");
				thePlayer.SoundEvent("fx_rune_activate_igni");
				thePlayer.SoundEvent("fx_rune_activate_igni");

				GetACSArmorEtherSword().DestroyEffect('fire_sparks_trail');
				GetACSArmorEtherSword().PlayEffectSingle('fire_sparks_trail');

				GetACSArmorEtherSword().DestroyEffect('red_fast_attack_buff');
				GetACSArmorEtherSword().PlayEffectSingle('red_fast_attack_buff');

				GetACSArmorEtherSword().DestroyEffect('red_fast_attack_buff_hit');
				GetACSArmorEtherSword().PlayEffectSingle('red_fast_attack_buff_hit');

				GetACSArmorEtherSword().PlayEffectSingle('war_sword_glow');
			}
		}
	}

	function ACS_Armor_Alpha_Ether_Swords()
	{
		if (GetACSArmorEtherSword().IsEffectActive('soul_edge_glow', false))
		{
			GetACSArmorEtherSword().DestroyEffect('soul_edge_glow');
		}

		if (GetACSArmorEtherSword().IsEffectActive('war_sword_glow', false))
		{
			GetACSArmorEtherSword().DestroyEffect('war_sword_glow');
		}

		if(GetWitcherPlayer().IsWeaponHeld( 'silversword' ) )
		{
			if (GetACSArmorEtherSword().IsEffectActive('andurial_glow', false))
			{
				GetACSArmorEtherSword().DestroyEffect('andurial_glow');
			}

			if (GetACSArmorEtherSword().IsEffectActive('pridefall_glow', false))
			{
				GetACSArmorEtherSword().DestroyEffect('pridefall_glow');
			}

			if (thePlayer.GetStat(BCS_Focus) == thePlayer.GetStatMax(BCS_Focus))
			{
				if (GetACSArmorEtherSword().IsEffectActive('doomsword_amasii_glow', false))
				{
					GetACSArmorEtherSword().DestroyEffect('doomsword_amasii_glow');
				}

				if (!GetACSArmorEtherSword().IsEffectActive('doomsword_glow', false))
				{
					thePlayer.SoundEvent("fx_rune_activate_igni");
					thePlayer.SoundEvent("fx_rune_activate_igni");
					thePlayer.SoundEvent("fx_rune_activate_igni");

					GetACSArmorEtherSword().DestroyEffect('fire_sparks_trail');
					GetACSArmorEtherSword().PlayEffectSingle('fire_sparks_trail');

					GetACSArmorEtherSword().DestroyEffect('red_fast_attack_buff');
					GetACSArmorEtherSword().PlayEffectSingle('red_fast_attack_buff');

					GetACSArmorEtherSword().DestroyEffect('red_fast_attack_buff_hit');
					GetACSArmorEtherSword().PlayEffectSingle('red_fast_attack_buff_hit');

					GetACSArmorEtherSword().PlayEffectSingle('doomsword_glow');
				}
			}
			else
			{
				if (GetACSArmorEtherSword().IsEffectActive('doomsword_glow', false))
				{
					GetACSArmorEtherSword().DestroyEffect('doomsword_glow');
				}

				if (!GetACSArmorEtherSword().IsEffectActive('doomsword_amasii_glow', false))
				{
					thePlayer.SoundEvent("fx_rune_activate_igni");
					thePlayer.SoundEvent("fx_rune_activate_igni");
					thePlayer.SoundEvent("fx_rune_activate_igni");

					GetACSArmorEtherSword().DestroyEffect('fire_sparks_trail');
					GetACSArmorEtherSword().PlayEffectSingle('fire_sparks_trail');

					GetACSArmorEtherSword().DestroyEffect('red_fast_attack_buff');
					GetACSArmorEtherSword().PlayEffectSingle('red_fast_attack_buff');

					GetACSArmorEtherSword().DestroyEffect('red_fast_attack_buff_hit');
					GetACSArmorEtherSword().PlayEffectSingle('red_fast_attack_buff_hit');

					GetACSArmorEtherSword().PlayEffectSingle('doomsword_amasii_glow');
				}
			}
		}
		else if(GetWitcherPlayer().IsWeaponHeld( 'steelsword' ))
		{
			if (GetACSArmorEtherSword().IsEffectActive('doomsword_glow', false))
			{
				GetACSArmorEtherSword().DestroyEffect('doomsword_glow');
			}

			if (GetACSArmorEtherSword().IsEffectActive('doomsword_amasii_glow', false))
			{
				GetACSArmorEtherSword().DestroyEffect('doomsword_amasii_glow');
			}

			if (thePlayer.GetStat(BCS_Focus) == thePlayer.GetStatMax(BCS_Focus))
			{
				if (GetACSArmorEtherSword().IsEffectActive('andurial_glow', false))
				{
					GetACSArmorEtherSword().DestroyEffect('andurial_glow');
				}

				if (!GetACSArmorEtherSword().IsEffectActive('pridefall_glow', false))
				{
					thePlayer.SoundEvent("fx_rune_activate_igni");
					thePlayer.SoundEvent("fx_rune_activate_igni");
					thePlayer.SoundEvent("fx_rune_activate_igni");

					GetACSArmorEtherSword().DestroyEffect('fire_sparks_trail');
					GetACSArmorEtherSword().PlayEffectSingle('fire_sparks_trail');

					GetACSArmorEtherSword().DestroyEffect('red_fast_attack_buff');
					GetACSArmorEtherSword().PlayEffectSingle('red_fast_attack_buff');

					GetACSArmorEtherSword().DestroyEffect('red_fast_attack_buff_hit');
					GetACSArmorEtherSword().PlayEffectSingle('red_fast_attack_buff_hit');

					GetACSArmorEtherSword().PlayEffectSingle('pridefall_glow');
				}
			}
			else
			{
				if (GetACSArmorEtherSword().IsEffectActive('pridefall_glow', false))
				{
					GetACSArmorEtherSword().DestroyEffect('pridefall_glow');
				}

				if (!GetACSArmorEtherSword().IsEffectActive('andurial_glow', false))
				{
					thePlayer.SoundEvent("fx_rune_activate_igni");
					thePlayer.SoundEvent("fx_rune_activate_igni");
					thePlayer.SoundEvent("fx_rune_activate_igni");

					GetACSArmorEtherSword().DestroyEffect('fire_sparks_trail');
					GetACSArmorEtherSword().PlayEffectSingle('fire_sparks_trail');

					GetACSArmorEtherSword().DestroyEffect('red_fast_attack_buff');
					GetACSArmorEtherSword().PlayEffectSingle('red_fast_attack_buff');

					GetACSArmorEtherSword().DestroyEffect('red_fast_attack_buff_hit');
					GetACSArmorEtherSword().PlayEffectSingle('red_fast_attack_buff_hit');

					GetACSArmorEtherSword().PlayEffectSingle('andurial_glow');
				}
			}
		}
	}

	function ACS_Ether_Sword_Control()
	{
		if (helmtoggle || hoodtoggle)
		{
			Hair_Thing();
		}

		if (ACS_Armor_Equipped_Check()
		&& !ACS_Transformation_Activated_Check())
		{
			if (thePlayer.IsDeadlySwordHeld())
			{
				Ether_Sword_Summon();
			}
			else
			{
				if (GetACSArmorEtherSword())
				{
					GetACSArmorEtherSword().Destroy();
					ACS_ShowSwordWitoutScabbardStuff();
					//thePlayer.SoundEvent("magic_sorceress_vfx_lightning_fx_loop_stop");
				}
			}

			if (GetACSArmorEtherSword())
			{
				//ACS_HideSwordWitoutScabbardStuff();
				
				EtherSwordFireConntrol();

				if (ACS_Armor_Omega_Equipped_Check())
				{
					ACS_Armor_Omega_Ether_Swords();
				}
				else if (ACS_Armor_Alpha_Equipped_Check())
				{
					ACS_Armor_Alpha_Ether_Swords();
				}
			}
		}
		else
		{
			if (GetACSArmorEtherSword())
			{
				GetACSArmorEtherSword().Destroy();

				//thePlayer.SoundEvent("magic_sorceress_vfx_lightning_fx_loop_stop");

				if ((thePlayer.HasTag('igni_secondary_sword_equipped')
				|| thePlayer.HasTag('igni_secondary_sword_equipped_TAG')
				|| thePlayer.HasTag('igni_sword_equipped')
				|| thePlayer.HasTag('igni_sword_equipped_TAG'))
				&& thePlayer.IsDeadlySwordHeld()
				)
				{
					ACS_ShowSwordWitoutScabbardStuff();
				}
			}
		}
	}

	function ACS_Armor_Effects()
	{
		if (ACS_Armor_Equipped_Check()
		&& !ACS_Transformation_Activated_Check())
		{
			CloakToggleOff();
			
			if (!helmtoggle && !GetHoodToggle())
			{
				//if (!thePlayer.IsEffectActive('acs_eyes_effect', true))
				//{
					//thePlayer.PlayEffectSingle( 'acs_eyes_effect' );
				//}

				if (thePlayer.IsEffectActive('acs_armor_effect_1', false))
				{
					thePlayer.DestroyEffect('acs_armor_effect_1');
				}
				
				if (thePlayer.IsEffectActive('acs_armor_effect_2', false))
				{
					thePlayer.DestroyEffect('acs_armor_effect_2');
				}

				if (thePlayer.IsEffectActive('demon_cs', false))
				{
					thePlayer.DestroyEffect('demon_cs');
				}

				if (thePlayer.IsEffectActive('him_smoke_red', false))
				{
					thePlayer.DestroyEffect('him_smoke_red');
				}
			}
			else if (helmtoggle)
			{
				if (thePlayer.GetVisibility())
				{
					if (!thePlayer.IsEffectActive('demon_cs', false))
					{
						thePlayer.PlayEffectSingle('demon_cs');
					}

					if (!thePlayer.IsEffectActive('him_smoke_red', false))
					{
						thePlayer.PlayEffectSingle('him_smoke_red');
					}

					if(thePlayer.IsAnyWeaponHeld())
					{
						if (!thePlayer.IsEffectActive('acs_armor_effect_1', false))
						{
							thePlayer.PlayEffectSingle('acs_armor_effect_1');
						}
					}
					else
					{
						if (thePlayer.IsEffectActive('acs_armor_effect_1', false))
						{
							thePlayer.DestroyEffect('acs_armor_effect_1');
						}
					}
				}
				else
				{
					if (thePlayer.IsEffectActive('acs_armor_effect_1', false))
					{
						thePlayer.DestroyEffect('acs_armor_effect_1');
					}

					if (thePlayer.IsEffectActive('demon_cs', false))
					{
						thePlayer.DestroyEffect('demon_cs');
					}

					if (thePlayer.IsEffectActive('him_smoke_red', false))
					{
						thePlayer.DestroyEffect('him_smoke_red');
					}
				}

				NPC_Stay_Away();
			}

			if (!thePlayer.HasBuff(EET_WeakeningAura))
			{
				thePlayer.AddEffectDefault( EET_WeakeningAura, thePlayer, 'ACS_Armor_Weakening_Aura', false );
			}

			if (thePlayer.IsInCombat())
			{
				if (theInput.GetActionValue('GI_AxisLeftX') == 0 
				&& theInput.GetActionValue('GI_AxisLeftY') == 0 
				&& !thePlayer.IsCurrentlyDodging()
				)
				{
					thePlayer.DrainVitality( thePlayer.GetStat( BCS_Vitality ) * 0.000125 );
				}
				else
				{
					thePlayer.DrainVitality( thePlayer.GetStat( BCS_Vitality ) * 0.00025 );
				}

				if (thePlayer.GetStat(BCS_Toxicity) < thePlayer.GetStatMax(BCS_Toxicity))
				{
					thePlayer.GainStat(BCS_Toxicity, thePlayer.GetStatMax(BCS_Toxicity) * 0.00025);
				}
			}
			else
			{
				if (thePlayer.GetStat(BCS_Toxicity) > thePlayer.GetStatMax(BCS_Toxicity) * 0)
				{
					thePlayer.DrainToxicity(thePlayer.GetStatMax(BCS_Toxicity) * 0.00025);
				}

				if (ACS_GetItem_AllBlack_Equipped_Held())
				{
					if (thePlayer.GetStat(BCS_Vitality) < thePlayer.GetStatMax(BCS_Vitality) * 0.5)
					{
						thePlayer.GainStat(BCS_Vitality, thePlayer.GetStatMax(BCS_Vitality) * 0.00025);
					}
				}
				else
				{
					if (thePlayer.GetStat(BCS_Vitality) < thePlayer.GetStatMax(BCS_Vitality))
					{
						thePlayer.GainStat(BCS_Vitality, thePlayer.GetStatMax(BCS_Vitality) * 0.00025);
					}
				}
			}

			if (thePlayer.GetStat(BCS_Air) < thePlayer.GetStatMax(BCS_Air))
			{
				thePlayer.GainStat(BCS_Air, thePlayer.GetStatMax(BCS_Air) * 0.1);
			}

			if (((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("OxygenBarModule")).GetEnabled())
			{
				((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("OxygenBarModule")).SetEnabled(false);
				((CR4ScriptedHud)theGame.GetHud()).UpdateHUD();
			}
			
			if( thePlayer.GetIsWalking() )
			{
				if (GetWitcherPlayer().HasTag('ACS_Armor_Player_Is_Running'))
				{
					GetWitcherPlayer().RemoveTag('ACS_Armor_Player_Is_Running');
				}

				if (GetWitcherPlayer().HasTag('ACS_Armor_Player_Is_Sprinting'))
				{
					GetWitcherPlayer().RemoveTag('ACS_Armor_Player_Is_Sprinting');
				}

				if (!GetWitcherPlayer().HasTag('ACS_Armor_Player_Is_Walking'))
				{
					RemoveTimer('ACS_Magic_Step_Timer');
					AddTimer('ACS_Magic_Step_Timer', 0.5, true);

					GetWitcherPlayer().AddTag('ACS_Armor_Player_Is_Walking');
				}
			}
			else if( thePlayer.GetIsRunning() )
			{
				if (GetWitcherPlayer().HasTag('ACS_Armor_Player_Is_Walking'))
				{
					GetWitcherPlayer().RemoveTag('ACS_Armor_Player_Is_Walking');
				}

				if (GetWitcherPlayer().HasTag('ACS_Armor_Player_Is_Sprinting'))
				{
					GetWitcherPlayer().RemoveTag('ACS_Armor_Player_Is_Sprinting');
				}

				if (!GetWitcherPlayer().HasTag('ACS_Armor_Player_Is_Running'))
				{
					RemoveTimer('ACS_Magic_Step_Timer');
					AddTimer('ACS_Magic_Step_Timer', 0.25, true);

					GetWitcherPlayer().AddTag('ACS_Armor_Player_Is_Running');
				}
			}
			else if( thePlayer.GetIsSprinting() )
			{
				if (GetWitcherPlayer().HasTag('ACS_Armor_Player_Is_Walking'))
				{
					GetWitcherPlayer().RemoveTag('ACS_Armor_Player_Is_Walking');
				}

				if (GetWitcherPlayer().HasTag('ACS_Armor_Player_Is_Running'))
				{
					GetWitcherPlayer().RemoveTag('ACS_Armor_Player_Is_Running');
				}

				if (!GetWitcherPlayer().HasTag('ACS_Armor_Player_Is_Sprinting'))
				{
					RemoveTimer('ACS_Magic_Step_Timer');
					AddTimer('ACS_Magic_Step_Timer', 0.125, true);

					GetWitcherPlayer().AddTag('ACS_Armor_Player_Is_Sprinting');
				}
			}
			else
			{
				if (GetWitcherPlayer().HasTag('ACS_Armor_Player_Is_Walking'))
				{
					GetWitcherPlayer().RemoveTag('ACS_Armor_Player_Is_Walking');
				}

				if (GetWitcherPlayer().HasTag('ACS_Armor_Player_Is_Running'))
				{
					GetWitcherPlayer().RemoveTag('ACS_Armor_Player_Is_Running');
				}

				if (GetWitcherPlayer().HasTag('ACS_Armor_Player_Is_Sprinting'))
				{
					GetWitcherPlayer().RemoveTag('ACS_Armor_Player_Is_Sprinting');
				}

				RemoveTimer('ACS_Magic_Step_Timer');

				thePlayer.StopEffect('vampire_magic_step_r');
				thePlayer.StopEffect('vampire_magic_step_l');

				thePlayer.StopEffect('odim_magic_step_r');
				thePlayer.StopEffect('odim_magic_step_l');
			}
		}
		else
		{
			if (thePlayer.HasBuff(EET_WeakeningAura))
			{
				thePlayer.RemoveBuff( EET_WeakeningAura, true );
			}

			if (!((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("OxygenBarModule")).GetEnabled())
			{
				((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("OxygenBarModule")).SetEnabled(true);
				((CR4ScriptedHud)theGame.GetHud()).UpdateHUD();
			}

			if (thePlayer.IsEffectActive('acs_armor_effect_1', false))
			{
				thePlayer.DestroyEffect('acs_armor_effect_1');
			}
			
			if (thePlayer.IsEffectActive('acs_armor_effect_2', false))
			{
				thePlayer.DestroyEffect('acs_armor_effect_2');
			}

			if (thePlayer.IsEffectActive('demon_cs', false))
			{
				thePlayer.DestroyEffect('demon_cs');
			}

			if (thePlayer.IsEffectActive('him_smoke_red', false))
			{
				thePlayer.DestroyEffect('him_smoke_red');
			}

			RemoveTimer('ACS_Magic_Step_Timer');

			if (thePlayer.IsEffectActive('vampire_magic_step_r', false))
			{
				thePlayer.DestroyEffect('vampire_magic_step_r');
			}

			if (thePlayer.IsEffectActive('vampire_magic_step_l', false))
			{
				thePlayer.DestroyEffect('vampire_magic_step_l');
			}

			if (thePlayer.IsEffectActive('odim_magic_step_r', false))
			{
				thePlayer.DestroyEffect('odim_magic_step_r');
			}

			if (thePlayer.IsEffectActive('odim_magic_step_l', false))
			{
				thePlayer.DestroyEffect('odim_magic_step_l');
			}
		}
	}

	function ACS_Helm_Equip()
	{
		if (ACS_Armor_Equipped_Check())
		{	
			if (FactsQuerySum("ACS_Armor_Equipped") <= 0)
			{
				FactsAdd("ACS_Armor_Equipped", 1, -1);
			}

			if (FactsQuerySum("ACS_Helm_Equipped") <= 0)
			{
				RemoveTimer('ACS_Embers_Timer');
				AddTimer('ACS_Embers_Timer', 0.004, true);

				RemoveTimer('ACSArmorBreathingTimer');
				AddTimer('ACSArmorBreathingTimer', 1, true);

				//AddTimer('ACS_Embers_Particles_Timer', 2, true);

				if (hoodtoggle)
				{
					Hood_Exclude();
				}

				helmtoggle = true;
				
				Additional_Helmets();

				if (!facemasktoggle)
				{
					Facegear_Include_Startup();
				}

				FactsAdd("ACS_Helm_Equipped", 1, -1);
			}
		}
		else
		{
			if (FactsQuerySum("ACS_Helm_Equipped") > 0)
			{
				helmtoggle = false;

				Additional_Helmets_Destroy();

				if (facemasktoggle)
				{
					Facegear_Exclude();
				}

				RemoveTimer('ACS_Embers_Timer');

				RemoveTimer('ACSArmorBreathingTimer');

				//RemoveTimer('ACS_Embers_Particles_Timer');

				FactsRemove("ACS_Helm_Equipped");
			}

			if (FactsQuerySum("ACS_Armor_Equipped") > 0)
			{
				FactsRemove("ACS_Armor_Equipped");
			}
		}
	}

	public timer function ACS_Ice_Armor_Step_Timer ( dt : float, id : int)
	{
		if (magicstepalt)
		{
			if (GetWitcherPlayer().IsAnyQuenActive())
			{
				thePlayer.PlayEffectSingle('odim_magic_step_r');
				thePlayer.StopEffect('odim_magic_step_r');
			}

			magicstepalt = false;
		}
		else
		{
			if (GetWitcherPlayer().IsAnyQuenActive())
			{
				thePlayer.PlayEffectSingle('odim_magic_step_l');
				thePlayer.StopEffect('odim_magic_step_l');
			}

			magicstepalt = true;
		}
	}

	var vACS_Wildhunt_Additional_Pieces : cACS_Wildhunt_Additional_Pieces;

	function GetWildhuntAdditionalPiecesClass() : cACS_Wildhunt_Additional_Pieces
	{
		vACS_Wildhunt_Additional_Pieces = new cACS_Wildhunt_Additional_Pieces in this;

		return vACS_Wildhunt_Additional_Pieces;
	}

	function ACS_Wild_Hunt_Armor_Equipped()
	{
		if (ACS_Eredin_Armor_Equipped_Check()
		)
		{
			if (FactsQuerySum("ACS_Eredin_Cloak_Equipped") <= 0)
			{
				GetWildhuntAdditionalPiecesClass().AttachEredinCloak();

				FactsAdd("ACS_Eredin_Cloak_Equipped", 1, -1);
			}
		}
		else
		{
			if (FactsQuerySum("ACS_Eredin_Cloak_Equipped") > 0)
			{
				GetACSEredinCloakAnchor().Destroy();
				GetACSEredinCloak().Destroy();

				FactsRemove("ACS_Eredin_Cloak_Equipped");
			}
		}

		if (ACS_VGX_Eredin_Armor_Equipped_Check())
		{
			if (FactsQuerySum("ACS_VGX_Eredin_Cloak_Equipped") <= 0)
			{
				GetWildhuntAdditionalPiecesClass().AttachVGXEredinCloak();

				FactsAdd("ACS_VGX_Eredin_Cloak_Equipped", 1, -1);
			}
		}
		else
		{
			if (FactsQuerySum("ACS_VGX_Eredin_Cloak_Equipped") > 0)
			{
				GetACSVGXEredinCloakAnchor().Destroy();
				GetACSVGXEredinCloak().Destroy();

				FactsRemove("ACS_VGX_Eredin_Cloak_Equipped");
			}
		}
		
		if (ACS_Eredin_Skirt_Equipped_Check())
		{
			if (FactsQuerySum("ACS_Eredin_Skirt_Equipped") <= 0)
			{
				GetWildhuntAdditionalPiecesClass().AttachEredinSkirt();

				FactsAdd("ACS_Eredin_Skirt_Equipped", 1, -1);
			}
		}
		else
		{
			if (FactsQuerySum("ACS_Eredin_Skirt_Equipped") > 0)
			{
				GetACSEredinSkirtAnchor().Destroy();
				GetACSEredinSkirt().Destroy();

				FactsRemove("ACS_Eredin_Skirt_Equipped");
			}
		}

		if (ACS_Imlerith_Skirt_Equipped_Check())
		{
			if (FactsQuerySum("ACS_Imlerith_Skirt_Equipped") <= 0)
			{
				GetWildhuntAdditionalPiecesClass().AttachImlerithSkirt();

				FactsAdd("ACS_Imlerith_Skirt_Equipped", 1, -1);
			}
		}
		else
		{
			if (FactsQuerySum("ACS_Imlerith_Skirt_Equipped") > 0)
			{
				GetACSImlerithSkirtAnchor().Destroy();
				GetACSImlerithSkirt().Destroy();
				
				FactsRemove("ACS_Imlerith_Skirt_Equipped");
			}
		}

		if (ACS_WH_Armor_Equipped_Check()
		|| ACS_Eredin_Armor_Equipped_Check()
		|| ACS_Imlerith_Armor_Equipped_Check()
		|| ACS_Caranthir_Armor_Equipped_Check()
		|| ACS_VGX_Eredin_Armor_Equipped_Check()
		)
		{	
			thePlayer.AddBuffImmunity(EET_Frozen , 'ACS_WH_Armor_Buff', true);
			thePlayer.AddBuffImmunity(EET_SlowdownFrost , 'ACS_WH_Armor_Buff', true);
			thePlayer.AddBuffImmunity(EET_Snowstorm , 'ACS_WH_Armor_Buff', true);
			thePlayer.AddBuffImmunity(EET_SnowstormQ403 , 'ACS_WH_Armor_Buff', true);

			if (FactsQuerySum("ACS_WH_Armor_Equipped") <= 0)
			{
				RemoveTimer('ACS_Ice_Armor_Timer');
				AddTimer('ACS_Ice_Armor_Timer', 0.004, true);

				thePlayer.AddBuffImmunity(EET_Frozen , 'ACS_WH_Armor_Buff', true);
				thePlayer.AddBuffImmunity(EET_SlowdownFrost , 'ACS_WH_Armor_Buff', true);
				thePlayer.AddBuffImmunity(EET_Snowstorm , 'ACS_WH_Armor_Buff', true);
				thePlayer.AddBuffImmunity(EET_SnowstormQ403 , 'ACS_WH_Armor_Buff', true);

				FactsAdd("ACS_WH_Armor_Equipped", 1, -1);
			}

			if (ACS_Transformation_Activated_Check())
			{
				return;
			}

			if( thePlayer.GetIsWalking() )
			{
				if (GetWitcherPlayer().HasTag('ACS_WH_Armor_Player_Is_Running'))
				{
					GetWitcherPlayer().RemoveTag('ACS_WH_Armor_Player_Is_Running');
				}

				if (GetWitcherPlayer().HasTag('ACS_WH_Armor_Player_Is_Sprinting'))
				{
					GetWitcherPlayer().RemoveTag('ACS_WH_Armor_Player_Is_Sprinting');
				}

				if (!GetWitcherPlayer().HasTag('ACS_WH_Armor_Player_Is_Walking'))
				{
					RemoveTimer('ACS_Ice_Armor_Step_Timer');
					AddTimer('ACS_Ice_Armor_Step_Timer', 0.5, true);

					GetWitcherPlayer().AddTag('ACS_WH_Armor_Player_Is_Walking');
				}
			}
			else if( thePlayer.GetIsRunning() )
			{
				if (GetWitcherPlayer().HasTag('ACS_WH_Armor_Player_Is_Walking'))
				{
					GetWitcherPlayer().RemoveTag('ACS_WH_Armor_Player_Is_Walking');
				}

				if (GetWitcherPlayer().HasTag('ACS_WH_Armor_Player_Is_Sprinting'))
				{
					GetWitcherPlayer().RemoveTag('ACS_WH_Armor_Player_Is_Sprinting');
				}

				if (!GetWitcherPlayer().HasTag('ACS_WH_Armor_Player_Is_Running'))
				{
					RemoveTimer('ACS_Ice_Armor_Step_Timer');
					AddTimer('ACS_Ice_Armor_Step_Timer', 0.25, true);

					GetWitcherPlayer().AddTag('ACS_WH_Armor_Player_Is_Running');
				}
			}
			else if( thePlayer.GetIsSprinting() )
			{
				if (GetWitcherPlayer().HasTag('ACS_WH_Armor_Player_Is_Walking'))
				{
					GetWitcherPlayer().RemoveTag('ACS_WH_Armor_Player_Is_Walking');
				}

				if (GetWitcherPlayer().HasTag('ACS_WH_Armor_Player_Is_Running'))
				{
					GetWitcherPlayer().RemoveTag('ACS_WH_Armor_Player_Is_Running');
				}

				if (!GetWitcherPlayer().HasTag('ACS_WH_Armor_Player_Is_Sprinting'))
				{
					RemoveTimer('ACS_Ice_Armor_Step_Timer');
					AddTimer('ACS_Ice_Armor_Step_Timer', 0.125, true);

					GetWitcherPlayer().AddTag('ACS_WH_Armor_Player_Is_Sprinting');
				}
			}
			else
			{
				if (GetWitcherPlayer().HasTag('ACS_WH_Armor_Player_Is_Walking'))
				{
					GetWitcherPlayer().RemoveTag('ACS_WH_Armor_Player_Is_Walking');
				}

				if (GetWitcherPlayer().HasTag('ACS_WH_Armor_Player_Is_Running'))
				{
					GetWitcherPlayer().RemoveTag('ACS_WH_Armor_Player_Is_Running');
				}

				if (GetWitcherPlayer().HasTag('ACS_WH_Armor_Player_Is_Sprinting'))
				{
					GetWitcherPlayer().RemoveTag('ACS_WH_Armor_Player_Is_Sprinting');
				}

				RemoveTimer('ACS_Ice_Armor_Step_Timer');

				thePlayer.StopEffect('odim_magic_step_r');
				thePlayer.StopEffect('odim_magic_step_l');
			}
		}
		else
		{
			if (FactsQuerySum("ACS_WH_Armor_Equipped") > 0)
			{
				if (GetWitcherPlayer().HasTag('ACS_WH_Armor_Player_Is_Walking'))
				{
					GetWitcherPlayer().RemoveTag('ACS_WH_Armor_Player_Is_Walking');
				}

				if (GetWitcherPlayer().HasTag('ACS_WH_Armor_Player_Is_Running'))
				{
					GetWitcherPlayer().RemoveTag('ACS_WH_Armor_Player_Is_Running');
				}

				if (GetWitcherPlayer().HasTag('ACS_WH_Armor_Player_Is_Sprinting'))
				{
					GetWitcherPlayer().RemoveTag('ACS_WH_Armor_Player_Is_Sprinting');
				}

				RemoveTimer('ACS_Ice_Armor_Timer');

				RemoveTimer('ACS_Ice_Armor_Step_Timer');

				thePlayer.DestroyEffect('odim_magic_step_r');
				thePlayer.DestroyEffect('odim_magic_step_l');

				thePlayer.DestroyEffect('ice_armor_no_smoke');
				thePlayer.DestroyEffect('rift_fx_special');

				thePlayer.RemoveBuffImmunity(EET_Frozen , 'ACS_WH_Armor_Buff');
				thePlayer.RemoveBuffImmunity(EET_SlowdownFrost , 'ACS_WH_Armor_Buff');
				thePlayer.RemoveBuffImmunity(EET_Snowstorm , 'ACS_WH_Armor_Buff');
				thePlayer.RemoveBuffImmunity(EET_SnowstormQ403 , 'ACS_WH_Armor_Buff');

				FactsRemove("ACS_WH_Armor_Equipped");
			}
		}
	}

	var vACS_Knight_Additional_Pieces : cACS_Knight_Additional_Pieces;

	function GetKnightAdditionalPiecesClass() : cACS_Knight_Additional_Pieces
	{
		vACS_Knight_Additional_Pieces = new cACS_Knight_Additional_Pieces in this;

		return vACS_Knight_Additional_Pieces;
	}

	function ACS_Knight_Armor_Equipped()
	{
		if (ACS_Knight_Armor_V1_Check()
		)
		{
			if (FactsQuerySum("ACS_Knight_Armor_V1_Equipped") <= 0)
			{
				GetKnightAdditionalPiecesClass().ACS_Knight_Armor_V1_Pieces_Include();

				FactsAdd("ACS_Knight_Armor_V1_Equipped", 1, -1);
			}
		}
		else
		{
			if (FactsQuerySum("ACS_Knight_Armor_V1_Equipped") > 0)
			{
				GetKnightAdditionalPiecesClass().ACS_Knight_Armor_V1_Pieces_Exclude();

				FactsRemove("ACS_Knight_Armor_V1_Equipped");
			}
		}

		if (ACS_Knight_Armor_V2_Check())
		{
			if (FactsQuerySum("ACS_Knight_Armor_V2_Equipped") <= 0)
			{
				GetKnightAdditionalPiecesClass().ACS_Knight_Armor_V2_Pieces_Include();

				FactsAdd("ACS_Knight_Armor_V2_Equipped", 1, -1);
			}
		}
		else
		{
			if (FactsQuerySum("ACS_Knight_Armor_V2_Equipped") > 0)
			{
				GetKnightAdditionalPiecesClass().ACS_Knight_Armor_V2_Pieces_Exclude();

				FactsRemove("ACS_Knight_Armor_V2_Equipped");
			}
		}
		
		if (ACS_Knight_Armor_V3_Check())
		{
			if (FactsQuerySum("ACS_Knight_Armor_V3_Equipped") <= 0)
			{
				GetKnightAdditionalPiecesClass().ACS_Knight_Armor_V3_Pieces_Include();

				FactsAdd("ACS_Knight_Armor_V3_Equipped", 1, -1);
			}
		}
		else
		{
			if (FactsQuerySum("ACS_Knight_Armor_V3_Equipped") > 0)
			{
				GetKnightAdditionalPiecesClass().ACS_Knight_Armor_V3_Pieces_Exclude();

				FactsRemove("ACS_Knight_Armor_V3_Equipped");
			}
		}

		if (ACS_Knight_Armor_Gold_V1_Check())
		{
			if (FactsQuerySum("ACS_Knight_Armor_Gold_V1_Equipped") <= 0)
			{
				GetKnightAdditionalPiecesClass().ACS_Knight_Armor_Gold_V1_Pieces_Include();

				FactsAdd("ACS_Knight_Armor_Gold_V1_Equipped", 1, -1);
			}
		}
		else
		{
			if (FactsQuerySum("ACS_Knight_Armor_Gold_V1_Equipped") > 0)
			{
				GetKnightAdditionalPiecesClass().ACS_Knight_Armor_Gold_V1_Pieces_Exclude();
				
				FactsRemove("ACS_Knight_Armor_Gold_V1_Equipped");
			}
		}

		if (ACS_Knight_Armor_Gold_V2_Check())
		{
			if (FactsQuerySum("ACS_Knight_Armor_Gold_V2_Equipped") <= 0)
			{
				GetKnightAdditionalPiecesClass().ACS_Knight_Armor_Gold_V2_Pieces_Include();

				FactsAdd("ACS_Knight_Armor_Gold_V2_Equipped", 1, -1);
			}
		}
		else
		{
			if (FactsQuerySum("ACS_Knight_Armor_Gold_V2_Equipped") > 0)
			{
				GetKnightAdditionalPiecesClass().ACS_Knight_Armor_Gold_V2_Pieces_Exclude();
				
				FactsRemove("ACS_Knight_Armor_Gold_V2_Equipped");
			}
		}

		if (ACS_Vampire_Armor_Black_Check())
		{
			if (FactsQuerySum("ACS_Vampire_Armor_Black_Equipped") <= 0)
			{
				GetKnightAdditionalPiecesClass().ACS_Vampire_Armor_Black_Pieces_Include();

				FactsAdd("ACS_Vampire_Armor_Black_Equipped", 1, -1);
			}
		}
		else
		{
			if (FactsQuerySum("ACS_Vampire_Armor_Black_Equipped") > 0)
			{
				GetKnightAdditionalPiecesClass().ACS_Vampire_Armor_Black_Pieces_Exclude();
				
				FactsRemove("ACS_Vampire_Armor_Black_Equipped");
			}
		}

		if (ACS_Vampire_Armor_Red_Check())
		{
			if (FactsQuerySum("ACS_Vampire_Armor_Red_Equipped") <= 0)
			{
				GetKnightAdditionalPiecesClass().ACS_Vampire_Armor_Red_Pieces_Include();

				FactsAdd("ACS_Vampire_Armor_Red_Equipped", 1, -1);
			}
		}
		else
		{
			if (FactsQuerySum("ACS_Vampire_Armor_Red_Equipped") > 0)
			{
				GetKnightAdditionalPiecesClass().ACS_Vampire_Armor_Red_Pieces_Exclude();
				
				FactsRemove("ACS_Vampire_Armor_Red_Equipped");
			}
		}


		if (ACS_Witcher_Knight_Armor_V1_Check()
		)
		{
			if (FactsQuerySum("ACS_Witcher_Knight_Armor_V1_Equipped") <= 0)
			{
				GetKnightAdditionalPiecesClass().ACS_Witcher_Knight_Armor_V1_Pieces_Include();

				FactsAdd("ACS_Witcher_Knight_Armor_V1_Equipped", 1, -1);
			}
		}
		else
		{
			if (FactsQuerySum("ACS_Witcher_Knight_Armor_V1_Equipped") > 0)
			{
				GetKnightAdditionalPiecesClass().ACS_Witcher_Knight_Armor_V1_Pieces_Exclude();

				FactsRemove("ACS_Witcher_Knight_Armor_V1_Equipped");
			}
		}

		if (ACS_Witcher_Knight_Armor_V2_Check()
		)
		{
			if (FactsQuerySum("ACS_Witcher_Knight_Armor_V2_Equipped") <= 0)
			{
				GetKnightAdditionalPiecesClass().ACS_Witcher_Knight_Armor_V2_Pieces_Include();

				FactsAdd("ACS_Witcher_Knight_Armor_V2_Equipped", 1, -1);
			}
		}
		else
		{
			if (FactsQuerySum("ACS_Witcher_Knight_Armor_V2_Equipped") > 0)
			{
				GetKnightAdditionalPiecesClass().ACS_Witcher_Knight_Armor_V2_Pieces_Exclude();

				FactsRemove("ACS_Witcher_Knight_Armor_V2_Equipped");
			}
		}

		if (ACS_Witcher_Knight_Armor_V3_Check()
		)
		{
			if (FactsQuerySum("ACS_Witcher_Knight_Armor_V3_Equipped") <= 0)
			{
				GetKnightAdditionalPiecesClass().ACS_Witcher_Knight_Armor_V3_Pieces_Include();

				FactsAdd("ACS_Witcher_Knight_Armor_V3_Equipped", 1, -1);
			}
		}
		else
		{
			if (FactsQuerySum("ACS_Witcher_Knight_Armor_V3_Equipped") > 0)
			{
				GetKnightAdditionalPiecesClass().ACS_Witcher_Knight_Armor_V3_Pieces_Exclude();

				FactsRemove("ACS_Witcher_Knight_Armor_V3_Equipped");
			}
		}

		if (ACS_Witcher_Bear_Armor_Check()
		)
		{
			if (FactsQuerySum("ACS_Witcher_Bear_Armor_Equipped") <= 0)
			{
				GetKnightAdditionalPiecesClass().ACS_Witcher_Bear_Armor_Fur_Include();

				FactsAdd("ACS_Witcher_Bear_Armor_Equipped", 1, -1);
			}
		}
		else
		{
			if (FactsQuerySum("ACS_Witcher_Bear_Armor_Equipped") > 0)
			{
				GetKnightAdditionalPiecesClass().ACS_Witcher_Bear_Armor_Fur_Exclude();

				FactsRemove("ACS_Witcher_Bear_Armor_Equipped");
			}
		}
	}

	var vACS_Swordsanoo : cACS_Swordsanoo;

	function ACS_Swordsanoo_Normal()
	{
		vACS_Swordsanoo = new cACS_Swordsanoo in this;
		
		thePlayer.PlayEffectSingle('ethereal_appear');
		thePlayer.StopEffect('ethereal_appear');

		thePlayer.PlayEffectSingle('special_attack_only_black_fx');
		thePlayer.StopEffect('special_attack_only_black_fx');

		vACS_Swordsanoo.Normal();
	}

	function ACS_Swordsanoo_Energy()
	{
		vACS_Swordsanoo = new cACS_Swordsanoo in this;
		
		thePlayer.PlayEffectSingle('ethereal_appear');
		thePlayer.StopEffect('ethereal_appear');

		thePlayer.PlayEffectSingle('special_attack_only_black_fx');
		thePlayer.StopEffect('special_attack_only_black_fx');

		vACS_Swordsanoo.Energy();
	}

	/*
	private var torso_sword_1, torso_sword_2, torso_sword_3, r_bicep_sword_1, l_bicep_sword_1, r_bicep_sword_2, l_bicep_sword_2, r_shoulder_sword_1, l_shoulder_sword_1, r_shoulder_sword_2, l_shoulder_sword_2								: CEntity;	

	function ACS_BackSwords_Equip()
	{
		if (ACS_Armor_Equipped_Check())
		{
			if ( !helmtoggle )
			{
				if (GetWitcherPlayer().HasTag('ACS_BackSwords_Equipped'))
				{
					ACS_Swordsanoo_Destroy();

					GetWitcherPlayer().RemoveTag('ACS_BackSwords_Equipped');
				}
			}
			else
			{
				if (ACS_Armor_Omega_Equipped_Check())
				{
					r_shoulder_sword_1 = (CEntity)theGame.GetEntityByTag( 'r_shoulder_sword_1' );
					r_shoulder_sword_1.StopEffect('chest_sword_1');
					r_shoulder_sword_1.PlayEffectSingle('chest_sword_1');
								
					l_shoulder_sword_1 = (CEntity)theGame.GetEntityByTag( 'l_shoulder_sword_1' );
					l_shoulder_sword_1.StopEffect('chest_sword_1');
					l_shoulder_sword_1.PlayEffectSingle('chest_sword_1');
					
					r_shoulder_sword_2 = (CEntity)theGame.GetEntityByTag( 'r_shoulder_sword_2' );
					r_shoulder_sword_2.StopEffect('chest_sword_1');
					r_shoulder_sword_2.PlayEffectSingle('chest_sword_1');
								
					l_shoulder_sword_2 = (CEntity)theGame.GetEntityByTag( 'l_shoulder_sword_2' );
					l_shoulder_sword_2.StopEffect('chest_sword_1');
					l_shoulder_sword_2.PlayEffectSingle('chest_sword_1');

					/////////////////////////////////////////////////////////////////////////////////////////////////////
								
					//torso_sword_1 = (CEntity)theGame.GetEntityByTag( 'torso_sword_1' );
					//torso_sword_1.StopEffect('chest_sword_1');
					//torso_sword_1.PlayEffectSingle('chest_sword_1');
								
					//torso_sword_2 = (CEntity)theGame.GetEntityByTag( 'torso_sword_2' );
					//torso_sword_2.StopEffect('chest_sword_1');
					//torso_sword_2.PlayEffectSingle('chest_sword_1');
					
					//torso_sword_3 = (CEntity)theGame.GetEntityByTag( 'torso_sword_3' );
					//torso_sword_3.StopEffect('chest_sword_1');
					//torso_sword_3.PlayEffectSingle('chest_sword_1');

					if (!GetWitcherPlayer().HasTag('ACS_BackSwords_Equipped'))
					{
						ACS_Swordsanoo();

						GetWitcherPlayer().AddTag('ACS_BackSwords_Equipped');
					}
				}
				else
				{
					if (GetWitcherPlayer().HasTag('ACS_BackSwords_Equipped'))
					{
						ACS_Swordsanoo_Destroy();

						GetWitcherPlayer().RemoveTag('ACS_BackSwords_Equipped');
					}
				}
			}
		}
	}
	*/

	function ACS_Armor_HorseManager()
	{
		if (ACS_Armor_Equipped_Check())
		{
			if (!(thePlayer.GetHorseCurrentlyMounted()).IsEffectActive('demon_horse', false))
			{
				thePlayer.GetHorseCurrentlyMounted().PlayEffectSingle( 'demon_horse' );
			}

			if (!(thePlayer.GetHorseCurrentlyMounted()).IsEffectActive('demonic_cast', false))
			{
				thePlayer.GetHorseCurrentlyMounted().PlayEffectSingle( 'demonic_cast' );
			}

			if (thePlayer.GetHorseCurrentlyMounted().GetStat(BCS_Stamina) < thePlayer.GetHorseCurrentlyMounted().GetStatMax(BCS_Stamina))
			{
				thePlayer.GetHorseCurrentlyMounted().GainStat(BCS_Stamina, thePlayer.GetHorseCurrentlyMounted().GetStatMax(BCS_Stamina) * 0.01);
			}

			if (!thePlayer.GetHorseCurrentlyMounted().HasAbility( 'DisableHorsePanic' ))
			{
				thePlayer.GetHorseCurrentlyMounted().AddAbility( 'DisableHorsePanic' );
			}

			if (thePlayer.GetHorseCurrentlyMounted().GetStat(BCS_Panic) < thePlayer.GetHorseCurrentlyMounted().GetStatMax(BCS_Panic))
			{
				thePlayer.GetHorseCurrentlyMounted().GainStat(BCS_Panic, thePlayer.GetHorseCurrentlyMounted().GetStatMax(BCS_Panic) * 0.01);
			}

			if (((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("HorseStaminaBarModule")).GetEnabled())
			{
				((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("HorseStaminaBarModule")).SetEnabled(false);
				((CR4ScriptedHud)theGame.GetHud()).UpdateHUD();
			}

			if (((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("HorsePanicBarModule")).GetEnabled())
			{
				((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("HorsePanicBarModule")).SetEnabled(false);
				((CR4ScriptedHud)theGame.GetHud()).UpdateHUD();
			}
		}
		else
		{
			if( !(thePlayer.GetHorseWithInventory().GetInventory()).HasItem( 'Devil Saddle' ) )
			{
				if ((thePlayer.GetHorseCurrentlyMounted()).IsEffectActive('demon_horse', false))
				{
					thePlayer.GetHorseCurrentlyMounted().StopEffect( 'demon_horse' );
				}
			}

			if (thePlayer.GetHorseCurrentlyMounted().HasAbility( 'DisableHorsePanic' ))
			{
				thePlayer.GetHorseCurrentlyMounted().RemoveAbility( 'DisableHorsePanic' );
			}

			if (!((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("HorseStaminaBarModule")).GetEnabled())
			{
				((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("HorseStaminaBarModule")).SetEnabled(true);
				((CR4ScriptedHud)theGame.GetHud()).UpdateHUD();
			}

			if (!((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("HorsePanicBarModule")).GetEnabled())
			{
				((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("HorsePanicBarModule")).SetEnabled(true);
				((CR4ScriptedHud)theGame.GetHud()).UpdateHUD();
			}
		}
	}

	function ACS_Armor_Functions()
	{
		//ACS_BackSwords_Equip();

		//ACS_Armor_Effects();

		ACS_Armor_Scale();

		ACS_Armor_Add();

		ACS_Armor_HorseManager();
	}

	function Shallow_Water_Unblock_Hack()
	{
		if (thePlayer.IsInShallowWater())
		{
			thePlayer.OnExitShallowWater();
		}

		if ( thePlayer.IsActionBlockedBy( EIAB_Jump, 'focus' ))
		{
			thePlayer.UnblockAction( EIAB_Jump, 'focus' ); 
		}
	}

	function ACS_Never_Time_Out()
	{
		if (FactsQuerySum("ACS_Never_Time_Out") > 0)
		{
			if ( thePlayer.GetInitialTimeOut() )
			{
				if (thePlayer.GetCurrentTimeOut() < 999 )
				{
					thePlayer.SetCurrentTimeOut( 999 );
				}
			}

			if (((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("TimeLeftModule")).GetEnabled())
			{
				((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("TimeLeftModule")).SetEnabled(false);
				((CR4ScriptedHud)theGame.GetHud()).UpdateHUD();
			}
		}	
	}

	function ACS_BlockInteractionModule()
	{
		if (!ACS_Interaction_Module_Enabled())
		{
			if (((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("InteractionsModule")).GetEnabled())
			{
				((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("InteractionsModule")).SetEnabled(false);
				((CR4ScriptedHud)theGame.GetHud()).UpdateHUD();
			}
		}
		else
		{
			if (!((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("InteractionsModule")).GetEnabled())
			{
				((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("InteractionsModule")).SetEnabled(true);
				((CR4ScriptedHud)theGame.GetHud()).UpdateHUD();
			}
		}
	}

	function ACS_Potestaquisitor_GPS()
	{
		var pPosition : Vector;

		pPosition = thePlayer.GetWorldPosition();

		if ( GetWitcherPlayer().IsItemEquippedByName('Potestaquisitor') && GetWitcherPlayer().IsHoldingItemInLHand() )
		{
			if ( FactsQuerySum("ACS_GPS_Activate") <= 0 )
			{
				if ( FactsQuerySum("ACS_GPS_Activate_Switch") > 0 )
				{
					theGame.GetGuiManager().ShowUserDialogAdv(0, "Player Position", VecToString(pPosition), false, UDB_Ok);
				}

				Log ("ACS_Player_Position_Log: " + "locationArray.PushBack(Vector(" + FloatToStringPrec(pPosition.X, 6) + ", " + FloatToStringPrec(pPosition.Y, 6) + ", " + FloatToStringPrec(pPosition.Z, 6) + ", " + FloatToStringPrec(pPosition.W, 6) + "));");

				FactsAdd("ACS_GPS_Activate", 1, -1);
			}
		}
		else
		{
			if (FactsQuerySum("ACS_GPS_Activate") > 0)
			{
				FactsRemove("ACS_GPS_Activate");
			}
		}
	}

	function Aerondight_Check()
	{
		if (thePlayer.IsAnyWeaponHeld() && ACS_GetItem_Aerondight_Steel_Held() )
		{
			thePlayer.ManageAerondightBuff(true);
		}
	}

	var vACS_Human_Ice_Breathe_Controller: cACS_Human_Ice_Breathe_Controller;

	function Human_Ice_Breathe_Controller_Spawner()
	{
		vACS_Human_Ice_Breathe_Controller = new cACS_Human_Ice_Breathe_Controller in this;

		vACS_Human_Ice_Breathe_Controller.ACS_Human_Ice_Breathe_Controller_Engage();
	}

	var vACS_Red_Blade_Projectile_Fire: cACS_Red_Blade_Projectile_Fire;

	function Red_Blade_Projectile_Spawner()
	{
		vACS_Red_Blade_Projectile_Fire = new cACS_Red_Blade_Projectile_Fire in this;

		vACS_Red_Blade_Projectile_Fire.ACS_Red_Blade_Projectile_Engage();
	}

	var last_wearable_pocket_item_refresh_time : float;

	function ACS_wearable_pocket_items_cooldown(): bool 
	{
		return theGame.GetEngineTimeAsSeconds() - last_wearable_pocket_item_refresh_time > 0.5;
	}

	function ACS_refresh_wearable_pocket_items_cooldown() 
	{
		last_wearable_pocket_item_refresh_time = theGame.GetEngineTimeAsSeconds();
	}

	var vACS_Wearable_Pocket_Items_Controller: cACS_Wearable_Pocket_Items_Controller;

	function Wearable_Pocket_Items_Controller()
	{
		vACS_Wearable_Pocket_Items_Controller = new cACS_Wearable_Pocket_Items_Controller in this;

		if (ACS_wearable_pocket_items_cooldown())
		{
			ACS_refresh_wearable_pocket_items_cooldown();

			vACS_Wearable_Pocket_Items_Controller.ACS_Wearable_Pocket_Items_Controller_Engage();
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	public var m_thePlayer : CPlayer;

	protected var m_commonMapManager : CCommonMapManager;
	private var m_journalManager : CWitcherJournalManager;

	private var m_isNewGamePlus : bool;
	private var m_cachedQuestMapPins : array<ACSQuestMapPin>;
	private var m_quickUpdateEntityPins : bool; default m_quickUpdateEntityPins = false;

	protected var m_mapMenu : CR4MapMenu;
	protected var m_shownArea : EAreaName;
	private var m_questMapPinInstances : array<SCommonMapPinInstance>;
	private var m_questMapPins : array<ACSQuestMapPin>;

	private var m_currentTrackedQuest : CJournalQuest;
	private var m_currentHighlightedObjective : CJournalQuestObjective;

	function ACS_ProcessAllQuests()
	{
		var i, j, k : int;
		var questsList : array<CJournalBase>;
		var questItem : CJournalQuest;
		var questPhase : CJournalQuestPhase;
		var questObjective : CJournalQuestObjective;

		m_questMapPins.Clear();

		m_journalManager.GetActivatedOfType('CJournalQuest', questsList);

		for (i = 0; i < questsList.Size(); i += 1) 
		{
			questItem = (CJournalQuest) questsList[i];

			if (questItem) 
			{
				if (m_journalManager.GetEntryStatus(questItem) == JS_Active)
				{ 
					for (j = 0; j < questItem.GetNumChildren(); j += 1) 
					{
						questPhase = (CJournalQuestPhase) questItem.GetChild(j);

						if (questPhase) 
						{
							if (m_journalManager.GetEntryStatus(questPhase) == JS_Active)
							{ 
								for (k = 0; k < questPhase.GetNumChildren(); k += 1) 
								{
									questObjective = (CJournalQuestObjective) questPhase.GetChild(k);

									if (questObjective) 
									{
										if (m_journalManager.GetEntryStatus(questObjective) == JS_Active)
										{ 
											ACS_ProcessQuestObjective(questObjective);
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	private function ACS_ProcessQuestObjective(questObjective : CJournalQuestObjective)
	{
		var i : int;
		var questMapPin : CJournalQuestMapPin;

		for (i = 0; i < questObjective.GetNumChildren(); i += 1) 
		{
			questMapPin = (CJournalQuestMapPin) questObjective.GetChild(i);

			if (questMapPin) 
			{
				ACS_ProcessQuestMapPin(questObjective, questMapPin);
			}
		}
	}

	private function ACS_ProcessQuestMapPin(questObjective : CJournalQuestObjective, questMapPin : CJournalQuestMapPin)
	{
		var qpin : ACSQuestMapPin;

		qpin.tag = questMapPin.GetMapPinID();
		qpin.questArea = questObjective.GetWorld();
		qpin.questObjective = questObjective;
		qpin.titleStringId = questObjective.GetParentQuest().GetTitleStringId();
		qpin.descriptionStringId = questObjective.GetTitleStringId();
		qpin.questLevel = ACS_GetQuestLevel(questObjective.GetParentQuest());

		ACS_SetAreaAndPositionForQuestMapPin(qpin);

		m_questMapPins.PushBack(qpin);
	}

	private function ACS_GetQuestLevel(questItem : CJournalQuest) : int
	{
		var i, j : int;
		var questLevels : C2dArray;
		var questName : string;
		var questLevel : int;

		for (i = 0; i < theGame.questLevelsContainer.Size(); i += 1) 
		{
			questLevels = theGame.questLevelsContainer[i];

			for (j = 0; j < questLevels.GetNumRows(); j += 1) 
			{
				questName = questLevels.GetValueAtAsName(0, j);

				if (questName == questItem.baseName) 
				{
					questLevel = NameToInt(questLevels.GetValueAtAsName(1, j));

					if (m_isNewGamePlus && (questLevel > 1)) 
					{
						questLevel += theGame.params.GetNewGamePlusLevel();
					}

					break;
				}
			}
		}

		return questLevel;
	}

	private function ACS_SetAreaAndPositionForQuestMapPin(out qpin : ACSQuestMapPin)
	{
		var i : int;
		var unknownArea : bool = (qpin.questArea == AN_Undefined);
		var pinForShownArea : bool = !unknownArea;
		var pinInstances : array<SCommonMapPinInstance>;
		var pos : Vector;

		if (pinForShownArea || unknownArea) 
		{
			for (i = 0; i < m_questMapPinInstances.Size(); i += 1) 
			{
				if (m_questMapPinInstances[i].tag == qpin.tag) 
				{
					pos = m_questMapPinInstances[i].position;

					qpin.position = pos;

					qpin.areaPosType = ACSAreaPos_Invalid;

					if (unknownArea) 
					{
						qpin.questArea = m_shownArea;
					}

					return;
				}
			}
		}


		if (qpin.questObjective.GetParentQuest().guid == m_currentTrackedQuest.guid) 
		{
			qpin.areaPosType = ACSAreaPos_Unknown;

			return;
		}

		for (i = 0; i < m_cachedQuestMapPins.Size(); i += 1)
		{
			if (m_cachedQuestMapPins[i].tag == qpin.tag) 
			{
				if (m_cachedQuestMapPins[i].areaPosType != ACSAreaPos_Unknown) 
				{
					pos = m_cachedQuestMapPins[i].position;

					qpin.position = pos;
					qpin.areaPosType = m_cachedQuestMapPins[i].areaPosType;

					if (unknownArea) 
					{
						qpin.questArea = m_cachedQuestMapPins[i].questArea;
					}

					return;
				}

				break;
			}
		}

		if (pinForShownArea || unknownArea) 
		{
			m_journalManager.SetTrackedQuest(qpin.questObjective.GetParentQuest());

			m_journalManager.SetHighlightedObjective(qpin.questObjective);

			//pinInstances = m_commonMapManager.GetMapPinInstances(m_commonMapManager.GetWorldPathFromAreaType(m_shownArea));

			pinInstances.Clear();

			pinInstances = theGame.GetCommonMapManager().GetMapPinInstances(theGame.GetWorld().GetPath());

			for (i = 0; i < pinInstances.Size(); i += 1) 
			{
				if (pinInstances[i].isDiscovered || pinInstances[i].isKnown) 
				{
					if ((pinInstances[i].tag == qpin.tag) 
					&& m_commonMapManager.IsQuestPinType(pinInstances[i].type)
					&& (pinInstances[i].guid == qpin.questObjective.guid)) 
					{
						pos = pinInstances[i].position;

						qpin.position = pos;
						qpin.areaPosType = ACSAreaPos_Valid;

						if (unknownArea) 
						{
							qpin.questArea = m_shownArea;
						}

						return;
					}
				}
			}
		}

		if (pinForShownArea || unknownArea)
		{
			qpin.areaPosType = ACSAreaPos_Invalid;
		} 
		else 
		{
			qpin.areaPosType = ACSAreaPos_Unknown;
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function GuidingEntities()
	{
		this.m_thePlayer = thePlayer;

		this.m_commonMapManager = theGame.GetCommonMapManager();
		this.m_journalManager = theGame.GetJournalManager();

		m_isNewGamePlus = FactsQuerySum("NewGamePlus") > 0;

		m_currentTrackedQuest = m_journalManager.GetTrackedQuest();
		m_currentHighlightedObjective = m_journalManager.GetHighlightedObjective();

		if (!m_quickUpdateEntityPins) 
		{
			ACS_ProcessAllQuests();
		}

		if (m_currentTrackedQuest.guid != m_journalManager.GetTrackedQuest().guid) 
		{
			m_journalManager.SetTrackedQuest(m_currentTrackedQuest);
		}
		if (m_currentHighlightedObjective.guid != m_journalManager.GetHighlightedObjective().guid) 
		{
			m_journalManager.SetHighlightedObjective(m_currentHighlightedObjective);
		}

		CreateGuidingEntities();

		if (!m_quickUpdateEntityPins) 
		{
			m_cachedQuestMapPins = m_questMapPins;
		}

		ACS_Guiding_Light_Untracked_Marker_Actual();

		if (FactsQuerySum("ACS_Guiding_Light_Untracked_Quest_Marker_Distance_Available") <= 0)
		{
			FactsAdd("ACS_Guiding_Light_Untracked_Quest_Marker_Distance_Available");
		}
	}

	var ACS_Untracked_Quest_Marker_IDs : array<int>;
	var ACS_Untracked_Quest_Marker_Distance_IDs : array<int>;

	function ACS_Guiding_Light_Untracked_Quest_Marker_Remove()
	{
		var hud 								: CR4ScriptedHud;
		var module								: CR4HudModuleOneliners;
		var markers 							: array<CEntity>;
		var i, markerID							: int;

		markers.Clear();

		theGame.GetEntitiesByTag( 'ACS_All_Tracked_Quest_Entity', markers );	

		for( i = 0; i < markers.Size(); i += 1 )
		{
			hud = (CR4ScriptedHud)theGame.GetHud();
			module = (CR4HudModuleOneliners)hud.GetHudModule("OnelinersModule");

			markerID = i + 70359;

			module.OnRemoveOneliner( markerID );
		}
	}

	function FormatIconPath( icon_path : String ) : string
	{
		//var fontSize : int;

		//fontSize = 32;

		//return "<img src='img://" + icon_path + "' height='" + (fontSize + 40) + "' width='" + (fontSize + 15) + "' vspace='" + (10) + "' />&nbsp;";

		return "<img src='img://" + icon_path + "' vspace='" + (7) + "' />&nbsp;";
	}

	function ACS_Guiding_Light_Untracked_Marker_Actual()
	{
		var hud 								: CR4ScriptedHud;
		var module								: CR4HudModuleOneliners;
		var id 									: int;
		var iconPath 							: string;
		var markers 							: array<CEntity>;
		var i, markerID							: int;
		var distance 							: float;
		
		markers.Clear();

		theGame.GetEntitiesByTag( 'ACS_All_Tracked_Quest_Entity', markers );	

		ACS_Untracked_Quest_Marker_IDs.Clear();

		for( i = 0; i < markers.Size(); i += 1 )
		{
			//iconPath = "<img src=\"img://icons/inventory/acs_marker_quest_untracked.xbm\"";

			iconPath = FormatIconPath("icons/inventory/acs_marker_quest_untracked.xbm");

			hud = (CR4ScriptedHud)theGame.GetHud();
			module = (CR4HudModuleOneliners)hud.GetHudModule("OnelinersModule");

			markerID = i + 70359;

			module.OnRemoveOneliner( markerID );

			module.OnCreateOneliner( markers[i], iconPath, markerID );

			ACS_Untracked_Quest_Marker_IDs.PushBack(markerID);
		}
	}

	function ACS_Guiding_Light_Untracked_Marker_Distance_Remove()
	{
		var hud 								: CR4ScriptedHud;
		var module								: CR4HudModuleOneliners;
		var markers 							: array<CEntity>;
		var i, markerID							: int;

		markers.Clear();

		theGame.GetEntitiesByTag( 'ACS_All_Tracked_Quest_Entity', markers );	

		for( i = 0; i < markers.Size(); i += 1 )
		{
			hud = (CR4ScriptedHud)theGame.GetHud();
			module = (CR4HudModuleOneliners)hud.GetHudModule("OnelinersModule");

			markerID = i + 80359;

			module.OnRemoveOneliner( markerID );
		}
	}

	function ACS_Guiding_Light_Untracked_Marker_Distance_Actual()
	{
		var hud 								: CR4ScriptedHud;
		var module								: CR4HudModuleOneliners;
		var id 									: int;
		var iconPath 							: string;
		var markers 							: array<CEntity>;
		var i, j, markerID						: int;
		var playerPosition, markerPosition 		: Vector;
		var distance 							: float;
		var qpin 								: String;
		var untracked_quest_names 				: array<String>;
		
		markers.Clear();

		ACS_Untracked_Quest_Marker_Distance_IDs.Clear();

		theGame.GetEntitiesByTag( 'ACS_All_Tracked_Quest_Entity', markers );	

		untracked_quest_names = GetUntrackedQuestNames();

		for( i = 0; i < markers.Size(); i += 1 )
		{
			playerPosition = thePlayer.GetWorldPosition();

			markerPosition = markers[i].GetWorldPosition();

			distance = VecDistance(playerPosition, markerPosition);

			if (theGame.IsFocusModeActive())
			{
				qpin = untracked_quest_names[i];

				iconPath = "<font size = '16' color = '#918c3f'>" + qpin + "<br/><br/><br/><br/>" + FloatToStringPrec(distance, 0) + "m" + "</font>";
			}
			else
			{
				iconPath = "<br/><br/>" + "<font size = '16' color = '#918c3f'>" + FloatToStringPrec(distance, 0) + "m" + "</font>";
			}

			hud = (CR4ScriptedHud)theGame.GetHud();
			module = (CR4HudModuleOneliners)hud.GetHudModule("OnelinersModule");

			markerID = i + 80359;

			module.OnRemoveOneliner( markerID );

			module.OnCreateOneliner( markers[i], iconPath, markerID );

			ACS_Untracked_Quest_Marker_Distance_IDs.PushBack(markerID);
		}
	}

	var acs_untracked_quest_names							: array<string>;

	private function CreateGuidingEntities()
	{
		var i, j 								: int;
		var qpin 								: ACSQuestMapPin;
		var skip 								: bool;
		var pinPos, playerPos 					: Vector;
		var rot, newRot          				: EulerAngles;
		var ent									: CEntity;
		var temp								: CEntityTemplate;
		var targetDistance						: float;
		var pinTitleID							: int;

		ACSTrackedQuestsEntsDestroy();

		acs_untracked_quest_names.Clear();

		for (i = 0; i < m_questMapPins.Size(); i += 1) 
		{
			qpin = m_questMapPins[i];
			pinPos = qpin.position;
			pinTitleID = qpin.titleStringId;

			playerPos = ACSFixZAxis(Vector(0,0,0));

			//pinPos.Z = playerPos.Z;
			
			if ((qpin.areaPosType == ACSAreaPos_Valid)
			&& (qpin.questObjective.GetParentQuest().guid != m_currentTrackedQuest.guid)) 
			{
				rot = thePlayer.GetWorldRotation();

				rot.Pitch += 180;

				rot.Yaw += 180;

				temp = (CEntityTemplate)LoadResource( "dlc\dlc_acs\data\fx\guiding_light_marker_old.w2ent", true );

				ent = (CEntity)theGame.CreateEntity( temp, pinPos, rot );

				ent.AddTag('ACS_All_Tracked_Quest_Entity');

				ent.AddTag('ACS_HUD_Marker_Entity');

				acs_untracked_quest_names.PushBack( GetLocStringById(pinTitleID) );
			}
		}
	}

	function GetUntrackedQuestNames() : array<string>
	{
		return acs_untracked_quest_names;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	var ACS_Quest_Marker_ID : int;
	default ACS_Quest_Marker_ID = 70351;

	var ACS_Quest_Marker_Distance_ID : int;
	default ACS_Quest_Marker_Distance_ID = 70355;

	function ACS_GetTrackedQuestName() : string
	{
		var trackedQuests	: CJournalQuest;
		trackedQuests = theGame.GetJournalManager().GetTrackedQuest();
		return GetLocStringById(trackedQuests.GetTitleStringId());
	}

	function ACS_Get_Quest_Marker_ID() : int
	{
		return ACS_Quest_Marker_ID;
	}

	function ACS_Set_Quest_Marker_ID( id : int )
	{
		id = ACS_Quest_Marker_ID;
	}

	function ACS_Guiding_Light_Marker_Remove()
	{
		var hud : CR4ScriptedHud;
		var module : CR4HudModuleOneliners;

		hud = (CR4ScriptedHud)theGame.GetHud();
		module = (CR4HudModuleOneliners)hud.GetHudModule("OnelinersModule");

		module.OnRemoveOneliner( ACS_Quest_Marker_ID );
	}

	function ACS_Guiding_Light_Quest_Marker_Actual()
	{
		var hud : CR4ScriptedHud;
		var module : CR4HudModuleOneliners;
		var questmarkerid : int;
		var iconPath : string;

		//iconPath = "<img src=\"img://icons/inventory/acs_marker_quest.xbm\"";

		iconPath = FormatIconPath("icons/inventory/acs_marker_quest.xbm");

		hud = (CR4ScriptedHud)theGame.GetHud();
		module = (CR4HudModuleOneliners)hud.GetHudModule("OnelinersModule");

		module.OnRemoveOneliner( ACS_Quest_Marker_ID );

		module.OnCreateOneliner( GetACSGuidingLightMarker(), iconPath, ACS_Quest_Marker_ID );
	}

	function ACS_Guiding_Light_Quest_Marker_Distance_Remove()
	{
		var hud : CR4ScriptedHud;
		var module : CR4HudModuleOneliners;

		hud = (CR4ScriptedHud)theGame.GetHud();
		module = (CR4HudModuleOneliners)hud.GetHudModule("OnelinersModule");

		module.OnRemoveOneliner( ACS_Quest_Marker_Distance_ID );
	}

	function ACS_Guiding_Light_Quest_Marker_Distance_Actual()
	{
		var hud : CR4ScriptedHud;
		var module : CR4HudModuleOneliners;
		var questmarkerid : int;
		var iconPath : string;
		var playerPosition, markerPosition : Vector;
		var distance : float;

		playerPosition = thePlayer.GetWorldPosition();

		markerPosition = GetACSGuidingLightMarker().GetWorldPosition();

		distance = VecDistance(playerPosition, markerPosition);

		if (theGame.IsFocusModeActive())
		{
			iconPath = "<font size = '16' color = '#B58D45'>" + ACS_GetTrackedQuestName() + "<br/><br/><br/><br/>" + FloatToStringPrec(distance, 0) + "m" + "</font>";
		}
		else
		{
			iconPath = "<br/><br/>" + "<font size = '16' color = '#B58D45'>" + FloatToStringPrec(distance, 0) + "m" + "</font>";
		}

		hud = (CR4ScriptedHud)theGame.GetHud();
		module = (CR4HudModuleOneliners)hud.GetHudModule("OnelinersModule");

		module.OnRemoveOneliner( ACS_Quest_Marker_Distance_ID );

		module.OnCreateOneliner( GetACSGuidingLightMarker(), iconPath, ACS_Quest_Marker_Distance_ID );
	}

	function Guiding_Light()
	{
		var position							: Vector;
		var rot, newRot          				: EulerAngles;
		var ent									: CEntity;
		var temp								: CEntityTemplate;
		var targetDistance						: float;
		var hud 								: CR4ScriptedHud;
		var module 								: CR4HudModuleOneliners;
		var id 									: int;
		var iconPath 							: string;

		if ( !ACS_GetQuestPoint() )
		{
			if(GetACSGuidingLightMarker())
			{
				GetACSGuidingLightMarker().Destroy();
			}

			return;
		}

		if (theGame.IsDialogOrCutscenePlaying() 
		|| thePlayer.IsInNonGameplayCutscene() 
		|| thePlayer.IsInGameplayScene() 
		|| theGame.IsCurrentlyPlayingNonGameplayScene()
		|| theGame.IsFading()
		|| theGame.IsBlackscreen()
		|| theGame.IsPaused()
		|| ACS_Quest_Marker_Despawn_Delay() == 0
		)
		{
			if(GetACSGuidingLightMarker())
			{
				GetACSGuidingLightMarker().Destroy();
			}

			return;
		}
		else
		{
			if (!ACS_Guiding_Light_Enabled())
			{
				if (GetACSGuidingLightMarker().IsEffectActive('pridefall_marker_red', false))
				{
					GetACSGuidingLightMarker().DestroyEffect('pridefall_marker_red');
				}
			}
			else
			{
				if (!GetACSGuidingLightMarker().IsEffectActive('pridefall_marker_red', false))
				{
					GetACSGuidingLightMarker().PlayEffectSingle('pridefall_marker_red');
				}
			}
		}

		targetDistance = VecDistanceSquared2D( GetWitcherPlayer().GetWorldPosition(), GetACSGuidingLightMarker().GetWorldPosition() ) ;

		ACS_GetQuestPointPosition(position);	

		rot = thePlayer.GetWorldRotation();

		rot.Pitch += 180;

		rot.Yaw += 180;

		if(!GetACSGuidingLightMarker())
		{
			temp = (CEntityTemplate)LoadResource( 
				
				"dlc\dlc_acs\data\fx\guiding_light_marker_old.w2ent"
				
				, true );

			ent = (CEntity)theGame.CreateEntity( temp, position, rot );

			ent.AddTag('ACS_Guiding_Light_Marker');

			ent.AddTag('ACS_HUD_Marker_Entity');
		}
		else
		{
			newRot = VecToRotation( theCamera.GetCameraDirection() );

			newRot.Yaw += 180;

			newRot.Pitch = rot.Pitch;

			newRot.Roll = rot.Roll;

			GetACSGuidingLightMarker().TeleportWithRotation( position, newRot );

			if(theGame.GetFocusModeController().CanUseFocusMode()
			&& theGame.IsFocusModeActive())
			{
				if (FactsQuerySum("ACS_Guiding_Light_Quest_Marker_Stopping") > 0)
				{
					FactsRemove("ACS_Guiding_Light_Quest_Marker_Stopping");
				}

				if (FactsQuerySum("ACS_Guiding_Light_Quest_Marker_Stopped") > 0)
				{
					FactsRemove("ACS_Guiding_Light_Quest_Marker_Stopped");
				}

				RemoveTimer('GetACSGuidingLightQuestMarker_EffectStoppingDelay');

				RemoveTimer('GetACSGuidingLightQuestMarker_EffectStopDelay');

				ACS_Guiding_Light_Quest_Marker_Actual();

				if (FactsQuerySum("ACS_Guiding_Light_Quest_Marker_Distance_Available") <= 0)
				{
					FactsAdd("ACS_Guiding_Light_Quest_Marker_Distance_Available");
				}
				
				if (ACS_Marker_Visual_Bubble_Enabled())
				{
					if (targetDistance <= 5 * 5)
					{
						GetACSGuidingLightMarker().StopEffect('quest_marker_smaller');
						GetACSGuidingLightMarker().StopEffect('quest_marker_small');
						GetACSGuidingLightMarker().StopEffect('quest_marker');
						GetACSGuidingLightMarker().StopEffect('quest_marker_bigger');
						GetACSGuidingLightMarker().StopEffect('quest_marker_biggest');
						GetACSGuidingLightMarker().StopEffect('quest_marker_biggest_x2');
						GetACSGuidingLightMarker().StopEffect('quest_marker_biggest_x4');
					}
					else if (targetDistance > 5 * 5 && targetDistance <= 10 * 10)
					{
						GetACSGuidingLightMarker().StopEffect('quest_marker_small');
						GetACSGuidingLightMarker().StopEffect('quest_marker');
						GetACSGuidingLightMarker().StopEffect('quest_marker_bigger');
						GetACSGuidingLightMarker().StopEffect('quest_marker_biggest');
						GetACSGuidingLightMarker().StopEffect('quest_marker_biggest_x2');
						GetACSGuidingLightMarker().StopEffect('quest_marker_biggest_x4');

						if (!GetACSGuidingLightMarker().IsEffectActive('quest_marker_smaller', false))
						{
							GetACSGuidingLightMarker().PlayEffectSingle('quest_marker_smaller');
						}
					}
					else if (targetDistance > 10 * 10 && targetDistance <= 25 * 25)
					{
						GetACSGuidingLightMarker().StopEffect('quest_marker_smaller');
						GetACSGuidingLightMarker().StopEffect('quest_marker');
						GetACSGuidingLightMarker().StopEffect('quest_marker_bigger');
						GetACSGuidingLightMarker().StopEffect('quest_marker_biggest');
						GetACSGuidingLightMarker().StopEffect('quest_marker_biggest_x2');
						GetACSGuidingLightMarker().StopEffect('quest_marker_biggest_x4');

						if (!GetACSGuidingLightMarker().IsEffectActive('quest_marker_small', false))
						{
							GetACSGuidingLightMarker().PlayEffectSingle('quest_marker_small');
						}
					}
					else if (targetDistance > 25 * 25 && targetDistance <= 50 * 50)
					{
						GetACSGuidingLightMarker().StopEffect('quest_marker_smaller');
						GetACSGuidingLightMarker().StopEffect('quest_marker_small');
						GetACSGuidingLightMarker().StopEffect('quest_marker_bigger');
						GetACSGuidingLightMarker().StopEffect('quest_marker_biggest');
						GetACSGuidingLightMarker().StopEffect('quest_marker_biggest_x2');
						GetACSGuidingLightMarker().StopEffect('quest_marker_biggest_x4');

						if (!GetACSGuidingLightMarker().IsEffectActive('quest_marker', false))
						{
							GetACSGuidingLightMarker().PlayEffectSingle('quest_marker');
						}
					}
					else if (targetDistance > 50 * 50 && targetDistance <= 100 * 100)
					{
						GetACSGuidingLightMarker().StopEffect('quest_marker_smaller');
						GetACSGuidingLightMarker().StopEffect('quest_marker_small');
						GetACSGuidingLightMarker().StopEffect('quest_marker');
						GetACSGuidingLightMarker().StopEffect('quest_marker_biggest');
						GetACSGuidingLightMarker().StopEffect('quest_marker_biggest_x2');
						GetACSGuidingLightMarker().StopEffect('quest_marker_biggest_x4');

						if (!GetACSGuidingLightMarker().IsEffectActive('quest_marker_bigger', false))
						{
							GetACSGuidingLightMarker().PlayEffectSingle('quest_marker_bigger');
						}
					}
					else if (targetDistance > 100 * 100 )
					{
						GetACSGuidingLightMarker().StopEffect('quest_marker_smaller');
						GetACSGuidingLightMarker().StopEffect('quest_marker_small');
						GetACSGuidingLightMarker().StopEffect('quest_marker');
						GetACSGuidingLightMarker().StopEffect('quest_marker_bigger');
						GetACSGuidingLightMarker().StopEffect('quest_marker_biggest_x2');
						GetACSGuidingLightMarker().StopEffect('quest_marker_biggest_x4');

						if (!GetACSGuidingLightMarker().IsEffectActive('quest_marker_biggest', false))
						{
							GetACSGuidingLightMarker().PlayEffectSingle('quest_marker_biggest');
						}
					}
				}
			}
			else
			{
				if ( FactsQuerySum("ACS_Guiding_Light_Quest_Marker_Stopping") <= 0 )
				{
					if ( FactsQuerySum("ACS_Guiding_Light_Quest_Marker_Stopped") <= 0 )
					{
						AddTimer('GetACSGuidingLightQuestMarker_EffectStoppingDelay', 0.00000000000000000001, true);

						AddTimer('GetACSGuidingLightQuestMarker_EffectStopDelay', ACS_Quest_Marker_Despawn_Delay(), false);

						FactsAdd("ACS_Guiding_Light_Quest_Marker_Stopped", 1, -1);
					}

					FactsAdd("ACS_Guiding_Light_Quest_Marker_Stopping", 1, -1);
				}
			}
		}
	}

	timer function GetACSGuidingLightQuestMarker_EffectStoppingDelay( time : float , id : int )
	{
		var targetDistance						: float;

		targetDistance = VecDistanceSquared2D( GetWitcherPlayer().GetWorldPosition(), GetACSGuidingLightMarker().GetWorldPosition() ) ;

		if (ACS_Marker_Visual_Bubble_Enabled())
		{
			if (targetDistance <= 5 * 5)
			{
				GetACSGuidingLightMarker().StopEffect('quest_marker_smaller');
				GetACSGuidingLightMarker().StopEffect('quest_marker_small');
				GetACSGuidingLightMarker().StopEffect('quest_marker');
				GetACSGuidingLightMarker().StopEffect('quest_marker_bigger');
				GetACSGuidingLightMarker().StopEffect('quest_marker_biggest');
				GetACSGuidingLightMarker().StopEffect('quest_marker_biggest_x2');
				GetACSGuidingLightMarker().StopEffect('quest_marker_biggest_x4');
			}
			else if (targetDistance > 5 * 5 && targetDistance <= 10 * 10)
			{
				GetACSGuidingLightMarker().StopEffect('quest_marker_small');
				GetACSGuidingLightMarker().StopEffect('quest_marker');
				GetACSGuidingLightMarker().StopEffect('quest_marker_bigger');
				GetACSGuidingLightMarker().StopEffect('quest_marker_biggest');
				GetACSGuidingLightMarker().StopEffect('quest_marker_biggest_x2');
				GetACSGuidingLightMarker().StopEffect('quest_marker_biggest_x4');

				if (!GetACSGuidingLightMarker().IsEffectActive('quest_marker_smaller', false))
				{
					GetACSGuidingLightMarker().PlayEffectSingle('quest_marker_smaller');
				}
			}
			else if (targetDistance > 10 * 10 && targetDistance <= 25 * 25)
			{
				GetACSGuidingLightMarker().StopEffect('quest_marker_smaller');
				GetACSGuidingLightMarker().StopEffect('quest_marker');
				GetACSGuidingLightMarker().StopEffect('quest_marker_bigger');
				GetACSGuidingLightMarker().StopEffect('quest_marker_biggest');
				GetACSGuidingLightMarker().StopEffect('quest_marker_biggest_x2');
				GetACSGuidingLightMarker().StopEffect('quest_marker_biggest_x4');

				if (!GetACSGuidingLightMarker().IsEffectActive('quest_marker_small', false))
				{
					GetACSGuidingLightMarker().PlayEffectSingle('quest_marker_small');
				}
			}
			else if (targetDistance > 25 * 25 && targetDistance <= 50 * 50)
			{
				GetACSGuidingLightMarker().StopEffect('quest_marker_smaller');
				GetACSGuidingLightMarker().StopEffect('quest_marker_small');
				GetACSGuidingLightMarker().StopEffect('quest_marker_bigger');
				GetACSGuidingLightMarker().StopEffect('quest_marker_biggest');
				GetACSGuidingLightMarker().StopEffect('quest_marker_biggest_x2');
				GetACSGuidingLightMarker().StopEffect('quest_marker_biggest_x4');

				if (!GetACSGuidingLightMarker().IsEffectActive('quest_marker', false))
				{
					GetACSGuidingLightMarker().PlayEffectSingle('quest_marker');
				}
			}
			else if (targetDistance > 50 * 50 && targetDistance <= 100 * 100)
			{
				GetACSGuidingLightMarker().StopEffect('quest_marker_smaller');
				GetACSGuidingLightMarker().StopEffect('quest_marker_small');
				GetACSGuidingLightMarker().StopEffect('quest_marker');
				GetACSGuidingLightMarker().StopEffect('quest_marker_biggest');
				GetACSGuidingLightMarker().StopEffect('quest_marker_biggest_x2');
				GetACSGuidingLightMarker().StopEffect('quest_marker_biggest_x4');

				if (!GetACSGuidingLightMarker().IsEffectActive('quest_marker_bigger', false))
				{
					GetACSGuidingLightMarker().PlayEffectSingle('quest_marker_bigger');
				}
			}
			else if (targetDistance > 100 * 100)
			{
				GetACSGuidingLightMarker().StopEffect('quest_marker_smaller');
				GetACSGuidingLightMarker().StopEffect('quest_marker_small');
				GetACSGuidingLightMarker().StopEffect('quest_marker');
				GetACSGuidingLightMarker().StopEffect('quest_marker_bigger');
				GetACSGuidingLightMarker().StopEffect('quest_marker_biggest_x2');
				GetACSGuidingLightMarker().StopEffect('quest_marker_biggest_x4');

				if (!GetACSGuidingLightMarker().IsEffectActive('quest_marker_biggest', false))
				{
					GetACSGuidingLightMarker().PlayEffectSingle('quest_marker_biggest');
				}
			}
		}
	}

	timer function GetACSGuidingLightQuestMarker_EffectStopDelay( time : float , id : int )
	{
		RemoveTimer('GetACSGuidingLightQuestMarker_EffectStoppingDelay');

		GetACSGuidingLightMarker().StopEffect('quest_marker_smaller');
		GetACSGuidingLightMarker().StopEffect('quest_marker_small');
		GetACSGuidingLightMarker().StopEffect('quest_marker');
		GetACSGuidingLightMarker().StopEffect('quest_marker_bigger');
		GetACSGuidingLightMarker().StopEffect('quest_marker_biggest');
		GetACSGuidingLightMarker().StopEffect('quest_marker_biggest_x2');
		GetACSGuidingLightMarker().StopEffect('quest_marker_biggest_x4');

		ACS_Guiding_Light_Marker_Remove();

		ACS_Guiding_Light_Quest_Marker_Distance_Remove();

		if (FactsQuerySum("ACS_Guiding_Light_Quest_Marker_Distance_Available") > 0)
		{
			FactsRemove("ACS_Guiding_Light_Quest_Marker_Distance_Available");
		}

		if (FactsQuerySum("ACS_Guiding_Light_Quest_Marker_Stopped") > 0)
		{
			FactsRemove("ACS_Guiding_Light_Quest_Marker_Stopped");
		}
	}

	/*
	function ACS_GetClosestPOIPointPosition(out pinPos : Vector) : bool
	{
		var i, size 					: int;
		var pinToPlayerDistances 		: array< float >;
		var closestPinIndex				: int;
		var mappins						: array<SEntityMapPinInfo>;
			
		mappins = ACS_GetPointOfInterests();

		size = mappins.Size();

		pinToPlayerDistances.Resize( size );

		if ( size > 0 )
		{
			for ( i = 0; i < size; i += 1 )
			{
				pinToPlayerDistances[i] = VecDistanceSquared2D( mappins[i].entityPosition, thePlayer.GetWorldPosition() );
			}

			closestPinIndex = ArrayFindMinF( pinToPlayerDistances );

			pinPos = mappins[ closestPinIndex ].entityPosition;

			return true;
		}

		return false;
	}
	*/


	function ACS_GetClosestPOIPointPosition(out pinPos : Vector) : bool
	{
		var i, size 					: int;
		var pinToPlayerDistances 		: array< float >;
		var closestPinIndex				: int;
		var mappins						: array<Vector>;
			
		mappins = ACS_GetPointOfInterestLocations();

		size = mappins.Size();

		pinToPlayerDistances.Resize( size );

		if ( size > 0 )
		{
			for ( i = 0; i < size; i += 1 )
			{
				pinToPlayerDistances[i] = VecDistanceSquared2D( mappins[i], thePlayer.GetWorldPosition() );
			}

			closestPinIndex = ArrayFindMinF( pinToPlayerDistances );

			pinPos = mappins[ closestPinIndex ];

			return true;
		}

		return false;
	}

	var ACS_POI_Marker_ID : int;
	default ACS_POI_Marker_ID = 70352;

	var ACS_POI_Marker_Distance_ID : int;
	default ACS_POI_Marker_Distance_ID = 70356;

	function ACS_Get_POI_Marker_ID() : int
	{
		return ACS_POI_Marker_ID;
	}

	function ACS_Set_POI_Marker_ID( id : int )
	{
		id = ACS_POI_Marker_ID;
	}

	function ACS_Guiding_Light_POI_Marker_Remove()
	{
		var hud : CR4ScriptedHud;
		var module : CR4HudModuleOneliners;

		hud = (CR4ScriptedHud)theGame.GetHud();
		module = (CR4HudModuleOneliners)hud.GetHudModule("OnelinersModule");

		module.OnRemoveOneliner( ACS_POI_Marker_ID );
	}

	function ACS_Quest_POI_Marker_Actual()
	{
		var hud : CR4ScriptedHud;
		var module : CR4HudModuleOneliners;
		var id : int;
		var iconPath : string;

		//iconPath = "<img src=\"img://icons/inventory/acs_marker_poi.xbm\"";

		iconPath = FormatIconPath("icons/inventory/acs_marker_poi.xbm");

		hud = (CR4ScriptedHud)theGame.GetHud();
		module = (CR4HudModuleOneliners)hud.GetHudModule("OnelinersModule");

		module.OnRemoveOneliner( ACS_POI_Marker_ID );

		module.OnCreateOneliner( GetACSGuidingLightPOIMarker(), iconPath, ACS_POI_Marker_ID );
	}

	function ACS_Guiding_Light_POI_Marker_Distance_Remove()
	{
		var hud : CR4ScriptedHud;
		var module : CR4HudModuleOneliners;

		hud = (CR4ScriptedHud)theGame.GetHud();
		module = (CR4HudModuleOneliners)hud.GetHudModule("OnelinersModule");

		module.OnRemoveOneliner( ACS_POI_Marker_Distance_ID );
	}

	function ACS_Guiding_Light_POI_Marker_Distance_Actual()
	{
		var hud : CR4ScriptedHud;
		var module : CR4HudModuleOneliners;
		var questmarkerid : int;
		var iconPath : string;
		var playerPosition, markerPosition : Vector;
		var distance : float;

		playerPosition = thePlayer.GetWorldPosition();

		markerPosition = GetACSGuidingLightPOIMarker().GetWorldPosition();

		distance = VecDistance(playerPosition, markerPosition);

		iconPath = "<br/><br/>" + "<font size = '16' color = '#b5b5b5'>" + FloatToStringPrec(distance, 0) + "m" + "</font>";

		hud = (CR4ScriptedHud)theGame.GetHud();
		module = (CR4HudModuleOneliners)hud.GetHudModule("OnelinersModule");

		module.OnRemoveOneliner( ACS_POI_Marker_Distance_ID );

		module.OnCreateOneliner( GetACSGuidingLightPOIMarker(), iconPath, ACS_POI_Marker_Distance_ID );
	}

	function Guiding_Light_POI_Scan()
	{
		var position							: Vector;
		var rot, newRot          				: EulerAngles;
		var ent									: CEntity;
		var temp								: CEntityTemplate;
		var targetDistance						: float;
		var mappins								: array<Vector>;
		var size 								: int;

		mappins = ACS_GetPointOfInterestLocations();

		size = mappins.Size();

		if ( theGame.IsDialogOrCutscenePlaying() 
		|| thePlayer.IsInNonGameplayCutscene() 
		|| thePlayer.IsInGameplayScene() 
		|| theGame.IsCurrentlyPlayingNonGameplayScene()
		|| theGame.IsFading()
		|| theGame.IsBlackscreen()
		|| theGame.IsPaused() 
		|| size <= 0
		|| ACS_POI_Marker_Despawn_Delay() == 0
		)
		{
			if(GetACSGuidingLightPOIMarker())
			{
				GetACSGuidingLightPOIMarker().Destroy();
			}

			return;
		}

		targetDistance = VecDistanceSquared2D( GetWitcherPlayer().GetWorldPosition(), GetACSGuidingLightPOIMarker().GetWorldPosition() ) ;

		ACS_GetClosestPOIPointPosition(position);

		rot = thePlayer.GetWorldRotation();

		rot.Pitch += 180;

		rot.Yaw += 180;

		if(!GetACSGuidingLightPOIMarker())
		{
			temp = (CEntityTemplate)LoadResource( "dlc\dlc_acs\data\fx\guiding_light_marker_old.w2ent", true );

			ent = (CEntity)theGame.CreateEntity( temp, position, rot );

			ent.AddTag('ACS_Guiding_Light_POI_Marker');

			ent.AddTag('ACS_HUD_Marker_Entity');
		}
		else
		{
			newRot = VecToRotation( theCamera.GetCameraDirection() );

			newRot.Yaw += 180;

			newRot.Pitch = rot.Pitch;

			newRot.Roll = rot.Roll;

			GetACSGuidingLightPOIMarker().TeleportWithRotation( position, newRot );

			if(theGame.GetFocusModeController().CanUseFocusMode()
			&& theGame.IsFocusModeActive())
			{
				if (FactsQuerySum("ACS_Guiding_Light_POI_Marker_Stopping") > 0)
				{
					FactsRemove("ACS_Guiding_Light_POI_Marker_Stopping");
				}

				if (FactsQuerySum("ACS_Guiding_Light_POI_Marker_Stopped") > 0)
				{
					FactsRemove("ACS_Guiding_Light_POI_Marker_Stopped");
				}

				RemoveTimer('GetACSGuidingLightPOIMarker_EffectStoppingDelay');

				RemoveTimer('GetACSGuidingLightPOIMarker_EffectStopDelay');

				ACS_Quest_POI_Marker_Actual();

				if (FactsQuerySum("ACS_Guiding_Light_POI_Marker_Distance_Available") <= 0)
				{
					FactsAdd("ACS_Guiding_Light_POI_Marker_Distance_Available");
				}

				if (ACS_Marker_Visual_Bubble_Enabled())
				{
					if (targetDistance <= 5 * 5)
					{
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker_smaller');
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker_small');
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker');
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker_bigger');
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest');
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest_x2');
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest_x4');
					}
					else if (targetDistance > 5 * 5 && targetDistance <= 10 * 10)
					{
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker_small');
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker');
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker_bigger');
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest');
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest_x2');
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest_x4');

						if (!GetACSGuidingLightPOIMarker().IsEffectActive('poi_marker_smaller', false))
						{
							GetACSGuidingLightPOIMarker().PlayEffectSingle('poi_marker_smaller');
						}
					}
					else if (targetDistance > 10 * 10 && targetDistance <= 25 * 25)
					{
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker_smaller');
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker');
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker_bigger');
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest');
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest_x2');
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest_x4');

						if (!GetACSGuidingLightPOIMarker().IsEffectActive('poi_marker_small', false))
						{
							GetACSGuidingLightPOIMarker().PlayEffectSingle('poi_marker_small');
						}
					}
					else if (targetDistance > 25 * 25 && targetDistance <= 50 * 50)
					{
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker_smaller');
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker_small');
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker_bigger');
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest');
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest_x2');
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest_x4');

						if (!GetACSGuidingLightPOIMarker().IsEffectActive('poi_marker', false))
						{
							GetACSGuidingLightPOIMarker().PlayEffectSingle('poi_marker');
						}
					}
					else if (targetDistance > 50 * 50 && targetDistance <= 100 * 100)
					{
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker_smaller');
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker_small');
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker');
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest');
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest_x2');
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest_x4');

						if (!GetACSGuidingLightPOIMarker().IsEffectActive('poi_marker_bigger', false))
						{
							GetACSGuidingLightPOIMarker().PlayEffectSingle('poi_marker_bigger');
						}
					}
					else if (targetDistance > 100 * 100 )
					{
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker_smaller');
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker_small');
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker');
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker_bigger');
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest_x2');
						GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest_x4');

						if (!GetACSGuidingLightPOIMarker().IsEffectActive('poi_marker_biggest', false))
						{
							GetACSGuidingLightPOIMarker().PlayEffectSingle('poi_marker_biggest');
						}
					}
				}
			}
			else
			{
				if ( FactsQuerySum("ACS_Guiding_Light_POI_Marker_Stopping") <= 0 )
				{
					if ( FactsQuerySum("ACS_Guiding_Light_POI_Marker_Stopped") <= 0 )
					{
						AddTimer('GetACSGuidingLightPOIMarker_EffectStoppingDelay', 0.00000000000000000001, true);

						AddTimer('GetACSGuidingLightPOIMarker_EffectStopDelay', ACS_POI_Marker_Despawn_Delay(), false);

						FactsAdd("ACS_Guiding_Light_POI_Marker_Stopped", 1, -1);
					}

					FactsAdd("ACS_Guiding_Light_POI_Marker_Stopping", 1, -1);
				}
			}
		}
	}

	timer function GetACSGuidingLightPOIMarker_EffectStoppingDelay( time : float , id : int )
	{
		var targetDistance						: float;

		targetDistance = VecDistanceSquared2D( GetWitcherPlayer().GetWorldPosition(), GetACSGuidingLightPOIMarker().GetWorldPosition() ) ;

		if (ACS_Marker_Visual_Bubble_Enabled())
		{
			if (targetDistance <= 5 * 5)
			{
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker_smaller');
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker_small');
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker');
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker_bigger');
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest');
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest_x2');
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest_x4');
			}
			else if (targetDistance > 5 * 5 && targetDistance <= 10 * 10)
			{
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker_small');
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker');
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker_bigger');
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest');
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest_x2');
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest_x4');

				if (!GetACSGuidingLightPOIMarker().IsEffectActive('poi_marker_smaller', false))
				{
					GetACSGuidingLightPOIMarker().PlayEffectSingle('poi_marker_smaller');
				}
			}
			else if (targetDistance > 10 * 10 && targetDistance <= 25 * 25)
			{
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker_smaller');
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker');
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker_bigger');
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest');
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest_x2');
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest_x4');

				if (!GetACSGuidingLightPOIMarker().IsEffectActive('poi_marker_small', false))
				{
					GetACSGuidingLightPOIMarker().PlayEffectSingle('poi_marker_small');
				}
			}
			else if (targetDistance > 25 * 25 && targetDistance <= 50 * 50)
			{
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker_smaller');
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker_small');
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker_bigger');
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest');
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest_x2');
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest_x4');

				if (!GetACSGuidingLightPOIMarker().IsEffectActive('poi_marker', false))
				{
					GetACSGuidingLightPOIMarker().PlayEffectSingle('poi_marker');
				}
			}
			else if (targetDistance > 50 * 50 && targetDistance <= 100 * 100)
			{
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker_smaller');
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker_small');
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker');
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest');
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest_x2');
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest_x4');

				if (!GetACSGuidingLightPOIMarker().IsEffectActive('poi_marker_bigger', false))
				{
					GetACSGuidingLightPOIMarker().PlayEffectSingle('poi_marker_bigger');
				}
			}
			else if (targetDistance > 100 * 100 )
			{
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker_smaller');
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker_small');
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker');
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker_bigger');
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest_x2');
				GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest_x4');

				if (!GetACSGuidingLightPOIMarker().IsEffectActive('poi_marker_biggest', false))
				{
					GetACSGuidingLightPOIMarker().PlayEffectSingle('poi_marker_biggest');
				}
			}
		}
	}

	timer function GetACSGuidingLightPOIMarker_EffectStopDelay( time : float , id : int )
	{
		RemoveTimer('GetACSGuidingLightPOIMarker_EffectStoppingDelay');

		GetACSGuidingLightPOIMarker().StopEffect('poi_marker_smaller');
		GetACSGuidingLightPOIMarker().StopEffect('poi_marker_small');
		GetACSGuidingLightPOIMarker().StopEffect('poi_marker');
		GetACSGuidingLightPOIMarker().StopEffect('poi_marker_bigger');
		GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest');
		GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest_x2');
		GetACSGuidingLightPOIMarker().StopEffect('poi_marker_biggest_x4');

		ACS_Guiding_Light_POI_Marker_Remove();
	
		ACS_Guiding_Light_POI_Marker_Distance_Remove();

		if (FactsQuerySum("ACS_Guiding_Light_POI_Marker_Distance_Available") > 0)
		{
			FactsRemove("ACS_Guiding_Light_POI_Marker_Distance_Available");
		}

		if (FactsQuerySum("ACS_Guiding_Light_POI_Marker_Stopped") > 0)
		{
			FactsRemove("ACS_Guiding_Light_POI_Marker_Stopped");
		}
	}

	function ACS_GetClosestAvailableQuestPointPosition(out pinPos : Vector) : bool
	{
		var i, size 					: int;
		var pinToPlayerDistances 		: array< float >;
		var closestPinIndex				: int;
		var mappins						: array<SCommonMapPinInstance>;
			
		mappins = ACS_GetAvailableQuestPoints();

		size = mappins.Size();

		pinToPlayerDistances.Resize( size );

		if ( size > 0 )
		{
			for ( i = 0; i < size; i += 1 )
			{
				pinToPlayerDistances[i] = VecDistanceSquared2D( mappins[i].position, thePlayer.GetWorldPosition() );
			}

			closestPinIndex = ArrayFindMinF( pinToPlayerDistances );

			pinPos = mappins[ closestPinIndex ].position;

			return true;
		}

		return false;
	}

	var ACS_Available_Quest_Marker_ID : int;
	default ACS_Available_Quest_Marker_ID = 70353;

	var ACS_Available_Quest_Marker_Distance_ID : int;
	default ACS_Available_Quest_Marker_Distance_ID = 70357;

	function ACS_Get_Available_Quest_Marker_ID() : int
	{
		return ACS_Available_Quest_Marker_ID;
	}

	function ACS_Set_Available_Quest_Marker_ID( id : int )
	{
		id = ACS_Available_Quest_Marker_ID;
	}

	function ACS_Guiding_Light_Available_Quest_Marker_Remove()
	{
		var hud : CR4ScriptedHud;
		var module : CR4HudModuleOneliners;

		hud = (CR4ScriptedHud)theGame.GetHud();
		module = (CR4HudModuleOneliners)hud.GetHudModule("OnelinersModule");

		module.OnRemoveOneliner( ACS_Available_Quest_Marker_ID );
	}

	function ACS_Quest_Available_Quest_Marker_Actual()
	{
		var hud : CR4ScriptedHud;
		var module : CR4HudModuleOneliners;
		var availablequestmarkerid : int;
		var iconPath : string;

		//iconPath = "<img src=\"img://icons/inventory/acs_marker_quest_untracked.xbm\"";

		iconPath = FormatIconPath("icons/inventory/acs_marker_quest_untracked.xbm");

		availablequestmarkerid = ACS_Available_Quest_Marker_ID;

		ACS_Set_Available_Quest_Marker_ID(availablequestmarkerid);

		hud = (CR4ScriptedHud)theGame.GetHud();
		module = (CR4HudModuleOneliners)hud.GetHudModule("OnelinersModule");

		module.OnRemoveOneliner( ACS_Available_Quest_Marker_ID  );

		module.OnCreateOneliner( GetACSGuidingLightAvailableQuestMarker(), iconPath, ACS_Available_Quest_Marker_ID );
	}

	function ACS_Guiding_Light_Available_Quest_Marker_Distance_Remove()
	{
		var hud : CR4ScriptedHud;
		var module : CR4HudModuleOneliners;

		hud = (CR4ScriptedHud)theGame.GetHud();
		module = (CR4HudModuleOneliners)hud.GetHudModule("OnelinersModule");

		module.OnRemoveOneliner( ACS_Available_Quest_Marker_Distance_ID );
	}

	function ACS_Guiding_Light_Available_Quest_Marker_Distance_Actual()
	{
		var hud : CR4ScriptedHud;
		var module : CR4HudModuleOneliners;
		var questmarkerid : int;
		var iconPath : string;
		var playerPosition, markerPosition : Vector;
		var distance : float;

		playerPosition = thePlayer.GetWorldPosition();

		markerPosition = GetACSGuidingLightAvailableQuestMarker().GetWorldPosition();

		distance = VecDistance(playerPosition, markerPosition);

		iconPath = "<br/><br/>" + "<font size = '16' color = '#91823f'>" + FloatToStringPrec(distance, 0) + "m" + "</font>";

		hud = (CR4ScriptedHud)theGame.GetHud();
		module = (CR4HudModuleOneliners)hud.GetHudModule("OnelinersModule");

		module.OnRemoveOneliner( ACS_Available_Quest_Marker_Distance_ID );

		module.OnCreateOneliner( GetACSGuidingLightAvailableQuestMarker(), iconPath, ACS_Available_Quest_Marker_Distance_ID );
	}

	function Guiding_Light_Available_Quest_Scan()
	{
		var position							: Vector;
		var rot, newRot          				: EulerAngles;
		var ent									: CEntity;
		var temp								: CEntityTemplate;
		var targetDistance						: float;
		var mappins								: array<SCommonMapPinInstance>;
		var size 								: int;

		mappins = ACS_GetAvailableQuestPoints();

		size = mappins.Size();

		if ( theGame.IsDialogOrCutscenePlaying() 
		|| thePlayer.IsInNonGameplayCutscene() 
		|| thePlayer.IsInGameplayScene() 
		|| theGame.IsCurrentlyPlayingNonGameplayScene()
		|| theGame.IsFading()
		|| theGame.IsBlackscreen()
		|| theGame.IsPaused() 
		|| size <= 0
		|| ACS_Untracked_Quest_Marker_Despawn_Delay() == 0
		)
		{
			if(GetACSGuidingLightAvailableQuestMarker())
			{
				GetACSGuidingLightAvailableQuestMarker().Destroy();
			}

			return;
		}

		targetDistance = VecDistanceSquared2D( GetWitcherPlayer().GetWorldPosition(), GetACSGuidingLightAvailableQuestMarker().GetWorldPosition() ) ;

		ACS_GetClosestAvailableQuestPointPosition(position);

		rot = thePlayer.GetWorldRotation();

		rot.Pitch += 180;

		rot.Yaw += 180;

		if(!GetACSGuidingLightAvailableQuestMarker())
		{
			temp = (CEntityTemplate)LoadResource( "dlc\dlc_acs\data\fx\guiding_light_marker_old.w2ent", true );

			ent = (CEntity)theGame.CreateEntity( temp, position, rot );

			ent.AddTag('ACS_Guiding_Light_Available_Quest_Marker');

			ent.AddTag('ACS_HUD_Marker_Entity');
		}
		else
		{
			newRot = VecToRotation( theCamera.GetCameraDirection() );

			newRot.Yaw += 180;

			newRot.Pitch = rot.Pitch;

			newRot.Roll = rot.Roll;

			GetACSGuidingLightAvailableQuestMarker().TeleportWithRotation( position, newRot );

			if(theGame.GetFocusModeController().CanUseFocusMode()
			&& theGame.IsFocusModeActive())
			{
				if (FactsQuerySum("ACS_Guiding_Light_Available_Quest_Marker_Stopping") > 0)
				{
					FactsRemove("ACS_Guiding_Light_Available_Quest_Marker_Stopping");
				}

				if (FactsQuerySum("ACS_Guiding_Light_Available_Quest_Marker_Stopped") > 0)
				{
					FactsRemove("ACS_Guiding_Light_Available_Quest_Marker_Stopped");
				}

				RemoveTimer('GetACSGuidingLightAvailableQuestMarker_EffectStoppingDelay');

				RemoveTimer('GetACSGuidingLightAvailableQuestMarker_EffectStopDelay');

				ACS_Quest_Available_Quest_Marker_Actual();

				if (FactsQuerySum("ACS_Guiding_Light_Available_Quest_Marker_Distance_Available") <= 0)
				{
					FactsAdd("ACS_Guiding_Light_Available_Quest_Marker_Distance_Available");
				}

				if (ACS_Marker_Visual_Bubble_Enabled())
				{
					if (targetDistance <= 5 * 5)
					{
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_smaller');
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_small');
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker');
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_bigger');
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest');
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest_x2');
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest_x4');
					}
					else if (targetDistance > 5 * 5 && targetDistance <= 10 * 10)
					{
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_small');
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker');
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_bigger');
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest');
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest_x2');
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest_x4');

						if (!GetACSGuidingLightAvailableQuestMarker().IsEffectActive('secondary_quest_marker_smaller', false))
						{
							GetACSGuidingLightAvailableQuestMarker().PlayEffectSingle('secondary_quest_marker_smaller');
						}
					}
					else if (targetDistance > 10 * 10 && targetDistance <= 25 * 25)
					{
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_smaller');
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker');
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_bigger');
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest');
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest_x2');
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest_x4');

						if (!GetACSGuidingLightAvailableQuestMarker().IsEffectActive('secondary_quest_marker_small', false))
						{
							GetACSGuidingLightAvailableQuestMarker().PlayEffectSingle('secondary_quest_marker_small');
						}
					}
					else if (targetDistance > 25 * 25 && targetDistance <= 50 * 50)
					{
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_smaller');
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_small');
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_bigger');
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest');
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest_x2');
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest_x4');

						if (!GetACSGuidingLightAvailableQuestMarker().IsEffectActive('secondary_quest_marker', false))
						{
							GetACSGuidingLightAvailableQuestMarker().PlayEffectSingle('secondary_quest_marker');
						}
					}
					else if (targetDistance > 50 * 50 && targetDistance <= 100 * 100)
					{
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_smaller');
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_small');
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker');
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest');
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest_x2');
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest_x4');

						if (!GetACSGuidingLightAvailableQuestMarker().IsEffectActive('secondary_quest_marker_bigger', false))
						{
							GetACSGuidingLightAvailableQuestMarker().PlayEffectSingle('secondary_quest_marker_bigger');
						}
					}
					else if (targetDistance > 100 * 100 )
					{
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_smaller');
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_small');
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker');
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_bigger');
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest_x2');
						GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest_x4');

						if (!GetACSGuidingLightAvailableQuestMarker().IsEffectActive('secondary_quest_marker_biggest', false))
						{
							GetACSGuidingLightAvailableQuestMarker().PlayEffectSingle('secondary_quest_marker_biggest');
						}
					}
				}
			}
			else
			{
				if ( FactsQuerySum("ACS_Guiding_Light_Available_Quest_Marker_Stopping") <= 0 )
				{
					if ( FactsQuerySum("ACS_Guiding_Light_Available_Quest_Marker_Stopped") <= 0 )
					{
						AddTimer('GetACSGuidingLightAvailableQuestMarker_EffectStoppingDelay', 0.00000000000000000001, true);

						AddTimer('GetACSGuidingLightAvailableQuestMarker_EffectStopDelay', ACS_Untracked_Quest_Marker_Despawn_Delay(), false);

						FactsAdd("ACS_Guiding_Light_Available_Quest_Marker_Stopped", 1, -1);
					}

					FactsAdd("ACS_Guiding_Light_Available_Quest_Marker_Stopping", 1, -1);
				}
			}
		}
	}

	timer function GetACSGuidingLightAvailableQuestMarker_EffectStoppingDelay( time : float , id : int )
	{
		var targetDistance						: float;

		targetDistance = VecDistanceSquared2D( GetWitcherPlayer().GetWorldPosition(), GetACSGuidingLightAvailableQuestMarker().GetWorldPosition() ) ;

		if (ACS_Marker_Visual_Bubble_Enabled())
		{
			if (targetDistance <= 5 * 5)
			{
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_smaller');
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_small');
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker');
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_bigger');
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest');
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest_x2');
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest_x4');
			}
			else if (targetDistance > 5 * 5 && targetDistance <= 10 * 10)
			{
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_small');
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker');
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_bigger');
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest');
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest_x2');
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest_x4');

				if (!GetACSGuidingLightAvailableQuestMarker().IsEffectActive('secondary_quest_marker_smaller', false))
				{
					GetACSGuidingLightAvailableQuestMarker().PlayEffectSingle('secondary_quest_marker_smaller');
				}
			}
			else if (targetDistance > 10 * 10 && targetDistance <= 25 * 25)
			{
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_smaller');
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker');
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_bigger');
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest');
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest_x2');
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest_x4');

				if (!GetACSGuidingLightAvailableQuestMarker().IsEffectActive('secondary_quest_marker_small', false))
				{
					GetACSGuidingLightAvailableQuestMarker().PlayEffectSingle('secondary_quest_marker_small');
				}
			}
			else if (targetDistance > 25 * 25 && targetDistance <= 50 * 50)
			{
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_smaller');
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_small');
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_bigger');
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest');
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest_x2');
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest_x4');

				if (!GetACSGuidingLightAvailableQuestMarker().IsEffectActive('secondary_quest_marker', false))
				{
					GetACSGuidingLightAvailableQuestMarker().PlayEffectSingle('secondary_quest_marker');
				}
			}
			else if (targetDistance > 50 * 50 && targetDistance <= 100 * 100)
			{
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_smaller');
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_small');
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker');
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest');
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest_x2');
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest_x4');

				if (!GetACSGuidingLightAvailableQuestMarker().IsEffectActive('secondary_quest_marker_bigger', false))
				{
					GetACSGuidingLightAvailableQuestMarker().PlayEffectSingle('secondary_quest_marker_bigger');
				}
			}
			else if (targetDistance > 100 * 100 )
			{
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_smaller');
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_small');
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker');
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_bigger');
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest_x2');
				GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest_x4');

				if (!GetACSGuidingLightAvailableQuestMarker().IsEffectActive('secondary_quest_marker_biggest', false))
				{
					GetACSGuidingLightAvailableQuestMarker().PlayEffectSingle('secondary_quest_marker_biggest');
				}
			}
		}
	}

	timer function GetACSGuidingLightAvailableQuestMarker_EffectStopDelay( time : float , id : int )
	{
		RemoveTimer('GetACSGuidingLightAvailableQuestMarker_EffectStoppingDelay');

		GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_smaller');
		GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_small');
		GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker');
		GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_bigger');
		GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest');
		GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest_x2');
		GetACSGuidingLightAvailableQuestMarker().StopEffect('secondary_quest_marker_biggest_x4');

		ACS_Guiding_Light_Available_Quest_Marker_Remove();

		ACS_Guiding_Light_Available_Quest_Marker_Distance_Remove();

		if (FactsQuerySum("ACS_Guiding_Light_Available_Quest_Marker_Distance_Available") > 0)
		{
			FactsRemove("ACS_Guiding_Light_Available_Quest_Marker_Distance_Available");
		}

		if (FactsQuerySum("ACS_Guiding_Light_Available_Quest_Marker_Stopped") > 0)
		{
			FactsRemove("ACS_Guiding_Light_Available_Quest_Marker_Stopped");
		}
	}

	var ACS_User_Pin_Marker_ID : int;
	default ACS_User_Pin_Marker_ID = 70354;

	var ACS_User_Pin_Marker_Distance_ID : int;
	default ACS_User_Pin_Marker_Distance_ID = 70358;

	function ACS_Guiding_Light_User_Marker_Remove()
	{
		var hud : CR4ScriptedHud;
		var module : CR4HudModuleOneliners;

		hud = (CR4ScriptedHud)theGame.GetHud();
		module = (CR4HudModuleOneliners)hud.GetHudModule("OnelinersModule");

		module.OnRemoveOneliner( ACS_User_Pin_Marker_ID );
	}

	function ACS_Quest_User_Marker_Actual()
	{
		var hud : CR4ScriptedHud;
		var module : CR4HudModuleOneliners;
		var iconPath : string;

		//iconPath = "<img src=\"img://icons/inventory/acs_marker_user.xbm\"";

		iconPath = FormatIconPath("icons/inventory/acs_marker_user.xbm");

		hud = (CR4ScriptedHud)theGame.GetHud();
		module = (CR4HudModuleOneliners)hud.GetHudModule("OnelinersModule");

		module.OnRemoveOneliner( ACS_User_Pin_Marker_ID );

		module.OnCreateOneliner( GetACSGuidingLightUserPinMarker(), iconPath, ACS_User_Pin_Marker_ID );
	}

	function ACS_Guiding_Light_User_Marker_Distance_Remove()
	{
		var hud : CR4ScriptedHud;
		var module : CR4HudModuleOneliners;

		hud = (CR4ScriptedHud)theGame.GetHud();
		module = (CR4HudModuleOneliners)hud.GetHudModule("OnelinersModule");

		module.OnRemoveOneliner( ACS_User_Pin_Marker_Distance_ID );
	}

	function ACS_Guiding_Light_User_Marker_Distance_Actual()
	{
		var hud : CR4ScriptedHud;
		var module : CR4HudModuleOneliners;
		var questmarkerid : int;
		var iconPath : string;
		var playerPosition, markerPosition : Vector;
		var distance : float;

		playerPosition = thePlayer.GetWorldPosition();

		markerPosition = GetACSGuidingLightUserPinMarker().GetWorldPosition();

		distance = VecDistance(playerPosition, markerPosition);

		iconPath = "<br/><br/>" + "<font size = '16' color = '#029400'>" + FloatToStringPrec(distance, 0) + "m" + "</font>";

		hud = (CR4ScriptedHud)theGame.GetHud();
		module = (CR4HudModuleOneliners)hud.GetHudModule("OnelinersModule");

		module.OnRemoveOneliner( ACS_User_Pin_Marker_Distance_ID );

		module.OnCreateOneliner( GetACSGuidingLightUserPinMarker(), iconPath, ACS_User_Pin_Marker_Distance_ID );
	}

	function Guiding_Light_User_Pin_Display()
	{
		var id																													: int;
		var index																												: int;
		var x																													: float;
		var y																													: float;
		var type																												: int;
		var area																												: int;
		var position																											: Vector;
		var rot, newRot          																								: EulerAngles;
		var ent																													: CEntity;
		var temp																												: CEntityTemplate;
		var targetDistance																										: float;
		var mappins																												: array<SCommonMapPinInstance>;
		var size 																												: int;

		size = theGame.GetCommonMapManager().GetUserMapPinCount();

		if ( theGame.IsDialogOrCutscenePlaying() 
		|| thePlayer.IsInNonGameplayCutscene() 
		|| thePlayer.IsInGameplayScene() 
		|| theGame.IsCurrentlyPlayingNonGameplayScene()
		|| theGame.IsFading()
		|| theGame.IsBlackscreen()
		|| theGame.IsPaused() 
		|| size <= 0
		|| ACS_User_Pin_Marker_Despawn_Delay() == 0
		)
		{
			if(GetACSGuidingLightUserPinMarker())
			{
				GetACSGuidingLightUserPinMarker().Destroy();
				ACS_Guiding_Light_User_Marker_Remove();
			}

			return;
		}

		theGame.GetCommonMapManager().GetUserMapPinByIndex( 0, id, area, position.X, position.Y, type );	

		playerPos = thePlayer.GetWorldPosition();

		position.Z = playerPos.Z;

		position.Z += 1;

		targetDistance = VecDistanceSquared2D( GetWitcherPlayer().GetWorldPosition(), GetACSGuidingLightUserPinMarker().GetWorldPosition() ) ;

		rot = thePlayer.GetWorldRotation();

		rot.Pitch += 180;

		rot.Yaw += 180;

		if(!GetACSGuidingLightUserPinMarker())
		{
			temp = (CEntityTemplate)LoadResource( "dlc\dlc_acs\data\fx\guiding_light_marker_old.w2ent", true );

			ent = (CEntity)theGame.CreateEntity( temp, position, rot );

			ent.AddTag('ACS_Guiding_Light_User_Pin_Marker');

			ent.AddTag('ACS_HUD_Marker_Entity');
		}
		else
		{
			newRot = VecToRotation( theCamera.GetCameraDirection() );

			newRot.Yaw += 180;

			newRot.Pitch = rot.Pitch;

			newRot.Roll = rot.Roll;

			GetACSGuidingLightUserPinMarker().TeleportWithRotation( position, newRot );

			if(theGame.GetFocusModeController().CanUseFocusMode()
			&& theGame.IsFocusModeActive())
			{
				if (FactsQuerySum("ACS_Guiding_Light_User_Pin_Marker_Stopping") > 0)
				{
					FactsRemove("ACS_Guiding_Light_User_Pin_Marker_Stopping");
				}

				if (FactsQuerySum("ACS_Guiding_Light_User_Pin_Marker_Stopped") > 0)
				{
					FactsRemove("ACS_Guiding_Light_User_Pin_Marker_Stopped");
				}

				RemoveTimer('GetACSGuidingLightUserPinMarker_EffectStoppingDelay');

				RemoveTimer('GetACSGuidingLightUserPinMarker_EffectStopDelay');

				ACS_Quest_User_Marker_Actual();

				if (FactsQuerySum("ACS_Guiding_Light_User_Marker_Distance_Available") <= 0)
				{
					FactsAdd("ACS_Guiding_Light_User_Marker_Distance_Available");
				}

				if (ACS_Marker_Visual_Bubble_Enabled())
				{
					if (targetDistance <= 10 * 10)
					{
						GetACSGuidingLightUserPinMarker().StopEffect('user_marker_small');
						GetACSGuidingLightUserPinMarker().StopEffect('user_marker');
						GetACSGuidingLightUserPinMarker().StopEffect('user_marker_bigger');
						GetACSGuidingLightUserPinMarker().StopEffect('user_marker_biggest');
						GetACSGuidingLightUserPinMarker().StopEffect('user_marker_biggest_x2');
						GetACSGuidingLightUserPinMarker().StopEffect('user_marker_biggest_x4');

						if (!GetACSGuidingLightUserPinMarker().IsEffectActive('user_marker_smaller', false))
						{
							GetACSGuidingLightUserPinMarker().PlayEffectSingle('user_marker_smaller');
						}
					}
					else if (targetDistance > 10 * 10 && targetDistance <= 25 * 25)
					{
						GetACSGuidingLightUserPinMarker().StopEffect('user_marker_smaller');
						GetACSGuidingLightUserPinMarker().StopEffect('user_marker');
						GetACSGuidingLightUserPinMarker().StopEffect('user_marker_bigger');
						GetACSGuidingLightUserPinMarker().StopEffect('user_marker_biggest');
						GetACSGuidingLightUserPinMarker().StopEffect('user_marker_biggest_x2');
						GetACSGuidingLightUserPinMarker().StopEffect('user_marker_biggest_x4');

						if (!GetACSGuidingLightUserPinMarker().IsEffectActive('user_marker_small', false))
						{
							GetACSGuidingLightUserPinMarker().PlayEffectSingle('user_marker_small');
						}
					}
					else if (targetDistance > 25 * 25 && targetDistance <= 50 * 50)
					{
						GetACSGuidingLightUserPinMarker().StopEffect('user_marker_smaller');
						GetACSGuidingLightUserPinMarker().StopEffect('user_marker_small');
						GetACSGuidingLightUserPinMarker().StopEffect('user_marker_bigger');
						GetACSGuidingLightUserPinMarker().StopEffect('user_marker_biggest');
						GetACSGuidingLightUserPinMarker().StopEffect('user_marker_biggest_x2');
						GetACSGuidingLightUserPinMarker().StopEffect('user_marker_biggest_x4');

						if (!GetACSGuidingLightUserPinMarker().IsEffectActive('user_marker', false))
						{
							GetACSGuidingLightUserPinMarker().PlayEffectSingle('user_marker');
						}
					}
					else if (targetDistance > 50 * 50 && targetDistance <= 100 * 100)
					{
						GetACSGuidingLightUserPinMarker().StopEffect('user_marker_smaller');
						GetACSGuidingLightUserPinMarker().StopEffect('user_marker_small');
						GetACSGuidingLightUserPinMarker().StopEffect('user_marker');
						GetACSGuidingLightUserPinMarker().StopEffect('user_marker_biggest');
						GetACSGuidingLightUserPinMarker().StopEffect('user_marker_biggest_x2');
						GetACSGuidingLightUserPinMarker().StopEffect('user_marker_biggest_x4');

						if (!GetACSGuidingLightUserPinMarker().IsEffectActive('user_marker_bigger', false))
						{
							GetACSGuidingLightUserPinMarker().PlayEffectSingle('user_marker_bigger');
						}
					}
					else if (targetDistance > 100 * 100)
					{
						GetACSGuidingLightUserPinMarker().StopEffect('user_marker_smaller');
						GetACSGuidingLightUserPinMarker().StopEffect('user_marker_small');
						GetACSGuidingLightUserPinMarker().StopEffect('user_marker');
						GetACSGuidingLightUserPinMarker().StopEffect('user_marker_bigger');
						GetACSGuidingLightUserPinMarker().StopEffect('user_marker_biggest_x2');
						GetACSGuidingLightUserPinMarker().StopEffect('user_marker_biggest_x4');

						if (!GetACSGuidingLightUserPinMarker().IsEffectActive('user_marker_biggest', false))
						{
							GetACSGuidingLightUserPinMarker().PlayEffectSingle('user_marker_biggest');
						}
					}
				}
			}
			else
			{
				if ( FactsQuerySum("ACS_Guiding_Light_User_Pin_Marker_Stopping") <= 0 )
				{
					if ( FactsQuerySum("ACS_Guiding_Light_User_Pin_Marker_Stopped") <= 0 )
					{
						AddTimer('GetACSGuidingLightUserPinMarker_EffectStoppingDelay', 0.00000000000000000001, true);

						AddTimer('GetACSGuidingLightUserPinMarker_EffectStopDelay', ACS_User_Pin_Marker_Despawn_Delay(), false);

						FactsAdd("ACS_Guiding_Light_User_Pin_Marker_Stopped", 1, -1);
					}

					FactsAdd("ACS_Guiding_Light_User_Pin_Marker_Stopping", 1, -1);
				}
			}
		}
	}

	timer function GetACSGuidingLightUserPinMarker_EffectStoppingDelay( time : float , id : int )
	{
		var targetDistance						: float;

		targetDistance = VecDistanceSquared2D( GetWitcherPlayer().GetWorldPosition(), GetACSGuidingLightUserPinMarker().GetWorldPosition() ) ;

		if (ACS_Marker_Visual_Bubble_Enabled())
		{
			if (targetDistance <= 10 * 10)
			{
				GetACSGuidingLightUserPinMarker().StopEffect('user_marker_small');
				GetACSGuidingLightUserPinMarker().StopEffect('user_marker');
				GetACSGuidingLightUserPinMarker().StopEffect('user_marker_bigger');
				GetACSGuidingLightUserPinMarker().StopEffect('user_marker_biggest');
				GetACSGuidingLightUserPinMarker().StopEffect('user_marker_biggest_x2');
				GetACSGuidingLightUserPinMarker().StopEffect('user_marker_biggest_x4');

				if (!GetACSGuidingLightUserPinMarker().IsEffectActive('user_marker_smaller', false))
				{
					GetACSGuidingLightUserPinMarker().PlayEffectSingle('user_marker_smaller');
				}
			}
			else if (targetDistance > 10 * 10 && targetDistance <= 25 * 25)
			{
				GetACSGuidingLightUserPinMarker().StopEffect('user_marker_smaller');
				GetACSGuidingLightUserPinMarker().StopEffect('user_marker');
				GetACSGuidingLightUserPinMarker().StopEffect('user_marker_bigger');
				GetACSGuidingLightUserPinMarker().StopEffect('user_marker_biggest');
				GetACSGuidingLightUserPinMarker().StopEffect('user_marker_biggest_x2');
				GetACSGuidingLightUserPinMarker().StopEffect('user_marker_biggest_x4');

				if (!GetACSGuidingLightUserPinMarker().IsEffectActive('user_marker_small', false))
				{
					GetACSGuidingLightUserPinMarker().PlayEffectSingle('user_marker_small');
				}
			}
			else if (targetDistance > 25 * 25 && targetDistance <= 50 * 50)
			{
				GetACSGuidingLightUserPinMarker().StopEffect('user_marker_smaller');
				GetACSGuidingLightUserPinMarker().StopEffect('user_marker_small');
				GetACSGuidingLightUserPinMarker().StopEffect('user_marker_bigger');
				GetACSGuidingLightUserPinMarker().StopEffect('user_marker_biggest');
				GetACSGuidingLightUserPinMarker().StopEffect('user_marker_biggest_x2');
				GetACSGuidingLightUserPinMarker().StopEffect('user_marker_biggest_x4');

				if (!GetACSGuidingLightUserPinMarker().IsEffectActive('user_marker', false))
				{
					GetACSGuidingLightUserPinMarker().PlayEffectSingle('user_marker');
				}
			}
			else if (targetDistance > 50 * 50 && targetDistance <= 100 * 100)
			{
				GetACSGuidingLightUserPinMarker().StopEffect('user_marker_smaller');
				GetACSGuidingLightUserPinMarker().StopEffect('user_marker_small');
				GetACSGuidingLightUserPinMarker().StopEffect('user_marker');
				GetACSGuidingLightUserPinMarker().StopEffect('user_marker_biggest');
				GetACSGuidingLightUserPinMarker().StopEffect('user_marker_biggest_x2');
				GetACSGuidingLightUserPinMarker().StopEffect('user_marker_biggest_x4');

				if (!GetACSGuidingLightUserPinMarker().IsEffectActive('user_marker_bigger', false))
				{
					GetACSGuidingLightUserPinMarker().PlayEffectSingle('user_marker_bigger');
				}
			}
			else if (targetDistance > 100 * 100)
			{
				GetACSGuidingLightUserPinMarker().StopEffect('user_marker_smaller');
				GetACSGuidingLightUserPinMarker().StopEffect('user_marker_small');
				GetACSGuidingLightUserPinMarker().StopEffect('user_marker');
				GetACSGuidingLightUserPinMarker().StopEffect('user_marker_bigger');
				GetACSGuidingLightUserPinMarker().StopEffect('user_marker_biggest_x2');
				GetACSGuidingLightUserPinMarker().StopEffect('user_marker_biggest_x4');

				if (!GetACSGuidingLightUserPinMarker().IsEffectActive('user_marker_biggest', false))
				{
					GetACSGuidingLightUserPinMarker().PlayEffectSingle('user_marker_biggest');
				}
			}
		}
	}

	timer function GetACSGuidingLightUserPinMarker_EffectStopDelay( time : float , id : int )
	{
		RemoveTimer('GetACSGuidingLightUserPinMarker_EffectStoppingDelay');

		GetACSGuidingLightUserPinMarker().StopEffect('user_marker_smaller');
		GetACSGuidingLightUserPinMarker().StopEffect('user_marker_small');
		GetACSGuidingLightUserPinMarker().StopEffect('user_marker');
		GetACSGuidingLightUserPinMarker().StopEffect('user_marker_bigger');
		GetACSGuidingLightUserPinMarker().StopEffect('user_marker_biggest');
		GetACSGuidingLightUserPinMarker().StopEffect('user_marker_biggest_x2');
		GetACSGuidingLightUserPinMarker().StopEffect('user_marker_biggest_x4');

		ACS_Guiding_Light_User_Marker_Remove();

		ACS_Guiding_Light_User_Marker_Distance_Remove();

		if (FactsQuerySum("ACS_Guiding_Light_User_Marker_Distance_Available") > 0)
		{
			FactsRemove("ACS_Guiding_Light_User_Marker_Distance_Available");
		}

		if (FactsQuerySum("ACS_Guiding_Light_User_Pin_Marker_Stopped") > 0)
		{
			FactsRemove("ACS_Guiding_Light_User_Pin_Marker_Stopped");
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////

	private var focusModeCamera 						: ACSFocusModeCamera;

	public function SetFocusModeCamera( a : ACSFocusModeCamera )
	{
		this.focusModeCamera = a;
	}

	public function GetFocusModeCamera() : ACSFocusModeCamera
	{
		return this.focusModeCamera;
	}

	function FocusModeCustomCamera()
	{
		var template	: CEntityTemplate;
		var ent			: CEntity;

		CamerasDestroy();

		template = (CEntityTemplate)LoadResource("dlc\dlc_acs\data\entities\other\focus_mode_camera.w2ent", true);

		ent = (CStaticCamera)theGame.CreateEntity(template, theCamera.GetCameraPosition(), theCamera.GetCameraRotation());	

		ent.AddTag('ACS_Focus_Mode_Custom_Camera');
	}

	function FocusModeOverrideCamera()
	{
		if (!ACS_Custom_Focus_Mode_Camera_Enabled())
		{
			return;
		}

		if ( theGame.GetFocusModeController().IsActive() )
		{
			if(!GetFocusModeCamera() 
			&& !GetMeditationCamera()
			&& !GetTransformationCamera()
			&& !GetKestralCamera()
			&& !GetPlayerCamera()
			&& FactsQuerySum("ACS_Meditation_Camera_Override") <= 0
			)
			{
				FocusModeCustomCamera();
			}
		}
		else
		{
			if(!GetFocusModeCamera().HasTag('ACS_Focus_Mode_Cam_Go_Back_Started'))
			{
				GetFocusModeCamera().Stop();

				GetFocusModeCamera().DestroyAfter(1.1);

				GetFocusModeCamera().AddTag('ACS_Focus_Mode_Cam_Go_Back_Started');
			}
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////

	private var playerCamera 						: ACSPlayerCamera;

	public function SetPlayerCamera( a : ACSPlayerCamera )
	{
		this.playerCamera = a;
	}

	public function GetPlayerCamera() : ACSPlayerCamera
	{
		return this.playerCamera;
	}

	function PlayerCustomCamera()
	{
		var template	: CEntityTemplate;
		var ent			: CEntity;

		CamerasDestroy();

		template = (CEntityTemplate)LoadResource("dlc\dlc_acs\data\entities\other\acs_player_camera.w2ent", true);

		ent = (CStaticCamera)theGame.CreateEntity(template, theCamera.GetCameraPosition(), theCamera.GetCameraRotation());	

		ent.AddTag('ACS_Player_Custom_Camera');
	}

	function PlayerOverrideCamera()
	{
		if ( thePlayer.HasTag('ACS_In_Umbral_Slash_End') )
		{
			if(!GetPlayerCamera()
			&& !GetFocusModeCamera() 
			&& !GetMeditationCamera()
			&& !GetTransformationCamera()
			&& !GetKestralCamera()
			&& FactsQuerySum("ACS_Meditation_Camera_Override") <= 0
			)
			{
				PlayerCustomCamera();
			}
		}
		else
		{
			if(!GetPlayerCamera().HasTag('ACS_Player_Cam_Go_Back_Started'))
			{
				GetPlayerCamera().Stop();

				GetPlayerCamera().DestroyAfter(1.1);

				GetPlayerCamera().AddTag('ACS_Player_Cam_Go_Back_Started');
			}
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////

	var vACS_Volumetric_Clouds : cACS_Volumetric_Clouds;

	function ACS_Volumetric_Cloud_Spawner()
	{
		vACS_Volumetric_Clouds = new cACS_Volumetric_Clouds in this;

		vACS_Volumetric_Clouds.Volumetric_Clouds_Engage();
	}

	var vACS_Startup_Entity_Spawns : cACS_Startup_Entity_Spawns;

	function ACS_Startup_Entity_Spawner()
	{
		vACS_Startup_Entity_Spawns = new cACS_Startup_Entity_Spawns in this;

		vACS_Startup_Entity_Spawns.Startup_Entities_Engage();
	}

	/*
	function IDD_INIT()
	{
		var vACS_IDD : cACS_IDD;
		vACS_IDD = new cACS_IDD in this;

		vACS_IDD.IDD_Engage();
	}
	*/

	var vACS_Fog_Assassin_Spawner : cACS_Fog_Assassin_Spawner;

	function ACS_Fog_Assassin_Doppleganer_Spawner()
	{
		vACS_Fog_Assassin_Spawner = new cACS_Fog_Assassin_Spawner in this;

		vACS_Fog_Assassin_Spawner.Fog_Assassin_Doppleganger_Spawner_Engage();
	}

	var vACS_XenoSwarm_Spawner: cACS_XenoSwarm_Spawner;

	function ACS_XenoTyrant_Spawner()
	{
		vACS_XenoSwarm_Spawner = new cACS_XenoSwarm_Spawner in this;

		vACS_XenoSwarm_Spawner.ACS_XenoTyrant_Spawner_Engage();
	}

	function ACS_XenoSoldiers_Spawner()
	{
		vACS_XenoSwarm_Spawner = new cACS_XenoSwarm_Spawner in this;

		vACS_XenoSwarm_Spawner.ACS_XenoSoldiers_Spawn_Engage();
	}

	function ACS_XenoWorkers_Spawner()
	{
		vACS_XenoSwarm_Spawner = new cACS_XenoSwarm_Spawner in this;

		vACS_XenoSwarm_Spawner.ACS_XenoWorkers_Spawn_Engage();
	}

	var vACS_Duskwraith_Spawner : cACS_Duskwraith_Spawner;

	function ACS_Duskwraith_Skeletons_Spawner()
	{
		vACS_Duskwraith_Spawner = new cACS_Duskwraith_Spawner in this;

		vACS_Duskwraith_Spawner.ACS_Duskwraith_Skeletons_Spawner_Engage();
	}

	timer function ACS_Duskwraith_Shadowcloak( time : float , id : int )
	{
		if (!ACSDuskwraith().IsEffectActive('shadows_form_banshee', false))
		{
			ACSDuskwraith().PlayEffectSingle('shadows_form_banshee');
		}

		if (!ACSDuskwraith().IsEffectActive('shadows_form_noonwraith_test', false))
		{
			ACSDuskwraith().PlayEffectSingle('shadows_form_noonwraith_test');
		}

		if (ACSDuskwraith().IsEffectActive('shadows_form_noonwraith', false))
		{
			ACSDuskwraith().StopEffect('shadows_form_noonwraith');
		}
	}

	timer function ACS_Duskwraith_Skeletons_Spawner_Delay( time : float , id : int )
	{
		ACS_Duskwraith_Skeletons_Spawner();
	}

	timer function ACS_Duskwraith_Skeletons_Despawn( time : float , id : int )
	{
		ACS_Duskwraith_Skeletons_Kill();
	}

	var vACS_Draug_Spawner : cACS_Draug_Spawner;

	function ACS_Draug_Swap_Close_Range()
	{
		vACS_Draug_Spawner = new cACS_Draug_Spawner in this;

		vACS_Draug_Spawner.ACS_Draug_Swap_To_Close_Range_Engage();
	}

	function ACS_Draug_Swap_Far_Range()
	{
		vACS_Draug_Spawner = new cACS_Draug_Spawner in this;

		vACS_Draug_Spawner.ACS_Draug_Swap_To_Far_Range_Engage();
	}

	timer function ACS_Draug_Anchor_Respawn( time : float , id : int )
	{
		ACS_Draug_Swap_Far_Range();
	}

	timer function ACS_Spawn_XenoSoldiers_Swarm( time : float , id : int )
	{
		ACS_XenoSoldiers_Spawner();

		RemoveTimer('ACS_Spawn_XenoWorkers_Swarm');
		AddTimer('ACS_Spawn_XenoWorkers_Swarm', 1, false);
	}

	timer function ACS_Spawn_XenoWorkers_Swarm( time : float , id : int )
	{
		ACS_XenoWorkers_Spawner();
	}

	var vACS_MegaWraith_Spawner : cACS_MegaWraith_Spawner;

	function ACS_CreateWraithDummy()
	{
		vACS_MegaWraith_Spawner = new cACS_MegaWraith_Spawner in this;

		vACS_MegaWraith_Spawner.ACS_MegaWraith_SpawnAdds_Engage();
	}

	var vACS_Wild_Hunt_Riders: cACS_Wild_Hunt_Riders;

	function ACS_Wild_Hunt_Ship_Spawner()
	{
		vACS_Wild_Hunt_Riders = new cACS_Wild_Hunt_Riders in this;

		vACS_Wild_Hunt_Riders.ACS_Wh_Ship_Spawn_Engage();
	}

	function ACS_Wild_Hunt_Riders_Spawner()
	{
		vACS_Wild_Hunt_Riders = new cACS_Wild_Hunt_Riders in this;

		vACS_Wild_Hunt_Riders.ACS_Wh_Ship_Spawn_Engage();

		RemoveTimer('ACS_Wild_Hunt_Riders_Spawner_Delay_Timer');
		AddTimer('ACS_Wild_Hunt_Riders_Spawner_Delay_Timer',7,false);
	}

	timer function ACS_Wild_Hunt_Riders_Spawner_Delay_Timer( time : float , id : int )
	{
		ACS_Wild_Hunt_Riders_Spawner_Delay();
	}

	function ACS_Wild_Hunt_Riders_Spawner_Delay()
	{
		vACS_Wild_Hunt_Riders = new cACS_Wild_Hunt_Riders in this;

		if (!theGame.IsDialogOrCutscenePlaying() 
		&& !GetWitcherPlayer().IsInNonGameplayCutscene() 
		&& !GetWitcherPlayer().IsInGameplayScene()
		&& !ACS_PlayerSettlementCheck(50)
		&& GetWitcherPlayer().IsOnGround()
		&& ACS_WildHunt_Rider_Area_Check()
		&& !GetWitcherPlayer().IsInInterior()
		&& VecDistanceSquared2D( GetWitcherPlayer().GetWorldPosition(), GetACSGuidingLightMarker().GetWorldPosition() ) > 25 * 25 
		)
		{
			if (RandF() < 0.9)
			{
				vACS_Wild_Hunt_Riders.ACS_Wild_Hunt_Riders_Engage();
			}
			else
			{
				if (RandF() < 0.25)
				{
					vACS_Wild_Hunt_Riders.ACS_Eredin_Spawn_Engage();
				}
				else
				{
					vACS_Wild_Hunt_Riders.ACS_Dark_Portal_Spawn_Engage();
				}
			}
		}
	}

	function ACS_Spawn_Eredin()
	{
		vACS_Wild_Hunt_Riders = new cACS_Wild_Hunt_Riders in this;

		vACS_Wild_Hunt_Riders.ACS_Eredin_Spawn_Engage();
	}

	function ACS_Spawn_Dark_Portal()
	{
		vACS_Wild_Hunt_Riders = new cACS_Wild_Hunt_Riders in this;

		vACS_Wild_Hunt_Riders.ACS_Dark_Portal_Spawn_Engage();
	}

	var vACS_Night_Stalker					: cACS_Night_Stalker;

	function ACS_SpawnNightStalker()
	{
		vACS_Night_Stalker = new cACS_Night_Stalker in this;

		vACS_Night_Stalker.ACS_Night_Stalker_Engage();
	}

	var vACS_Forest_God_Spawner : cACS_Forest_God_Spawner;

	function ACS_Forest_God_Shadows_Spawner()
	{
		vACS_Forest_God_Spawner = new cACS_Forest_God_Spawner in this;
		
		ACS_Forest_God_Shadows_Destroy();

		vACS_Forest_God_Spawner.ACS_Forest_God_Shadows_Spawner_Engage();
	}

	var vACS_Elderblood_Assassin				: cACS_Elderblood_Assassin;

	function ACS_SpawnElderbloodAssassin()
	{
		vACS_Elderblood_Assassin = new cACS_Elderblood_Assassin in this;

		vACS_Elderblood_Assassin.ACS_Elderblood_Assassin_Engage();
	}

	var vACS_Svalblod_Spawn : cACS_Svalblod_Spawn;

	function ACS_Svalblod_Bear_Spawn()
	{
		vACS_Svalblod_Spawn = new cACS_Svalblod_Spawn in this;
				
		vACS_Svalblod_Spawn.ACS_Svalblod_Bear_Spawn_Engage();
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	function XenoSwitch()
	{
		if (GetACSXenoTyrant() && GetACSXenoTyrant().IsAlive())
		{
			if (ACS_can_xeno_switch())
			{
				ACS_refresh_xeno_switch_cooldown();

				XenoSwitchToggle();
			}
		}
		else
		{
			return;
		}
	}

	var xenoToggle 						: bool;

	function XenoSwitchToggle()
	{
		if (!xenoToggle)
		{
			ACSXenoTyrantAddAbility();
			ACSXenoSoldiersAddAbility();

			xenoToggle = true;
		}
		else
		{
			ACSXenoTyrantnRemoveAbility();
			ACSXenoSoldiersRemoveAbility();

			xenoToggle = false;
		}

		ACSXenoArmoredWorkersSwapAbility();
	}


	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	function ForceGuardedStance()
	{
		if (!thePlayer.IsInCombat())
		{
			if (theInput.GetActionValue('LockAndGuard') > 0.5)
			{
				if (thePlayer.GetPlayerCombatStance() != PCS_Guarded)
				{
					thePlayer.SetPlayerCombatStance(PCS_Guarded, true);
				}
			}
			else if (theInput.GetActionValue('LockAndGuard') == 0)
			{
				if (thePlayer.GetPlayerCombatStance() == PCS_Guarded)
				{
					thePlayer.SetPlayerCombatStance(PCS_Normal, true);
				}
			}
		}
		else
		{
			if (!ACS_CombatStance_Enabled())
			{
				if (!thePlayer.HasTag('vampires_claws_equipped'))
				{
					if (theInput.GetActionValue('LockAndGuard') > 0.5)
					{
						if (thePlayer.GetPlayerCombatStance() != PCS_Guarded)
						{
							thePlayer.SetPlayerCombatStance(PCS_Guarded, true);
						}
					}
					else if (theInput.GetActionValue('LockAndGuard') == 0)
					{
						if (thePlayer.GetPlayerCombatStance() != PCS_Normal)
						{
							thePlayer.SetPlayerCombatStance(PCS_Normal, true);
						}
					}
				}
			}
		}
	}

	function wraith_swim_actual()
	{
		//var angle : float;

		//angle = RandRangeF(360, -360);

		//thePlayer.GetMovingAgentComponent().SetRotation(EulerAngles(angle, 0, 0));

		camera.StopAnimation('camera_shake_loop_lvl1_1');

		theGame.GetGameCamera().StopAnimation( 'camera_shake_loop_lvl1_1' );

		camera.StopAnimation('camera_shake_loop_lvl1_5');

		theGame.GetGameCamera().StopAnimation( 'camera_shake_loop_lvl1_5' );

		MovementAdjustWraith();
		
		movementAdjustor.ScaleAnimation( ticket, true, false, true );

		if (thePlayer.IsInsideInteraction())
		{
			if (theInput.IsActionPressed('Sprint') || thePlayer.GetIsSprinting())
			{
				dest1 = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetHeadingVector() * 1.25;

				//dest1 = theCamera.GetCameraPosition() + theCamera.GetCameraDirection() * 1.25;
			}
			else
			{
				dest1 = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetHeadingVector() * 0.125;

				//dest1 = theCamera.GetCameraPosition() + theCamera.GetCameraDirection() * 0.125;
			}
		}
		else if (theGame.IsFocusModeActive())
		{
			if (theInput.IsActionPressed('Sprint') || thePlayer.GetIsSprinting())
			{
				dest1 = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetHeadingVector() * 2.5;

				//dest1 = theCamera.GetCameraPosition() + theCamera.GetCameraDirection() * 2.5;
			}
			else
			{
				dest1 = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetHeadingVector() * 1.25;

				//dest1 = theCamera.GetCameraPosition() + theCamera.GetCameraDirection() * 1.25;
			}
		}
		else
		{
			if (theInput.IsActionPressed('Sprint') || thePlayer.GetIsSprinting())
			{
				dest1 = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetHeadingVector() * 5;

				//dest1 = theCamera.GetCameraPosition() + theCamera.GetCameraDirection() * 5;
			}
			else
			{
				dest1 = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetHeadingVector() * 2.5;

				//dest1 = theCamera.GetCameraPosition() + theCamera.GetCameraDirection() * 2.5;
			}
		}

		movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );
		movementAdjustor.SlideTo( ticket, dest1 );
	}

	timer function Wraith_Swim_Timer( time : float , id : int )
	{
		if (thePlayer.HasTag('in_wraith'))
		{
			RemoveTimer('Wraith_Swim_Timer');

			return;
		}

		if (theInput.GetActionValue('GI_AxisLeftY') != 0
		|| theInput.GetActionValue('GI_AxisLeftX') != 0
		)
		{
			wraith_swim_actual();
		}
	}

	function IncreaseSwimSpeed()
	{
		if (thePlayer.HasTag('in_wraith'))
		{
			if (thePlayer.HasTag('ACS_Swim_Speed_Hack'))
			{
				RemoveTimer('Wraith_Swim_Timer');

				thePlayer.RemoveTag('ACS_Swim_Speed_Hack');
			}

			return;
		}

		if(thePlayer.IsSwimming() && (GetWitcherPlayer().IsItemEquippedByName('acs_drowner_extract_item')))
		{
			if (!thePlayer.HasTag('ACS_Swim_Speed_Hack'))
			{
				RemoveTimer('Wraith_Swim_Timer');

				AddTimer('Wraith_Swim_Timer', 0.000001, true);

				thePlayer.AddTag('ACS_Swim_Speed_Hack');
			}
		}
		else
		{
			if (thePlayer.HasTag('ACS_Swim_Speed_Hack'))
			{
				RemoveTimer('Wraith_Swim_Timer');

				thePlayer.RemoveTag('ACS_Swim_Speed_Hack');
			}
		}
	}

	function FUCKING_TUTORIAL_DISABLE()
	{
		if (theGame.GetInGameConfigWrapper().GetVarValue('Gameplay', 'HudTutorialEnabled') == "true")
		{
			theGame.GetInGameConfigWrapper().SetVarValue('Gameplay', 'HudTutorialEnabled', "false");
		}
	}

	var vACS_Fish_Generate : cACS_Fish_Generate;

	function ACS_Fish_Generate()
	{
		vACS_Fish_Generate = new cACS_Fish_Generate in this;
		
		if (ACS_fish_spawn())
		{
			ACS_refresh_fish_spawn_cooldown();

			vACS_Fish_Generate.Fish_Generate_Engage();
		}
	}

	function WinGwent()
	{
		if ( ACS_AutoWinGwent_Enabled() )
		{
			if ( (CR4GwintGameMenu)((CR4GuiManager)theGame.GetGuiManager()).GetRootMenu() )
			{
				if (FactsQuerySum("ACS_Win_Gwent_Active") <= 0)
				{
					thePlayer.SetGwintMinigameState( EMS_End_PlayerWon );

					((CR4GwintGameMenu)((CR4GuiManager)theGame.GetGuiManager()).GetRootMenu()).CloseMenu();

					FactsAdd("ACS_Win_Gwent_Active", 1, -1);
				}
			}
			else
			{
				if (FactsQuerySum("ACS_Win_Gwent_Active") > 0)
				{
					FactsRemove("ACS_Win_Gwent_Active");
				}
			}
		}
		else
		{
			if (FactsQuerySum("ACS_Win_Gwent_Active") > 0)
			{
				FactsRemove("ACS_Win_Gwent_Active");
			}
		}
	}

	function Wisp_Levelup_Tutorial()
	{
		if (thePlayer.GetLevel() >= 5 && thePlayer.GetLevel() < 10)
		{
			ACS_Wisp_Level_05_Tutorial();
		}
		else if (thePlayer.GetLevel() >= 10 && thePlayer.GetLevel() < 15)
		{
			ACS_Wisp_Level_10_Tutorial();
		}
		else if (thePlayer.GetLevel() >= 15 && thePlayer.GetLevel() < 20)
		{
			ACS_Wisp_Level_15_Tutorial();
		}
		else if (thePlayer.GetLevel() >= 20 && thePlayer.GetLevel() < 25)
		{
			ACS_Wisp_Level_20_Tutorial();
		}
		else if (thePlayer.GetLevel() >= 25)
		{
			ACS_Wisp_Level_25_Tutorial();
		}
	}

	function CreateShadowdashBlood()
	{
		var ent_1									: CEntity;

		ent_1 = theGame.CreateEntity( (CEntityTemplate)LoadResource( 

		"dlc\dlc_acs\data\entities\other\fx_dummy_entity.w2ent"
			
		, true ), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );

		ent_1.CreateAttachment( thePlayer, , Vector( 0, 0.5, 0 ), EulerAngles(0,0,0 ));

		//ent_1.PlayEffect('shadowdash_body_blood_construct');

		ent_1.PlayEffect('shadowdash_construct');

		ent_1.AddTag('ACS_Vampire_Sprint_FX');
	}

	function VampireClawsSprintHide()
	{
		if (thePlayer.HasTag('vampire_claws_equipped'))
		{
			if (thePlayer.GetIsSprinting() 
			&& !thePlayer.IsCurrentlyDodging()
			&& thePlayer.GetSprintingTime() > 0.625
			&& !thePlayer.HasTag('ACS_Is_Currently_Dodging')
			)
			{
				thePlayer.DrainVitality(thePlayer.GetStat(BCS_Vitality) * 0.0001225);

				if (!thePlayer.HasTag('ACS_Vampires_Claws_Sprinting'))
				{
					thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");

					thePlayer.SoundEvent("magic_yennefer_necromancy_loop_start");

					thePlayer.SoundEvent( "q704_regis_mistform_activates" );

					thePlayer.SoundEvent( "q704_regis_mistform_LP" );
					thePlayer.SoundEvent( "q704_regis_mistform_LP" );
					thePlayer.SoundEvent( "q704_regis_mistform_LP" );

					//thePlayer.PlayEffect('avatar_death_swollen_no_decal_construct');

					thePlayer.PlayEffect('shadowdash_body_blood_construct');

					thePlayer.PlayEffect('shadowdash_ground_blood_construct');

					CreateShadowdashBlood();

					thePlayer.SetVisibility(false);

					thePlayer.SetCanPlayHitAnim(false); 

					thePlayer.EnableCharacterCollisions(false); 

					GetWitcherPlayer().AddBuffImmunity_AllNegative('ACS_Vampire_Claws_Sprint_Immunity_Negative', true); 
					GetWitcherPlayer().AddBuffImmunity_AllCritical('ACS_Vampire_Claws_Sprint_Immunity_Critical', true); 

					thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Default, true );

					thePlayer.AddTag('ACS_Vampires_Claws_Sprinting');
				}
			}
			else
			{
				if (thePlayer.HasTag('ACS_Vampires_Claws_Sprinting'))
				{
					thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");

					thePlayer.SoundEvent("magic_yennefer_necromancy_loop_stop");

					thePlayer.SoundEvent("q704_regis_mistform_LP_stop");
					thePlayer.SoundEvent("q704_regis_mistform_LP_stop");
					thePlayer.SoundEvent("q704_regis_mistform_LP_stop");

					thePlayer.StopEffect('shadowdash_body_blood_construct');

					thePlayer.StopEffect('shadowdash_ground_blood_construct');

					thePlayer.StopEffect('avatar_death_swollen_no_decal_construct');

					GetACSVampireSprintFX().StopEffect('shadowdash_construct');

					GetACSVampireSprintFX().DestroyAfter(3);

					GetACSVampireSprintFX().RemoveTag('ACS_Vampire_Sprint_FX');

					if(!ACS_Transformation_Activated_Check())
					{
						thePlayer.EnableCharacterCollisions(true); 

						thePlayer.SetVisibility(true);

						thePlayer.SetCanPlayHitAnim(true); 
					}

					thePlayer.RemoveBuffImmunity_AllNegative('ACS_Vampire_Claws_Sprint_Immunity_Negative'); 
					thePlayer.RemoveBuffImmunity_AllCritical('ACS_Vampire_Claws_Sprint_Immunity_Critical'); 

					thePlayer.SetImmortalityMode( AIM_None, AIC_Default, true );

					thePlayer.RemoveTag('ACS_Vampires_Claws_Sprinting');
				}
			}
		}
		else
		{
			if (thePlayer.HasTag('ACS_Vampires_Claws_Sprinting'))
			{
				thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");
					
				thePlayer.SoundEvent("magic_yennefer_necromancy_loop_stop");

				thePlayer.SoundEvent("q704_regis_mistform_LP_stop");
				thePlayer.SoundEvent("q704_regis_mistform_LP_stop");
				thePlayer.SoundEvent("q704_regis_mistform_LP_stop");

				thePlayer.StopEffect('shadowdash_body_blood_construct');

				thePlayer.StopEffect('shadowdash_ground_blood_construct');

				thePlayer.StopEffect('avatar_death_swollen_no_decal_construct');

				GetACSVampireSprintFX().StopEffect('shadowdash_construct');

				GetACSVampireSprintFX().DestroyAfter(3);

				GetACSVampireSprintFX().RemoveTag('ACS_Vampire_Sprint_FX');

				if(!ACS_Transformation_Activated_Check())
				{
					thePlayer.EnableCharacterCollisions(true); 

					thePlayer.SetVisibility(true);

					thePlayer.SetCanPlayHitAnim(true); 
				}

				thePlayer.RemoveBuffImmunity_AllNegative('ACS_Vampire_Claws_Sprint_Immunity_Negative'); 
				thePlayer.RemoveBuffImmunity_AllCritical('ACS_Vampire_Claws_Sprint_Immunity_Critical'); 

				thePlayer.SetImmortalityMode( AIM_None, AIC_Default, true );

				thePlayer.RemoveTag('ACS_Vampires_Claws_Sprinting');
			}
		}
	}

	function ACS_SpiralSkyControl()
	{
		if (thePlayer.IsInInterior())
		{
			/*
			if ( FactsQuerySum("ACS_Spiral_Sky_Player_Is_Interior") <= 0 )
			{
				GetACSSpiralSky().DestroyEffect('spiral_sky_original_bands');

				GetACSSpiralSky().DestroyEffect('spiral_sky_red_bands');

				GetACSSpiralSky().DestroyEffect('spiral_sky_secondary_bands');

				FactsAdd("ACS_Spiral_Sky_Player_Is_Interior", 1, -1);
			}
			*/

			if (GetACSSpiralSky().IsEffectActive('spiral_sky_original_bands', false))
			{
				GetACSSpiralSky().DestroyEffect('spiral_sky_original_bands');
			}

			if (GetACSSpiralSky().IsEffectActive('spiral_sky_red_bands', false))
			{
				GetACSSpiralSky().DestroyEffect('spiral_sky_red_bands');
			}

			if (GetACSSpiralSky().IsEffectActive('spiral_sky_secondary_bands', false))
			{
				//GetACSSpiralSky().DestroyEffect('spiral_sky_secondary_bands');
			}
		}
		else
		{
			/*
			if (FactsQuerySum("ACS_Spiral_Sky_Player_Is_Interior") > 0)
			{
				if (ACS_SpiralSkyBands_Enabled())
				{
					GetACSSpiralSky().PlayEffectSingle('spiral_sky_original_bands');

					GetACSSpiralSky().PlayEffectSingle('spiral_sky_red_bands');

					//GetACSSpiralSky().PlayEffectSingle('spiral_sky_secondary_bands');
				}
				else
				{
					GetACSSpiralSky().DestroyEffect('spiral_sky_original_bands');

					GetACSSpiralSky().DestroyEffect('spiral_sky_red_bands');

					GetACSSpiralSky().DestroyEffect('spiral_sky_secondary_bands');
				}

				FactsRemove("ACS_Spiral_Sky_Player_Is_Interior");
			}
			*/

			if (ACS_SpiralSkyBands_Enabled())
			{
				if (!GetACSSpiralSky().IsEffectActive('spiral_sky_original_bands', false))
				{
					GetACSSpiralSky().PlayEffectSingle('spiral_sky_original_bands');
				}

				if (!GetACSSpiralSky().IsEffectActive('spiral_sky_red_bands', false))
				{
					GetACSSpiralSky().PlayEffectSingle('spiral_sky_red_bands');
				}

				if (!GetACSSpiralSky().IsEffectActive('spiral_sky_secondary_bands', false))
				{
					//GetACSSpiralSky().PlayEffectSingle('spiral_sky_secondary_bands');
				}
			}
			else
			{
				if (GetACSSpiralSky().IsEffectActive('spiral_sky_original_bands', false))
				{
					GetACSSpiralSky().DestroyEffect('spiral_sky_original_bands');
				}

				if (GetACSSpiralSky().IsEffectActive('spiral_sky_red_bands', false))
				{
					GetACSSpiralSky().DestroyEffect('spiral_sky_red_bands');
				}

				if (GetACSSpiralSky().IsEffectActive('spiral_sky_secondary_bands', false))
				{
					//GetACSSpiralSky().DestroyEffect('spiral_sky_secondary_bands');
				}
			}
		}
	}

	var originalVolume : string;
    var wasSpeaking : bool;
    var wantMute : bool;
    default wasSpeaking = false;
    default wantMute = false;

	function MutePlayerControl()
    {
		if (ACS_MutePlayer_Enabled())
		{
			if (FactsQuerySum("ACS_Geralt_Muted_Enabled") <= 0)
			{
				FactsAdd("ACS_Geralt_Muted_Enabled");
			}

			if (FactsQuerySum("block_geralts_battlecries") <= 0)
			{
				FactsAdd("block_geralts_battlecries", 1, -1);
			}

			wantMute = true;
		
			if(GetWitcherPlayer().IsSpeaking() && !wasSpeaking && wantMute)
			{
				originalVolume = theGame.GetInGameConfigWrapper().GetVarValue( 'Audio', 'VoiceoversVolume');
				theGame.GetInGameConfigWrapper().SetVarValue( 'Audio', 'VoiceoversVolume', "0" );
				theGame.SaveUserSettings();
				wasSpeaking = true;
			}
			else if(!GetWitcherPlayer().IsSpeaking() && wasSpeaking)
			{
				theGame.GetInGameConfigWrapper().SetVarValue( 'Audio', 'VoiceoversVolume', originalVolume );
				theGame.SaveUserSettings();
				wasSpeaking = false;
				wantMute = false;
			}
		}
		else
		{
			if (FactsQuerySum("ACS_Geralt_Muted_Enabled") > 0)
			{
				if (FactsQuerySum("block_geralts_battlecries") > 0)
				{
					FactsRemove("block_geralts_battlecries");
				}

				theGame.GetInGameConfigWrapper().SetVarValue( 'Audio', 'VoiceoversVolume', originalVolume );
				theGame.SaveUserSettings();
				wasSpeaking = false;
				wantMute = false;

				FactsRemove("ACS_Geralt_Muted_Enabled");
			}
		}
    }

	function AltBurnStopFailsafe()
	{
		if ( !thePlayer.IsCastingSign() )
		{
			ACS_Sign_Icon().StopAllEffects();
		}
		else 
		{
			if (GetWitcherPlayer().GetEquippedSign() == ST_Igni)
			{
				if (GetWitcherPlayer().IsCurrentSignChanneled())
				{
					if ((theGame.GetWorld().GetDepotPath() == "levels\skellige\skellige.w2w")
					)
					{
						
					}
					else
					{
						if ((ACS_Forgotten_Wolf_Check_For_Item() || ACS_Armor_Equipped_Check()))
						{
							ACS_Sign_Icon().PlayEffectSingle('burn_red');
							ACS_Sign_Icon().PlayEffectSingle('burn_upgrade_red');
							ACS_Sign_Icon().PlayEffectSingle('burn_1_red');
							ACS_Sign_Icon().PlayEffectSingle('burn_upgrade_1_red');
						}
						else
						{
							ACS_Sign_Icon().PlayEffectSingle('burn');
							ACS_Sign_Icon().PlayEffectSingle('burn_upgrade');
							ACS_Sign_Icon().PlayEffectSingle('burn_1');
							ACS_Sign_Icon().PlayEffectSingle('burn_upgrade_1');
						}
					}
				}
				else
				{
					ACS_Sign_Icon().StopEffect('burn');
					ACS_Sign_Icon().StopEffect('burn_upgrade');
					ACS_Sign_Icon().StopEffect('burn_1');
					ACS_Sign_Icon().StopEffect('burn_upgrade_1');

					ACS_Sign_Icon().StopEffect('burn_red');
					ACS_Sign_Icon().StopEffect('burn_upgrade_red');
					ACS_Sign_Icon().StopEffect('burn_1_red');
					ACS_Sign_Icon().StopEffect('burn_upgrade_1_red');
				}
			}
		}
	}

	function BowAndCrossbowCheck()
	{
		if ( GetWitcherPlayer().IsItemEquippedByName('acs_bow_item') )
		{
			if (!GetWitcherPlayer().HasTag('acs_bow_active') )
			{
				ACS_Bow_Of_Artemis_Tutorial();

				GetWitcherPlayer().AddTag('acs_bow_active');
			}
		}
		else if ( !GetWitcherPlayer().IsItemEquippedByName('acs_bow_item') )
		{
			if (GetWitcherPlayer().HasTag('acs_bow_active') )
			{
				GetWitcherPlayer().RemoveTag('acs_bow_active');
			}
		}

		if ( GetWitcherPlayer().IsItemEquippedByName('acs_crossbow_item') )
		{
			if (!GetWitcherPlayer().HasTag('acs_crossbow_active') )
			{
				ACS_Crossbow_Of_Artemis_Tutorial();

				GetWitcherPlayer().AddTag('acs_crossbow_active');
			}
		}
		else if ( !GetWitcherPlayer().IsItemEquippedByName('acs_crossbow_item') )
		{
			if (GetWitcherPlayer().HasTag('acs_crossbow_active') )
			{
				GetWitcherPlayer().RemoveTag('acs_crossbow_active');
			}
		}
	}

	timer function ACS_DelayedSheathSword( dt: float, id : int )
	{
		if ( !thePlayer.IsCombatMusicEnabled() )
		{
			if ( thePlayer.IsInCombatAction() || !thePlayer.IsActionAllowed( EIAB_DrawWeapon ) )
			{
				thePlayer.PushCombatActionOnBuffer(EBAT_Sheathe_Sword,BS_Pressed);
			}
			else
			{
				thePlayer.OnEquipMeleeWeapon( PW_None, false );
			}
		}	
	}

	function SetPlayerTargetAcquire()
	{
		var player : CR4Player;

		if (player != thePlayer)
		{
			player = thePlayer;
		}
	
		if (
			(thePlayer.IsInCombat() || thePlayer.IsCombatMusicEnabled())
			&& thePlayer.IsAnyWeaponHeld() 
			&& !thePlayer.IsWeaponHeld('fist')
		)
		{
			if (player.findMoveTargetDistMin != 50.f)
			{
				player.findMoveTargetDistMin = 50.f;
			}
			
			if (player.findMoveTargetDistMax != 50.f)
			{
				player.findMoveTargetDistMax = 50.f;
			}
				
			if (player.interactDist != 50.f)
			{
				player.interactDist = 50.f;
			}
		}
		else
		{
			if (thePlayer.IsUsingVehicle() || thePlayer.IsUsingVehicle())
			{
				if (player.findMoveTargetDistMin != 50.f)
				{
					player.findMoveTargetDistMin = 50.f;
				}
				
				if (player.findMoveTargetDistMax != 50.f)
				{
					player.findMoveTargetDistMax = 50.f;
				}
					
				if (player.interactDist != 50.f)
				{
					player.interactDist = 50.f;
				}
			}
			else
			{
				if (player.findMoveTargetDistMin != 10.f)
				{
					player.findMoveTargetDistMin = 10.f;
				}
				
				if (player.findMoveTargetDistMax != 18.f)
				{
					player.findMoveTargetDistMax = 18.f;
				}
					
				if (player.interactDist != 3.5f)
				{
					player.interactDist = 3.5f;
				}
			}
		}
		
		if (player.disableSprintTerrainPitch != 0)
		{
			player.disableSprintTerrainPitch = 0;
		}

		if (!thePlayer.GetTarget().HasTag('dettlaff_construct'))
		{
			if (player.forceFinisher != false)
			{
				player.forceFinisher = false;
			}

			if (player.forceFinisherChance != 0)
			{
				player.forceFinisherChance = 0;
			}
		}
	}

	var last_quest_marker_distance_refresh_time : float;

	function ACS_can_refresh_quest_marker_distance(): bool 
	{
		return theGame.GetEngineTimeAsSeconds() - last_quest_marker_distance_refresh_time > 0.25;
	}

	function ACS_refresh_quest_marker_distance_cooldown() 
	{
		last_quest_marker_distance_refresh_time = theGame.GetEngineTimeAsSeconds();
	}

	function Guiding_Light_Distance_Controller()
	{
		if ( theGame.IsDialogOrCutscenePlaying() 
		|| thePlayer.IsInNonGameplayCutscene() 
		|| thePlayer.IsInGameplayScene() 
		|| theGame.IsCurrentlyPlayingNonGameplayScene()
		|| theGame.IsFading()
		|| theGame.IsBlackscreen()
		|| theGame.IsPaused() 
		)
		{
			if (FactsQuerySum("ACS_Guiding_Light_Untracked_Quest_Marker_Distance_Available") > 0)
			{
				ACS_Guiding_Light_Untracked_Marker_Distance_Remove();

				FactsRemove("ACS_Guiding_Light_Untracked_Quest_Marker_Distance_Available");
			}

			if (FactsQuerySum("ACS_Guiding_Light_Quest_Marker_Distance_Available") > 0)
			{
				ACS_Guiding_Light_Quest_Marker_Distance_Remove();

				FactsRemove("ACS_Guiding_Light_Quest_Marker_Distance_Available");
			}

			if (FactsQuerySum("ACS_Guiding_Light_POI_Marker_Distance_Available") > 0)
			{
				ACS_Guiding_Light_POI_Marker_Distance_Remove();

				FactsRemove("ACS_Guiding_Light_POI_Marker_Distance_Available");
			}

			if (FactsQuerySum("ACS_Guiding_Light_Available_Quest_Marker_Distance_Available") > 0)
			{
				ACS_Guiding_Light_Available_Quest_Marker_Distance_Remove();

				FactsRemove("ACS_Guiding_Light_Available_Quest_Marker_Distance_Available");
			}

			if (FactsQuerySum("ACS_Guiding_Light_User_Marker_Distance_Available") > 0)
			{
				ACS_Guiding_Light_User_Marker_Distance_Remove();

				FactsRemove("ACS_Guiding_Light_User_Marker_Distance_Available");
			}

			return;
		}
		else
		{
			if (ACS_can_refresh_quest_marker_distance())
			{
				ACS_refresh_quest_marker_distance_cooldown();

				if (FactsQuerySum("ACS_Guiding_Light_Untracked_Quest_Marker_Distance_Available") > 0)
				{
					ACS_Guiding_Light_Untracked_Marker_Distance_Actual();
				}

				if (FactsQuerySum("ACS_Guiding_Light_Quest_Marker_Distance_Available") > 0)
				{
					ACS_Guiding_Light_Quest_Marker_Distance_Actual();
				}

				if (FactsQuerySum("ACS_Guiding_Light_POI_Marker_Distance_Available") > 0)
				{
					ACS_Guiding_Light_POI_Marker_Distance_Actual();
				}

				if (FactsQuerySum("ACS_Guiding_Light_Available_Quest_Marker_Distance_Available") > 0)
				{
					ACS_Guiding_Light_Available_Quest_Marker_Distance_Actual();
				}

				if (FactsQuerySum("ACS_Guiding_Light_User_Marker_Distance_Available") > 0)
				{
					ACS_Guiding_Light_User_Marker_Distance_Actual();
				}
			}
		}

		if((!theGame.GetFocusModeController().CanUseFocusMode()
		|| !theGame.IsFocusModeActive())
		&& ACS_Guiding_Light_Distance_Marker_Show_Only_In_Witcher_Sense_Enabled()
		)
		{
			if (FactsQuerySum("ACS_Guiding_Light_Untracked_Quest_Marker_Distance_Available") > 0)
			{
				ACS_Guiding_Light_Untracked_Marker_Distance_Remove();

				FactsRemove("ACS_Guiding_Light_Untracked_Quest_Marker_Distance_Available");
			}

			if (FactsQuerySum("ACS_Guiding_Light_Quest_Marker_Distance_Available") > 0)
			{
				ACS_Guiding_Light_Quest_Marker_Distance_Remove();

				FactsRemove("ACS_Guiding_Light_Quest_Marker_Distance_Available");
			}

			if (FactsQuerySum("ACS_Guiding_Light_POI_Marker_Distance_Available") > 0)
			{
				ACS_Guiding_Light_POI_Marker_Distance_Remove();

				FactsRemove("ACS_Guiding_Light_POI_Marker_Distance_Available");
			}

			if (FactsQuerySum("ACS_Guiding_Light_Available_Quest_Marker_Distance_Available") > 0)
			{
				ACS_Guiding_Light_Available_Quest_Marker_Distance_Remove();

				FactsRemove("ACS_Guiding_Light_Available_Quest_Marker_Distance_Available");
			}

			if (FactsQuerySum("ACS_Guiding_Light_User_Marker_Distance_Available") > 0)
			{
				ACS_Guiding_Light_User_Marker_Distance_Remove();

				FactsRemove("ACS_Guiding_Light_User_Marker_Distance_Available");
			}
		}
	}

	var last_starfall_time : float;

	function ACS_can_refresh_starfall(): bool 
	{
		return theGame.GetEngineTimeAsSeconds() - last_starfall_time > RandRangeF(60,36);
	}

	function ACS_refresh_starfall_cooldown() 
	{
		last_starfall_time = theGame.GetEngineTimeAsSeconds();
	}

	function Starfall_Control()
	{
		if (ACS_IsNight_Adjustable() && ACS_SpiralSkyStars_Enabled())
		{
			if (ACS_can_refresh_starfall())
			{
				ACS_refresh_starfall_cooldown();

				if (FactsQuerySum("ACS_Starfall_Active") <= 0)
				{

					FactsAdd("ACS_Starfall_Active");
				}
				else if (FactsQuerySum("ACS_Starfall_Active") > 0)
				{

					FactsRemove("ACS_Starfall_Active");
				}
			}

			if (FactsQuerySum("ACS_Starfall_Active") > 0)
			{
				if (!GetACSSpiralSky().IsEffectActive('meteors', false))
				{
					GetACSSpiralSky().PlayEffectSingle('meteors');
				}
			}
			else
			{
				GetACSSpiralSky().StopEffect('meteors');
			}
		}
		else
		{
			GetACSSpiralSky().DestroyEffect('meteors');
		}
	}

	function MaskAndHoodRemoveIfNaked()
	{
		if (theGame.IsDialogOrCutscenePlaying() 
		|| GetWitcherPlayer().IsInNonGameplayCutscene() 
		|| GetWitcherPlayer().IsInGameplayScene()
		|| theGame.IsCurrentlyPlayingNonGameplayScene()
		|| theGame.IsFading()
		|| theGame.IsBlackscreen()
		|| theGame.IsPaused()
		)
		{
			if ( !GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_Armor))
			{
				if ( FactsQuerySum("ACS_Mask_Enabled") > 0 )
				{
					Facegear_Exclude_Actual();

					FactsRemove("ACS_Mask_Enabled");
				}

				if (FactsQuerySum("ACS_Hood_Enabled") > 0)
				{
					Hood_Exclude_Actual();

					FactsRemove("ACS_Hood_Enabled");
				}

				CloakToggleOff();

				if ( FactsQuerySum("ACS_Bow_Quiver_Loaded") > 0 )
				{
					BowQuiverUnload();

					FactsRemove("ACS_Bow_Quiver_Loaded");
				}

				if ( !GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_Pants) )
				{
					if (GetACSItemPropAnchor())
					{
						GetACSItemPropAnchor().Destroy();
					}
					
					if (FactsQuerySum("ACS_Torch_Equipped") > 0)
					{
						GetACSTorchPropDestroyAll();

						FactsRemove("ACS_Torch_Equipped");
					}

					if (FactsQuerySum("ACS_Magic_Lamp_Equipped") > 0)
					{
						GetACSMagicLampPropDestroyAll();

						FactsRemove("ACS_Magic_Lamp_Equipped");
					}

					if (FactsQuerySum("ACS_Oil_Lamp_Equipped") > 0)
					{
						GetACSOilLampPropDestroyAll();

						FactsRemove("ACS_Oil_Lamp_Equipped");
					}

					if (FactsQuerySum("ACS_Censer_Equipped") > 0)
					{
						GetACSCenserPropDestroyAll();

						FactsRemove("ACS_Censer_Equipped");
					}

					if (FactsQuerySum("ACS_Navigator_Horn_Equipped") > 0)
					{
						GetACSNavigatorHornPropDestroyAll();

						FactsRemove("ACS_Navigator_Horn_Equipped");
					}

					if (FactsQuerySum("ACS_Lure_Equipped") > 0)
					{
						GetACSLurePropDestroyAll();

						FactsRemove("ACS_Lure_Equipped");
					}

					if (FactsQuerySum("ACS_Bell_Equipped") > 0)
					{
						GetACSBellPropDestroyAll();

						FactsRemove("ACS_Bell_Equipped");
					}

					if (FactsQuerySum("ACS_Potestaquisitor_Equipped") > 0)
					{
						GetACSPotestaquisitorPropDestroyAll();

						FactsRemove("ACS_Potestaquisitor_Equipped");
					}

					if (FactsQuerySum("ACS_Eye_Of_Loki_Equipped") > 0)
					{
						GetACSEyeOfLokiPropDestroyAll();

						FactsRemove("ACS_Eye_Of_Loki_Equipped");
					}

					if (FactsQuerySum("ACS_Pouch_Equipped") > 0)
					{
						GetACSPouchPropDestroyAll();

						FactsRemove("ACS_Pouch_Equipped");
					}

					if (GetACSBombPropAnchor())
					{
						GetACSBombPropAnchor().Destroy();
					}
					
					if (FactsQuerySum("ACS_Dancing_Star_Equipped") > 0)
					{
						GetACSDancingStarPropDestroyAll();

						FactsRemove("ACS_Dancing_Star_Equipped");
					}

					if (FactsQuerySum("ACS_Devils_Puffball_Equipped") > 0)
					{
						GetACSDevilsPuffballPropDestroyAll();

						FactsRemove("ACS_Devils_Puffball_Equipped");
					}

					if (FactsQuerySum("ACS_Dwimeritium_Bomb_Equipped") > 0)
					{
						GetACSDwimeritiumPropDestroyAll();

						FactsRemove("ACS_Dwimeritium_Bomb_Equipped");
					}

					if (FactsQuerySum("ACS_Dragons_Dream_Equipped") > 0)
					{
						GetACSDragonsDreamPropDestroyAll();

						FactsRemove("ACS_Dragons_Dream_Equipped");
					}

					if (FactsQuerySum("ACS_Grapeshot_Equipped") > 0)
					{
						GetACSGrapeshotPropDestroyAll();

						FactsRemove("ACS_Grapeshot_Equipped");
					}

					if (FactsQuerySum("ACS_Silver_Dust_Equipped") > 0)
					{
						GetACSSilverDustPropDestroyAll();

						FactsRemove("ACS_Silver_Dust_Equipped");
					}

					if (FactsQuerySum("ACS_White_Frost_Equipped") > 0)
					{
						GetACSWhiteFrostPropDestroyAll();

						FactsRemove("ACS_White_Frost_Equipped");
					}

					if (FactsQuerySum("ACS_Samum_Equipped") > 0)
					{
						GetACSSamumPropDestroyAll();

						FactsRemove("ACS_Samum_Equipped");
					}

					if (FactsQuerySum("ACS_Salt_Bomb_Equipped") > 0)
					{
						GetACSSaltBombPropDestroyAll();

						FactsRemove("ACS_Salt_Bomb_Equipped");
					}

					if (FactsQuerySum("ACS_Glue_Bomb_Equipped") > 0)
					{
						GetACSGlueBombPropDestroyAll();

						FactsRemove("ACS_Glue_Bomb_Equipped");
					}

					if (FactsQuerySum("ACS_Fungi_Bomb_Equipped") > 0)
					{
						GetACSFungiBombPropDestroyAll();

						FactsRemove("ACS_Fungi_Bomb_Equipped");
					}

					if (FactsQuerySum("ACS_Shrapnel_Bomb_Equipped") > 0)
					{
						GetACSShrapnelBombPropDestroyAll();

						FactsRemove("ACS_Shrapnel_Bomb_Equipped");
					}

					if (FactsQuerySum("ACS_Virus_Bomb_Equipped") > 0)
					{
						GetACSVirusBombPropDestroyAll();

						FactsRemove("ACS_Virus_Bomb_Equipped");
					}
				}
			}
		}
		else
		{
			return;
		}
	}

	var last_horse_follow_target_novigrad_teleport_time : float;

	var last_horse_follow_target_nilfgaard_teleport_time : float;

	var last_horse_follow_target_redania_teleport_time : float;

	function ACS_horse_follow_target_novigrad_can_teleport(): bool 
	{
		return theGame.GetEngineTimeAsSeconds() - last_horse_follow_target_novigrad_teleport_time > 120;
	}

	function ACS_refresh_horse_follow_target_novigrad_teleport_cooldown() 
	{
		last_horse_follow_target_novigrad_teleport_time = theGame.GetEngineTimeAsSeconds();
	}

	function ACS_horse_follow_target_nilfgaard_can_teleport(): bool 
	{
		return theGame.GetEngineTimeAsSeconds() - last_horse_follow_target_nilfgaard_teleport_time > 30;
	}

	function ACS_refresh_horse_follow_target_nilfgaard_teleport_cooldown() 
	{
		last_horse_follow_target_nilfgaard_teleport_time = theGame.GetEngineTimeAsSeconds();
	}

	function ACS_horse_follow_target_redania_can_teleport(): bool 
	{
		return theGame.GetEngineTimeAsSeconds() - last_horse_follow_target_redania_teleport_time > 60;
	}

	function ACS_refresh_horse_follow_target_redania_teleport_cooldown() 
	{
		last_horse_follow_target_redania_teleport_time = theGame.GetEngineTimeAsSeconds();
	}

	function HorseRiderFollowTargetTeleport()
	{
		var novigrad_pos1, novigrad_pos2, novigrad_pos3													: Vector;

		var nilfgaard_pos1, nilfgaard_pos2, nilfgaard_pos3												: Vector;

		var redania_pos1, redania_pos2, redania_pos3													: Vector;

		if (GetACS_HorseRiderFollowTargetNovigrad())
		{
			if (ACS_horse_follow_target_novigrad_can_teleport())
			{
				ACS_refresh_horse_follow_target_novigrad_teleport_cooldown();

				if (theGame.GetWorld().GetDepotPath() == "levels\novigrad\novigrad.w2w")
				{
					novigrad_pos3 = Vector(733.319580, 1393.808716, 14.814985, 1);

					novigrad_pos2 = Vector(1032.619873, 2068.319824, 1.808512, 1);

					novigrad_pos1 = Vector(453.506348, 2240.663330, 47.299950, 1);
				}

				if (!GetACS_HorseRiderFollowTargetNovigrad().HasTag('ACS_Horse_Rider_Follow_Target_Position_1')
				&& !GetACS_HorseRiderFollowTargetNovigrad().HasTag('ACS_Horse_Rider_Follow_Target_Position_2')
				&& !GetACS_HorseRiderFollowTargetNovigrad().HasTag('ACS_Horse_Rider_Follow_Target_Position_3')
				)
				{
					GetACS_HorseRiderFollowTargetNovigrad().Teleport(novigrad_pos1);

					GetACS_HorseRiderFollowTargetNovigrad().AddTag('ACS_Horse_Rider_Follow_Target_Position_1');
				}
				else if (GetACS_HorseRiderFollowTargetNovigrad().HasTag('ACS_Horse_Rider_Follow_Target_Position_1')
				&& !GetACS_HorseRiderFollowTargetNovigrad().HasTag('ACS_Horse_Rider_Follow_Target_Position_2')
				&& !GetACS_HorseRiderFollowTargetNovigrad().HasTag('ACS_Horse_Rider_Follow_Target_Position_3')
				)
				{
					GetACS_HorseRiderFollowTargetNovigrad().Teleport(novigrad_pos2);

					GetACS_HorseRiderFollowTargetNovigrad().AddTag('ACS_Horse_Rider_Follow_Target_Position_2');
				}
				else if (GetACS_HorseRiderFollowTargetNovigrad().HasTag('ACS_Horse_Rider_Follow_Target_Position_1')
				&& GetACS_HorseRiderFollowTargetNovigrad().HasTag('ACS_Horse_Rider_Follow_Target_Position_2')
				&& !GetACS_HorseRiderFollowTargetNovigrad().HasTag('ACS_Horse_Rider_Follow_Target_Position_3')
				)
				{
					GetACS_HorseRiderFollowTargetNovigrad().Teleport(novigrad_pos3);

					GetACS_HorseRiderFollowTargetNovigrad().AddTag('ACS_Horse_Rider_Follow_Target_Position_3');
				}
				else if (GetACS_HorseRiderFollowTargetNovigrad().HasTag('ACS_Horse_Rider_Follow_Target_Position_1')
				&& GetACS_HorseRiderFollowTargetNovigrad().HasTag('ACS_Horse_Rider_Follow_Target_Position_2')
				&& GetACS_HorseRiderFollowTargetNovigrad().HasTag('ACS_Horse_Rider_Follow_Target_Position_3')
				)
				{
					GetACS_HorseRiderFollowTargetNovigrad().Teleport(novigrad_pos1);

					GetACS_HorseRiderFollowTargetNovigrad().RemoveTag('ACS_Horse_Rider_Follow_Target_Position_1');
					GetACS_HorseRiderFollowTargetNovigrad().RemoveTag('ACS_Horse_Rider_Follow_Target_Position_2');
					GetACS_HorseRiderFollowTargetNovigrad().RemoveTag('ACS_Horse_Rider_Follow_Target_Position_3');
				}
			}
		}

		if (GetACS_HorseRiderFollowTargetNilfgaard())
		{
			if (ACS_horse_follow_target_nilfgaard_can_teleport())
			{
				ACS_refresh_horse_follow_target_nilfgaard_teleport_cooldown();

				if (theGame.GetWorld().GetDepotPath() == "levels\novigrad\novigrad.w2w")
				{
					nilfgaard_pos1 = Vector(2194.010010, -717.697571, 0.935780, 1);

					nilfgaard_pos2 = Vector(2587.317139, -977.438538, 4.314292, 1);

					nilfgaard_pos3 = Vector(2503.556152, -863.483826, 2.293803, 1);
				}

				if (!GetACS_HorseRiderFollowTargetNilfgaard().HasTag('ACS_Horse_Rider_Follow_Target_Position_1')
				&& !GetACS_HorseRiderFollowTargetNilfgaard().HasTag('ACS_Horse_Rider_Follow_Target_Position_2')
				&& !GetACS_HorseRiderFollowTargetNilfgaard().HasTag('ACS_Horse_Rider_Follow_Target_Position_3')
				)
				{
					GetACS_HorseRiderFollowTargetNilfgaard().Teleport(nilfgaard_pos1);

					GetACS_HorseRiderFollowTargetNilfgaard().AddTag('ACS_Horse_Rider_Follow_Target_Position_1');
				}
				else if (GetACS_HorseRiderFollowTargetNilfgaard().HasTag('ACS_Horse_Rider_Follow_Target_Position_1')
				&& !GetACS_HorseRiderFollowTargetNilfgaard().HasTag('ACS_Horse_Rider_Follow_Target_Position_2')
				&& !GetACS_HorseRiderFollowTargetNilfgaard().HasTag('ACS_Horse_Rider_Follow_Target_Position_3')
				)
				{
					GetACS_HorseRiderFollowTargetNilfgaard().Teleport(nilfgaard_pos2);

					GetACS_HorseRiderFollowTargetNilfgaard().AddTag('ACS_Horse_Rider_Follow_Target_Position_2');
				}
				else if (GetACS_HorseRiderFollowTargetNilfgaard().HasTag('ACS_Horse_Rider_Follow_Target_Position_1')
				&& GetACS_HorseRiderFollowTargetNilfgaard().HasTag('ACS_Horse_Rider_Follow_Target_Position_2')
				&& !GetACS_HorseRiderFollowTargetNilfgaard().HasTag('ACS_Horse_Rider_Follow_Target_Position_3')
				)
				{
					GetACS_HorseRiderFollowTargetNilfgaard().Teleport(nilfgaard_pos3);

					GetACS_HorseRiderFollowTargetNilfgaard().AddTag('ACS_Horse_Rider_Follow_Target_Position_3');
				}
				else if (GetACS_HorseRiderFollowTargetNilfgaard().HasTag('ACS_Horse_Rider_Follow_Target_Position_1')
				&& GetACS_HorseRiderFollowTargetNilfgaard().HasTag('ACS_Horse_Rider_Follow_Target_Position_2')
				&& GetACS_HorseRiderFollowTargetNilfgaard().HasTag('ACS_Horse_Rider_Follow_Target_Position_3')
				)
				{
					GetACS_HorseRiderFollowTargetNilfgaard().Teleport(nilfgaard_pos1);

					GetACS_HorseRiderFollowTargetNilfgaard().RemoveTag('ACS_Horse_Rider_Follow_Target_Position_1');
					GetACS_HorseRiderFollowTargetNilfgaard().RemoveTag('ACS_Horse_Rider_Follow_Target_Position_2');
					GetACS_HorseRiderFollowTargetNilfgaard().RemoveTag('ACS_Horse_Rider_Follow_Target_Position_3');
				}
			}
		}

		if (GetACS_HorseRiderFollowTargetRedania())
		{
			if (ACS_horse_follow_target_redania_can_teleport())
			{
				ACS_refresh_horse_follow_target_redania_teleport_cooldown();

				if (theGame.GetWorld().GetDepotPath() == "levels\novigrad\novigrad.w2w")
				{
					redania_pos3 = Vector(1224.159180, 644.492615, 34.799957, 1);

					redania_pos2 = Vector(1808.964233, 511.915314, 3.037488, 1);

					redania_pos1 = Vector(2059.403564, 1120.827759, 4.660693, 1);
				}

				if (!GetACS_HorseRiderFollowTargetRedania().HasTag('ACS_Horse_Rider_Follow_Target_Position_1')
				&& !GetACS_HorseRiderFollowTargetRedania().HasTag('ACS_Horse_Rider_Follow_Target_Position_2')
				&& !GetACS_HorseRiderFollowTargetRedania().HasTag('ACS_Horse_Rider_Follow_Target_Position_3')
				)
				{
					GetACS_HorseRiderFollowTargetRedania().Teleport(redania_pos1);

					GetACS_HorseRiderFollowTargetRedania().AddTag('ACS_Horse_Rider_Follow_Target_Position_1');
				}
				else if (GetACS_HorseRiderFollowTargetRedania().HasTag('ACS_Horse_Rider_Follow_Target_Position_1')
				&& !GetACS_HorseRiderFollowTargetRedania().HasTag('ACS_Horse_Rider_Follow_Target_Position_2')
				&& !GetACS_HorseRiderFollowTargetRedania().HasTag('ACS_Horse_Rider_Follow_Target_Position_3')
				)
				{
					GetACS_HorseRiderFollowTargetRedania().Teleport(redania_pos2);

					GetACS_HorseRiderFollowTargetRedania().AddTag('ACS_Horse_Rider_Follow_Target_Position_2');
				}
				else if (GetACS_HorseRiderFollowTargetRedania().HasTag('ACS_Horse_Rider_Follow_Target_Position_1')
				&& GetACS_HorseRiderFollowTargetRedania().HasTag('ACS_Horse_Rider_Follow_Target_Position_2')
				&& !GetACS_HorseRiderFollowTargetRedania().HasTag('ACS_Horse_Rider_Follow_Target_Position_3')
				)
				{
					GetACS_HorseRiderFollowTargetRedania().Teleport(redania_pos3);

					GetACS_HorseRiderFollowTargetRedania().AddTag('ACS_Horse_Rider_Follow_Target_Position_3');
				}
				else if (GetACS_HorseRiderFollowTargetRedania().HasTag('ACS_Horse_Rider_Follow_Target_Position_1')
				&& GetACS_HorseRiderFollowTargetRedania().HasTag('ACS_Horse_Rider_Follow_Target_Position_2')
				&& GetACS_HorseRiderFollowTargetRedania().HasTag('ACS_Horse_Rider_Follow_Target_Position_3')
				)
				{
					GetACS_HorseRiderFollowTargetRedania().Teleport(redania_pos1);

					GetACS_HorseRiderFollowTargetRedania().RemoveTag('ACS_Horse_Rider_Follow_Target_Position_1');
					GetACS_HorseRiderFollowTargetRedania().RemoveTag('ACS_Horse_Rider_Follow_Target_Position_2');
					GetACS_HorseRiderFollowTargetRedania().RemoveTag('ACS_Horse_Rider_Follow_Target_Position_3');
				}
			}
		}

		HorseRiderRedaniaBreakAttachment();

		HorseRiderNovigradBreakAttachment();

		HorseRiderNilfgaardBreakAttachment();
	}

	function HorseRiderRedaniaBreakAttachment()
	{	
		var i, j											: int;
		var ents, horseEnts 								: array<CActor>;
		var enemyAnimatedComponent 							: CAnimatedComponent;
		var targetDistanceRider, targetDistanceHorse		: float;

		ents.Clear();

		theGame.GetActorsByTag( 'ACS_Horse_Rider_Redania', ents );	

		if (ents.Size() < 0)
		{
			return;
		}
		
		for( i = 0; i < ents.Size(); i += 1 )
		{
			enemyAnimatedComponent = (CAnimatedComponent)ents[i].GetComponentByClassName( 'CAnimatedComponent' );	

			targetDistanceRider = VecDistanceSquared2D( thePlayer.GetWorldPosition(), ents[i].GetWorldPosition() );

			if (ents[i].IsInCombat())
			{
				if (!ents[i].HasTag('ACS_Horse_Rider_In_Combat'))
				{
					enemyAnimatedComponent.UnfreezePose();

					ents[i].EnableCollisions(true);
					ents[i].EnableCharacterCollisions(true);

					ents[i].BreakAttachment();

					ents[i].AddTag('ACS_Horse_Rider_In_Combat');
				}
			}

			if (targetDistanceRider >= 150 * 150
			)
			{
				ents[i].Destroy();
			}
		}

		horseEnts.Clear();

		theGame.GetActorsByTag( 'ACS_Horse_Rider_Horse_Redania', horseEnts );	

		if (horseEnts.Size() < 0)
		{
			return;
		}
		
		for( j = 0; j < horseEnts.Size(); j += 1 )
		{
			targetDistanceHorse = VecDistanceSquared2D( thePlayer.GetWorldPosition(), horseEnts[j].GetWorldPosition() );

			if (targetDistanceHorse >= 150 * 150
			)
			{
				horseEnts[j].Destroy();
			}
		}
	}

	function HorseRiderNovigradBreakAttachment()
	{	
		var i, j											: int;
		var ents, horseEnts 								: array<CActor>;
		var enemyAnimatedComponent 							: CAnimatedComponent;
		var targetDistanceRider, targetDistanceHorse		: float;

		ents.Clear();

		theGame.GetActorsByTag( 'ACS_Horse_Rider_Novigrad', ents );	

		if (ents.Size() < 0)
		{
			return;
		}
		
		for( i = 0; i < ents.Size(); i += 1 )
		{
			enemyAnimatedComponent = (CAnimatedComponent)ents[i].GetComponentByClassName( 'CAnimatedComponent' );	

			targetDistanceRider = VecDistanceSquared2D( thePlayer.GetWorldPosition(), ents[i].GetWorldPosition() );

			if (ents[i].IsInCombat())
			{
				if (!ents[i].HasTag('ACS_Horse_Rider_In_Combat'))
				{
					enemyAnimatedComponent.UnfreezePose();

					ents[i].EnableCollisions(true);
					ents[i].EnableCharacterCollisions(true);

					ents[i].BreakAttachment();

					ents[i].AddTag('ACS_Horse_Rider_In_Combat');
				}
			}

			if (targetDistanceRider >= 150 * 150
			)
			{
				ents[i].Destroy();
			}
		}


		horseEnts.Clear();

		theGame.GetActorsByTag( 'ACS_Horse_Rider_Horse_Novigrad', horseEnts );	

		if (horseEnts.Size() < 0)
		{
			return;
		}
		
		for( j = 0; j < horseEnts.Size(); j += 1 )
		{
			targetDistanceHorse = VecDistanceSquared2D( thePlayer.GetWorldPosition(), horseEnts[j].GetWorldPosition() );

			if (targetDistanceHorse >= 150 * 150
			)
			{
				horseEnts[j].Destroy();
			}
		}

	}

	function HorseRiderNilfgaardBreakAttachment()
	{	
		var i, j											: int;
		var ents, horseEnts 								: array<CActor>;
		var enemyAnimatedComponent 							: CAnimatedComponent;
		var targetDistanceRider, targetDistanceHorse		: float;

		ents.Clear();

		theGame.GetActorsByTag( 'ACS_Horse_Rider_Nilfgaard', ents );	

		if (ents.Size() < 0)
		{
			return;
		}

		for( i = 0; i < ents.Size(); i += 1 )
		{
			enemyAnimatedComponent = (CAnimatedComponent)ents[i].GetComponentByClassName( 'CAnimatedComponent' );	

			targetDistanceRider = VecDistanceSquared2D( thePlayer.GetWorldPosition(), ents[i].GetWorldPosition() );

			if (ents[i].IsInCombat())
			{
				if (!ents[i].HasTag('ACS_Horse_Rider_In_Combat'))
				{
					enemyAnimatedComponent.UnfreezePose();

					ents[i].EnableCollisions(true);
					ents[i].EnableCharacterCollisions(true);

					ents[i].BreakAttachment();

					ents[i].AddTag('ACS_Horse_Rider_In_Combat');
				}
			}

			if (targetDistanceRider >= 150 * 150
			)
			{
				ents[i].Destroy();
			}
		}



		horseEnts.Clear();

		theGame.GetActorsByTag( 'ACS_Horse_Rider_Horse_Nilfgaard', horseEnts );	

		if (horseEnts.Size() < 0)
		{
			return;
		}
		
		for( j = 0; j < horseEnts.Size(); j += 1 )
		{
			targetDistanceHorse = VecDistanceSquared2D( thePlayer.GetWorldPosition(), horseEnts[j].GetWorldPosition() );

			if (targetDistanceHorse >= 150 * 150
			)
			{
				horseEnts[j].Destroy();
			}
		}

	}

	function HairworksRefreshFix()
	{
		if (ACS_GetHairworksMode() == 2)
		{
			if ( theGame.IsDialogOrCutscenePlaying() 
			|| thePlayer.IsInNonGameplayCutscene() 
			|| thePlayer.IsInGameplayScene() 
			|| theGame.IsCurrentlyPlayingNonGameplayScene()
			|| theGame.IsFading()
			|| theGame.IsBlackscreen()
			//|| theGame.IsPaused() 
			)
			{
				if (FactsQuerySum("ACS_Hairworks_Fix_Refresh_On_Exit_Cutscene") > 0)
				{
					FactsRemove("ACS_Hairworks_Fix_Refresh_On_Exit_Cutscene");
				}

				if ( FactsQuerySum("ACS_Hairworks_Fix_Refresh_On_Enter_Cutscene") <= 0 )
				{
					theGame.GetInGameConfigWrapper().SetVarValue('Graphics', 'Virtual_HairWorksLevel', "0");
					theGame.GetInGameConfigWrapper().SetVarValue('Graphics', 'Virtual_HairWorksLevel', "2");

					FactsAdd("ACS_Hairworks_Fix_Refresh_On_Enter_Cutscene", 1, -1);
				}
			}
			else
			{
				if (FactsQuerySum("ACS_Hairworks_Fix_Refresh_On_Enter_Cutscene") > 0)
				{
					FactsRemove("ACS_Hairworks_Fix_Refresh_On_Enter_Cutscene");
				}

				if ( FactsQuerySum("ACS_Hairworks_Fix_Refresh_On_Exit_Cutscene") <= 0 )
				{
					theGame.GetInGameConfigWrapper().SetVarValue('Graphics', 'Virtual_HairWorksLevel', "0");
					theGame.GetInGameConfigWrapper().SetVarValue('Graphics', 'Virtual_HairWorksLevel', "2");

					FactsAdd("ACS_Hairworks_Fix_Refresh_On_Exit_Cutscene", 1, -1);
				}
			}
		}
	}

	function RemoveEncountersOnEnterCutscene()
	{
		if ( theGame.IsDialogOrCutscenePlaying() 
		|| thePlayer.IsInNonGameplayCutscene() 
		|| theGame.IsFading()
		|| theGame.IsBlackscreen()
		)
		{
			RemoveTimer('AdditionalSpawnsDelay');

			//Forest God Shadows
			ACS_Forest_God_Shadows_Destroy();

			//Wildhunt Riders
			RemoveTimer('ACS_WildHuntRiders_DeactivateFrostEffect');

			RemoveTimer('ACS_WildHuntRiders_Destroy');

			ACSWildHuntRiders_Destroy();

			//Night Hunter
			GetACSNightStalker().Destroy();

			RemoveTimer('ACS_NightStalker_Kill_Timer');

			RemoveTimer('NightStalkerCamo');
			RemoveTimer('NightStalkerVisibility');

			RemoveTimer('NightStalkerDeathCamo');
			RemoveTimer('NightStalkerDeathTeleport');

			//Elderblood Assassin
			ACS_Elderblood_Assassins_Destroy();
		}
		else
		{
			return;
		}
	}
	
	var last_cutscene_functions_refresh_time : float;

	function ACS_can_refresh_cutscene_functions(): bool 
	{
		return theGame.GetEngineTimeAsSeconds() - last_cutscene_functions_refresh_time > 0.75f;
	}

	function ACS_refresh_cutscene_functions_cooldown() 
	{
		last_cutscene_functions_refresh_time = theGame.GetEngineTimeAsSeconds();
	}
	
	var last_out_of_cutscene_functions_refresh_time : float;

	function ACS_can_refresh_out_of_cutscene_functions(): bool 
	{
		return theGame.GetEngineTimeAsSeconds() - last_out_of_cutscene_functions_refresh_time > 0.75f;
	}

	function ACS_refresh_out_of_cutscene_functions_cooldown() 
	{
		last_out_of_cutscene_functions_refresh_time = theGame.GetEngineTimeAsSeconds();
	}
	
	function RemoveMarkersInCutscene()
	{
		if ( theGame.IsDialogOrCutscenePlaying() 
		|| thePlayer.IsInNonGameplayCutscene() 
		|| theGame.IsFading()
		|| theGame.IsBlackscreen()
		)
		{
			Remove_On_Hit_Tags();

			ACSSignComboIconDestroyAll();

			ACSSignComboSystemRemoveTags();
		}
	}

	function InteractionMovementCheck()
	{
		var interactionTarget 	: CInteractionComponent;

		interactionTarget = theGame.GetInteractionsManager().GetActiveInteraction();

		if (interactionTarget)
		{
			ACS_Interaction_Movement_Prevention_Delay();
		}
	}

	function WingEntityTeleport()
	{
		if (!ACS_Wings_Entity_Anchor())
		{
			return;
		}

		ACS_Wings_Entity_Anchor().TeleportWithRotation(thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation());
	}

	function BotchlingResize()
	{
		var meshcomp														: CComponent;
		var animcomp														: CAnimatedComponent;
		var h 																: float;

		if (!GetACSBotchling())
		{
			return;
		}

		if (!GetACSBotchling().HasTag('ACS_Botchling_Resize_Start'))
		{
			GetACSBotchling().PlayEffect('fx_quest_q103');
			GetACSBotchling().StopEffect('fx_quest_q103');

			GetACSBotchling().PlayEffect('appear_fx');
			GetACSBotchling().PlayEffect('morph_fx');

			GetACSBotchling().StopEffect('appear_fx');
			GetACSBotchling().StopEffect('morph_fx');

			GetACSBotchling().SetVisibility( false );

			AddTimer('BotchlingGrowTimer', 0.01, true);

			GetACSBotchling().AddTag('ACS_Botchling_Resize_Start');
		}
	}

	private var botchlingScale 																		: float;

	default botchlingScale 																			= 1;

	public timer function BotchlingGrowTimer ( dt : float, id : int)
	{ 
		if (botchlingScale >= 2)
		{
			GetACSBotchling().DestroyEffect('appear_fx');
			GetACSBotchling().DestroyEffect('morph_fx');

			GetACSBotchling().PlayEffect('appear_fx');
			GetACSBotchling().PlayEffect('morph_fx');

			GetACSBotchling().StopEffect('appear_fx');
			GetACSBotchling().StopEffect('morph_fx');

			GetACSBotchling().AddTag('ACS_Botchling_Resize_Complete');

			GetACSBotchling().SetVisibility( true );

			RemoveTimer('BotchlingGrowTimer');
		}
		else
		{
			BotchlingGrowActual();
		}	
	}

	function BotchlingGrowActual()
	{
		var meshcomp														: CComponent;
		var animcomp														: CAnimatedComponent;

		animcomp = (CAnimatedComponent)GetACSBotchling().GetComponentByClassName('CAnimatedComponent');
		meshcomp = GetACSBotchling().GetComponentByClassName('CMeshComponent');

		if (botchlingScale >= 2)
		{
			GetACSBotchling().DestroyEffect('appear_fx');
			GetACSBotchling().DestroyEffect('morph_fx');

			GetACSBotchling().PlayEffect('appear_fx');
			GetACSBotchling().PlayEffect('morph_fx');

			GetACSBotchling().StopEffect('appear_fx');
			GetACSBotchling().StopEffect('morph_fx');

			GetACSBotchling().AddTag('ACS_Botchling_Resize_Complete');

			GetACSBotchling().SetVisibility( true );

			RemoveTimer('BotchlingGrowTimer');
		}
		else
		{
			meshcomp.SetScale(Vector(
				
			botchlingScale += 0.01,
			botchlingScale += 0.01,
			botchlingScale += 0.01

			));

			animcomp.SetScale(Vector(
				
			botchlingScale += 0.01,
			botchlingScale += 0.01,
			botchlingScale += 0.01

			));
		}
	}

	var vACS_EnemyBehSwitch 	: cACS_EnemyBehSwitch;

	function ACS_EnemyBehSwitch_Watcher()
	{
		vACS_EnemyBehSwitch = new cACS_EnemyBehSwitch in this;

		vACS_EnemyBehSwitch.EnemyBehSwitch();
	}

	function THE_EYE()
	{
		if (!ACS_Enabled())
		{
			return;
		}

		if (!GetWitcherPlayer())
		{
			if (FactsQuerySum("ACS_Hood_Enabled") > 0)
			{
				Hood_Exclude();

				FactsRemove("ACS_Hood_Enabled");
			}

			if ( FactsQuerySum("ACS_Mask_Enabled") > 0 )
			{
				Facegear_Exclude_Actual();

				FactsRemove("ACS_Mask_Enabled");
			}

			if (FactsQuerySum("ACS_Eredin_Cloak_Equipped") > 0)
			{
				GetACSEredinCloakAnchor().Destroy();
				GetACSEredinCloak().Destroy();

				FactsRemove("ACS_Eredin_Cloak_Equipped");
			}

			if (FactsQuerySum("ACS_VGX_Eredin_Cloak_Equipped") > 0)
			{
				GetACSVGXEredinCloakAnchor().Destroy();
				GetACSVGXEredinCloak().Destroy();

				FactsRemove("ACS_VGX_Eredin_Cloak_Equipped");
			}
			
			if (FactsQuerySum("ACS_Eredin_Skirt_Equipped") > 0)
			{
				GetACSEredinSkirtAnchor().Destroy();
				GetACSEredinSkirt().Destroy();

				FactsRemove("ACS_Eredin_Skirt_Equipped");
			}

			if (FactsQuerySum("ACS_Imlerith_Skirt_Equipped") > 0)
			{
				GetACSImlerithSkirtAnchor().Destroy();
				GetACSImlerithSkirt().Destroy();
				
				FactsRemove("ACS_Imlerith_Skirt_Equipped");
			}

			return;
		}

		//HairworksRefreshFix();

		if (ACS_can_refresh_cutscene_functions())
		{
			ACS_refresh_cutscene_functions_cooldown();
			
			Human_Ice_Breathe_Controller_Spawner();
			
			ACS_Ether_Sword_Control();
			
			ACS_Helm_Equip();

			RemoveEncountersOnEnterCutscene();

			RemoveMarkersInCutscene();
		}

		MenuCutsceneHUDFix();

		WinGwent();

		Scabbard_Thing();
		
		Transformation_Control();
		
		Starfall_Control();

		Wearable_Pocket_Items_Controller();

		ACS_Lightning_Strike();

		//ACS_Fish_Generate();

		VampireClawsSprintHide();

		ACS_Wild_Hunt_Armor_Equipped();

		ACS_Knight_Armor_Equipped();

		Guiding_Light();

		Guiding_Light_POI_Scan();

		Guiding_Light_Available_Quest_Scan();

		Guiding_Light_User_Pin_Display();

		ACS_Tracked_Quest_Ents_Control();

		//ACS_Potestaquisitor_GPS();

		ACS_SpiralSkyControl();

		MutePlayerControl();

		BowAndCrossbowCheck();

		DisableCatFallback();

		Guiding_Light_Distance_Controller();

		ACS_Armor_Effects();

		MaskAndHoodRemoveIfNaked();

		ACS_Darkness();

		if ( theGame.IsDialogOrCutscenePlaying() 
		|| thePlayer.IsInNonGameplayCutscene() 
		|| thePlayer.IsInGameplayScene() 
		|| theGame.IsCurrentlyPlayingNonGameplayScene()
		|| theGame.IsFading()
		|| theGame.IsBlackscreen()
		|| theGame.IsPaused() 
		)
		{
			return;
		}

		HudModulesAutoHide();
		
		if (!theGame.IsUberMovementEnabled())
		{
			theGame.EnableUberMovement( true );
		}
		
		if (ACS_can_refresh_out_of_cutscene_functions())
		{
			ACS_refresh_out_of_cutscene_functions_cooldown();

			InteractionMovementCheck();

			HorseRiderFollowTargetTeleport();

			ACS_Fog_Generate();

			Wisp_Levelup_Tutorial();
			
			AllBlackControl();
			
			Aerondight_Check();

			ACS_Armor_Functions();
			
			Shallow_Water_Unblock_Hack();

			Nekker_Guardian_Check();
			
			DisableCameraAnim();
			
			InterruptChargeAttackForSwappedBeh();
			
			ACS_Remove_Monster_Fear();
			
			ACS_EnemyBehSwitch_Watcher();
			
			Durability_Always_Max();
			
			AutoRead();

			GetACSCloakVampInCombatCheck();

			GetACSLynxWitcherInCombatCheck();

			Enemy_Idle_Action();

			ACS_FluffyFriendlyWolves();

			GetACSFluffyInCombatCheck();

			ACS_Never_Time_Out();

			ACSWildHuntRidersRideTowardsPlayer();

			GetACSSummonedConstruct1Follow();

			GetACSSummonedConstruct2Follow();

			//ACS_ArmorFriendlyWolves();

			ACS_FriendlyWolves();

			ACS_Sneaking();

			FUCKING_TUTORIAL_DISABLE();
			
			ACS_Melusine_Cloud_Controls();

			ACS_Cultist_Force_Attitude();
			
			ACS_PirateZombieController();

			GetACSMegaWraithSwordHide();

			ACS_BlockInteractionModule();

			ACS_Give_Stuff();
			
			VampireQuenIndicator();

			SetPlayerTargetAcquire();

			ACSSignComboIconCheck();

			ACS_Phantom_Weapon_Manager();

			ACS_NPC_Add_Health();
		}

		BotchlingResize();

		WingEntityTeleport();

		Sword_Hold_Forcer();

		Sword_Persistent_Effects();

		removeEffectsFromPlayer();
		
		IncreaseSwimSpeed();

		FocusModeOverrideCamera();

		PlayerOverrideCamera();

		ForceGuardedStance();

		Critical_Low_Health_Fix();

		Player_In_Combat();

		FUCKING_SECOND_LIFE_HACK();

		LookatLoop();

		Enemy_Death_Effects();

		Glide_Stop();

		Manual_Camera_Control();

		SwordWalkCancelFallback();

		ACS_QuestTrackControl();

		ACS_MeditationControl();

		AltBurnStopFailsafe();

		GetWitcherPlayer().RemoveTimer( 'DelayedSheathSword' );

		if (ACS_GetItem_Iris())
		{
			if(thePlayer.GetCurrentHealth() < thePlayer.GetMaxHealth())
			{
				thePlayer.GainStat( BCS_Vitality, (thePlayer.GetMaxHealth() - thePlayer.GetCurrentHealth()) * 0.0005 );
			}
		}

		if(thePlayer.HasBuff(EET_OverEncumbered))
		{
			thePlayer.RemoveAllBuffsOfType(EET_OverEncumbered);
		}
	}

	function BatsSummonActual()
	{
		if (thePlayer.HasTag('ACS_AardPull_Active'))
		{
			ACS_Bats_Summon();
		}	
	}

	function ACS_Bruxa_Camo_Sonar_Timer_Actual()
	{
		if (ACS_Bruxa_Camo_Sonar_2())
		{
			ACS_Bruxa_Camo_Sonar_2().DestroyEffect('fx_sonar');

			ACS_Bruxa_Camo_Sonar_2().PlayEffectSingle('fx_sonar');

			ACS_Bruxa_Camo_Sonar_2().StopEffect('fx_sonar');
		}
		
		if (ACS_Bruxa_Camo_Sonar())
		{
			ACS_Bruxa_Camo_Sonar().DestroyEffect('sonar_mesh');

			ACS_Bruxa_Camo_Sonar().PlayEffectSingle('sonar_mesh');

			ACS_Bruxa_Camo_Sonar().StopEffect('sonar_mesh');

			ACS_Bruxa_Camo_Sonar().DestroyEffect('sonar');

			ACS_Bruxa_Camo_Sonar().PlayEffectSingle('sonar');

			ACS_Bruxa_Camo_Sonar().StopEffect('sonar');
		}

		ACS_Bruxa_Camo_Sonar_NPC_Play_Effect();
	}

	function NPC_Fear_Reaction()
	{
		actors.Clear();

		actors = thePlayer.GetNPCsAndPlayersInRange( 20, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				npc = (CNewNPC)actors[i];

				actor = actors[i];
				
				curTargetVitality = npc.GetStat( BCS_Vitality );

				maxTargetVitality = npc.GetStatMax( BCS_Vitality );

				curTargetEssence = npc.GetStat( BCS_Essence );

				maxTargetEssence = npc.GetStatMax( BCS_Essence );

				animatedComponentA = (CAnimatedComponent)npc.GetComponentByClassName( 'CAnimatedComponent' );	
				
				if ( npc == thePlayer  )
					continue;
				
				if(!theGame.IsDialogOrCutscenePlaying()
				&& !thePlayer.IsUsingHorse() 
				&& !thePlayer.IsUsingVehicle()
				&& !npc.IsUsingHorse()
				&& !npc.IsUsingVehicle()
				&& npc.IsHuman()
				&& !npc.HasTag('ACS_Final_Fear_Stack')
				)
				{				
					actor.RemoveBuffImmunity_AllNegative();

					actor.RemoveBuffImmunity_AllCritical();

					npc.RemoveBuffImmunity_AllNegative();

					npc.RemoveBuffImmunity_AllCritical();

					targetDistance = VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) ;

					if( targetDistance <= 4 * 4 ) 
					{
						if (!npc.HasTag('fear_end'))
						{
							animatedComponentA.PlaySlotAnimationAsync ( '', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0) );

							npc.AddTag('fear_end');
						}	
					}
					else if( targetDistance > 4 * 4 && targetDistance <= 100 * 100 ) 
					{
						npc.RemoveTag('fear_end');
						
						if (curTargetVitality <= maxTargetVitality * 0.25)
						{
							animatedComponentA.PlaySlotAnimationAsync ( 'reaction_surrender_escape', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 0.9f));
						}
						else if (curTargetVitality > maxTargetVitality * 0.25 && curTargetVitality <= maxTargetVitality * 0.5)
						{
							fear_index_1 = RandDifferent(this.previous_fear_index_1 , 8);

							switch (fear_index_1) 
							{	
								case 7:
								animatedComponentA.PlaySlotAnimationAsync ( 'man_ex_scared_loop_turn_right_180_rp', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 0.9f));
								break;

								case 6:
								animatedComponentA.PlaySlotAnimationAsync ( 'man_ex_scared_loop_turn_right_180_lp', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 0.9f));
								break;

								case 5:
								animatedComponentA.PlaySlotAnimationAsync ( 'man_ex_scared_loop_turn_left_90_rp', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 0.9f));
								break;

								case 4:
								animatedComponentA.PlaySlotAnimationAsync ( 'man_ex_scared_loop_turn_left_90_lp', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 0.9f));
								break;

								case 3:
								animatedComponentA.PlaySlotAnimationAsync ( 'man_ex_scared_loop_turn_left_45_rp', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 0.9f));
								break;

								case 2:
								animatedComponentA.PlaySlotAnimationAsync ( 'man_ex_scared_loop_turn_left_45_lp', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 0.9f));
								break;

								case 1:
								animatedComponentA.PlaySlotAnimationAsync ( 'man_ex_scared_loop_2', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 0.9f));
								break;

								default:
								animatedComponentA.PlaySlotAnimationAsync ( 'man_ex_scared_loop_1', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 0.9f));
								break;		
							}
							
							this.previous_fear_index_1 = fear_index_1;
						}
						else
						{
							fear_index_1 = RandDifferent(this.previous_fear_index_1 , 5);

							switch (fear_index_1) 
							{	
								case 4:
								animatedComponentA.PlaySlotAnimationAsync ( 'man_work_standing_nervous_scarred_stop', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 0.9f));
								break;

								case 3:
								animatedComponentA.PlaySlotAnimationAsync ( 'man_work_standing_nervous_scarred_start', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 0.9f));
								break;

								case 2:
								animatedComponentA.PlaySlotAnimationAsync ( 'man_work_standing_nervous_scarred_loop_03', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 0.9f));
								break;

								case 1:
								animatedComponentA.PlaySlotAnimationAsync ( 'man_work_standing_nervous_scarred_loop_02', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 0.9f));
								break;

								default:
								animatedComponentA.PlaySlotAnimationAsync ( 'man_work_standing_nervous_scarred_loop_01', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 0.9f));
								break;		
							}
							
							this.previous_fear_index_1 = fear_index_1;
						}
					}
				}	
			}
		}
	}

	function NPC_Death_Fear_Reaction()
	{
		var movementAdjustorNPC											: CMovementAdjustor;
		var ticketNPC													: SMovementAdjustmentRequestTicket;

		actors.Clear();

		//actors = thePlayer.GetNPCsAndPlayersInRange( 100, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

		//actors = thePlayer.GetNPCsAndPlayersInRange( 100, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

		theGame.GetActorsByTag( 'ACS_Final_Fear_Stack', actors );	

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				npc = (CNewNPC)actors[i];

				actor = actors[i];
				
				curTargetVitality = npc.GetStat( BCS_Vitality );

				maxTargetVitality = npc.GetStatMax( BCS_Vitality );

				curTargetEssence = npc.GetStat( BCS_Essence );

				maxTargetEssence = npc.GetStatMax( BCS_Essence );

				animatedComponentA = (CAnimatedComponent)npc.GetComponentByClassName( 'CAnimatedComponent' );

				movementAdjustorNPC = npc.GetMovingAgentComponent().GetMovementAdjustor();

				targetDistance = VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) ;
				
				if(!theGame.IsDialogOrCutscenePlaying()
				&& !thePlayer.IsUsingHorse() 
				&& !thePlayer.IsUsingVehicle()
				&& !npc.IsUsingHorse()
				&& !npc.IsUsingVehicle()
				&& npc.IsHuman()
				&& npc.IsMan()
				&& !npc.HasTag('ACS_Swapped_To_Shield')
				&& !thePlayer.IsInNonGameplayCutscene() 
				&& !thePlayer.IsInGameplayScene() 
				&& !theGame.IsCurrentlyPlayingNonGameplayScene()
				&& !theGame.IsFading()
				&& !theGame.IsBlackscreen()
				&& !theGame.IsPaused() 
				&& npc.IsAlive()
				)								
				{
					ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Fear_Rotate');
					movementAdjustorNPC.CancelByName( 'ACS_NPC_Fear_Rotate' );
					movementAdjustorNPC.CancelAll();

					ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Fear_Rotate' );
					movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.25 );
					movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 500000 );

					npc.SetGuarded(false);

					npc.DrainStamina( ESAT_FixedValue, npc.GetStatMax( BCS_Stamina ), 60 );

					npc.AddEffectDefault( EET_Blindness, npc, 'console' );

					npc.AddEffectDefault( EET_BleedingTracking, npc, 'console' );

					(npc.GetInventory().GetItemEntityUnsafe( npc.GetInventory().GetItemFromSlot( 'r_weapon' ) )).SetHideInGame(true);

					if (npc.HasTag('ACS_Scared_On_Ground'))
					{
						if( targetDistance <= 4 * 4 ) 
						{
							if( RandF() < 0.125 ) 
							{
								fear_anim_names.Clear();

								fear_anim_names.PushBack('man_ex_scared_ground_loop_1');
								fear_anim_names.PushBack('man_ex_scared_ground_loop_2');

								animatedComponentA.PlaySlotAnimationAsync ( fear_anim_names[RandRange(fear_anim_names.Size())], 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(1.f, 1.f));
							}
							else
							{
								fear_anim_names.Clear();

								fear_anim_names.PushBack('man_ex_scared_ground_start_1');
								fear_anim_names.PushBack('man_ex_scared_ground_start_2');

								movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );

								animatedComponentA.PlaySlotAnimationAsync ( fear_anim_names[RandRange(fear_anim_names.Size())], 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 0.5f));
							}	
						}
						else if( targetDistance > 4 * 4 && targetDistance <= 100 * 100 ) 
						{
							if( RandF() < 0.875 ) 
							{
								fear_anim_names.Clear();

								fear_anim_names.PushBack('man_ex_scared_ground_loop_1');
								fear_anim_names.PushBack('man_ex_scared_ground_loop_2');

								animatedComponentA.PlaySlotAnimationAsync ( fear_anim_names[RandRange(fear_anim_names.Size())], 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(1.f, 1.f));
							}
							else
							{
								fear_anim_names.Clear();

								fear_anim_names.PushBack('man_ex_scared_ground_start_1');
								fear_anim_names.PushBack('man_ex_scared_ground_start_2');

								movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );

								animatedComponentA.PlaySlotAnimationAsync ( fear_anim_names[RandRange(fear_anim_names.Size())], 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 0.5f));
							}
						}
					}
					else if (npc.HasTag('ACS_Scared_Standing'))
					{
						if( targetDistance <= 4 * 4 ) 
						{
							if( RandF() < 0.125 ) 
							{
								fear_anim_names.Clear();

								fear_anim_names.PushBack('scared_loop');
								fear_anim_names.PushBack('scared_loop_1');
								fear_anim_names.PushBack('scared_loop_2');
								fear_anim_names.PushBack('scared_loop_3');
								fear_anim_names.PushBack('man_ex_scared_loop_1');
								fear_anim_names.PushBack('man_ex_scared_loop_2');

								movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );

								animatedComponentA.PlaySlotAnimationAsync ( fear_anim_names[RandRange(fear_anim_names.Size())], 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(1.f, 1.f));
							}
							else
							{
								fear_anim_names.Clear();

								fear_anim_names.PushBack('dialogue_man_ex_scared_run_loop');

								movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer, RandRangeF(225,135) );

								animatedComponentA.PlaySlotAnimationAsync ( fear_anim_names[RandRange(fear_anim_names.Size())], 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
							}
						}
						else if( targetDistance > 4 * 4 && targetDistance <= 100 * 100 ) 
						{
							if( RandF() < 0.875 ) 
							{
								fear_anim_names.Clear();

								fear_anim_names.PushBack('scared_loop');
								fear_anim_names.PushBack('scared_loop_1');
								fear_anim_names.PushBack('scared_loop_2');
								fear_anim_names.PushBack('scared_loop_3');
								fear_anim_names.PushBack('man_ex_scared_loop_1');
								fear_anim_names.PushBack('man_ex_scared_loop_2');

								movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );

								animatedComponentA.PlaySlotAnimationAsync ( fear_anim_names[RandRange(fear_anim_names.Size())], 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(1.f, 1.f));
							}
							else
							{
								fear_anim_names.Clear();

								fear_anim_names.PushBack('dialogue_man_ex_scared_run_loop');

								movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer, RandRangeF(225,135) );

								animatedComponentA.PlaySlotAnimationAsync ( fear_anim_names[RandRange(fear_anim_names.Size())], 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
							}
						}
					}
				}	
			}
		}
		else
		{
			return;
		}
	}

	function ACS_Shout_Actual()
	{
		thePlayer.PlayEffectSingle('shout'); 
		thePlayer.StopEffect('shout');
	}

	function ACS_Stop_Shout_Actual()
	{
		thePlayer.StopEffect('shout');
	}

	function ACS_Blood_Spray_Actual()
	{
		thePlayer.PlayEffectSingle('shout'); 
		thePlayer.StopEffect('shout');
	}

	function ACS_Stop_Blood_Spray_Actual()
	{
		thePlayer.StopEffect('shout');
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function ACS_StaminaDrain( i : int )
	{
		if (ACS_StaminaCostAction_Enabled())
		{
			if (i == 1)
			{
				thePlayer.DrainStamina( ESAT_FixedValue,  thePlayer.GetStatMax( BCS_Stamina ) * ACS_LightAttackStaminaCost(), ACS_LightAttackStaminaRegenDelay() );
			}
			else if (i == 2)
			{
				thePlayer.DrainStamina( ESAT_FixedValue,  thePlayer.GetStatMax( BCS_Stamina ) * ACS_HeavyAttackStaminaCost(), ACS_HeavyAttackStaminaRegenDelay() );
			}
			else if (i == 3)
			{
				thePlayer.DrainStamina( ESAT_FixedValue,  thePlayer.GetStatMax( BCS_Stamina ) * ACS_SpecialAttackStaminaCost(), ACS_SpecialAttackStaminaRegenDelay() );
			}
			else if (i == 4)
			{
				thePlayer.DrainStamina( ESAT_FixedValue,  thePlayer.GetStatMax( BCS_Stamina ) * ACS_DodgeStaminaCost(), ACS_DodgeStaminaRegenDelay() );
			}
			else if (i == 5)
			{
				thePlayer.DrainStamina( ESAT_FixedValue,  thePlayer.GetStatMax( BCS_Stamina ) * ACS_TransformationActionStaminaCost(), ACS_TransformationActionStaminaRegenDelay() );
			}
		}
	}

	function ACS_StaminaDrainForced( i : int )
	{
		if (i == 1)
		{
			thePlayer.DrainStamina( ESAT_FixedValue,  thePlayer.GetStatMax( BCS_Stamina ) * ACS_LightAttackStaminaCost(), ACS_LightAttackStaminaRegenDelay() );
		}
		else if (i == 2)
		{
			thePlayer.DrainStamina( ESAT_FixedValue,  thePlayer.GetStatMax( BCS_Stamina ) * ACS_HeavyAttackStaminaCost(), ACS_HeavyAttackStaminaRegenDelay() );
		}
		else if (i == 3)
		{
			thePlayer.DrainStamina( ESAT_FixedValue,  thePlayer.GetStatMax( BCS_Stamina ) * ACS_SpecialAttackStaminaCost(), ACS_SpecialAttackStaminaRegenDelay() );
		}
		else if (i == 4)
		{
			thePlayer.DrainStamina( ESAT_FixedValue,  thePlayer.GetStatMax( BCS_Stamina ) * ACS_DodgeStaminaCost(), ACS_DodgeStaminaRegenDelay() );
		}
		else if (i == 5)
		{
			thePlayer.DrainStamina( ESAT_FixedValue,  thePlayer.GetStatMax( BCS_Stamina ) * ACS_TransformationActionStaminaCost(), ACS_TransformationActionStaminaRegenDelay() );
		}
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function go_plough_yourself()
	{
		MovementAdjust();
		
		if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}    
		
		//PlayerPlayAnimation( 'high_standing_sad_gesture_go_plough_yourself');

		if ( !thePlayer.IsAnyWeaponHeld() )
		{
			if( RandF() < 0.5 ) 
			{
				if( RandF() < 0.5 ) 
				{
					PlayerPlayAnimation('high_standing_sad_gesture_go_plough_yourself');
				}
				else
				{
					PlayerPlayAnimation('locomotion_idle_proud_gesture_bend_forward');
				}
			}
			else
			{
				if( RandF() < 0.5 ) 
				{
					PlayerPlayAnimation('locomotion_idle_proud_gesture_annouce');
				}
				else
				{
					PlayerPlayAnimation('locomotion_idle_proud_gesture_pound_chest');
				}
			}
		}
		else
		{
			PlayerPlayAnimation('locomotion_idle_proud_gesture_annouce');
		}
	}

	function taunted_npc_destroy()
	{
		//actors = GetActorsInRange(thePlayer, 10, 10 );

		//actors = GetActorsInRange(thePlayer, 100, 100, 'ACS_taunted' );

		actors.Clear();

		theGame.GetActorsByTag( 'ACS_taunted', actors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				npc_ANIMATION_CANCEL = (CNewNPC)actors[i];

				npcactor_ANIMATION_CANCEL = (CActor)actors[i];

				if ( npc_ANIMATION_CANCEL == thePlayer || npc_ANIMATION_CANCEL.HasTag('smokeman') )
					continue;
				
				if(
				//npc_ANIMATION_CANCEL.IsHuman()
				//&& ACS_AttitudeCheck( npcactor_ANIMATION_CANCEL )
				//&& thePlayer.IsInCombat()
				ACS_CombatTaunt_Enabled()
				//&& npc_ANIMATION_CANCEL.HasTag('ACS_taunted')
				)
				{	
					npc_ANIMATION_CANCEL.Destroy();
				}
			}
		}
	}

	/*
	function ACS_Hit_Reaction()
	{
		if ( CiriCheck()
		&& FinisherCheck() 
		&& CrossbowCheck()
		&& ACS_BuffCheck()
		&& HitAnimCheck()
		&& WraithModeCheck()
		&& BruxaBiteCheck()
		)
		{
			//thePlayer.StopAllEffects();

			if (
			thePlayer.HasTag('quen_sword_equipped')
			)
			{
				Olgierd_Hit_Reaction();
			}
			else if (
			(thePlayer.HasTag('aard_secondary_sword_equipped'))
			)
			{
				Axe_Hit_Reaction();
			}
			else if (
			(thePlayer.HasTag('quen_secondary_sword_equipped'))
			)
			{
				Spear_Hit_Reaction();
			}
			else if (
			(thePlayer.HasTag('axii_sword_equipped'))
			)
			{
				//ACS_Blink_Hit_Reaction();

				Gregoire_Hit_Reaction();
			}
			else if (
			(thePlayer.HasTag('axii_secondary_sword_equipped'))
			)
			{
				if (ACS_GetItem_Katana_Steel() || ACS_GetItem_Katana_Silver())
				{
					Axe_Hit_Reaction();
				}
				else
				{
					Gregoire_Hit_Reaction();
				}
			}
			else if (
			(thePlayer.HasTag('yrden_sword_equipped')
			|| thePlayer.HasTag('yrden_secondary_sword_equipped'))
			)
			{
				Imlerith_Hit_Reaction();
			}
			else if (
			(thePlayer.HasTag('vampire_claws_equipped')
			|| thePlayer.HasTag('aard_sword_equipped'))
			)
			{
				Dettlaff_Hit_Reaction();
			}
		}
	}

	function Olgierd_Hit_Reaction()
	{
		if (!thePlayer.IsActionAllowed(EIAB_Signs))
		{
			return;
		}

		MovementAdjust();

		if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

		if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2  ); }
															
		RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (RandF() < 0.5)
			{
				PlayerPlayAnimation('full_hit_reaction_with_fast_shadow_attack_001_ACS');
			}
			else
			{
				PlayerPlayAnimation('full_hit_pirouette_reaction_with_fast_shadow_attack_001_ACS');
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			if (RandF() < 0.5)
			{
				PlayerPlayAnimation('full_hit_reaction_with_fast_shadow_attack_001_ACS');
			}
			else
			{
				PlayerPlayAnimation('full_hit_pirouette_reaction_with_fast_shadow_attack_001_ACS');
			}
		}
	}

	function Gregoire_Hit_Reaction()
	{
		MovementAdjust();

		if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

		if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2  ); }
															
		RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (RandF() < 0.5)
			{
				PlayerPlayAnimation('man_npc_longsword_kick_rp_ACS');
			}
			else
			{
				PlayerPlayAnimation( 'man_npc_longsword_attack_special_01_rp_ACS');
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			if (RandF() < 0.5)
			{
				PlayerPlayAnimation( 'man_npc_longsword_kick_rp_ACS');
			}
			else
			{
				PlayerPlayAnimation( 'man_npc_longsword_attack_special_01_rp_ACS');
			}
		}
	}

	function Spear_Hit_Reaction()
	{
		geraltRandomGiantAttackAlt();

		if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

		if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 3  ); }
																
		RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
	}

	function Dettlaff_Hit_Reaction()
	{
		geraltClawWhirlReactionAttack();

		if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

		if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2  ); }
																
		RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
	}

	function Imlerith_Hit_Reaction()
	{
		geraltRandomGiantAttack();

		if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

		if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 3  ); }
																
		RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
	}

	function Axe_Hit_Reaction()
	{
		geraltRandomAxeSpecialAttackAlt();

		if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

		if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 3  ); }
															
		RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
	}
	*/
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function GetCurrentMeleeWeapon() : EPlayerWeapon
	{
		if (thePlayer.IsWeaponHeld('silversword'))
		{
			return PW_Silver;
		}
		else if (thePlayer.IsWeaponHeld('steelsword'))
		{
			return PW_Steel;
		}
		else if (thePlayer.IsWeaponHeld('fist'))
		{
			return PW_Fists;
		}
		else
		{
			return PW_None;
		}
	}

	function UpdateBehGraph( optional init : bool )
	{	
		weapontype = GetCurrentMeleeWeapon();
		
		if ( weapontype == PW_None )
		{
			weapontype = PW_Fists;
		}
		
		thePlayer.SetBehaviorVariable( 'WeaponType', 0);
		
		if ( thePlayer.HasTag('vampire_claws_equipped') && thePlayer.IsInCombat() )
		{
			thePlayer.SetBehaviorVariable( 'playerWeapon', (int) PW_Steel );
			thePlayer.SetBehaviorVariable( 'playerWeaponForOverlay', (int) PW_Steel );
		}
		else
		{
			thePlayer.SetBehaviorVariable( 'playerWeapon', (int) weapontype ); 
			thePlayer.SetBehaviorVariable( 'playerWeaponForOverlay', (int) weapontype );
		}
		
		if ( thePlayer.IsUsingHorse() )
		{
			thePlayer.SetBehaviorVariable( 'isOnHorse', 1.0 );
		}
		else
		{
			thePlayer.SetBehaviorVariable( 'isOnHorse', 0.0 );
		}
		
		switch ( weapontype )
		{
			case PW_Steel:
				thePlayer.SetBehaviorVariable( 'SelectedWeapon', 0, true);
				thePlayer.SetBehaviorVariable( 'isHoldingWeaponR', 1.0, true );
				if ( init )
					res = thePlayer.RaiseEvent('DrawWeaponInstant');
				break;
			case PW_Silver:
				thePlayer.SetBehaviorVariable( 'SelectedWeapon', 1, true);
				thePlayer.SetBehaviorVariable( 'isHoldingWeaponR', 1.0, true );
				if ( init )
					res = thePlayer.RaiseEvent('DrawWeaponInstant');
				break;
			default:
				thePlayer.SetBehaviorVariable( 'isHoldingWeaponR', 0.0, true );
				break;
		}
	}

	function forest_god_effects()
	{
		forest_god_fx.Clear();
		forest_god_fx.PushBack('hand_fx4');
		forest_god_fx.PushBack('hand_fx3');
		forest_god_fx.PushBack('torso_fx1');
		forest_god_fx.PushBack('pelvis_fx1');
		forest_god_fx.PushBack('r_bicep_fx1');
		forest_god_fx.PushBack('l_bicep_fx1');
		forest_god_fx.PushBack('l_forearmRoll_fx1');
		forest_god_fx.PushBack('r_forearmRoll_fx1');
		forest_god_fx.PushBack('l_foot_fx1'); 
		forest_god_fx.PushBack('r_foot_fx1'); 
		forest_god_fx.PushBack('r_shin_fx1'); 
		forest_god_fx.PushBack('l_shin_fx1'); 
		forest_god_fx.PushBack('torso2_fx1'); 
		forest_god_fx.PushBack('l_kneeRoll_fx1'); 
		forest_god_fx.PushBack('r_kneeRoll_fx1'); 
		forest_god_fx.PushBack('r_bicep2_fx1'); 
		forest_god_fx.PushBack('l_bicep2_fx1'); 
		forest_god_fx.PushBack('l_forearmRoll1_fx1'); 
		forest_god_fx.PushBack('r_forearmRoll1_fx1'); 
		forest_god_fx.PushBack('torso3_fx1'); 
	}

	function forest_god_demonic_effects()
	{
		forest_god_demonic_fx.Clear();

		forest_god_demonic_fx.PushBack('demonic_possession');
		forest_god_demonic_fx.PushBack('demonic_possession_r_hand');
		forest_god_demonic_fx.PushBack('demonic_possession_l_hand');
		forest_god_demonic_fx.PushBack('demonic_possession_torso');
		forest_god_demonic_fx.PushBack('demonic_possession_pelvis');
		forest_god_demonic_fx.PushBack('demonic_possession_r_bicep');
		forest_god_demonic_fx.PushBack('demonic_possession_l_bicep');
		forest_god_demonic_fx.PushBack('demonic_possession_l_forearmRoll');
		forest_god_demonic_fx.PushBack('demonic_possession_r_forearmRoll'); 
		forest_god_demonic_fx.PushBack('demonic_possession_l_foot'); 
		forest_god_demonic_fx.PushBack('demonic_possession_r_foot'); 
		forest_god_demonic_fx.PushBack('demonic_possession_r_shin'); 
		forest_god_demonic_fx.PushBack('demonic_possession_l_shin'); 
		forest_god_demonic_fx.PushBack('demonic_possession_torso2'); 
		forest_god_demonic_fx.PushBack('demonic_possession_l_kneeRoll'); 
		forest_god_demonic_fx.PushBack('demonic_possession_r_kneeRoll'); 
		forest_god_demonic_fx.PushBack('demonic_possession_r_bicep2'); 
		forest_god_demonic_fx.PushBack('demonic_possession_l_bicep2'); 
		forest_god_demonic_fx.PushBack('demonic_possession_l_forearmRoll1'); 
		forest_god_demonic_fx.PushBack('demonic_possession_r_forearmRoll1'); 
		forest_god_demonic_fx.PushBack('demonic_possession_torso3'); 
	}

	function forest_god_demonic_effect_actual()
	{
		forest_god_demonic_effects();

		ACS_Forest_God().StopEffect(forest_god_demonic_fx[forest_god_demonic_fx.Size()]);

		ACS_Forest_God().PlayEffectSingle(forest_god_demonic_fx[forest_god_demonic_fx.Size()]);
	}

	function ACS_Forest_God_Spikes_Actual()
	{
		if (ACS_Forest_God().IsInCombat())
		{
			forest_god_effects();

			ACS_Forest_God().StopEffect(forest_god_fx[forest_god_fx.Size()]);

			ACS_Forest_God().PlayEffectSingle(forest_god_fx[RandRange(forest_god_fx.Size())]);

			ACS_Forest_God().PlayEffectSingle(forest_god_fx[RandRange(forest_god_fx.Size())]);

			ACS_Forest_God().PlayEffectSingle(forest_god_fx[RandRange(forest_god_fx.Size())]);

			ACS_Forest_God().PlayEffectSingle(forest_god_fx[RandRange(forest_god_fx.Size())]);

			ACS_Forest_God().PlayEffectSingle(forest_god_fx[RandRange(forest_god_fx.Size())]);

			ACS_Forest_God().PlayEffectSingle(forest_god_fx[RandRange(forest_god_fx.Size())]);

			ACS_Forest_God().PlayEffectSingle(forest_god_fx[RandRange(forest_god_fx.Size())]);

			ACS_Forest_God().PlayEffectSingle(forest_god_fx[RandRange(forest_god_fx.Size())]);

			ACS_Forest_God().PlayEffectSingle(forest_god_fx[RandRange(forest_god_fx.Size())]);

			ACS_Forest_God().PlayEffectSingle(forest_god_fx[RandRange(forest_god_fx.Size())]);

			ACS_Forest_God().PlayEffectSingle(forest_god_fx[RandRange(forest_god_fx.Size())]);

			ACS_Forest_God().PlayEffectSingle(forest_god_fx[RandRange(forest_god_fx.Size())]);

			ACS_Forest_God().PlayEffectSingle(forest_god_fx[RandRange(forest_god_fx.Size())]);

			ACS_Forest_God().StopEffect(forest_god_fx[forest_god_fx.Size()]);
		}
		
		if (!ACS_Forest_God().IsAlive())
		{
			//thePlayer.inv.AddAnItem( 'Emerald flawless', 50 );

			//thePlayer.inv.AddAnItem( 'Diamond flawless', 50 );

			//thePlayer.inv.AddAnItem( 'Ruby flawless', 50 );

			RemoveTimer('ACS_Forest_God_Spikes');
		}
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function sword_destroy()
	{
		if ( !theGame.IsDialogOrCutscenePlaying() )
		{
			if ( !thePlayer.IsAnyWeaponHeld() || thePlayer.IsWeaponHeld('fist') )
			{
				//if (thePlayer.HasTag('quen_sword_equipped'))
				//{
					QuenSwordDestroyIMMEDIATE();
				//}
				//else if (thePlayer.HasTag('axii_sword_equipped'))
				//{
					AxiiSwordDestroyIMMEDIATE();
				//}
				//else if (thePlayer.HasTag('aard_sword_equipped'))
				//{
					AardSwordDestroyIMMEDIATE();
				//}
				//else if (thePlayer.HasTag('yrden_sword_equipped'))
				//{
					YrdenSwordDestroyIMMEDIATE();
				//}
				//else if (thePlayer.HasTag('quen_secondary_sword_equipped'))
				//{
					QuenSecondarySwordDestroyIMMEDIATE();
				//}
				//else if (thePlayer.HasTag('axii_secondary_sword_equipped'))
				//{
					AxiiSecondarySwordDestroyIMMEDIATE();
				//}
				//else if (thePlayer.HasTag('aard_secondary_sword_equipped'))
				//{
					AardSecondarySwordDestroyIMMEDIATE();
				//}
				//else if (thePlayer.HasTag('yrden_secondary_sword_equipped'))
				//{
					YrdenSecondarySwordDestroyIMMEDIATE();
				//}

				IgniBowDestroyIMMEDIATE();

				AxiiBowDestroyIMMEDIATE();

				AardBowDestroyIMMEDIATE();

				YrdenBowDestroyIMMEDIATE();

				QuenBowDestroyIMMEDIATE();

				IgniCrossbowDestroyIMMEDIATE();

				AxiiCrossbowDestroyIMMEDIATE();

				AardCrossbowDestroyIMMEDIATE();

				YrdenCrossbowDestroyIMMEDIATE();

				QuenCrossbowDestroyIMMEDIATE();

				if (thePlayer.HasTag('ACS_Holster_Sword_Effect'))
				{
					thePlayer.RemoveTag('ACS_Holster_Sword_Effect');
				}
			}
		}
	}

	function sword_summon_effect()
	{
		if ( ACS_GetWeaponMode() == 0 
		|| ACS_GetWeaponMode() == 1
		|| ACS_GetWeaponMode() == 2 )
		{
			if (thePlayer.HasTag('quen_sword_equipped'))
			{
				thePlayer.PlayEffectSingle('embers_particles_test');
				thePlayer.StopEffect('embers_particles_test');
				quen_sword_summon();
			}
			else if (thePlayer.HasTag('axii_sword_equipped'))
			{
				thePlayer.PlayEffectSingle('embers_particles_test');
				thePlayer.StopEffect('embers_particles_test');
				axii_sword_summon();
			}
			else if (thePlayer.HasTag('aard_sword_equipped'))
			{
				thePlayer.PlayEffectSingle('embers_particles_test');
				thePlayer.StopEffect('embers_particles_test');
				aard_sword_summon();
			}
			else if (thePlayer.HasTag('yrden_sword_equipped'))
			{
				thePlayer.PlayEffectSingle('embers_particles_test');
				thePlayer.StopEffect('embers_particles_test');
				yrden_sword_summon();
			}
			else if (thePlayer.HasTag('quen_secondary_sword_equipped'))
			{
				thePlayer.PlayEffectSingle('embers_particles_test');
				thePlayer.StopEffect('embers_particles_test');
				quen_secondary_sword_summon();
			}
			else if (thePlayer.HasTag('axii_secondary_sword_equipped'))
			{
				thePlayer.PlayEffectSingle('embers_particles_test');
				thePlayer.StopEffect('embers_particles_test');
				axii_secondary_sword_summon();
			}
			else if (thePlayer.HasTag('aard_secondary_sword_equipped'))
			{
				thePlayer.PlayEffectSingle('embers_particles_test');
				thePlayer.StopEffect('embers_particles_test');
				aard_secondary_sword_summon();
			}
			else if (thePlayer.HasTag('yrden_secondary_sword_equipped'))
			{
				thePlayer.PlayEffectSingle('embers_particles_test');
				thePlayer.StopEffect('embers_particles_test');
				yrden_secondary_sword_summon();
			}
			else if (
			thePlayer.HasTag('igni_secondary_sword_equipped')
			|| thePlayer.HasTag('igni_sword_equipped'))
			{
				if (!thePlayer.HasTag('igni_sword_effect_played'))
				{
					thePlayer.PlayEffectSingle('embers_particles_test');
					thePlayer.StopEffect('embers_particles_test');
					igni_sword_summon();
				}

				if (!thePlayer.HasTag('ACS_HideWeaponOnDodge')
				&& !thePlayer.HasTag('in_wraith')
				&& !thePlayer.HasTag('blood_sucking')
				&& !GetACSArmorEtherSword()
				)
				{
					ACSGetEquippedSwordUpdateEnhancements_Permaglow();
				}
			}
		}
		else if (ACS_GetWeaponMode() == 3)
		{
			if (thePlayer.HasTag('aard_sword_equipped'))
			{
				thePlayer.PlayEffectSingle('embers_particles_test');
				thePlayer.StopEffect('embers_particles_test');
				aard_sword_summon();
			}
			else if (
			thePlayer.HasTag('igni_secondary_sword_equipped')
			|| thePlayer.HasTag('igni_sword_equipped'))
			{
				if (!thePlayer.HasTag('ACS_HideWeaponOnDodge')
				&& !thePlayer.HasTag('in_wraith')
				&& !thePlayer.HasTag('blood_sucking')
				&& !GetACSArmorEtherSword()
				)
				{
					ACSGetEquippedSwordUpdateEnhancements_Permaglow();
				}
			}
		}
	}

	function dagger_summon_effect()
	{
		//ACS_Dagger().PlayEffectSingle('fire_sparks_trail');

		//ACS_Dagger().PlayEffectSingle('runeword1_fire_trail');

		ACS_Dagger().PlayEffectSingle('fast_attack_buff_hit');
	}

	function yrden_sidearm_summon_effect()
	{
		ACS_Yrden_Sidearm_1().PlayEffectSingle('fire_sparks_trail');
		ACS_Yrden_Sidearm_1().PlayEffectSingle('runeword1_fire_trail');
		ACS_Yrden_Sidearm_1().PlayEffectSingle('fast_attack_buff_hit');

		ACS_Yrden_Sidearm_2().PlayEffectSingle('fire_sparks_trail');
		ACS_Yrden_Sidearm_2().PlayEffectSingle('runeword1_fire_trail');
		ACS_Yrden_Sidearm_2().PlayEffectSingle('fast_attack_buff_hit');

		ACS_Yrden_Sidearm_3().PlayEffectSingle('fire_sparks_trail');
		ACS_Yrden_Sidearm_3().PlayEffectSingle('runeword1_fire_trail');
		ACS_Yrden_Sidearm_3().PlayEffectSingle('fast_attack_buff_hit');

		ACS_Yrden_Sidearm_1().StopEffect('fire_sparks_trail');
		ACS_Yrden_Sidearm_1().StopEffect('runeword1_fire_trail');
		ACS_Yrden_Sidearm_1().StopEffect('fast_attack_buff_hit');

		ACS_Yrden_Sidearm_2().StopEffect('fire_sparks_trail');
		ACS_Yrden_Sidearm_2().StopEffect('runeword1_fire_trail');
		ACS_Yrden_Sidearm_2().StopEffect('fast_attack_buff_hit');

		ACS_Yrden_Sidearm_3().StopEffect('fire_sparks_trail');
		ACS_Yrden_Sidearm_3().StopEffect('runeword1_fire_trail');
		ACS_Yrden_Sidearm_3().StopEffect('fast_attack_buff_hit');

		ACS_Yrden_Sidearm_UpdateEnhancements();
	}

	function Weapon_Summon_Effect_Delay()
	{
		if (!thePlayer.HasTag('blood_sucking') )
		{
			PlayerPlayAnimationInterrupt( '' );
		}

		if(thePlayer.IsInCombat())
		{
			RemoveTimer('ACS_Weapon_Summon_Delay');
			AddTimer('ACS_Weapon_Summon_Delay', 0.25, false);
		}
		else
		{
			RemoveTimer('ACS_Weapon_Summon_Delay');
			AddTimer('ACS_Weapon_Summon_Delay', 0.75, false);
		}
	}

	function ACS_Set_Player_Scale_Actual()
	{
		if (!thePlayer.IsCiri())
		{
			RemoveTimer('Grow_Geralt_Immediate_Repeat');
			RemoveTimer('Grow_Geralt_Repeat');
			
			playerAnimcomp = thePlayer.GetComponentByClassName('CAnimatedComponent');
			playerMeshcomp = thePlayer.GetComponentByClassName('CMeshComponent');

			if ( theGame.IsDialogOrCutscenePlaying() 
			|| thePlayer.IsInNonGameplayCutscene() 
			|| thePlayer.IsInGameplayScene()
			|| thePlayer.IsUsingHorse() 
			|| thePlayer.IsUsingVehicle()
			|| thePlayer.IsPerformingFinisher()
			|| thePlayer.HasTag('ACS_IsPerformingFinisher')
			|| theGame.IsCurrentlyPlayingNonGameplayScene()
			|| theGame.IsFading()
			|| theGame.IsBlackscreen()
			|| theGame.IsPaused() 
			//|| thePlayer.IsInsideInteraction()
			//|| thePlayer.IsInsideHorseInteraction()
			)
			{
				if (ACS_Player_Scale() != 1)
				{
					if (thePlayer.HasTag('ACS_Player_Scale_Revert'))
					{
						thePlayer.RemoveTag('ACS_Player_Scale_Revert');
					}

					if (!thePlayer.HasTag('ACS_Player_Scale_Force_Changed'))
					{
						//RemoveTimer('ACS_Embers_Timer');

						//thePlayer.StopAllEffects();

						thePlayer.PlayEffectSingle('ethereal_appear');
						thePlayer.StopEffect('ethereal_appear');

						thePlayer.PlayEffectSingle('special_attack_only_black_fx');
						thePlayer.StopEffect('special_attack_only_black_fx');

						thePlayer.AddTag('ACS_Player_Scale_Force_Changed');
					}
				}

				playerAnimcomp.SetScale(Vector(1,1,1,0));
			}
			else
			{
				if (thePlayer.HasTag('in_wraith'))
				{
					playerAnimcomp.SetScale(Vector(1,1,1,0));
				}
				else
				{
					if (ACS_Player_Scale() != 1)
					{
						if (thePlayer.HasTag('ACS_Player_Scale_Force_Changed'))
						{
							thePlayer.RemoveTag('ACS_Player_Scale_Force_Changed');
						}

						if (!thePlayer.HasTag('ACS_Player_Scale_Revert'))
						{
							//thePlayer.StopAllEffects();
							
							thePlayer.PlayEffectSingle('ethereal_appear');
							thePlayer.StopEffect('ethereal_appear');

							thePlayer.PlayEffectSingle('special_attack_only_black_fx');
							thePlayer.StopEffect('special_attack_only_black_fx');

							//AddTimer('ACS_Embers_Timer', 0.01f, true); 

							thePlayer.AddTag('ACS_Player_Scale_Revert');
						}
					}

					playerAnimcomp.SetScale(Vector(ACS_Player_Scale(),ACS_Player_Scale(),ACS_Player_Scale(),ACS_Player_Scale()));
				}
			}
		}
	}

	timer function RemoveSignComboStuff( time : float , id : int )
	{
		var signSkill 				: ESkill;

		signSkill = SignEnumToSkillEnum( thePlayer.GetEquippedSign() );

		if( signSkill != S_SUndefined )
		{
			if( thePlayer.HasStaminaToUseSkill( signSkill, false ) )
			{
				ACSSignComboIconDestroyAll();

				ACSSignComboSystemRemoveTags();

				RemoveTimer('RemoveSignComboStuffRepeating');
			}
			else
			{
				RemoveTimer('RemoveSignComboStuffRepeating');
				AddTimer('RemoveSignComboStuffRepeating', 5, true);
			}
		}
	}

	timer function RemoveSignComboStuffRepeating( time : float , id : int )
	{
		var signSkill 				: ESkill;

		signSkill = SignEnumToSkillEnum( thePlayer.GetEquippedSign() );

		if( signSkill != S_SUndefined )
		{
			if( thePlayer.HasStaminaToUseSkill( signSkill, false ) )
			{
				ACSSignComboIconDestroyAll();

				ACSSignComboSystemRemoveTags();
			}
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function Shrink_Geralt( delay : float )
	{
		/*
		RemoveTimer('Grow_Geralt_Immediate_Fast_Repeat');
		RemoveTimer('ACS_Set_Player_Scale');

		if (!thePlayer.HasTag('ACS_Size_Adjusted'))
		{
			thePlayer.AddTag('ACS_Size_Adjusted');
		}

		RemoveTimer('Grow_Geralt_Delay');
		RemoveTimer('Shrink_Geralt_Repeat');
		RemoveTimer('ACS_Set_Player_Scale');
		RemoveTimer('Remove_Player_Grow_Immediate');
		RemoveTimer('Grow_Geralt_Immediate_Repeat');
		RemoveTimer('Grow_Geralt_Repeat');

		AddTimer('Shrink_Geralt_Repeat', 0.01, true);

		AddTimer('Grow_Geralt_Delay', delay / thePlayer.GetAnimationTimeMultiplier(), false);
		*/
	}

	timer function Shrink_Geralt_Repeat( time : float , id : int )
	{
		Shrink_Geralt_Actual();
	}

	function Shrink_Geralt_Actual()
	{
		playerAnimcomp = thePlayer.GetComponentByClassName('CAnimatedComponent');
		playerMeshcomp = thePlayer.GetComponentByClassName('CMeshComponent');

		if (size > (ACS_Player_Scale() - (ACS_Player_Scale()*0.11)))
		{
			size -= ACS_Player_Scale()*0.01;

			playerAnimcomp.SetScale(Vector(size,size,size,size));
		}
		else if (size == (ACS_Player_Scale() - (ACS_Player_Scale()*0.11)))
		{
			RemoveTimer('Shrink_Geralt_Repeat');
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	timer function Grow_Geralt_Delay( time : float , id : int )
	{
		Grow_Geralt();
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function Grow_Geralt()
	{
		RemoveTimer('Shrink_Geralt_Repeat');
		RemoveTimer('Grow_Geralt_Immediate_Repeat');
		RemoveTimer('Grow_Geralt_Immediate_Fast_Repeat');
		RemoveTimer('Grow_Geralt_Repeat');
		RemoveTimer('Remove_Player_Grow_Immediate');

		AddTimer('Grow_Geralt_Repeat', 0.01, true);
	}

	function Grow_Geralt_Actual()
	{
		playerAnimcomp = thePlayer.GetComponentByClassName('CAnimatedComponent');
		playerMeshcomp = thePlayer.GetComponentByClassName('CMeshComponent');

		if (size < ACS_Player_Scale())
		{
			size += ACS_Player_Scale()*0.0025;

			playerAnimcomp.SetScale(Vector(size,size,size,size));
		}
		else if (size == ACS_Player_Scale())
		{
			AddTimer( 'ACS_Set_Player_Scale', 0.01, true );
			RemoveTimer('Grow_Geralt_Repeat');
		}
	}

	timer function Grow_Geralt_Repeat( time : float , id : int )
	{
		Grow_Geralt_Actual();

		if (size == ACS_Player_Scale())
		{
			AddTimer( 'ACS_Set_Player_Scale', 0.01, true );
			RemoveTimer('Grow_Geralt_Repeat');
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function Grow_Geralt_Immediate()
	{
		RemoveTimer('Grow_Geralt_Delay');
		RemoveTimer('Grow_Geralt_Repeat');
		RemoveTimer('Shrink_Geralt_Repeat');
		RemoveTimer('Grow_Geralt_Immediate_Repeat');
		RemoveTimer('Grow_Geralt_Immediate_Fast_Repeat');
		RemoveTimer('Remove_Player_Grow_Immediate');
		RemoveTimer('ACS_Set_Player_Scale');

		if (size == ACS_Player_Scale())
		{
			AddTimer( 'ACS_Set_Player_Scale', 0.01, true );
			RemoveTimer('Grow_Geralt_Immediate_Repeat');
		}
		else
		{
			AddTimer('Grow_Geralt_Immediate_Repeat', 0.01, true);
			AddTimer('Remove_Player_Grow_Immediate', 0.75, false);
		}
	}

	function Grow_Geralt_Immediate_Actual()
	{
		playerAnimcomp = thePlayer.GetComponentByClassName('CAnimatedComponent');
		playerMeshcomp = thePlayer.GetComponentByClassName('CMeshComponent');

		if (size < ACS_Player_Scale())
		{
			size += ACS_Player_Scale() * 0.01;

			playerAnimcomp.SetScale(Vector(size,size,size,size));
		}
	}

	timer function Grow_Geralt_Immediate_Repeat( time : float , id : int )
	{
		Grow_Geralt_Immediate_Actual();

		if (size == ACS_Player_Scale())
		{
			AddTimer( 'ACS_Set_Player_Scale', 0.01, true );
			RemoveTimer('Grow_Geralt_Immediate_Repeat');
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function Grow_Geralt_Immediate_Fast()
	{
		RemoveTimer('Grow_Geralt_Delay');
		RemoveTimer('Grow_Geralt_Repeat');
		RemoveTimer('Shrink_Geralt_Repeat');
		RemoveTimer('Grow_Geralt_Immediate_Repeat');
		RemoveTimer('Grow_Geralt_Immediate_Fast_Repeat');
		RemoveTimer('Remove_Player_Grow_Immediate');
		RemoveTimer('ACS_Set_Player_Scale');

		if (size == ACS_Player_Scale())
		{
			AddTimer( 'ACS_Set_Player_Scale', 0.01, true );
			RemoveTimer('Grow_Geralt_Immediate_Fast_Repeat');
		}
		else
		{
			AddTimer('Grow_Geralt_Immediate_Fast_Repeat', 0.01, true);
			AddTimer('Remove_Player_Grow_Immediate', 0.75, false);
		}
	}

	function Grow_Geralt_Immediate_Fast_Actual()
	{
		playerAnimcomp = thePlayer.GetComponentByClassName('CAnimatedComponent');
		playerMeshcomp = thePlayer.GetComponentByClassName('CMeshComponent');

		if (size < ACS_Player_Scale())
		{
			size += ACS_Player_Scale() * 0.01;

			playerAnimcomp.SetScale(Vector(size,size,size,size));
		}
	}

	timer function Grow_Geralt_Immediate_Fast_Repeat( time : float , id : int )
	{
		Grow_Geralt_Immediate_Fast_Actual();

		if (size == ACS_Player_Scale())
		{
			AddTimer( 'ACS_Set_Player_Scale', 0.01, true );
			RemoveTimer('Grow_Geralt_Immediate_Fast_Repeat');
		}
	}

	function Death_Delay_Animation_Actual()
	{
		thePlayer.StopAllEffects();
		thePlayer.PlayEffectSingle('ethereal_debuff');
		thePlayer.StopEffect('ethereal_debuff');

		if ( ACS_GetWeaponMode() == 0 
		|| ACS_GetWeaponMode() == 1
		|| ACS_GetWeaponMode() == 2 )
		{
			//PlayerPlayAnimation( 'bruxa_death_burning_ACS', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0) );
		}

		if( RandF() < 0.5 ) 
		{ 
			//PlayerPlayAnimation( 'man_geralt_sword_tornado_right', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0) );
		}
		else
		{
			//PlayerPlayAnimation( 'man_geralt_sword_tornado_left', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0) );
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	timer function Ghoul_Venom_Delay(deltaTime : float , id : int)
	{
		Ghoul_Venom();
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function SetFireBearFlameOnProcess( flag : bool )
	{
		ACS_Fire_Bear_FlameOn_Process = flag;
	}

	function SetFireBearFireLineProcess( flag : bool )
	{
		ACS_Fire_Bear_FireLine_Process = flag;
	}

	function SetFireBearFireballProcess( flag : bool )
	{
		ACS_Fire_Bear_Fireball_Process = flag;
	}

	function SetFireBearMeteorProcess( flag : bool )
	{
		ACS_Fire_Bear_Meteor_Process = flag;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function SetKnightmareIgniProcess( flag : bool )
	{
		ACS_Knightmare_Igni_Process = flag;
	}

	function SetKnightmareShoutProcess( flag : bool )
	{
		ACS_Knightmare_Shout_Process = flag;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function SetSheWhoKnowsProjectileProcess( flag : bool )
	{
		ACS_She_Who_Knows_Throw_Projectile_Process = flag;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function SetVampireMonsterFlyingProcess( flag : bool )
	{
		ACS_Vampire_Monster_Flying_Process = flag;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function SetVampireMonsterSpawnProcess( flag : bool )
	{
		ACS_Vampire_Monster_Spawn_Process = flag;
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	var vACS_Rage_Marker : cACS_Rage_Marker;

	function ACS_Rage_Marker()
	{
		vACS_Rage_Marker = new cACS_Rage_Marker in this;

		vACS_Rage_Marker.ACS_Rage_Marker_Engage();
	}

	function Rage_Marker_Player()
	{
		vACS_Rage_Marker = new cACS_Rage_Marker in this;

		vACS_Rage_Marker.ACS_Rage_Marker_Player_Pre_Engage();
	}

	function ACS_Rage_Marker_Manager()
	{
		if (ACS_can_spawn_rage_marker() 
		&& ACS_RageMechanic_Enabled())
		{
			ACS_refresh_rage_marker_cooldown();

			GetACSWatcher().RemoveTimer('RemoveSignComboStuffRepeating');
			GetACSWatcher().RemoveTimer('RemoveSignComboStuff');
			ACSSignComboIconDestroyAll();
			ACSSignComboSystemRemoveTags();

			GetACSWatcher().Remove_On_Hit_Tags();

			ACS_Rage_Markers_Destroy();

			ACS_Rage_Markers_Player_Destroy();

			Rage_Marker_Player();

			GetACSWatcher().RemoveTimer('ACS_Rage_Delay');

			GetACSWatcher().AddTimer('ACS_Rage_Delay', 1, false);
		}	
	}


	function SetRageProcess( flag : bool )
	{
		ACS_Rage_Process = flag;
	}

	function GetRageProcess() : bool 
	{
		return ACS_Rage_Process;
	}

	timer function ACS_Rage_Delay(deltaTime : float , id : int)
	{
		ACS_Rage_Marker();
	}

	timer function ACS_Rage_Remove(deltaTime : float , id : int)
	{
		Rage_Remove_Actual();
	}

	function Rage_Remove_Actual()
	{
		actors_in_rage.Clear();

		theGame.GetActorsByTag( 'ACS_In_Rage', actors_in_rage );	

		for( i = 0; i < actors_in_rage.Size(); i += 1 )
		{
			npc = (CNewNPC)actors_in_rage[i];

			npc.ClearAnimationSpeedMultipliers();

			npc.RemoveBuffImmunity_AllNegative('ACS_Rage');

			npc.RemoveBuffImmunity_AllCritical('ACS_Rage');

			npc.SetImmortalityMode( AIM_None, AIC_Combat ); 

			npc.SetCanPlayHitAnim(true); 

			actors_in_rage[i].ClearAnimationSpeedMultipliers();

			actors_in_rage[i].RemoveBuffImmunity_AllNegative('ACS_Rage');

			actors_in_rage[i].RemoveBuffImmunity_AllCritical('ACS_Rage');

			actors_in_rage[i].SetImmortalityMode( AIM_None, AIC_Combat ); 

			actors_in_rage[i].SetCanPlayHitAnim(true); 

			actors_in_rage[i].RemoveTag('ACS_Pre_Rage');

			actors_in_rage[i].RemoveTag('ACS_In_Rage');

			((CNewNPC)npc).SetAttitude(thePlayer, AIA_Hostile);
		}

		ACS_Rage_Markers_Destroy();

		ACS_Rage_Markers_Player_Destroy();

		if (FactsQuerySum("ACS_Rage_Sound_Played") > 0)
		{
			FactsRemove("ACS_Rage_Sound_Played");
		}

		SetRageProcess(false);
	}

	timer function rage_counter_dodge_reset(deltaTime : float , id : int)
	{
		rage_counter_dodge -= rage_counter_dodge;
	}

	function Rage_Counter_Dodge_Manager( i : int )
	{
		rage_counter_dodge += 1;

		RemoveTimer('rage_counter_dodge_reset');

		AddTimer('rage_counter_dodge_reset', 1, false);

		if( rage_counter_dodge == i ) 
		{
			RemoveTimer('rage_counter_dodge_reset');

			ACS_Rage_Marker_Manager();

			rage_counter_dodge -= rage_counter_dodge;
		}
	}

	timer function rage_counter_light_attack_reset(deltaTime : float , id : int)
	{
		rage_counter_light_attack -= rage_counter_light_attack;
	}

	function Rage_Counter_Light_Attack_Manager( i : int )
	{
		rage_counter_light_attack += 1;

		RemoveTimer('rage_counter_light_attack_reset');

		AddTimer('rage_counter_light_attack_reset', 2, false);

		if( rage_counter_light_attack == i ) 
		{
			RemoveTimer('rage_counter_light_attack_reset');

			ACS_Rage_Marker_Manager();

			rage_counter_light_attack -= rage_counter_light_attack;
		}
	}

	timer function rage_counter_heavy_attack_reset(deltaTime : float , id : int)
	{
		rage_counter_heavy_attack -= rage_counter_heavy_attack;
	}

	function Rage_Counter_Heavy_Attack_Manager( i : int )
	{
		rage_counter_heavy_attack += 1;

		RemoveTimer('rage_counter_heavy_attack_reset');

		AddTimer('rage_counter_heavy_attack_reset', 2, false);

		if( rage_counter_heavy_attack == i ) 
		{
			RemoveTimer('rage_counter_heavy_attack_reset');

			ACS_Rage_Marker_Manager();

			rage_counter_heavy_attack -= rage_counter_heavy_attack;
		}
	}

	timer function rage_counter_special_attack_reset(deltaTime : float , id : int)
	{
		rage_counter_special_attack -= rage_counter_special_attack;
	}

	function Rage_Counter_Special_Attack_Manager( i : int )
	{
		rage_counter_special_attack += 1;

		RemoveTimer('rage_counter_special_attack_reset');

		AddTimer('rage_counter_special_attack_reset', 2, false);

		if( rage_counter_special_attack == i ) 
		{
			RemoveTimer('rage_counter_special_attack_reset');

			ACS_Rage_Marker_Manager();

			rage_counter_special_attack -= rage_counter_special_attack;
		}
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	timer function ACS_Tentacle_Damage_Delay(deltaTime : float , id : int)
	{
		ACS_Tentacle_Damage_Actual();
	}

	timer function ACS_Tentacle_Remove(deltaTime : float , id : int)
	{
		GetACSTentacleAnchor().BreakAttachment(); 
		GetACSTentacleAnchor().Teleport( thePlayer.GetWorldPosition() + Vector( 0, 0, -200 ) );
		GetACSTentacleAnchor().DestroyAfter(0.0125);

		GetACSTentacle_1().BreakAttachment(); 
		GetACSTentacle_1().Teleport( thePlayer.GetWorldPosition() + Vector( 0, 0, -200 ) );
		GetACSTentacle_1().DestroyAfter(0.0125);

		GetACSTentacle_2().BreakAttachment(); 
		GetACSTentacle_2().Teleport( thePlayer.GetWorldPosition() + Vector( 0, 0, -200 ) );
		GetACSTentacle_2().DestroyAfter(0.0125);

		GetACSTentacle_3().BreakAttachment(); 
		GetACSTentacle_3().Teleport( thePlayer.GetWorldPosition() + Vector( 0, 0, -200 ) );
		GetACSTentacle_3().DestroyAfter(0.0125);
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	timer function ACS_Necrofiend_Tentacle_Damage_Delay(deltaTime : float , id : int)
	{
		ACS_Necrofiend_Tentacle_Damage_Actual();
	}

	timer function ACS_Necrofiend_Tentacle_Remove(deltaTime : float , id : int)
	{
		GetACSNecrofiendTentacleAnchor().BreakAttachment(); 
		GetACSNecrofiendTentacleAnchor().Teleport( thePlayer.GetWorldPosition() + Vector( 0, 0, -200 ) );
		GetACSNecrofiendTentacleAnchor().DestroyAfter(0.0125);

		GetACSNecrofiendTentacle_1().BreakAttachment(); 
		GetACSNecrofiendTentacle_1().Teleport( thePlayer.GetWorldPosition() + Vector( 0, 0, -200 ) );
		GetACSNecrofiendTentacle_1().DestroyAfter(0.0125);

		GetACSNecrofiendTentacle_2().BreakAttachment(); 
		GetACSNecrofiendTentacle_2().Teleport( thePlayer.GetWorldPosition() + Vector( 0, 0, -200 ) );
		GetACSNecrofiendTentacle_2().DestroyAfter(0.0125);

		GetACSNecrofiendTentacle_3().BreakAttachment(); 
		GetACSNecrofiendTentacle_3().Teleport( thePlayer.GetWorldPosition() + Vector( 0, 0, -200 ) );
		GetACSNecrofiendTentacle_3().DestroyAfter(0.0125);

		GetACSNecrofiendTentacle_4().BreakAttachment(); 
		GetACSNecrofiendTentacle_4().Teleport( thePlayer.GetWorldPosition() + Vector( 0, 0, -200 ) );
		GetACSNecrofiendTentacle_4().DestroyAfter(0.0125);

		GetACSNecrofiendTentacle_5().BreakAttachment(); 
		GetACSNecrofiendTentacle_5().Teleport( thePlayer.GetWorldPosition() + Vector( 0, 0, -200 ) );
		GetACSNecrofiendTentacle_5().DestroyAfter(0.0125);

		GetACSNecrofiendTentacle_6().BreakAttachment(); 
		GetACSNecrofiendTentacle_6().Teleport( thePlayer.GetWorldPosition() + Vector( 0, 0, -200 ) );
		GetACSNecrofiendTentacle_6().DestroyAfter(0.0125);
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	timer function ACS_Combo_Counter_Reset_Timer(deltaTime : float , id : int)
	{
		ACS_Combo_Mode_Reset_Hard();
	}

	function ACS_Combo_Mode_Reset()
	{
		RemoveTimer('ACS_Combo_Counter_Reset_Timer');
		AddTimer('ACS_Combo_Counter_Reset_Timer', 2, false);
	}

	function ACS_Combo_Mode_Reset_Hard()
	{
		combo_counter_damage -= combo_counter_damage;

		combo_counter_claw_fist_light -= combo_counter_claw_fist_light;

		combo_counter_claw_fist_heavy -= combo_counter_claw_fist_heavy;

		combo_counter_fist_attack -= combo_counter_fist_attack;

		combo_counter_fist_attack_heavy -= combo_counter_fist_attack_heavy;

		combo_counter_kick -= combo_counter_kick;

		combo_counter_push -= combo_counter_push;

		combo_counter_punch -= combo_counter_punch;

		combo_counter_igni_counter -= combo_counter_igni_counter;

		combo_counter_aard_counter -= combo_counter_aard_counter;

		combo_counter_quen_counter -= combo_counter_quen_counter;

		combo_counter_yrden_counter -= combo_counter_yrden_counter;

		combo_counter_axii_counter -= combo_counter_axii_counter;

		combo_counter_spear_counter -= combo_counter_spear_counter;

		combo_counter_greg_counter -= combo_counter_greg_counter;

		combo_counter_hammer_counter -= combo_counter_hammer_counter;

		combo_counter_axe_counter -= combo_counter_axe_counter;

		combo_counter_heavy_claw_attack -= combo_counter_heavy_claw_attack;

		combo_counter_claw_attack -= combo_counter_claw_attack;

		combo_counter_claw_attack_alt -= combo_counter_claw_attack_alt;

		combo_counter_claw_heavy_attack -= combo_counter_claw_heavy_attack;

		combo_counter_claw_heavy_attack_alt -= combo_counter_claw_heavy_attack_alt;

		combo_counter_claw_light_attack -= combo_counter_claw_light_attack;

		combo_counter_claw_light_attack_alt -= combo_counter_claw_light_attack_alt;

		combo_counter_attack_special_dash -= combo_counter_attack_special_dash;

		combo_counter_geralt_light_attack -= combo_counter_geralt_light_attack;

		combo_counter_geralt_light_attack_forward -= combo_counter_geralt_light_attack_forward;

		combo_counter_geralt_heavy_attack -= combo_counter_geralt_heavy_attack;

		combo_counter_geralt_heavy_attack_forward -= combo_counter_geralt_heavy_attack_forward;

		combo_counter_geralt_special_attack -= combo_counter_geralt_special_attack;

		combo_counter_geralt_light_attack_bear -= combo_counter_geralt_light_attack_bear;

		combo_counter_geralt_light_attack_forward_bear -= combo_counter_geralt_light_attack_forward_bear;

		combo_counter_geralt_heavy_attack_bear -= combo_counter_geralt_heavy_attack_bear;

		combo_counter_geralt_heavy_attack_forward_bear -= combo_counter_geralt_heavy_attack_forward_bear;

		combo_counter_geralt_special_attack_bear -= combo_counter_geralt_special_attack_bear;

		combo_counter_geralt_light_attack_cat -= combo_counter_geralt_light_attack_cat;

		combo_counter_geralt_light_attack_forward_cat -= combo_counter_geralt_light_attack_forward_cat;

		combo_counter_geralt_heavy_attack_cat -= combo_counter_geralt_heavy_attack_cat;

		combo_counter_geralt_heavy_attack_forward_cat -= combo_counter_geralt_heavy_attack_forward_cat;

		combo_counter_geralt_special_attack_cat -= combo_counter_geralt_special_attack_cat;

		combo_counter_geralt_light_attack_griffin -= combo_counter_geralt_light_attack_griffin;

		combo_counter_geralt_light_attack_forward_griffin -= combo_counter_geralt_light_attack_forward_griffin;

		combo_counter_geralt_heavy_attack_griffin -= combo_counter_geralt_heavy_attack_griffin;

		combo_counter_geralt_heavy_attack_forward_griffin -= combo_counter_geralt_heavy_attack_forward_griffin;

		combo_counter_geralt_special_attack_griffin -= combo_counter_geralt_special_attack_griffin;

		combo_counter_geralt_light_attack_manticore -= combo_counter_geralt_light_attack_manticore;

		combo_counter_geralt_light_attack_forward_manticore -= combo_counter_geralt_light_attack_forward_manticore;

		combo_counter_geralt_heavy_attack_manticore -= combo_counter_geralt_heavy_attack_manticore;

		combo_counter_geralt_heavy_attack_forward_manticore -= combo_counter_geralt_heavy_attack_forward_manticore;

		combo_counter_geralt_special_attack_manticore -= combo_counter_geralt_special_attack_manticore;

		combo_counter_geralt_light_attack_viper -= combo_counter_geralt_light_attack_viper;

		combo_counter_geralt_light_attack_forward_viper -= combo_counter_geralt_light_attack_forward_viper;

		combo_counter_geralt_heavy_attack_viper -= combo_counter_geralt_heavy_attack_viper;

		combo_counter_geralt_heavy_attack_forward_viper -= combo_counter_geralt_heavy_attack_forward_viper;

		combo_counter_geralt_special_attack_viper -= combo_counter_geralt_special_attack_viper;


		combo_counter_olgierd_attack -= combo_counter_olgierd_attack;

		combo_counter_olgierd_heavy_attack -= combo_counter_olgierd_heavy_attack;

		combo_counter_olgierd_heavy_attack_alt -= combo_counter_olgierd_heavy_attack_alt;

		combo_counter_olgierd_light_attack -= combo_counter_olgierd_light_attack;

		combo_counter_olgierd_light_attack_alt -= combo_counter_olgierd_light_attack_alt;

		combo_counter_olgierd_pirouette -= combo_counter_olgierd_pirouette;

		combo_counter_olgierd_combo_attack -= combo_counter_olgierd_combo_attack;

		combo_counter_eredin_attack -= combo_counter_eredin_attack;

		combo_counter_shield_attack -= combo_counter_shield_attack;

		combo_counter_shield_attack_alt -= combo_counter_shield_attack_alt;

		combo_counter_shield_attack_special_alt -= combo_counter_shield_attack_special_alt;

		combo_counter_shield_heavy_attack -= combo_counter_shield_heavy_attack;

		combo_counter_shield_heavy_attack_alt -= combo_counter_shield_heavy_attack_alt;

		combo_counter_shield_light_attack -= combo_counter_shield_light_attack;

		combo_counter_shield_light_attack_alt -= combo_counter_shield_light_attack_alt;

		combo_counter_shield_special_attack -= combo_counter_shield_special_attack;

		combo_counter_shield_special_attack_alt -= combo_counter_shield_special_attack_alt;

		combo_counter_eredin_combo_attack -= combo_counter_eredin_combo_attack;

		combo_counter_eredin_combo_attack_alt -= combo_counter_eredin_combo_attack_alt;

		combo_counter_eredin_heavy_attack -= combo_counter_eredin_heavy_attack;

		combo_counter_eredin_heavy_attack_alt -= combo_counter_eredin_heavy_attack_alt;

		combo_counter_eredin_light_attack -= combo_counter_eredin_light_attack;

		combo_counter_eredin_light_attack_alt -= combo_counter_eredin_light_attack_alt;

		combo_counter_eredin_special_attack -= combo_counter_eredin_special_attack;

		combo_counter_eredin_special_attack_alt -= combo_counter_eredin_special_attack_alt;

		combo_counter_imlerith_attack -= combo_counter_imlerith_attack;

		combo_counter_imlerith_berserk_attack -= combo_counter_imlerith_berserk_attack;

		combo_counter_imlerith_walk_attack -= combo_counter_imlerith_walk_attack;

		combo_counter_imlerith_combo_attack -= combo_counter_imlerith_combo_attack;

		combo_counter_imlerith_heavy_attack -= combo_counter_imlerith_heavy_attack;

		combo_counter_imlerith_heavy_attack_alt -= combo_counter_imlerith_heavy_attack_alt;

		combo_counter_imlerith_light_attack -= combo_counter_imlerith_light_attack;

		combo_counter_imlerith_light_attack_alt -= combo_counter_imlerith_light_attack_alt;

		combo_counter_imlerith_special_attack -= combo_counter_imlerith_special_attack;

		combo_counter_imlerith_special_attack_alt -= combo_counter_imlerith_special_attack_alt;

		combo_counter_spear_attack -= combo_counter_spear_attack;

		combo_counter_spear_attack_alt -= combo_counter_spear_attack_alt;

		combo_counter_spear_heavy_attack -= combo_counter_spear_heavy_attack;

		combo_counter_spear_heavy_attack_alt -= combo_counter_spear_heavy_attack_alt;

		combo_counter_spear_light_attack -= combo_counter_spear_light_attack;

		combo_counter_spear_light_attack_alt -= combo_counter_spear_light_attack_alt;

		combo_counter_spear_special_attack -= combo_counter_spear_special_attack;

		combo_counter_spear_special_attack_alt -= combo_counter_spear_special_attack_alt;

		combo_counter_hammer_attack -= combo_counter_hammer_attack;

		combo_counter_hammer_attack_alt -= combo_counter_hammer_attack_alt;

		combo_counter_hammer_heavy_attack -= combo_counter_hammer_heavy_attack;

		combo_counter_hammer_heavy_attack_alt -= combo_counter_hammer_heavy_attack_alt;

		combo_counter_hammer_light_attack -= combo_counter_hammer_light_attack;

		combo_counter_hammer_light_attack_alt -= combo_counter_hammer_light_attack_alt;

		combo_counter_hammer_special_attack -= combo_counter_hammer_special_attack;

		combo_counter_hammer_special_attack_alt -= combo_counter_hammer_special_attack_alt;

		combo_counter_axe_attack -= combo_counter_axe_attack;

		combo_counter_axe_attack_alt -= combo_counter_axe_attack_alt;

		combo_counter_axe_heavy_attack -= combo_counter_axe_heavy_attack;

		combo_counter_axe_heavy_attack_alt -= combo_counter_axe_heavy_attack_alt;

		combo_counter_axe_light_attack -= combo_counter_axe_light_attack;

		combo_counter_axe_light_attack_alt -= combo_counter_axe_light_attack_alt;

		combo_counter_axe_special_attack -= combo_counter_axe_special_attack;

		combo_counter_axe_special_attack_alt -= combo_counter_axe_special_attack_alt;

		combo_counter_greg_attack -= combo_counter_greg_attack;

		combo_counter_greg_attack_alt -= combo_counter_greg_attack_alt;

		combo_counter_greg_heavy_attack -= combo_counter_greg_heavy_attack;

		combo_counter_greg_heavy_attack_alt -= combo_counter_greg_heavy_attack_alt;

		combo_counter_greg_light_attack -= combo_counter_greg_light_attack;

		combo_counter_greg_light_attack_alt -= combo_counter_greg_light_attack_alt;

		combo_counter_greg_special_attack -= combo_counter_greg_special_attack;

		combo_counter_greg_special_attack_alt -= combo_counter_greg_special_attack_alt;



		combo_counter_mage_heavy_attack -= combo_counter_mage_heavy_attack;

		combo_counter_mage_light_attack -= combo_counter_mage_light_attack;

		combo_counter_mage_special_attack -= combo_counter_mage_special_attack;
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function blood_trail_effects()
	{
		blood_fx.Clear();
		blood_fx.PushBack('default_blood_trail');
		blood_fx.PushBack('cutscene_blood_trail');
		blood_fx.PushBack('cutscene_blood_trail_02');
		blood_fx.PushBack('blood_trail_horseriding');
		blood_fx.PushBack('blood_trail_finisher');
		blood_fx.PushBack('fast_trail_blood_fx');
		blood_fx.PushBack('weapon_blood');
		blood_fx.PushBack('weapon_blood_stage1');
		blood_fx.PushBack('weapon_blood_stage2'); 
	}
	
	function weapon_blood_fx()
	{
		blood_trail_effects();

		/*
		ACS_Sword_Trail_1().StopEffect('aerondight_blood_red');
		ACS_Sword_Trail_1().PlayEffectSingle('aerondight_blood_red');

		ACS_Sword_Trail_2().StopEffect('aerondight_blood_red');
		ACS_Sword_Trail_2().PlayEffectSingle('aerondight_blood_red');

		ACS_Sword_Trail_3().StopEffect('aerondight_blood_red');
		ACS_Sword_Trail_3().PlayEffectSingle('aerondight_blood_red');

		ACS_Sword_Trail_4().StopEffect('aerondight_blood_red');
		ACS_Sword_Trail_4().PlayEffectSingle('aerondight_blood_red');

		ACS_Sword_Trail_5().StopEffect('aerondight_blood_red');
		ACS_Sword_Trail_5().PlayEffectSingle('aerondight_blood_red');

		ACS_Sword_Trail_6().StopEffect('aerondight_blood_red');
		ACS_Sword_Trail_6().PlayEffectSingle('aerondight_blood_red');

		ACS_Sword_Trail_7().StopEffect('aerondight_blood_red');
		ACS_Sword_Trail_7().PlayEffectSingle('aerondight_blood_red');

		ACS_Sword_Trail_8().StopEffect('aerondight_blood_red');
		ACS_Sword_Trail_8().PlayEffectSingle('aerondight_blood_red');
		*/

		if (thePlayer.HasTag('axii_sword_equipped'))
		{
			ACS_Sword_Trail_3().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_3().PlayEffectSingle('aerondight_blood_red');

			if (ACS_GetWeaponMode() == 0
			|| ACS_GetWeaponMode() == 1
			|| ACS_GetWeaponMode() == 2
			)
			{
				axii_sword_1().StopEffect('default_blood_trail');
				axii_sword_1().StopEffect('cutscene_blood_trail');
				axii_sword_1().StopEffect('blood_trail_horseriding');
				axii_sword_1().StopEffect('blood_trail_finisher');
				axii_sword_1().StopEffect('fast_trail_blood_fx');
				axii_sword_1().StopEffect('weapon_blood');
				axii_sword_1().StopEffect('weapon_blood_stage1');
				axii_sword_1().StopEffect('weapon_blood_stage2');

				axii_sword_2().StopEffect('default_blood_trail');
				axii_sword_2().StopEffect('cutscene_blood_trail');
				axii_sword_2().StopEffect('blood_trail_horseriding');
				axii_sword_2().StopEffect('blood_trail_finisher');
				axii_sword_2().StopEffect('fast_trail_blood_fx');
				axii_sword_2().StopEffect('weapon_blood');
				axii_sword_2().StopEffect('weapon_blood_stage1');
				axii_sword_2().StopEffect('weapon_blood_stage2');

				axii_sword_3().StopEffect('default_blood_trail');
				axii_sword_3().StopEffect('cutscene_blood_trail');
				axii_sword_3().StopEffect('blood_trail_horseriding');
				axii_sword_3().StopEffect('blood_trail_finisher');
				axii_sword_3().StopEffect('fast_trail_blood_fx');
				axii_sword_3().StopEffect('weapon_blood');
				axii_sword_3().StopEffect('weapon_blood_stage1');
				axii_sword_3().StopEffect('weapon_blood_stage2');

				axii_sword_4().StopEffect('default_blood_trail');
				axii_sword_4().StopEffect('cutscene_blood_trail');
				axii_sword_4().StopEffect('blood_trail_horseriding');
				axii_sword_4().StopEffect('blood_trail_finisher');
				axii_sword_4().StopEffect('fast_trail_blood_fx');
				axii_sword_4().StopEffect('weapon_blood');
				axii_sword_4().StopEffect('weapon_blood_stage1');
				axii_sword_4().StopEffect('weapon_blood_stage2');

				axii_sword_5().StopEffect('default_blood_trail');
				axii_sword_5().StopEffect('cutscene_blood_trail');
				axii_sword_5().StopEffect('blood_trail_horseriding');
				axii_sword_5().StopEffect('blood_trail_finisher');
				axii_sword_5().StopEffect('fast_trail_blood_fx');
				axii_sword_5().StopEffect('weapon_blood');
				axii_sword_5().StopEffect('weapon_blood_stage1');
				axii_sword_5().StopEffect('weapon_blood_stage2');

				/*
				ACSGetEquippedSword().StopEffect('default_blood_trail');
				ACSGetEquippedSword().StopEffect('cutscene_blood_trail');
				ACSGetEquippedSword().StopEffect('blood_trail_horseriding');
				ACSGetEquippedSword().StopEffect('blood_trail_finisher');
				ACSGetEquippedSword().StopEffect('fast_trail_blood_fx');
				ACSGetEquippedSword().StopEffect('weapon_blood');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage1');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage2');

				ACSGetEquippedSword().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				*/

				axii_sword_1().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//axii_sword_2().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//axii_sword_3().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//axii_sword_4().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//axii_sword_5().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			}
			else if (ACS_GetWeaponMode() == 3)
			{
				ACSGetEquippedSword().StopEffect('default_blood_trail');
				ACSGetEquippedSword().StopEffect('cutscene_blood_trail');
				ACSGetEquippedSword().StopEffect('blood_trail_horseriding');
				ACSGetEquippedSword().StopEffect('blood_trail_finisher');
				ACSGetEquippedSword().StopEffect('fast_trail_blood_fx');
				ACSGetEquippedSword().StopEffect('weapon_blood');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage1');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage2');

				ACSGetEquippedSword().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			}
		}
		else if (thePlayer.HasTag('axii_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_3().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_3().PlayEffectSingle('aerondight_blood_red');

			if (ACS_GetWeaponMode() == 0
			|| ACS_GetWeaponMode() == 1
			|| ACS_GetWeaponMode() == 2
			)
			{
				axii_secondary_sword_1().StopEffect('default_blood_trail');
				axii_secondary_sword_1().StopEffect('cutscene_blood_trail');
				axii_secondary_sword_1().StopEffect('blood_trail_horseriding');
				axii_secondary_sword_1().StopEffect('blood_trail_finisher');
				axii_secondary_sword_1().StopEffect('fast_trail_blood_fx');
				axii_secondary_sword_1().StopEffect('weapon_blood');
				axii_secondary_sword_1().StopEffect('weapon_blood_stage1');
				axii_secondary_sword_1().StopEffect('weapon_blood_stage2');

				axii_secondary_sword_2().StopEffect('default_blood_trail');
				axii_secondary_sword_2().StopEffect('cutscene_blood_trail');
				axii_secondary_sword_2().StopEffect('blood_trail_horseriding');
				axii_secondary_sword_2().StopEffect('blood_trail_finisher');
				axii_secondary_sword_2().StopEffect('fast_trail_blood_fx');
				axii_secondary_sword_2().StopEffect('weapon_blood');
				axii_secondary_sword_2().StopEffect('weapon_blood_stage1');
				axii_secondary_sword_2().StopEffect('weapon_blood_stage2');

				axii_secondary_sword_3().StopEffect('default_blood_trail');
				axii_secondary_sword_3().StopEffect('cutscene_blood_trail');
				axii_secondary_sword_3().StopEffect('blood_trail_horseriding');
				axii_secondary_sword_3().StopEffect('blood_trail_finisher');
				axii_secondary_sword_3().StopEffect('fast_trail_blood_fx');
				axii_secondary_sword_3().StopEffect('weapon_blood');
				axii_secondary_sword_3().StopEffect('weapon_blood_stage1');
				axii_secondary_sword_3().StopEffect('weapon_blood_stage2');

				/*
				ACSGetEquippedSword().StopEffect('default_blood_trail');
				ACSGetEquippedSword().StopEffect('cutscene_blood_trail');
				ACSGetEquippedSword().StopEffect('blood_trail_horseriding');
				ACSGetEquippedSword().StopEffect('blood_trail_finisher');
				ACSGetEquippedSword().StopEffect('fast_trail_blood_fx');
				ACSGetEquippedSword().StopEffect('weapon_blood');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage1');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage2');

				ACSGetEquippedSword().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				*/

				axii_secondary_sword_1().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//axii_secondary_sword_2().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//axii_secondary_sword_3().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			}
			else if (ACS_GetWeaponMode() == 3)
			{
				ACSGetEquippedSword().StopEffect('default_blood_trail');
				ACSGetEquippedSword().StopEffect('cutscene_blood_trail');
				ACSGetEquippedSword().StopEffect('blood_trail_horseriding');
				ACSGetEquippedSword().StopEffect('blood_trail_finisher');
				ACSGetEquippedSword().StopEffect('fast_trail_blood_fx');
				ACSGetEquippedSword().StopEffect('weapon_blood');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage1');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage2');

				ACSGetEquippedSword().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			}
		}
		else if (thePlayer.HasTag('quen_sword_equipped'))
		{
			ACS_Sword_Trail_3().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_3().PlayEffectSingle('aerondight_blood_red');

			if (ACS_GetWeaponMode() == 0
			|| ACS_GetWeaponMode() == 1
			|| ACS_GetWeaponMode() == 2
			)
			{
				quen_sword_1().StopEffect('default_blood_trail');
				quen_sword_1().StopEffect('cutscene_blood_trail');
				quen_sword_1().StopEffect('blood_trail_horseriding');
				quen_sword_1().StopEffect('blood_trail_finisher');
				quen_sword_1().StopEffect('fast_trail_blood_fx');
				quen_sword_1().StopEffect('weapon_blood');
				quen_sword_1().StopEffect('weapon_blood_stage1');
				quen_sword_1().StopEffect('weapon_blood_stage2');

				quen_sword_2().StopEffect('default_blood_trail');
				quen_sword_2().StopEffect('cutscene_blood_trail');
				quen_sword_2().StopEffect('blood_trail_horseriding');
				quen_sword_2().StopEffect('blood_trail_finisher');
				quen_sword_2().StopEffect('fast_trail_blood_fx');
				quen_sword_2().StopEffect('weapon_blood');
				quen_sword_2().StopEffect('weapon_blood_stage1');
				quen_sword_2().StopEffect('weapon_blood_stage2');

				quen_sword_3().StopEffect('default_blood_trail');
				quen_sword_3().StopEffect('cutscene_blood_trail');
				quen_sword_3().StopEffect('blood_trail_horseriding');
				quen_sword_3().StopEffect('blood_trail_finisher');
				quen_sword_3().StopEffect('fast_trail_blood_fx');
				quen_sword_3().StopEffect('weapon_blood');
				quen_sword_3().StopEffect('weapon_blood_stage1');
				quen_sword_3().StopEffect('weapon_blood_stage2');

				/*
				ACSGetEquippedSword().StopEffect('default_blood_trail');
				ACSGetEquippedSword().StopEffect('cutscene_blood_trail');
				ACSGetEquippedSword().StopEffect('blood_trail_horseriding');
				ACSGetEquippedSword().StopEffect('blood_trail_finisher');
				ACSGetEquippedSword().StopEffect('fast_trail_blood_fx');
				ACSGetEquippedSword().StopEffect('weapon_blood');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage1');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage2');

				ACSGetEquippedSword().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				*/

				quen_sword_1().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//quen_sword_2().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//quen_sword_3().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			}
			else if (ACS_GetWeaponMode() == 3)
			{
				ACSGetEquippedSword().StopEffect('default_blood_trail');
				ACSGetEquippedSword().StopEffect('cutscene_blood_trail');
				ACSGetEquippedSword().StopEffect('blood_trail_horseriding');
				ACSGetEquippedSword().StopEffect('blood_trail_finisher');
				ACSGetEquippedSword().StopEffect('fast_trail_blood_fx');
				ACSGetEquippedSword().StopEffect('weapon_blood');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage1');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage2');

				ACSGetEquippedSword().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			}
		}
		else if (thePlayer.HasTag('quen_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_1().PlayEffectSingle('aerondight_blood_red');

			ACS_Sword_Trail_2().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_2().PlayEffectSingle('aerondight_blood_red');

			if (ACS_GetWeaponMode() == 0
			|| ACS_GetWeaponMode() == 1
			|| ACS_GetWeaponMode() == 2
			)
			{
				quen_secondary_sword_1().StopEffect('default_blood_trail');
				quen_secondary_sword_1().StopEffect('cutscene_blood_trail');
				quen_secondary_sword_1().StopEffect('blood_trail_horseriding');
				quen_secondary_sword_1().StopEffect('blood_trail_finisher');
				quen_secondary_sword_1().StopEffect('fast_trail_blood_fx');
				quen_secondary_sword_1().StopEffect('weapon_blood');
				quen_secondary_sword_1().StopEffect('weapon_blood_stage1');
				quen_secondary_sword_1().StopEffect('weapon_blood_stage2');

				quen_secondary_sword_2().StopEffect('default_blood_trail');
				quen_secondary_sword_2().StopEffect('cutscene_blood_trail');
				quen_secondary_sword_2().StopEffect('blood_trail_horseriding');
				quen_secondary_sword_2().StopEffect('blood_trail_finisher');
				quen_secondary_sword_2().StopEffect('fast_trail_blood_fx');
				quen_secondary_sword_2().StopEffect('weapon_blood');
				quen_secondary_sword_2().StopEffect('weapon_blood_stage1');
				quen_secondary_sword_2().StopEffect('weapon_blood_stage2');

				quen_secondary_sword_3().StopEffect('default_blood_trail');
				quen_secondary_sword_3().StopEffect('cutscene_blood_trail');
				quen_secondary_sword_3().StopEffect('blood_trail_horseriding');
				quen_secondary_sword_3().StopEffect('blood_trail_finisher');
				quen_secondary_sword_3().StopEffect('fast_trail_blood_fx');
				quen_secondary_sword_3().StopEffect('weapon_blood');
				quen_secondary_sword_3().StopEffect('weapon_blood_stage1');
				quen_secondary_sword_3().StopEffect('weapon_blood_stage2');

				quen_secondary_sword_4().StopEffect('default_blood_trail');
				quen_secondary_sword_4().StopEffect('cutscene_blood_trail');
				quen_secondary_sword_4().StopEffect('blood_trail_horseriding');
				quen_secondary_sword_4().StopEffect('blood_trail_finisher');
				quen_secondary_sword_4().StopEffect('fast_trail_blood_fx');
				quen_secondary_sword_4().StopEffect('weapon_blood');
				quen_secondary_sword_4().StopEffect('weapon_blood_stage1');
				quen_secondary_sword_4().StopEffect('weapon_blood_stage2');

				quen_secondary_sword_5().StopEffect('default_blood_trail');
				quen_secondary_sword_5().StopEffect('cutscene_blood_trail');
				quen_secondary_sword_5().StopEffect('blood_trail_horseriding');
				quen_secondary_sword_5().StopEffect('blood_trail_finisher');
				quen_secondary_sword_5().StopEffect('fast_trail_blood_fx');
				quen_secondary_sword_5().StopEffect('weapon_blood');
				quen_secondary_sword_5().StopEffect('weapon_blood_stage1');
				quen_secondary_sword_5().StopEffect('weapon_blood_stage2');

				quen_secondary_sword_6().StopEffect('default_blood_trail');
				quen_secondary_sword_6().StopEffect('cutscene_blood_trail');
				quen_secondary_sword_6().StopEffect('blood_trail_horseriding');
				quen_secondary_sword_6().StopEffect('blood_trail_finisher');
				quen_secondary_sword_6().StopEffect('fast_trail_blood_fx');
				quen_secondary_sword_6().StopEffect('weapon_blood');
				quen_secondary_sword_6().StopEffect('weapon_blood_stage1');
				quen_secondary_sword_6().StopEffect('weapon_blood_stage2');

				/*
				ACSGetEquippedSword().StopEffect('default_blood_trail');
				ACSGetEquippedSword().StopEffect('cutscene_blood_trail');
				ACSGetEquippedSword().StopEffect('blood_trail_horseriding');
				ACSGetEquippedSword().StopEffect('blood_trail_finisher');
				ACSGetEquippedSword().StopEffect('fast_trail_blood_fx');
				ACSGetEquippedSword().StopEffect('weapon_blood');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage1');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage2');

				ACSGetEquippedSword().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				*/

				quen_secondary_sword_1().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				quen_secondary_sword_2().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//quen_secondary_sword_3().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//quen_secondary_sword_4().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//quen_secondary_sword_5().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//quen_secondary_sword_6().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			}
			else if (ACS_GetWeaponMode() == 3)
			{
				ACSGetEquippedSword().StopEffect('default_blood_trail');
				ACSGetEquippedSword().StopEffect('cutscene_blood_trail');
				ACSGetEquippedSword().StopEffect('blood_trail_horseriding');
				ACSGetEquippedSword().StopEffect('blood_trail_finisher');
				ACSGetEquippedSword().StopEffect('fast_trail_blood_fx');
				ACSGetEquippedSword().StopEffect('weapon_blood');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage1');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage2');

				ACSGetEquippedSword().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			}
		}
		else if (thePlayer.HasTag('aard_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_1().PlayEffectSingle('aerondight_blood_red');

			ACS_Sword_Trail_2().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_2().PlayEffectSingle('aerondight_blood_red');

			ACS_Sword_Trail_3().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_3().PlayEffectSingle('aerondight_blood_red');

			ACS_Sword_Trail_4().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_4().PlayEffectSingle('aerondight_blood_red');

			ACS_Sword_Trail_5().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_5().PlayEffectSingle('aerondight_blood_red');

			ACS_Sword_Trail_6().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_6().PlayEffectSingle('aerondight_blood_red');

			ACS_Sword_Trail_7().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_7().PlayEffectSingle('aerondight_blood_red');

			ACS_Sword_Trail_8().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_8().PlayEffectSingle('aerondight_blood_red');

			aard_blade_1().StopEffect('default_blood_trail');
			aard_blade_1().StopEffect('cutscene_blood_trail');
			aard_blade_1().StopEffect('blood_trail_horseriding');
			aard_blade_1().StopEffect('blood_trail_finisher');
			aard_blade_1().StopEffect('fast_trail_blood_fx');
			aard_blade_1().StopEffect('weapon_blood');
			aard_blade_1().StopEffect('weapon_blood_stage1');
			aard_blade_1().StopEffect('weapon_blood_stage2');

			aard_blade_2().StopEffect('default_blood_trail');
			aard_blade_2().StopEffect('cutscene_blood_trail');
			aard_blade_2().StopEffect('blood_trail_horseriding');
			aard_blade_2().StopEffect('blood_trail_finisher');
			aard_blade_2().StopEffect('fast_trail_blood_fx');
			aard_blade_2().StopEffect('weapon_blood');
			aard_blade_2().StopEffect('weapon_blood_stage1');
			aard_blade_2().StopEffect('weapon_blood_stage2');

			aard_blade_3().StopEffect('default_blood_trail');
			aard_blade_3().StopEffect('cutscene_blood_trail');
			aard_blade_3().StopEffect('blood_trail_horseriding');
			aard_blade_3().StopEffect('blood_trail_finisher');
			aard_blade_3().StopEffect('fast_trail_blood_fx');
			aard_blade_3().StopEffect('weapon_blood');
			aard_blade_3().StopEffect('weapon_blood_stage1');
			aard_blade_3().StopEffect('weapon_blood_stage2');

			aard_blade_4().StopEffect('default_blood_trail');
			aard_blade_4().StopEffect('cutscene_blood_trail');
			aard_blade_4().StopEffect('blood_trail_horseriding');
			aard_blade_4().StopEffect('blood_trail_finisher');
			aard_blade_4().StopEffect('fast_trail_blood_fx');
			aard_blade_4().StopEffect('weapon_blood');
			aard_blade_4().StopEffect('weapon_blood_stage1');
			aard_blade_4().StopEffect('weapon_blood_stage2');

			aard_blade_5().StopEffect('default_blood_trail');
			aard_blade_5().StopEffect('cutscene_blood_trail');
			aard_blade_5().StopEffect('blood_trail_horseriding');
			aard_blade_5().StopEffect('blood_trail_finisher');
			aard_blade_5().StopEffect('fast_trail_blood_fx');
			aard_blade_5().StopEffect('weapon_blood');
			aard_blade_5().StopEffect('weapon_blood_stage1');
			aard_blade_5().StopEffect('weapon_blood_stage2');

			aard_blade_6().StopEffect('default_blood_trail');
			aard_blade_6().StopEffect('cutscene_blood_trail');
			aard_blade_6().StopEffect('blood_trail_horseriding');
			aard_blade_6().StopEffect('blood_trail_finisher');
			aard_blade_6().StopEffect('fast_trail_blood_fx');
			aard_blade_6().StopEffect('weapon_blood');
			aard_blade_6().StopEffect('weapon_blood_stage1');
			aard_blade_6().StopEffect('weapon_blood_stage2');

			aard_blade_7().StopEffect('default_blood_trail');
			aard_blade_7().StopEffect('cutscene_blood_trail');
			aard_blade_7().StopEffect('blood_trail_horseriding');
			aard_blade_7().StopEffect('blood_trail_finisher');
			aard_blade_7().StopEffect('fast_trail_blood_fx');
			aard_blade_7().StopEffect('weapon_blood');
			aard_blade_7().StopEffect('weapon_blood_stage1');
			aard_blade_7().StopEffect('weapon_blood_stage2');

			aard_blade_8().StopEffect('default_blood_trail');
			aard_blade_8().StopEffect('cutscene_blood_trail');
			aard_blade_8().StopEffect('blood_trail_horseriding');
			aard_blade_8().StopEffect('blood_trail_finisher');
			aard_blade_8().StopEffect('fast_trail_blood_fx');
			aard_blade_8().StopEffect('weapon_blood');
			aard_blade_8().StopEffect('weapon_blood_stage1');
			aard_blade_8().StopEffect('weapon_blood_stage2');

			aard_blade_1().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			aard_blade_2().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			aard_blade_3().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			aard_blade_4().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			aard_blade_5().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			aard_blade_6().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			aard_blade_7().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			aard_blade_8().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
		}
		else if (thePlayer.HasTag('aard_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_3().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_3().PlayEffectSingle('aerondight_blood_red');

			if (ACS_GetWeaponMode() == 0
			|| ACS_GetWeaponMode() == 1
			|| ACS_GetWeaponMode() == 2
			)
			{
				aard_secondary_sword_1().StopEffect('default_blood_trail');
				aard_secondary_sword_1().StopEffect('cutscene_blood_trail');
				aard_secondary_sword_1().StopEffect('blood_trail_horseriding');
				aard_secondary_sword_1().StopEffect('blood_trail_finisher');
				aard_secondary_sword_1().StopEffect('fast_trail_blood_fx');
				aard_secondary_sword_1().StopEffect('weapon_blood');
				aard_secondary_sword_1().StopEffect('weapon_blood_stage1');
				aard_secondary_sword_1().StopEffect('weapon_blood_stage2');

				aard_secondary_sword_2().StopEffect('default_blood_trail');
				aard_secondary_sword_2().StopEffect('cutscene_blood_trail');
				aard_secondary_sword_2().StopEffect('blood_trail_horseriding');
				aard_secondary_sword_2().StopEffect('blood_trail_finisher');
				aard_secondary_sword_2().StopEffect('fast_trail_blood_fx');
				aard_secondary_sword_2().StopEffect('weapon_blood');
				aard_secondary_sword_2().StopEffect('weapon_blood_stage1');
				aard_secondary_sword_2().StopEffect('weapon_blood_stage2');

				aard_secondary_sword_3().StopEffect('default_blood_trail');
				aard_secondary_sword_3().StopEffect('cutscene_blood_trail');
				aard_secondary_sword_3().StopEffect('blood_trail_horseriding');
				aard_secondary_sword_3().StopEffect('blood_trail_finisher');
				aard_secondary_sword_3().StopEffect('fast_trail_blood_fx');
				aard_secondary_sword_3().StopEffect('weapon_blood');
				aard_secondary_sword_3().StopEffect('weapon_blood_stage1');
				aard_secondary_sword_3().StopEffect('weapon_blood_stage2');

				aard_secondary_sword_4().StopEffect('default_blood_trail');
				aard_secondary_sword_4().StopEffect('cutscene_blood_trail');
				aard_secondary_sword_4().StopEffect('blood_trail_horseriding');
				aard_secondary_sword_4().StopEffect('blood_trail_finisher');
				aard_secondary_sword_4().StopEffect('fast_trail_blood_fx');
				aard_secondary_sword_4().StopEffect('weapon_blood');
				aard_secondary_sword_4().StopEffect('weapon_blood_stage1');
				aard_secondary_sword_4().StopEffect('weapon_blood_stage2');

				aard_secondary_sword_5().StopEffect('default_blood_trail');
				aard_secondary_sword_5().StopEffect('cutscene_blood_trail');
				aard_secondary_sword_5().StopEffect('blood_trail_horseriding');
				aard_secondary_sword_5().StopEffect('blood_trail_finisher');
				aard_secondary_sword_5().StopEffect('fast_trail_blood_fx');
				aard_secondary_sword_5().StopEffect('weapon_blood');
				aard_secondary_sword_5().StopEffect('weapon_blood_stage1');
				aard_secondary_sword_5().StopEffect('weapon_blood_stage2');

				aard_secondary_sword_6().StopEffect('default_blood_trail');
				aard_secondary_sword_6().StopEffect('cutscene_blood_trail');
				aard_secondary_sword_6().StopEffect('blood_trail_horseriding');
				aard_secondary_sword_6().StopEffect('blood_trail_finisher');
				aard_secondary_sword_6().StopEffect('fast_trail_blood_fx');
				aard_secondary_sword_6().StopEffect('weapon_blood');
				aard_secondary_sword_6().StopEffect('weapon_blood_stage1');
				aard_secondary_sword_6().StopEffect('weapon_blood_stage2');

				aard_secondary_sword_7().StopEffect('default_blood_trail');
				aard_secondary_sword_7().StopEffect('cutscene_blood_trail');
				aard_secondary_sword_7().StopEffect('blood_trail_horseriding');
				aard_secondary_sword_7().StopEffect('blood_trail_finisher');
				aard_secondary_sword_7().StopEffect('fast_trail_blood_fx');
				aard_secondary_sword_7().StopEffect('weapon_blood');
				aard_secondary_sword_7().StopEffect('weapon_blood_stage1');
				aard_secondary_sword_7().StopEffect('weapon_blood_stage2');

				aard_secondary_sword_8().StopEffect('default_blood_trail');
				aard_secondary_sword_8().StopEffect('cutscene_blood_trail');
				aard_secondary_sword_8().StopEffect('blood_trail_horseriding');
				aard_secondary_sword_8().StopEffect('blood_trail_finisher');
				aard_secondary_sword_8().StopEffect('fast_trail_blood_fx');
				aard_secondary_sword_8().StopEffect('weapon_blood');
				aard_secondary_sword_8().StopEffect('weapon_blood_stage1');
				aard_secondary_sword_8().StopEffect('weapon_blood_stage2');

				/*
				ACSGetEquippedSword().StopEffect('default_blood_trail');
				ACSGetEquippedSword().StopEffect('cutscene_blood_trail');
				ACSGetEquippedSword().StopEffect('blood_trail_horseriding');
				ACSGetEquippedSword().StopEffect('blood_trail_finisher');
				ACSGetEquippedSword().StopEffect('fast_trail_blood_fx');
				ACSGetEquippedSword().StopEffect('weapon_blood');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage1');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage2');

				ACSGetEquippedSword().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				*/

				aard_secondary_sword_1().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//aard_secondary_sword_2().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//aard_secondary_sword_3().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//aard_secondary_sword_4().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//aard_secondary_sword_5().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//aard_secondary_sword_6().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//aard_secondary_sword_7().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//aard_secondary_sword_8().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			}
			else if (ACS_GetWeaponMode() == 3)
			{
				ACSGetEquippedSword().StopEffect('default_blood_trail');
				ACSGetEquippedSword().StopEffect('cutscene_blood_trail');
				ACSGetEquippedSword().StopEffect('blood_trail_horseriding');
				ACSGetEquippedSword().StopEffect('blood_trail_finisher');
				ACSGetEquippedSword().StopEffect('fast_trail_blood_fx');
				ACSGetEquippedSword().StopEffect('weapon_blood');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage1');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage2');

				ACSGetEquippedSword().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			}
		}
		else if (thePlayer.HasTag('yrden_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_1().PlayEffectSingle('aerondight_blood_red');

			ACS_Sword_Trail_2().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_2().PlayEffectSingle('aerondight_blood_red');

			ACS_Sword_Trail_3().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_3().PlayEffectSingle('aerondight_blood_red');

			ACS_Sword_Trail_4().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_4().PlayEffectSingle('aerondight_blood_red');

			if (ACS_GetWeaponMode() == 0
			|| ACS_GetWeaponMode() == 1
			|| ACS_GetWeaponMode() == 2
			)
			{
				yrden_sword_1().StopEffect('default_blood_trail');
				yrden_sword_1().StopEffect('cutscene_blood_trail');
				yrden_sword_1().StopEffect('blood_trail_horseriding');
				yrden_sword_1().StopEffect('blood_trail_finisher');
				yrden_sword_1().StopEffect('fast_trail_blood_fx');
				yrden_sword_1().StopEffect('weapon_blood');
				yrden_sword_1().StopEffect('weapon_blood_stage1');
				yrden_sword_1().StopEffect('weapon_blood_stage2');

				yrden_sword_2().StopEffect('default_blood_trail');
				yrden_sword_2().StopEffect('cutscene_blood_trail');
				yrden_sword_2().StopEffect('blood_trail_horseriding');
				yrden_sword_2().StopEffect('blood_trail_finisher');
				yrden_sword_2().StopEffect('fast_trail_blood_fx');
				yrden_sword_2().StopEffect('weapon_blood');
				yrden_sword_2().StopEffect('weapon_blood_stage1');
				yrden_sword_2().StopEffect('weapon_blood_stage2');

				yrden_sword_3().StopEffect('default_blood_trail');
				yrden_sword_3().StopEffect('cutscene_blood_trail');
				yrden_sword_3().StopEffect('blood_trail_horseriding');
				yrden_sword_3().StopEffect('blood_trail_finisher');
				yrden_sword_3().StopEffect('fast_trail_blood_fx');
				yrden_sword_3().StopEffect('weapon_blood');
				yrden_sword_3().StopEffect('weapon_blood_stage1');
				yrden_sword_3().StopEffect('weapon_blood_stage2');

				yrden_sword_4().StopEffect('default_blood_trail');
				yrden_sword_4().StopEffect('cutscene_blood_trail');
				yrden_sword_4().StopEffect('blood_trail_horseriding');
				yrden_sword_4().StopEffect('blood_trail_finisher');
				yrden_sword_4().StopEffect('fast_trail_blood_fx');
				yrden_sword_4().StopEffect('weapon_blood');
				yrden_sword_4().StopEffect('weapon_blood_stage1');
				yrden_sword_4().StopEffect('weapon_blood_stage2');

				yrden_sword_5().StopEffect('default_blood_trail');
				yrden_sword_5().StopEffect('cutscene_blood_trail');
				yrden_sword_5().StopEffect('blood_trail_horseriding');
				yrden_sword_5().StopEffect('blood_trail_finisher');
				yrden_sword_5().StopEffect('fast_trail_blood_fx');
				yrden_sword_5().StopEffect('weapon_blood');
				yrden_sword_5().StopEffect('weapon_blood_stage1');
				yrden_sword_5().StopEffect('weapon_blood_stage2');

				yrden_sword_6().StopEffect('default_blood_trail');
				yrden_sword_6().StopEffect('cutscene_blood_trail');
				yrden_sword_6().StopEffect('blood_trail_horseriding');
				yrden_sword_6().StopEffect('blood_trail_finisher');
				yrden_sword_6().StopEffect('fast_trail_blood_fx');
				yrden_sword_6().StopEffect('weapon_blood');
				yrden_sword_6().StopEffect('weapon_blood_stage1');
				yrden_sword_6().StopEffect('weapon_blood_stage2');

				yrden_sword_7().StopEffect('default_blood_trail');
				yrden_sword_7().StopEffect('cutscene_blood_trail');
				yrden_sword_7().StopEffect('blood_trail_horseriding');
				yrden_sword_7().StopEffect('blood_trail_finisher');
				yrden_sword_7().StopEffect('fast_trail_blood_fx');
				yrden_sword_7().StopEffect('weapon_blood');
				yrden_sword_7().StopEffect('weapon_blood_stage1');
				yrden_sword_7().StopEffect('weapon_blood_stage2');

				yrden_sword_8().StopEffect('default_blood_trail');
				yrden_sword_8().StopEffect('cutscene_blood_trail');
				yrden_sword_8().StopEffect('blood_trail_horseriding');
				yrden_sword_8().StopEffect('blood_trail_finisher');
				yrden_sword_8().StopEffect('fast_trail_blood_fx');
				yrden_sword_8().StopEffect('weapon_blood');
				yrden_sword_8().StopEffect('weapon_blood_stage1');
				yrden_sword_8().StopEffect('weapon_blood_stage2');

				/*
				ACSGetEquippedSword().StopEffect('default_blood_trail');
				ACSGetEquippedSword().StopEffect('cutscene_blood_trail');
				ACSGetEquippedSword().StopEffect('blood_trail_horseriding');
				ACSGetEquippedSword().StopEffect('blood_trail_finisher');
				ACSGetEquippedSword().StopEffect('fast_trail_blood_fx');
				ACSGetEquippedSword().StopEffect('weapon_blood');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage1');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage2');

				ACSGetEquippedSword().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				*/

				yrden_sword_1().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				yrden_sword_2().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				yrden_sword_3().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				yrden_sword_4().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				yrden_sword_5().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				yrden_sword_6().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				yrden_sword_7().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				yrden_sword_8().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			}
			else if (ACS_GetWeaponMode() == 3)
			{
				ACSGetEquippedSword().StopEffect('default_blood_trail');
				ACSGetEquippedSword().StopEffect('cutscene_blood_trail');
				ACSGetEquippedSword().StopEffect('blood_trail_horseriding');
				ACSGetEquippedSword().StopEffect('blood_trail_finisher');
				ACSGetEquippedSword().StopEffect('fast_trail_blood_fx');
				ACSGetEquippedSword().StopEffect('weapon_blood');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage1');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage2');

				ACSGetEquippedSword().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			}
		}
		else if (thePlayer.HasTag('yrden_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_1().PlayEffectSingle('aerondight_blood_red');

			ACS_Sword_Trail_2().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_2().PlayEffectSingle('aerondight_blood_red');

			ACS_Sword_Trail_3().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_3().PlayEffectSingle('aerondight_blood_red');

			if (ACS_GetWeaponMode() == 0
			|| ACS_GetWeaponMode() == 1
			|| ACS_GetWeaponMode() == 2
			)
			{
				yrden_secondary_sword_1().StopEffect('default_blood_trail');
				yrden_secondary_sword_1().StopEffect('cutscene_blood_trail');
				yrden_secondary_sword_1().StopEffect('blood_trail_horseriding');
				yrden_secondary_sword_1().StopEffect('blood_trail_finisher');
				yrden_secondary_sword_1().StopEffect('fast_trail_blood_fx');
				yrden_secondary_sword_1().StopEffect('weapon_blood');
				yrden_secondary_sword_1().StopEffect('weapon_blood_stage1');
				yrden_secondary_sword_1().StopEffect('weapon_blood_stage2');

				yrden_secondary_sword_2().StopEffect('default_blood_trail');
				yrden_secondary_sword_2().StopEffect('cutscene_blood_trail');
				yrden_secondary_sword_2().StopEffect('blood_trail_horseriding');
				yrden_secondary_sword_2().StopEffect('blood_trail_finisher');
				yrden_secondary_sword_2().StopEffect('fast_trail_blood_fx');
				yrden_secondary_sword_2().StopEffect('weapon_blood');
				yrden_secondary_sword_2().StopEffect('weapon_blood_stage1');
				yrden_secondary_sword_2().StopEffect('weapon_blood_stage2');

				yrden_secondary_sword_3().StopEffect('default_blood_trail');
				yrden_secondary_sword_3().StopEffect('cutscene_blood_trail');
				yrden_secondary_sword_3().StopEffect('blood_trail_horseriding');
				yrden_secondary_sword_3().StopEffect('blood_trail_finisher');
				yrden_secondary_sword_3().StopEffect('fast_trail_blood_fx');
				yrden_secondary_sword_3().StopEffect('weapon_blood');
				yrden_secondary_sword_3().StopEffect('weapon_blood_stage1');
				yrden_secondary_sword_3().StopEffect('weapon_blood_stage2');

				yrden_secondary_sword_4().StopEffect('default_blood_trail');
				yrden_secondary_sword_4().StopEffect('cutscene_blood_trail');
				yrden_secondary_sword_4().StopEffect('blood_trail_horseriding');
				yrden_secondary_sword_4().StopEffect('blood_trail_finisher');
				yrden_secondary_sword_4().StopEffect('fast_trail_blood_fx');
				yrden_secondary_sword_4().StopEffect('weapon_blood');
				yrden_secondary_sword_4().StopEffect('weapon_blood_stage1');
				yrden_secondary_sword_4().StopEffect('weapon_blood_stage2');

				yrden_secondary_sword_5().StopEffect('default_blood_trail');
				yrden_secondary_sword_5().StopEffect('cutscene_blood_trail');
				yrden_secondary_sword_5().StopEffect('blood_trail_horseriding');
				yrden_secondary_sword_5().StopEffect('blood_trail_finisher');
				yrden_secondary_sword_5().StopEffect('fast_trail_blood_fx');
				yrden_secondary_sword_5().StopEffect('weapon_blood');
				yrden_secondary_sword_5().StopEffect('weapon_blood_stage1');
				yrden_secondary_sword_5().StopEffect('weapon_blood_stage2');

				yrden_secondary_sword_6().StopEffect('default_blood_trail');
				yrden_secondary_sword_6().StopEffect('cutscene_blood_trail');
				yrden_secondary_sword_6().StopEffect('blood_trail_horseriding');
				yrden_secondary_sword_6().StopEffect('blood_trail_finisher');
				yrden_secondary_sword_6().StopEffect('fast_trail_blood_fx');
				yrden_secondary_sword_6().StopEffect('weapon_blood');
				yrden_secondary_sword_6().StopEffect('weapon_blood_stage1');
				yrden_secondary_sword_6().StopEffect('weapon_blood_stage2');

				/*
				ACSGetEquippedSword().StopEffect('default_blood_trail');
				ACSGetEquippedSword().StopEffect('cutscene_blood_trail');
				ACSGetEquippedSword().StopEffect('blood_trail_horseriding');
				ACSGetEquippedSword().StopEffect('blood_trail_finisher');
				ACSGetEquippedSword().StopEffect('fast_trail_blood_fx');
				ACSGetEquippedSword().StopEffect('weapon_blood');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage1');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage2');

				ACSGetEquippedSword().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				*/

				yrden_secondary_sword_1().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				yrden_secondary_sword_2().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				yrden_secondary_sword_3().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				yrden_secondary_sword_4().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				yrden_secondary_sword_5().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				yrden_secondary_sword_6().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			}
			else if (ACS_GetWeaponMode() == 3)
			{
				ACSGetEquippedSword().StopEffect('default_blood_trail');
				ACSGetEquippedSword().StopEffect('cutscene_blood_trail');
				ACSGetEquippedSword().StopEffect('blood_trail_horseriding');
				ACSGetEquippedSword().StopEffect('blood_trail_finisher');
				ACSGetEquippedSword().StopEffect('fast_trail_blood_fx');
				ACSGetEquippedSword().StopEffect('weapon_blood');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage1');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage2');

				ACSGetEquippedSword().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			}
		}
		else if (thePlayer.HasTag('igni_sword_equipped')
		|| thePlayer.HasTag('igni_secondary_sword_equipped')
		|| thePlayer.HasTag('igni_sword_equipped_TAG')
		|| thePlayer.HasTag('igni_secondary_sword_equipped_TAG')
		)
		{
			ACS_Sword_Trail_3().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_3().PlayEffectSingle('aerondight_blood_red');

			ACSGetEquippedSword().StopEffect('default_blood_trail');
			ACSGetEquippedSword().StopEffect('cutscene_blood_trail');
			ACSGetEquippedSword().StopEffect('blood_trail_horseriding');
			ACSGetEquippedSword().StopEffect('blood_trail_finisher');
			ACSGetEquippedSword().StopEffect('fast_trail_blood_fx');
			ACSGetEquippedSword().StopEffect('weapon_blood');
			ACSGetEquippedSword().StopEffect('weapon_blood_stage1');
			ACSGetEquippedSword().StopEffect('weapon_blood_stage2');

			ACSGetEquippedSword().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
		}
	}

	function green_weapon_blood_fx()
	{
		ACS_Sword_Trail_1().StopEffect('aerondight_blood_green');
		ACS_Sword_Trail_1().PlayEffectSingle('aerondight_blood_green');
		ACS_Sword_Trail_1().PlayEffectSingle('aerondight_blood_green');
		ACS_Sword_Trail_1().PlayEffectSingle('aerondight_blood_green');

		ACS_Sword_Trail_2().StopEffect('aerondight_blood_green');
		ACS_Sword_Trail_2().PlayEffectSingle('aerondight_blood_green');
		ACS_Sword_Trail_2().PlayEffectSingle('aerondight_blood_green');
		ACS_Sword_Trail_2().PlayEffectSingle('aerondight_blood_green');

		ACS_Sword_Trail_3().StopEffect('aerondight_blood_green');
		ACS_Sword_Trail_3().PlayEffectSingle('aerondight_blood_green');
		ACS_Sword_Trail_3().PlayEffectSingle('aerondight_blood_green');
		ACS_Sword_Trail_3().PlayEffectSingle('aerondight_blood_green');

		ACS_Sword_Trail_4().StopEffect('aerondight_blood_green');
		ACS_Sword_Trail_4().PlayEffectSingle('aerondight_blood_green');
		ACS_Sword_Trail_4().PlayEffectSingle('aerondight_blood_green');
		ACS_Sword_Trail_4().PlayEffectSingle('aerondight_blood_green');

		ACS_Sword_Trail_5().StopEffect('aerondight_blood_green');
		ACS_Sword_Trail_5().PlayEffectSingle('aerondight_blood_green');
		ACS_Sword_Trail_5().PlayEffectSingle('aerondight_blood_green');
		ACS_Sword_Trail_5().PlayEffectSingle('aerondight_blood_green');

		ACS_Sword_Trail_6().StopEffect('aerondight_blood_green');
		ACS_Sword_Trail_6().PlayEffectSingle('aerondight_blood_green');
		ACS_Sword_Trail_6().PlayEffectSingle('aerondight_blood_green');
		ACS_Sword_Trail_6().PlayEffectSingle('aerondight_blood_green');

		ACS_Sword_Trail_7().StopEffect('aerondight_blood_green');
		ACS_Sword_Trail_7().PlayEffectSingle('aerondight_blood_green');
		ACS_Sword_Trail_7().PlayEffectSingle('aerondight_blood_green');
		ACS_Sword_Trail_7().PlayEffectSingle('aerondight_blood_green');

		ACS_Sword_Trail_8().StopEffect('aerondight_blood_green');
		ACS_Sword_Trail_8().PlayEffectSingle('aerondight_blood_green');
		ACS_Sword_Trail_8().PlayEffectSingle('aerondight_blood_green');
		ACS_Sword_Trail_8().PlayEffectSingle('aerondight_blood_green');
	}

	function black_weapon_blood_fx()
	{
		ACS_Sword_Trail_1().StopEffect('aerondight_blood_black');
		ACS_Sword_Trail_1().PlayEffectSingle('aerondight_blood_black');
		ACS_Sword_Trail_1().PlayEffectSingle('aerondight_blood_black');
		ACS_Sword_Trail_1().PlayEffectSingle('aerondight_blood_black');

		ACS_Sword_Trail_2().StopEffect('aerondight_blood_black');
		ACS_Sword_Trail_2().PlayEffectSingle('aerondight_blood_black');
		ACS_Sword_Trail_2().PlayEffectSingle('aerondight_blood_black');
		ACS_Sword_Trail_2().PlayEffectSingle('aerondight_blood_black');

		ACS_Sword_Trail_3().StopEffect('aerondight_blood_black');
		ACS_Sword_Trail_3().PlayEffectSingle('aerondight_blood_black');
		ACS_Sword_Trail_3().PlayEffectSingle('aerondight_blood_black');
		ACS_Sword_Trail_3().PlayEffectSingle('aerondight_blood_black');

		ACS_Sword_Trail_4().StopEffect('aerondight_blood_black');
		ACS_Sword_Trail_4().PlayEffectSingle('aerondight_blood_black');
		ACS_Sword_Trail_4().PlayEffectSingle('aerondight_blood_black');
		ACS_Sword_Trail_4().PlayEffectSingle('aerondight_blood_black');

		ACS_Sword_Trail_5().StopEffect('aerondight_blood_black');
		ACS_Sword_Trail_5().PlayEffectSingle('aerondight_blood_black');
		ACS_Sword_Trail_5().PlayEffectSingle('aerondight_blood_black');
		ACS_Sword_Trail_5().PlayEffectSingle('aerondight_blood_black');

		ACS_Sword_Trail_6().StopEffect('aerondight_blood_black');
		ACS_Sword_Trail_6().PlayEffectSingle('aerondight_blood_black');
		ACS_Sword_Trail_6().PlayEffectSingle('aerondight_blood_black');
		ACS_Sword_Trail_6().PlayEffectSingle('aerondight_blood_black');

		ACS_Sword_Trail_7().StopEffect('aerondight_blood_black');
		ACS_Sword_Trail_7().PlayEffectSingle('aerondight_blood_black');
		ACS_Sword_Trail_7().PlayEffectSingle('aerondight_blood_black');
		ACS_Sword_Trail_7().PlayEffectSingle('aerondight_blood_black');

		ACS_Sword_Trail_8().StopEffect('aerondight_blood_black');
		ACS_Sword_Trail_8().PlayEffectSingle('aerondight_blood_black');
		ACS_Sword_Trail_8().PlayEffectSingle('aerondight_blood_black');
		ACS_Sword_Trail_8().PlayEffectSingle('aerondight_blood_black');
	}

	function yellow_weapon_blood_fx()
	{
		ACS_Sword_Trail_1().StopEffect('aerondight_blood_yellow');
		ACS_Sword_Trail_1().PlayEffectSingle('aerondight_blood_yellow');
		ACS_Sword_Trail_1().PlayEffectSingle('aerondight_blood_yellow');
		ACS_Sword_Trail_1().PlayEffectSingle('aerondight_blood_yellow');

		ACS_Sword_Trail_2().StopEffect('aerondight_blood_yellow');
		ACS_Sword_Trail_2().PlayEffectSingle('aerondight_blood_yellow');
		ACS_Sword_Trail_2().PlayEffectSingle('aerondight_blood_yellow');
		ACS_Sword_Trail_2().PlayEffectSingle('aerondight_blood_yellow');

		ACS_Sword_Trail_3().StopEffect('aerondight_blood_yellow');
		ACS_Sword_Trail_3().PlayEffectSingle('aerondight_blood_yellow');
		ACS_Sword_Trail_3().PlayEffectSingle('aerondight_blood_yellow');
		ACS_Sword_Trail_3().PlayEffectSingle('aerondight_blood_yellow');

		ACS_Sword_Trail_4().StopEffect('aerondight_blood_yellow');
		ACS_Sword_Trail_4().PlayEffectSingle('aerondight_blood_yellow');
		ACS_Sword_Trail_4().PlayEffectSingle('aerondight_blood_yellow');
		ACS_Sword_Trail_4().PlayEffectSingle('aerondight_blood_yellow');

		ACS_Sword_Trail_5().StopEffect('aerondight_blood_yellow');
		ACS_Sword_Trail_5().PlayEffectSingle('aerondight_blood_yellow');
		ACS_Sword_Trail_5().PlayEffectSingle('aerondight_blood_yellow');
		ACS_Sword_Trail_5().PlayEffectSingle('aerondight_blood_yellow');

		ACS_Sword_Trail_6().StopEffect('aerondight_blood_yellow');
		ACS_Sword_Trail_6().PlayEffectSingle('aerondight_blood_yellow');
		ACS_Sword_Trail_6().PlayEffectSingle('aerondight_blood_yellow');
		ACS_Sword_Trail_6().PlayEffectSingle('aerondight_blood_yellow');

		ACS_Sword_Trail_7().StopEffect('aerondight_blood_yellow');
		ACS_Sword_Trail_7().PlayEffectSingle('aerondight_blood_yellow');
		ACS_Sword_Trail_7().PlayEffectSingle('aerondight_blood_yellow');
		ACS_Sword_Trail_7().PlayEffectSingle('aerondight_blood_yellow');

		ACS_Sword_Trail_8().StopEffect('aerondight_blood_yellow');
		ACS_Sword_Trail_8().PlayEffectSingle('aerondight_blood_yellow');
		ACS_Sword_Trail_8().PlayEffectSingle('aerondight_blood_yellow');
		ACS_Sword_Trail_8().PlayEffectSingle('aerondight_blood_yellow');
	}
	
	function aerondight_sword_trail()
	{
		if (ACS_IconicSwordVFXOff_Enabled())
		{
			return;
		}

		if (thePlayer.HasTag('quen_sword_equipped'))
		{
			ACS_Sword_Trail_2().StopEffect('charge_10');
			ACS_Sword_Trail_2().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_2().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_2().PlayEffectSingle('aerondight_special_trail');
		}
		else if (thePlayer.HasTag('axii_sword_equipped'))
		{
			ACS_Sword_Trail_2().StopEffect('charge_10');
			ACS_Sword_Trail_2().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_2().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_2().PlayEffectSingle('aerondight_special_trail');
		}
		else if (thePlayer.HasTag('aard_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_1().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_2().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_2().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_3().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_3().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_4().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_4().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_5().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_5().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_6().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_6().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_7().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_7().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_8().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_8().PlayEffectSingle('aerondight_special_trail');


			ACS_Sword_Trail_1().StopEffect('charge_10');
			ACS_Sword_Trail_1().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_2().StopEffect('charge_10');
			ACS_Sword_Trail_2().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_3().StopEffect('charge_10');
			ACS_Sword_Trail_3().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_4().StopEffect('charge_10');
			ACS_Sword_Trail_4().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_5().StopEffect('charge_10');
			ACS_Sword_Trail_5().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_6().StopEffect('charge_10');
			ACS_Sword_Trail_6().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_7().StopEffect('charge_10');
			ACS_Sword_Trail_7().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_8().StopEffect('charge_10');
			ACS_Sword_Trail_8().PlayEffectSingle('charge_10');
		}
		else if (thePlayer.HasTag('yrden_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_1().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_2().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_2().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_3().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_3().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_4().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_4().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_5().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_5().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_6().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_6().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_7().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_7().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_8().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_8().PlayEffectSingle('aerondight_special_trail');


			ACS_Sword_Trail_1().StopEffect('charge_10');
			ACS_Sword_Trail_1().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_2().StopEffect('charge_10');
			ACS_Sword_Trail_2().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_3().StopEffect('charge_10');
			ACS_Sword_Trail_3().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_4().StopEffect('charge_10');
			ACS_Sword_Trail_4().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_5().StopEffect('charge_10');
			ACS_Sword_Trail_5().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_6().StopEffect('charge_10');
			ACS_Sword_Trail_6().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_7().StopEffect('charge_10');
			ACS_Sword_Trail_7().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_8().StopEffect('charge_10');
			ACS_Sword_Trail_8().PlayEffectSingle('charge_10');
		}
		else if (thePlayer.HasTag('quen_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_1().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_2().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_2().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_3().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_3().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_4().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_4().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_5().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_5().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_6().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_6().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_7().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_7().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_8().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_8().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_1().StopEffect('charge_10');
			ACS_Sword_Trail_1().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_2().StopEffect('charge_10');
			ACS_Sword_Trail_2().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_3().StopEffect('charge_10');
			ACS_Sword_Trail_3().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_4().StopEffect('charge_10');
			ACS_Sword_Trail_4().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_5().StopEffect('charge_10');
			ACS_Sword_Trail_5().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_6().StopEffect('charge_10');
			ACS_Sword_Trail_6().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_7().StopEffect('charge_10');
			ACS_Sword_Trail_7().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_8().StopEffect('charge_10');
			ACS_Sword_Trail_8().PlayEffectSingle('charge_10');
		}
		else if (thePlayer.HasTag('axii_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_3().StopEffect('charge_10');
			ACS_Sword_Trail_3().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_3().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_3().PlayEffectSingle('aerondight_special_trail');
		}
		else if (thePlayer.HasTag('aard_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_1().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_2().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_2().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_3().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_3().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_4().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_4().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_5().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_5().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_6().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_6().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_7().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_7().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_8().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_8().PlayEffectSingle('aerondight_special_trail');


			ACS_Sword_Trail_1().StopEffect('charge_10');
			ACS_Sword_Trail_1().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_2().StopEffect('charge_10');
			ACS_Sword_Trail_2().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_3().StopEffect('charge_10');
			ACS_Sword_Trail_3().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_4().StopEffect('charge_10');
			ACS_Sword_Trail_4().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_5().StopEffect('charge_10');
			ACS_Sword_Trail_5().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_6().StopEffect('charge_10');
			ACS_Sword_Trail_6().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_7().StopEffect('charge_10');
			ACS_Sword_Trail_7().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_8().StopEffect('charge_10');
			ACS_Sword_Trail_8().PlayEffectSingle('charge_10');
		}
		else if (thePlayer.HasTag('yrden_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_1().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_2().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_2().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_3().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_3().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_4().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_4().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_5().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_5().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_6().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_6().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_7().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_7().PlayEffectSingle('aerondight_special_trail');

			ACS_Sword_Trail_8().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_8().PlayEffectSingle('aerondight_special_trail');


			ACS_Sword_Trail_1().StopEffect('charge_10');
			ACS_Sword_Trail_1().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_2().StopEffect('charge_10');
			ACS_Sword_Trail_2().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_3().StopEffect('charge_10');
			ACS_Sword_Trail_3().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_4().StopEffect('charge_10');
			ACS_Sword_Trail_4().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_5().StopEffect('charge_10');
			ACS_Sword_Trail_5().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_6().StopEffect('charge_10');
			ACS_Sword_Trail_6().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_7().StopEffect('charge_10');
			ACS_Sword_Trail_7().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_8().StopEffect('charge_10');
			ACS_Sword_Trail_8().PlayEffectSingle('charge_10');
		}
		else if (
		thePlayer.HasTag('igni_secondary_sword_equipped')
		|| thePlayer.HasTag('igni_sword_equipped'))
		{
			//ACS_Sword_Trail_1().StopEffect('aerondight_glow_sword');

			if (ACS_GetItem_Aerondight_Steel_Held())
			{
				ACS_Sword_Trail_1().PlayEffectSingle('aerondight_glow_sword_steel');
				ACS_Sword_Trail_1().StopEffect('aerondight_glow_sword_steel');
			}
			else if (ACS_GetItem_Aerondight_Silver_Held())
			{
				ACS_Sword_Trail_1().PlayEffectSingle('aerondight_glow_sword');
				ACS_Sword_Trail_1().StopEffect('aerondight_glow_sword');
			}
			
			//ACS_Sword_Trail_1().StopEffect('aerondight_glow_sword_orig');
			//ACS_Sword_Trail_1().PlayEffectSingle('aerondight_glow_sword_orig');
			//ACS_Sword_Trail_1().StopEffect('aerondight_glow_sword_orig');

			ACS_Sword_Trail_2().StopEffect('charge_10');
			ACS_Sword_Trail_2().PlayEffectSingle('charge_10');

			ACS_Sword_Trail_2().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_2().PlayEffectSingle('aerondight_special_trail');
		}
	}

	function iris_sword_trail()
	{
		if (ACS_IconicSwordVFXOff_Enabled())
		{
			return;
		}

		if (thePlayer.HasTag('quen_sword_equipped'))
		{
			ACS_Sword_Trail_2().StopEffect('red_charge_10');
			ACS_Sword_Trail_2().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_2().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_2().PlayEffectSingle('red_aerondight_special_trail');
		}
		else if (thePlayer.HasTag('axii_sword_equipped'))
		{
			ACS_Sword_Trail_2().StopEffect('red_charge_10');
			ACS_Sword_Trail_2().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_2().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_2().PlayEffectSingle('red_aerondight_special_trail');
		}
		else if (thePlayer.HasTag('aard_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_1().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_2().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_2().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_3().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_3().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_4().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_4().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_5().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_5().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_6().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_6().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_7().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_7().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_8().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_8().PlayEffectSingle('red_aerondight_special_trail');


			ACS_Sword_Trail_1().StopEffect('red_charge_10');
			ACS_Sword_Trail_1().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_2().StopEffect('red_charge_10');
			ACS_Sword_Trail_2().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_3().StopEffect('red_charge_10');
			ACS_Sword_Trail_3().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_4().StopEffect('red_charge_10');
			ACS_Sword_Trail_4().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_5().StopEffect('red_charge_10');
			ACS_Sword_Trail_5().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_6().StopEffect('red_charge_10');
			ACS_Sword_Trail_6().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_7().StopEffect('red_charge_10');
			ACS_Sword_Trail_7().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_8().StopEffect('red_charge_10');
			ACS_Sword_Trail_8().PlayEffectSingle('red_charge_10');
		}
		else if (thePlayer.HasTag('yrden_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_1().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_2().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_2().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_3().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_3().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_4().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_4().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_5().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_5().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_6().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_6().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_7().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_7().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_8().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_8().PlayEffectSingle('red_aerondight_special_trail');


			ACS_Sword_Trail_1().StopEffect('red_charge_10');
			ACS_Sword_Trail_1().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_2().StopEffect('red_charge_10');
			ACS_Sword_Trail_2().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_3().StopEffect('red_charge_10');
			ACS_Sword_Trail_3().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_4().StopEffect('red_charge_10');
			ACS_Sword_Trail_4().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_5().StopEffect('red_charge_10');
			ACS_Sword_Trail_5().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_6().StopEffect('red_charge_10');
			ACS_Sword_Trail_6().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_7().StopEffect('red_charge_10');
			ACS_Sword_Trail_7().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_8().StopEffect('red_charge_10');
			ACS_Sword_Trail_8().PlayEffectSingle('red_charge_10');
		}
		else if (thePlayer.HasTag('quen_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_1().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_2().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_2().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_3().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_3().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_4().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_4().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_5().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_5().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_6().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_6().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_7().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_7().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_8().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_8().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_1().StopEffect('red_charge_10');
			ACS_Sword_Trail_1().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_2().StopEffect('red_charge_10');
			ACS_Sword_Trail_2().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_3().StopEffect('red_charge_10');
			ACS_Sword_Trail_3().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_4().StopEffect('red_charge_10');
			ACS_Sword_Trail_4().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_5().StopEffect('red_charge_10');
			ACS_Sword_Trail_5().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_6().StopEffect('red_charge_10');
			ACS_Sword_Trail_6().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_7().StopEffect('red_charge_10');
			ACS_Sword_Trail_7().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_8().StopEffect('red_charge_10');
			ACS_Sword_Trail_8().PlayEffectSingle('red_charge_10');
		}
		else if (thePlayer.HasTag('axii_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_3().StopEffect('red_charge_10');
			ACS_Sword_Trail_3().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_3().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_3().PlayEffectSingle('red_aerondight_special_trail');
		}
		else if (thePlayer.HasTag('aard_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_1().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_2().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_2().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_3().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_3().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_4().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_4().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_5().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_5().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_6().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_6().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_7().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_7().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_8().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_8().PlayEffectSingle('red_aerondight_special_trail');


			ACS_Sword_Trail_1().StopEffect('red_charge_10');
			ACS_Sword_Trail_1().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_2().StopEffect('red_charge_10');
			ACS_Sword_Trail_2().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_3().StopEffect('red_charge_10');
			ACS_Sword_Trail_3().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_4().StopEffect('red_charge_10');
			ACS_Sword_Trail_4().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_5().StopEffect('red_charge_10');
			ACS_Sword_Trail_5().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_6().StopEffect('red_charge_10');
			ACS_Sword_Trail_6().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_7().StopEffect('red_charge_10');
			ACS_Sword_Trail_7().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_8().StopEffect('red_charge_10');
			ACS_Sword_Trail_8().PlayEffectSingle('red_charge_10');
		}
		else if (thePlayer.HasTag('yrden_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_1().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_2().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_2().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_3().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_3().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_4().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_4().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_5().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_5().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_6().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_6().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_7().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_7().PlayEffectSingle('red_aerondight_special_trail');

			ACS_Sword_Trail_8().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_8().PlayEffectSingle('red_aerondight_special_trail');


			ACS_Sword_Trail_1().StopEffect('red_charge_10');
			ACS_Sword_Trail_1().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_2().StopEffect('red_charge_10');
			ACS_Sword_Trail_2().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_3().StopEffect('red_charge_10');
			ACS_Sword_Trail_3().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_4().StopEffect('red_charge_10');
			ACS_Sword_Trail_4().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_5().StopEffect('red_charge_10');
			ACS_Sword_Trail_5().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_6().StopEffect('red_charge_10');
			ACS_Sword_Trail_6().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_7().StopEffect('red_charge_10');
			ACS_Sword_Trail_7().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_8().StopEffect('red_charge_10');
			ACS_Sword_Trail_8().PlayEffectSingle('red_charge_10');
		}
		else if (
		thePlayer.HasTag('igni_secondary_sword_equipped')
		|| thePlayer.HasTag('igni_sword_equipped'))
		{
			//ACS_Sword_Trail_1().PlayEffectSingle('pre_special_attack_iris');
			//ACS_Sword_Trail_1().StopEffect('pre_special_attack_iris');

			ACS_Sword_Trail_2().StopEffect('red_charge_10');
			ACS_Sword_Trail_2().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_2().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_2().PlayEffectSingle('red_aerondight_special_trail');
		}
	}

	function ACS_Armor_Ether_Sword_Trail()
	{
		if (thePlayer.HasTag('quen_sword_equipped'))
		{
			ACS_Sword_Trail_2().StopEffect('red_charge_10');
			ACS_Sword_Trail_2().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_2().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_2().PlayEffectSingle('light_trail_extended_fx_red');
		}
		else if (thePlayer.HasTag('axii_sword_equipped'))
		{
			ACS_Sword_Trail_2().StopEffect('red_charge_10');
			ACS_Sword_Trail_2().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_2().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_2().PlayEffectSingle('light_trail_extended_fx_red');
		}
		else if (thePlayer.HasTag('aard_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_1().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_2().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_2().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_3().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_3().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_4().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_4().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_5().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_5().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_6().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_6().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_7().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_7().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_8().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_8().PlayEffectSingle('light_trail_extended_fx_red');


			ACS_Sword_Trail_1().StopEffect('red_charge_10');
			ACS_Sword_Trail_1().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_2().StopEffect('red_charge_10');
			ACS_Sword_Trail_2().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_3().StopEffect('red_charge_10');
			ACS_Sword_Trail_3().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_4().StopEffect('red_charge_10');
			ACS_Sword_Trail_4().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_5().StopEffect('red_charge_10');
			ACS_Sword_Trail_5().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_6().StopEffect('red_charge_10');
			ACS_Sword_Trail_6().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_7().StopEffect('red_charge_10');
			ACS_Sword_Trail_7().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_8().StopEffect('red_charge_10');
			ACS_Sword_Trail_8().PlayEffectSingle('red_charge_10');
		}
		else if (thePlayer.HasTag('yrden_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_1().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_2().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_2().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_3().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_3().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_4().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_4().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_5().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_5().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_6().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_6().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_7().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_7().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_8().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_8().PlayEffectSingle('light_trail_extended_fx_red');


			ACS_Sword_Trail_1().StopEffect('red_charge_10');
			ACS_Sword_Trail_1().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_2().StopEffect('red_charge_10');
			ACS_Sword_Trail_2().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_3().StopEffect('red_charge_10');
			ACS_Sword_Trail_3().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_4().StopEffect('red_charge_10');
			ACS_Sword_Trail_4().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_5().StopEffect('red_charge_10');
			ACS_Sword_Trail_5().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_6().StopEffect('red_charge_10');
			ACS_Sword_Trail_6().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_7().StopEffect('red_charge_10');
			ACS_Sword_Trail_7().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_8().StopEffect('red_charge_10');
			ACS_Sword_Trail_8().PlayEffectSingle('red_charge_10');
		}
		else if (thePlayer.HasTag('quen_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_1().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_2().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_2().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_3().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_3().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_4().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_4().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_5().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_5().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_6().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_6().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_7().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_7().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_8().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_8().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_1().StopEffect('red_charge_10');
			ACS_Sword_Trail_1().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_2().StopEffect('red_charge_10');
			ACS_Sword_Trail_2().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_3().StopEffect('red_charge_10');
			ACS_Sword_Trail_3().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_4().StopEffect('red_charge_10');
			ACS_Sword_Trail_4().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_5().StopEffect('red_charge_10');
			ACS_Sword_Trail_5().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_6().StopEffect('red_charge_10');
			ACS_Sword_Trail_6().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_7().StopEffect('red_charge_10');
			ACS_Sword_Trail_7().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_8().StopEffect('red_charge_10');
			ACS_Sword_Trail_8().PlayEffectSingle('red_charge_10');
		}
		else if (thePlayer.HasTag('axii_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_3().StopEffect('red_charge_10');
			ACS_Sword_Trail_3().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_3().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_3().PlayEffectSingle('light_trail_extended_fx_red');
		}
		else if (thePlayer.HasTag('aard_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_1().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_2().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_2().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_3().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_3().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_4().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_4().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_5().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_5().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_6().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_6().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_7().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_7().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_8().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_8().PlayEffectSingle('light_trail_extended_fx_red');


			ACS_Sword_Trail_1().StopEffect('red_charge_10');
			ACS_Sword_Trail_1().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_2().StopEffect('red_charge_10');
			ACS_Sword_Trail_2().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_3().StopEffect('red_charge_10');
			ACS_Sword_Trail_3().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_4().StopEffect('red_charge_10');
			ACS_Sword_Trail_4().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_5().StopEffect('red_charge_10');
			ACS_Sword_Trail_5().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_6().StopEffect('red_charge_10');
			ACS_Sword_Trail_6().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_7().StopEffect('red_charge_10');
			ACS_Sword_Trail_7().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_8().StopEffect('red_charge_10');
			ACS_Sword_Trail_8().PlayEffectSingle('red_charge_10');
		}
		else if (thePlayer.HasTag('yrden_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_1().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_2().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_2().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_3().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_3().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_4().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_4().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_5().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_5().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_6().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_6().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_7().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_7().PlayEffectSingle('light_trail_extended_fx_red');

			ACS_Sword_Trail_8().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_8().PlayEffectSingle('light_trail_extended_fx_red');


			ACS_Sword_Trail_1().StopEffect('red_charge_10');
			ACS_Sword_Trail_1().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_2().StopEffect('red_charge_10');
			ACS_Sword_Trail_2().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_3().StopEffect('red_charge_10');
			ACS_Sword_Trail_3().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_4().StopEffect('red_charge_10');
			ACS_Sword_Trail_4().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_5().StopEffect('red_charge_10');
			ACS_Sword_Trail_5().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_6().StopEffect('red_charge_10');
			ACS_Sword_Trail_6().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_7().StopEffect('red_charge_10');
			ACS_Sword_Trail_7().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_8().StopEffect('red_charge_10');
			ACS_Sword_Trail_8().PlayEffectSingle('red_charge_10');
		}
		else if (
		thePlayer.HasTag('igni_secondary_sword_equipped')
		|| thePlayer.HasTag('igni_sword_equipped'))
		{
			//ACS_Sword_Trail_1().PlayEffectSingle('pre_special_attack_iris');
			//ACS_Sword_Trail_1().StopEffect('pre_special_attack_iris');

			ACS_Sword_Trail_2().StopEffect('red_charge_10');
			ACS_Sword_Trail_2().PlayEffectSingle('red_charge_10');

			ACS_Sword_Trail_2().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_2().PlayEffectSingle('light_trail_extended_fx_red');
		}
	}

	function ciri_sword_trail()
	{
		if (thePlayer.HasTag('quen_sword_equipped'))
		{
			ACS_Sword_Trail_2().StopEffect('fury_trail');
			ACS_Sword_Trail_2().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_2().StopEffect('fury_trail');
			ACS_Sword_Trail_2().PlayEffectSingle('fury_trail');
		}
		else if (thePlayer.HasTag('axii_sword_equipped'))
		{
			ACS_Sword_Trail_2().StopEffect('fury_trail');
			ACS_Sword_Trail_2().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_2().StopEffect('fury_trail');
			ACS_Sword_Trail_2().PlayEffectSingle('fury_trail');
		}
		else if (thePlayer.HasTag('aard_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('fury_trail');
			ACS_Sword_Trail_1().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_2().StopEffect('fury_trail');
			ACS_Sword_Trail_2().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_3().StopEffect('fury_trail');
			ACS_Sword_Trail_3().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_4().StopEffect('fury_trail');
			ACS_Sword_Trail_4().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_5().StopEffect('fury_trail');
			ACS_Sword_Trail_5().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_6().StopEffect('fury_trail');
			ACS_Sword_Trail_6().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_7().StopEffect('fury_trail');
			ACS_Sword_Trail_7().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_8().StopEffect('fury_trail');
			ACS_Sword_Trail_8().PlayEffectSingle('fury_trail');
		}
		else if (thePlayer.HasTag('yrden_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('fury_trail');
			ACS_Sword_Trail_1().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_2().StopEffect('fury_trail');
			ACS_Sword_Trail_2().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_3().StopEffect('fury_trail');
			ACS_Sword_Trail_3().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_4().StopEffect('fury_trail');
			ACS_Sword_Trail_4().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_5().StopEffect('fury_trail');
			ACS_Sword_Trail_5().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_6().StopEffect('fury_trail');
			ACS_Sword_Trail_6().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_7().StopEffect('fury_trail');
			ACS_Sword_Trail_7().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_8().StopEffect('fury_trail');
			ACS_Sword_Trail_8().PlayEffectSingle('fury_trail');
		}
		else if (thePlayer.HasTag('quen_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('fury_trail');
			ACS_Sword_Trail_1().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_2().StopEffect('fury_trail');
			ACS_Sword_Trail_2().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_3().StopEffect('fury_trail');
			ACS_Sword_Trail_3().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_4().StopEffect('fury_trail');
			ACS_Sword_Trail_4().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_5().StopEffect('fury_trail');
			ACS_Sword_Trail_5().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_6().StopEffect('fury_trail');
			ACS_Sword_Trail_6().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_7().StopEffect('fury_trail');
			ACS_Sword_Trail_7().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_8().StopEffect('fury_trail');
			ACS_Sword_Trail_8().PlayEffectSingle('fury_trail');
		}
		else if (thePlayer.HasTag('axii_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_3().StopEffect('fury_trail');
			ACS_Sword_Trail_3().PlayEffectSingle('fury_trail');
		}
		else if (thePlayer.HasTag('aard_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('fury_trail');
			ACS_Sword_Trail_1().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_2().StopEffect('fury_trail');
			ACS_Sword_Trail_2().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_3().StopEffect('fury_trail');
			ACS_Sword_Trail_3().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_4().StopEffect('fury_trail');
			ACS_Sword_Trail_4().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_5().StopEffect('fury_trail');
			ACS_Sword_Trail_5().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_6().StopEffect('fury_trail');
			ACS_Sword_Trail_6().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_7().StopEffect('fury_trail');
			ACS_Sword_Trail_7().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_8().StopEffect('fury_trail');
			ACS_Sword_Trail_8().PlayEffectSingle('fury_trail');
		}
		else if (thePlayer.HasTag('yrden_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('fury_trail');
			ACS_Sword_Trail_1().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_2().StopEffect('fury_trail');
			ACS_Sword_Trail_2().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_3().StopEffect('fury_trail');
			ACS_Sword_Trail_3().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_4().StopEffect('fury_trail');
			ACS_Sword_Trail_4().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_5().StopEffect('fury_trail');
			ACS_Sword_Trail_5().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_6().StopEffect('fury_trail');
			ACS_Sword_Trail_6().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_7().StopEffect('fury_trail');
			ACS_Sword_Trail_7().PlayEffectSingle('fury_trail');

			ACS_Sword_Trail_8().StopEffect('fury_trail');
			ACS_Sword_Trail_8().PlayEffectSingle('fury_trail');
		}
		else if (
		thePlayer.HasTag('igni_secondary_sword_equipped')
		|| thePlayer.HasTag('igni_sword_equipped'))
		{
			ACS_Sword_Trail_2().StopEffect('fury_trail');
			ACS_Sword_Trail_2().PlayEffectSingle('fury_trail');
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function VampVoiceEffects_Effort()
	{
		vamp_sound_names.Clear();

		if (thePlayer.HasBuff(EET_BlackBlood))
		{
			vamp_sound_names.PushBack("monster_dettlaff_monster_voice_taunt_claws");
			vamp_sound_names.PushBack("monster_dettlaff_monster_voice_effort_big");
			vamp_sound_names.PushBack("monster_dettlaff_monster_voice_effort_big_short");
			vamp_sound_names.PushBack("monster_dettlaff_monster_voice_roar");
			vamp_sound_names.PushBack("monster_dettlaff_monster_voice_heavy_charge");
		}
		else
		{
			vamp_sound_names.PushBack("monster_dettlaff_vampire_voice_effort");
			//vamp_sound_names.PushBack("monster_dettlaff_vampire_voice_snarl");
			vamp_sound_names.PushBack("monster_dettlaff_vampire_voice_hiss");
		}

		if (RandF() < 0.75)
		{
			thePlayer.SoundEvent(vamp_sound_names[RandRange(vamp_sound_names.Size())]);
		}
	}

	function VampVoiceEffects_Effort_Big()
	{
		vamp_sound_names.Clear();

		if (thePlayer.HasBuff(EET_BlackBlood))
		{
			vamp_sound_names.PushBack("monster_dettlaff_monster_voice_taunt_claws");
			vamp_sound_names.PushBack("monster_dettlaff_monster_voice_effort_big");
			vamp_sound_names.PushBack("monster_dettlaff_monster_voice_effort_big_short");
			vamp_sound_names.PushBack("monster_dettlaff_monster_voice_roar");
			vamp_sound_names.PushBack("monster_dettlaff_monster_voice_heavy_charge");
		}
		else
		{
			vamp_sound_names.PushBack("monster_dettlaff_vampire_voice_effort_big");
			//vamp_sound_names.PushBack("monster_dettlaff_vampire_voice_snarl");
			vamp_sound_names.PushBack("monster_dettlaff_vampire_voice_hiss");
		}

		if (RandF() < 0.75)
		{
			thePlayer.SoundEvent(vamp_sound_names[RandRange(vamp_sound_names.Size())]);
		}
	}

	function VampVoiceEffects_Monster()
	{
		vamp_sound_names.Clear();
		vamp_sound_names.PushBack("monster_dettlaff_monster_voice_taunt_claws");
		vamp_sound_names.PushBack("monster_dettlaff_monster_voice_effort_big");
		vamp_sound_names.PushBack("monster_dettlaff_monster_voice_effort_big_short");
		vamp_sound_names.PushBack("monster_dettlaff_monster_voice_roar");
		vamp_sound_names.PushBack("monster_dettlaff_monster_voice_heavy_charge");

		if (RandF() < 0.5)
		{
			thePlayer.SoundEvent(vamp_sound_names[RandRange(vamp_sound_names.Size())]);
		}
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function Remove_On_Hit_Tags()
	{
		Remove_aard_light_attack_primer_Tags();
		Remove_aard_heavy_attack_primer_Tags();
		Remove_axii_light_attack_primer_Tags();
		Remove_axii_heavy_attack_primer_Tags();
		Remove_yrden_light_attack_primer_Tags();
		Remove_yrden_heavy_attack_primer_Tags();
		Remove_quen_light_attack_primer_Tags();
		Remove_quen_heavy_attack_primer_Tags();
		Remove_igni_light_attack_primer_Tags();
		Remove_igni_heavy_attack_primer_Tags();

		PrimerMarkDestroy();
	}

	function Remove_aard_light_attack_primer_Tags()
	{
		var actors																		: array<CActor>;
		var i 																			: int;
	
		actors.Clear();
		
		theGame.GetActorsByTag( 'aard_light_attack_primer', actors );

		if (actors.Size() <= 0)
		{
			return;
		}

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actors[i].RemoveTag('aard_light_attack_primer');
			}
		}
	}

	function Remove_aard_heavy_attack_primer_Tags()
	{
		var actors																		: array<CActor>;
		var i 																			: int;
	
		actors.Clear();
		
		theGame.GetActorsByTag( 'aard_heavy_attack_primer', actors );

		if (actors.Size() <= 0)
		{
			return;
		}

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actors[i].RemoveTag('aard_heavy_attack_primer');
			}
		}
	}

	function Remove_axii_light_attack_primer_Tags()
	{
		var actors																		: array<CActor>;
		var i 																			: int;
	
		actors.Clear();
		
		theGame.GetActorsByTag( 'axii_light_attack_primer', actors );

		if (actors.Size() <= 0)
		{
			return;
		}

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actors[i].RemoveTag('axii_light_attack_primer');
			}
		}
	}

	function Remove_axii_heavy_attack_primer_Tags()
	{
		var actors																		: array<CActor>;
		var i 																			: int;
	
		actors.Clear();
		
		theGame.GetActorsByTag( 'axii_heavy_attack_primer', actors );

		if (actors.Size() <= 0)
		{
			return;
		}

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actors[i].RemoveTag('axii_heavy_attack_primer');
			}
		}
	}

	function Remove_yrden_light_attack_primer_Tags()
	{
		var actors																		: array<CActor>;
		var i 																			: int;
	
		actors.Clear();
		
		theGame.GetActorsByTag( 'yrden_light_attack_primer', actors );

		if (actors.Size() <= 0)
		{
			return;
		}

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actors[i].RemoveTag('yrden_light_attack_primer');
			}
		}
	}

	function Remove_yrden_heavy_attack_primer_Tags()
	{
		var actors																		: array<CActor>;
		var i 																			: int;
	
		actors.Clear();
		
		theGame.GetActorsByTag( 'yrden_heavy_attack_primer', actors );

		if (actors.Size() <= 0)
		{
			return;
		}

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actors[i].RemoveTag('yrden_heavy_attack_primer');
			}
		}
	}

	function Remove_quen_light_attack_primer_Tags()
	{
		var actors																		: array<CActor>;
		var i 																			: int;
	
		actors.Clear();
		
		theGame.GetActorsByTag( 'quen_light_attack_primer', actors );

		if (actors.Size() <= 0)
		{
			return;
		}

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actors[i].RemoveTag('quen_light_attack_primer');
			}
		}
	}

	function Remove_quen_heavy_attack_primer_Tags()
	{
		var actors																		: array<CActor>;
		var i 																			: int;
	
		actors.Clear();
		
		theGame.GetActorsByTag( 'quen_heavy_attack_primer', actors );

		if (actors.Size() <= 0)
		{
			return;
		}

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actors[i].RemoveTag('quen_heavy_attack_primer');
			}
		}
	}

	function Remove_igni_light_attack_primer_Tags()
	{
		var actors																		: array<CActor>;
		var i 																			: int;
	
		actors.Clear();
		
		theGame.GetActorsByTag( 'igni_light_attack_primer', actors );

		if (actors.Size() <= 0)
		{
			return;
		}

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actors[i].RemoveTag('igni_light_attack_primer');
			}
		}
	}

	function Remove_igni_heavy_attack_primer_Tags()
	{
		var actors																		: array<CActor>;
		var i 																			: int;
	
		actors.Clear();
		
		theGame.GetActorsByTag( 'igni_heavy_attack_primer', actors );

		if (actors.Size() <= 0)
		{
			return;
		}

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actors[i].RemoveTag('igni_heavy_attack_primer');
			}
		}
	}

	function PrimerMarkDestroy()
	{
		marks.Clear();
			
		theGame.GetEntitiesByTag( 'PrimerMark', marks );
	
		for( i=0; i<marks.Size(); i+=1 )
		{	
			mark = (CEntity)marks[i];	
			mark.BreakAttachment();
			mark.Destroy();
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	

	function BerserkMarkDestroy()
	{
		marks_2.Clear();
			
		theGame.GetEntitiesByTag( 'BerserkMark', marks_2 );
	
		for( i=0; i<marks_2.Size(); i+=1 )
		{	
			mark = (CEntity)marks_2[i];	
			mark.BreakAttachment();
			mark.Teleport( thePlayer.GetWorldPosition() + Vector( 0, 0, -100) );
			mark.Destroy();
		}
	}

	function fill_acs_steel_weapons_array()
	{
		steel_weapon_names.Clear();

		steel_weapon_names.PushBack('ACS_Spear_1');
		steel_weapon_names.PushBack('ACS_Spear_2');
		steel_weapon_names.PushBack('ACS_Wild_Hunt_Spear');
		steel_weapon_names.PushBack('ACS_Halberd_1');
		steel_weapon_names.PushBack('ACS_Halberd_2');
		steel_weapon_names.PushBack('ACS_Wild_Hunt_Halberd');
		steel_weapon_names.PushBack('ACS_Guisarme_1');
		steel_weapon_names.PushBack('ACS_Guisarme_2');
		steel_weapon_names.PushBack('ACS_Long_Metal_Pole');
		steel_weapon_names.PushBack('ACS_Mace_1');
		steel_weapon_names.PushBack('ACS_Mace_2');
		steel_weapon_names.PushBack('ACS_Axe_1');
		steel_weapon_names.PushBack('ACS_Axe_2');
		steel_weapon_names.PushBack('ACS_Great_Axe_1');
		steel_weapon_names.PushBack('ACS_Great_Axe_2');
		steel_weapon_names.PushBack('ACS_Wild_Hunt_Axe_1');
		steel_weapon_names.PushBack('ACS_Dwarven_Axe');
		steel_weapon_names.PushBack('ACS_Dwarven_Hammer');
		steel_weapon_names.PushBack('ACS_Twohanded_Hammer_1');
		steel_weapon_names.PushBack('ACS_Twohanded_Hammer_2');
		steel_weapon_names.PushBack('ACS_Wild_Hunt_Hammer');
		steel_weapon_names.PushBack('ACS_Hatchet');
		steel_weapon_names.PushBack('ACS_Small_Blackjack');
		steel_weapon_names.PushBack('ACS_Club');
		steel_weapon_names.PushBack('ACS_Blackjack');
		steel_weapon_names.PushBack('ACS_Poker');
		steel_weapon_names.PushBack('ACS_Staff');
		steel_weapon_names.PushBack('ACS_Lucerne_Hammer');
		steel_weapon_names.PushBack('ACS_Wand');
		steel_weapon_names.PushBack('ACS_Oar');
		steel_weapon_names.PushBack('ACS_Pickaxe');
		steel_weapon_names.PushBack('ACS_Shovel');
		steel_weapon_names.PushBack('ACS_Broom');
		steel_weapon_names.PushBack('ACS_Paling');
		steel_weapon_names.PushBack('ACS_Pitchfork');
		steel_weapon_names.PushBack('ACS_Rake');
		steel_weapon_names.PushBack('ACS_Scoop');
		steel_weapon_names.PushBack('ACS_Scythe');
		steel_weapon_names.PushBack('ACS_Shepherd_Stick');
		steel_weapon_names.PushBack('ACS_Gregoire_Sword');
		steel_weapon_names.PushBack('ACS_Nazairi_Mace');
		steel_weapon_names.PushBack('ACS_Hakland_Spear');
		steel_weapon_names.PushBack('ACS_Imlerith_Mace');
		steel_weapon_names.PushBack('ACS_Eredin_Sword');
		//steel_weapon_names.PushBack('ACS_Caranthir_Staff');
		steel_weapon_names.PushBack('ACS_Wild_Hunt_Axe_2');
		//steel_weapon_names.PushBack('ACS_Giant_Weapon_1');
		steel_weapon_names.PushBack('ACS_Giant_Weapon_2');
		steel_weapon_names.PushBack('ACS_Giant_Weapon_3');
		//steel_weapon_names.PushBack('ACS_Knight_Lance_1');
		//steel_weapon_names.PushBack('ACS_Knight_Lance_2');
		steel_weapon_names.PushBack('ACS_Zoltan_Axe');
	}

	function fill_acs_silver_weapons_array()
	{
		silver_weapon_names.Clear();

		silver_weapon_names.PushBack('ACS_Spear_1_Silver');
		silver_weapon_names.PushBack('ACS_Spear_2_Silver');
		silver_weapon_names.PushBack('ACS_Wild_Hunt_Spear_Silver');
		silver_weapon_names.PushBack('ACS_Halberd_1_Silver');
		silver_weapon_names.PushBack('ACS_Halberd_2_Silver');
		silver_weapon_names.PushBack('ACS_Wild_Hunt_Halberd_Silver');
		silver_weapon_names.PushBack('ACS_Guisarme_1_Silver');
		silver_weapon_names.PushBack('ACS_Guisarme_2_Silver');
		silver_weapon_names.PushBack('ACS_Long_Metal_Pole_Silver');
		silver_weapon_names.PushBack('ACS_Great_Axe_1_Silver');
		silver_weapon_names.PushBack('ACS_Great_Axe_2_Silver');
		silver_weapon_names.PushBack('ACS_Wild_Hunt_Axe_1_Silver');
		silver_weapon_names.PushBack('ACS_Twohanded_Hammer_1_Silver');
		silver_weapon_names.PushBack('ACS_Twohanded_Hammer_2_Silver');
		silver_weapon_names.PushBack('ACS_Wild_Hunt_Hammer_Silver');
		silver_weapon_names.PushBack('ACS_Gregoire_Sword_Silver');
		silver_weapon_names.PushBack('ACS_Hakland_Spear_Silver');
		silver_weapon_names.PushBack('ACS_Imlerith_Mace_Silver');
		silver_weapon_names.PushBack('ACS_Eredin_Sword_Silver');
		//silver_weapon_names.PushBack('ACS_Caranthir_Staff_Silver');
		//weapon_names.PushBack('ACS_Giant_Weapon_1_Silver');
		silver_weapon_names.PushBack('ACS_Giant_Weapon_2_Silver');
		silver_weapon_names.PushBack('ACS_Giant_Weapon_3_Silver');
		//silver_weapon_names.PushBack('ACS_Knight_Lance_1_Silver');
		//silver_weapon_names.PushBack('ACS_Knight_Lance_2_Silver');
		silver_weapon_names.PushBack('ACS_Zoltan_Axe_Silver');
	}

	function ACS_Add_Weapons_To_Inventory(action: W3DamageAction)
	{
		fill_acs_steel_weapons_array();

		fill_acs_silver_weapons_array();

		npc = (CActor)action.victim;

		playerAttacker = (CPlayer)action.attacker;

		if ( 
		playerAttacker 
		&& npc 
		&& !npc.HasTag('ACS_Add_Weapon_To_Inventory') 
		&& !npc.IsAnimal()
		&& ACS_GetWeaponMode() == 3 
		)
		{
			if (npc.IsMonster())
			{
				if( RandF() < 0.45 ) 
				{
					((CActor)npc).GetInventory().AddAnItem( silver_weapon_names[RandRange(silver_weapon_names.Size())] , 1 );
				}
			}
			else if (!npc.IsMonster())
			{
				if( RandF() < 0.75 ) 
				{
					((CActor)npc).GetInventory().AddAnItem( steel_weapon_names[RandRange(steel_weapon_names.Size())] , 1 );
				}
			}

			npc.AddTag('ACS_Add_Weapon_To_Inventory');
		}

		if ( 
		playerAttacker 
		&& npc 
		&& !npc.HasTag('ACS_Add_Drowner_Extract') 
		&& npc.GetSfxTag() == 'sfx_drowner'
		&& RandF() < 0.05 
		)
		{
			((CActor)npc).GetInventory().AddAnItem( 'acs_drowner_extract_item' , 1 );

			npc.AddTag('ACS_Add_Drowner_Extract');
		}
	}

	function ACS_Add_Wolven_Fang(action: W3DamageAction)
	{
		npc = (CActor)action.victim;

		playerAttacker = (CPlayer)action.attacker;

		if ( playerAttacker 
		&& npc 
		&& !npc.HasTag('ACS_Add_Wolven_Fang') 
		&& npc.GetReadableName() == "quests\sidequests\skellige\quest_files\sq201_curse\characters\sq201_morkvarg.w2ent"
		)
		{
			((CActor)npc).GetInventory().AddAnItem( 'acs_wolven_fang', 1 );

			npc.AddTag('ACS_Add_Wolven_Fang');
		}
	}

	function ACS_Weapon_Art_Effects(action: W3DamageAction)
	{
		npc = (CActor)action.victim;

		playerAttacker = (CPlayer)action.attacker;

		npcPos = npc.GetWorldPosition();

		npcRot = npc.GetWorldRotation();
		
		curTargetVitality = npc.GetStat( BCS_Vitality );

		maxTargetVitality = npc.GetStatMax( BCS_Vitality );
		
		curTargetEssence = npc.GetStat( BCS_Essence );

		maxTargetEssence = npc.GetStatMax( BCS_Essence );

		maxAdrenaline = thePlayer.GetStatMax(BCS_Focus);
		
		curAdrenaline = thePlayer.GetStat(BCS_Focus);
		
		targetRotationNPC = npc.GetWorldRotation();
		targetRotationNPC.Yaw = RandRangeF(360,1);
		targetRotationNPC.Pitch = RandRangeF(45,-45);
		
		playerVitality = thePlayer.GetStatMax( BCS_Vitality );
		
		heal = playerVitality * 0.025;

		if (playerAttacker && npc && thePlayer.HasTag('ACS_Sparagmos_Active') )
		{
			ACS_Sparagmos_Damage();

			if (npc.UsesVitality()) 
			{ 
				damageMax = npc.GetStat( BCS_Vitality ) * 0.15; 
			} 
			else if (npc.UsesEssence()) 
			{ 
				damageMax = npc.GetStat( BCS_Essence ) * 0.15; 
			} 

			dmg = new W3DamageAction in theGame.damageMgr;
			
			dmg.Initialize(thePlayer, npc, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
			
			dmg.SetHitReactionType( EHRT_Heavy, true);

			dmg.SetIgnoreArmor(true);

			dmg.SetIgnoreImmortalityMode(false);

			dmg.SetForceExplosionDismemberment();

			dmg.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, damageMax );

			dmg.AddEffectInfo( EET_Burning, 3 );
			
			if( !npc.IsImmuneToBuff( EET_HeavyKnockdown ) && !npc.IsImmuneToBuff( EET_Ragdoll ) && !npc.HasBuff( EET_HeavyKnockdown ) && !npc.HasBuff( EET_Ragdoll ) ) 
			{
				//dmg.AddEffectInfo( EET_HeavyKnockdown, 0.5 );
			}
				
			theGame.damageMgr.ProcessAction( dmg );
				
			delete dmg;	

			return;
		}

		if (playerAttacker && npc && thePlayer.HasTag('ACS_Storm_Spear_Active') )
		{
			thePlayer.SoundEvent("magic_man_sand_gust");

			ACS_Storm_Spear_Damage();

			if (npc.UsesVitality()) 
			{ 
				damageMax = npc.GetStat( BCS_Vitality ) * 0.15; 
			} 
			else if (npc.UsesEssence()) 
			{ 
				damageMax = npc.GetStat( BCS_Essence ) * 0.15; 
			} 

			dmg = new W3DamageAction in theGame.damageMgr;
			
			dmg.Initialize(thePlayer, npc, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
			
			dmg.SetHitReactionType( EHRT_Heavy, true);

			dmg.SetIgnoreArmor(true);

			dmg.SetIgnoreImmortalityMode(false);

			dmg.SetForceExplosionDismemberment();

			dmg.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, damageMax );

			dmg.AddEffectInfo( EET_Confusion, 1 );

			dmg.AddEffectInfo( EET_Stagger, 1 );
				
			theGame.damageMgr.ProcessAction( dmg );
				
			delete dmg;	

			return;
		}
	}

	var vACS_Detonation_Weapon_Effects_Switch : cACS_Detonation_Weapon_Effects_Switch;

	function Detonation_Weapon_Effects_Switch()
	{
		vACS_Detonation_Weapon_Effects_Switch = new cACS_Detonation_Weapon_Effects_Switch in this;
				
		vACS_Detonation_Weapon_Effects_Switch.ACS_Detonation_Weapon_Effects_Switch_Engage();
	}

	var vACS_Passive_Weapon_Effects_Switch : cACS_Passive_Weapon_Effects_Switch;

	function Passive_Weapon_Effects_Switch()
	{
		vACS_Passive_Weapon_Effects_Switch = new cACS_Passive_Weapon_Effects_Switch in this;
				
		vACS_Passive_Weapon_Effects_Switch.ACS_Passive_Weapon_Effects_Switch_Engage();
	}

	var vACS_Drain_Energy : cACS_Drain_Energy;

	function Drain_Energy()
	{
		vACS_Drain_Energy = new cACS_Drain_Energy in this;
				
		vACS_Drain_Energy.ACS_Drain_Energy_Engage();
	}

	var vACS_Marker_Switch : cACS_Marker_Switch;

	function Marker_Switch()
	{
		vACS_Marker_Switch = new cACS_Marker_Switch in this;
		
		vACS_Marker_Switch.ACS_Marker_Switch_Engage();
	}

	function Aard_Sword_On_Hit_Effects (action : W3DamageAction)
	{
		npc = (CActor)action.victim;

		playerAttacker = (CPlayer)action.attacker;

		npcPos = npc.GetWorldPosition();

		npcRot = npc.GetWorldRotation();
		
		curTargetVitality = npc.GetStat( BCS_Vitality );

		maxTargetVitality = npc.GetStatMax( BCS_Vitality );
		
		curTargetEssence = npc.GetStat( BCS_Essence );

		maxTargetEssence = npc.GetStatMax( BCS_Essence );

		maxAdrenaline = thePlayer.GetStatMax(BCS_Focus);
		
		curAdrenaline = thePlayer.GetStat(BCS_Focus);
		
		targetRotationNPC = npc.GetWorldRotation();
		targetRotationNPC.Yaw = RandRangeF(360,1);
		targetRotationNPC.Pitch = RandRangeF(45,-45);
		
		playerVitality = thePlayer.GetStatMax( BCS_Vitality );
		
		heal = playerVitality * 0.025;

		if (playerAttacker && npc && thePlayer.HasTag('aard_sword_equipped') ) 
		{ 
			thePlayer.IncreaseUninterruptedHitsCount();	

			npc.SoundEvent("cmb_play_hit_heavy");
			
			//weapon_blood_fx();

			if (ACS_OnHitEffects_Enabled()
			&& ACS_GetWeaponMode() == 0)
			{
				if( curAdrenaline >= maxAdrenaline/3
				&& curAdrenaline < maxAdrenaline * 2/3
				&& npc.HasTag('aard_heavy_attack_primer') 
				) 
				{	
					Detonation_Weapon_Effects_Switch();

					Drain_Energy();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 1.5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
				
							dmg.AddEffectInfo( EET_Bleeding, 3 );

							dmg.AddEffectInfo( EET_Confusion, 0.5 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}
						
					ACS_AOE_Bloodarc_LVL_1();
					//ACS_AOE_Waterarc_LVL_1();
						
					Remove_On_Hit_Tags();
						
					npc.RemoveTag('aard_heavy_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );

					thePlayer.GainStat( BCS_Vitality, heal * 4 ); 
				}
				else if( curAdrenaline >= maxAdrenaline * 2/3
				&& curAdrenaline < maxAdrenaline
				&& npc.HasTag('aard_heavy_attack_primer') 
				) 
				{	
					Detonation_Weapon_Effects_Switch();

					Drain_Energy();

					actors.Clear();
						
					actors = thePlayer.GetNPCsAndPlayersInRange( 2.5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{	
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
				
							dmg.AddEffectInfo( EET_Bleeding, 5 );

							dmg.AddEffectInfo( EET_Confusion, 0.75 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}
						
					ACS_AOE_Bloodarc_LVL_1();
					//ACS_AOE_Waterarc_LVL_1();

					Remove_On_Hit_Tags();
						
					npc.RemoveTag('aard_heavy_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );

					thePlayer.GainStat( BCS_Vitality, heal * 8 ); 
				}
				else if( curAdrenaline == maxAdrenaline
				&& npc.HasTag('aard_heavy_attack_primer') 
				) 
				{	
					Detonation_Weapon_Effects_Switch();

					Drain_Energy();

					actors.Clear();
						
					actors = thePlayer.GetNPCsAndPlayersInRange( 5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
				
							dmg.AddEffectInfo( EET_Bleeding, 10 );

							dmg.AddEffectInfo( EET_Confusion, 1 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}
						
					ACS_AOE_Bloodarc_LVL_2();
					//ACS_AOE_Waterarc_LVL_2();

					Remove_On_Hit_Tags();
						
					npc.RemoveTag('aard_heavy_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );

					thePlayer.GainStat( BCS_Vitality, heal * 16 ); 
				}
				else
				{							
					if( curAdrenaline >= maxAdrenaline/3
					&& curAdrenaline < maxAdrenaline * 2/3)
					{
						if (thePlayer.IsGuarded())
						{
							thePlayer.GainStat( BCS_Vitality, heal /4 ); 
						}
						else
						{
							thePlayer.GainStat( BCS_Vitality, heal/2 ); 
						}

						Passive_Weapon_Effects_Switch();
						aard_blade_trail();
					}
					else if( curAdrenaline >= maxAdrenaline * 2/3
					&& curAdrenaline < maxAdrenaline)
					{
						if (thePlayer.IsGuarded())
						{
							thePlayer.GainStat( BCS_Vitality, heal /2 ); 
						}
						else
						{
							thePlayer.GainStat( BCS_Vitality, heal ); 
						}

						Passive_Weapon_Effects_Switch();
						aard_blade_trail();
					}
					else if( curAdrenaline == maxAdrenaline ) 
					{
						if (thePlayer.IsGuarded())
						{
							thePlayer.GainStat( BCS_Vitality, heal ); 
						}
						else
						{
							thePlayer.GainStat( BCS_Vitality, heal * 2 ); 
						}

						Passive_Weapon_Effects_Switch();
						aard_blade_trail();
					}

					if( !npc.HasTag('aard_light_attack_primer') ) 
					{
						Marker_Switch();
						npc.AddTag('aard_light_attack_primer');
					}
				}
			}
			else
			{
				Passive_Weapon_Effects_Switch();
			}

			return;
		}	
	}

	function Aard_Secondary_Sword_On_Hit_Effects (action : W3DamageAction)
	{
		npc = (CActor)action.victim;

		playerAttacker = (CPlayer)action.attacker;

		npcPos = npc.GetWorldPosition();

		npcRot = npc.GetWorldRotation();
		
		curTargetVitality = npc.GetStat( BCS_Vitality );

		maxTargetVitality = npc.GetStatMax( BCS_Vitality );
		
		curTargetEssence = npc.GetStat( BCS_Essence );

		maxTargetEssence = npc.GetStatMax( BCS_Essence );

		maxAdrenaline = thePlayer.GetStatMax(BCS_Focus);
		
		curAdrenaline = thePlayer.GetStat(BCS_Focus);
		
		targetRotationNPC = npc.GetWorldRotation();
		targetRotationNPC.Yaw = RandRangeF(360,1);
		targetRotationNPC.Pitch = RandRangeF(45,-45);
		
		playerVitality = thePlayer.GetStatMax( BCS_Vitality );
		
		heal = playerVitality * 0.025;

		if (playerAttacker && npc && thePlayer.HasTag('aard_secondary_sword_equipped') )
		{ 
			theSound.SoundEvent("cmb_play_hit_heavy");

			thePlayer.IncreaseUninterruptedHitsCount();	
			
			//weapon_blood_fx();

			if (ACS_OnHitEffects_Enabled()
			&& ACS_GetWeaponMode() == 0)
			{
				if( curAdrenaline >= maxAdrenaline/3
				&& curAdrenaline < maxAdrenaline * 2/3
				&& npc.HasTag('aard_light_attack_primer') ) 
				{	
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 1.5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
				
							dmg.AddEffectInfo( EET_Confusion, 1 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}
						
					ACS_AOE_Waterpillar_LVL_1();
						
					Remove_On_Hit_Tags();
						
					npc.RemoveTag('aard_light_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
				}
				else if( curAdrenaline >= maxAdrenaline * 2/3
				&& curAdrenaline < maxAdrenaline
				&& npc.HasTag('aard_light_attack_primer') ) 
				{	
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 2.5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
				
							dmg.AddEffectInfo( EET_Confusion, 2 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}
						
					//ACS_AOE_Sandpillar_LVL_2();
					ACS_AOE_Waterpillar_LVL_1();
						
					Remove_On_Hit_Tags();
						
					npc.RemoveTag('aard_light_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );
				}
				else if( curAdrenaline == maxAdrenaline
				&& npc.HasTag('aard_light_attack_primer') ) 
				{	
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
				
							dmg.AddEffectInfo( EET_Confusion, 3 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}
						
					//ACS_AOE_Sandpillar_LVL_3();
					ACS_AOE_Waterpillar_LVL_2();
						
					Remove_On_Hit_Tags();
						
					npc.RemoveTag('aard_light_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );
				}
				else
				{									
					if( curAdrenaline >= maxAdrenaline/3
					&& curAdrenaline < maxAdrenaline * 2/3)
					{
						if( RandF() < 0.0625 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_Stagger ) && !npc.HasBuff( EET_Stagger ) ) 
							{ 	
								Passive_Weapon_Effects_Switch();
								aard_secondary_sword_trail();	
								npc.AddEffectDefault( EET_Stagger, npc, 'console' );						
							}
						}		
					}
					else if( curAdrenaline >= maxAdrenaline * 2/3
					&& curAdrenaline < maxAdrenaline)
					{
						if( RandF() < 0.125 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_Stagger ) && !npc.HasBuff( EET_Stagger ) ) 
							{ 	
								Passive_Weapon_Effects_Switch();
								aard_secondary_sword_trail();	
								npc.AddEffectDefault( EET_Stagger, npc, 'console' );							
							}
						}
					}
					else if( curAdrenaline == maxAdrenaline ) 
					{
						if( RandF() < 0.25 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_Stagger ) && !npc.HasBuff( EET_Stagger ) ) 
							{ 	
								Passive_Weapon_Effects_Switch();
								aard_secondary_sword_trail();	
								npc.AddEffectDefault( EET_Stagger, npc, 'console' );					
							}
						}
					}

					if( !npc.HasTag('aard_heavy_attack_primer') ) 
					{
						Marker_Switch();
						npc.AddTag('aard_heavy_attack_primer');
					}
				}
			}
			else
			{
				Passive_Weapon_Effects_Switch();
			}

			return;
		}
	}

	function Yrden_Sword_On_Hit_Effects (action : W3DamageAction)
	{
		npc = (CActor)action.victim;

		playerAttacker = (CPlayer)action.attacker;

		npcPos = npc.GetWorldPosition();

		npcRot = npc.GetWorldRotation();
		
		curTargetVitality = npc.GetStat( BCS_Vitality );

		maxTargetVitality = npc.GetStatMax( BCS_Vitality );
		
		curTargetEssence = npc.GetStat( BCS_Essence );

		maxTargetEssence = npc.GetStatMax( BCS_Essence );

		maxAdrenaline = thePlayer.GetStatMax(BCS_Focus);
		
		curAdrenaline = thePlayer.GetStat(BCS_Focus);
		
		targetRotationNPC = npc.GetWorldRotation();
		targetRotationNPC.Yaw = RandRangeF(360,1);
		targetRotationNPC.Pitch = RandRangeF(45,-45);
		
		playerVitality = thePlayer.GetStatMax( BCS_Vitality );
		
		heal = playerVitality * 0.025;

		if ( playerAttacker && npc && thePlayer.HasTag('yrden_sword_equipped') ) 
		{ 
			thePlayer.IncreaseUninterruptedHitsCount();	

			if ( ACS_GetWeaponMode() == 0 )
			{
				if ( ACS_GetArmigerModeWeaponType() == 0 )
				{
					theSound.SoundEvent("cmb_play_hit_heavy");
				}
				else if ( ACS_GetArmigerModeWeaponType() == 1 )
				{
					npc.SoundEvent("monster_knight_giant_cmb_weapon_hit_add", 'head');
				}
			}
			else if ( ACS_GetWeaponMode() == 1 )
			{
				if ( ACS_GetFocusModeWeaponType() == 0 )
				{
					theSound.SoundEvent("cmb_play_hit_heavy");
				}
				else if ( ACS_GetFocusModeWeaponType() == 1 )
				{
					npc.SoundEvent("monster_knight_giant_cmb_weapon_hit_add", 'head');
				}
			}
			else if ( ACS_GetWeaponMode() == 2 )
			{
				if ( ACS_GetHybridModeWeaponType() == 0 )
				{
					theSound.SoundEvent("cmb_play_hit_heavy");
				}
				else if ( ACS_GetHybridModeWeaponType() == 1 )
				{
					npc.SoundEvent("monster_knight_giant_cmb_weapon_hit_add", 'head');
				}
			}
			else if ( ACS_GetWeaponMode() == 3 )
			{
				if ( ACS_GetItem_Imlerith_Steel_FOR_SLICING() )
				{
					theSound.SoundEvent("cmb_play_hit_heavy");
				}
				else if ( ACS_GetItem_Imlerith_Steel_FOR_THUNKING() )
				{
					npc.SoundEvent("monster_knight_giant_cmb_weapon_hit_add", 'head');
				}
			}
			
			//weapon_blood_fx();
			
			if (ACS_OnHitEffects_Enabled()
			&& ACS_GetWeaponMode() == 0)
			{
				if( curAdrenaline >= maxAdrenaline/3
				&& curAdrenaline < maxAdrenaline * 2/3
				&& npc.HasTag('yrden_heavy_attack_primer') ) 
				{
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 1.5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
				
							dmg.AddEffectInfo( EET_YrdenHealthDrain, 1 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}

					ACS_AOE_Magic_Missiles_LVL_1();
						
					Remove_On_Hit_Tags();
					npc.RemoveTag('yrden_heavy_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
				}
				else if( curAdrenaline >= maxAdrenaline * 2/3
				&& curAdrenaline < maxAdrenaline
				&& npc.HasTag('yrden_heavy_attack_primer') ) 
				{
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 2.5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);
					for( i = 0; i < actors.Size(); i += 1 )
					{
						actortarget = (CActor)actors[i];

						dmg = new W3DamageAction in theGame.damageMgr;
						dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
						dmg.SetProcessBuffsIfNoDamage(true);
			
						dmg.AddEffectInfo( EET_YrdenHealthDrain, 2 );
			
						theGame.damageMgr.ProcessAction( dmg );
								
						delete dmg;	
					}
						
					//ACS_AOE_Magic_Missiles_LVL_2();
					ACS_AOE_Magic_Missiles_LVL_1();

					Remove_On_Hit_Tags();
					npc.RemoveTag('yrden_heavy_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );
				}
				else if( curAdrenaline == maxAdrenaline
				&& npc.HasTag('yrden_heavy_attack_primer') ) 
				{
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
				
							dmg.AddEffectInfo( EET_YrdenHealthDrain, 3 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}

					//ACS_AOE_Magic_Missiles_LVL_3();
					ACS_AOE_Magic_Missiles_LVL_2();

					Remove_On_Hit_Tags();
					npc.RemoveTag('yrden_heavy_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );
				}
				else
				{								
					if( curAdrenaline >= maxAdrenaline/3
					&& curAdrenaline < maxAdrenaline * 2/3)
					{
						if( RandF() < 0.0625 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_Stagger ) && !npc.HasBuff( EET_Stagger ) ) 
							{ 	
								Passive_Weapon_Effects_Switch();
								yrden_sword_trail();	
								npc.AddEffectDefault( EET_Stagger, npc, 'console' ); 							
							}
						}
					}
					else if( curAdrenaline >= maxAdrenaline * 2/3
					&& curAdrenaline < maxAdrenaline)
					{
						if( RandF() < 0.125 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_Stagger ) && !npc.HasBuff( EET_Stagger ) ) 
							{ 	
								Passive_Weapon_Effects_Switch();
								yrden_sword_trail();	
								npc.AddEffectDefault( EET_Stagger, npc, 'console' ); 							
							}
						}
					}
					else if( curAdrenaline == maxAdrenaline ) 
					{
						if( RandF() < 0.25 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_Stagger ) && !npc.HasBuff( EET_Stagger ) ) 
							{ 	
								Passive_Weapon_Effects_Switch();
								yrden_sword_trail();	
								npc.AddEffectDefault( EET_Stagger, npc, 'console' ); 							
							}
						}
					}

					if( !npc.HasTag('yrden_light_attack_primer') ) 
					{
						Marker_Switch();
						npc.AddTag('yrden_light_attack_primer');
					}
				}
			}
			else
			{
				Passive_Weapon_Effects_Switch();
			}

			return;
		}
	}

	function Yrden_Secondary_Sword_On_Hit_Effects (action : W3DamageAction)
	{
		npc = (CActor)action.victim;

		playerAttacker = (CPlayer)action.attacker;

		npcPos = npc.GetWorldPosition();

		npcRot = npc.GetWorldRotation();
		
		curTargetVitality = npc.GetStat( BCS_Vitality );

		maxTargetVitality = npc.GetStatMax( BCS_Vitality );
		
		curTargetEssence = npc.GetStat( BCS_Essence );

		maxTargetEssence = npc.GetStatMax( BCS_Essence );

		maxAdrenaline = thePlayer.GetStatMax(BCS_Focus);
		
		curAdrenaline = thePlayer.GetStat(BCS_Focus);
		
		targetRotationNPC = npc.GetWorldRotation();
		targetRotationNPC.Yaw = RandRangeF(360,1);
		targetRotationNPC.Pitch = RandRangeF(45,-45);
		
		playerVitality = thePlayer.GetStatMax( BCS_Vitality );
		
		heal = playerVitality * 0.025;

		if ( playerAttacker && npc && thePlayer.HasTag('yrden_secondary_sword_equipped')  ) 
		{ 
			thePlayer.IncreaseUninterruptedHitsCount();	

			npc.SoundEvent("monster_cloud_giant_cmb_weapon_hit_add", 'head');
			
			//weapon_blood_fx();
			
			if (ACS_OnHitEffects_Enabled()
			&& ACS_GetWeaponMode() == 0)
			{
				if( curAdrenaline >= maxAdrenaline/3
				&& curAdrenaline < maxAdrenaline * 2/3
				&& npc.HasTag('yrden_light_attack_primer') ) 
				{	
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 1.5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
							
							if( !actortarget.IsImmuneToBuff( EET_HeavyKnockdown ) && !actortarget.IsImmuneToBuff( EET_Ragdoll ) && !actortarget.HasBuff( EET_HeavyKnockdown ) && !actortarget.HasBuff( EET_Ragdoll ) ) 
							{
								dmg.AddEffectInfo( EET_HeavyKnockdown, 1 );
							}
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}

					ACS_Yrden_Lightning_LVL_1();
						
					Remove_On_Hit_Tags();
					npc.RemoveTag('yrden_light_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
				}
				else if( curAdrenaline >= maxAdrenaline * 2/3
				&& curAdrenaline < maxAdrenaline
				&& npc.HasTag('yrden_light_attack_primer') ) 
				{	
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 2.5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);

							if( !actortarget.IsImmuneToBuff( EET_HeavyKnockdown ) && !actortarget.IsImmuneToBuff( EET_Ragdoll ) && !actortarget.HasBuff( EET_HeavyKnockdown ) && !actortarget.HasBuff( EET_Ragdoll ) ) 
							{
								dmg.AddEffectInfo( EET_HeavyKnockdown, 2 );
							}
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}

					//ACS_Yrden_Lightning_LVL_2();
					ACS_Yrden_Lightning_LVL_1();

					Remove_On_Hit_Tags();
					npc.RemoveTag('yrden_light_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );
				}
				else if( curAdrenaline == maxAdrenaline
				&& npc.HasTag('yrden_light_attack_primer') ) 
				{	
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);

							if( !actortarget.IsImmuneToBuff( EET_HeavyKnockdown ) && !actortarget.IsImmuneToBuff( EET_Ragdoll ) && !actortarget.HasBuff( EET_HeavyKnockdown ) && !actortarget.HasBuff( EET_Ragdoll ) ) 
							{
								dmg.AddEffectInfo( EET_HeavyKnockdown, 3 );
							}
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}

					//ACS_Yrden_Lightning_LVL_3();
					ACS_Yrden_Lightning_LVL_2();

					Remove_On_Hit_Tags();
					npc.RemoveTag('yrden_light_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );
				}
				else
				{						
					if( curAdrenaline >= maxAdrenaline/3
					&& curAdrenaline < maxAdrenaline * 2/3)
					{
						if( RandF() < 0.0625 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_HeavyKnockdown ) && !npc.IsImmuneToBuff( EET_Ragdoll ) && !npc.HasBuff( EET_HeavyKnockdown ) && !npc.HasBuff( EET_Ragdoll ) ) 
							{ 
								Passive_Weapon_Effects_Switch();	
								yrden_secondary_sword_trail();	
								npc.AddEffectDefault( EET_HeavyKnockdown, npc, 'console' ); 							
							}
						}
					}
					else if( curAdrenaline >= maxAdrenaline * 2/3
					&& curAdrenaline < maxAdrenaline)
					{
						if( RandF() < 0.125 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_HeavyKnockdown ) && !npc.IsImmuneToBuff( EET_Ragdoll ) && !npc.HasBuff( EET_HeavyKnockdown ) && !npc.HasBuff( EET_Ragdoll ) ) 
							{ 	
								Passive_Weapon_Effects_Switch();
								yrden_secondary_sword_trail();	
								npc.AddEffectDefault( EET_HeavyKnockdown, npc, 'console' ); 							
							}
						}
					}
					else if( curAdrenaline == maxAdrenaline ) 
					{
						if( RandF() < 0.25 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_HeavyKnockdown ) && !npc.IsImmuneToBuff( EET_Ragdoll ) && !npc.HasBuff( EET_HeavyKnockdown ) && !npc.HasBuff( EET_Ragdoll ) ) 
							{ 	
								Passive_Weapon_Effects_Switch();
								yrden_secondary_sword_trail();	
								npc.AddEffectDefault( EET_HeavyKnockdown, npc, 'console' ); 							
							}
						}
					}
					
					if( !npc.HasTag('yrden_heavy_attack_primer') ) 
					{
						Marker_Switch();
						npc.AddTag('yrden_heavy_attack_primer');
					}
				}
			}
			else
			{
				Passive_Weapon_Effects_Switch();
			}

			return;
		}
	}

	function Axii_Sword_On_Hit_Effects (action : W3DamageAction)
	{
		npc = (CActor)action.victim;

		playerAttacker = (CPlayer)action.attacker;

		npcPos = npc.GetWorldPosition();

		npcRot = npc.GetWorldRotation();
		
		curTargetVitality = npc.GetStat( BCS_Vitality );

		maxTargetVitality = npc.GetStatMax( BCS_Vitality );
		
		curTargetEssence = npc.GetStat( BCS_Essence );

		maxTargetEssence = npc.GetStatMax( BCS_Essence );

		maxAdrenaline = thePlayer.GetStatMax(BCS_Focus);
		
		curAdrenaline = thePlayer.GetStat(BCS_Focus);
		
		targetRotationNPC = npc.GetWorldRotation();
		targetRotationNPC.Yaw = RandRangeF(360,1);
		targetRotationNPC.Pitch = RandRangeF(45,-45);
		
		playerVitality = thePlayer.GetStatMax( BCS_Vitality );
		
		heal = playerVitality * 0.025;

		if ( playerAttacker && npc && thePlayer.HasTag('axii_sword_equipped')  )
		{ 
			//ACS_Finisher_Internal();

			thePlayer.IncreaseUninterruptedHitsCount();	

			npc.SoundEvent("cmb_play_hit_heavy");
			
			//weapon_blood_fx();
			
			if (ACS_OnHitEffects_Enabled()
			&& ACS_GetWeaponMode() == 0)
			{
				if( curAdrenaline >= maxAdrenaline/3
				&& curAdrenaline < maxAdrenaline * 2/3
				&& npc.HasTag('axii_heavy_attack_primer') ) 
				{	
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 1.5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
				
							dmg.AddEffectInfo( EET_SlowdownFrost, 1 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}

					ACS_AOE_Ice_Spear_LVL_1();
						
					Remove_On_Hit_Tags();
					npc.RemoveTag('axii_heavy_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
				}
				else if( curAdrenaline >= maxAdrenaline * 2/3
				&& curAdrenaline < maxAdrenaline
				&& npc.HasTag('axii_heavy_attack_primer') ) 
				{	
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 2.5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
				
							dmg.AddEffectInfo( EET_SlowdownFrost, 2 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}

					//ACS_AOE_Ice_Spear_LVL_2();
					ACS_AOE_Ice_Spear_LVL_1();

					Remove_On_Hit_Tags();
					npc.RemoveTag('axii_heavy_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );
				}
				else if( curAdrenaline == maxAdrenaline
				&& npc.HasTag('axii_heavy_attack_primer') ) 
				{
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
				
							dmg.AddEffectInfo( EET_SlowdownFrost, 3 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}

					//ACS_AOE_Ice_Spear_LVL_3();
					ACS_AOE_Ice_Spear_LVL_2();

					Remove_On_Hit_Tags();
					npc.RemoveTag('axii_heavy_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );
				}
				else
				{		
					if( curAdrenaline >= maxAdrenaline/3
					&& curAdrenaline < maxAdrenaline * 2/3)
					{
						if( RandF() < 0.0625 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_SlowdownFrost ) && !npc.HasBuff( EET_SlowdownFrost ) ) 
							{
								Passive_Weapon_Effects_Switch();
								axii_sword_trail();		
								npc.AddEffectDefault( EET_SlowdownFrost, npc, 'console' ); 							
							}
						}
					}
					else if( curAdrenaline >= maxAdrenaline * 2/3
					&& curAdrenaline < maxAdrenaline)
					{
						if( RandF() < 0.125 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_SlowdownFrost ) && !npc.HasBuff( EET_SlowdownFrost ) ) 
							{
								Passive_Weapon_Effects_Switch();
								axii_sword_trail();		
								npc.AddEffectDefault( EET_SlowdownFrost, npc, 'console' ); 							
							}
						}
					}
					else if( curAdrenaline == maxAdrenaline ) 
					{
						if( RandF() < 0.25 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_SlowdownFrost ) && !npc.HasBuff( EET_SlowdownFrost ) ) 
							{
								Passive_Weapon_Effects_Switch();
								axii_sword_trail();		
								npc.AddEffectDefault( EET_SlowdownFrost, npc, 'console' ); 							
							}
						}
					}

					if( !npc.HasTag('axii_light_attack_primer') ) 
					{
						Marker_Switch();
						npc.AddTag('axii_light_attack_primer');
					}
				}
			}
			else
			{
				Passive_Weapon_Effects_Switch();
			}

			return;
		} 
	}

	function Axii_Secondary_Sword_On_Hit_Effects (action : W3DamageAction)
	{
		npc = (CActor)action.victim;

		playerAttacker = (CPlayer)action.attacker;

		npcPos = npc.GetWorldPosition();

		npcRot = npc.GetWorldRotation();
		
		curTargetVitality = npc.GetStat( BCS_Vitality );

		maxTargetVitality = npc.GetStatMax( BCS_Vitality );
		
		curTargetEssence = npc.GetStat( BCS_Essence );

		maxTargetEssence = npc.GetStatMax( BCS_Essence );

		maxAdrenaline = thePlayer.GetStatMax(BCS_Focus);
		
		curAdrenaline = thePlayer.GetStat(BCS_Focus);
		
		targetRotationNPC = npc.GetWorldRotation();
		targetRotationNPC.Yaw = RandRangeF(360,1);
		targetRotationNPC.Pitch = RandRangeF(45,-45);
		
		playerVitality = thePlayer.GetStatMax( BCS_Vitality );
		
		heal = playerVitality * 0.025;

		if ( playerAttacker && npc && thePlayer.HasTag('axii_secondary_sword_equipped') )
		{
			//ACS_Finisher_Internal();

			thePlayer.IncreaseUninterruptedHitsCount();	

			npc.SoundEvent("cmb_play_hit_heavy");
			
			//weapon_blood_fx();

			if (ACS_OnHitEffects_Enabled()
			&& ACS_GetWeaponMode() == 0)
			{
				if( curAdrenaline >= maxAdrenaline/3
				&& curAdrenaline < maxAdrenaline * 2/3
				&& npc.HasTag('axii_light_attack_primer') ) 
				{
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 1.5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
					
							dmg.AddEffectInfo( EET_Frozen, 1 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}
					
					ACS_AOE_Freeze_LVL_1();
						
					Remove_On_Hit_Tags();
					npc.RemoveTag('axii_light_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
				}
				else if( curAdrenaline >= maxAdrenaline * 2/3
				&& curAdrenaline < maxAdrenaline
				&& npc.HasTag('axii_light_attack_primer') ) 
				{
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 2.5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
					
							dmg.AddEffectInfo( EET_Frozen, 2 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}

					//ACS_AOE_Freeze_LVL_2();
					ACS_AOE_Freeze_LVL_1();
						
					Remove_On_Hit_Tags();
					npc.RemoveTag('axii_light_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );
				}
				else if( curAdrenaline == maxAdrenaline
				&& npc.HasTag('axii_light_attack_primer') ) 
				{
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
					
							dmg.AddEffectInfo( EET_Frozen, 3 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}
						
					//ACS_AOE_Freeze_LVL_3();
					ACS_AOE_Freeze_LVL_2();
						
					Remove_On_Hit_Tags();
					npc.RemoveTag('axii_light_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );
				}
				else
				{									
					if( curAdrenaline >= maxAdrenaline/3
					&& curAdrenaline < maxAdrenaline * 2/3)
					{
						if( RandF() < 0.0625 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_SlowdownFrost ) && !npc.HasBuff( EET_SlowdownFrost ) ) 
							{
								Passive_Weapon_Effects_Switch();
								axii_secondary_sword_trail();		
								npc.AddEffectDefault( EET_SlowdownFrost, npc, 'console' ); 							
							}
						}
					}
					else if( curAdrenaline >= maxAdrenaline * 2/3
					&& curAdrenaline < maxAdrenaline)
					{
						if( RandF() < 0.125 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_SlowdownFrost ) && !npc.HasBuff( EET_SlowdownFrost ) ) 
							{
								Passive_Weapon_Effects_Switch();
								axii_secondary_sword_trail();		
								npc.AddEffectDefault( EET_SlowdownFrost, npc, 'console' ); 							
							}
						}
					}
					else if( curAdrenaline == maxAdrenaline ) 
					{
						if( RandF() < 0.25 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_SlowdownFrost ) && !npc.HasBuff( EET_SlowdownFrost ) ) 
							{
								Passive_Weapon_Effects_Switch();
								axii_secondary_sword_trail();		
								npc.AddEffectDefault( EET_SlowdownFrost, npc, 'console' ); 							
							}
						}
					}
					
					if( !npc.HasTag('axii_heavy_attack_primer') ) 
					{
						Marker_Switch();
						npc.AddTag('axii_heavy_attack_primer');
					}
				}
			}
			else
			{
				Passive_Weapon_Effects_Switch();
			}

			return;
		}
	}

	function Quen_Sword_On_Hit_Effects (action : W3DamageAction)
	{
		npc = (CActor)action.victim;

		playerAttacker = (CPlayer)action.attacker;

		npcPos = npc.GetWorldPosition();

		npcRot = npc.GetWorldRotation();
		
		curTargetVitality = npc.GetStat( BCS_Vitality );

		maxTargetVitality = npc.GetStatMax( BCS_Vitality );
		
		curTargetEssence = npc.GetStat( BCS_Essence );

		maxTargetEssence = npc.GetStatMax( BCS_Essence );

		maxAdrenaline = thePlayer.GetStatMax(BCS_Focus);
		
		curAdrenaline = thePlayer.GetStat(BCS_Focus);
		
		targetRotationNPC = npc.GetWorldRotation();
		targetRotationNPC.Yaw = RandRangeF(360,1);
		targetRotationNPC.Pitch = RandRangeF(45,-45);
		
		playerVitality = thePlayer.GetStatMax( BCS_Vitality );
		
		heal = playerVitality * 0.025;

		if ( playerAttacker && npc && thePlayer.HasTag('quen_sword_equipped')  )
		{ 
			thePlayer.IncreaseUninterruptedHitsCount();	

			npc.SoundEvent("cmb_play_hit_heavy");
			
			//weapon_blood_fx();

			if (ACS_OnHitEffects_Enabled()
			&& ACS_GetWeaponMode() == 0)
			{
				if( curAdrenaline >= maxAdrenaline/3
				&& curAdrenaline < maxAdrenaline * 2/3
				&& npc.HasTag('quen_heavy_attack_primer') 
				) 
				{	
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 1.5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
				
							dmg.AddEffectInfo( EET_Blindness, 1 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}
						
					ACS_AOE_Sandstorm_LVL_1();
						
					Remove_On_Hit_Tags();
						
					npc.RemoveTag('quen_heavy_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
				}
				else if( curAdrenaline >= maxAdrenaline * 2/3
				&& curAdrenaline < maxAdrenaline
				&& npc.HasTag('quen_heavy_attack_primer') 
				) 
				{	
					Detonation_Weapon_Effects_Switch();

					actors.Clear();
						
					actors = thePlayer.GetNPCsAndPlayersInRange( 2.5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
				
							dmg.AddEffectInfo( EET_Blindness, 2 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}
						
					//ACS_AOE_Sandstorm_LVL_2();
					ACS_AOE_Sandstorm_LVL_1();

					Remove_On_Hit_Tags();
						
					npc.RemoveTag('quen_heavy_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );
				}
				else if( curAdrenaline == maxAdrenaline
				&& npc.HasTag('quen_heavy_attack_primer') 
				) 
				{	
					Detonation_Weapon_Effects_Switch();

					actors.Clear();
						
					actors = thePlayer.GetNPCsAndPlayersInRange( 5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
				
							dmg.AddEffectInfo( EET_Blindness, 3 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}
						
					//ACS_AOE_Sandstorm_LVL_3();
					ACS_AOE_Sandstorm_LVL_2();

					Remove_On_Hit_Tags();
						
					npc.RemoveTag('quen_heavy_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );
				}
				else
				{							
					if( curAdrenaline >= maxAdrenaline/3
					&& curAdrenaline < maxAdrenaline * 2/3)
					{
						if( RandF() < 0.0625 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_Blindness ) && !npc.HasBuff( EET_Blindness ) ) 
							{ 	
								Passive_Weapon_Effects_Switch();
								//quen_sword_glow();	
								quen_sword_trail();
								npc.AddEffectDefault( EET_Blindness, npc, 'console' ); 						
							}
						}
					}
					else if( curAdrenaline >= maxAdrenaline * 2/3
					&& curAdrenaline < maxAdrenaline)
					{
						if( RandF() < 0.125 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_Blindness ) && !npc.HasBuff( EET_Blindness ) ) 
							{ 	
								Passive_Weapon_Effects_Switch();
								//quen_sword_glow();	
								quen_sword_trail();
								npc.AddEffectDefault( EET_Blindness, npc, 'console' ); 						
							}
						}
					}
					else if( curAdrenaline == maxAdrenaline ) 
					{
						if( RandF() < 0.25 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_Blindness ) && !npc.HasBuff( EET_Blindness ) ) 
							{ 	
								Passive_Weapon_Effects_Switch();
								//quen_sword_glow();	
								quen_sword_trail();
								npc.AddEffectDefault( EET_Blindness, npc, 'console' ); 						
							}
						}
					}

					if( !npc.HasTag('quen_light_attack_primer') ) 
					{
						Marker_Switch();
						npc.AddTag('quen_light_attack_primer');
					}
				}
			}
			else
			{
				Passive_Weapon_Effects_Switch();
			}

			return;
		}
	}

	function Quen_Secondary_Sword_On_Hit_Effects (action : W3DamageAction)
	{
		npc = (CActor)action.victim;

		playerAttacker = (CPlayer)action.attacker;

		npcPos = npc.GetWorldPosition();

		npcRot = npc.GetWorldRotation();
		
		curTargetVitality = npc.GetStat( BCS_Vitality );

		maxTargetVitality = npc.GetStatMax( BCS_Vitality );
		
		curTargetEssence = npc.GetStat( BCS_Essence );

		maxTargetEssence = npc.GetStatMax( BCS_Essence );

		maxAdrenaline = thePlayer.GetStatMax(BCS_Focus);
		
		curAdrenaline = thePlayer.GetStat(BCS_Focus);
		
		targetRotationNPC = npc.GetWorldRotation();
		targetRotationNPC.Yaw = RandRangeF(360,1);
		targetRotationNPC.Pitch = RandRangeF(45,-45);
		
		playerVitality = thePlayer.GetStatMax( BCS_Vitality );
		
		if ( playerAttacker && npc && thePlayer.HasTag('quen_secondary_sword_equipped')  )
		{
			thePlayer.IncreaseUninterruptedHitsCount();	

			npc.SoundEvent("cmb_play_hit_heavy");

			//weapon_blood_fx();

			if (ACS_OnHitEffects_Enabled()
			&& ACS_GetWeaponMode() == 0)
			{
				if( curAdrenaline >= maxAdrenaline/3
				&& curAdrenaline < maxAdrenaline * 2/3
				&& npc.HasTag('quen_light_attack_primer') ) 
				{	
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 1.5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
				
							dmg.AddEffectInfo( EET_Paralyzed, 1 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}

					ACS_AOE_Sandpillar_LVL_1();
						
					Remove_On_Hit_Tags();
						
					npc.RemoveTag('quen_light_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
				}
				else if( curAdrenaline >= maxAdrenaline * 2/3
				&& curAdrenaline < maxAdrenaline
				&& npc.HasTag('quen_light_attack_primer') ) 
				{	
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 2.5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
				
							dmg.AddEffectInfo( EET_Paralyzed, 2 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}

					//ACS_AOE_Sandpillar_LVL_2();
					ACS_AOE_Sandpillar_LVL_1();
						
					Remove_On_Hit_Tags();
						
					npc.RemoveTag('quen_light_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );
				}
				else if( curAdrenaline == maxAdrenaline
				&& npc.HasTag('quen_light_attack_primer') ) 
				{	
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
				
							dmg.AddEffectInfo( EET_Paralyzed, 3 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}
						
					//ACS_AOE_Sandpillar_LVL_3();
					ACS_AOE_Sandpillar_LVL_2();
						
					Remove_On_Hit_Tags();
						
					npc.RemoveTag('quen_light_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );
				}
				else
				{									
					if( curAdrenaline >= maxAdrenaline/3
					&& curAdrenaline < maxAdrenaline * 2/3)
					{
						if( RandF() < 0.0625 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_Slowdown ) && !npc.HasBuff( EET_Slowdown ) ) 
							{ 	
								Passive_Weapon_Effects_Switch();
								quen_secondary_sword_trail();	
								npc.AddEffectDefault( EET_Slowdown, npc, 'console' ); 						
							}
						}
					}
					else if( curAdrenaline >= maxAdrenaline * 2/3
					&& curAdrenaline < maxAdrenaline)
					{
						if( RandF() < 0.125 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_Slowdown ) && !npc.HasBuff( EET_Slowdown ) ) 
							{ 	
								Passive_Weapon_Effects_Switch();
								quen_secondary_sword_trail();	
								npc.AddEffectDefault( EET_Slowdown, npc, 'console' ); 						
							}
						}
					}
					else if( curAdrenaline == maxAdrenaline ) 
					{
						if( RandF() < 0.25 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_Slowdown ) && !npc.HasBuff( EET_Slowdown ) ) 
							{ 	
								Passive_Weapon_Effects_Switch();
								quen_secondary_sword_trail();	
								npc.AddEffectDefault( EET_Slowdown, npc, 'console' ); 						
							}
						}
					}

					if( !npc.HasTag('quen_heavy_attack_primer') ) 
					{
						Marker_Switch();
						npc.AddTag('quen_heavy_attack_primer');
					}
				}
			}
			else
			{
				Passive_Weapon_Effects_Switch();
			}

			return;
		}
	}

	function Igni_Sword_On_Hit_Effects (action : W3DamageAction)
	{
		npc = (CActor)action.victim;

		playerAttacker = (CPlayer)action.attacker;

		if ( playerAttacker && npc && thePlayer.HasTag('igni_sword_equipped_TAG') ) 
		{ 
			actortarget.SoundEvent("cmb_play_hit_heavy");

			if (ACS_OnHitEffects_Enabled()
			&& ACS_GetWeaponMode() == 0)
			{
				if( !npc.HasTag('igni_light_attack_primer') ) 
				{
					Passive_Weapon_Effects_Switch();
					Marker_Switch();
					npc.AddTag('igni_light_attack_primer');
				}
			}
			else
			{
				Passive_Weapon_Effects_Switch();
			}

			return;
		}
	}

	function Igni_Secondary_Sword_On_Hit_Effects (action : W3DamageAction)
	{
		npc = (CActor)action.victim;

		playerAttacker = (CPlayer)action.attacker;
	
		maxAdrenaline = thePlayer.GetStatMax(BCS_Focus);
		
		curAdrenaline = thePlayer.GetStat(BCS_Focus);

		if ( playerAttacker && npc && thePlayer.HasTag('igni_secondary_sword_equipped_TAG') )
		{	
			actortarget.SoundEvent("cmb_play_hit_heavy");
			
			if (ACS_OnHitEffects_Enabled()
			&& ACS_GetWeaponMode() == 0)
			{
				if( curAdrenaline >= maxAdrenaline/3
				&& curAdrenaline < maxAdrenaline * 2/3
				&& npc.HasTag('igni_light_attack_primer'))
				{
					Detonation_Weapon_Effects_Switch();
							
					npc.OnIgniHit( NULL );

					actors.Clear();
							
					actors = thePlayer.GetNPCsAndPlayersInRange( 1.5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
									
							dmg.SetForceExplosionDismemberment();
									
							dmg.AddEffectInfo( EET_Burning, 1 );
									
							dmg.AddEffectInfo( EET_Stagger, 1 );
									
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}

					ACS_AOE_Igni_Blast_LVL_1();
							
					Remove_On_Hit_Tags();
					//PrimerMarkDestroy();
					npc.RemoveTag('igni_light_attack_primer');
						
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
				}
				else if (curAdrenaline >= maxAdrenaline * 2/3
				&& curAdrenaline < maxAdrenaline
				&& npc.HasTag('igni_light_attack_primer'))
				{
					Detonation_Weapon_Effects_Switch();
							
					npc.OnIgniHit( NULL );

					actors.Clear();
							
					actors = thePlayer.GetNPCsAndPlayersInRange( 2.5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
									
							dmg.SetForceExplosionDismemberment();
									
							dmg.AddEffectInfo( EET_Burning, 2 );

							if( !actortarget.IsImmuneToBuff( EET_HeavyKnockdown ) && !actortarget.IsImmuneToBuff( EET_Ragdoll ) && !actortarget.HasBuff( EET_HeavyKnockdown ) && !actortarget.HasBuff( EET_Ragdoll ) ) 
							{
								dmg.AddEffectInfo( EET_HeavyKnockdown, 2 );
							}		
		
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}

					//ACS_AOE_Igni_Blast_LVL_2();
					ACS_AOE_Igni_Blast_LVL_1();

					Remove_On_Hit_Tags();
					//PrimerMarkDestroy();
					npc.RemoveTag('igni_light_attack_primer');
						
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );
				}
				else if (curAdrenaline == maxAdrenaline 
				&& npc.HasTag('igni_light_attack_primer'))
				{
					Detonation_Weapon_Effects_Switch();
							
					npc.OnIgniHit( NULL );

					actors.Clear();
							
					actors = thePlayer.GetNPCsAndPlayersInRange( 5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
									
							dmg.SetForceExplosionDismemberment();
									
							dmg.AddEffectInfo( EET_Burning, 3 );
							
							if( !actortarget.IsImmuneToBuff( EET_HeavyKnockdown ) && !actortarget.IsImmuneToBuff( EET_Ragdoll ) && !actortarget.HasBuff( EET_HeavyKnockdown ) && !actortarget.HasBuff( EET_Ragdoll ) ) 
							{
								dmg.AddEffectInfo( EET_HeavyKnockdown, 3 );
							}
									
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}

					//ACS_AOE_Igni_Blast_LVL_3();
					ACS_AOE_Igni_Blast_LVL_2();

					Remove_On_Hit_Tags();
					//PrimerMarkDestroy();
					npc.RemoveTag('igni_light_attack_primer');
						
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );
				}
				/*
				else
				{
					Passive_Weapon_Effects_Switch();
				}
				*/
			}
			else
			{
				Passive_Weapon_Effects_Switch();
			}

			return;
		}
	}

	function ACS_Finisher_Or_Dismember (action : W3DamageAction)
	{
		var playerAttacker, playerVictim																								: CPlayer;
		var npc, npcAttacker 																											: CActor;

		if (ACS_Transformation_Activated_Check())
		{
			return;
		}

		if (thePlayer.IsInFistFightMiniGame())
		{
			return;
		}

		npc = (CActor)action.victim;

		playerAttacker = (CPlayer)action.attacker;

		if (npc.IsUsingVehicle()
		|| npc.IsUsingHorse()
		|| npc.IsSwimming()
		|| ((CNewNPC)(npc)).IsFlying()
		|| npc.HasTag('ACS_Wild_Hunt_Rider')
		|| npc.HasTag('ACS_caretaker_shade')
		|| npc.HasTag('ACS_Shades_Crusader')
		)
		{
			return;
		}

		if (playerAttacker 
		&& npc
		&& npc.GetMovingAgentComponent().GetName() != "dwarf_base"
		&& npc.GetMovingAgentComponent().GetName() != "woman_base"
		)
		{
			if (
			( 
			thePlayer.HasTag('axii_sword_equipped') 
			|| thePlayer.HasTag('axii_secondary_sword_equipped') 
			) 
			)
			{
				if (npc.UsesVitality() 
				&& npc.IsHuman()
				)
				{
					if (((CNewNPC)npc).GetNPCType() == ENGT_Guard
					|| npc.IsWoman()
					|| npc.HasTag('ACS_Scared_Standing')
					)
					{
						ACS_Dismember_Internal(npc, action);

						return;
					}
					else
					{
						if (ACS_AutoFinisher_Enabled())
						{
							if(  thePlayer.IsDoingSpecialAttack( false ) )
							{
								if (ACS_ExperimentalDismemberment_Enabled())
								{
									ACS_Dismember_Internal(npc, action);
								}

								return;
							}
							else
							{
								if (
								(npc.HasBuff(EET_Burning) && ACS_BurningAlwaysDismember_Enabled())
								|| npc.HasBuff(EET_Frozen)
								)
								{
									if (ACS_ExperimentalDismemberment_Enabled())
									{
										ACS_Dismember_Internal(npc, action);
									}

									return;
								}
								else
								{
									if (RandF() < ACS_CustomFinisherChance())
									{
										ACS_Finisher_Internal(npc, action);
									}
									else
									{
										if (ACS_ExperimentalDismemberment_Enabled())
										{
											ACS_Dismember_Internal(npc, action);
										}
									}
								}

								return;
							}	
						}
						else
						{
							if (ACS_ExperimentalDismemberment_Enabled())
							{
								ACS_Dismember_Internal(npc, action);
							}

							return;
						}
					}	
				}
				else
				{
					if (ACS_ExperimentalDismemberment_Enabled())
					{
						ACS_Dismember_Internal(npc, action);

						return;
					}
				}	
			}
			else if (
			( 
			thePlayer.HasTag('quen_sword_equipped') 
			) 
			)
			{
				if (npc.UsesVitality() && npc.IsHuman())
				{
					if (((CNewNPC)npc).GetNPCType() == ENGT_Guard
					|| npc.IsWoman()
					|| npc.HasTag('ACS_Scared_Standing')
					)
					{
						ACS_Dismember_Internal(npc, action);

						return;
					}
					else
					{
						if (ACS_AutoFinisher_Enabled())
						{
							if(  thePlayer.IsDoingSpecialAttack( false ) )
							{
								if (ACS_ExperimentalDismemberment_Enabled())
								{
									ACS_Dismember_Internal(npc, action);
								}

								return;
							}
							else
							{
								if ((action.GetHitReactionType() == EHRT_Heavy && ACS_HeavyAttackAlwaysDismember_Enabled())
								|| (npc.HasBuff(EET_Burning) && ACS_BurningAlwaysDismember_Enabled())
								|| npc.HasBuff(EET_Frozen)
								)
								{
									if (ACS_ExperimentalDismemberment_Enabled())
									{
										ACS_Dismember_Internal(npc, action);
									}

									return;
								}
								else
								{
									if (RandF() < ACS_CustomFinisherChance())
									{
										ACS_Finisher_Internal(npc, action);
									}
									else
									{
										if (ACS_ExperimentalDismemberment_Enabled())
										{
											ACS_Dismember_Internal(npc, action);
										}
									}
								}

								return;
							}	
						}
						else
						{
							if (ACS_ExperimentalDismemberment_Enabled())
							{
								ACS_Dismember_Internal(npc, action);
							}

							return;
						}
					}	
				}
				else
				{
					if (ACS_ExperimentalDismemberment_Enabled())
					{
						ACS_Dismember_Internal(npc, action);

						return;
					}
				}	
			}
			else if (
			( 
			thePlayer.HasTag('igni_sword_equipped') 
			|| thePlayer.HasTag('igni_secondary_sword_equipped') 
			|| thePlayer.HasTag('igni_sword_equipped_TAG') 
			|| thePlayer.HasTag('igni_secondary_sword_equipped_TAG') 
			) 
			)
			{
				if (thePlayer.HasTag('ACS_In_Ciri_Special_Attack'))
				{
					ACS_Dismember_Internal(npc, action);

					return;
				}
				else
				{
					if (npc.UsesVitality() && npc.IsHuman())
					{
						if (((CNewNPC)npc).GetNPCType() == ENGT_Guard
						|| npc.IsWoman()
						|| npc.HasTag('ACS_Scared_Standing')
						)
						{
							ACS_Dismember_Internal(npc, action);

							return;
						}
						else
						{
							if( theGame.GetInGameConfigWrapper().GetVarValue( 'Gameplay', 'AutomaticFinishersEnabled' ) == "true" )
							{
								if (ACS_AutoFinisher_Enabled())
								{
									if(  thePlayer.IsDoingSpecialAttack( false ) )
									{
										ACS_Dismember_Internal(npc, action);

										return;
									}
									else
									{
										if ((action.GetHitReactionType() == EHRT_Heavy && ACS_HeavyAttackAlwaysDismember_Enabled())
										|| (npc.HasBuff(EET_Burning) && ACS_BurningAlwaysDismember_Enabled())
										|| npc.HasBuff(EET_Frozen)
										)
										{
											if (ACS_ExperimentalDismemberment_Enabled())
											{
												ACS_Dismember_Internal(npc, action);
											}

											return;
										}
										else
										{
											if (RandF() < ACS_CustomFinisherChance())
											{
												ACS_Finisher_Internal(npc, action);
											}
											else
											{
												if (ACS_ExperimentalDismemberment_Enabled())
												{
													ACS_Dismember_Internal(npc, action);
												}
											}

											return;
										}
										
									}
								}
								else
								{
									if (ACS_ExperimentalDismemberment_Enabled())
									{
										ACS_Dismember_Internal(npc, action);
									}

									return;
								}
							}
							else
							{
								if (ACS_ExperimentalDismemberment_Enabled())
								{
									ACS_Dismember_Internal(npc, action);
								}

								return;
							}
						}
					}
					else
					{
						if (ACS_ExperimentalDismemberment_Enabled())
						{
							ACS_Dismember_Internal(npc, action);
						}

						return;
					}
				}
			}
			else if 
			(
			( 
			thePlayer.HasTag('aard_sword_equipped') 
			|| thePlayer.HasTag('aard_secondary_sword_equipped') 
			|| thePlayer.HasTag('quen_secondary_sword_equipped') 
			|| thePlayer.HasTag('yrden_sword_equipped') 
			|| thePlayer.HasTag('yrden_secondary_sword_equipped') 
			)
			)
			{
				if (ACS_ExperimentalDismemberment_Enabled())
				{
					ACS_Dismember_Internal(npc, action);

					return;
				}
			}
			else if 
			(
			( 
			thePlayer.HasTag('vampire_claws_equipped')
			)
			)
			{
				ACS_Dismember_Internal(npc, action);

				return;
			}
			else
			{
				if (ACS_ExperimentalDismemberment_Enabled())
				{
					ACS_Dismember_Internal(npc, action);
				}
			}
		}
	}
	
	function ACS_Shadow_Dash_On_Hit_Effects (action : W3DamageAction)
	{
		npc = (CActor)action.victim;

		playerAttacker = (CPlayer)action.attacker;

		npcPos = npc.GetWorldPosition();

		npcRot = npc.GetWorldRotation();
		
		curTargetVitality = npc.GetStat( BCS_Vitality );

		maxTargetVitality = npc.GetStatMax( BCS_Vitality );
		
		curTargetEssence = npc.GetStat( BCS_Essence );

		maxTargetEssence = npc.GetStatMax( BCS_Essence );

		maxAdrenaline = thePlayer.GetStatMax(BCS_Focus);
		
		curAdrenaline = thePlayer.GetStat(BCS_Focus);
		
		targetRotationNPC = npc.GetWorldRotation();
		targetRotationNPC.Yaw = RandRangeF(360,1);
		targetRotationNPC.Pitch = RandRangeF(45,-45);
		
		playerVitality = thePlayer.GetStatMax( BCS_Vitality );
		
		heal = playerVitality * 0.025;

		if ( playerAttacker && npc && thePlayer.HasTag('ACS_Shadow_Dash_Empowered') )
		{
			ACSGetEquippedSword().DestroyEffect( 'special_attack_block' );
			ACSGetEquippedSword().PlayEffectSingle( 'special_attack_block' );

			actors.Clear();

			actors = thePlayer.GetNPCsAndPlayersInCone(2.5, VecHeading(thePlayer.GetHeadingVector()), 360, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors );

			if( actors.Size() > 0 )
			{
				for( i = 0; i < actors.Size(); i += 1 )
				{
					actortarget = (CActor)actors[i];

					actortarget.SoundEvent("cmb_play_hit_heavy");

					//damageMax = maxTargetVitality * 1/30; 

					dmg = new W3DamageAction in theGame.damageMgr;
					
					dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
					
					dmg.SetProcessBuffsIfNoDamage(true);
					
					dmg.SetHitReactionType( EHRT_Heavy, true);
					
					//dmg.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, damageMax );

					if( !actortarget.IsImmuneToBuff( EET_Stagger ) ) 
					{ 
						if( !actortarget.IsImmuneToBuff( EET_Stagger ) && !actortarget.IsImmuneToBuff( EET_Ragdoll ) && !actortarget.HasBuff( EET_Stagger ) && !actortarget.HasBuff( EET_Ragdoll ) ) 
						{
							if (thePlayer.HasTag('ACS_Shadowstep_Long_Buff'))
							{
								dmg.AddEffectInfo( EET_Stagger, 1 );
							}
							else
							{
								dmg.AddEffectInfo( EET_Stagger, 0.5 );
							}
						}
						else
						{
							if( !actortarget.IsImmuneToBuff( EET_Bleeding ) ) 
							{ 
								dmg.AddEffectInfo( EET_Bleeding, 3 );
							}
						}	
					}
						
					theGame.damageMgr.ProcessAction( dmg );
						
					delete dmg;	
				}
			}

			thePlayer.RemoveTag('ACS_Shadowstep_Long_Buff');

			thePlayer.RemoveTag('ACS_Shadow_Dash_Empowered');

			return;
		}
		else if ( playerAttacker && npc && (thePlayer.HasTag('yrden_sword_equipped') || thePlayer.HasTag('yrden_secondary_sword_equipped')) )
		{
			actors.Clear();

			actors = thePlayer.GetNPCsAndPlayersInCone(2.5, VecHeading(thePlayer.GetHeadingVector()), 360, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors );

			if( actors.Size() > 1 )
			{
				for( i = 0; i < actors.Size(); i += 1 )
				{
					actortarget = (CActor)actors[i];

					actortarget.SoundEvent("cmb_play_hit_heavy");

					//damageMax = maxTargetVitality * 1/30; 

					dmg = new W3DamageAction in theGame.damageMgr;
					
					dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
					
					dmg.SetProcessBuffsIfNoDamage(true);
					
					dmg.SetHitReactionType( EHRT_Heavy, true);
					
					//dmg.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, damageMax );

					if( !actortarget.IsImmuneToBuff( EET_Stagger ) ) 
					{ 
						if( !actortarget.IsImmuneToBuff( EET_Stagger ) && !actortarget.IsImmuneToBuff( EET_Ragdoll ) && !actortarget.HasBuff( EET_Stagger ) && !actortarget.HasBuff( EET_Ragdoll ) ) 
						{
							dmg.AddEffectInfo( EET_Stagger, 0.5 );
						}
						else
						{
							if( !actortarget.IsImmuneToBuff( EET_Bleeding ) ) 
							{ 
								dmg.AddEffectInfo( EET_Bleeding, 3 );
							}
						}	
					}
						
					theGame.damageMgr.ProcessAction( dmg );
						
					delete dmg;	
				}
			}

			return;
		}
	}

	var vACS_Blood_Spatter_Switch : cACS_Blood_Spatter_Switch;

	function Blood_Spatter_Switch()
	{
		if (!ACS_AdditionalBloodSpatters_Enabled())
		{
			return;
		}

		if (ACS_can_spawn_blood_spatter())
		{
			ACS_refresh_blood_spatter_spawn_cooldown();

			vACS_Blood_Spatter_Switch = new cACS_Blood_Spatter_Switch in this;
					
			vACS_Blood_Spatter_Switch.ACS_Blood_Spatter_Switch_Engage();
		}
	}
	
	function ACS_On_Hit_Effects (action : W3DamageAction)
	{
		var playerAttacker, playerVictim																								: CPlayer;
		var npc, npcAttacker 																											: CActor;

		npc = (CActor)action.victim;
	
		npcAttacker = (CActor)action.attacker;
		
		playerAttacker = (CPlayer)action.attacker;
		
		playerVictim = (CPlayer)action.victim;

		if (ACS_Transformation_Activated_Check())
		{
			return;
		}

		if (action.WasDodged() 
		|| action.IsDoTDamage() 
		|| !action.IsActionMelee()
		|| !action.DealtDamage()
		|| (((W3Action_Attack)action).IsParried())
		|| npc.GetImmortalityMode() == AIM_Immortal
		|| npc.GetImmortalityMode() == AIM_Invulnerable
		|| npc.GetAttitude( thePlayer ) != AIA_Hostile
		)
		{
			thePlayer.ResetUninterruptedHitsCount();
			return;
		}
		else
		{
			ACS_Shadow_Dash_On_Hit_Effects(action);

			//ACS_Add_Weapons_To_Inventory(action);

			//ACS_Add_Wolven_Fang(action);

			ACS_Weapon_Art_Effects(action);

			ACS_Finisher_Or_Dismember(action);

			Aard_Sword_On_Hit_Effects(action);

			Aard_Secondary_Sword_On_Hit_Effects(action);

			Yrden_Sword_On_Hit_Effects(action);

			Yrden_Secondary_Sword_On_Hit_Effects(action);

			Axii_Sword_On_Hit_Effects(action);

			Axii_Secondary_Sword_On_Hit_Effects(action);

			Quen_Sword_On_Hit_Effects(action);

			Quen_Secondary_Sword_On_Hit_Effects(action);

			Igni_Sword_On_Hit_Effects(action);

			Igni_Secondary_Sword_On_Hit_Effects(action);
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function Gerry_Normal_Death_Scene()
	{
		var deathScenes												: array< string >;

		thePlayer.StopEffect('blood');
		thePlayer.StopEffect('death_blood');
		thePlayer.StopEffect('heavy_hit');
		thePlayer.StopEffect('light_hit');
		thePlayer.StopEffect('blood_spill');
		thePlayer.StopEffect('fistfight_heavy_hit');
		thePlayer.StopEffect('heavy_hit_horseriding');
		thePlayer.StopEffect('fistfight_hit');
		thePlayer.StopEffect('critical hit');
		thePlayer.StopEffect('death_hit');
		thePlayer.StopEffect('blood_throat_cut');
		thePlayer.StopEffect('hit_back');
		thePlayer.StopEffect('standard_hit');
		thePlayer.StopEffect('critical_bleeding'); 
		thePlayer.StopEffect('fistfight_hit_back'); 
		thePlayer.StopEffect('heavy_hit_back'); 
		thePlayer.StopEffect('light_hit_back'); 

		thePlayer.PlayEffectSingle('blood');
		thePlayer.PlayEffectSingle('death_blood');
		thePlayer.PlayEffectSingle('heavy_hit');
		thePlayer.PlayEffectSingle('light_hit');
		thePlayer.PlayEffectSingle('blood_spill');
		thePlayer.PlayEffectSingle('fistfight_heavy_hit');
		thePlayer.PlayEffectSingle('heavy_hit_horseriding');
		thePlayer.PlayEffectSingle('fistfight_hit');
		thePlayer.PlayEffectSingle('critical hit');
		thePlayer.PlayEffectSingle('death_hit');
		thePlayer.PlayEffectSingle('blood_throat_cut');
		thePlayer.PlayEffectSingle('hit_back');
		thePlayer.PlayEffectSingle('standard_hit');
		thePlayer.PlayEffectSingle('critical_bleeding'); 
		thePlayer.PlayEffectSingle('fistfight_hit_back'); 
		thePlayer.PlayEffectSingle('heavy_hit_back'); 
		thePlayer.PlayEffectSingle('light_hit_back');

		deathScenes.Clear();
		deathScenes.PushBack("dlc\dlc_acs\data\scenes\mq1060_03a_geralt_dead.w2scene");
		deathScenes.PushBack("dlc\dlc_acs\data\scenes\mq1060_03a_geralt_dead_1_hand_wounded_knockdown.w2scene");
		deathScenes.PushBack("dlc\dlc_acs\data\scenes\mq1060_03a_geralt_dead_throat_cut.w2scene");

		scene = (CStoryScene)(LoadResource(deathScenes[RandRange(deathScenes.Size())], true));

		theGame.GetStorySceneSystem().PlayScene(scene, "Input");

		RemoveTimer('KillGerry' );
		AddTimer('KillGerry', 6, false);
	}

	function Gerry_Gaunter_Death_Scene()
	{
		var environment_1, environment_2 							: CEnvironmentDefinition;	
		var envID_1, envID_2 										: int;

		thePlayer.StopEffect('blood');
		thePlayer.StopEffect('death_blood');
		thePlayer.StopEffect('heavy_hit');
		thePlayer.StopEffect('light_hit');
		thePlayer.StopEffect('blood_spill');
		thePlayer.StopEffect('fistfight_heavy_hit');
		thePlayer.StopEffect('heavy_hit_horseriding');
		thePlayer.StopEffect('fistfight_hit');
		thePlayer.StopEffect('critical hit');
		thePlayer.StopEffect('death_hit');
		thePlayer.StopEffect('blood_throat_cut');
		thePlayer.StopEffect('hit_back');
		thePlayer.StopEffect('standard_hit');
		thePlayer.StopEffect('critical_bleeding'); 
		thePlayer.StopEffect('fistfight_hit_back'); 
		thePlayer.StopEffect('heavy_hit_back'); 
		thePlayer.StopEffect('light_hit_back'); 

		thePlayer.SoundEvent("play_music_main_menu");

		thePlayer.SoundEvent("mus_credits_secondary_ep1");

		environment_2 = (CEnvironmentDefinition)LoadResource(

		"dlc\dlc_acs\data\env\q605_hell_red_blockout.env"

		, true);

		envID_2 = ActivateEnvironmentDefinition( environment_2, 1000, 1, 1.0f );

		theGame.SetEnvironmentID(envID_2);


		scene = (CStoryScene)(LoadResource("dlc\dlc_acs\data\scenes\q605_06_game_lost.w2scene", true));

		theGame.GetStorySceneSystem().PlayScene(scene, "Input");

		RemoveTimer('KillGerry_NoMute' );
		AddTimer('KillGerry_NoMute', 8, false);
	}

	function Gerry_Blade_Of_The_Unseen_Death_Scene()
	{
		var environment_1, environment_2 							: CEnvironmentDefinition;	
		var envID_1, envID_2 										: int;

		ACS_Blade_Of_The_Unseen().Destroy();

		GetACS_Blade_Of_The_Unseen_L_Blade().Destroy();

		GetACS_Blade_Of_The_Unseen_L_Anchor().Destroy();

		GetACS_Blade_Of_The_Unseen_R_Blade().Destroy();

		GetACS_Blade_Of_The_Unseen_R_Anchor().Destroy();

		thePlayer.StopEffect('blood');
		thePlayer.StopEffect('death_blood');
		thePlayer.StopEffect('heavy_hit');
		thePlayer.StopEffect('light_hit');
		thePlayer.StopEffect('blood_spill');
		thePlayer.StopEffect('fistfight_heavy_hit');
		thePlayer.StopEffect('heavy_hit_horseriding');
		thePlayer.StopEffect('fistfight_hit');
		thePlayer.StopEffect('critical hit');
		thePlayer.StopEffect('death_hit');
		thePlayer.StopEffect('blood_throat_cut');
		thePlayer.StopEffect('hit_back');
		thePlayer.StopEffect('standard_hit');
		thePlayer.StopEffect('critical_bleeding'); 
		thePlayer.StopEffect('fistfight_hit_back'); 
		thePlayer.StopEffect('heavy_hit_back'); 
		thePlayer.StopEffect('light_hit_back'); 

		thePlayer.SoundEvent("play_music_toussaint");

		thePlayer.SoundEvent("mus_q704_ambient_dark");

		environment_2 = (CEnvironmentDefinition)LoadResource(

		"dlc\dlc_acs\data\env\q605_hell_red_blockout.env"

		, true);

		envID_2 = ActivateEnvironmentDefinition( environment_2, 1000, 1, 1.0f );

		theGame.SetEnvironmentID(envID_2);


		scene = (CStoryScene)(LoadResource("dlc\dlc_acs\data\scenes\q704_08_original_kills.w2scene", true));

		theGame.GetStorySceneSystem().PlayScene(scene, "Input");

		RemoveTimer('KillGerry_NoMute' );
		AddTimer('KillGerry_NoMute', 14, false);
	}

	function Gerry_Death_Scene_Actual()
	{
		var playerPos, newPlayerPos					: Vector;

		if (ACS_Transformation_Werewolf_Check())
		{
			DisableWerewolf_Actual();
		}

		if (ACS_Transformation_Vampiress_Check())
		{
			DisableVampiress_Actual();
		}

		if (ACS_Transformation_Vampire_Monster_Check())
		{
			DisableTransformationVampireMonster_Actual_No_Teleport();
		}

		if (ACS_Transformation_Toad_Check())
		{
			DisableTransformationToad_Actual();
		}

		if (ACS_Transformation_Red_Miasmal_Check())
		{
			DisableRedMiasmal_Actual();
		}

		if (ACS_Transformation_Sharley_Check())
		{
			DisableSharley_Actual();
		}

		if (ACS_Transformation_Black_Wolf_Check())
		{
			DisableBlackWolf_Actual();
		}

		playerPos = thePlayer.GetWorldPosition();

		playerPos.Z += 2;

		thePlayer.TeleportWithRotation(playerPos, EulerAngles(0,0,0));

		thePlayer.BlockAction( EIAB_Crossbow, 			'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_CallHorse,			'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_Signs, 				'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_DrawWeapon, 		'ACS_Death_Scene'); 
		thePlayer.BlockAction( EIAB_FastTravel, 		'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_Fists, 				'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_InteractionAction, 	'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_UsableItem,			'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_ThrowBomb,			'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_SwordAttack,		'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_Jump,				'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_LightAttacks,		'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_HeavyAttacks,		'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_SpecialAttackLight,	'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_SpecialAttackHeavy,	'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_Dodge,				'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_Roll,				'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_Parry,				'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_MeditationWaiting,	'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_OpenMeditation,		'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_RadialMenu,			'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_Movement,			'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_Interactions, 		'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_QuickSlots, 		'ACS_Death_Scene');

		if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} 
		
		RemoveTimer('Manual_Combat_Control_Remove');

		thePlayer.GetMovingAgentComponent().GetMovementAdjustor().CancelAll();

		thePlayer.BreakAttachment();

		thePlayer.DestroyEffect('covered_blood_red_ACS');
		if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

		((CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent')).UnfreezePoseFadeOut(0.1);

		((CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent')).UnfreezePose();

		if (thePlayer.HasTag('ACS_Killed_By_Blade_Of_The_Unseen'))
		{
			Gerry_Blade_Of_The_Unseen_Death_Scene();

			return;
		}
		else
		{
			if ( FactsQuerySum("q601_done") > 0 )
			{
				if ( FactsQuerySum("q605_mirror_banished") > 0 )
				{
					Gerry_Normal_Death_Scene();

					return;
				}

				if ( FactsQuerySum("q605_mirror_won") > 0 )
				{
					Gerry_Gaunter_Death_Scene();

					return;
				}

				if( RandF() < 0.5 ) 
				{
					Gerry_Gaunter_Death_Scene();
				}
				else
				{
					Gerry_Normal_Death_Scene();
				}
			}
			else
			{
				if( RandF() < 0.01 ) 
				{
					Gerry_Gaunter_Death_Scene();
				}
				else
				{
					Gerry_Normal_Death_Scene();
				}
			}
		}
	}

	function ACS_Kill_Player()
	{
		var action : W3DamageAction;

		theGame.FadeOutAsync( 0.5 , Color(255,0,0) );
		/*

		GetWitcherPlayer().SetImmortalityMode( AIM_None, AIC_Default, true );
		GetWitcherPlayer().RemoveBuffImmunity_AllNegative('god');

		action = new W3DamageAction in theGame.damageMgr;
		action.Initialize( NULL, thePlayer, theGame, 'ACS_Debug', EHRT_None, CPS_Undefined, false, false, true, false);
		action.AddDamage(theGame.params.DAMAGE_NAME_DIRECT, thePlayer.GetStatMax(BCS_Vitality) + 1 );
		action.SetCanPlayHitParticle(false);
		action.SetSuppressHitSounds(true);
		
		theGame.damageMgr.ProcessAction( action );
		delete action;
		*/

		thePlayer.UnblockAction( EIAB_Crossbow, 			'ACS_Death_Scene');
		thePlayer.UnblockAction( EIAB_CallHorse,			'ACS_Death_Scene');
		thePlayer.UnblockAction( EIAB_Signs, 				'ACS_Death_Scene');
		thePlayer.UnblockAction( EIAB_DrawWeapon, 			'ACS_Death_Scene'); 
		thePlayer.UnblockAction( EIAB_FastTravel, 			'ACS_Death_Scene');
		thePlayer.UnblockAction( EIAB_Fists, 				'ACS_Death_Scene');
		thePlayer.UnblockAction( EIAB_InteractionAction, 	'ACS_Death_Scene');
		thePlayer.UnblockAction( EIAB_UsableItem,			'ACS_Death_Scene');
		thePlayer.UnblockAction( EIAB_ThrowBomb,			'ACS_Death_Scene');
		thePlayer.UnblockAction( EIAB_SwordAttack,			'ACS_Death_Scene');
		thePlayer.UnblockAction( EIAB_Jump,					'ACS_Death_Scene');
		thePlayer.UnblockAction( EIAB_LightAttacks,			'ACS_Death_Scene');
		thePlayer.UnblockAction( EIAB_HeavyAttacks,			'ACS_Death_Scene');
		thePlayer.UnblockAction( EIAB_SpecialAttackLight,	'ACS_Death_Scene');
		thePlayer.UnblockAction( EIAB_SpecialAttackHeavy,	'ACS_Death_Scene');
		thePlayer.UnblockAction( EIAB_Dodge,				'ACS_Death_Scene');
		thePlayer.UnblockAction( EIAB_Roll,					'ACS_Death_Scene');
		thePlayer.UnblockAction( EIAB_Parry,				'ACS_Death_Scene');
		thePlayer.UnblockAction( EIAB_MeditationWaiting,	'ACS_Death_Scene');
		thePlayer.UnblockAction( EIAB_OpenMeditation,		'ACS_Death_Scene');
		thePlayer.UnblockAction( EIAB_RadialMenu,			'ACS_Death_Scene');
		thePlayer.UnblockAction( EIAB_Movement,				'ACS_Death_Scene');
		thePlayer.UnblockAction( EIAB_Interactions, 		'ACS_Death_Scene');
		thePlayer.UnblockAction( EIAB_QuickSlots, 			'ACS_Death_Scene');

		thePlayer.Kill('ACS_Debug', true);
	}

	private	var	m_storedInteractionPri 		: EInteractionPriority; 
	
	default	m_storedInteractionPri 		= IP_NotSet;

	function ChangeInteractionPriority()
	{
		if ( thePlayer.GetInteractionPriority() != IP_Max_Unpushable )
		{
			m_storedInteractionPri = thePlayer.GetInteractionPriority();
			thePlayer.SetInteractionPriority( IP_Max_Unpushable );
		}
	}

	function ResetInteractionPriority()
	{
		if ( m_storedInteractionPri != IP_NotSet )
		{
			thePlayer.SetInteractionPriority( m_storedInteractionPri );
		}

		m_storedInteractionPri = IP_NotSet;
	}

	function ACS_Unconscious_Create_Savelock()
	{
		theGame.CreateNoSaveLock( "ACS_Unconscious_State", ACS_Unconscious_Savelock_ID, false, false );
	}

	function Gerry_Unconscious_State_Actual()
	{
		theGame.FadeOutAsync( 1.5 , Color(70,0,0) );

		//((CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent')).FreezePoseFadeIn(2.5);

		RemoveTimer('Unconscious_State_Restore');
		AddTimer('Unconscious_State_Restore', 5, false);

		RemoveTimer('Unconscious_State_Timeflow');
		AddTimer('Unconscious_State_Timeflow', 2.5, false);
	}

	public timer function Unconscious_State_Timeflow( deltaTime : float , id : int){Unconscious_State_Timeflow_Actual();}

	function Unconscious_State_Timeflow_Actual()
	{
		var fastForward : CGameFastForwardSystem;
		
		storedHoursPerMinute = theGame.GetHoursPerMinute();

		fastForward = theGame.GetFastForwardSystem();
		fastForward.BeginFastForward(true, false);
		
		theGame.SetHoursPerMinute(180 * storedHoursPerMinute);

		((CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent')).UnfreezePose();

		ACS_RemovePotionEffects();

		ACS_GuardForgetPlayer();

		if (GetWitcherPlayer().IsAnyWeaponHeld() && !GetWitcherPlayer().IsWeaponHeld('fist'))
		{
			thePlayer.OnMeleeForceHolster( true );
			thePlayer.OnRangedForceHolster( true );
		}
	}

	function Unconscious_State_Restore_Actual()
	{
		var fastForward : CGameFastForwardSystem;

		fastForward.AllowFastForwardSelfCompletion();

		theGame.SetHoursPerMinute(storedHoursPerMinute);

		((CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent')).FreezePose();

		((CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent')).UnfreezePoseFadeOut(3);

		RemoveTimer('Unconscious_State_End');

		if (RandF() < 0.5)
		{
			thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'man_fistfight_hit_knockdown_f_getup_exploration_1', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0.5) );

			AddTimer('Unconscious_State_End', 15, false);
		}
		else
		{
			thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'man_fistfight_hit_knockdown_f_getup_exploration_2', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0.5) );

			AddTimer('Unconscious_State_End', 15, false);
		}
		
		theGame.FadeInAsync( 1.5 );

		GetWitcherPlayer().DisplayHudMessage( GetLocStringByKeyExt("panel_hud_message_guards_took_money") );
	}

	public timer function Unconscious_State_End( deltaTime : float , id : int){Unconscious_State_End_Actual();}

	function Unconscious_State_End_Actual()
	{
		GetWitcherPlayer().SetCanPlayHitAnim(true);

		GetWitcherPlayer().SetImmortalityMode( AIM_None, AIC_Default, true );

		GetWitcherPlayer().RemoveBuffImmunity_AllCritical('ACS_Unconscious');

		GetWitcherPlayer().RemoveBuffImmunity_AllNegative('ACS_Unconscious');

		thePlayer.UnblockAction( EIAB_Crossbow, 			'ACS_Unconscious_State');
		thePlayer.UnblockAction( EIAB_CallHorse,			'ACS_Unconscious_State');
		thePlayer.UnblockAction( EIAB_Signs, 				'ACS_Unconscious_State');
		thePlayer.UnblockAction( EIAB_DrawWeapon, 			'ACS_Unconscious_State'); 
		thePlayer.UnblockAction( EIAB_FastTravel, 			'ACS_Unconscious_State');
		thePlayer.UnblockAction( EIAB_Fists, 				'ACS_Unconscious_State');
		thePlayer.UnblockAction( EIAB_InteractionAction, 	'ACS_Unconscious_State');
		thePlayer.UnblockAction( EIAB_UsableItem,			'ACS_Unconscious_State');
		thePlayer.UnblockAction( EIAB_ThrowBomb,			'ACS_Unconscious_State');
		thePlayer.UnblockAction( EIAB_SwordAttack,			'ACS_Unconscious_State');
		thePlayer.UnblockAction( EIAB_Jump,					'ACS_Unconscious_State');
		thePlayer.UnblockAction( EIAB_LightAttacks,			'ACS_Unconscious_State');
		thePlayer.UnblockAction( EIAB_HeavyAttacks,			'ACS_Unconscious_State');
		thePlayer.UnblockAction( EIAB_SpecialAttackLight,	'ACS_Unconscious_State');
		thePlayer.UnblockAction( EIAB_SpecialAttackHeavy,	'ACS_Unconscious_State');
		thePlayer.UnblockAction( EIAB_Dodge,				'ACS_Unconscious_State');
		thePlayer.UnblockAction( EIAB_Roll,					'ACS_Unconscious_State');
		thePlayer.UnblockAction( EIAB_Parry,				'ACS_Unconscious_State');
		thePlayer.UnblockAction( EIAB_MeditationWaiting,	'ACS_Unconscious_State');
		thePlayer.UnblockAction( EIAB_OpenMeditation,		'ACS_Unconscious_State');
		thePlayer.UnblockAction( EIAB_RadialMenu,			'ACS_Unconscious_State');
		thePlayer.UnblockAction( EIAB_Movement,				'ACS_Unconscious_State');
		thePlayer.UnblockAction( EIAB_Interactions, 		'ACS_Unconscious_State');
		thePlayer.UnblockAction( EIAB_QuickSlots, 			'ACS_Unconscious_State');
		thePlayer.UnblockAction( EIAB_Explorations, 		'ACS_Unconscious_State');

		theGame.ReleaseNoSaveLock( ACS_Unconscious_Savelock_ID );

		ResetInteractionPriority();

		if (FactsQuerySum("ACS_Enter_Unconscious_Start") > 0)
		{
			FactsRemove("ACS_Enter_Unconscious_Start");
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function shield_play_anim()
	{
		RemoveTimer('ACS_ShieldEntityDamage');

		RemoveTimer('ACS_ShieldEntityDamage_2');

		RemoveTimer('ACS_ShieldEntityDamageShort');

		shieldAnimatedComponent = (CAnimatedComponent)ACS_Shield_Entity().GetComponentByClassName( 'CAnimatedComponent' );	

		actor = (CActor)( thePlayer.GetDisplayTarget() );

		shieldMovementAdjustor = ((CMovingPhysicalAgentComponent)ACS_Shield_Entity().GetMovingAgentComponent()).GetMovementAdjustor();

		shieldMovementAdjustor.CancelAll();
		
		shieldTicket = shieldMovementAdjustor.CreateNewRequest( 'ACS_Shield_Movement_Adjust' );

		shieldMovementAdjustor.AdjustmentDuration( shieldTicket, 0.25 );
		//shieldMovementAdjustor.ShouldStartAt(shieldTicket, ACS_Shield_Entity().GetWorldPosition());
		shieldMovementAdjustor.MaxRotationAdjustmentSpeed( shieldTicket, 50000 );
		shieldMovementAdjustor.MaxLocationAdjustmentSpeed( shieldTicket, 50000 );
		//shieldMovementAdjustor.AdjustLocationVertically( shieldTicket, true );
		//shieldMovementAdjustor.ScaleAnimationLocationVertically( shieldTicket, true );

		shieldMovementAdjustor.RotateTo( shieldTicket, VecHeading(thePlayer.GetHeadingVector()) );

		acs_shield_attack_index_1 = RandDifferent(this.previous_acs_shield_attack_index_1 , 7);

		switch (acs_shield_attack_index_1) 
		{	
			case 6:
			AddTimer('ACS_ShieldEntityDamage', 0.75, false);

			AddTimer('ACS_ShieldEntityDamage_2', 1.25, false);

			shieldAnimatedComponent.PlaySlotAnimationAsync ( 'monster_lessun_counter_attack', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 1.0f) );
			break;

			case 5:
			AddTimer('ACS_ShieldEntityDamageShort', 0.5, false);

			shieldAnimatedComponent.PlaySlotAnimationAsync ( 'monster_lessun_attack_back', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 1.0f));
			break;

			case 4:
			AddTimer('ACS_ShieldEntityDamage', 0.75, false);

			shieldAnimatedComponent.PlaySlotAnimationAsync ( 'monster_lessun_attack_right_swing', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 1.0f));
			break;
				
			case 3:
			AddTimer('ACS_ShieldEntityDamage', 0.75, false);

			shieldAnimatedComponent.PlaySlotAnimationAsync ( 'monster_lessun_attack_right', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 1.0f));
			break;

			case 2:
			AddTimer('ACS_ShieldEntityDamage', 0.75, false);

			shieldAnimatedComponent.PlaySlotAnimationAsync ( 'monster_lessun_attack_left_swing', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 1.0f));
			break;	
				
			case 1:
			AddTimer('ACS_ShieldEntityDamage', 0.75, false);

			shieldAnimatedComponent.PlaySlotAnimationAsync ( 'monster_lessun_attack_left', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 1.0f));
			break;

			default:
			AddTimer('ACS_ShieldEntityDamage', 0.75, false);

			shieldAnimatedComponent.PlaySlotAnimationAsync ( 'monster_lessun_attack_center', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 1.0f));
			break;
		}
			
		this.previous_acs_shield_attack_index_1 = acs_shield_attack_index_1;

		/*
		ACS_Shield_Entity().StopEffect('yrden_shock');
		ACS_Shield_Entity().PlayEffectSingle('yrden_shock');

		ACS_Shield_Entity().StopEffect('yrden_slowdown');
		ACS_Shield_Entity().PlayEffectSingle('yrden_slowdown');

		ACS_Shield_Entity().StopEffect('yrden_paralysis');
		ACS_Shield_Entity().PlayEffectSingle('yrden_paralysis');

		ACS_Shield_Entity().PlayEffectSingle('demonic_possession');
		ACS_Shield_Entity().StopEffect('demonic_possession');
		*/
	}

	function ShieldEntityDamageActual()
	{
		actors.Clear();

		actors = thePlayer.GetNPCsAndPlayersInCone(6, VecHeading(thePlayer.GetHeadingVector()), 90, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				actortarget = (CActor)actors[i];

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetHitReactionType( EHRT_Heavy, true);

				dmg.SetIgnoreImmortalityMode(false);
				
				//dmg.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, RandRangeF(damageMax,damageMin) );

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality ) - actortarget.GetStat( BCS_Vitality );

					damageMax = maxTargetVitality * 0.20; 

					damageMin = maxTargetVitality * 0.145; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence ) - actortarget.GetStat( BCS_Essence );
					
					damageMax = maxTargetEssence * 0.225; 
					
					damageMin = maxTargetEssence * 0.145; 
				}

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(50 + damageMax,50 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(50 + damageMax,50 + damageMin) );

				if( !actortarget.IsImmuneToBuff( EET_Stagger ) && !actortarget.HasBuff( EET_Stagger ) ) 
				{ 
					dmg.AddEffectInfo( EET_Stagger, 0.1 );
				}

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	

				thePlayer.SoundEvent("cmb_play_dismemberment_gore");

				thePlayer.SoundEvent("monster_dettlaff_monster_vein_hit_blood");
			}
		}
	}

	function ShieldEntityDamageShortActual()
	{
		actors.Clear();

		actors = thePlayer.GetNPCsAndPlayersInCone(4, VecHeading(thePlayer.GetHeadingVector()), 60, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				actortarget = (CActor)actors[i];

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetHitReactionType( EHRT_Heavy, true);

				dmg.SetIgnoreImmortalityMode(false);
				
				//dmg.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, RandRangeF(damageMax,damageMin) );

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality ) - actortarget.GetStat( BCS_Vitality );

					damageMax = maxTargetVitality * 0.20; 

					damageMin = maxTargetVitality * 0.145; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence ) - actortarget.GetStat( BCS_Essence );
					
					damageMax = maxTargetEssence * 0.225; 
					
					damageMin = maxTargetEssence * 0.145; 
				}

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(50 + damageMax,50 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(50 + damageMax,50 + damageMin) );

				if( !actortarget.IsImmuneToBuff( EET_Stagger ) && !actortarget.HasBuff( EET_Stagger ) ) 
				{ 
					dmg.AddEffectInfo( EET_Stagger, 0.1 );
				}

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	

				thePlayer.SoundEvent("cmb_play_dismemberment_gore");

				thePlayer.SoundEvent("monster_dettlaff_monster_vein_hit_blood");
			}
		}
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function FinisherCheck() : bool
	{
		if ( thePlayer.HasTag('ACS_IsPerformingFinisher'))
		{
			return false;
		}

		return true;
	}

	function CrossbowCheck() : bool
	{
		if ( thePlayer.IsCrossbowHeld() )
		{
			return false;
		}

		return true;
	}
	
	function CiriCheck() : bool
	{
		if ( thePlayer.IsCiri() )
		{
			return false;
		}

		return true;
	}

	function WraithModeCheck() : bool
	{
		if ( thePlayer.HasTag('in_wraith') )
		{
			return false;
		}

		return true;
	}

	function BruxaBiteCheck() : bool
	{
		if ( thePlayer.HasTag('blood_sucking') )
		{
			return false;
		}

		return true;
	}

	function HitAnimCheck() : bool
	{
		if ( thePlayer.IsInHitAnim() )
		{
			return false;
		}

		return true;
	}

	function StaminaCheck() : bool
	{
		if ( thePlayer.GetStat( BCS_Stamina ) <= thePlayer.GetStatMax( BCS_Stamina ) * 0.15 )
		{
			return true;
		}

		return false;
	}

	function VampireClawsStaminaCheck() : bool
	{
		if ( thePlayer.GetStat( BCS_Stamina ) <= thePlayer.GetStatMax( BCS_Stamina ) * 0.05 )
		{
			return true;
		}

		return false;
	}

	function FinisherDistanceCheck(finisherActor : CActor) : bool
	{
		if ( VecDistanceSquared2D( thePlayer.GetWorldPosition(), finisherActor.GetNearestPointInBothPersonalSpaces( thePlayer.GetWorldPosition() ) ) < 2.75f * 2.75f
		&& ( thePlayer.HasTag('axii_sword_equipped') 
		|| thePlayer.HasTag('axii_secondary_sword_equipped') 
		|| thePlayer.HasTag('quen_sword_equipped') 
		|| thePlayer.HasTag('igni_sword_equipped') 
		|| thePlayer.HasTag('igni_secondary_sword_equipped'))
		)
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function ACS_Setup_Light_Attack_Internal()
	{
		vACS_Setup_Combat_Action_Light = new cACS_Setup_Combat_Action_Light in this; 
		
		if ( ACS_StaminaBlockAction_Enabled() 
		&& StaminaCheck()
		)
		{							 
			if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
		}
		else
		{
			vACS_Setup_Combat_Action_Light.Setup_Combat_Action_Light_Engage();
		}
	}

	function ACS_Setup_Heavy_Attack_Internal()
	{
		vACS_Setup_Combat_Action_Heavy = new cACS_Setup_Combat_Action_Heavy in this; 

		if ( ACS_StaminaBlockAction_Enabled() 
		&& StaminaCheck()
		)
		{							 
			if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
		}
		else
		{
			vACS_Setup_Combat_Action_Heavy.Setup_Combat_Action_Heavy_Engage();
		}
	}

	function ClawFistLightAttack()
	{
		if (ACS_New_Replacers_Female_Active() || thePlayer.IsCiri())
		{
			ACS_Setup_Light_Attack_Internal();
			return;
		}

		if (CiriCheck() 
		&& FinisherCheck()
		&& CrossbowCheck()
		&& ACS_BuffCheck()
		&& WraithModeCheck() 
		&& BruxaBiteCheck()
		&& HitAnimCheck())
		{
			DeactivateThings();

			ACS_ThingsThatShouldBeRemoved();

			if (ACS_GetWeaponMode() == 0)
			{
				if (ACS_GetFistMode() == 0)
				{
					PrimaryWeaponSwitch();

					ACS_Setup_Light_Attack_Internal();
				}
				else if (ACS_GetFistMode() == 1)
				{
					VampClawLightAttack();
				}
				else if (ACS_GetFistMode() == 2)
				{
					PrimaryWeaponSwitch();

					ShockwaveFistLightAttack();
				}
			}
			else if (ACS_GetWeaponMode() == 1)
			{
				if (ACS_GetFistMode() == 0)
				{
					PrimaryWeaponSwitch();

					ACS_Setup_Light_Attack_Internal();
				}
				else if (ACS_GetFistMode() == 1)
				{
					VampClawLightAttack();
				}
				else if (ACS_GetFistMode() == 2)
				{
					PrimaryWeaponSwitch();

					ShockwaveFistLightAttack();
				}
			}
			else if (ACS_GetWeaponMode() == 2)
			{
				if (ACS_GetFistMode() == 0)
				{
					PrimaryWeaponSwitch();

					ACS_Setup_Light_Attack_Internal();
				}
				else if (ACS_GetFistMode() == 1)
				{
					VampClawLightAttack();
				}
				else if (ACS_GetFistMode() == 2)
				{
					PrimaryWeaponSwitch();

					ShockwaveFistLightAttack();
				}
			}
			else if (ACS_GetWeaponMode() == 3)
			{
				if (ACS_GetItem_VampClaw() || ACS_GetItem_VampClaw_Shades())
				{
					VampClawLightAttack();
				}
				else
				{
					PrimaryWeaponSwitch();

					ACS_Setup_Light_Attack_Internal();

					//NormalFistLightAttack();

					//VampClawLightAttack();
				}
			}

			DeactivateThings();
		}
	}

	function ClawFistHeavyAttack()
	{
		if (ACS_New_Replacers_Female_Active() || thePlayer.IsCiri())
		{
			ACS_Setup_Heavy_Attack_Internal();
			return;
		}

		if (thePlayer.IsActionAllowed(EIAB_HeavyAttacks)
		&& CiriCheck() 
		&& FinisherCheck()
		&& CrossbowCheck()
		&& ACS_BuffCheck()
		&& WraithModeCheck() 
		&& BruxaBiteCheck()
		&& HitAnimCheck())
		{
			DeactivateThings();

			ACS_ThingsThatShouldBeRemoved_NoBruxaTackleOrPortableAard();

			ACS_ExplorationDelayHack();

			RemoveTimer('ACS_ResetAnimation');
			RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

			if (ACS_GetWeaponMode() == 0)
			{
				if (ACS_GetFistMode() == 0)
				{
					PrimaryWeaponSwitch();

					ACS_Setup_Heavy_Attack_Internal();	
				}
				else if (ACS_GetFistMode() == 1)
				{
					VampClawHeavyAttack();
				}
				else if (ACS_GetFistMode() == 2)
				{
					PrimaryWeaponSwitch();

					ShockwaveFistHeavyAttack();
				}
			}
			else if (ACS_GetWeaponMode() == 1)
			{
				if (ACS_GetFistMode() == 0)
				{
					PrimaryWeaponSwitch();

					ACS_Setup_Heavy_Attack_Internal();	
				}
				else if (ACS_GetFistMode() == 1)
				{
					VampClawHeavyAttack();
				}
				else if (ACS_GetFistMode() == 2)
				{
					PrimaryWeaponSwitch();

					ShockwaveFistHeavyAttack();
				}
			}
			else if (ACS_GetWeaponMode() == 2)
			{
				if (ACS_GetFistMode() == 0)
				{
					PrimaryWeaponSwitch();

					ACS_Setup_Heavy_Attack_Internal();	
				}
				else if (ACS_GetFistMode() == 1)
				{
					VampClawHeavyAttack();
				}
				else if (ACS_GetFistMode() == 2)
				{
					PrimaryWeaponSwitch();

					ShockwaveFistHeavyAttack();
				}
			}
			else if (ACS_GetWeaponMode() == 3)
			{
				if (ACS_GetItem_VampClaw() || ACS_GetItem_VampClaw_Shades())
				{
					VampClawHeavyAttack();
				}
				else
				{
					PrimaryWeaponSwitch();

					ACS_Setup_Heavy_Attack_Internal();	

					//thePlayer.SetupCombatAction( EBAT_HeavyAttack, BS_Pressed );

					//NormalFistHeavyAttack();

					//VampClawHeavyAttack();
				}
			}

			DeactivateThings();
		}
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function CustomFinishersBindTrigger(bind: ACS_CustomFinisherBind): bool 
	{
		return bind == ACS_CustomFinisherBind_None && theInput.GetActionValue('GI_AxisLeftY') == 0 && theInput.GetActionValue('GI_AxisLeftX') == 0
		|| bind == ACS_CustomFinisherBind_Forward && theInput.GetActionValue('GI_AxisLeftY') > 0.1 && theInput.GetActionValue('GI_AxisLeftX') == 0
		|| bind == ACS_CustomFinisherBind_Backward && theInput.GetActionValue('GI_AxisLeftY') < -0.1 && theInput.GetActionValue('GI_AxisLeftX') == 0
		|| bind == ACS_CustomFinisherBind_Left && theInput.GetActionValue('GI_AxisLeftX') < -0.1 && theInput.GetActionValue('GI_AxisLeftY') == 0
		|| bind == ACS_CustomFinisherBind_Right && theInput.GetActionValue('GI_AxisLeftX') > 0.1 && theInput.GetActionValue('GI_AxisLeftY') == 0
		|| bind == ACS_CustomFinisherBind_ForwardLeft && theInput.GetActionValue('GI_AxisLeftY') > 0.1 && theInput.GetActionValue('GI_AxisLeftX') < -0.1
		|| bind == ACS_CustomFinisherBind_ForwardRight && theInput.GetActionValue('GI_AxisLeftY') > 0.1 && theInput.GetActionValue('GI_AxisLeftX') > 0.1
		|| bind == ACS_CustomFinisherBind_BackwardLeft && theInput.GetActionValue('GI_AxisLeftX') < -0.1 && theInput.GetActionValue('GI_AxisLeftY') < -0.1
		|| bind == ACS_CustomFinisherBind_BackwardRight && theInput.GetActionValue('GI_AxisLeftX') > 0.1 && theInput.GetActionValue('GI_AxisLeftY') < -0.1;
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function ParrySkillsBindTrigger(bind: ACS_ParrySkillsBind): bool 
	{
		return bind == ACS_ParrySkillsBind_Forward && theInput.GetActionValue('GI_AxisLeftY') > 0.85
		|| bind == ACS_ParrySkillsBind_Left && theInput.GetActionValue('GI_AxisLeftX') < -0.85
		|| bind == ACS_ParrySkillsBind_Backward && theInput.GetActionValue('GI_AxisLeftY') < -0.85
		|| bind == ACS_ParrySkillsBind_Right && theInput.GetActionValue('GI_AxisLeftX') > 0.85
		|| bind == ACS_ParrySkillsBindForwardOrBackward && theInput.GetActionValue('GI_AxisLeftY') != 0
		|| bind == ACS_ParrySkillsBind_LeftOrRight && theInput.GetActionValue('GI_AxisLeftX') != 0
		|| bind == ACS_ParrySkillsBind_LightAttack && (theInput.GetActionValue('AttackLight') > 0.7f || theInput.GetActionValue('AttackWithAlternateLight') > 0.7f) 
		|| bind == ACS_ParrySkillsBind_HeavyAttack && (theInput.GetActionValue('AttackHeavy') > 0.7f || theInput.GetActionValue('AttackWithAlternateHeavy') > 0.7f) ;
	}

	function GuardAttack()
	{
		if ( thePlayer.IsActionAllowed(EIAB_Parry) )
		{
			if (
			CiriCheck() 
			&& HitAnimCheck()
			&& FinisherCheck()
			&& CrossbowCheck()
			&& ACS_BuffCheck()
			&& BruxaBiteCheck()
			)
			{
				DeactivateThings();

				ACS_ThingsThatShouldBeRemoved();

				ACS_ExplorationDelayHackForGuard();

				RemoveTimer('ParrySkillsDelayTimer');

				AddTimer('ParrySkillsDelayTimer', 0.06125, false);

				if(thePlayer.HasTag('axii_sword_equipped'))
				{
					RemoveTimer('ACS_Shield_Spawn_Delay');

					if (theInput.GetActionValue('GI_AxisLeftX') != 0
					|| theInput.GetActionValue('GI_AxisLeftY') != 0
					)
					{
						AddTimer('ACS_Shield_Spawn_Delay', 0.56125, false);
					}
					else
					{
						AddTimer('ACS_Shield_Spawn_Delay', 0.11125, false);
					}
				}

				DeactivateThings();
			}
		}
	}

	timer function ParrySkillsDelayTimer(dt : float, id : int)
	{
		PerformKick();

		ParrySkills();
	}

	function ParrySkills() : bool
	{
		if (!ACS_ParrySkillsEnabled())
		{
			return false;
		}

		if ( WraithModeCheck() )
		{
			if (ACS_GetWeaponMode() == 0)
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{							 
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");

					return false;
				}
				else
				{
					ACS_StaminaDrain(1);

					if (ParrySkillsBindTrigger(ACS_GetParrySkillsBind()))
					{	
						if ( !thePlayer.IsWeaponHeld( 'fist' ) && !thePlayer.HasTag('vampire_claws_equipped') )
						{
							if ( thePlayer.GetEquippedSign() == ST_Igni )
							{
								if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 0)
								{
									IgniCounterActual();
								}
								else if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 1)
								{
									QuenCounterActual();
								}
								else if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 2)
								{
									AxiiCounterActual();
								}
								else if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 3)
								{
									AardCounterActual();
								}
								else if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 4)
								{
									YrdenCounterActual();
								}
							}
							else if ( thePlayer.GetEquippedSign() == ST_Axii )
							{
								if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 0)
								{
									IgniCounterActual();
								}
								else if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 1)
								{
									QuenCounterActual();
								}
								else if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 2)
								{
									AxiiCounterActual();
								}
								else if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 3)
								{
									AardCounterActual();
								}
								else if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 4)
								{
									YrdenCounterActual();
								}
							}
							else if ( thePlayer.GetEquippedSign() == ST_Aard )
							{
								if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 0)
								{
									IgniCounterActual();
								}
								else if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 1)
								{
									QuenCounterActual();
								}
								else if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 2)
								{
									AxiiCounterActual();
								}
								else if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 3)
								{
									AardCounterActual();
								}
								else if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 4)
								{
									YrdenCounterActual();
								}
							}
							else if ( thePlayer.GetEquippedSign() == ST_Quen )
							{
								if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 0)
								{
									IgniCounterActual();
								}
								else if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 1)
								{
									QuenCounterActual();
								}
								else if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 2)
								{
									AxiiCounterActual();
								}
								else if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 3)
								{
									AardCounterActual();
								}
								else if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 4)
								{
									YrdenCounterActual();
								}
							}
							else if ( thePlayer.GetEquippedSign() == ST_Yrden )
							{
								if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 0)
								{
									IgniCounterActual();
								}
								else if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 1)
								{
									QuenCounterActual();
								}
								else if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 2)
								{
									AxiiCounterActual();
								}
								else if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 3)
								{
									AardCounterActual();
								}
								else if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 4)
								{
									YrdenCounterActual();
								}
							}
						}
						else
						{	
							if (ACS_can_perform_parry_skill()
							&& ACS_GetFistMode() == 1)
							{
								ACS_refresh_parry_skill_cooldown();
															
								geraltRandomVampireCounter();

								thePlayer.SetAnimationSpeedMultiplier(1.5  );

								RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
								
								ACS_StaminaDrain(1);
							}
						}
					}

					if (ParrySkillsBindTrigger(ACS_GetPushSkillsBind()))
					{	
						if (ACS_can_perform_parry_skill())
						{
							ACS_refresh_parry_skill_cooldown();

							geraltRandomPush();
							
							ACS_StaminaDrain(1);
						}

						return true;	
					}

					if ( ParrySkillsBindTrigger(ACS_GetDaggerBind()))
					{	
						if (ACS_can_perform_parry_skill())
						{
							ACS_refresh_parry_skill_cooldown();

							geraltRandomPunch();

							ACS_StaminaDrain(1);
						}	
					}

					return true;
				}
			}
			else if (ACS_GetWeaponMode() == 1)
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");

					return false;
				}
				else
				{
					ACS_StaminaDrain(1);

					if (ParrySkillsBindTrigger(ACS_GetParrySkillsBind()))
					{	
						if ( !thePlayer.IsWeaponHeld( 'fist' ) )
						{
							if ( thePlayer.IsWeaponHeld( 'silversword' ) )
							{
								if ( ACS_GetFocusModeSilverWeapon() == 0 )
								{
									IgniCounterActual();
								}
								else if ( ACS_GetFocusModeSilverWeapon() == 1 )
								{
									HybridModeOlgierdCounterActual();
								}
								else if ( ACS_GetFocusModeSilverWeapon() == 2 )
								{
									HybridModeSpearCounterActual();
								}
								else if ( ACS_GetFocusModeSilverWeapon() == 3 )
								{
									HybridModeEredinShieldCounterActual();
								}
								else if ( ACS_GetFocusModeSilverWeapon() == 4 )
								{
									HybridModeGregCounterActual();
								}
								else if ( ACS_GetFocusModeSilverWeapon() == 5 )
								{
									HybridModeImlerithCounterActual();
								}
								else if ( ACS_GetFocusModeSilverWeapon() == 6 )
								{
									HybridModeGiantCounterActual();
								}
								else if ( ACS_GetFocusModeSilverWeapon() == 7 )
								{
									HybridModeClawCounterActual();
								}
								else if ( ACS_GetFocusModeSilverWeapon() == 8 )
								{
									HybridModeAxeCounterActual();
								}
							}
							else if ( thePlayer.IsWeaponHeld('steelsword') )
							{
								if ( ACS_GetFocusModeSteelWeapon() == 0 )
								{
									IgniCounterActual();
								}
								else if ( ACS_GetFocusModeSteelWeapon() == 1 )
								{
									HybridModeOlgierdCounterActual();
								}
								else if ( ACS_GetFocusModeSteelWeapon() == 2 )
								{
									HybridModeSpearCounterActual();
								}
								else if ( ACS_GetFocusModeSteelWeapon() == 3 )
								{
									HybridModeEredinShieldCounterActual();
								}
								else if ( ACS_GetFocusModeSteelWeapon() == 4 )
								{
									HybridModeGregCounterActual();
								}
								else if ( ACS_GetFocusModeSteelWeapon() == 5 )
								{
									HybridModeImlerithCounterActual();
								}
								else if ( ACS_GetFocusModeSteelWeapon() == 6 )
								{
									HybridModeGiantCounterActual();
								}
								else if ( ACS_GetFocusModeSteelWeapon() == 7 )
								{
									HybridModeClawCounterActual();
								}
								else if ( ACS_GetFocusModeSteelWeapon() == 8 )
								{
									HybridModeAxeCounterActual();
								}
							}
						}
						else
						{	
							if (ACS_can_perform_parry_skill()
							&& ACS_GetFistMode() == 1)
							{
								ACS_refresh_parry_skill_cooldown();
															
								geraltRandomVampireCounter();

								thePlayer.SetAnimationSpeedMultiplier(1.5  );

								RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
								
								ACS_StaminaDrain(1);
							}
						}
					}

					if (ParrySkillsBindTrigger(ACS_GetPushSkillsBind()))
					{	
						if (ACS_can_perform_parry_skill())
						{
							ACS_refresh_parry_skill_cooldown();

							geraltRandomPush();
							
							ACS_StaminaDrain(1);
						}	
					}

					if ( ParrySkillsBindTrigger(ACS_GetDaggerBind()))
					{	
						if (ACS_can_perform_parry_skill())
						{
							ACS_refresh_parry_skill_cooldown();

							geraltRandomPunch();

							ACS_StaminaDrain(1);
						}	
					}

					return true;
				}
			}
			else if (ACS_GetWeaponMode() == 2)
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");

					return false;
				}
				else
				{
					ACS_StaminaDrain(1);

					if (ParrySkillsBindTrigger(ACS_GetParrySkillsBind()))
					{	
						if ( !thePlayer.IsWeaponHeld( 'fist' ) )
						{
							if ( thePlayer.IsWeaponHeld( 'silversword' ) || thePlayer.IsWeaponHeld('steelsword') )
							{
								if ( ACS_GetHybridModeCounterAttack() == 0 )
								{
									if (!thePlayer.HasTag('HybridDefaultWeaponTicket')){thePlayer.AddTag('HybridDefaultWeaponTicket');}

									IgniCounterActual();
								}
								else if ( ACS_GetHybridModeCounterAttack() == 1 )
								{
									if (!thePlayer.HasTag('HybridOlgierdWeaponTicket')){thePlayer.AddTag('HybridOlgierdWeaponTicket');}

									HybridModeOlgierdCounterActual();
								}
								else if ( ACS_GetHybridModeCounterAttack() == 2 )
								{
									if (!thePlayer.HasTag('HybridEredinWeaponTicket')){thePlayer.AddTag('HybridEredinWeaponTicket');}

									HybridModeEredinShieldCounterActual();
								}
								else if ( ACS_GetHybridModeCounterAttack() == 3 )
								{
									if (!thePlayer.HasTag('HybridClawWeaponTicket')){thePlayer.AddTag('HybridClawWeaponTicket');}

									HybridModeClawCounterActual();
								}
								else if ( ACS_GetHybridModeCounterAttack() == 4 )
								{
									if (!thePlayer.HasTag('HybridImlerithWeaponTicket')){thePlayer.AddTag('HybridImlerithWeaponTicket');}

									HybridModeImlerithCounterActual();
								}
								else if ( ACS_GetHybridModeCounterAttack() == 5 )
								{
									if (!thePlayer.HasTag('HybridSpearWeaponTicket')){thePlayer.AddTag('HybridSpearWeaponTicket');}

									HybridModeSpearCounterActual();
								}
								else if ( ACS_GetHybridModeCounterAttack() == 6 )
								{
									if (!thePlayer.HasTag('HybridGregWeaponTicket')){thePlayer.AddTag('HybridGregWeaponTicket');}

									HybridModeGregCounterActual();
								}
								else if ( ACS_GetHybridModeCounterAttack() == 7 )
								{
									if (!thePlayer.HasTag('HybridAxeWeaponTicket')){thePlayer.AddTag('HybridAxeWeaponTicket');}

									HybridModeAxeCounterActual();
								}
								else if ( ACS_GetHybridModeCounterAttack() == 8 )
								{
									if (!thePlayer.HasTag('HybridGiantWeaponTicket')){thePlayer.AddTag('HybridGiantWeaponTicket');}

									HybridModeGiantCounterActual();
								}
							}
						}
						else
						{	
							if (ACS_can_perform_parry_skill()
							&& ACS_GetFistMode() == 1)
							{
								ACS_refresh_parry_skill_cooldown();
															
								geraltRandomVampireCounter();

								thePlayer.SetAnimationSpeedMultiplier(1.5  );

								RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
								
								ACS_StaminaDrain(1);
							}
						}
					}

					if (ParrySkillsBindTrigger(ACS_GetPushSkillsBind()))
					{	
						if (ACS_can_perform_parry_skill())
						{
							ACS_refresh_parry_skill_cooldown();

							geraltRandomPush();
							
							ACS_StaminaDrain(1);
						}	
					}

					if ( ParrySkillsBindTrigger(ACS_GetDaggerBind()))
					{	
						if (ACS_can_perform_parry_skill())
						{
							ACS_refresh_parry_skill_cooldown();

							geraltRandomPunch();
							
							ACS_StaminaDrain(1);
						}	
					}

					return true;
				}
			}
			else if (ACS_GetWeaponMode() == 3)
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");

					return false;
				}
				else
				{
					ACS_StaminaDrain(1);

					if (ParrySkillsBindTrigger(ACS_GetParrySkillsBind()))
					{	
						if ( !thePlayer.IsWeaponHeld( 'fist' ) )
						{
							if ( thePlayer.IsWeaponHeld( 'silversword' ) )
							{
								if ( ACS_GetItem_Eredin_Silver() || ACS_GetItem_Greg_Silver() )
								{
									AxiiCounterActual();
								}
								else if ( ACS_GetItem_Claws_Silver() || ACS_GetItem_Axe_Silver() )
								{
									AardCounterActual();
								}
								else if ( ACS_GetItem_Olgierd_Silver() || ACS_GetItem_Spear_Silver() )
								{
									QuenCounterActual();
								}
								else if ( ACS_GetItem_Imlerith_Silver() || ACS_GetItem_Hammer_Silver() )
								{
									YrdenCounterActual();
								}
								else if (ACS_GetItem_Katana_Silver() )
								{
									AxeCounter();
								}
								else
								{
									IgniCounterActual();
								}
							}
							else if ( thePlayer.IsWeaponHeld( 'steelsword' ) )
							{
								if ( ACS_GetItem_Eredin_Steel() || ACS_GetItem_Greg_Steel() )
								{
									AxiiCounterActual();
								}
								else if ( ACS_GetItem_Claws_Steel() || ACS_GetItem_Axe_Steel() )
								{
									AardCounterActual();
								}
								else if ( ACS_GetItem_Olgierd_Steel() || ACS_GetItem_Spear_Steel() )
								{
									QuenCounterActual();
								}
								else if ( ACS_GetItem_Imlerith_Steel() || ACS_GetItem_Hammer_Steel() )
								{
									YrdenCounterActual();
								}
								else if ( ACS_GetItem_MageStaff_Steel() )
								{
									MageCounterActual();
								}
								else if (ACS_GetItem_Katana_Steel() )
								{
									AxeCounter();
								}
								else
								{
									IgniCounterActual();
								}
							}
						}
						else
						{	
							if (ACS_can_perform_parry_skill()
							&& (ACS_GetItem_VampClaw() || ACS_GetItem_VampClaw_Shades())
							)
							{
								ACS_refresh_parry_skill_cooldown();
															
								geraltRandomVampireCounter();

								thePlayer.SetAnimationSpeedMultiplier(1.5  );

								RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
								
								ACS_StaminaDrain(1);
							}
						}
					}

					if (ParrySkillsBindTrigger(ACS_GetPushSkillsBind()))
					{	
						if (ACS_can_perform_parry_skill())
						{
							ACS_refresh_parry_skill_cooldown();

							geraltRandomPush();
							
							ACS_StaminaDrain(1);
						}	
					}

					if ( ParrySkillsBindTrigger(ACS_GetDaggerBind()))
					{	
						if (ACS_can_perform_parry_skill())
						{
							ACS_refresh_parry_skill_cooldown();

							geraltRandomPunch();
							
							ACS_StaminaDrain(1);
						}	
					}

					return true;
				}
			}
		}

		return false;
	}

	var last_guard_special_ability_refresh_time : float;

	function ACS_can_refresh_guard_special_ability(): bool 
	{
		return theGame.GetEngineTimeAsSeconds() - last_guard_special_ability_refresh_time > 1.0f;
	}

	function ACS_refresh_guard_special_ability() 
	{
		last_guard_special_ability_refresh_time = theGame.GetEngineTimeAsSeconds();
	}

	function PerformKick()
	{
		if (!ACS_ParrySkillsEnabled())
		{
			return;
		}

		if( ParrySkillCallTime + DOUBLE_TAP_WINDOW >= theGame.GetEngineTimeAsSeconds() )
		{
			ParrySkillDoubleTap = true;
		}
		else
		{
			ParrySkillDoubleTap = false;	
		}

		if ( WraithModeCheck() )
		{
			if ( ACS_StaminaBlockAction_Enabled() 
			&& StaminaCheck()
			)
			{							 
				if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
			}
			else
			{
				ACS_StaminaDrain(1);

				if (theInput.GetActionValue('GI_AxisLeftY') > 0.5 )
				{
					if( ParrySkillDoubleTap )
					{
						if (ACS_can_perform_parry_skill_doubletap())
						{
							ACS_refresh_parry_skill_doubletap_cooldown();

							RandomKickActual();
						}
					}
			
					ParrySkillCallTime = theGame.GetEngineTimeAsSeconds();
				}
			}
		}
	}

	var vACS_Beam_Attack : cACS_Beam_Attack;

	function ACS_Beam_Attack()
	{
		vACS_Beam_Attack = new cACS_Beam_Attack in this;
				
		vACS_Beam_Attack.ACS_Beam_Attack_Engage();
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	

	function LightAttackSwitch()
	{
		if (ACS_New_Replacers_Female_Active() || thePlayer.IsCiri())
		{
			ACS_Setup_Light_Attack_Internal();
			return;
		}

		if ( CiriCheck() )
		{
			if ( HitAnimCheck() 
			&& FinisherCheck()
			&& CrossbowCheck()
			&& ACS_BuffCheck()
			&& WraithModeCheck()
			&& BruxaBiteCheck() 
			&& thePlayer.IsAnyWeaponHeld()
			&& !thePlayer.IsWeaponHeld( 'fist' )
			)
			{
				DeactivateThings();

				ACS_ThingsThatShouldBeRemoved();

				thePlayer.SendAttackReactionEvent();

				thePlayer.ManageAerondightBuff(true);

				if ( !thePlayer.HasTag('igni_sword_equipped') && !thePlayer.HasTag('igni_secondary_sword_equipped') )
				{
					ACS_ExplorationDelayHack();
				}
				
				if ( thePlayer.HasTag('acs_bow_active') )
				{
					if ( ACS_StaminaBlockAction_Enabled() 
					&& StaminaCheck()
					)
					{ 
						ACS_RangedWeaponSwitch();

						if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
					}
					else
					{
						if ( ACS_can_shoot_bow_moving() )
						{
							ACS_refresh_bow_moving_cooldown();

							ACS_RangedWeaponSwitch();

							//geraltShootBowMoving();

							RemoveTimer('ACS_ShootBowMoving');
							AddTimer('ACS_ShootBowMoving', 0.00001, false);

							ACS_StaminaDrain(2);
						}
					}
				}
				else if ( thePlayer.HasTag('acs_crossbow_active') )
				{
					if ( ACS_StaminaBlockAction_Enabled() 
					&& StaminaCheck()
					)
					{ 
						ACS_RangedWeaponSwitch();

						if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
					}
					else if ( thePlayer.GetStat(BCS_Focus) == thePlayer.GetStatMax(BCS_Focus) )
					{
						if ( ACS_can_shoot_crossbow() )
						{
							ACS_refresh_crossbow_cooldown();

							ACS_RangedWeaponSwitch();

							geraltShootCrossbowMoving();

							ACS_StaminaDrain(2);
						}
					}
					else
					{
						if ( ACS_can_shoot_crossbow() )
						{
							ACS_refresh_crossbow_cooldown();

							ACS_RangedWeaponSwitch();

							geraltShootCrossbowStationary();

							ACS_StaminaDrain(2);
						}
					}
				}
				else if ( !thePlayer.HasTag('acs_bow_active') && !thePlayer.HasTag('acs_crossbow_active') )
				{
					if(thePlayer.HasTag('ACS_Shielded_Entity')){shield_play_anim();}

					if (ACS_GetWeaponMode() == 0 )
					{
						if ( thePlayer.GetEquippedSign() == ST_Quen )
						{	
							if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 0)
							{
								PrimaryWeaponSwitch();

								//ACS_Setup_Light_Attack_Internal();
								GeraltLightAttack();
							}
							else if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 1)
							{
								ArmigerModeOlgierdLightAttack();
							}
							else if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 2)
							{
								ArmigerModeEredinLightAttack();
							}
							else if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 3)
							{
								ArmigerModeClawLightAttack();
							}
							else if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 4)
							{
								ArmigerModeImlerithLightAttack();
							}
						}
						else if ( thePlayer.GetEquippedSign() == ST_Aard )
						{
							if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 0)
							{
								PrimaryWeaponSwitch();

								//ACS_Setup_Light_Attack_Internal();
								GeraltLightAttack();
							}
							else if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 1)
							{
								ArmigerModeOlgierdLightAttack();
							}
							else if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 2)
							{
								ArmigerModeEredinLightAttack();
							}
							else if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 3)
							{
								ArmigerModeClawLightAttack();
							}
							else if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 4)
							{
								ArmigerModeImlerithLightAttack();
							}
						}
						else if ( thePlayer.GetEquippedSign() == ST_Axii )
						{
							if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 0)
							{
								PrimaryWeaponSwitch();

								//ACS_Setup_Light_Attack_Internal();
								GeraltLightAttack();
							}
							else if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 1)
							{
								ArmigerModeOlgierdLightAttack();
							}
							else if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 2)
							{
								ArmigerModeEredinLightAttack();
							}
							else if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 3)
							{
								ArmigerModeClawLightAttack();
							}
							else if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 4)
							{
								ArmigerModeImlerithLightAttack();
							}
						}
						else if ( thePlayer.GetEquippedSign() == ST_Yrden )
						{
							if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 0)
							{
								PrimaryWeaponSwitch();

								//ACS_Setup_Light_Attack_Internal();
								GeraltLightAttack();
							}
							else if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 1)
							{
								ArmigerModeOlgierdLightAttack();
							}
							else if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 2)
							{
								ArmigerModeEredinLightAttack();
							}
							else if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 3)
							{
								ArmigerModeClawLightAttack();
							}
							else if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 4)
							{
								ArmigerModeImlerithLightAttack();
							}
						}
						else if ( thePlayer.GetEquippedSign() == ST_Igni )
						{
							if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 0)
							{
								PrimaryWeaponSwitch();

								//ACS_Setup_Light_Attack_Internal();
								GeraltLightAttack();
							}
							else if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 1)
							{
								ArmigerModeOlgierdLightAttack();
							}
							else if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 2)
							{
								ArmigerModeEredinLightAttack();
							}
							else if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 3)
							{
								ArmigerModeClawLightAttack();
							}
							else if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 4)
							{
								ArmigerModeImlerithLightAttack();
							}
						}
					}
					else if (ACS_GetWeaponMode() == 1)
					{
						if (thePlayer.IsWeaponHeld('silversword'))
						{
							if ( ACS_GetFocusModeSilverWeapon() == 0 )
							{
								PrimaryWeaponSwitch();
															
								//ACS_Setup_Light_Attack_Internal();
								GeraltLightAttack();
							}
							else if ( ACS_GetFocusModeSilverWeapon() == 1 )
							{	
								FocusModeOlgierdLightAttack();
							}
							else if ( ACS_GetFocusModeSilverWeapon() == 2 )
							{
								FocusModeSpearLightAttack();
							}
							else if ( ACS_GetFocusModeSilverWeapon() == 3 )
							{
								FocusModeEredinShieldLightAttack();
							}
							else if ( ACS_GetFocusModeSilverWeapon() == 4 )
							{
								FocusModeGregLightAttack();
							}
							else if ( ACS_GetFocusModeSilverWeapon() == 5 )
							{
								FocusModeImlerithLightAttack();
							}
							else if ( ACS_GetFocusModeSilverWeapon() == 6 )
							{
								FocusModeGiantLightAttack();
							}
							else if ( ACS_GetFocusModeSilverWeapon() == 7 )
							{
								FocusModeClawLightAttack();
							}
							else if ( ACS_GetFocusModeSilverWeapon() == 8 )
							{
								FocusModeAxeLightAttack();
							}
						}
						else if (thePlayer.IsWeaponHeld('steelsword'))
						{
							if ( ACS_GetFocusModeSteelWeapon() == 0 )
							{
								PrimaryWeaponSwitch();
															
								//ACS_Setup_Light_Attack_Internal();
								GeraltLightAttack();
							}
							else if ( ACS_GetFocusModeSteelWeapon() == 1 )
							{	
								FocusModeOlgierdLightAttack();
							}
							else if ( ACS_GetFocusModeSteelWeapon() == 2 )
							{
								FocusModeSpearLightAttack();
							}
							else if ( ACS_GetFocusModeSteelWeapon() == 3 )
							{
								FocusModeEredinShieldLightAttack();
							}
							else if ( ACS_GetFocusModeSteelWeapon() == 4 )
							{
								FocusModeGregLightAttack();
							}
							else if ( ACS_GetFocusModeSteelWeapon() == 5 )
							{
								FocusModeImlerithLightAttack();
							}
							else if ( ACS_GetFocusModeSteelWeapon() == 6 )
							{
								FocusModeGiantLightAttack();
							}
							else if ( ACS_GetFocusModeSteelWeapon() == 7 )
							{
								FocusModeClawLightAttack();
							}
							else if ( ACS_GetFocusModeSteelWeapon() == 8 )
							{
								FocusModeAxeLightAttack();
							}
						}
					}
					else if (ACS_GetWeaponMode() == 2)
					{
						if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
						{
							if ( ACS_GetHybridModeForwardLightAttack() == 0 )
							{
								if (!thePlayer.HasTag('HybridDefaultWeaponTicket')){thePlayer.AddTag('HybridDefaultWeaponTicket');}

								PrimaryWeaponSwitch();
															
								//ACS_Setup_Light_Attack_Internal();
								GeraltLightAttack();
							}
							else if ( ACS_GetHybridModeForwardLightAttack() == 1 )
							{
								if (!thePlayer.HasTag('HybridOlgierdWeaponTicket')){thePlayer.AddTag('HybridOlgierdWeaponTicket');}

								HybridModeOlgierdForwardLightAttack();
							}
							else if ( ACS_GetHybridModeForwardLightAttack() == 2 )
							{
								if (!thePlayer.HasTag('HybridEredinWeaponTicket')){thePlayer.AddTag('HybridEredinWeaponTicket');}

								HybridModeEredinShieldForwardLightAttack();
							}
							else if ( ACS_GetHybridModeForwardLightAttack() == 3 )
							{
								if (!thePlayer.HasTag('HybridClawWeaponTicket')){thePlayer.AddTag('HybridClawWeaponTicket');}

								HybridModeClawForwardLightAttack();
							}
							else if ( ACS_GetHybridModeForwardLightAttack() == 4 )
							{
								if (!thePlayer.HasTag('HybridImlerithWeaponTicket')){thePlayer.AddTag('HybridImlerithWeaponTicket');}

								HybridModeImlerithForwardLightAttack();
							}
							else if ( ACS_GetHybridModeForwardLightAttack() == 5 )
							{
								if (!thePlayer.HasTag('HybridSpearWeaponTicket')){thePlayer.AddTag('HybridSpearWeaponTicket');}

								HybridModeSpearForwardLightAttack();
							}
							else if ( ACS_GetHybridModeForwardLightAttack() == 6 )
							{
								if (!thePlayer.HasTag('HybridGregWeaponTicket')){thePlayer.AddTag('HybridGregWeaponTicket');}

								HybridModeGregForwardLightAttack();
							}
							else if ( ACS_GetHybridModeForwardLightAttack() == 7 )
							{
								if (!thePlayer.HasTag('HybridAxeWeaponTicket')){thePlayer.AddTag('HybridAxeWeaponTicket');}

								HybridModeAxeForwardLightAttack();
							}
							else if ( ACS_GetHybridModeForwardLightAttack() == 8 )
							{
								if (!thePlayer.HasTag('HybridGiantWeaponTicket')){thePlayer.AddTag('HybridGiantWeaponTicket');}

								HybridModeGiantForwardLightAttack();
							}
						}
						//else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5) // Hybrid Mode Weapon Arts Light Attack
						else if (theInput.GetActionValue('Dodge') > 0.7) // Hybrid Mode Weapon Arts Light Attack
						{
							ACS_Weapon_Arts_Tutorial();

							RemoveTimer('RollDelay');

							if (thePlayer.HasTag('quen_sword_equipped'))
							{
								if (thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
								{
									Umbral_Slash_Single();
								}
							}
							else if (thePlayer.HasTag('axii_sword_equipped'))
							{
								if ( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
								{
									Sparagmos();

									if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
									&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
									{	
										
										thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
									}
									else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
									&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
									{	
										
										thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
									}
									else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
									{
										thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
									}
								}
							}
							else if (thePlayer.HasTag('aard_sword_equipped'))
							{
								if ( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) )
								{
									Bruxa_Scream();

									thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
								}
							}
							else if (thePlayer.HasTag('yrden_sword_equipped'))
							{
								if ( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
								{
									ACS_TKInit();

									if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
									&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
									{	
										
										thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
									}
									else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
									&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
									{	
										thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
									}
									else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
									{
										thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
									}
								}
							}
							else if (thePlayer.HasTag('quen_secondary_sword_equipped'))
							{
								if ( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
								{
									Storm_Spear();

									if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
									&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
									{	
										thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
									}
									else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
									&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
									{	
										thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
									}
									else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
									{
										thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
									}
								}
							}
							else if (thePlayer.HasTag('axii_secondary_sword_equipped'))
							{
								if ( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) )
								{
									Giant_Sword();

									thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
								}
							}
							else if (thePlayer.HasTag('aard_secondary_sword_equipped'))
							{
								if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
								{
									Water_Aard();

									if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
									&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
									{	
										thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
									}
									else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
									&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
									{	
										thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
									}
									else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
									{
										thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
									}
								}
							}
							else if (thePlayer.HasTag('yrden_secondary_sword_equipped'))
							{
								if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
								{
									Giant_Stomp();

									if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
									&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
									{	
										thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
									}
									else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
									&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
									{	
										thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
									}
									else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
									{
										thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
									}
								}
							}
						}
						else
						{
							if ( ACS_GetHybridModeLightAttack() == 0 )
							{
								if (!thePlayer.HasTag('HybridDefaultWeaponTicket')){thePlayer.AddTag('HybridDefaultWeaponTicket');}

								PrimaryWeaponSwitch();

								//ACS_Setup_Light_Attack_Internal();
								GeraltLightAttack();
							}
							else if ( ACS_GetHybridModeLightAttack() == 1 )
							{
								if (!thePlayer.HasTag('HybridOlgierdWeaponTicket')){thePlayer.AddTag('HybridOlgierdWeaponTicket');}

								HybridModeOlgierdLightAttack();
							}
							else if ( ACS_GetHybridModeLightAttack() == 2 )
							{
								if (!thePlayer.HasTag('HybridEredinWeaponTicket')){thePlayer.AddTag('HybridEredinWeaponTicket');}

								HybridModeEredinShieldLightAttack();
							}
							else if ( ACS_GetHybridModeLightAttack() == 3 )
							{
								if (!thePlayer.HasTag('HybridClawWeaponTicket')){thePlayer.AddTag('HybridClawWeaponTicket');}

								HybridModeClawLightAttack();
							}
							else if ( ACS_GetHybridModeLightAttack() == 4 )
							{
								if (!thePlayer.HasTag('HybridImlerithWeaponTicket')){thePlayer.AddTag('HybridImlerithWeaponTicket');}

								HybridModeImlerithLightAttack();
							}
							else if ( ACS_GetHybridModeLightAttack() == 5 )
							{
								if (!thePlayer.HasTag('HybridSpearWeaponTicket')){thePlayer.AddTag('HybridSpearWeaponTicket');}

								HybridModeSpearLightAttack();
							}
							else if ( ACS_GetHybridModeLightAttack() == 6 )
							{
								if (!thePlayer.HasTag('HybridGregWeaponTicket')){thePlayer.AddTag('HybridGregWeaponTicket');}

								HybridModeGregLightAttack();
							}
							else if ( ACS_GetHybridModeLightAttack() == 7 )
							{
								if (!thePlayer.HasTag('HybridAxeWeaponTicket')){thePlayer.AddTag('HybridAxeWeaponTicket');}

								HybridModeAxeLightAttack();
							}
							else if ( ACS_GetHybridModeLightAttack() == 8 )
							{
								if (!thePlayer.HasTag('HybridGiantWeaponTicket')){thePlayer.AddTag('HybridGiantWeaponTicket');}

								HybridModeGiantLightAttack();
							}
						}
					}
					else if ( ACS_GetWeaponMode() == 3 )
					{
						if (!GetACSArmorEtherSword())
						{
							ACS_ShowSwordWitoutScabbardStuff();
						}
		
						if (thePlayer.IsWeaponHeld('silversword'))
						{
							if ( ACS_GetItem_Olgierd_Silver() )
							{	
								EquipmentModeOlgierdLightAttack();
							}
							else if ( ACS_GetItem_Claws_Silver() )
							{
								FocusModeClawLightAttack();
							}
							else if ( ACS_GetItem_Eredin_Silver() )
							{
								FocusModeEredinShieldLightAttack();
							}
							else if ( ACS_GetItem_Imlerith_Silver() )
							{
								FocusModeImlerithLightAttack();
							}
							else if ( ACS_GetItem_Spear_Silver() )
							{
								FocusModeSpearLightAttack();
							}
							else if ( ACS_GetItem_Greg_Silver() )
							{
								FocusModeGregLightAttack();
							}
							else if ( ACS_GetItem_Hammer_Silver() )
							{
								FocusModeGiantLightAttack();
							}
							else if ( ACS_GetItem_Axe_Silver() )
							{
								FocusModeAxeLightAttack();
							}
							else if ( ACS_GetItem_Katana_Silver() )
							{
								FocusModeOlgierdHeavyAttack();
							}
							else
							{	
								ACS_DefaultSwitch();		

								//ACS_Setup_Light_Attack_Internal();
								GeraltLightAttack();
							}
						}
						else if (thePlayer.IsWeaponHeld('steelsword'))
						{
							if ( ACS_GetItem_Olgierd_Steel() )
							{	
								EquipmentModeOlgierdLightAttack();
							}
							else if ( ACS_GetItem_Claws_Steel() )
							{
								FocusModeClawLightAttack();
							}
							else if ( ACS_GetItem_Eredin_Steel() )
							{
								FocusModeEredinShieldLightAttack();
							}
							else if ( ACS_GetItem_Imlerith_Steel() )
							{
								FocusModeImlerithLightAttack();
							}
							else if ( ACS_GetItem_Spear_Steel() )
							{
								FocusModeSpearLightAttack();
							}
							else if ( ACS_GetItem_Greg_Steel() )
							{
								FocusModeGregLightAttack();
							}
							else if ( ACS_GetItem_Hammer_Steel() )
							{
								FocusModeGiantLightAttack();
							}
							else if ( ACS_GetItem_Axe_Steel() )
							{
								FocusModeAxeLightAttack();
							}
							else if ( ACS_GetItem_Katana_Steel() )
							{
								FocusModeOlgierdHeavyAttack();
							}
							else if (ACS_GetItem_MageStaff_Steel())
							{
								FocusModeMageLightAttack();
							}
							else
							{	
								ACS_DefaultSwitch();

								//ACS_Setup_Light_Attack_Internal();
								GeraltLightAttack();
							}
						}		
					}
				}

				DeactivateThings();
			}
		}
		else
		{
			//ACS_Setup_Light_Attack_Internal();
			GeraltLightAttack();
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function HeavyAttackSwitch()
	{
		if ( thePlayer.IsActionAllowed(EIAB_HeavyAttacks) )
		{
			if (ACS_New_Replacers_Female_Active() || thePlayer.IsCiri())
			{
				ACS_Setup_Heavy_Attack_Internal();
				return;
			}

			if ( CiriCheck() )
			{
				if ( HitAnimCheck() 
				&& FinisherCheck()
				&& CrossbowCheck()
				&& ACS_BuffCheck()
				&& WraithModeCheck() 
				&& BruxaBiteCheck()
				&& thePlayer.IsAnyWeaponHeld()
				&& !thePlayer.IsWeaponHeld( 'fist' ) 
				)
				{
					DeactivateThings();

					thePlayer.SendAttackReactionEvent();
					/*
					if (!thePlayer.HasTag('vampire_claws_equipped') || !thePlayer.IsWeaponHeld( 'fist' ) ) 
					{
						RemoveTimer('ACS_bruxa_tackle'); 
					}
					*/
					if ( !thePlayer.IsWeaponHeld( 'fist' ) ) 
					{
						RemoveTimer('ACS_bruxa_tackle'); 
						RemoveTimer('ACS_portable_aard'); 
						//RemoveTimer('ACS_Umbral_Slash_End');
					}

					ACS_ThingsThatShouldBeRemoved_NoBruxaTackleOrPortableAard();

					ACS_ExplorationDelayHack();

					thePlayer.ManageAerondightBuff(true);

					if ( thePlayer.HasTag('acs_bow_active') )
					{
						if ( ACS_StaminaBlockAction_Enabled() 
						&& StaminaCheck()
						)
						{ 
							ACS_RangedWeaponSwitch();

							if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
						}
						else if ( thePlayer.GetStat(BCS_Focus) == thePlayer.GetStatMax(BCS_Focus) )
						{
							if ( ACS_can_shoot_bow_stationary() )
							{
								ACS_refresh_bow_stationary_cooldown();

								ACS_RangedWeaponSwitch();

								//geraltShootBowStationary();

								RemoveTimer('ACS_ShootBowStationary');
								AddTimer('ACS_ShootBowStationary', 0.00001, false);

								ACS_StaminaDrain(2);
							}
						}
						else
						{
							if ( ACS_can_shoot_bow_moving() )
							{
								ACS_refresh_bow_moving_cooldown();

								ACS_RangedWeaponSwitch();

								//geraltShootBowMoving();

								RemoveTimer('ACS_ShootBowMoving');
								AddTimer('ACS_ShootBowMoving', 0.00001, false);

								ACS_StaminaDrain(2);
							}
						}
					}
					else if ( thePlayer.HasTag('acs_crossbow_active') )
					{
						if ( ACS_StaminaBlockAction_Enabled() 
						&& StaminaCheck()
						)
						{ 
							ACS_RangedWeaponSwitch();

							if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
						}
						else if ( thePlayer.GetStat(BCS_Focus) == thePlayer.GetStatMax(BCS_Focus) )
						{
							if ( ACS_can_shoot_crossbow() )
							{
								ACS_refresh_crossbow_cooldown();

								ACS_RangedWeaponSwitch();

								geraltShootCrossbowMoving();

								ACS_StaminaDrain(2);
							}
						}
						else
						{
							if ( ACS_can_shoot_crossbow() )
							{
								ACS_refresh_crossbow_cooldown();

								ACS_RangedWeaponSwitch();

								geraltShootCrossbowStationary();

								ACS_StaminaDrain(2);
							}
						}
					}
					else if ( !thePlayer.HasTag('acs_bow_active') && !thePlayer.HasTag('acs_crossbow_active') )
					{
						if(thePlayer.HasTag('ACS_Shielded_Entity')){shield_play_anim();}

						if (ACS_GetWeaponMode() == 0)
						{
							if ( thePlayer.GetEquippedSign() == ST_Yrden )
							{
								if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 0)
								{
									ArmigerModeGeraltHeavyAttack();
								}
								else if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 1)
								{
									ArmigerModeSpearHeavyAttack();
								}
								else if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 2)
								{
									ArmigerModeGregHeavyAttack();
								}
								else if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 3)
								{
									ArmigerModeAxeHeavyAttack();
								}
								else if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 4)
								{
									ArmigerModeHammerHeavyAttack();
								}
							}
							else if ( thePlayer.GetEquippedSign() == ST_Aard )
							{
								if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 0)
								{
									ArmigerModeGeraltHeavyAttack();
								}
								else if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 1)
								{
									ArmigerModeSpearHeavyAttack();
								}
								else if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 2)
								{
									ArmigerModeGregHeavyAttack();
								}
								else if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 3)
								{
									ArmigerModeAxeHeavyAttack();
								}
								else if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 4)
								{
									ArmigerModeHammerHeavyAttack();
								}
							}
							else if ( thePlayer.GetEquippedSign() == ST_Quen )
							{	
								if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 0)
								{
									ArmigerModeGeraltHeavyAttack();
								}
								else if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 1)
								{
									ArmigerModeSpearHeavyAttack();
								}
								else if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 2)
								{
									ArmigerModeGregHeavyAttack();
								}
								else if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 3)
								{
									ArmigerModeAxeHeavyAttack();
								}
								else if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 4)
								{
									ArmigerModeHammerHeavyAttack();
								}
							}
							else if ( thePlayer.GetEquippedSign() == ST_Axii )
							{	
								if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 0)
								{
									ArmigerModeGeraltHeavyAttack();
								}
								else if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 1)
								{
									ArmigerModeSpearHeavyAttack();
								}
								else if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 2)
								{
									ArmigerModeGregHeavyAttack();
								}
								else if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 3)
								{
									ArmigerModeAxeHeavyAttack();
								}
								else if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 4)
								{
									ArmigerModeHammerHeavyAttack();
								}
							}
							else if ( thePlayer.GetEquippedSign() == ST_Igni )
							{	
								if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 0)
								{
									ArmigerModeGeraltHeavyAttack();
								}
								else if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 1)
								{
									ArmigerModeSpearHeavyAttack();
								}
								else if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 2)
								{
									ArmigerModeGregHeavyAttack();
								}
								else if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 3)
								{
									ArmigerModeAxeHeavyAttack();
								}
								else if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 4)
								{
									ArmigerModeHammerHeavyAttack();
								}
							}
						}
						else if (ACS_GetWeaponMode() == 1)
						{
							if (thePlayer.IsWeaponHeld('silversword'))
							{
								if ( ACS_GetFocusModeSilverWeapon() == 0 )
								{
									SecondaryWeaponSwitch();								
									//ACS_Setup_Heavy_Attack_Internal();
									GeraltHeavyAttack();
								}
								else if ( ACS_GetFocusModeSilverWeapon() == 1 )
								{	
									FocusModeOlgierdHeavyAttack();
								}
								else if ( ACS_GetFocusModeSilverWeapon() == 2 )
								{	
									FocusModeSpearHeavyAttack();
								}
								else if ( ACS_GetFocusModeSilverWeapon() == 3 )
								{	
									FocusModeEredinShieldHeavyAttack();
								}
								else if ( ACS_GetFocusModeSilverWeapon() == 4 )
								{	
									FocusModeGregHeavyAttack();
								}
								else if ( ACS_GetFocusModeSilverWeapon() == 5 )
								{	
									FocusModeImlerithHeavyAttack();
								}
								else if ( ACS_GetFocusModeSilverWeapon() == 6 )
								{
									FocusModeGiantHeavyAttack();
								}
								else if ( ACS_GetFocusModeSilverWeapon() == 7 )
								{	
									FocusModeClawHeavyAttack();
								}
								else if ( ACS_GetFocusModeSilverWeapon() == 8 )
								{
									FocusModeAxeHeavyAttack();
								}
							}
							else if (thePlayer.IsWeaponHeld('steelsword'))
							{
								if ( ACS_GetFocusModeSteelWeapon() == 0 )
								{
									SecondaryWeaponSwitch();								
									//ACS_Setup_Heavy_Attack_Internal();
									GeraltHeavyAttack();
								}
								else if ( ACS_GetFocusModeSteelWeapon() == 1 )
								{	
									FocusModeOlgierdHeavyAttack();
								}
								else if ( ACS_GetFocusModeSteelWeapon() == 2 )
								{	
									FocusModeSpearHeavyAttack();
								}
								else if ( ACS_GetFocusModeSteelWeapon() == 3 )
								{	
									FocusModeEredinShieldHeavyAttack();
								}
								else if ( ACS_GetFocusModeSteelWeapon() == 4 )
								{	
									FocusModeGregHeavyAttack();
								}
								else if ( ACS_GetFocusModeSteelWeapon() == 5 )
								{	
									FocusModeImlerithHeavyAttack();
								}
								else if ( ACS_GetFocusModeSteelWeapon() == 6 )
								{
									FocusModeGiantHeavyAttack();
								}
								else if ( ACS_GetFocusModeSteelWeapon() == 7 )
								{	
									FocusModeClawHeavyAttack();
								}
								else if ( ACS_GetFocusModeSteelWeapon() == 8 )
								{
									FocusModeAxeHeavyAttack();
								}
							}
						}
						else if (ACS_GetWeaponMode() == 2)
						{
							if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
							{
								if ( ACS_GetHybridModeForwardHeavyAttack() == 0 )
								{
									if (!thePlayer.HasTag('HybridDefaultSecondaryWeaponTicket')){thePlayer.AddTag('HybridDefaultSecondaryWeaponTicket');}

									SecondaryWeaponSwitch();								
									//ACS_Setup_Heavy_Attack_Internal();
									GeraltHeavyAttack();
								}
								else if ( ACS_GetHybridModeForwardHeavyAttack() == 1 )
								{
									if (!thePlayer.HasTag('HybridOlgierdWeaponTicket')){thePlayer.AddTag('HybridOlgierdWeaponTicket');}

									HybridModeOlgierdForwardHeavyAttack();
								}
								else if ( ACS_GetHybridModeForwardHeavyAttack() == 2 )
								{
									if (!thePlayer.HasTag('HybridEredinWeaponTicket')){thePlayer.AddTag('HybridEredinWeaponTicket');}

									HybridModeEredinShieldForwardHeavyAttack();
								}
								else if ( ACS_GetHybridModeForwardHeavyAttack() == 3 )
								{
									if (!thePlayer.HasTag('HybridClawWeaponTicket')){thePlayer.AddTag('HybridClawWeaponTicket');}

									HybridModeClawForwardHeavyAttack();
								}
								else if ( ACS_GetHybridModeForwardHeavyAttack() == 4 )
								{
									if (!thePlayer.HasTag('HybridImlerithWeaponTicket')){thePlayer.AddTag('HybridImlerithWeaponTicket');}

									HybridModeImlerithForwardHeavyAttack();
								}
								else if ( ACS_GetHybridModeForwardHeavyAttack() == 5 )
								{
									if (!thePlayer.HasTag('HybridSpearWeaponTicket')){thePlayer.AddTag('HybridSpearWeaponTicket');}

									HybridModeSpearForwardHeavyAttack();
								}
								else if ( ACS_GetHybridModeForwardHeavyAttack() == 6 )
								{
									if (!thePlayer.HasTag('HybridGregWeaponTicket')){thePlayer.AddTag('HybridGregWeaponTicket');}

									HybridModeGregForwardHeavyAttack();
								}
								else if ( ACS_GetHybridModeForwardHeavyAttack() == 7 )
								{
									if (!thePlayer.HasTag('HybridAxeWeaponTicket')){thePlayer.AddTag('HybridAxeWeaponTicket');}

									HybridModeAxeForwardHeavyAttack();
								}
								else if ( ACS_GetHybridModeForwardHeavyAttack() == 8 )
								{
									if (!thePlayer.HasTag('HybridGiantWeaponTicket')){thePlayer.AddTag('HybridGiantWeaponTicket');}

									HybridModeGiantForwardHeavyAttack();
								}
							}
							else
							{
								if ( ACS_GetHybridModeHeavyAttack() == 0 )
								{
									if (!thePlayer.HasTag('HybridDefaultSecondaryWeaponTicket')){thePlayer.AddTag('HybridDefaultSecondaryWeaponTicket');}

									SecondaryWeaponSwitch();								
									//ACS_Setup_Heavy_Attack_Internal();
									GeraltHeavyAttack();
								}
								else if ( ACS_GetHybridModeHeavyAttack() == 1 )
								{
									if (!thePlayer.HasTag('HybridOlgierdWeaponTicket')){thePlayer.AddTag('HybridOlgierdWeaponTicket');}

									HybridModeOlgierdHeavyAttack();
								}
								else if ( ACS_GetHybridModeHeavyAttack() == 2 )
								{
									if (!thePlayer.HasTag('HybridEredinWeaponTicket')){thePlayer.AddTag('HybridEredinWeaponTicket');}

									HybridModeEredinShieldHeavyAttack();
								}
								else if ( ACS_GetHybridModeHeavyAttack() == 3 )
								{
									if (!thePlayer.HasTag('HybridClawWeaponTicket')){thePlayer.AddTag('HybridClawWeaponTicket');}

									HybridModeClawHeavyAttack();
								}
								else if ( ACS_GetHybridModeHeavyAttack() == 4 )
								{
									if (!thePlayer.HasTag('HybridImlerithWeaponTicket')){thePlayer.AddTag('HybridImlerithWeaponTicket');}

									HybridModeImlerithHeavyAttack();
								}
								else if ( ACS_GetHybridModeHeavyAttack() == 5 )
								{
									if (!thePlayer.HasTag('HybridSpearWeaponTicket')){thePlayer.AddTag('HybridSpearWeaponTicket');}

									HybridModeSpearHeavyAttack();
								}
								else if ( ACS_GetHybridModeHeavyAttack() == 6 )
								{
									if (!thePlayer.HasTag('HybridGregWeaponTicket')){thePlayer.AddTag('HybridGregWeaponTicket');}

									HybridModeGregHeavyAttack();
								}
								else if ( ACS_GetHybridModeHeavyAttack() == 7 )
								{
									if (!thePlayer.HasTag('HybridAxeWeaponTicket')){thePlayer.AddTag('HybridAxeWeaponTicket');}

									HybridModeAxeHeavyAttack();
								}
								else if ( ACS_GetHybridModeHeavyAttack() == 8 )
								{
									if (!thePlayer.HasTag('HybridGiantWeaponTicket')){thePlayer.AddTag('HybridGiantWeaponTicket');}

									HybridModeGiantHeavyAttack();
								}
							}
						}
						else if ( ACS_GetWeaponMode() == 3 )
						{
							if (!GetACSArmorEtherSword())
							{
								ACS_ShowSwordWitoutScabbardStuff();
							}

							if (thePlayer.IsWeaponHeld('silversword'))
							{
								if ( ACS_GetItem_Hammer_Silver() )
								{
									FocusModeGiantHeavyAttack();
								}
								else if ( ACS_GetItem_Axe_Silver() )
								{
									FocusModeAxeHeavyAttack();
								}
								else if ( ACS_GetItem_Spear_Silver() )
								{	
									FocusModeSpearHeavyAttack();
								}
								else if ( ACS_GetItem_Greg_Silver() )
								{	
									FocusModeGregHeavyAttack();
								}
								else if ( ACS_GetItem_Olgierd_Silver() )
								{	
									FocusModeOlgierdHeavyAttack();
								}
								else if ( ACS_GetItem_Eredin_Silver() )
								{	
									FocusModeEredinShieldHeavyAttack();
								}
								else if ( ACS_GetItem_Imlerith_Silver() )
								{	
									FocusModeImlerithHeavyAttack();
								}
								else if ( ACS_GetItem_Claws_Silver() )
								{	
									FocusModeClawHeavyAttack();
								}
								else if ( ACS_GetItem_Katana_Silver() )
								{
									FocusModeGregHeavyAttack();
								}
								else
								{	
									ACS_DefaultSwitch();							
									//ACS_Setup_Heavy_Attack_Internal();
									GeraltHeavyAttack();
								}
							}
							else if (thePlayer.IsWeaponHeld('steelsword'))
							{
								if ( ACS_GetItem_Hammer_Steel() )
								{
									FocusModeGiantHeavyAttack();
								}
								else if ( ACS_GetItem_Axe_Steel() )
								{
									FocusModeAxeHeavyAttack();
								}
								else if ( ACS_GetItem_Spear_Steel() )
								{	
									FocusModeSpearHeavyAttack();
								}
								else if ( ACS_GetItem_Greg_Steel() )
								{	
									FocusModeGregHeavyAttack();
								}
								else if ( ACS_GetItem_Olgierd_Steel() )
								{	
									FocusModeOlgierdHeavyAttack();
								}
								else if ( ACS_GetItem_Eredin_Steel() )
								{	
									FocusModeEredinShieldHeavyAttack();
								}
								else if ( ACS_GetItem_Imlerith_Steel() )
								{	
									FocusModeImlerithHeavyAttack();
								}
								else if ( ACS_GetItem_Claws_Steel() )
								{	
									FocusModeClawHeavyAttack();
								}
								else if ( ACS_GetItem_Katana_Steel() )
								{
									FocusModeGregHeavyAttack();
								}
								else if (ACS_GetItem_MageStaff_Steel())
								{
									FocusModeMageHeavyAttack();
								}
								else
								{	
									ACS_DefaultSwitch();
									//ACS_Setup_Heavy_Attack_Internal();
									GeraltHeavyAttack();
								}
							}
						}
						else
						{
							if (!GetACSArmorEtherSword())
							{
								ACS_ShowSwordWitoutScabbardStuff();
							}

							ACS_DefaultSwitch();
							//ACS_Setup_Heavy_Attack_Internal();
							GeraltHeavyAttack();
						}
					}

					DeactivateThings();

					RemoveTimer('ACS_ResetAnimation');
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
				}
			}
			else
			{
				//ACS_Setup_Heavy_Attack_Internal();
				GeraltHeavyAttack();
			}
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function SpecialAttackSwitch()
	{
		if ( thePlayer.IsActionAllowed(EIAB_SpecialAttackLight) )
		{
			if (ACS_New_Replacers_Female_Active() || thePlayer.IsCiri())
			{
				thePlayer.PrepareToAttack();
				thePlayer.SetPlayedSpecialAttackMissingResourceSound(false);
				thePlayer.AddTimer( 'IsSpecialLightAttackInputHeld', 0.00001, true );
				return;
			}

			if ( CiriCheck() )
			{
				Rage_Counter_Special_Attack_Manager(1);

				if ( FinisherCheck() 
				&& HitAnimCheck()
				&& CrossbowCheck()
				&& ACS_BuffCheck()
				&& WraithModeCheck()
				&& BruxaBiteCheck()
				&& thePlayer.IsAnyWeaponHeld()
				&& !thePlayer.IsWeaponHeld('fist')
				&& !thePlayer.HasTag('vampire_claws_equipped')
				)
				{
					DeactivateThings();

					ACS_ThingsThatShouldBeRemoved();

					ACS_ExplorationDelayHack();

					thePlayer.SendAttackReactionEvent();

					thePlayer.ManageAerondightBuff(true);

					if(thePlayer.HasTag('ACS_Shielded_Entity')){shield_play_anim();}

					if (ACS_GetWeaponMode() == 0 && !thePlayer.IsWeaponHeld( 'fist' ))
					{
						if( thePlayer.GetEquippedSign() == ST_Axii )
						{	
							if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 0)
							{
								PrimaryWeaponSwitch(); 

								GeraltSpecialLightAttack();
							}
							else if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 1)
							{
								ArmigerModeOlgierdSpecialAttack();
							}
							else if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 2)
							{
								ArmigerModeEredinShieldSpecialAttack();
							}
							else if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 3)
							{
								ArmigerModeClawSpecialAttack();
							}
							else if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 4)
							{
								ArmigerModeImlerithSpecialAttack();
							}
						}
						else if( thePlayer.GetEquippedSign() == ST_Quen)
						{	
							if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 0)
							{
								PrimaryWeaponSwitch(); 

								GeraltSpecialLightAttack();
							}
							else if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 1)
							{
								ArmigerModeOlgierdSpecialAttack();
							}
							else if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 2)
							{
								ArmigerModeEredinShieldSpecialAttack();
							}
							else if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 3)
							{
								ArmigerModeClawSpecialAttack();
							}
							else if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 4)
							{
								ArmigerModeImlerithSpecialAttack();
							}
						}
						else if( thePlayer.GetEquippedSign() == ST_Aard )
						{	
							if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 0)
							{
								PrimaryWeaponSwitch(); 

								GeraltSpecialLightAttack();
							}
							else if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 1)
							{
								ArmigerModeOlgierdSpecialAttack();
							}
							else if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 2)
							{
								ArmigerModeEredinShieldSpecialAttack();
							}
							else if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 3)
							{
								ArmigerModeClawSpecialAttack();
							}
							else if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 4)
							{
								ArmigerModeImlerithSpecialAttack();
							}
						}
						else if( thePlayer.GetEquippedSign() == ST_Yrden )
						{
							if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 0)
							{
								PrimaryWeaponSwitch(); 

								GeraltSpecialLightAttack();
							}
							else if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 1)
							{
								ArmigerModeOlgierdSpecialAttack();
							}
							else if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 2)
							{
								ArmigerModeEredinShieldSpecialAttack();
							}
							else if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 3)
							{
								ArmigerModeClawSpecialAttack();
							}
							else if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 4)
							{
								ArmigerModeImlerithSpecialAttack();
							}
						}
						else if( thePlayer.GetEquippedSign() == ST_Igni )
						{	
							if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 0)
							{
								PrimaryWeaponSwitch(); 

								GeraltSpecialLightAttack();
							}
							else if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 1)
							{
								ArmigerModeOlgierdSpecialAttack();
							}
							else if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 2)
							{
								ArmigerModeEredinShieldSpecialAttack();
							}
							else if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 3)
							{
								ArmigerModeClawSpecialAttack();
							}
							else if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 4)
							{
								ArmigerModeImlerithSpecialAttack();
							}
						}
					}
					else if (ACS_GetWeaponMode() == 1 && !thePlayer.IsWeaponHeld( 'fist' ))
					{
						if (thePlayer.IsWeaponHeld('silversword'))
						{
							if( ACS_GetFocusModeSilverWeapon() == 0 )
							{
								PrimaryWeaponSwitch(); 

								GeraltSpecialLightAttack();
							}
							else if( ACS_GetFocusModeSilverWeapon() == 1 )
							{	
								FocusModeOlgierdSpecialAttack();
							}
							else if( ACS_GetFocusModeSilverWeapon() == 2 )
							{	
								FocusModeSpearSpecialAttack();
							}
							else if( ACS_GetFocusModeSilverWeapon() == 3)
							{	
								FocusModeEredinShieldSpecialAttack();
							}
							else if( ACS_GetFocusModeSilverWeapon() == 4 )
							{	
								FocusModeGregSpecialAttack();
							}
							else if( ACS_GetFocusModeSilverWeapon() == 5 )
							{
								FocusModeImlerithSpecialAttack();
							}
							else if( ACS_GetFocusModeSilverWeapon() == 6 )
							{	
								FocusModeGiantSpecialAttack();
							}
							else if( ACS_GetFocusModeSilverWeapon() == 7 )
							{	
								FocusModeClawSpecialAttack();
							}
							else if( ACS_GetFocusModeSilverWeapon() == 8 )
							{	
								FocusModeAxeSpecialAttack();
							}
						}
						else if (thePlayer.IsWeaponHeld('steelsword'))
						{
							if( ACS_GetFocusModeSteelWeapon() == 0 )
							{
								PrimaryWeaponSwitch(); 

								GeraltSpecialLightAttack();
							}
							else if( ACS_GetFocusModeSteelWeapon() == 1 )
							{	
								FocusModeOlgierdSpecialAttack();
							}
							else if( ACS_GetFocusModeSteelWeapon() == 2 )
							{	
								FocusModeSpearSpecialAttack();
							}
							else if( ACS_GetFocusModeSteelWeapon() == 3)
							{	
								FocusModeEredinShieldSpecialAttack();
							}
							else if( ACS_GetFocusModeSteelWeapon() == 4 )
							{	
								FocusModeGregSpecialAttack();
							}
							else if( ACS_GetFocusModeSteelWeapon() == 5 )
							{
								FocusModeImlerithSpecialAttack();
							}
							else if( ACS_GetFocusModeSteelWeapon() == 6 )
							{	
								FocusModeGiantSpecialAttack();
							}
							else if( ACS_GetFocusModeSteelWeapon() == 7 )
							{	
								FocusModeClawSpecialAttack();
							}
							else if( ACS_GetFocusModeSteelWeapon() == 8 )
							{	
								FocusModeAxeSpecialAttack();
							}
						}
					}
					else if ( ACS_GetWeaponMode() == 2 && !thePlayer.IsWeaponHeld( 'fist' ) )
					{
						if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
						{
							if ( ACS_GetHybridModeForwardSpecialAttack() == 0 )
							{
								if (!thePlayer.HasTag('HybridDefaultWeaponTicket')){thePlayer.AddTag('HybridDefaultWeaponTicket');}

								PrimaryWeaponSwitch(); 

								GeraltSpecialLightAttack();
							}
							else if ( ACS_GetHybridModeForwardSpecialAttack() == 1 )
							{
								if (!thePlayer.HasTag('HybridOlgierdWeaponTicket')){thePlayer.AddTag('HybridOlgierdWeaponTicket');}

								HybridModeOlgierdForwardSpecialAttack();
							}
							else if ( ACS_GetHybridModeForwardSpecialAttack() == 2 )
							{
								if (!thePlayer.HasTag('HybridEredinWeaponTicket')){thePlayer.AddTag('HybridEredinWeaponTicket');}

								HybridModeEredinShieldForwardSpecialAttack();
							}
							else if ( ACS_GetHybridModeForwardSpecialAttack() == 3 )
							{
								if (!thePlayer.HasTag('HybridClawWeaponTicket')){thePlayer.AddTag('HybridClawWeaponTicket');}

								HybridModeClawForwardSpecialAttack();
							}
							else if ( ACS_GetHybridModeForwardSpecialAttack() == 4 )
							{
								if (!thePlayer.HasTag('HybridImlerithWeaponTicket')){thePlayer.AddTag('HybridImlerithWeaponTicket');}

								HybridModeImlerithForwardSpecialAttack();
							}
							else if ( ACS_GetHybridModeForwardSpecialAttack() == 5 )
							{
								if (!thePlayer.HasTag('HybridSpearWeaponTicket')){thePlayer.AddTag('HybridSpearWeaponTicket');}

								HybridModeSpearForwardSpecialAttack();
							}
							else if ( ACS_GetHybridModeForwardSpecialAttack() == 6 )
							{
								if (!thePlayer.HasTag('HybridGregWeaponTicket')){thePlayer.AddTag('HybridGregWeaponTicket');}

								HybridModeGregForwardSpecialAttack();
							}
							else if ( ACS_GetHybridModeForwardSpecialAttack() == 7 )
							{
								if (!thePlayer.HasTag('HybridAxeWeaponTicket')){thePlayer.AddTag('HybridAxeWeaponTicket');}

								HybridModeAxeForwardSpecialAttack();
							}
							else if ( ACS_GetHybridModeForwardSpecialAttack() == 8 )
							{
								if (!thePlayer.HasTag('HybridGiantWeaponTicket')){thePlayer.AddTag('HybridGiantWeaponTicket');}

								HybridModeGiantForwardSpecialAttack();
							}
						}
						else
						{
							if ( ACS_GetHybridModeSpecialAttack() == 0 )
							{
								if (!thePlayer.HasTag('HybridDefaultWeaponTicket')){thePlayer.AddTag('HybridDefaultWeaponTicket');}

								PrimaryWeaponSwitch(); 

								GeraltSpecialLightAttack();
							}
							else if ( ACS_GetHybridModeSpecialAttack() == 1 )
							{
								if (!thePlayer.HasTag('HybridOlgierdWeaponTicket')){thePlayer.AddTag('HybridOlgierdWeaponTicket');}

								HybridModeOlgierdSpecialAttack();
							}
							else if ( ACS_GetHybridModeSpecialAttack() == 2 )
							{
								if (!thePlayer.HasTag('HybridEredinWeaponTicket')){thePlayer.AddTag('HybridEredinWeaponTicket');}

								HybridModeEredinShieldSpecialAttack();
							}
							else if ( ACS_GetHybridModeSpecialAttack() == 3 )
							{
								if (!thePlayer.HasTag('HybridClawWeaponTicket')){thePlayer.AddTag('HybridClawWeaponTicket');}

								HybridModeClawSpecialAttack();
							}
							else if ( ACS_GetHybridModeSpecialAttack() == 4 )
							{
								if (!thePlayer.HasTag('HybridImlerithWeaponTicket')){thePlayer.AddTag('HybridImlerithWeaponTicket');}

								HybridModeImlerithSpecialAttack();
							}
							else if ( ACS_GetHybridModeSpecialAttack() == 5 )
							{
								if (!thePlayer.HasTag('HybridSpearWeaponTicket')){thePlayer.AddTag('HybridSpearWeaponTicket');}

								HybridModeSpearSpecialAttack();
							}
							else if ( ACS_GetHybridModeSpecialAttack() == 6 )
							{
								if (!thePlayer.HasTag('HybridGregWeaponTicket')){thePlayer.AddTag('HybridGregWeaponTicket');}

								HybridModeGregSpecialAttack();
							}
							else if ( ACS_GetHybridModeSpecialAttack() == 7 )
							{
								if (!thePlayer.HasTag('HybridAxeWeaponTicket')){thePlayer.AddTag('HybridAxeWeaponTicket');}

								HybridModeAxeSpecialAttack();
							}
							else if ( ACS_GetHybridModeSpecialAttack() == 8 )
							{
								if (!thePlayer.HasTag('HybridGiantWeaponTicket')){thePlayer.AddTag('HybridGiantWeaponTicket');}
								
								HybridModeGiantSpecialAttack();
							}
						}
					}
					else if (ACS_GetWeaponMode() == 3 && !thePlayer.IsWeaponHeld( 'fist' ) )
					{
						if (!GetACSArmorEtherSword())
						{
							ACS_ShowSwordWitoutScabbardStuff();
						}

						if (thePlayer.IsWeaponHeld('silversword'))
						{
							if( ACS_GetItem_Eredin_Silver() )
							{	
								FocusModeEredinShieldSpecialAttack();
							}
							else if( ACS_GetItem_Olgierd_Silver() )
							{	
								EquipmentModeOlgierdSpecialAttack();
							}
							else if( ACS_GetItem_Claws_Silver() )
							{	
								FocusModeClawSpecialAttack();
							}
							else if( ACS_GetItem_Imlerith_Silver() )
							{
								FocusModeImlerithSpecialAttack();
							}
							else if( ACS_GetItem_Spear_Silver() )
							{	
								FocusModeSpearSpecialAttack();
							}
							else if( ACS_GetItem_Greg_Silver() )
							{	
								FocusModeGregSpecialAttack();
							}
							else if( ACS_GetItem_Hammer_Silver() )
							{	
								FocusModeGiantSpecialAttack();
							}
							else if( ACS_GetItem_Axe_Silver() )
							{	
								FocusModeAxeSpecialAttack();
							}
							else if( ACS_GetItem_Katana_Silver() )
							{	
								FocusModeGregSpecialAttack();
							}
							else
							{			
								ACS_DefaultSwitch();

								GeraltSpecialLightAttack();
							}
						}
						else if (thePlayer.IsWeaponHeld('steelsword'))
						{
							if( ACS_GetItem_Eredin_Steel() )
							{	
								FocusModeEredinShieldSpecialAttack();
							}
							else if( ACS_GetItem_Olgierd_Steel() )
							{	
								EquipmentModeOlgierdSpecialAttack();
							}
							else if( ACS_GetItem_Claws_Steel() )
							{	
								FocusModeClawSpecialAttack();
							}
							else if( ACS_GetItem_Imlerith_Steel() )
							{
								FocusModeImlerithSpecialAttack();
							}
							else if( ACS_GetItem_Spear_Steel() )
							{	
								FocusModeSpearSpecialAttack();
							}
							else if( ACS_GetItem_Greg_Steel() )
							{	
								FocusModeGregSpecialAttack();
							}
							else if( ACS_GetItem_Hammer_Steel() )
							{	
								FocusModeGiantSpecialAttack();
							}
							else if( ACS_GetItem_Axe_Steel() )
							{	
								FocusModeAxeSpecialAttack();
							}
							else if( ACS_GetItem_Katana_Steel() )
							{	
								FocusModeGregSpecialAttack();
							}
							else if (ACS_GetItem_MageStaff_Steel())
							{
								FocusModeMageSpecialAttack();
							}
							else
							{					
								ACS_DefaultSwitch();

								GeraltSpecialLightAttack();
							}
						}
					}

					DeactivateThings();
				}
			}
			else
			{
				action_interrupt();

				thePlayer.PrepareToAttack();
				thePlayer.SetPlayedSpecialAttackMissingResourceSound(false);
				thePlayer.AddTimer( 'IsSpecialLightAttackInputHeld', 0.00001, true );
			}
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function RandomKickActual()
	{	
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) 
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (thePlayer.HasTag('axii_sword_equipped'))
			{
				RemoveTimer('ACS_Shield_Spawn_Delay');

				AddTimer('ACS_Shield_Spawn_Delay', 0.5, false);
			}
															
			geraltRandomKick();

			RemoveTimer('ACS_Shout');

			RemoveTimer('ACS_Blood_Spray');

			AddTimer('ACS_KickDamage', 0.4, false);
		}
	}

	function IgniCounterActual()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		if (ACS_can_perform_guard_attack())
		{
			ACS_refresh_guard_attack_cooldown();

			PrimaryWeaponSwitch();	

			if (thePlayer.GetTarget().IsHuman())
			{
				geraltRandomIgniCounter_Human();

				thePlayer.SetAnimationSpeedMultiplier(1.5  );

				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
			}	
			else if (thePlayer.GetTarget().IsMonster())
			{
				geraltRandomIgniCounter_Monster();

				thePlayer.SetAnimationSpeedMultiplier(1.5  );

				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
			}
			else
			{
				geraltRandomIgniCounter_Monster();

				thePlayer.SetAnimationSpeedMultiplier(1.5  );

				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
			}
		}
	}

	function AxiiCounterActual()
	{
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();
														
		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) 
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_guard_attack())
			{
				ACS_refresh_guard_attack_cooldown();

				if (thePlayer.HasTag('axii_sword_equipped'))
				{
					RemoveTimer('ACS_Shield_Spawn_Delay');

					AddTimer('ACS_Shield_Spawn_Delay', 0.5, false);

					geraltRandomAxiiCounter();
				}
				else if (thePlayer.HasTag('axii_secondary_sword_equipped'))
				{
					if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
					{
						Grow_Geralt_Immediate_Fast(); //ACS

						thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
					}

					geraltRandomGregCounter();

					thePlayer.SetAnimationSpeedMultiplier(1.5  );

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
				}
			}
		}										
	}

	function HybridModeEredinShieldCounterActual()
	{														
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) 
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_guard_attack())
			{
				ACS_refresh_guard_attack_cooldown();

				PrimaryWeaponSwitch();

				RemoveTimer('ACS_Shield_Spawn_Delay');

				AddTimer('ACS_Shield_Spawn_Delay', 0.5, false);

				geraltRandomAxiiCounter();
			}
		}										
	}

	function HybridModeGregCounterActual()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) 
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			SecondaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_guard_attack())
			{
				ACS_refresh_guard_attack_cooldown();

				SecondaryWeaponSwitch();

				geraltRandomGregCounter();

				thePlayer.SetAnimationSpeedMultiplier(1.5  );

				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
			}
		}										
	}

	function AardCounterActual()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) 
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_guard_attack())
			{
				ACS_refresh_guard_attack_cooldown();
				// Created and designed by error_noaccess, exclusive to the Wolven Workshop discord server and Github. 
				// Not authorized to be distributed elsewhere, unless you ask me nicely.

				if (thePlayer.HasTag('aard_sword_equipped'))
				{				
					geraltRandomAardCounter();

					thePlayer.SetAnimationSpeedMultiplier(1.5  );

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
															
					ACS_StaminaDrain(1);
				}
				else if (thePlayer.HasTag('aard_secondary_sword_equipped'))
				{
					geraltRandomAxeCounter();
				}
			}
		}									
	}

	function AxeCounter()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) 
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_guard_attack())
			{
				ACS_refresh_guard_attack_cooldown();
				// Created and designed by error_noaccess, exclusive to the Wolven Workshop discord server and Github. 
				// Not authorized to be distributed elsewhere, unless you ask me nicely.

				geraltRandomAxeCounter();
			}
		}									
	}

	function HybridModeClawCounterActual()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) 
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_guard_attack())
			{
				ACS_refresh_guard_attack_cooldown();
				// Created and designed by error_noaccess, exclusive to the Wolven Workshop discord server and Github. 
				// Not authorized to be distributed elsewhere, unless you ask me nicely.

				PrimaryWeaponSwitch();

				geraltRandomAardCounter();

				thePlayer.SetAnimationSpeedMultiplier(1.5  );

				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
			}
		}									
	}

	function HybridModeAxeCounterActual()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) 
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			SecondaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_guard_attack())
			{
				ACS_refresh_guard_attack_cooldown();
				// Created and designed by error_noaccess, exclusive to the Wolven Workshop discord server and Github. 
				// Not authorized to be distributed elsewhere, unless you ask me nicely.
				SecondaryWeaponSwitch();
				geraltRandomAxeCounter();
			}
		}									
	}

	function QuenCounterActual()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) 
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_guard_attack())
			{
				ACS_refresh_guard_attack_cooldown();

				if (thePlayer.HasTag('quen_sword_equipped'))
				{														
					geraltRandomQuenCounter();

					if (thePlayer.GetStat(BCS_Vitality) <= thePlayer.GetStatMax(BCS_Vitality) * 0.75)
					{
						thePlayer.SetAnimationSpeedMultiplier(1.75  );

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);
					}
					else
					{
						thePlayer.SetAnimationSpeedMultiplier(1.5  );

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
					}
															
					ACS_StaminaDrain(1);
				}
				else if (thePlayer.HasTag('quen_secondary_sword_equipped'))
				{
					geraltRandomSpearCounter();

					thePlayer.SetAnimationSpeedMultiplier(1.5  );

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
				}
			}
		}
	}

	function HybridModeOlgierdCounterActual()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) 
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_guard_attack())
			{
				ACS_refresh_guard_attack_cooldown();

				PrimaryWeaponSwitch();

				geraltRandomQuenCounter();

				if (thePlayer.GetStat(BCS_Vitality) <= thePlayer.GetStatMax(BCS_Vitality) * 0.75)
				{
					thePlayer.SetAnimationSpeedMultiplier(1.75  );

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);
				}
				else
				{
					thePlayer.SetAnimationSpeedMultiplier(1.5  );

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
				}
			}
		}
	}

	function HybridModeSpearCounterActual()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}
																
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) 
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			SecondaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_guard_attack())
			{
				ACS_refresh_guard_attack_cooldown();

				SecondaryWeaponSwitch();
				
				geraltRandomSpearCounter();

				thePlayer.SetAnimationSpeedMultiplier(1.5  );

				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
			}
		}
	}

	function MageCounterActual()
	{														
		if (ACS_can_perform_guard_attack())
		{
			ACS_refresh_guard_attack_cooldown();

			if (thePlayer.GetStat( BCS_Focus ) > thePlayer.GetStatMax( BCS_Focus ) * 0
			&& thePlayer.GetStat( BCS_Stamina ) > thePlayer.GetStatMax( BCS_Stamina ) * 0)
			{
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

				RemoveTimer('ACS_ResetAnimation');

				geraltRandomMageCounter();
			}
			else
			{
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

				RemoveTimer('ACS_ResetAnimation');
				
				geraltRandomYrdenCounter();	
			}
		}	
	}

	function YrdenCounterActual()
	{														
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) 
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_guard_attack())
			{
				ACS_refresh_guard_attack_cooldown();

				if (thePlayer.HasTag('yrden_sword_equipped'))
				{									
					geraltRandomYrdenCounter();	
				}
				else if (thePlayer.HasTag('yrden_secondary_sword_equipped'))
				{
					if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
					{
						Grow_Geralt_Immediate_Fast(); //ACS

						thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
					}

					geraltRandomGiantCounter();
				}
			}
		}	
	}

	function HybridModeImlerithCounterActual()
	{														
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) 
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_guard_attack())
			{
				ACS_refresh_guard_attack_cooldown();
				
				PrimaryWeaponSwitch();
														
				geraltRandomYrdenCounter();	
			}
		}	
	}

	function HybridModeGiantCounterActual()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) 
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			SecondaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_guard_attack())
			{
				ACS_refresh_guard_attack_cooldown();

				SecondaryWeaponSwitch();

				geraltRandomGiantCounter();
			}
		}	
	}

	var vClawEquipStandalone : cClawEquipStandalone;

	function ACS_ClawEquipStandalone()
	{
		if (!GetWitcherPlayer().IsInCombat() 
		&& !GetWitcherPlayer().HasTag('vampire_claws_equipped')
		)
		{
			if (
			( ACS_GetWeaponMode() == 0 && ACS_GetFistMode() == 1 )
			|| ( ACS_GetWeaponMode() == 1 && ACS_GetFistMode() == 1 )
			|| ( ACS_GetWeaponMode() == 2 && ACS_GetFistMode() == 1 )
			|| ( ACS_GetWeaponMode() == 3 && (ACS_GetItem_VampClaw_Shades() || ACS_GetItem_VampClaw() ) )
			)
			{
				vClawEquipStandalone = new cClawEquipStandalone in this;
				vClawEquipStandalone.Claw_Equip_Standalone_Engage();	
			}
		}
	}

	function VampClawLightAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		if (ACS_can_perform_light_attack())
		{
			ACS_ExplorationDelayHack();

			if (ACS_StaminaBlockAction_Enabled() 
			&& VampireClawsStaminaCheck()
			)
			{					 
				if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
			}
			else
			{
				ACS_refresh_light_attack_cooldown();

				PrimaryWeaponSwitch();

				ACS_ClawEquipStandalone();

				/*								
				if (
				ccompEnabled
				&& ACS_AttitudeCheck (actor)
				&& actor.IsHuman()
				&& FinisherDistanceCheck(finisherActorTarget)
				)
				{
					ACS_Setup_Light_Attack_Internal();
				}
				else
				{
					*/
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						if (ACS_VampireSoundEffects_Enabled()) {VampVoiceEffects_Effort_Big();}						

						if (thePlayer.GetIsSprinting())
						{
							geraltClawSprintingAttack();
						}
						else
						{
							geraltRandomClawComboAttack();
						}
					}
					//else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
					else if (theInput.GetActionValue('Dodge') > 0.7
					&& thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
					{
						ACS_Weapon_Arts_Tutorial();

						RemoveTimer('RollDelay');

						Bruxa_Scream();

						if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
						&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
						{	
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
						}
						else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
						&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
						{	
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
						}
						else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
						{
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
						}
					}
					else
					{
						if (ACS_VampireSoundEffects_Enabled()) {VampVoiceEffects_Effort();}

						geraltRandomClawFistAttack();
					}
				//}

				ACS_StaminaDrain(1);
			}
		}
	}

	function VampClawHeavyAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		if (ACS_can_perform_heavy_attack())
		{
			if (ACS_StaminaBlockAction_Enabled() 
			&& VampireClawsStaminaCheck()
			)
			{
				if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
			}
			else
			{
				ACS_refresh_heavy_attack_cooldown();
											
				PrimaryWeaponSwitch();

				ACS_ClawEquipStandalone();

				/*					
				if (
				ccompEnabled
				&& ACS_AttitudeCheck (actor) 
				&& actor.IsHuman()
				&& FinisherDistanceCheck(finisherActorTarget)
				)
				{
					ACS_Setup_Heavy_Attack_Internal();	
				}
				else
				{
					*/
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						if (ACS_VampireSoundEffects_Enabled()) {VampVoiceEffects_Monster();}

						geraltRandomClawAttackSpecialDash();
					}
					else
					{
						if (ACS_VampireSoundEffects_Enabled()) {VampVoiceEffects_Effort_Big();}

						geraltRandomHeavyClawAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }	

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
					}
				//}

				ACS_StaminaDrain(2);
			}
		}
	}

	function ShockwaveFistLightAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		ACS_ExplorationDelayHack();

		if (ACS_can_perform_light_attack())
		{
			if (
			ACS_StaminaBlockAction_Enabled() 
			&& 
			StaminaCheck()
			)
			{ 
				if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
			}
			else
			{
				ACS_refresh_light_attack_cooldown();

				geraltRandomLightFistAttack();

				AddTimer('ACS_portable_aard', 0.5, false);

				ACS_StaminaDrain(2);
			}
		}
	}

	function ShockwaveFistHeavyAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		if (ACS_can_perform_heavy_attack())
		{
			if (
			ACS_StaminaBlockAction_Enabled() 
			&& 
			StaminaCheck()
			)
			{					 
				if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
			}
			else
			{
				ACS_refresh_heavy_attack_cooldown();

				//geraltRandomHeavyFistAttack();

				geraltRandomLightFistAttack();

				AddTimer('ACS_portable_aard', 0.5, false);

				ACS_StaminaDrain(2);
			}
		}
	}

	function NormalFistLightAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		ACS_ExplorationDelayHack();

		if (ACS_can_perform_light_attack())
		{
			if (
			ACS_StaminaBlockAction_Enabled() 
			&& 
			StaminaCheck()
			)
			{ 
				if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
			}
			else
			{
				ACS_refresh_light_attack_cooldown();

				geraltRandomLightFistAttack();

				ACS_StaminaDrain(2);
			}
		}
	}

	function NormalFistHeavyAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		if (ACS_can_perform_heavy_attack())
		{
			if (
			ACS_StaminaBlockAction_Enabled() 
			&& 
			StaminaCheck()
			)
			{					 
				if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
			}
			else
			{
				ACS_refresh_heavy_attack_cooldown();

				//geraltRandomHeavyFistAttack();

				geraltRandomLightFistAttack();

				ACS_StaminaDrain(2);
			}
		}
	}

	function GeraltLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		if (thePlayer.HasTag('igni_secondary_sword_equipped_TAG'))
		{
			thePlayer.RemoveTag('igni_secondary_sword_equipped_TAG');	
		}
		
		if (!thePlayer.HasTag('igni_sword_equipped_TAG'))
		{
			thePlayer.AddTag('igni_sword_equipped_TAG');	
		}

		if (ACS_Zireael_Check())
		{
			GeralCiriLightAttack();
		}
		else
		{
			if (ACS_Wolf_School_Check())
			{
				GeraltWolfLightAttack();
			}
			else if (ACS_Bear_School_Check())
			{
				GeraltBearLightAttack();
			}
			else if (ACS_Cat_School_Check())
			{
				GeraltCatLightAttack();
			}
			else if (ACS_Griffin_School_Check())
			{
				GeraltGriffinLightAttack();
			}
			else if (ACS_Manticore_School_Check())
			{
				GeraltManticoreLightAttack();
			}
			else if (ACS_Forgotten_Wolf_Check())
			{
				GeraltForgottenWolfLightAttack();
			}
			else if (ACS_Viper_School_Check())
			{
				GeraltViperLightAttack();
			}
			else if (ACS_Armor_Alpha_Equipped_Check())
			{
				GeraltACSArmorAlphaLightAttack();
			}
			else if (ACS_Armor_Omega_Equipped_Check())
			{
				GeraltACSArmorOmegaLightAttack();
			}
			else
			{
				if (ACS_DefaultMovesetCombatAnimationOverrideMode_Enabled())
				{
					GeraltOverrideModeLightAttack();
				}
				else
				{
					ACS_Setup_Light_Attack_Internal();
				}
			}
		}
	}

	function GeraltHeavyAttack()
	{			
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		if (thePlayer.HasTag('igni_sword_equipped_TAG'))
		{
			thePlayer.RemoveTag('igni_sword_equipped_TAG');	
		}
		
		if (!thePlayer.HasTag('igni_secondary_sword_equipped_TAG'))
		{
			thePlayer.AddTag('igni_secondary_sword_equipped_TAG');	
		}

		if (ACS_Zireael_Check())
		{
			GeraltCiriHeavyAttack();
		}
		else
		{
			if (ACS_Wolf_School_Check())
			{
				GeraltWolfHeavyAttack();
			}
			else if (ACS_Armor_Alpha_Equipped_Check())
			{
				GeraltACSArmorAlphaHeavyAttack();
			}
			else if (ACS_Bear_School_Check())
			{
				GeraltBearHeavyAttack();
			}
			else if (ACS_Cat_School_Check())
			{
				GeraltCatHeavyAttack();
			}
			else if (ACS_Griffin_School_Check())
			{
				GeraltGriffinHeavyAttack();
			}
			else if (ACS_Manticore_School_Check())
			{
				GeraltManticoreHeavyAttack();
			}
			else if (ACS_Forgotten_Wolf_Check())
			{
				GeraltForgottenWolfHeavyAttack();
			}
			else if (ACS_Armor_Omega_Equipped_Check())
			{
				GeraltACSArmorOmegaHeavyAttack();
			}
			else if (ACS_Viper_School_Check())
			{
				GeraltViperHeavyAttack();
			}
			else
			{
				if (ACS_DefaultMovesetCombatAnimationOverrideMode_Enabled())
				{
					GeraltOverrideModeHeavyAttack();
				}
				else
				{
					ACS_Setup_Heavy_Attack_Internal();
				}
			}
		}
	}

	function GeraltSpecialLightAttack()
	{
		if (thePlayer.HasTag('igni_secondary_sword_equipped_TAG'))
		{
			thePlayer.RemoveTag('igni_secondary_sword_equipped_TAG');	
		}
		
		if (!thePlayer.HasTag('igni_sword_equipped_TAG'))
		{
			thePlayer.AddTag('igni_sword_equipped_TAG');	
		}
				
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		if (ACS_Zireael_Check())
		{
			GeraltCiriSpecialLightAttack();
		}
		else
		{
			if (ACS_Wolf_School_Check()
			|| ACS_Forgotten_Wolf_Check()
			|| ACS_Armor_Equipped_Check())
			{
				if(thePlayer.GetStat(BCS_Stamina) > 0)
				{
					action_interrupt_with_igni_sword();
				}

				thePlayer.SetBehaviorVariable( 'combatActionType', (int)CAT_SpecialAttack );
				thePlayer.SetBehaviorVariable( 'playerAttackType', 0 );
				thePlayer.RaiseForceEvent	 	( 'CombatAction' );
				
				thePlayer.PrepareToAttack();
				thePlayer.SetPlayedSpecialAttackMissingResourceSound(false);
				thePlayer.AddTimer( 'IsSpecialLightAttackInputHeld', 0.00001, true );
			}
			else if (ACS_Bear_School_Check())
			{
				GeraltBearSpecialLightAttack();
			}
			else if (ACS_Cat_School_Check())
			{
				GeraltCatSpecialLightAttack();
			}
			else if (ACS_Griffin_School_Check())
			{
				GeraltGriffinSpecialLightAttack();
			}
			else if (ACS_Manticore_School_Check())
			{
				GeraltManticoreSpecialLightAttack();
			}
			else if (ACS_Viper_School_Check())
			{
				GeraltViperSpecialLightAttack();
			}
			else
			{
				/*
				if( RandF() < 0.5 ) 
				{
					PlayerPlayAnimation( 'attack_knee_left_003_ACS' );
				}
				else
				{
					PlayerPlayAnimation( 'attack_knee_right_002_ACS' );
				}

				AddTimer('Whirl_Delay_Timer', 1, false);
				*/

				if (ACS_DefaultMovesetCombatAnimationOverrideMode_Enabled())
				{
					if(thePlayer.GetStat(BCS_Stamina) > 0)
					{
						action_interrupt_with_igni_sword();
					}

					thePlayer.SetBehaviorVariable( 'combatActionType', (int)CAT_SpecialAttack );
					thePlayer.SetBehaviorVariable( 'playerAttackType', 0 );
					thePlayer.RaiseForceEvent	 	( 'CombatAction' );
					
					thePlayer.PrepareToAttack();
					thePlayer.SetPlayedSpecialAttackMissingResourceSound(false);
					thePlayer.AddTimer( 'IsSpecialLightAttackInputHeld', 0.00001, true );
				}
				else
				{
					if(thePlayer.GetStat(BCS_Stamina) > 0)
					{
						action_interrupt_with_igni_sword();
					}

					thePlayer.PrepareToAttack();
					thePlayer.SetPlayedSpecialAttackMissingResourceSound(false);
					thePlayer.AddTimer( 'IsSpecialLightAttackInputHeld', 0.00001, true );
				}
			}
		}
	}

	timer function Whirl_Delay_Timer(dt : float, id : int)
	{
		thePlayer.ClearAnimationSpeedMultipliers();

		if(thePlayer.GetStat(BCS_Stamina) > 0)
		{
			action_interrupt_with_igni_sword();
		}

		if (thePlayer.HasTag('igni_secondary_sword_equipped_TAG'))
		{
			thePlayer.RemoveTag('igni_secondary_sword_equipped_TAG');	
		}
		
		if (!thePlayer.HasTag('igni_sword_equipped_TAG'))
		{
			thePlayer.AddTag('igni_sword_equipped_TAG');	
		}

		thePlayer.PrepareToAttack();
		thePlayer.SetPlayedSpecialAttackMissingResourceSound(false);
		thePlayer.AddTimer( 'IsSpecialLightAttackInputHeld', 0.00001, true );
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Wolf School

	function GeraltWolfLightAttack()
	{	
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					PrimaryWeaponSwitch();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomGeraltLightAttackForward_Wolf();
					}
					else
					{
						geraltRandomGeraltLightAttack_Wolf();
					}

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function GeraltWolfHeavyAttack()
	{	
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_heavy_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					PrimaryWeaponSwitch();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomGeraltHeavyAttackForward_Wolf();
					}
					else
					{
						geraltRandomGeraltHeavyAttack_Wolf();
					}

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function GeraltWolfSpecialLightAttack()
	{
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					PrimaryWeaponSwitch(); 

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);		
						
					geraltRandomGeraltSpecialAttack_Wolf();

					ACS_StaminaDrain(3);
				}
			}
		}	
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Bear School

	function GeraltBearLightAttack()
	{	
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					PrimaryWeaponSwitch();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 0.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 0.75 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	
																	
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomGeraltLightAttackForward_Bear();
					}
					else
					{
						geraltRandomGeraltLightAttack_Bear();
					}	

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function GeraltBearHeavyAttack()
	{	
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_heavy_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					PrimaryWeaponSwitch();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 0.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 0.75 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomGeraltHeavyAttackForward_Bear();
					}
					else
					{
						geraltRandomGeraltHeavyAttack_Bear();
					}												

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function GeraltBearSpecialLightAttack()
	{
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					PrimaryWeaponSwitch(); 

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	
						
					geraltRandomGeraltSpecialAttack_Bear();

					ACS_StaminaDrain(3);
				}
			}
		}	
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Cat School

	function GeraltCatLightAttack()
	{	
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					PrimaryWeaponSwitch();
																	
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						geraltRandomGeraltLightAttackForward_Cat();
					}
					else
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.25  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

						geraltRandomGeraltLightAttack_Cat();
					}

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function GeraltCatHeavyAttack()
	{	
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_heavy_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					PrimaryWeaponSwitch();
																	
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

						geraltRandomGeraltHeavyAttackForward_Cat();
					}
					else
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.25  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

						geraltRandomGeraltLightAttack_Cat();
					}

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function GeraltCatSpecialLightAttack()
	{
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					PrimaryWeaponSwitch(); 

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	
						
					geraltRandomGeraltSpecialAttack_Cat();

					ACS_StaminaDrain(3);
				}
			}
		}	
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Griffin School

	function GeraltGriffinLightAttack()
	{	
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					PrimaryWeaponSwitch();
																	
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

						geraltRandomGeraltLightAttackForward_Griffin();
					}
					else
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						geraltRandomGeraltLightAttack_Griffin();
					}

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function GeraltGriffinHeavyAttack()
	{	
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_heavy_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					PrimaryWeaponSwitch();
																	
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						geraltRandomGeraltHeavyAttackForward_Griffin();
					}
					else
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

						geraltRandomGeraltHeavyAttack_Griffin();
					}

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function GeraltGriffinSpecialLightAttack()
	{
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					PrimaryWeaponSwitch(); 

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}		
						
					geraltRandomGeraltSpecialAttack_Griffin();

					ACS_StaminaDrain(3);
				}
			}
		}	
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Manticore School

	function GeraltManticoreLightAttack()
	{	
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					PrimaryWeaponSwitch();
																	
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						geraltRandomGeraltLightAttackForward_Manticore();
					}
					else
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						geraltRandomGeraltLightAttack_Manticore();
					}

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function GeraltManticoreHeavyAttack()
	{	
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_heavy_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					PrimaryWeaponSwitch();
																	
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					geraltRandomGeraltHeavyAttack_Manticore();

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function GeraltManticoreSpecialLightAttack()
	{
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					PrimaryWeaponSwitch(); 

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);		
						
					geraltRandomGeraltSpecialAttack_Manticore();

					ACS_StaminaDrain(3);
				}
			}
		}	
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Viper School

	function GeraltViperLightAttack()
	{	
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					PrimaryWeaponSwitch();									

					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						geraltRandomGeraltLightAttackForward_Viper();
					}
					else
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						geraltRandomGeraltLightAttack_Viper();
					}

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function GeraltViperHeavyAttack()
	{	
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_heavy_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					PrimaryWeaponSwitch();
																	
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						geraltRandomGeraltHeavyAttackForward_Viper();
					}
					else
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						geraltRandomGeraltHeavyAttack_Viper();
					}

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function GeraltViperSpecialLightAttack()
	{
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					PrimaryWeaponSwitch(); 

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	
						
					geraltRandomGeraltSpecialAttack_Viper();

					ACS_StaminaDrain(3);
				}
			}
		}	
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Forgotten Wolf

	function GeraltForgottenWolfLightAttack()
	{	
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					PrimaryWeaponSwitch();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomGeraltLightAttackForward_Wolf();
					}
					else
					{
						geraltRandomGeraltLightAttack_Wolf();
					}

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function GeraltForgottenWolfHeavyAttack()
	{	
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_heavy_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					PrimaryWeaponSwitch();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomGeraltHeavyAttackForward_Wolf();
					}
					else
					{
						geraltRandomGeraltHeavyAttack_Wolf();
					}

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function GeraltForgottenWolfSpecialLightAttack()
	{
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					PrimaryWeaponSwitch(); 

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					AddTimer('ACS_ResetAnimation', 0.125  , false);		
						
					geraltRandomGeraltSpecialAttack_Wolf();

					ACS_StaminaDrain(3);
				}
			}
		}	
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// ACS Armor Attacks

	function GeraltACSArmorAlphaLightAttack()
	{	
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					PrimaryWeaponSwitch();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomGeraltLightAttackForward_ACSArmor();
					}
					else
					{
						geraltRandomGeraltLightAttack_Wolf();
					}

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function GeraltACSArmorOmegaLightAttack()
	{	
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					PrimaryWeaponSwitch();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomGeraltLightAttackForward_ACSArmor();
					}
					else
					{
						geraltRandomGeraltLightAttack_Wolf();
					}

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function geraltRandomGeraltLightAttackForward_ACSArmor() 
	{
		MovementAdjust();

		movementAdjustor.AdjustLocationVertically( ticket, false );
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				if( targetDistance <= 3 * 3 ) 
				{
					switch ( combo_counter_geralt_light_attack )
					{
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

						combo_counter_damage -= combo_counter_damage;

						combo_counter_geralt_light_attack += 1;
						break;

						case 0: 
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

						combo_counter_damage -= combo_counter_damage;

						combo_counter_geralt_light_attack += 1;
						break;

						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
						break;

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
						break;

						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
						break;
						
						case 4:
						PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
						break;
						
						case 5:
						PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
						break;

						case 6:
						PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
						break;
						
						case 7:
						PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
						break;
						
						case 8:
						PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
						break;

						case 9:
						PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
						break;

						case 10:
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

						PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
						break;

						case 11:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_right_1_lp_40ms_forward_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack -= combo_counter_geralt_light_attack;
						break;
					}
				}
				else
				{
					thePlayer.DestroyEffect('dodge_acs_armor');
					thePlayer.PlayEffectSingle('dodge_acs_armor');

					thePlayer.DestroyEffect('bruxa_dash_trails');
					thePlayer.PlayEffectSingle('bruxa_dash_trails');

					thePlayer.PlayEffectSingle('special_attack_only_black_fx');
					thePlayer.StopEffect('special_attack_only_black_fx');

					movementAdjustor.SlideTowards( ticket, actor, distArmorSpecialDash, distArmorSpecialDash );

					if (combo_counter_geralt_light_attack_forward == 0)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_rp_50ms_mod_ACS');	

						combo_counter_damage -= combo_counter_damage;

						combo_counter_geralt_light_attack_forward += 1;
					}
					else if (combo_counter_geralt_light_attack_forward == 1)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_lp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward += 1;
					}

					else if (combo_counter_geralt_light_attack_forward == 2)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_lp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward += 1;
					}

					else if (combo_counter_geralt_light_attack_forward == 3)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_1_rp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward += 1;
					}

					else if (combo_counter_geralt_light_attack_forward == 4)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_2_lp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward += 1;
					}

					else if (combo_counter_geralt_light_attack_forward == 5)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_2_rp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward += 1;
					}

					else if (combo_counter_geralt_light_attack_forward == 6)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_rp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward += 1;
					}

					else if (combo_counter_geralt_light_attack_forward == 7)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_lp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward += 1;
					}

					else if (combo_counter_geralt_light_attack_forward == 8)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_rp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward += 1;
					}

					else if (combo_counter_geralt_light_attack_forward == 9)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_3_rp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward -= combo_counter_geralt_light_attack_forward;
					}
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3 * 3 ) 
				{
					geralt_light_attack_forward_index_1 = RandDifferent(this.previous_geralt_light_attack_forward_index_1 , 12);

					switch (geralt_light_attack_forward_index_1) 
					{	
						case 11:
						PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	
						break;

						case 10:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_right_1_lp_40ms_forward_ACS');
						break;

						case 9:
						PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');
						break;

						case 8:
						PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');
						break;

						case 7:
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	
						PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');
						break;
					
						case 6:
						PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');
						break;
					
						case 5:
						PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');
						break;			
						
						case 4:
						PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');
						break;	
						
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
						break;	
						
						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
						break;	
					
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
						break;	
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
						break;	
					}

					this.previous_geralt_light_attack_forward_index_1 = geralt_light_attack_forward_index_1;
				}
				else
				{
					movementAdjustor.SlideTowards( ticket, actor, distArmorSpecialDash, distArmorSpecialDash );

					thePlayer.DestroyEffect('dodge_acs_armor');
					thePlayer.PlayEffectSingle('dodge_acs_armor');

					thePlayer.DestroyEffect('bruxa_dash_trails');
					thePlayer.PlayEffectSingle('bruxa_dash_trails');

					thePlayer.PlayEffectSingle('special_attack_only_black_fx');
					thePlayer.StopEffect('special_attack_only_black_fx');

					geralt_light_attack_forward_index_1 = RandDifferent(this.previous_geralt_light_attack_forward_index_1 , 10);

					switch (geralt_light_attack_forward_index_1) 
					{
						case 9:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_3_rp_50ms_mod_ACS');
						break;

						case 8:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_rp_50ms_mod_ACS');
						break;

						case 7:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_lp_50ms_mod_ACS');
						break;

						case 6:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_rp_50ms_mod_ACS');
						break;

						case 5:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_2_rp_50ms_mod_ACS');
						break;

						case 4:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_2_lp_50ms_mod_ACS');
						break;

						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_1_rp_50ms_mod_ACS');
						break;	

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_lp_50ms_mod_ACS');
						break;	

						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_lp_50ms_mod_ACS');
						break;	
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_rp_50ms_mod_ACS');
						break;		
					}

					this.previous_geralt_light_attack_forward_index_1 = geralt_light_attack_forward_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_forward == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_rp_50ms_mod_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_forward += 1;
				}
				else if (combo_counter_geralt_light_attack_forward == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_lp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_lp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_1_rp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_2_lp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_2_rp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_rp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 7)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_lp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 8)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_rp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 9)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_3_rp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward -= combo_counter_geralt_light_attack_forward;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_forward_index_3 = RandDifferent(this.previous_geralt_light_attack_forward_index_3 , 10);

				switch (geralt_light_attack_forward_index_3) 
				{	
					case 9:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_3_rp_50ms_mod_ACS');
					break;

					case 8:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_rp_50ms_mod_ACS');
					break;

					case 7:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_lp_50ms_mod_ACS');
					break;

					case 6:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_rp_50ms_mod_ACS');
					break;

					case 5:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_2_rp_50ms_mod_ACS');
					break;

					case 4:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_2_lp_50ms_mod_ACS');
					break;

					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_1_rp_50ms_mod_ACS');
					break;	

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_lp_50ms_mod_ACS');
					break;	

					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_lp_50ms_mod_ACS');
					break;	
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_rp_50ms_mod_ACS');
					break;	
				}

				this.previous_geralt_light_attack_forward_index_3 = geralt_light_attack_forward_index_3;
			}
		}
	}

	function GeraltACSArmorAlphaHeavyAttack()
	{	
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_heavy_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					PrimaryWeaponSwitch();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomGeraltHeavyAttackForward_ACSArmor();
					}
					else
					{
						geraltRandomGeraltHeavyAttack_Wolf();
					}

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function GeraltACSArmorOmegaHeavyAttack()
	{	
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_heavy_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					PrimaryWeaponSwitch();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomGeraltHeavyAttackForward_ACSArmor();
					}
					else
					{
						geraltRandomGeraltHeavyAttack_Wolf();
					}

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function geraltRandomGeraltHeavyAttackForward_ACSArmor() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				if( GetWitcherPlayer().GetStat( BCS_Stamina ) > GetWitcherPlayer().GetStatMax( BCS_Stamina ) * 0.125  ) 
				{
					RemoveTimer('SpecialDashCloseSlideDelay');

					if (actor.IsOnGround() && !((CNewNPC)actor).IsFlying())
					{
						AddTimer('SpecialDashCloseSlideDelay', 0.06125, false);
					}

					thePlayer.DestroyEffect('dodge_acs_armor');
					thePlayer.PlayEffectSingle('dodge_acs_armor');

					thePlayer.DestroyEffect('bruxa_dash_trails');
					thePlayer.PlayEffectSingle('bruxa_dash_trails');

					thePlayer.PlayEffectSingle('special_attack_only_black_fx');
					thePlayer.StopEffect('special_attack_only_black_fx');

					thePlayer.StopEffect('shadowdash_shockwave');

					thePlayer.PlayEffectSingle('shadowdash_shockwave');

					thePlayer.StopEffect('shadowdash_shockwave');

					PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');

					GetWitcherPlayer().DrainStamina( ESAT_FixedValue, GetWitcherPlayer().GetStatMax( BCS_Stamina ) * 0.125 , 1.5 );
				}
				else
				{
					if( targetDistance <= 3 * 3 ) 
					{
						ACS_Combo_Mode_Reset();
					
						if (combo_counter_geralt_heavy_attack == 0)
						{
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');	

							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack += 1;
						}
						else if (combo_counter_geralt_heavy_attack == 1)
						{
							
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');

							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack += 1;
						}

						else if (combo_counter_geralt_heavy_attack == 2)
						{
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');

							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack += 1;
						}

						else if (combo_counter_geralt_heavy_attack == 3)
						{
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');

							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack += 1;
						}

						else if (combo_counter_geralt_heavy_attack == 4)
						{
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
			
							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack += 1;
						}

						else if (combo_counter_geralt_heavy_attack == 5)
						{
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');

							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack += 1;
						}

						else if (combo_counter_geralt_heavy_attack == 6)
						{
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');

							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack += 1;
						}

						else if (combo_counter_geralt_heavy_attack == 7)
						{
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');

							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack += 1;
						}

						else if (combo_counter_geralt_heavy_attack == 8)
						{
							
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');

							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack += 1;
						}

						else if (combo_counter_geralt_heavy_attack == 9)
						{
							
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
			
							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack += 1;
						}

						else if (combo_counter_geralt_heavy_attack == 10)
						{
							
							PlayerPlayAnimation( 'geralt_attack_strong_5_rp_ACS');
			
							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack += 1;
						}

						else if (combo_counter_geralt_heavy_attack == 11)
						{
							
							PlayerPlayAnimation( 'geralt_attack_strong_3_lp_ACS');
			
							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack += 1;
						}

						else if (combo_counter_geralt_heavy_attack == 12)
						{
							
							PlayerPlayAnimation( 'geralt_attack_strong_4_rp_ACS');
			
							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack += 1;
						}

						else if (combo_counter_geralt_heavy_attack == 13)
						{
							
							PlayerPlayAnimation( 'geralt_attack_strong_2_lp_ACS');
			
							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack -= combo_counter_geralt_heavy_attack;
						}
					}
					else
					{
						ACS_Combo_Mode_Reset();
						
						if (combo_counter_geralt_heavy_attack_forward == 0)
						{
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_lp_80ms_mod_ACS');	

							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack_forward += 1;
						}
						else if (combo_counter_geralt_heavy_attack_forward == 1)
						{
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_right_1_rp_80ms_mod_ACS');	

							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack_forward += 1;
						}
						else if (combo_counter_geralt_heavy_attack_forward == 2)
						{
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_back_1_rp_80ms_mod_ACS');	

							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack_forward += 1;
						}
						else if (combo_counter_geralt_heavy_attack_forward == 3)
						{
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_rp_80ms_mod_ACS');	

							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack_forward -= combo_counter_geralt_heavy_attack_forward;
						}
					}
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( GetWitcherPlayer().GetStat( BCS_Stamina ) > GetWitcherPlayer().GetStatMax( BCS_Stamina ) * 0.125  ) 
				{
					RemoveTimer('SpecialDashCloseSlideDelay');

					if (actor.IsOnGround() && !((CNewNPC)actor).IsFlying())
					{
						AddTimer('SpecialDashCloseSlideDelay', 0.06125, false);
					}

					thePlayer.DestroyEffect('dodge_acs_armor');
					thePlayer.PlayEffectSingle('dodge_acs_armor');

					thePlayer.DestroyEffect('bruxa_dash_trails');
					thePlayer.PlayEffectSingle('bruxa_dash_trails');

					thePlayer.PlayEffectSingle('special_attack_only_black_fx');
					thePlayer.StopEffect('special_attack_only_black_fx');

					thePlayer.StopEffect('shadowdash_shockwave');

					thePlayer.PlayEffectSingle('shadowdash_shockwave');

					thePlayer.StopEffect('shadowdash_shockwave');

					PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');

					GetWitcherPlayer().DrainStamina( ESAT_FixedValue, GetWitcherPlayer().GetStatMax( BCS_Stamina ) * 0.125 , 1.5 );
				}
				else
				{
					if( targetDistance <= 3 * 3 ) 
					{
						geralt_heavy_attack_forward_index_1 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_1 , 14);

						switch (geralt_heavy_attack_forward_index_1) 
						{
							case 13:
							PlayerPlayAnimation( 'geralt_attack_strong_2_lp_ACS');
							break;

							case 12:
							PlayerPlayAnimation( 'geralt_attack_strong_4_rp_ACS');
							break;

							case 11:
							PlayerPlayAnimation( 'geralt_attack_strong_3_lp_ACS');
							break;

							case 10:
							PlayerPlayAnimation( 'geralt_attack_strong_5_rp_ACS');
							break;

							case 9:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
							break;	

							case 8:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
							break;	

							case 7:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');
							break;	

							case 6:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');
							break;	

							case 5:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');
							break;	

							case 4:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
							break;			
							
							case 3:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');
							break;

							case 2:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');
							break;
							
							case 1:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');
							break;
							
							default:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');
							break;
						}

						this.previous_geralt_heavy_attack_forward_index_1 = geralt_heavy_attack_forward_index_1;
					}
					else
					{
						geralt_heavy_attack_forward_index_1 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_1 , 4);

						switch (geralt_heavy_attack_forward_index_1) 
						{	
							case 3:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_back_1_rp_80ms_mod_ACS');
							break;	

							case 2:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_rp_80ms_mod_ACS');
							break;	

							case 1:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_right_1_rp_80ms_mod_ACS');
							break;	

							default:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_lp_80ms_mod_ACS');
							break;	
						}

						this.previous_geralt_heavy_attack_forward_index_1 = geralt_heavy_attack_forward_index_1;
					}
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_forward == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_lp_80ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_right_1_rp_80ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_back_1_rp_80ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_rp_80ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward -= combo_counter_geralt_heavy_attack_forward;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_heavy_attack_forward_index_3 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_3 , 4);

				switch (geralt_heavy_attack_forward_index_3) 
				{	
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_back_1_rp_80ms_mod_ACS');
					break;	

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_rp_80ms_mod_ACS');
					break;	

					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_right_1_rp_80ms_mod_ACS');
					break;	

					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_lp_80ms_mod_ACS');
					break;			
				}

				this.previous_geralt_heavy_attack_forward_index_3 = geralt_heavy_attack_forward_index_3;
			}
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Ciri Attacks

	function GeralCiriLightAttack()
	{	
		if (!thePlayer.IsEffectActive('fury_403_ciri', false))
		{
			thePlayer.PlayEffectSingle( 'fury_403_ciri' );
		}

		if (!thePlayer.IsEffectActive('fury_ciri', false))
		{
			thePlayer.PlayEffectSingle( 'fury_ciri' );
		}

		if (!thePlayer.IsEffectActive('acs_fury_effect', false))
		{
			thePlayer.PlayEffectSingle( 'acs_fury_effect' );
		}

		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					PrimaryWeaponSwitch();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomGeraltLightAttackForward_Ciri();
					}
					else
					{
						geraltRandomGeraltLightAttack_Wolf();
					}

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function GeraltCiriHeavyAttack()
	{	
		if (!thePlayer.IsEffectActive('fury_403_ciri', false))
		{
			thePlayer.PlayEffectSingle( 'fury_403_ciri' );
		}

		if (!thePlayer.IsEffectActive('fury_ciri', false))
		{
			thePlayer.PlayEffectSingle( 'fury_ciri' );
		}

		if (!thePlayer.IsEffectActive('acs_fury_effect', false))
		{
			thePlayer.PlayEffectSingle( 'acs_fury_effect' );
		}

		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_heavy_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					PrimaryWeaponSwitch();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomGeraltHeavyAttackForward_Ciri();
					}
					else
					{
						geraltRandomGeraltHeavyAttack_Wolf();
					}

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function GeraltCiriSpecialLightAttack()
	{
		if (!thePlayer.IsEffectActive('fury_403_ciri', false))
		{
			thePlayer.PlayEffectSingle( 'fury_403_ciri' );
		}

		if (!thePlayer.IsEffectActive('fury_ciri', false))
		{
			thePlayer.PlayEffectSingle( 'fury_ciri' );
		}

		if (!thePlayer.IsEffectActive('acs_fury_effect', false))
		{
			thePlayer.PlayEffectSingle( 'acs_fury_effect' );
		}

		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					PrimaryWeaponSwitch(); 

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
						
					geraltRandomGeraltSpecialAttack_Ciri();

					ACS_StaminaDrain(3);
				}
			}
		}	
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Override Mode

	function GeraltOverrideModeLightAttack()
	{	
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					PrimaryWeaponSwitch();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.125 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomGeraltLightAttackForward_Wolf();
					}
					else
					{
						geraltRandomGeraltLightAttack_Wolf();
					}

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function GeraltOverrideModeHeavyAttack()
	{	
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_heavy_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					PrimaryWeaponSwitch();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomGeraltHeavyAttackForward_Wolf();
					}
					else
					{
						geraltRandomGeraltHeavyAttack_Wolf();
					}

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function ArmigerModeOlgierdLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					PrimaryWeaponSwitch();
																	
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						geraltRandomOlgierdPirouette();
					}
					//else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
					else if (theInput.GetActionValue('Dodge') > 0.7
					&& thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
					{
						ACS_Weapon_Arts_Tutorial();

						RemoveTimer('RollDelay');

						Umbral_Slash_Single();
					}
					else
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}		

						geraltRandomOlgierdAttack();
					}

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function ArmigerModeClawLightAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
																
					thePlayer.BreakPheromoneEffect();
																	
					PrimaryWeaponSwitch();
																	
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						if (thePlayer.GetIsSprinting())
						{
							geraltClawSprintingAttack();
						}
						else
						{
							geraltRandomClawComboAttack();
						}		
					}
					//else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
					else if (theInput.GetActionValue('Dodge') > 0.7
					&& thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) )
					{
						ACS_Weapon_Arts_Tutorial();

						RemoveTimer('RollDelay');

						Bruxa_Scream();

						thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
					}
					else
					{
						geraltRandomClawAttack();
					}

					ACS_StaminaDrain(1);
				}
			}
		//}
	}

	function ArmigerModeEredinLightAttack()
	{											
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
												
					thePlayer.BreakPheromoneEffect();
																	
					PrimaryWeaponSwitch();
																													
					if (thePlayer.IsGuarded())
					{
						if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
						{
							Grow_Geralt_Immediate_Fast(); //ACS

							thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
						}

						if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
						{
							geraltRandomShieldComboAttack();
						}
						else
						{
							geraltRandomShieldAttack();
						}
					}
					else
					{
						if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
						{
							geraltRandomEredinComboAttack();

							if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

							if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }
																			
							RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
						}
						//else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
						else if (theInput.GetActionValue('Dodge') > 0.7
						&& thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
						{
							ACS_Weapon_Arts_Tutorial();

							RemoveTimer('RollDelay');

							Sparagmos();

							if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
							&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
							{	
								
								thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
							}
							else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
							&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
							{	
								
								thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
							}
							else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
							{
								thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
							}
						}
						else
						{
							geraltRandomEredinAttack();

							if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

							if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }
																			
							RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
						}	
					}

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function ArmigerModeImlerithLightAttackTest()
	{											
		//if (ACS_can_perform_light_attack())
		//{
			//ACS_refresh_light_attack_cooldown();
																
			thePlayer.BreakPheromoneEffect();
																
			PrimaryWeaponSwitch();

			geraltRandomImlerithBerserkAttack();

			if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

			if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(2  ); }

			RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
			
			ACS_StaminaDrain(1);
		//}
	}

	function ArmigerModeImlerithLightAttack()
	{											
		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
																		
					thePlayer.BreakPheromoneEffect();
																		
					PrimaryWeaponSwitch();

					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomImlerithAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
					}																										
					//else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
					else if (theInput.GetActionValue('Dodge') > 0.7
					&& thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
					{
						ACS_Weapon_Arts_Tutorial();

						RemoveTimer('RollDelay');

						ACS_TKInit();

						if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
						&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
						{	
							
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
						}
						else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
						&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
						{	
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
						}
						else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
						{
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
						}
					}
					else
					{
						geraltRandomImlerithBerserkAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(2  ); }

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
					}

					ACS_StaminaDrain(1);
				}
			}
		//}
	}

	function ArmigerModeGeraltHeavyAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		if (thePlayer.HasTag('igni_sword_equipped_TAG'))
		{
			thePlayer.RemoveTag('igni_sword_equipped_TAG');	
		}
		
		if (!thePlayer.HasTag('igni_secondary_sword_equipped_TAG'))
		{
			thePlayer.AddTag('igni_secondary_sword_equipped_TAG');	
		}

		if (ACS_Zireael_Check())
		{
			GeraltCiriHeavyAttack();
		}
		else
		{
			if (ACS_Wolf_School_Check())
			{
				GeraltWolfHeavyAttack();
			}
			else if (ACS_Armor_Alpha_Equipped_Check())
			{
				GeraltACSArmorAlphaHeavyAttack();
			}
			else if (ACS_Bear_School_Check())
			{
				GeraltBearHeavyAttack();
			}
			else if (ACS_Cat_School_Check())
			{
				GeraltCatHeavyAttack();
			}
			else if (ACS_Griffin_School_Check())
			{
				GeraltGriffinHeavyAttack();
			}
			else if (ACS_Manticore_School_Check())
			{
				GeraltManticoreHeavyAttack();
			}
			else if (ACS_Forgotten_Wolf_Check())
			{
				GeraltForgottenWolfHeavyAttack();
			}
			else if (ACS_Armor_Omega_Equipped_Check())
			{
				GeraltACSArmorOmegaHeavyAttack();
			}
			else if (ACS_Viper_School_Check())
			{
				GeraltViperHeavyAttack();
			}
			else
			{
				SecondaryWeaponSwitch();	

				if (ACS_DefaultMovesetCombatAnimationOverrideMode_Enabled())
				{
					GeraltOverrideModeHeavyAttack();
				}
				else
				{
					ACS_Setup_Heavy_Attack_Internal();
				}
			}
		}
	}

	function ArmigerModeSpearHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			thePlayer.BreakPheromoneEffect();

			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
																
					SecondaryWeaponSwitch();

					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomSpearAttackAlt();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
									
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
																	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	
					}
					//else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
					else if (theInput.GetActionValue('Dodge') > 0.7
					&& thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
					{
						ACS_Weapon_Arts_Tutorial();

						RemoveTimer('RollDelay');

						Storm_Spear();

						if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
						&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
						{	
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
						}
						else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
						&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
						{	
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
						}
						else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
						{
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
						}
					}
					else
					{
						geraltRandomSpearAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
									
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
																	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	
					}

					ACS_StaminaDrain(2);
				}
			}
		//}
	}

	function ArmigerModeAxeHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();											

					SecondaryWeaponSwitch();

					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{										
						geraltRandom2hAxeAttack_Armiger();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
															
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	
					}
					//else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
					else if (theInput.GetActionValue('Dodge') > 0.7
					&& thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
					{
						ACS_Weapon_Arts_Tutorial();

						RemoveTimer('RollDelay');

						Water_Aard();

						if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
						&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
						{	
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
						}
						else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
						&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
						{	
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
						}
						else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
						{
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
						}
					}
					else
					{
						geraltRandom2hAxeAttack_Armiger();

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25  ); }
				
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
					}

					ACS_StaminaDrain(2);													
				}				
			}
		//}
	}

	function ArmigerModeGregHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			SecondaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			thePlayer.BreakPheromoneEffect();

			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
																
					SecondaryWeaponSwitch();

					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomGregAttackAlt();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.25  ); }
																	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	
					}
					//else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
					else if (theInput.GetActionValue('Dodge') > 0.7
					&& thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) )
					{
						ACS_Weapon_Arts_Tutorial();

						RemoveTimer('RollDelay');

						Giant_Sword();

						thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
					}
					else
					{												
						geraltRandomGregAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }
																	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	
					}

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function ArmigerModeHammerHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			thePlayer.BreakPheromoneEffect();

			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();

					SecondaryWeaponSwitch();

					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{					
						geraltRandomHammerSpecialAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.25  ); }

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
					}
					//else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
					else if (theInput.GetActionValue('Dodge') > 0.7
					&& thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
					{
						ACS_Weapon_Arts_Tutorial();

						RemoveTimer('RollDelay');

						Giant_Stomp();

						if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
						&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
						{	
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
						}
						else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
						&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
						{	
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
						}
						else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
						{
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
						}
					}
					else
					{
						geraltRandomHammerAttack();
					}

					ACS_StaminaDrain(2);											
				}
			}
		//}
	}

	function FocusModeOlgierdLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
									
					thePlayer.BreakPheromoneEffect();
												
					PrimaryWeaponSwitch();
												
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomOlgierdLightAttackAlt();
					}
					//else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
					else if (theInput.GetActionValue('Dodge') > 0.7
					&& thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
					{
						ACS_Weapon_Arts_Tutorial();

						RemoveTimer('RollDelay');

						Umbral_Slash_Single();
					}
					else
					{
						geraltRandomOlgierdLightAttack();
					}

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function EquipmentModeOlgierdLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
									
					thePlayer.BreakPheromoneEffect();
												
					PrimaryWeaponSwitch();
												
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomOlgierdLightAttackAlt();
					}
					//else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
					else if (theInput.GetActionValue('Dodge') > 0.7
					&& thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 
					&& ACS_GetItem_Iris()
					)
					{
						ACS_Weapon_Arts_Tutorial();

						RemoveTimer('RollDelay');

						Umbral_Slash_Single();
					}
					else
					{
						geraltRandomOlgierdLightAttack();
					}

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function HybridModeOlgierdLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
									
					thePlayer.BreakPheromoneEffect();
												
					PrimaryWeaponSwitch();
							
					geraltRandomOlgierdLightAttack();

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function HybridModeOlgierdForwardLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
									
					thePlayer.BreakPheromoneEffect();
												
					PrimaryWeaponSwitch();
						
					geraltRandomOlgierdLightAttackAlt();	

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function FocusModeClawLightAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
											
					thePlayer.BreakPheromoneEffect();
												
					PrimaryWeaponSwitch();
																			
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						if (thePlayer.GetIsSprinting())
						{
							geraltClawSprintingAttack();
						}
						else
						{
							geraltRandomClawLightAttackAlt();
						}
					}
					//else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
					else if (theInput.GetActionValue('Dodge') > 0.7
					&& thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) )
					{
						ACS_Weapon_Arts_Tutorial();

						RemoveTimer('RollDelay');

						Bruxa_Scream();

						thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
					}
					else
					{
						geraltRandomClawLightAttack();
					}

					ACS_StaminaDrain(1);
				}
			}
		//}
	}

	function HybridModeClawLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					PrimaryWeaponSwitch();		

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
											
					thePlayer.BreakPheromoneEffect();
												
					PrimaryWeaponSwitch();
							
					geraltRandomClawLightAttack();

					ACS_StaminaDrain(1);
				}
			}
		//}
	}

	function HybridModeClawForwardLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{			
					PrimaryWeaponSwitch();	

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
											
					thePlayer.BreakPheromoneEffect();
												
					PrimaryWeaponSwitch();

					if (thePlayer.GetIsSprinting())
					{
						geraltClawSprintingAttack();
					}
					else
					{
						geraltRandomClawLightAttackAlt();
					}

					ACS_StaminaDrain(1);
				}
			}
		//}
	}

	function FocusModeEredinShieldLightAttack()
	{													
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
																	
					thePlayer.BreakPheromoneEffect();
												
					PrimaryWeaponSwitch();
												
					if (thePlayer.IsGuarded())
					{
						if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
						{
							geraltRandomShieldLightAttackAlt();
						}
						else
						{
							geraltRandomShieldLightAttack();
						}
					}
					else
					{
						if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
						{
							geraltRandomEredinLightAttackAlt();

							if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
					
							if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75  ); }
														
							RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	
						}
						//else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
						else if (theInput.GetActionValue('Dodge') > 0.7
						&& thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
						{
							ACS_Weapon_Arts_Tutorial();

							RemoveTimer('RollDelay');

							Sparagmos();

							if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
							&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
							{	
								
								thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
							}
							else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
							&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
							{	
								thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
							}
							else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
							{
								thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
							}
						}
						else
						{
							geraltRandomEredinLightAttack();

							if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
					
							if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75  ); }
														
							RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	
						}	
					}

					ACS_StaminaDrain(1);	
				}
			}
		}
	}

	function HybridModeEredinShieldLightAttack()
	{													
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					PrimaryWeaponSwitch();	

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();
												
					PrimaryWeaponSwitch();
												
					if (thePlayer.IsGuarded())
					{		
						if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
						{
							Grow_Geralt_Immediate_Fast(); //ACS

							thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
						}

						geraltRandomShieldLightAttack();
					}
					else
					{	
						geraltRandomEredinLightAttack();
					} 	

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
					
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function HybridModeEredinShieldForwardLightAttack()
	{													
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					PrimaryWeaponSwitch();	

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();
												
					PrimaryWeaponSwitch();
												
					if (thePlayer.IsGuarded())
					{
						if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
						{
							Grow_Geralt_Immediate_Fast(); //ACS

							thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
						}

						geraltRandomShieldLightAttackAlt();
					}
					else
					{
						geraltRandomEredinLightAttackAlt();
					} 	

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
					
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function FocusModeImlerithLightAttack()
	{													
		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
													
					thePlayer.BreakPheromoneEffect();
													
					PrimaryWeaponSwitch();
								
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomImlerithLightAttack();

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	
					}
					//else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
					else if (theInput.GetActionValue('Dodge') > 0.7
					&& thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
					{
						ACS_Weapon_Arts_Tutorial();

						RemoveTimer('RollDelay');

						ACS_TKInit();

						if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
						&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
						{		
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
						}
						else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
						&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
						{	
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
						}
						else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
						{
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
						}
					}
					else
					{
						geraltRandomImlerithLightAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	
					}

					ACS_StaminaDrain(1);
				}
			}
		//}
	}

	function HybridModeImlerithLightAttack()
	{													
		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					PrimaryWeaponSwitch();		

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
													
					thePlayer.BreakPheromoneEffect();
													
					PrimaryWeaponSwitch();
													
					geraltRandomImlerithLightAttack(); 			

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}			
													
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }
					
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(1);
				}
			}
		//}
	}

	function HybridModeImlerithForwardLightAttack()
	{													
		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{		
					PrimaryWeaponSwitch();	

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
													
					thePlayer.BreakPheromoneEffect();
													
					PrimaryWeaponSwitch();

					geraltRandomImlerithLightAttack();
					
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(1);
				}
			}
		//}
	}

	function FocusModeSpearLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
													
					thePlayer.BreakPheromoneEffect();
													
					SecondaryWeaponSwitch();					
													
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomSpearLightAttackAlt();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
					}
					//else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
					else if (theInput.GetActionValue('Dodge') > 0.7
					&& thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
					{
						ACS_Weapon_Arts_Tutorial();

						RemoveTimer('RollDelay');

						Storm_Spear();

						if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
						&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
						{	
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
						}
						else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
						&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
						{	
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
						}
						else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
						{
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
						}
					}
					else
					{
						geraltRandomSpearLightAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
					}

					ACS_StaminaDrain(1);
				}
			}
		//}
	}

	function FocusModeMageLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
													
					thePlayer.BreakPheromoneEffect();
													
					PrimaryWeaponSwitch();	

					if (thePlayer.GetStat( BCS_Focus ) > thePlayer.GetStatMax( BCS_Focus ) * 0
					&& thePlayer.GetStat( BCS_Stamina ) > thePlayer.GetStatMax( BCS_Stamina ) * 0)
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						RemoveTimer('ACS_ResetAnimation');

						geraltMageLightAttack();
					}
					else
					{
						if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
						{
							geraltRandomSpearLightAttackAlt();

							if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

							if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }

							RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
						}
						else
						{
							geraltRandomSpearLightAttack();

							if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

							if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }

							RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
						}
					}							
					

					ACS_StaminaDrain(1);
				}
			}
		//}
	}

	function HybridModeSpearLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					SecondaryWeaponSwitch();	

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
													
					thePlayer.BreakPheromoneEffect();
													
					SecondaryWeaponSwitch();
													
					geraltRandomSpearLightAttack(); 				

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}		
													
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(1);
				}
			}
		//}
	}

	function HybridModeSpearForwardLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
													
					thePlayer.BreakPheromoneEffect();
													
					SecondaryWeaponSwitch();
													
					geraltRandomSpearLightAttackAlt(); 		

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}				
													
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(1);
				}
			}
		//}
	}

	function FocusModeGregLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			SecondaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
													
					thePlayer.BreakPheromoneEffect();
													
					SecondaryWeaponSwitch();
																					
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{		
						geraltRandomGregLightAttackAlt();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
					}
					//else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
					else if (theInput.GetActionValue('Dodge') > 0.7
					&& thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) )
					{
						ACS_Weapon_Arts_Tutorial();

						RemoveTimer('RollDelay');

						Giant_Sword();

						thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
					}
					else
					{
						geraltRandomGregLightAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
					}

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function HybridModeGregLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			SecondaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
													
					thePlayer.BreakPheromoneEffect();
													
					SecondaryWeaponSwitch();
													
					geraltRandomGregLightAttack(); 		

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
													
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function HybridModeGregForwardLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			SecondaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					SecondaryWeaponSwitch();		

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
													
					thePlayer.BreakPheromoneEffect();
													
					SecondaryWeaponSwitch();
													
					geraltRandomGregLightAttackAlt(); 		

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}				
													
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }
				
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function FocusModeGiantLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
													
					thePlayer.BreakPheromoneEffect();
													
					SecondaryWeaponSwitch();
								
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomGiantAttackAlt();
					}
					//else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
					else if (theInput.GetActionValue('Dodge') > 0.7
					&& thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
					{
						ACS_Weapon_Arts_Tutorial();

						RemoveTimer('RollDelay');

						Giant_Stomp();

						if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
						&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
						{	
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
						}
						else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
						&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
						{	
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
						}
						else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
						{
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
						}
					}
					else
					{
						geraltRandomGiantAttack();
					}
					
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(1);
				}
			}
		//}
	}
		
	function HybridModeGiantLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{		
					SecondaryWeaponSwitch();	

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
													
					thePlayer.BreakPheromoneEffect();
													
					SecondaryWeaponSwitch();
													
					geraltRandomGiantAttack();

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(1);
				}
			}
		//}
	}

	function HybridModeGiantForwardLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					SecondaryWeaponSwitch();	

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
													
					thePlayer.BreakPheromoneEffect();
													
					SecondaryWeaponSwitch();
																				
					geraltRandomGiantAttackAlt();
	
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(1);
				}
			}
		//}
	}

	function FocusModeAxeLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
													
					thePlayer.BreakPheromoneEffect();
													
					SecondaryWeaponSwitch();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
							
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25  ); }
					
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						geraltRandom2hAxeAttackAlt();
					}
					//else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
					else if (theInput.GetActionValue('Dodge') > 0.7
					&& thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
					{
						ACS_Weapon_Arts_Tutorial();

						RemoveTimer('RollDelay');

						Water_Aard();

						if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
						&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
						{	
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
						}
						else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
						&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
						{	
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
						}
						else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
						{
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
						}
					}
					else
					{
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25  ); }
					
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						geraltRandom2hAxeAttack();
					}

					ACS_StaminaDrain(1);
				}
			}
		//}
	}

	function HybridModeAxeLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					SecondaryWeaponSwitch();	

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
													
					thePlayer.BreakPheromoneEffect();
													
					SecondaryWeaponSwitch();
																					
					geraltRandom2hAxeAttack();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25  ); }
					
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(1);
				}
			}
		//}
	}

	function HybridModeAxeForwardLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					SecondaryWeaponSwitch();	

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
													
					thePlayer.BreakPheromoneEffect();
													
					SecondaryWeaponSwitch();
																					
					geraltRandom2hAxeAttackAlt();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25  ); }
					
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(1);
				}
			}
		//}
	}

	function FocusModeGiantHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
									
					thePlayer.BreakPheromoneEffect();
									
					SecondaryWeaponSwitch();
										
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomGiantAttackAlt();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.25  ); }
					}
					else
					{
						geraltRandomGiantAttack();
					}
									
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(2);
				}
			}
		//}
	}

	function HybridModeGiantHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
									
					thePlayer.BreakPheromoneEffect();
									
					SecondaryWeaponSwitch();

					geraltRandomGiantAttack();
									
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(2);
				}
			}
		//}
	}

	function HybridModeGiantForwardHeavyAttack()
	{		
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
									
					thePlayer.BreakPheromoneEffect();
									
					SecondaryWeaponSwitch();
									
					geraltRandomGiantAttackAlt(); 	

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
						
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.25  ); }
									
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(2);
				}
			}
		//}
	}

	function FocusModeAxeHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
										
					thePlayer.BreakPheromoneEffect();
										
					SecondaryWeaponSwitch();
																				
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{				
						geraltRandom2hAxeAttackAlt();
					}
					else
					{
						geraltRandom2hAxeAttack();
					}

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
										
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(2);
				}				
			}
		//}
	}

	function HybridModeAxeHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
										
					thePlayer.BreakPheromoneEffect();
										
					SecondaryWeaponSwitch();
										
					geraltRandom2hAxeAttack(); 	

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}															
					
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
										
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(2);
				}				
			}
		//}
	}

	function HybridModeAxeForwardHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
										
					thePlayer.BreakPheromoneEffect();
										
					SecondaryWeaponSwitch();
										
					geraltRandom2hAxeAttackAlt(); 				

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}													

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
										
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(2);				
				}				
			}
		//}
	}

	function FocusModeSpearHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
											
					thePlayer.BreakPheromoneEffect();
											
					SecondaryWeaponSwitch();
											
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomSpearHeavyAttackAlt();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2  ); }
					}
					else
					{
						geraltRandomSpearHeavyAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }
					}

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					ACS_StaminaDrain(2);
				}
			}
		//}
	}

	function FocusModeMageHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
											
					thePlayer.BreakPheromoneEffect();
											
					PrimaryWeaponSwitch();

					if (thePlayer.GetStat( BCS_Focus ) > thePlayer.GetStatMax( BCS_Focus ) * 0
					&& thePlayer.GetStat( BCS_Stamina ) > thePlayer.GetStatMax( BCS_Stamina ) * 0)
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						RemoveTimer('ACS_ResetAnimation');

						geraltMageHeavyAttack();
					}
					else
					{					
						if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
						{
							geraltRandomSpearHeavyAttackAlt();

							if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

							if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2  ); }
						}
						else
						{
							geraltRandomSpearHeavyAttack();

							if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

							if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }
						}

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	
					}

					ACS_StaminaDrain(2);
				}
			}
		//}
	}

	function HybridModeSpearHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					SecondaryWeaponSwitch(); 

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
											
					thePlayer.BreakPheromoneEffect();
											
					SecondaryWeaponSwitch();
											
					geraltRandomSpearHeavyAttack(); 				

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(2);
				}
			}
		//}
	}

	function HybridModeSpearForwardHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					SecondaryWeaponSwitch(); 

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
											
					thePlayer.BreakPheromoneEffect();
											
					SecondaryWeaponSwitch();
											
					geraltRandomSpearHeavyAttackAlt(); 	
					
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
					
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2  ); }

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(2);
				}
			}
		//}
	}

	function FocusModeGregHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			SecondaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
							
					thePlayer.BreakPheromoneEffect();
												
					SecondaryWeaponSwitch();
							
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomGregHeavyAttackAlt();
					}
					else
					{							
						geraltRandomGregHeavyAttack();
					}

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.25  ); }

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function HybridModeGregHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			SecondaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	 
					SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();
												
					SecondaryWeaponSwitch();
												
					geraltRandomGregHeavyAttack(); 			

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}				
												
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.25  ); }
											
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function HybridModeGregForwardHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			SecondaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	 
					SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();
												
					SecondaryWeaponSwitch();
												
					geraltRandomGregHeavyAttackAlt();	 				

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}			
												
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.25  ); }
					
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					ACS_StaminaDrain(2);	
				}
			}
		}
	}

	function FocusModeOlgierdHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
																		
					thePlayer.BreakPheromoneEffect();
												
					PrimaryWeaponSwitch();
																			
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomOlgierdHeavyAttackAlt();

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }
												
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	
					}
					else
					{
						geraltRandomOlgierdHeavyAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }
												
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	
					}

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function HybridModeOlgierdHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	 
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();
												
					PrimaryWeaponSwitch();
												
					geraltRandomOlgierdHeavyAttack(); 	

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}						
												
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function HybridModeOlgierdForwardHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					PrimaryWeaponSwitch(); 

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();
												
					PrimaryWeaponSwitch();
						
					geraltRandomOlgierdHeavyAttackAlt();

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function FocusModeEredinShieldHeavyAttack()
	{													
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
							
					thePlayer.BreakPheromoneEffect();
												
					PrimaryWeaponSwitch();
												
					if (thePlayer.IsGuarded())
					{
						if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
						{
							Grow_Geralt_Immediate_Fast(); //ACS

							thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
						}

						if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
						{
							geraltRandomShieldHeavyAttackAlt();
						}
						else
						{
							
							geraltRandomShieldHeavyAttack();
						}
					}
					else
					{
						if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
						{
							geraltRandomEredinHeavyAttackAlt();
						}
						else
						{
							geraltRandomEredinHeavyAttack();
						}	
					} 	

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
					
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);		

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function HybridModeEredinShieldHeavyAttack()
	{													
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
																		
					thePlayer.BreakPheromoneEffect();
												
					PrimaryWeaponSwitch();
												
					if (thePlayer.IsGuarded())
					{
						if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
						{
							Grow_Geralt_Immediate_Fast(); //ACS

							thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
						}

						geraltRandomShieldHeavyAttack();
					}
					else
					{
						geraltRandomEredinHeavyAttack();
					} 	

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
					
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.6  ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function HybridModeEredinShieldForwardHeavyAttack()
	{													
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
							
					thePlayer.BreakPheromoneEffect();
												
					PrimaryWeaponSwitch();
												
					if (thePlayer.IsGuarded())
					{
						if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
						{
							Grow_Geralt_Immediate_Fast(); //ACS

							thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
						}

						geraltRandomShieldHeavyAttackAlt();
					}
					else
					{
						geraltRandomEredinHeavyAttackAlt();
					} 	

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
					
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function FocusModeImlerithHeavyAttack()
	{													
		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
							
					thePlayer.BreakPheromoneEffect();
												
					PrimaryWeaponSwitch();
																			
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomImlerithHeavyAttackAlt();
					}
					else
					{
						geraltRandomImlerithHeavyAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }
												
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						ACS_StaminaDrain(2);
					}
				}
			}
		//}
	}

	function HybridModeImlerithHeavyAttack()
	{													
		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
																			
					thePlayer.BreakPheromoneEffect();
										
					PrimaryWeaponSwitch();
												
					geraltRandomImlerithHeavyAttack(); 			

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}																

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					ACS_StaminaDrain(2);
				}
			}
		//}
	}

	function HybridModeImlerithForwardHeavyAttack()
	{													
		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
																		
					thePlayer.BreakPheromoneEffect();
												
					PrimaryWeaponSwitch();
					
					geraltRandomImlerithHeavyAttackAlt();

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(2);
				}
			}
		//}
	}

	function FocusModeClawHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
																		
					thePlayer.BreakPheromoneEffect();
												
					PrimaryWeaponSwitch();
																			
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomClawHeavyAttackAlt();
					}
					else
					{
						geraltRandomClawHeavyAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }
												
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
					}

					ACS_StaminaDrain(2);
				}
			}
		//}
	}

	function HybridModeClawHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();
												
					PrimaryWeaponSwitch();
												
					geraltRandomClawHeavyAttack(); 		

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}															

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					ACS_StaminaDrain(2);
				}
			}
		//}
	}

	function HybridModeClawForwardHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
							
					thePlayer.BreakPheromoneEffect();
												
					PrimaryWeaponSwitch();
																			
					geraltRandomClawHeavyAttackAlt();		

					ACS_StaminaDrain(2);
				}
			}
		//}
	}
	
	function ArmigerModeEredinShieldSpecialAttack()
	{								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
	
					thePlayer.BreakPheromoneEffect();	

					PrimaryWeaponSwitch(); 
						
					if (thePlayer.IsGuarded())
					{
						if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
						{
							Grow_Geralt_Immediate_Fast(); //ACS

							thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
						}

						geraltRandomShieldAttackAlt();
					}
					else
					{
						if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
						{
							geraltEredinStab();

							if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
								
							if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }
							
							RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);
								
							AddTimer('ACS_portable_aard', 1.75 , false );
						}
						else
						{
							geraltEredinFuryCombo();

							if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
								
							if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }
							
							RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
						}
					}

					ACS_StaminaDrain(3);
				}
			}
		}
	}

	function ArmigerModeOlgierdSpecialAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch(); 
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					PrimaryWeaponSwitch(); 

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	 	

					PrimaryWeaponSwitch(); 	
						
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						if (thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax( BCS_Focus ) 
						&& thePlayer.GetStat( BCS_Stamina ) == thePlayer.GetStatMax( BCS_Stamina ) 
						&& theInput.GetActionValue('Dodge') > 0.7)
						{
							ACS_Weapon_Arts_Tutorial();

							RemoveTimer('RollDelay');

							Umbral_Slash_End();

							thePlayer.DrainStamina( ESAT_FixedValue, thePlayer.GetStatMax( BCS_Stamina ) );

							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
						}
						else
						{
							geraltRandomShadowAttack();
						}
					}
					else
					{
						geraltRandomOlgierdComboAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }	
						
						AddTimer('ACS_ResetAnimation', 0.4  , false);
					}

					ACS_StaminaDrain(3);
				}
			}
		}
	}

	function ArmigerModeClawSpecialAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					PrimaryWeaponSwitch(); 
							
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomAttackSpecialDash();

						//if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
							
						//if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
						
						//RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);
					}
					else
					{
						geraltClawWhirlAttack();
					}

					ACS_StaminaDrain(3);
				}
			}
		//}
	}

	function ArmigerModeImlerithSpecialAttack()
	{
		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					PrimaryWeaponSwitch(); 
							
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }	
						
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

						geraltImlerithWalkAttack();
					}
					else
					{
						geraltRandomImlerithComboAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
							
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }	
						
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 1.5  , false);
					}

					ACS_StaminaDrain(3);
				}
			}
		//}
	}
	
	function FocusModeEredinShieldSpecialAttack()
	{										
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch(); 
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					PrimaryWeaponSwitch(); 

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();

					thePlayer.BreakPheromoneEffect();	

					PrimaryWeaponSwitch(); 
							
					if (thePlayer.IsGuarded())
					{
						if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
						{
							Grow_Geralt_Immediate_Fast(); //ACS

							thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
						}

						if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
						{
							geraltRandomShieldSpecialAttackAlt();
						}
						else
						{
							geraltRandomShieldSpecialAttack();
							
							AddTimer('ACS_portable_aard', 0.5, false);
						}
					}
					else
					{
						if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
						{
							geraltRandomEredinSpecialAttackAlt();

							if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
								
							if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }
							
							RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);
								
							AddTimer('ACS_portable_aard', 1.75 , false );
						}
						else
						{
							geraltRandomEredinSpecialAttack();

							if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
								
							if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }
							
							RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
						}
					}

					ACS_StaminaDrain(3);
				}
			}
		}
	}

	function HybridModeEredinShieldSpecialAttack()
	{										
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && actor.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();

					thePlayer.BreakPheromoneEffect();	

					PrimaryWeaponSwitch();
							
					if (thePlayer.IsGuarded())
					{
						if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
						{
							Grow_Geralt_Immediate_Fast(); //ACS

							thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
						}

						geraltRandomShieldSpecialAttack();
							
						AddTimer('ACS_portable_aard', 0.5, false);
					}
					else
					{
						geraltRandomEredinSpecialAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
								
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }
							
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
					}

					ACS_StaminaDrain(3);
				}
			}
		}
	}

	function HybridModeEredinShieldForwardSpecialAttack()
	{										
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();

					thePlayer.BreakPheromoneEffect();	

					PrimaryWeaponSwitch();
							
					if (thePlayer.IsGuarded())
					{
						if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
						{
							Grow_Geralt_Immediate_Fast(); //ACS

							thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
						}

						geraltRandomShieldSpecialAttackAlt();
					}
					else
					{
						geraltRandomEredinSpecialAttackAlt();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
								
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }
							
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);
								
						AddTimer('ACS_portable_aard', 1.75 , false );			
					}

					ACS_StaminaDrain(3);
				}
			}
		}
	}

	function FocusModeOlgierdSpecialAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					PrimaryWeaponSwitch(); 

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					PrimaryWeaponSwitch(); 
							
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						if (thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax( BCS_Focus )
						&& thePlayer.GetStat( BCS_Stamina ) == thePlayer.GetStatMax( BCS_Stamina )
						&& theInput.GetActionValue('Dodge') > 0.7)
						{
							ACS_Weapon_Arts_Tutorial();

							RemoveTimer('RollDelay');

							Umbral_Slash_End();

							thePlayer.DrainStamina( ESAT_FixedValue, thePlayer.GetStatMax( BCS_Stamina ) );

							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
						}
						else
						{
							geraltRandomOlgierdSpecialAttackAlt();
						}
					}
					else
					{
						geraltRandomOlgierdSpecialAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }	
						
						AddTimer('ACS_ResetAnimation', 0.4  , false);
					}

					ACS_StaminaDrain(3);
				}
			}
		}
	}

	function EquipmentModeOlgierdSpecialAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					PrimaryWeaponSwitch(); 

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					PrimaryWeaponSwitch(); 
							
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5
					&& ACS_GetItem_Iris())
					{
						if (thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax( BCS_Focus )
						&& thePlayer.GetStat( BCS_Stamina ) == thePlayer.GetStatMax( BCS_Stamina )
						&& theInput.GetActionValue('Dodge') > 0.7)
						{
							ACS_Weapon_Arts_Tutorial();

							RemoveTimer('RollDelay');

							Umbral_Slash_End();

							thePlayer.DrainStamina( ESAT_FixedValue, thePlayer.GetStatMax( BCS_Stamina ) );

							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
						}
						else
						{
							geraltRandomOlgierdSpecialAttackAlt();
						}
					}
					else
					{
						geraltRandomOlgierdSpecialAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }	
						
						AddTimer('ACS_ResetAnimation', 0.4  , false);
					}

					ACS_StaminaDrain(3);
				}
			}
		}
	}

	function HybridModeOlgierdSpecialAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					PrimaryWeaponSwitch();	

					geraltRandomOlgierdSpecialAttack(); 				

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}				

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }	
						
					AddTimer('ACS_ResetAnimation', 0.4  , false);

					ACS_StaminaDrain(3);
				}
			}
		}
	}

	function HybridModeOlgierdForwardSpecialAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			PrimaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	
						
					PrimaryWeaponSwitch();
						
					if (thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax( BCS_Focus )
					&& thePlayer.GetStat( BCS_Stamina ) == thePlayer.GetStatMax( BCS_Stamina )
					&& theInput.GetActionValue('Dodge') > 0.7)
					{
						ACS_Weapon_Arts_Tutorial();

						RemoveTimer('RollDelay');

						Umbral_Slash_End();

						thePlayer.DrainStamina( ESAT_FixedValue, thePlayer.GetStatMax( BCS_Stamina ) );

						thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
					}
					else
					{
						geraltRandomOlgierdSpecialAttackAlt();
					}

					//if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
										
					//if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
						
					//RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					ACS_StaminaDrain(3);
				}
			}
		}
	}

	function FocusModeClawSpecialAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					PrimaryWeaponSwitch(); 

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					PrimaryWeaponSwitch(); 
							
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomClawSpecialAttackAlt();

						//if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
							
						//if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
						
						//RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);
					}
					else
					{
						geraltRandomClawSpecialAttack();
					}

					ACS_StaminaDrain(3);
				}
			}
		//}
	}

	function HybridModeClawSpecialAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	 
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					PrimaryWeaponSwitch();

					geraltRandomClawSpecialAttack();

					ACS_StaminaDrain(3);
				}
			}
		//}
	}

	function HybridModeClawForwardSpecialAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	 
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					PrimaryWeaponSwitch();
						
					geraltRandomClawSpecialAttackAlt();

					//if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
						
					//if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
					
					//RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					ACS_StaminaDrain(3);
				}
			}
		//}
	}

	function FocusModeImlerithSpecialAttack()
	{
		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					PrimaryWeaponSwitch(); 

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					PrimaryWeaponSwitch(); 
							
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomImlerithSpecialAttackAlt();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }	
						
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 1  , false);
					}
					else
					{
						geraltRandomImlerithSpecialAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
							
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }	
						
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 1.5  , false);
					}

					ACS_StaminaDrain(3);
				}
			}
		//}
	}

	function HybridModeImlerithSpecialAttack()
	{
		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	
						
					PrimaryWeaponSwitch();
						
					geraltRandomImlerithSpecialAttack();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
						
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }	
					
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 1.5  , false);

					ACS_StaminaDrain(3);
				}
			}
		//}
	}

	function HybridModeImlerithForwardSpecialAttack()
	{
		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					PrimaryWeaponSwitch();
						
					geraltRandomImlerithSpecialAttackAlt();			

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }	
					
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 1  , false);

					ACS_StaminaDrain(3);
				}
			}
		//}
	}

	function FocusModeSpearSpecialAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					SecondaryWeaponSwitch(); 

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
							
					thePlayer.BreakPheromoneEffect();	

					SecondaryWeaponSwitch(); 
								
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomSpearSpecialAttackAlt();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
								
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
							
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
					}
					else
					{
						geraltRandomSpearSpecialAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
						
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
							
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
					}

					ACS_StaminaDrain(3);
				}
			}
		//}
	}

	function HybridModeSpearSpecialAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
							
					thePlayer.BreakPheromoneEffect();	

					SecondaryWeaponSwitch();

					geraltRandomSpearSpecialAttack();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
					
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
						
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(3);
				}
			}
		//}
	}

	function HybridModeSpearForwardSpecialAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
							
					thePlayer.BreakPheromoneEffect();	
							
					SecondaryWeaponSwitch();
							
					geraltRandomSpearSpecialAttackAlt();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
								
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
							
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(3);
				}
			}
		//}
	}

	function FocusModeMageSpecialAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					PrimaryWeaponSwitch(); 

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
							
					thePlayer.BreakPheromoneEffect();	

					PrimaryWeaponSwitch(); 

					if (thePlayer.GetStat( BCS_Focus ) > thePlayer.GetStatMax( BCS_Focus ) * 0
					&& thePlayer.GetStat( BCS_Stamina ) > thePlayer.GetStatMax( BCS_Stamina ) * 0)
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						RemoveTimer('ACS_ResetAnimation');

						geraltMageSpecialAttack();
					}
					else
					{
								
						if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
						{
							geraltRandomSpearSpecialAttackAlt();

							if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
									
							if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
								
							RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
						}
						else
						{
							geraltRandomSpearSpecialAttack();

							if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
							
							if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
								
							RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
						}
					}

					ACS_StaminaDrain(3);
				}
			}
		//}
	}

	function FocusModeGregSpecialAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			SecondaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					SecondaryWeaponSwitch(); 

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
							
					thePlayer.BreakPheromoneEffect();	

					SecondaryWeaponSwitch(); 	
							
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomGregSpecialAttackAlt();
					}
					else
					{
						geraltRandomGregSpecialAttack();
					}

					ACS_StaminaDrain(3);
				}
			}
		}
	}

	function HybridModeGregSpecialAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			SecondaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
							
					thePlayer.BreakPheromoneEffect();	
							
					SecondaryWeaponSwitch();		

					geraltRandomGregSpecialAttack();
				}

				ACS_StaminaDrain(3);
			}
		}
	}

	function HybridModeGregForwardSpecialAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			SecondaryWeaponSwitch();
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
							
					thePlayer.BreakPheromoneEffect();	
							
					SecondaryWeaponSwitch();
							
					geraltRandomGregSpecialAttackAlt();	

					ACS_StaminaDrain(3);	
				}
			}
		}
	}

	function FocusModeGiantSpecialAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					SecondaryWeaponSwitch(); 

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
							
					thePlayer.BreakPheromoneEffect();	
							
					SecondaryWeaponSwitch(); 	
							
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomGiantSpecialAttackAlt();
					}
					else
					{
						geraltRandomGiantSpecialAttack();
					}

					ACS_StaminaDrain(3);
				}
			}
		//}
	}

	function HybridModeGiantSpecialAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{		
					SecondaryWeaponSwitch();	

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
							
					thePlayer.BreakPheromoneEffect();		

					SecondaryWeaponSwitch();		

					geraltRandomGiantSpecialAttack();

					ACS_StaminaDrain(3);
				}
			}
		//}
	}

	function HybridModeGiantForwardSpecialAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					SecondaryWeaponSwitch();	

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
							
					thePlayer.BreakPheromoneEffect();	

					SecondaryWeaponSwitch();
							
					geraltRandomGiantSpecialAttackAlt();

					ACS_StaminaDrain(3);
				}
			}
		//}
	}

	function FocusModeAxeSpecialAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					SecondaryWeaponSwitch(); 

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
							
					thePlayer.BreakPheromoneEffect();	
							
					SecondaryWeaponSwitch(); 	
							
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomAxeSpecialAttackAlt();
					}
					else
					{
						geraltRandomAxeSpecialAttack();
					}

					ACS_StaminaDrain(3);
				}
			}
		//}
	}

	function ACS_SCAAR_16_Installed(){return;}

	function HybridModeAxeSpecialAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					SecondaryWeaponSwitch(); 

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
							
					thePlayer.BreakPheromoneEffect();		

					SecondaryWeaponSwitch();
							
					geraltRandomAxeSpecialAttack();

					ACS_StaminaDrain(3);
				}
			}
		//}
	}

	function HybridModeAxeForwardSpecialAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			ACS_Setup_Light_Attack_Internal();
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	 
					SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
							
					thePlayer.BreakPheromoneEffect();	
							
					SecondaryWeaponSwitch();
							
					geraltRandomAxeSpecialAttackAlt();

					ACS_StaminaDrain(3);
				}
			}
		//}
	}
	
	// Dodge stuff

	function ACS_Vampire_Back_Claw_Teleport()
	{
		if (ACS_Vampire_Back_Claw_Get())
		{
			ACS_Vampire_Back_Claw_Get().BreakAttachment(); 
			ACS_Vampire_Back_Claw_Get().Teleport( thePlayer.GetWorldPosition() + Vector( 0, 0, -200 ) );
		}
	}

	function ACS_Vampire_Back_Claw_Reattach()
	{
		var attach_vec																																					: Vector;
		var attach_rot																																					: EulerAngles;

		if (ACS_Vampire_Back_Claw_Get() && ACS_Vampire_Claw_Anchor_Get())
		{
			attach_rot.Roll = 90;
			attach_rot.Pitch = 0;
			attach_rot.Yaw = 45;
			attach_vec.X = -1;
			attach_vec.Y = -1;
			attach_vec.Z = 0;
			
			ACS_Vampire_Back_Claw_Get().CreateAttachment( ACS_Vampire_Claw_Anchor_Get(), , attach_vec, attach_rot );
		}
	}
	
	function dodge_timer_actual() 
	{
		if (!thePlayer.HasTag('ACS_Camo_Active'))
		{
			ACS_Vampire_Back_Claw_Teleport();
		}

		thePlayer.StopEffect('dive_shape');

		thePlayer.RemoveTag('ACS_Bruxa_Jump_End');

		RemoveTimer('ACS_dodge_timer_end');

		if( thePlayer.IsAlive() && thePlayer.IsInCombat() ){ thePlayer.SetVisibility( true ); }		 

		if (!thePlayer.HasTag('ACS_HideWeaponOnDodge'))
		{
			thePlayer.AddTag('ACS_HideWeaponOnDodge');
		}

		if (!thePlayer.HasTag('ACS_Camo_Active') && ACS_DodgeEffects_Enabled())
		{
			thePlayer.StopEffect( 'magic_step_l_new' );	
			thePlayer.PlayEffectSingle( 'magic_step_l_new' );

			thePlayer.StopEffect( 'magic_step_r_new' );	
			thePlayer.PlayEffectSingle( 'magic_step_r_new' );
		}

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
		thePlayer.SetCanPlayHitAnim(false); 
		thePlayer.EnableCharacterCollisions(false); 
		thePlayer.AddBuffImmunity_AllNegative('acs_dodge', true); 
		thePlayer.SetIsCurrentlyDodging(true);

		if (!thePlayer.HasTag('aard_sword_equipped'))
		{
			ACS_Weapon_Invisible();
		}

		//thePlayer.BlockAction( EIAB_Jump, 			'ACS_Dodge_Timer');
	
		AddTimer('ACS_dodge_timer_end', 0.875  , false);

		thePlayer.AddTag('ACS_Is_Currently_Dodging');
	}

	function special_dash_close_dodge_timer_actual() 
	{
		if (!thePlayer.HasTag('ACS_Camo_Active'))
		{
			ACS_Vampire_Back_Claw_Teleport();
		}

		RemoveTimer('ACS_dodge_timer_end');

		if( thePlayer.IsAlive() && thePlayer.IsInCombat() ){ thePlayer.SetVisibility( true ); }		 

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
		thePlayer.SetCanPlayHitAnim(false); 
		thePlayer.EnableCharacterCollisions(false); 
		thePlayer.AddBuffImmunity_AllNegative('acs_dodge', true); 
		thePlayer.SetIsCurrentlyDodging(true);

		//thePlayer.BlockAction( EIAB_Jump, 			'ACS_Dodge_Timer');
	
		AddTimer('ACS_dodge_timer_end', 0.25  , false);

		thePlayer.AddTag('ACS_Is_Currently_Dodging');
	}

	function EvadeTargetGet()
	{
		MovementAdjust();

		if ( thePlayer.IsHardLockEnabled() )
			evadeTarget = (CActor)( thePlayer.GetDisplayTarget() );
		else
		{
			thePlayer.FindMoveTarget();
			evadeTarget = thePlayer.moveTarget;		
		}

		thePlayer.SetPlayerTarget( evadeTarget );

		thePlayer.SetPlayerCombatTarget( evadeTarget );

		thePlayer.UpdateDisplayTarget( true );

		victimPos = evadeTarget.PredictWorldPosition(0.35) + VecFromHeading( AngleNormalize180( thePlayer.GetHeading() - dist ) ) * 2.5;

		if( !theGame.GetWorld().NavigationFindSafeSpot( victimPos, 0.3, 0.3 , newVictimPos ) )
		{
			theGame.GetWorld().NavigationFindSafeSpot( victimPos, 0.3, 4 , newVictimPos );
			victimPos = newVictimPos;
		}

		if( ACS_AttitudeCheck ( evadeTarget ) && thePlayer.IsInCombat())
		{	
			UpdateHeading(); 

			movementAdjustor.AdjustmentDuration( ticket, 0.125 );
			
			movementAdjustor.RotateTowards( ticket, evadeTarget );

			movementAdjustor.SlideTo( ticket, ACSPlayerFixZAxis(victimPos) );
		}
	}
	
	function dodge_timer_wildhunt_actual() 
	{
		ACS_Vampire_Back_Claw_Teleport();

		thePlayer.StopEffect('dive_shape');

		thePlayer.RemoveTag('ACS_Bruxa_Jump_End');

		RemoveTimer('ACS_dodge_timer_end');

		if (!thePlayer.HasTag('ACS_HideWeaponOnDodge'))
		{
			thePlayer.AddTag('ACS_HideWeaponOnDodge');
		}

		if (!thePlayer.HasTag('aard_sword_equipped'))
		{
			ACS_Weapon_Invisible();
		}

		if ( thePlayer.HasTag('ACS_Bruxa_Jump_Init') )
		{
			if (!thePlayer.HasTag('ACS_Camo_Active'))
			{
				//thePlayer.StopAllEffects();
				thePlayer.DestroyEffect( 'shadowdash' );
			}

			PlayerPlayAnimation ( 'bruxa_jump_up_stop_failsafe_ACS');

			thePlayer.RemoveTag('ACS_Bruxa_Jump_Init');

			thePlayer.AddTag('ACS_Bruxa_Jump_End');
		} 

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
		thePlayer.SetCanPlayHitAnim(false); 
		thePlayer.SetVisibility( false ); 
		thePlayer.EnableCharacterCollisions(false);	
		thePlayer.AddBuffImmunity_AllNegative('acs_dodge', true); 
		thePlayer.SetIsCurrentlyDodging(true);

		EvadeTargetGet();

		//thePlayer.BlockAction( EIAB_Jump, 			'ACS_Dodge_Timer');

		AddTimer('ACS_dodge_timer_end', 0.5  , false);

		thePlayer.AddTag('ACS_Is_Currently_Dodging');
	}

	function dodge_timer_fire_actual() 
	{ 
		RemoveTimer('ACS_dodge_timer_end');

		if (!thePlayer.HasTag('ACS_HideWeaponOnDodge'))
		{
			thePlayer.AddTag('ACS_HideWeaponOnDodge');
		}

		if (!thePlayer.HasTag('aard_sword_equipped'))
		{
			ACS_Weapon_Invisible();
		}

		thePlayer.AddTag('ACS_Fire_Teleport');

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
		thePlayer.SetCanPlayHitAnim(false); 
		thePlayer.SetVisibility( false ); 
		thePlayer.EnableCharacterCollisions(false);	
		thePlayer.AddBuffImmunity_AllNegative('acs_dodge', true); 
		thePlayer.SetIsCurrentlyDodging(true);

		EvadeTargetGet();

		AddTimer('ACS_dodge_timer_end', 0.5  , false);

		thePlayer.AddTag('ACS_Is_Currently_Dodging');
	}

	function dodge_timer_mage_actual() 
	{ 
		RemoveTimer('ACS_dodge_timer_end');

		if (!thePlayer.HasTag('ACS_HideWeaponOnDodge'))
		{
			thePlayer.AddTag('ACS_HideWeaponOnDodge');
		}

		if (!thePlayer.HasTag('aard_sword_equipped'))
		{
			ACS_Weapon_Invisible();
		}

		thePlayer.AddTag('ACS_Mage_Teleport');

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
		thePlayer.SetCanPlayHitAnim(false); 
		thePlayer.SetVisibility( false ); 
		thePlayer.EnableCharacterCollisions(false);	
		thePlayer.AddBuffImmunity_AllNegative('acs_dodge', true); 
		thePlayer.SetIsCurrentlyDodging(true);

		EvadeTargetGet();

		AddTimer('ACS_dodge_timer_end', 0.5  , false);

		thePlayer.AddTag('ACS_Is_Currently_Dodging');
	}

	function dodge_timer_dolphin_actual() 
	{ 
		RemoveTimer('ACS_dodge_timer_end');

		if (!thePlayer.HasTag('ACS_HideWeaponOnDodge'))
		{
			thePlayer.AddTag('ACS_HideWeaponOnDodge');
		}

		if (!thePlayer.HasTag('aard_sword_equipped'))
		{
			ACS_Weapon_Invisible();
		}

		thePlayer.AddTag('ACS_Dolphin_Teleport');

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
		thePlayer.SetCanPlayHitAnim(false); 
		thePlayer.SetVisibility( false ); 
		thePlayer.EnableCharacterCollisions(false);	
		thePlayer.AddBuffImmunity_AllNegative('acs_dodge', true); 
		thePlayer.SetIsCurrentlyDodging(true);

		EvadeTargetGet();

		AddTimer('ACS_dodge_timer_end', 0.5  , false);

		thePlayer.AddTag('ACS_Is_Currently_Dodging');
	}

	function dodge_timer_iris_actual() 
	{ 
		RemoveTimer('ACS_dodge_timer_end');

		if (!thePlayer.HasTag('ACS_HideWeaponOnDodge'))
		{
			thePlayer.AddTag('ACS_HideWeaponOnDodge');
		}

		if (!thePlayer.HasTag('aard_sword_equipped'))
		{
			ACS_Weapon_Invisible();
		}

		thePlayer.AddTag('ACS_Iris_Teleport');

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
		thePlayer.SetCanPlayHitAnim(false); 
		thePlayer.SetVisibility( false ); 
		thePlayer.EnableCharacterCollisions(false);	
		thePlayer.AddBuffImmunity_AllNegative('acs_dodge', true); 
		thePlayer.SetIsCurrentlyDodging(true);

		EvadeTargetGet();

		AddTimer('ACS_dodge_timer_end', 0.5  , false);

		thePlayer.AddTag('ACS_Is_Currently_Dodging');
	}

	function dodge_timer_explosion_actual() 
	{ 
		RemoveTimer('ACS_dodge_timer_end');

		if (!thePlayer.HasTag('ACS_HideWeaponOnDodge'))
		{
			thePlayer.AddTag('ACS_HideWeaponOnDodge');
		}

		if (!thePlayer.HasTag('aard_sword_equipped'))
		{
			ACS_Weapon_Invisible();
		}

		thePlayer.AddTag('ACS_Explosion_Teleport');

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
		thePlayer.SetCanPlayHitAnim(false); 
		thePlayer.SetVisibility( false ); 
		thePlayer.EnableCharacterCollisions(false);	
		thePlayer.AddBuffImmunity_AllNegative('acs_dodge', true); 
		thePlayer.SetIsCurrentlyDodging(true);

		EvadeTargetGet();

		AddTimer('ACS_dodge_timer_end', 0.5  , false);

		thePlayer.AddTag('ACS_Is_Currently_Dodging');
	}

	function dodge_timer_fountain_portal_actual() 
	{ 
		RemoveTimer('ACS_dodge_timer_end');

		if (!thePlayer.HasTag('ACS_HideWeaponOnDodge'))
		{
			thePlayer.AddTag('ACS_HideWeaponOnDodge');
		}

		if (!thePlayer.HasTag('aard_sword_equipped'))
		{
			ACS_Weapon_Invisible();
		}

		thePlayer.AddTag('ACS_Fountain_Portal_Teleport');

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
		thePlayer.SetCanPlayHitAnim(false); 
		thePlayer.SetVisibility( false ); 
		thePlayer.EnableCharacterCollisions(false);	
		thePlayer.AddBuffImmunity_AllNegative('acs_dodge', true); 
		thePlayer.SetIsCurrentlyDodging(true);

		EvadeTargetGet();

		AddTimer('ACS_dodge_timer_end', 0.5  , false);

		thePlayer.AddTag('ACS_Is_Currently_Dodging');
	}

	function dodge_timer_lightning_actual() 
	{ 
		RemoveTimer('ACS_dodge_timer_end');

		if (!thePlayer.HasTag('ACS_HideWeaponOnDodge'))
		{
			thePlayer.AddTag('ACS_HideWeaponOnDodge');
		}

		if (!thePlayer.HasTag('aard_sword_equipped'))
		{
			ACS_Weapon_Invisible();
		}

		thePlayer.AddTag('ACS_Lightning_Teleport');

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
		thePlayer.SetCanPlayHitAnim(false); 
		thePlayer.SetVisibility( false ); 
		thePlayer.EnableCharacterCollisions(false);	
		thePlayer.AddBuffImmunity_AllNegative('acs_dodge', true); 
		thePlayer.SetIsCurrentlyDodging(true);

		EvadeTargetGet();

		AddTimer('ACS_dodge_timer_end', 0.5  , false);

		thePlayer.AddTag('ACS_Is_Currently_Dodging');
	}
	
	function dodge_timer_slideback_actual() 
	{
		ACS_Vampire_Back_Claw_Teleport();

		thePlayer.StopEffect('dive_shape');

		thePlayer.RemoveTag('ACS_Bruxa_Jump_End');

		RemoveTimer('ACS_dodge_timer_end');

		if( thePlayer.IsAlive() && thePlayer.IsInCombat() ){ thePlayer.SetVisibility( true ); }		 

		if (!thePlayer.HasTag('ACS_HideWeaponOnDodge'))
		{
			thePlayer.AddTag('ACS_HideWeaponOnDodge');
		}

		if (!thePlayer.HasTag('ACS_Camo_Active') && ACS_DodgeEffects_Enabled() )
		{
			thePlayer.StopEffect( 'magic_step_l_new' );	
			thePlayer.PlayEffectSingle( 'magic_step_l_new' );

			thePlayer.StopEffect( 'magic_step_r_new' );	
			thePlayer.PlayEffectSingle( 'magic_step_r_new' );
		}

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
		thePlayer.SetCanPlayHitAnim(false); 
		thePlayer.EnableCharacterCollisions(false);	
		thePlayer.AddBuffImmunity_AllNegative('acs_dodge', true); 
		thePlayer.SetIsCurrentlyDodging(true);

		if (!thePlayer.HasTag('aard_sword_equipped'))
		{
			ACS_Weapon_Invisible();
		}

		//thePlayer.BlockAction( EIAB_Jump, 			'ACS_Dodge_Timer');

		AddTimer('ACS_dodge_timer_end', 1.75  , false);

		thePlayer.AddTag('ACS_Is_Currently_Dodging');
	}
	
	function dodge_timer_attack_actual() 
	{
		ACS_Vampire_Back_Claw_Teleport();

		thePlayer.StopEffect('dive_shape');

		thePlayer.RemoveTag('ACS_Bruxa_Jump_End');

		//thePlayer.RemoveTag('ACS_HideWeaponOnDodge');

		RemoveTimer('ACS_dodge_timer_end');

		if( thePlayer.IsAlive() && thePlayer.IsInCombat() ){ thePlayer.SetVisibility( true ); }		 

		if (!thePlayer.HasTag('ACS_Camo_Active') && ACS_DodgeEffects_Enabled() )
		{
			thePlayer.StopEffect( 'magic_step_l_new' );	
			thePlayer.PlayEffectSingle( 'magic_step_l_new' );

			thePlayer.StopEffect( 'magic_step_r_new' );	
			thePlayer.PlayEffectSingle( 'magic_step_r_new' );

			thePlayer.PlayEffectSingle( 'bruxa_dash_trails' );
			thePlayer.StopEffect( 'bruxa_dash_trails' );
		}

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
		thePlayer.SetCanPlayHitAnim(false); 
		//thePlayer.EnableCharacterCollisions(false);
		thePlayer.AddBuffImmunity_AllNegative('acs_dodge', true); 
		thePlayer.SetIsCurrentlyDodging(true);

		//thePlayer.BlockAction( EIAB_Jump, 			'ACS_Dodge_Timer');

		AddTimer('ACS_dodge_timer_end', 0.75  , false);

		thePlayer.AddTag('ACS_Is_Currently_Dodging');
	}

	function dodge_timer_attack_ciri_actual() 
	{
		if (!thePlayer.IsEffectActive('fury_403_ciri', false))
		{
			thePlayer.PlayEffectSingle( 'fury_403_ciri' );
		}

		if (!thePlayer.IsEffectActive('fury_ciri', false))
		{
			thePlayer.PlayEffectSingle( 'fury_ciri' );
		}

		if (!thePlayer.IsEffectActive('acs_fury_effect', false))
		{
			thePlayer.PlayEffectSingle( 'acs_fury_effect' );
		}

		ACS_Vampire_Back_Claw_Teleport();

		thePlayer.StopEffect('dive_shape');

		thePlayer.RemoveTag('ACS_Bruxa_Jump_End');

		//thePlayer.RemoveTag('ACS_HideWeaponOnDodge');

		RemoveTimer('ACS_dodge_timer_end');

		if( thePlayer.IsAlive() && thePlayer.IsInCombat() ){ thePlayer.SetVisibility( true ); }		 

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
		thePlayer.SetCanPlayHitAnim(false); 
		thePlayer.EnableCharacterCollisions(false);
		thePlayer.AddBuffImmunity_AllNegative('acs_dodge', true); 
		thePlayer.SetIsCurrentlyDodging(true);

		//thePlayer.BlockAction( EIAB_Jump, 			'ACS_Dodge_Timer');

		AddTimer('ACS_dodge_timer_end', 0.75  , false);

		thePlayer.AddTag('ACS_Is_Currently_Dodging');
	}

	function ACS_SCAAR_15_Installed(){return;}
	
	function dodge_timer_end_actual() 
	{ 
		//thePlayer.UnblockAction( EIAB_Jump, 			'ACS_Dodge_Timer');

		//if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}
		
		MovementAdjust();

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() && !thePlayer.IsPerformingFinisher())
		{	
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
		}

		if (!thePlayer.HasTag('ACS_Camo_Active') && !thePlayer.HasTag('in_wraith'))
		{
			//thePlayer.StopAllEffects();
		}

		if ( !thePlayer.HasTag('ACS_Camo_Active') && thePlayer.HasTag('ACS_Bruxa_Jump_End') && (thePlayer.HasTag('aard_sword_equipped') || thePlayer.HasTag('vampire_claws_equipped')) )
		{
			//ACS_Bat_Teleport_FX();

			//thePlayer.PlayEffectSingle('dive_smoke');
			//thePlayer.StopEffect('dive_smoke');

			thePlayer.RemoveTag('ACS_Bruxa_Jump_End');
		} 

		if( thePlayer.IsAlive() && thePlayer.IsInCombat() ){ thePlayer.SetVisibility( true ); }		 

		if (!thePlayer.HasTag('ACS_Camo_Active') && ACS_DodgeEffects_Enabled() )
		{
			thePlayer.StopEffect( 'magic_step_l_new' );	
			thePlayer.PlayEffectSingle( 'magic_step_l_new' );

			thePlayer.StopEffect( 'magic_step_r_new' );	
			thePlayer.PlayEffectSingle( 'magic_step_r_new' );
		}

		thePlayer.SetImmortalityMode( AIM_None, AIC_Combat ); 

		thePlayer.SetCanPlayHitAnim(true); 

		thePlayer.EnableCharacterCollisions(true); 
		thePlayer.RemoveBuffImmunity_AllNegative('acs_dodge'); 
		thePlayer.SetIsCurrentlyDodging(false);

		if ( thePlayer.HasTag('ACS_HideWeaponOnDodge') 
		//&& !thePlayer.HasTag('blood_sucking')
		)
		{
			if (!thePlayer.HasTag('aard_sword_equipped'))
			{
				ACS_Weapon_Respawn();
			}
			
			thePlayer.RemoveTag('ACS_HideWeaponOnDodge');

			thePlayer.RemoveTag('ACS_HideWeaponOnDodge_Claw_Effect');
		}

		if (!thePlayer.HasTag('ACS_Camo_Active'))
		{
			ACS_Vampire_Back_Claw_Reattach();
		}

		if ( thePlayer.HasTag('ACS_wildhunt_teleport_init') )
		{
			ACS_wh_teleport_entity().CreateAttachment(thePlayer);

			thePlayer.SoundEvent("magic_canaris_teleport_short");

			ACS_wh_teleport_entity().StopEffect('disappear');
			ACS_wh_teleport_entity().PlayEffectSingle('disappear');

			ACS_wh_teleport_entity().PlayEffectSingle('appear');

			ACS_wh_teleport_entity().DestroyAfter(1);

			thePlayer.RemoveTag('ACS_wildhunt_teleport_init');
		}

		if ( thePlayer.HasTag('ACS_Mage_Teleport') )
		{
			thePlayer.PlayEffectSingle('teleport_in');
			thePlayer.StopEffect('teleport_in');

			if (ACS_GetItem_MageStaff_Water())
			{
				thePlayer.StopEffect( 'hand_sand_fx_water_ACS' );
				thePlayer.PlayEffectSingle( 'hand_sand_fx_water_ACS' );
				thePlayer.StopEffect( 'hand_sand_fx_water_ACS' );

				thePlayer.StopEffect( 'hand_sand_fx_water_l_ACS' );
				thePlayer.PlayEffectSingle( 'hand_sand_fx_water_l_ACS' );
				thePlayer.StopEffect( 'hand_sand_fx_water_l_ACS' );

				thePlayer.PlayEffect('teleport_out_water_ACS');
				thePlayer.StopEffect('teleport_out_water_ACS');
			}
			else if (ACS_GetItem_MageStaff_Sand())
			{
				thePlayer.StopEffect( 'hand_sand_fx_sand_ACS' );
				thePlayer.PlayEffectSingle( 'hand_sand_fx_sand_ACS' );
				thePlayer.StopEffect( 'hand_sand_fx_sand_ACS' );

				thePlayer.StopEffect( 'hand_sand_fx_sand_l_ACS' );
				thePlayer.PlayEffectSingle( 'hand_sand_fx_sand_l_ACS' );
				thePlayer.StopEffect( 'hand_sand_fx_sand_l_ACS' );

				thePlayer.PlayEffect('teleport_out_sand_ACS');
				thePlayer.StopEffect('teleport_out_sand_ACS');
			}
			else if (ACS_GetItem_MageStaff_Fire())
			{
				thePlayer.StopEffect( 'hand_sand_fx_fire_ACS' );
				thePlayer.PlayEffectSingle( 'hand_sand_fx_fire_ACS' );
				thePlayer.StopEffect( 'hand_sand_fx_fire_ACS' );

				thePlayer.StopEffect( 'hand_sand_fx_fire_l_ACS' );
				thePlayer.PlayEffectSingle( 'hand_sand_fx_fire_l_ACS' );
				thePlayer.StopEffect( 'hand_sand_fx_fire_l_ACS' );
				
				thePlayer.PlayEffect('teleport_out_fire_ACS');
				thePlayer.StopEffect('teleport_out_fire_ACS');
			}

			ACSGetEquippedSword().DestroyEffect( 'fx_staff_cast' );
			ACSGetEquippedSword().PlayEffectSingle( 'fx_staff_cast' );
			ACSGetEquippedSword().StopEffect( 'fx_staff_cast' );

			ACSGetEquippedSword().DestroyEffect( 'fx_staff_gameplay' );
			ACSGetEquippedSword().PlayEffectSingle( 'fx_staff_gameplay' );
			ACSGetEquippedSword().StopEffect( 'fx_staff_gameplay' );

			PlayerPlayAnimation ( 'man_mage_teleport_in_ACS');

			thePlayer.RemoveTag('ACS_Mage_Teleport');
		}

		if ( thePlayer.HasTag('ACS_Dolphin_Teleport') )
		{
			ACS_dolphin_teleport_entity().CreateAttachment( thePlayer, , Vector( 0, 0, 0 ), EulerAngles( 0, 0, 0 ) );

			ACS_dolphin_teleport_entity().StopEffect('up');
			ACS_dolphin_teleport_entity().StopEffect('warning_up');

			ACS_dolphin_teleport_entity().StopEffect('diagonal_up_right');
			ACS_dolphin_teleport_entity().StopEffect('warning_up_right');

			ACS_dolphin_teleport_entity().StopEffect('diagonal_up_left');
			ACS_dolphin_teleport_entity().StopEffect('warning_up_left');

			ACS_dolphin_teleport_entity().PlayEffectSingle('up');
			ACS_dolphin_teleport_entity().PlayEffectSingle('warning_up');

			ACS_dolphin_teleport_entity().PlayEffectSingle('diagonal_up_right');
			ACS_dolphin_teleport_entity().PlayEffectSingle('warning_up_right');

			ACS_dolphin_teleport_entity().PlayEffectSingle('diagonal_up_left');
			ACS_dolphin_teleport_entity().PlayEffectSingle('warning_up_left');

			thePlayer.SoundEvent('monster_water_mage_combat_spray');

			ACS_dolphin_teleport_entity().DestroyAfter(5);

			PlayerPlayAnimation ( 'man_mage_teleport_in_ACS');

			thePlayer.RemoveTag('ACS_Dolphin_Teleport');
		}

		if ( thePlayer.HasTag('ACS_Iris_Teleport') )
		{	
			thePlayer.PlayEffectSingle('ethereal_buff');

			thePlayer.StopEffect('ethereal_buff');

			thePlayer.StopEffect('special_attack_fx');

			thePlayer.SoundEvent('magic_olgierd_tele');

			if (thePlayer.HasTag('ACS_HideWeaponOnDodge') 
			&& !thePlayer.HasTag('blood_sucking')
			)
			{
				ACS_Weapon_Respawn();

				thePlayer.RemoveTag('ACS_HideWeaponOnDodge');

				thePlayer.RemoveTag('ACS_HideWeaponOnDodge_Claw_Effect');
			}

			ACS_Marker_Smoke();

			thePlayer.RemoveTag('ACS_Iris_Teleport');
		}

		if ( thePlayer.HasTag('ACS_Explosion_Teleport') )
		{
			//ACS_explosion_teleport_entity().CreateAttachment(thePlayer);

			thePlayer.StopEffect('smoke_explosion');
			thePlayer.PlayEffectSingle('smoke_explosion');

			//ACS_explosion_teleport_entity().DestroyAfter(2);

			PlayerPlayAnimation ( 'man_mage_teleport_in_ACS');

			thePlayer.RemoveTag('ACS_Explosion_Teleport');
		}

		if ( thePlayer.HasTag('ACS_Fountain_Portal_Teleport') )
		{
			ACS_fountain_portal_teleport_entity().StopEffect('portal');
			ACS_fountain_portal_teleport_entity().PlayEffectSingle('portal');

			thePlayer.SoundEvent('magic_geralt_teleport');

			ACS_fountain_portal_teleport_entity().DestroyAfter(2);

			thePlayer.RemoveTag('ACS_Fountain_Portal_Teleport');
		}

		if ( thePlayer.HasTag('ACS_Lightning_Teleport') )
		{
			ACS_lightning_teleport_entity().CreateAttachment(thePlayer);

			ACS_Marker_Lightning();

			//ACS_lightning_teleport_entity().StopEffect('lightning');
			//ACS_lightning_teleport_entity().PlayEffectSingle('lightning');

			//ACS_lightning_teleport_entity().StopEffect('pre_lightning');
			//ACS_lightning_teleport_entity().PlayEffectSingle('pre_lightning');

			ACS_Giant_Lightning_Strike_Mult();

			ACS_lightning_teleport_entity().StopEffect('lighgtning');
			ACS_lightning_teleport_entity().PlayEffectSingle('lighgtning');

			thePlayer.SoundEvent('fx_other_lightning_hit');

			ACS_lightning_teleport_entity().DestroyAfter(2);

			thePlayer.PlayEffectSingle('hit_lightning');
			thePlayer.StopEffect('hit_lightning');

			PlayerPlayAnimation ( 'man_mage_teleport_in_ACS');

			thePlayer.RemoveTag('ACS_Lightning_Teleport');
		}

		if ( thePlayer.HasTag('ACS_Fire_Teleport') )
		{
			ACS_Marker_Fire();

			thePlayer.PlayEffectSingle( 'lugos_vision_burning' );
			thePlayer.StopEffect( 'lugos_vision_burning' );

			thePlayer.SoundEvent('monster_dracolizard_combat_fireball_hit');

			thePlayer.RemoveTag('ACS_Fire_Teleport');
		}

		thePlayer.UnblockAction( EIAB_Crossbow, 			'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_CallHorse,			'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_Signs, 				'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_DrawWeapon, 			'ACS_Teleport_Dodge'); 
		thePlayer.UnblockAction( EIAB_FastTravel, 			'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_Fists, 				'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_InteractionAction, 	'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_UsableItem,			'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_ThrowBomb,			'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_SwordAttack,			'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_Jump,					'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_LightAttacks,			'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_HeavyAttacks,			'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_SpecialAttackLight,	'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_SpecialAttackHeavy,	'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_Dodge,				'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_Roll,					'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_Parry,				'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_MeditationWaiting,	'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_OpenMeditation,		'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_RadialMenu,			'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_Interactions, 		'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_QuickSlots, 			'ACS_Teleport_Dodge');

		thePlayer.RemoveTag('ACS_Is_Currently_Dodging');
	}

	function Teleport_Dodge_Action_Unblock()
	{
		thePlayer.UnblockAction( EIAB_Crossbow, 			'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_CallHorse,			'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_Signs, 				'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_DrawWeapon, 			'ACS_Teleport_Dodge'); 
		thePlayer.UnblockAction( EIAB_FastTravel, 			'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_Fists, 				'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_InteractionAction, 	'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_UsableItem,			'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_ThrowBomb,			'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_SwordAttack,			'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_Jump,					'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_LightAttacks,			'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_HeavyAttacks,			'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_SpecialAttackLight,	'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_SpecialAttackHeavy,	'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_Dodge,				'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_Roll,					'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_Parry,				'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_MeditationWaiting,	'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_OpenMeditation,		'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_RadialMenu,			'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_Interactions, 		'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_QuickSlots, 			'ACS_Teleport_Dodge');
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Bruxa bite stuff
	
	function bruxa_bite() 
	{ 
		if ( ACS_Enabled() )
		{
			ACS_StaminaDrain(1);
			
			MovementAdjust();
			
			thePlayer.SoundEvent("monster_dettlaff_monster_construct_whoosh_claws_large");
			
			if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat()) 
			{ 
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				
				thePlayer.EnableCollisions(false);
				
				movementAdjustor.SlideTowards( ticket, actor, dist, dist ); 
				
				bruxa_bite_index_1 = RandDifferent(this.previous_bruxa_bite_index_1 , 2);
				
				switch (bruxa_bite_index_1) 
				{	
					case 1:
					PlayerPlayAnimation( 'bruxa_attack_bite_back_rp_bruxa_ACS');
					break;

					default:
					PlayerPlayAnimation( 'bruxa_attack_bite_back_lp_bruxa_ACS');
					break;		
				}
				
				this.previous_bruxa_bite_index_1 = bruxa_bite_index_1;
				
				bruxa_blood_suck_actual();
			}
		}
	}
	
	function bruxa_blood_suck_actual()
	{	
		actor = (CActor)( thePlayer.GetDisplayTarget() );
		
		victimRot = actor.GetWorldRotation();
		
		playerPos = thePlayer.GetWorldPosition();
		
		playerRot = thePlayer.GetWorldRotation();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			thePlayer.AddTag('blood_sucking');

			actor.AddTag('bruxa_bite_victim');

			ACS_Hijack_Marker_Create();

			if (!thePlayer.HasTag('ACS_HideWeaponOnDodge'))
			{
				thePlayer.AddTag('ACS_HideWeaponOnDodge');
			}

			if (!thePlayer.HasTag('aard_sword_equipped'))
			{
				ACS_Weapon_Invisible();
			}

			thePlayer.BreakAttachment();
			
			thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat );
			thePlayer.SetCanPlayHitAnim(false);
			thePlayer.EnableCharacterCollisions(false);

			((CNewNPC)actor).EnableCharacterCollisions(false);

			if ( ((CNewNPC)actor).IsFlying() && actor.GetDistanceFromGround( 3 ) > 2 )
			{
				/*
				if (actor.HasAbility('mon_gryphon_base'))
				{
					
					bonePos = actor.GetBoneWorldPosition('neck3');

					bonePos.X += 0.25;
					bonePos.Y += 0.1625;
					bonePos.Z -= 1.15;

					thePlayer.CreateAttachmentAtBoneWS( actor, 'neck3', bonePos, victimRot );

					attach_rot.Roll = 0;
					attach_rot.Pitch = 0;
					attach_rot.Yaw = 0;
					attach_vec.X = 0;
					attach_vec.Y = 0;
					attach_vec.Z = 0;

					thePlayer.CreateAttachment( ACS_Hijack_Marker_Get(), ,  attach_vec, attach_rot);
					

					actor.GetBoneWorldPositionAndRotationByIndex( actor.GetBoneIndex( 'neck2' ), bone_vec, bone_rot );

					bone_rot.Roll = 0;
					bone_rot.Pitch = 0;
					bone_rot.Yaw = 45;
					bone_vec.X += 0.25;
					bone_vec.Y += 0.1625;
					bone_vec.Z -= 1.15;

					//thePlayer.CreateAttachmentAtBoneWS( actor, 'neck2', bone_vec, bone_rot );

					thePlayer.CreateAttachment( actor, , Vector( 0, -2.5, -2.5 ), victimRot );
				}
				else if (npc.HasAbility('mon_basilisk'))
				{
					bonePos = actor.GetBoneWorldPosition('neck2');

					bonePos.X += 0.25;
					bonePos.Y += 0.1625;
					bonePos.Z -= 1.15;

					thePlayer.CreateAttachmentAtBoneWS( actor, 'neck2', bonePos, victimRot );
				}
				else if (actor.HasAbility('mon_siren_base'))
				{
					bonePos = actor.GetBoneWorldPosition('torso2');

					bonePos.X += 0.25;
					bonePos.Y += 0.1625;
					bonePos.Z -= 1.15;

					thePlayer.CreateAttachmentAtBoneWS( actor, 'torso2', bonePos, victimRot );
				}
				else if (actor.HasAbility('mon_wyvern_base'))
				{
					bonePos = actor.GetBoneWorldPosition('spine3');

					bonePos.X += 0.25;
					bonePos.Y += 0.1625;
					bonePos.Z -= 1.15;

					thePlayer.CreateAttachmentAtBoneWS( actor, 'spine3', bonePos, victimRot );
				}
				else if (actor.HasAbility('mon_harpy_base'))
				{
					bonePos = actor.GetBoneWorldPosition('torso2');

					bonePos.X += 0.25;
					bonePos.Y += 0.1625;
					bonePos.Z -= 1.15;

					thePlayer.CreateAttachmentAtBoneWS( actor, 'torso2', bonePos, victimRot );
				}
				else if (actor.HasAbility('mon_draco_base'))
				{
					bonePos = actor.GetBoneWorldPosition('spine2');

					bonePos.X += 0;
					bonePos.Y += 2.1625;
					bonePos.Z -= 0;

					thePlayer.CreateAttachment( actor, 'spine2', bonePos, victimRot );
				}	
				else
				{
					thePlayer.CreateAttachment( actor, , Vector( 0, 0, 0 ), victimRot );
				}
				*/
				thePlayer.CreateAttachment( actor, , Vector( 0, -5, -2.5 ) );

				if( thePlayer.IsAlive() && thePlayer.IsInCombat() ){ thePlayer.SetVisibility( true ); }	
			}
			else if (!((CNewNPC)npc).IsFlying()
			&& (npc.HasAbility('mon_garkain')
			|| npc.HasAbility('mon_sharley_base')
			|| npc.HasAbility('mon_bies_base')
			|| npc.HasAbility('mon_golem_base')
			|| npc.HasAbility('mon_endriaga_base')
			|| npc.HasAbility('mon_arachas_base')
			|| npc.HasAbility('mon_kikimore_base')
			|| npc.HasAbility('mon_black_spider_base')
			|| npc.HasAbility('mon_black_spider_ep2_base')
			|| npc.HasAbility('mon_ice_giant')
			|| npc.HasAbility('mon_cyclops')
			|| npc.HasAbility('mon_knight_giant')
			|| npc.HasAbility('mon_cloud_giant')
			|| npc.HasAbility('mon_troll_base')))
			{
				thePlayer.CreateAttachment( actor, , Vector( 0, 0, 0 ) );

				thePlayer.SetVisibility( false ); 

				((CNewNPC)actor).SetImmortalityMode( AIM_Invulnerable, AIC_Combat );
			}
			else
			{
				thePlayer.CreateAttachment( actor, , Vector( 0, 0, 0 ) );

				if( thePlayer.IsAlive() && thePlayer.IsInCombat() ){ thePlayer.SetVisibility( true ); }		 

				((CNewNPC)actor).SetImmortalityMode( AIM_Invulnerable, AIC_Combat );
			}
			
			thePlayer.SetIsCurrentlyDodging(true);
			
			AddTimer('ACS_bruxa_blood_suck_repeat', 2 , true);	
				
			AddTimer('ACS_blood_suck_victim_paralyze', 0.001  , true);	

			thePlayer.BlockAction( EIAB_Crossbow, 			'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_CallHorse,			'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_Signs, 				'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_DrawWeapon, 		'ACS_Bruxa_Bite'); 
			thePlayer.BlockAction( EIAB_FastTravel, 		'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_Fists, 				'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_InteractionAction, 	'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_UsableItem,			'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_ThrowBomb,			'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_SwordAttack,		'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_Jump,				'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_LightAttacks,		'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_HeavyAttacks,		'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_SpecialAttackLight,	'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_SpecialAttackHeavy,	'ACS_Bruxa_Bite');
			//thePlayer.BlockAction( EIAB_Dodge,			'ACS_Bruxa_Bite');
			//thePlayer.BlockAction( EIAB_Roll,				'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_Parry,				'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_MeditationWaiting,	'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_OpenMeditation,		'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_RadialMenu,			'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_Interactions, 		'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_QuickSlots, 		'ACS_Bruxa_Bite');
		}
		/*
		else
		{
			thePlayer.UnblockAction( EIAB_Crossbow, 			'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_CallHorse,			'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_Signs, 				'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_DrawWeapon, 			'ACS_Bruxa_Bite'); 
			thePlayer.UnblockAction( EIAB_FastTravel, 			'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_Fists, 				'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_InteractionAction, 	'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_UsableItem,			'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_ThrowBomb,			'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_SwordAttack,			'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_Jump,					'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_LightAttacks,			'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_HeavyAttacks,			'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_SpecialAttackLight,	'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_SpecialAttackHeavy,	'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_Dodge,				'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_Roll,					'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_Parry,				'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_MeditationWaiting,	'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_OpenMeditation,		'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_RadialMenu,			'ACS_Bruxa_Bite');

			thePlayer.BreakAttachment();
			thePlayer.SetIsCurrentlyDodging(false);
			thePlayer.EnableCollisions(true);
			RemoveTimer('ACS_bruxa_blood_suck_repeat');	
			RemoveTimer('ACS_blood_suck_victim_paralyze');
			if( thePlayer.IsAlive() && thePlayer.IsInCombat() ){ thePlayer.SetVisibility( true ); }		 
			bruxa_blood_suck_end_actual();
		}
		*/
	}
	
	function blood_suck_victim_paralyze_actual()
	{
		var bonePos										: Vector;

		MovementAdjust();

		actors.Clear();

		actors = GetActorsInRange( thePlayer, 10, 10, 'bruxa_bite_victim' );

		//theGame.GetActorsByTag( 'bruxa_bite_victim', actors );

		//actors = thePlayer.GetNPCsAndPlayersInRange( 10, 10);

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				npc = (CNewNPC)actors[i];

				actor = actors[i];

				animatedComponent = (CAnimatedComponent)npc.GetComponentByClassName( 'CAnimatedComponent' );	

				if (npc.HasTag('bruxa_bite_victim'))
				{
					if ( npc.IsAlive() )
					{
						if (((CNewNPC)npc).IsFlying() && actor.GetDistanceFromGround( 3 ) > 2)
						{
							if (thePlayer.HasTag('ACS_Hijack_Flight_End'))
							{
								thePlayer.BreakAttachment();

								thePlayer.CreateAttachment( actor, , Vector( 0, -5, -2.5 ) );

								thePlayer.RemoveTag('ACS_Hijack_Flight_End');
							}

							movementAdjustor.RotateTo( ticket, VecHeading(npc.GetHeadingVector()) );

							((CNewNPC)npc).SetUnstoppable(true);

							thePlayer.PlayEffectSingle('mind_control', ACS_Hijack_Marker_2_Get());
							thePlayer.PlayEffectSingle('mind_control', ACS_Hijack_Marker_2_Get());
							thePlayer.PlayEffectSingle('mind_control', ACS_Hijack_Marker_2_Get());
							thePlayer.PlayEffectSingle('mind_control', ACS_Hijack_Marker_2_Get());
							thePlayer.PlayEffectSingle('mind_control', ACS_Hijack_Marker_2_Get());
							thePlayer.PlayEffectSingle('mind_control', ACS_Hijack_Marker_2_Get());
							/*
							thePlayer.PlayEffectSingle('mind_control', npc);
							thePlayer.PlayEffectSingle('mind_control', npc);
							thePlayer.PlayEffectSingle('mind_control', npc);
							thePlayer.PlayEffectSingle('mind_control', npc);
							thePlayer.PlayEffectSingle('mind_control', npc);
							thePlayer.PlayEffectSingle('mind_control', npc);
							*/
							thePlayer.StopEffect('mind_control');	

							thePlayer.StopEffect('blood_drain'); 
							thePlayer.StopEffect('blood_start');

							PlayerPlayAnimationWraith( 'swim_slow_f_ACS' );
						}
						else if (!((CNewNPC)npc).IsFlying()
						&& (npc.HasAbility('mon_garkain')
						|| npc.HasAbility('mon_sharley_base')
						|| npc.HasAbility('mon_bies_base')
						|| npc.HasAbility('mon_golem_base')
						|| npc.HasAbility('mon_endriaga_base')
						|| npc.HasAbility('mon_arachas_base')
						|| npc.HasAbility('mon_kikimore_base')
						|| npc.HasAbility('mon_black_spider_base')
						|| npc.HasAbility('mon_black_spider_ep2_base')
						|| npc.HasAbility('mon_ice_giant')
						|| npc.HasAbility('mon_cyclops')
						|| npc.HasAbility('mon_knight_giant')
						|| npc.HasAbility('mon_cloud_giant')
						|| npc.HasAbility('mon_troll_base')))
						{
							thePlayer.SetVisibility( false ); 

							if(!npc.HasTag('ACS_demonic_possession'))
							{
								npc.StopEffect('demonic_possession');
								npc.PlayEffectSingle('demonic_possession');

								thePlayer.PlayEffectSingle('ethereal_buff');
								thePlayer.StopEffect('ethereal_buff');

								thePlayer.PlayEffectSingle('ethereal_debuff');
								thePlayer.StopEffect('ethereal_debuff');

								npc.AddTag('ACS_demonic_possession');
							}

							if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

							thePlayer.BreakAttachment();
							thePlayer.CreateAttachment( npc, , Vector( 0, 0, 0 ) );

							PlayerPlayAnimationWraith( 'man_geralt_petard2_horse_idle_aim_cycle' );

							((CNewNPC)npc).SetUnstoppable(false);

							if( !npc.HasBuff( EET_Confusion ) )
							{
								npc.AddEffectDefault( EET_Confusion, thePlayer, 'acs_buff_effects' );	
							}
						}
						else
						{
							if (npc.HasAbility('mon_gryphon_base')
							|| npc.HasAbility('mon_siren_base')
							|| npc.HasAbility('mon_wyvern_base')
							|| npc.HasAbility('mon_harpy_base')
							|| npc.HasAbility('mon_draco_base')
							|| npc.HasAbility('mon_basilisk')
							)
							{
								RemoveTimer('ACS_HijackMoveForward');	
							}  

							npc.BlockAbility('ShadowForm', true);
							npc.BlockAbility('MistForm', true);
							npc.BlockAbility('MistCharge', true);
							npc.BlockAbility('Flashstep', true);
							npc.BlockAbility('DustCloud', true);
							npc.BlockAbility('Specter', true);
							npc.BlockAbility('ContactBlindness', true);
							npc.BlockAbility('Summon', true);
							//npc.BlockAbility('mon_noonwraith  ', true);
							
							thePlayer.BreakAttachment();
							thePlayer.CreateAttachment( npc, , Vector( 0, 0, 0 ) );

							thePlayer.SetVisibility( true );

							if (!thePlayer.HasTag('ACS_HideWeaponOnDodge'))
							{
								thePlayer.AddTag('ACS_HideWeaponOnDodge');
							}

							if (!thePlayer.HasTag('aard_sword_equipped'))
							{
								ACS_Weapon_Invisible();
							}

							if (!thePlayer.HasTag('ACS_Hijack_Flight_End'))
							{
								PlayerPlayAnimationWraith( 'bruxa_attack_bite_back_rp_bruxa_ACS' );

								thePlayer.AddTag('ACS_Hijack_Flight_End');
							}

							((CNewNPC)npc).SetUnstoppable(false);

							if( !npc.HasBuff( EET_Confusion ) )
							{
								npc.AddEffectDefault( EET_Confusion, thePlayer, 'acs_buff_effects' );	
							}

							if( !npc.HasBuff( EET_Confusion ) )
							{
								npc.AddEffectDefault( EET_Confusion, thePlayer, 'acs_buff_effects' );	
							}

							if( !npc.HasBuff( EET_LongStagger ) )
							{
								npc.AddEffectDefault( EET_LongStagger, thePlayer, 'acs_buff_effects' );	
							}

							if( !npc.HasBuff( EET_Slowdown ) )
							{
								//npc.AddEffectDefault( EET_Slowdown, thePlayer, 'acs_buff_effects' );	
							}
						}
					}
					else
					{
						bruxa_blood_suck_end_actual();
					}
				}		
			}
		}
	}
	
	function alive_check_actual()
	{
		if (thePlayer.HasTag('yrden_secondary_sword_equipped'))
		{
			ACS_Giant_Lightning_Strike_Single();
		}
		else if (thePlayer.HasTag('acs_bow_active'))
		{

		}
		else if (thePlayer.HasTag('acs_crossbow_active'))
		{
			
		}
	}
	
	function bruxa_blood_suck_repeat_actual()
	{
		actors.Clear();
		
		actors = GetActorsInRange(thePlayer, 10, 10, 'bruxa_bite_victim');

		//theGame.GetActorsByTag( 'bruxa_bite_victim', actors );

		//actors = thePlayer.GetNPCsAndPlayersInRange( 10, 10);

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				npc = (CNewNPC)actors[i];

				actor = actors[i];

				if (npc.IsAlive() && npc.HasTag('bruxa_bite_victim'))
				{
					((CNewNPC)npc).SetImmortalityMode( AIM_None, AIC_Combat ); 

					npc.RemoveBuff(EET_HeavyKnockdown, true, 'acs_buff_effects');

					npc.RemoveBuffImmunity_AllNegative();

					npc.RemoveBuffImmunity_AllCritical();
					
					if 
					(
					!((CNewNPC)npc).IsFlying()
					&& !npc.HasAbility('mon_garkain')
					&& !npc.HasAbility('mon_sharley_base')
					&& !npc.HasAbility('mon_bies_base')
					&& !npc.HasAbility('mon_golem_base')
					&& !npc.HasAbility('mon_endriaga_base')
					&& !npc.HasAbility('mon_arachas_base')
					&& !npc.HasAbility('mon_kikimore_base')
					&& !npc.HasAbility('mon_black_spider_base')
					&& !npc.HasAbility('mon_black_spider_ep2_base')
					&& !npc.HasAbility('mon_ice_giant')
					&& !npc.HasAbility('mon_cyclops')
					&& !npc.HasAbility('mon_knight_giant')
					&& !npc.HasAbility('mon_cloud_giant')
					&& !npc.HasAbility('mon_troll_base')
					)
					{
						if (npc.HasAbility('mon_gryphon_base')
						|| npc.HasAbility('mon_siren_base')
						|| npc.HasAbility('mon_wyvern_base')
						|| npc.HasAbility('mon_harpy_base')
						|| npc.HasAbility('mon_draco_base')
						|| npc.HasAbility('mon_basilisk')
						)
						{
							RemoveTimer('ACS_HijackMoveForward');	
						}

						if (thePlayer.HasTag('ACS_Hijack_Flight_End'))
						{
							thePlayer.RemoveTag('ACS_Hijack_Flight_End');
						}

						thePlayer.SoundEvent("monster_dettlaff_monster_construct_whoosh_claws_large");

						thePlayer.PlayEffectSingle( 'blood_drain_fx2' ); 
						thePlayer.StopEffect( 'blood_drain_fx2' );

						ACS_bruxa_blood_resource();

						thePlayer.SetVisibility( true );

						if (npc.UsesVitality()) 
						{ 
							curTargetVitality = actor.GetStat( BCS_Vitality );

							damageMax = curTargetVitality * 0.10; 
							
							damageMin = curTargetVitality * 0.05; 

							if( curTargetVitality <= actor.GetStatMax( BCS_Vitality ) * 0.1 )
							{
								npc.Kill('ACS_Bruxa_Bite', false, thePlayer);

								ACS_Dismember_Internal(npc, action);

								VampVoiceEffects_Monster();

								thePlayer.AddEffectDefault( EET_BlackBlood, thePlayer, 'ACS_Bruxa_Bite' );

								thePlayer.AddEffectDefault( EET_WellFed, thePlayer, 'ACS_Bruxa_Bite' );

								thePlayer.AddEffectDefault( EET_WellHydrated, thePlayer, 'ACS_Bruxa_Bite' );

								thePlayer.AddEffectDefault( EET_AutoStaminaRegen, thePlayer, 'ACS_Bruxa_Bite' );
							}
							else
							{
								npc.DrainVitality( RandRangeF(damageMax,damageMin) );
							}
						} 
						else if (npc.UsesEssence()) 
						{ 
							curTargetEssence = actor.GetStat( BCS_Essence );
							
							damageMax = curTargetEssence * 0.20; 
							
							damageMin = curTargetEssence * 0.10; 

							if( curTargetEssence <= actor.GetStatMax( BCS_Essence ) * 0.1 )
							{
								npc.Kill('ACS_Bruxa_Bite', false, thePlayer);

								ACS_Dismember_Internal(npc, action);

								VampVoiceEffects_Monster();

								thePlayer.AddEffectDefault( EET_BlackBlood, thePlayer, 'ACS_Bruxa_Bite' );

								thePlayer.AddEffectDefault( EET_WellFed, thePlayer, 'ACS_Bruxa_Bite' );

								thePlayer.AddEffectDefault( EET_WellHydrated, thePlayer, 'ACS_Bruxa_Bite' );

								thePlayer.AddEffectDefault( EET_AutoStaminaRegen, thePlayer, 'ACS_Bruxa_Bite' );
							}
							else
							{
								npc.DrainEssence( RandRangeF(damageMax,damageMin) );
							}
						}

						thePlayer.GainStat( BCS_Vitality, RandRangeF(thePlayer.GetStatMax( BCS_Vitality ) * 0.1, thePlayer.GetStatMax( BCS_Vitality ) * 0.05)  ); 

						bruxa_bite_repeat_index_1 = RandDifferent(this.previous_bruxa_bite_repeat_index_1 , 2);

						switch (bruxa_bite_repeat_index_1) 
						{			
							case 1:	
							PlayerPlayAnimation( 'bruxa_attack_bite_back_rp_bruxa_ACS');
							break;
							
							default:
							PlayerPlayAnimation( 'bruxa_attack_bite_back_lp_bruxa_ACS');
							break;		
						}			
						this.previous_bruxa_bite_repeat_index_1 = bruxa_bite_repeat_index_1;
					}
				}
				else
				{
					bruxa_blood_suck_end_actual();
				}
			}
		}
	}
	
	function bruxa_tackle_actual()
	{
		/*
		actors = GetActorsInRange(thePlayer, 10, 10, 'bruxa_bite_victim', true);
		
		for( i = 0; i < actors.Size(); i += 1 )
		{
			npc = (CNewNPC)actors[i];
			actor = (CActor)actors[i];
			if( actors.Size() > 0 )
			{
				if( RandF() < 0.10 ) 
				{
					PlayerPlayAnimation( 'bruxa_quest_eating_body_loop_ACS');
					
					if (!((CNewNPC)npc).IsFlying())
					{
						npc.AddEffectDefault( EET_HeavyKnockdown, thePlayer, 'acs_buff_effects' );	
					}
				}
				else
				{	
					if (!((CNewNPC)npc).IsFlying())
					{
						if( !npc.HasBuff( EET_Confusion ) )
						{
							npc.AddEffectDefault( EET_Confusion, thePlayer, 'acs_buff_effects' );	
						}
					}
				}
			}
		}
		*/

		if (thePlayer.HasTag('quen_sword_equipped'))
		{
			ACS_ThingsThatShouldBeRemoved();

			thePlayer.SetIsCurrentlyDodging(true);

			actor = (CActor)( thePlayer.GetTarget() );	

			movementAdjustor = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

			targetDistance = VecDistanceSquared2D( thePlayer.GetWorldPosition(), actor.GetWorldPosition() ) ;
			
			movementAdjustor.CancelAll();

			dodge_timer_attack_actual();

			ticket = movementAdjustor.CreateNewRequest( 'ACS_Movement_Adjust_Shadowdash' );
		
			movementAdjustor.AdjustmentDuration( ticket, 0.25 );
			
			//movementAdjustor.ShouldStartAt(ticket, thePlayer.GetWorldPosition());

			movementAdjustor.MaxRotationAdjustmentSpeed( ticket, 50000 );

			movementAdjustor.MaxLocationAdjustmentSpeed( ticket, 50000 );
			
			movementAdjustor.AdjustLocationVertically( ticket, true );

			movementAdjustor.ScaleAnimationLocationVertically( ticket, true );

			dist = ((((CMovingPhysicalAgentComponent)actor.GetMovingAgentComponent()).GetCapsuleRadius())
			+ (((CMovingPhysicalAgentComponent)thePlayer.GetMovingAgentComponent()).GetCapsuleRadius()) ) * 1.75;

			if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}
									
			thePlayer.SetAnimationSpeedMultiplier( 2.25 );
			
			RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

			quen_sword_glow();	

			if (!thePlayer.HasTag('ACS_Shadow_Dash_Empowered'))
			{
				thePlayer.AddTag('ACS_Shadow_Dash_Empowered');
			} 

			if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}

				movementAdjustor.SlideTowards( ticket, actor, dist, dist );

				if( targetDistance <= 4*4 ) 
				{
					olgierd_shadow_attack_part_2_index_1 = RandDifferent(this.previous_olgierd_shadow_attack_part_2_index_1 , 2);

					switch (olgierd_shadow_attack_part_2_index_1) 
					{	
						case 1:
						PlayerPlayAnimation( 'attack_shadowdash_strong_2_ACS');
						break;
						
						default:
						PlayerPlayAnimation( 'attack_shadowdash_002_ACS');
						break;
					}

					this.previous_olgierd_shadow_attack_part_2_index_1 = olgierd_shadow_attack_part_2_index_1;
				}
				else
				{
					PlayerPlayAnimation( 'attack_shadowdash_002_ACS');
				}
			
				//PlayerPlayAnimation( 'attack_shadowdash_002_ACS');
			}
			else
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

				//PlayerPlayAnimation( 'attack_shadowdash_002_ACS');

				olgierd_shadow_attack_part_2_index_1 = RandDifferent(this.previous_olgierd_shadow_attack_part_2_index_1 , 2);

				switch (olgierd_shadow_attack_part_2_index_1) 
				{	
					case 1:
					PlayerPlayAnimation( 'attack_shadowdash_strong_2_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'attack_shadowdash_002_ACS');
					break;
				}

				this.previous_olgierd_shadow_attack_part_2_index_1 = olgierd_shadow_attack_part_2_index_1;
			}
		}
		else if (thePlayer.HasTag('axii_sword_equipped'))
		{
			if (thePlayer.HasTag('ACS_Eredin_Stab'))
			{
				actors.Clear();

				actors = thePlayer.GetNPCsAndPlayersInCone(2.5, VecHeading(thePlayer.GetHeadingVector()), 60, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors );

				if( actors.Size() > 0 )
				{
					for( i = 0; i < actors.Size(); i += 1 )
					{
						actortarget = (CActor)actors[i];

						actortarget.SoundEvent("cmb_play_ger_stab_in");

						if ( actortarget.HasTag('ACS_Stabbed') )
						continue;

						if( !actortarget.HasBuff( EET_Confusion ) && !actortarget.HasBuff( EET_HeavyKnockdown ) && !actortarget.HasBuff( EET_Knockdown ) && !actortarget.HasBuff( EET_Ragdoll ) && actortarget.IsAlive() )
						{
							actortarget.SoundEvent("cmb_play_ger_stab_in");

							actortarget.AddEffectDefault( EET_Confusion, actortarget, 'ACS_Stabbed' );	

							//actortarget.CreateAttachment( thePlayer, , Vector( 0.25, 1.5, 0.25 ) );

							actortarget.AddTag('ACS_Stabbed');
						}
					}
				}

				thePlayer.RemoveTag('ACS_Eredin_Stab');
			}
		}
		else if (thePlayer.HasTag('aard_sword_equipped'))
		{
			ACS_ThingsThatShouldBeRemoved();

			thePlayer.SetIsCurrentlyDodging(true);

			thePlayer.StopEffect('shadowdash_shockwave');

			thePlayer.PlayEffectSingle('shadowdash_shockwave');

			thePlayer.StopEffect('shadowdash_shockwave');

			actor = (CActor)( thePlayer.GetTarget() );	

			movementAdjustor = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

			targetDistance = VecDistanceSquared2D( thePlayer.GetWorldPosition(), actor.GetWorldPosition() ) ;
			
			movementAdjustor.CancelAll();

			dodge_timer_attack_actual();

			ticket = movementAdjustor.CreateNewRequest( 'ACS_Movement_Adjust_Aard_Sword_Dash' );

			movementAdjustor.MaxRotationAdjustmentSpeed( ticket, 50000 );

			movementAdjustor.MaxLocationAdjustmentSpeed( ticket, 50000 );
			
			movementAdjustor.AdjustLocationVertically( ticket, true );

			movementAdjustor.ScaleAnimationLocationVertically( ticket, true );

			distVampSpecialDash = (((CMovingPhysicalAgentComponent)actor.GetMovingAgentComponent()).GetCapsuleRadius() 
			+ ((CMovingPhysicalAgentComponent)thePlayer.GetMovingAgentComponent()).GetCapsuleRadius());

			if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}

			if (thePlayer.HasTag('ACS_Vampire_Dash_Close'))
			{
				movementAdjustor.AdjustmentDuration( ticket, 0.125 );

				thePlayer.RemoveTag('ACS_Vampire_Dash_Close');
			}
			else if (thePlayer.HasTag('ACS_Whirl_Attack'))
			{
				movementAdjustor.AdjustmentDuration( ticket, 0.325 );

				PlayerPlayAnimation( 'attack_light_03_ACS');

				thePlayer.RemoveTag('ACS_Whirl_Attack');	
			}
			else
			{	
				movementAdjustor.AdjustmentDuration( ticket, 0.325 );

				thePlayer.SetAnimationSpeedMultiplier( 1.5  );
				
				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
			}

			if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}

				movementAdjustor.SlideTowards( ticket, actor, distVampSpecialDash, distVampSpecialDash );
			}
			else
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			}
		}
		else if (thePlayer.HasTag('vampire_claws_equipped'))
		{
			ACS_ThingsThatShouldBeRemoved();

			thePlayer.SetIsCurrentlyDodging(true);

			actor = (CActor)( thePlayer.GetTarget() );	

			movementAdjustor = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

			targetDistance = VecDistanceSquared2D( thePlayer.GetWorldPosition(), actor.GetWorldPosition() ) ;
			
			movementAdjustor.CancelAll();

			dodge_timer_attack_actual();

			ticket = movementAdjustor.CreateNewRequest( 'ACS_Movement_Adjust_Vampire_Claw_Dash' );
			
			movementAdjustor.MaxRotationAdjustmentSpeed( ticket, 50000 );

			movementAdjustor.MaxLocationAdjustmentSpeed( ticket, 50000 );
			
			movementAdjustor.AdjustLocationVertically( ticket, true );

			movementAdjustor.ScaleAnimationLocationVertically( ticket, true );

			if (!ACS_HideVampireClaws_Enabled())
			{
				thePlayer.StopEffect('shadowdash_shockwave');

				thePlayer.PlayEffectSingle('shadowdash_shockwave');

				thePlayer.StopEffect('shadowdash_shockwave');
			}

			if (thePlayer.HasTag('ACS_Vampire_Dash_Close'))
			{
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}

				thePlayer.SetAnimationSpeedMultiplier( 1.5  );

				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);

				movementAdjustor.AdjustmentDuration( ticket, 0.125 );

				distVampSpecialDash = (((CMovingPhysicalAgentComponent)actor.GetMovingAgentComponent()).GetCapsuleRadius() 
				+ ((CMovingPhysicalAgentComponent)thePlayer.GetMovingAgentComponent()).GetCapsuleRadius());

				thePlayer.RemoveTag('ACS_Vampire_Dash_Close');
			}
			else
			{
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}

				thePlayer.SetAnimationSpeedMultiplier( 1.5  );

				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

				movementAdjustor.AdjustmentDuration( ticket, 0.325 );

				distVampSpecialDash = (((CMovingPhysicalAgentComponent)actor.GetMovingAgentComponent()).GetCapsuleRadius() 
				+ ((CMovingPhysicalAgentComponent)thePlayer.GetMovingAgentComponent()).GetCapsuleRadius()) * 0.5;
			}

			if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}

				movementAdjustor.SlideTowards( ticket, actor, distVampSpecialDash, distVampSpecialDash );
			}
		}
	}

	function Umbral_Slash_End_Actual()
	{
		if (thePlayer.HasTag('quen_sword_equipped'))
		{
			theGame.SetTimeScale( 0.5, theGame.GetTimescaleSource( ETS_InstantKill ), theGame.GetTimescalePriority( ETS_InstantKill ), false, true );

			thePlayer.AddTimer( 'RemoveInstantKillSloMo', 1.5 );

			ACS_ThingsThatShouldBeRemoved();

			thePlayer.SetIsCurrentlyDodging(true);

			actor = (CActor)( thePlayer.GetTarget() );	

			movementAdjustor = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

			targetDistance = VecDistanceSquared2D( thePlayer.GetWorldPosition(), actor.GetWorldPosition() ) ;
			
			movementAdjustor.CancelAll();

			dodge_timer_attack_actual();

			thePlayer.SetVisibility( false );

			thePlayer.AddTag('ACS_In_Umbral_Slash_End');

			AddTimer('ACS_reveal_timer', 1, false);

			AddTimer('ACS_Revert_Env', 2, false);

			AddTimer('ACS_Umbral_Slash_End_Damage', 1.5, false);

			ticket = movementAdjustor.CreateNewRequest( 'ACS_Movement_Adjust_Umbral_Slash_End' );
		
			movementAdjustor.AdjustmentDuration( ticket, 0.5 );
			
			//movementAdjustor.ShouldStartAt(ticket, thePlayer.GetWorldPosition());

			movementAdjustor.MaxRotationAdjustmentSpeed( ticket, 50000 );

			movementAdjustor.MaxLocationAdjustmentSpeed( ticket, 50000 );
			
			movementAdjustor.AdjustLocationVertically( ticket, true );

			movementAdjustor.ScaleAnimationLocationVertically( ticket, true );

			dist = (((CMovingPhysicalAgentComponent)actor.GetMovingAgentComponent()).GetCapsuleRadius() 
			+ ((CMovingPhysicalAgentComponent)thePlayer.GetMovingAgentComponent()).GetCapsuleRadius()) * 1.25;

			if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}
									
			//thePlayer.SetAnimationSpeedMultiplier( 1.75 );
			
			//AddTimer('ACS_ResetAnimation', 0.5 , false);

			quen_sword_glow();	

			if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}

				//movementAdjustor.SlideTo( ticket, thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 5 );

				PlayerPlayAnimation( 'B_AtkSenkou02_ACS');

				AddTimer('ACS_Umbral_Slash_End_Effect_Repeat', 0.1, true);

				AddTimer('ACS_Umbral_Slash_End_Effect_Repeat_Stop', 0.6, false);
			}
			else
			{
				if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

				//movementAdjustor.SlideTo( ticket, thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 5 );

				//PlayerPlayAnimation( 'attack_shadowdash_002_ACS');

				PlayerPlayAnimation( 'B_AtkSenkou02_ACS');

				AddTimer('ACS_Umbral_Slash_End_Effect_Repeat', 0.1, true);

				AddTimer('ACS_Umbral_Slash_End_Effect_Repeat_Stop', 0.6, false);
			}
		}
	}

	function vampire_fist_slide()
	{
		ACS_ThingsThatShouldBeRemoved();

		RemoveTimer('ACS_collision_delay');

		actor = (CActor)( thePlayer.GetTarget() );	

		movementAdjustor = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		targetDistance = VecDistanceSquared2D( thePlayer.GetWorldPosition(), actor.GetWorldPosition() ) ;
		
		//movementAdjustor.CancelAll();
		
		ticket = movementAdjustor.CreateNewRequest( 'ACS_Movement_Adjust_Vampire_Dash' );
		
		movementAdjustor.AdjustmentDuration( ticket, 0.5 );
		
		//movementAdjustor.ShouldStartAt(ticket, thePlayer.GetWorldPosition());

		movementAdjustor.MaxRotationAdjustmentSpeed( ticket, 50000 );

		movementAdjustor.MaxLocationAdjustmentSpeed( ticket, 50000 );
		
		movementAdjustor.AdjustLocationVertically( ticket, true );

		movementAdjustor.ScaleAnimationLocationVertically( ticket, true );

		distVampSpecialDash = (((CMovingPhysicalAgentComponent)actor.GetMovingAgentComponent()).GetCapsuleRadius() 
		+ ((CMovingPhysicalAgentComponent)thePlayer.GetMovingAgentComponent()).GetCapsuleRadius()) * 0.5;

		if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}
								
		if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
		
		RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

		dodge_timer_attack_actual();

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}
				movementAdjustor.SlideTowards( ticket, actor, distVampSpecialDash, distVampSpecialDash );
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

					movementAdjustor.SlideTowards( ticket, actor, distVampSpecialDash, distVampSpecialDash );
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

					movementAdjustor.SlideTo( ticket, ACSPlayerFixZAxis(thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 5) );
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
		}

	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function bruxa_blood_suck_end_actual() 
	{ 
		thePlayer.SetVisibility( true );	 

		thePlayer.DestroyEffect('mind_control');	

		thePlayer.UnblockAction( EIAB_Crossbow, 			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_ThrowBomb, 			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_CallHorse,			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_Signs, 				'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_DrawWeapon, 			'ACS_Bruxa_Bite'); 
		thePlayer.UnblockAction( EIAB_FastTravel, 			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_Fists, 				'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_InteractionAction, 	'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_UsableItem,			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_SwordAttack,			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_Jump,					'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_LightAttacks,			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_HeavyAttacks,			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_SpecialAttackLight,	'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_SpecialAttackHeavy,	'ACS_Bruxa_Bite');
		//thePlayer.UnblockAction( EIAB_Dodge,				'ACS_Bruxa_Bite');
		//thePlayer.UnblockAction( EIAB_Roll,					'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_Parry,				'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_MeditationWaiting,	'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_OpenMeditation,		'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_RadialMenu,			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_Interactions, 		'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_QuickSlots, 			'ACS_Bruxa_Bite');

		RemoveTimer('ACS_HijackMoveForward');

		ACS_Hijack_Marker_Destroy();

		ACS_Hijack_Marker_2_Destroy();

		thePlayer.BreakAttachment();
		
		RemoveTimer('ACS_bruxa_blood_suck');	
		RemoveTimer('ACS_bruxa_blood_suck_repeat');
		RemoveTimer('ACS_blood_suck_victim_paralyze');

		thePlayer.StopEffect('blood_drain'); 
		thePlayer.StopEffect('blood_start');	 
		thePlayer.SetImmortalityMode( AIM_None, AIC_Combat ); 

		thePlayer.SetCanPlayHitAnim(true); 

		thePlayer.EnableCharacterCollisions(true); 
		thePlayer.SetIsCurrentlyDodging(false);
		thePlayer.EnableCollisions(true);

		if (thePlayer.HasTag('ACS_Hijack_Flight_End'))
		{
			thePlayer.RemoveTag('ACS_Hijack_Flight_End');
		}

		actors.Clear();
		
		actors = GetActorsInRange(thePlayer, 10, 10, 'bruxa_bite_victim');

		//theGame.GetActorsByTag( 'bruxa_bite_victim', actors );

		//actors = thePlayer.GetNPCsAndPlayersInRange( 10, 10);

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				npc = (CNewNPC)actors[i];

				NPCanimatedComponent = (CAnimatedComponent)npc.GetComponentByClassName( 'CAnimatedComponent' );	

				actor = actors[i];

				if (npc.HasTag('bruxa_bite_victim'))
				{
					npc.SetImmortalityMode( AIM_None, AIC_Combat ); 

					npc.StopEffect('demonic_possession');

					thePlayer.PlayEffectSingle('dive_shape');
					thePlayer.StopEffect('dive_shape');

					//thePlayer.PlayEffectSingle('dive_smoke');
					//thePlayer.StopEffect('dive_smoke');

					npc.RemoveBuff(EET_Confusion);

					npc.RemoveBuff(EET_Confusion);

					npc.RemoveBuff(EET_LongStagger);

					npc.RemoveBuff(EET_Slowdown);

					actor.RemoveBuffImmunity_AllNegative();

					actor.RemoveBuffImmunity_AllCritical();

					npc.RemoveBuffImmunity_AllNegative();

					npc.RemoveBuffImmunity_AllCritical();

					((CNewNPC)npc).SetUnstoppable(false);

					//NPCanimatedComponent.PlaySlotAnimationAsync ( '', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0));

					npc.RemoveTag('Hijack_Marker_Added');

					npc.RemoveTag('ACS_demonic_possession');

					npc.RemoveTag('bruxa_bite_victim');
				}
			}
		}
		
		jump_attack_reset(); 

		thePlayer.RemoveTag('blood_sucking');
	}
	
	function jump_attack_reset()
	{	
		MovementAdjust();

		movementAdjustor.AdjustmentDuration( ticket, 1 );
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			
			movementAdjustor.SlideTowards( ticket, actor, distJump, distJump );
			
			//AddTimer('ACS_collision_delay', 0.1  , false);
			
			if (thePlayer.HasTag('vampire_claws_equipped'))
			{
				thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");

				thePlayer.SoundEvent("monster_dettlaff_monster_construct_whoosh_claws_large");

				PlayerPlayAnimation( 'bruxa_jump_up_attack_ACS');
			}
			else
			{
				thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");

				PlayerPlayAnimation( 'bruxa_jump_up_stop_ACS');
			}
		}
		else
		{	
			if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			if (thePlayer.HasTag('vampire_claws_equipped'))
			{
				thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");

				thePlayer.SoundEvent("monster_dettlaff_monster_construct_whoosh_claws_large");

				PlayerPlayAnimation( 'bruxa_jump_up_attack_ACS');
			}
			else
			{
				thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");

				PlayerPlayAnimation( 'bruxa_jump_up_stop_ACS');
			}
			
			//AddTimer('ACS_collision_delay', 0.1  , false);
		}
	}
	
	function bruxa_blood_suck_end_no_jump_actual() 
	{ 
		thePlayer.SetVisibility( true ); 

		thePlayer.DestroyEffect('mind_control');	

		thePlayer.UnblockAction( EIAB_Crossbow, 			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_ThrowBomb, 			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_CallHorse,			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_Signs, 				'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_DrawWeapon, 			'ACS_Bruxa_Bite'); 
		thePlayer.UnblockAction( EIAB_FastTravel, 			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_Fists, 				'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_InteractionAction, 	'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_UsableItem,			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_SwordAttack,			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_Jump,					'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_LightAttacks,			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_HeavyAttacks,			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_SpecialAttackLight,	'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_SpecialAttackHeavy,	'ACS_Bruxa_Bite');
		//thePlayer.UnblockAction( EIAB_Dodge,				'ACS_Bruxa_Bite');
		//thePlayer.UnblockAction( EIAB_Roll,					'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_Parry,				'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_MeditationWaiting,	'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_OpenMeditation,		'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_RadialMenu,			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_Interactions, 		'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_QuickSlots, 			'ACS_Bruxa_Bite');

		RemoveTimer('ACS_HijackMoveForward');

		ACS_Hijack_Marker_Destroy();

		ACS_Hijack_Marker_2_Destroy();

		thePlayer.BreakAttachment(); 
		
		RemoveTimer('ACS_bruxa_blood_suck');	
		RemoveTimer('ACS_bruxa_blood_suck_repeat');	 
		RemoveTimer('ACS_blood_suck_victim_paralyze'); 
		
		thePlayer.StopEffect('blood_drain'); 
		thePlayer.StopEffect('blood_start');
		thePlayer.SetImmortalityMode( AIM_None, AIC_Combat ); 

		thePlayer.SetCanPlayHitAnim(true); 
		
		//AddTimer('ACS_collision_delay', 0.1 , false);
		thePlayer.EnableCharacterCollisions(true); 
		thePlayer.SetIsCurrentlyDodging(false);
		thePlayer.EnableCollisions(true);

		if (thePlayer.HasTag('ACS_Hijack_Flight_End'))
		{
			thePlayer.RemoveTag('ACS_Hijack_Flight_End');
		}

		actors.Clear();
		
		actors = GetActorsInRange(thePlayer, 10, 10, 'bruxa_bite_victim');

		//actors = thePlayer.GetNPCsAndPlayersInRange( 10, 10);

		//theGame.GetActorsByTag( 'bruxa_bite_victim', actors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				npc = (CNewNPC)actors[i];

				NPCanimatedComponent = (CAnimatedComponent)npc.GetComponentByClassName( 'CAnimatedComponent' );	

				actor = actors[i];

				if (npc.HasTag('bruxa_bite_victim'))
				{
					npc.SetImmortalityMode( AIM_None, AIC_Combat ); 

					npc.StopEffect('demonic_possession');

					thePlayer.PlayEffectSingle('dive_shape');
					thePlayer.StopEffect('dive_shape');

					//thePlayer.PlayEffectSingle('dive_smoke');
					//thePlayer.StopEffect('dive_smoke');

					npc.RemoveBuff(EET_Confusion);

					npc.RemoveBuff(EET_Confusion);

					npc.RemoveBuff(EET_LongStagger);

					npc.RemoveBuff(EET_Slowdown);

					actor.RemoveBuffImmunity_AllNegative();

					actor.RemoveBuffImmunity_AllCritical();

					npc.RemoveBuffImmunity_AllNegative();

					npc.RemoveBuffImmunity_AllCritical();

					((CNewNPC)npc).SetUnstoppable(false);

					//NPCanimatedComponent.PlaySlotAnimationAsync ( '', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0));

					npc.RemoveTag('Hijack_Marker_Added');

					npc.RemoveTag('ACS_demonic_possession');

					npc.RemoveTag('bruxa_bite_victim');
				}
			}
		}

		thePlayer.RemoveTag('blood_sucking'); 
	}

	function ACS_SCAAR_14_Installed(){return;}

	function HijackMoveForwardActual()
	{
		//MovementAdjust();

		actors.Clear();

		theGame.GetActorsByTag( 'bruxa_bite_victim', actors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				npc = (CNewNPC)actors[i];
					
				NPCanimatedComponent = (CAnimatedComponent)npc.GetComponentByClassName( 'CAnimatedComponent' );	

				victimMovementAdjustor = npc.GetMovingAgentComponent().GetMovementAdjustor();
		
				victimMovementAdjustor.CancelAll();
				
				victimTicket = victimMovementAdjustor.CreateNewRequest( 'ACS_Victim_Movement_Adjust' );

				((CNewNPC)npc).SetUnstoppable(true);

				npc.RemoveBuffImmunity_AllNegative();

				npc.RemoveBuffImmunity_AllCritical();

				if (npc.HasAbility('mon_garkain'))
				{
					NPCanimatedComponent.PlaySlotAnimationAsync ( 'monster_werewolf_run_f', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 1.0f) );

					victimMovementAdjustor.AdjustmentDuration( victimTicket, 0.5 );
					victimMovementAdjustor.MaxLocationAdjustmentSpeed( victimTicket, 50000 );
				}
				else if (npc.HasAbility('mon_sharley_base'))
				{
					NPCanimatedComponent.PlaySlotAnimationAsync ( 'roll_forward', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 1.0f));

					victimMovementAdjustor.AdjustmentDuration( victimTicket, 0.5 );
					victimMovementAdjustor.MaxLocationAdjustmentSpeed( victimTicket, 50000 );
				}
				else if (npc.HasAbility('mon_bies_base'))
				{
					NPCanimatedComponent.PlaySlotAnimationAsync ( 'monster_bies_charge', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 1.0f));

					victimMovementAdjustor.AdjustmentDuration( victimTicket, 0.5 );
					victimMovementAdjustor.MaxLocationAdjustmentSpeed( victimTicket, 0.1 );
				}
				else if (npc.HasAbility('mon_golem_base'))
				{
					NPCanimatedComponent.PlaySlotAnimationAsync ( 'monster_elemental_attack_charge', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 1.0f));

					victimMovementAdjustor.AdjustmentDuration( victimTicket, 0.5 );
					victimMovementAdjustor.MaxLocationAdjustmentSpeed( victimTicket, 0.1 );
				}
				else if (npc.HasAbility('mon_endriaga_base')
				|| npc.HasAbility('mon_arachas_base')
				|| npc.HasAbility('mon_kikimore_base')
				|| npc.HasAbility('mon_black_spider_base')
				|| npc.HasAbility('mon_black_spider_ep2_base'))
				{
					NPCanimatedComponent.PlaySlotAnimationAsync ( 'monster_arachas_attack_special_jump', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 1.0f));

					victimMovementAdjustor.AdjustmentDuration( victimTicket, 0.5 );
					victimMovementAdjustor.MaxLocationAdjustmentSpeed( victimTicket, 0.1 );
				}
				else if (
				npc.HasAbility('mon_ice_giant')
				|| npc.HasAbility('mon_cyclops')
				|| npc.HasAbility('mon_knight_giant')
				|| npc.HasAbility('mon_cloud_giant')
				)
				{
					NPCanimatedComponent.PlaySlotAnimationAsync ( 'giant_combat_walk', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 1.0f));

					victimMovementAdjustor.AdjustmentDuration( victimTicket, 0.5 );
					victimMovementAdjustor.MaxLocationAdjustmentSpeed( victimTicket, 0.1 );
				}
				else if (npc.HasAbility('mon_troll_base'))
				{
					NPCanimatedComponent.PlaySlotAnimationAsync ( 'monster_cave_troll_run', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 1.0f));

					victimMovementAdjustor.AdjustmentDuration( victimTicket, 0.5 );
					victimMovementAdjustor.MaxLocationAdjustmentSpeed( victimTicket, 0.1 );
				}
				else
				{
					victimMovementAdjustor.AdjustmentDuration( victimTicket, 0.15 );
				}

				victimMovementAdjustor.ShouldStartAt(victimTicket, npc.GetWorldPosition());
				victimMovementAdjustor.MaxRotationAdjustmentSpeed( victimTicket, 50000 );
				victimMovementAdjustor.AdjustLocationVertically( victimTicket, true );
				victimMovementAdjustor.ScaleAnimationLocationVertically( victimTicket, true );

				victimMovementAdjustor.RotateTo( victimTicket, VecHeading( theCamera.GetCameraDirection() ) );

				//if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

				npc.ClearAnimationSpeedMultipliers();

				if (npc.HasAbility('mon_gryphon_base')
				|| npc.HasAbility('mon_siren_base')
				|| npc.HasAbility('mon_wyvern_base')
				|| npc.HasAbility('mon_harpy_base')
				|| npc.HasAbility('mon_draco_base')
				|| npc.HasAbility('mon_basilisk')
				)
				{
					if (theInput.GetActionValue('GI_AxisLeftX') == 0)
					{
						if (theInput.GetActionValue('Sprint') != 0 )
						{
							//victimMovementAdjustor.SlideTo( victimTicket, theCamera.GetCameraPosition() + theCamera.GetCameraUp() * -1.5 + theCamera.GetCameraForward() * 5 + theCamera.GetCameraDirection() * 5 );
							victimMovementAdjustor.SlideTo( victimTicket, npc.GetWorldPosition() + npc.GetWorldUp() * 1.5 + npc.GetWorldForward() * 5 );
						}
						else
						{
							//victimMovementAdjustor.SlideTo( victimTicket, theCamera.GetCameraPosition() + theCamera.GetCameraUp() * -1.5 + theCamera.GetCameraForward() * 1.5 + theCamera.GetCameraDirection() * 1.5 );
							victimMovementAdjustor.SlideTo( victimTicket, npc.GetWorldPosition() + npc.GetWorldUp() * 0.25 + npc.GetWorldForward() * 2.5 );
						}
					}
					else if (theInput.GetActionValue('GI_AxisLeftX') != 0)
					{
						if (theInput.GetActionValue('Sprint') != 0 )
						{
							//victimMovementAdjustor.SlideTo( victimTicket, theCamera.GetCameraPosition() + theCamera.GetCameraUp() * -4 + theCamera.GetCameraForward() * 5 + theCamera.GetCameraDirection() * 5 );
							victimMovementAdjustor.SlideTo( victimTicket, npc.GetWorldPosition() + npc.GetWorldUp() * -2.5 + npc.GetWorldForward() * 5 );
						}
						else
						{
							//victimMovementAdjustor.SlideTo( victimTicket, theCamera.GetCameraPosition() + theCamera.GetCameraUp() * -4 + theCamera.GetCameraForward() * 4 + theCamera.GetCameraDirection() * 1.5 );
							victimMovementAdjustor.SlideTo( victimTicket, npc.GetWorldPosition() + npc.GetWorldUp() * -1.5 + npc.GetWorldForward() * 2.5 );
						}
					}
				}
				else
				{
					if (theInput.GetActionValue('Sprint') != 0 )
					{
						//victimMovementAdjustor.SlideTo( victimTicket, theCamera.GetCameraPosition() + theCamera.GetCameraUp() * -1.5 + theCamera.GetCameraForward() * 5 + theCamera.GetCameraDirection() * 5 );
						victimMovementAdjustor.SlideTo( victimTicket, npc.GetWorldPosition() + npc.GetWorldForward() * 10 );
					}
					else
					{
						//victimMovementAdjustor.SlideTo( victimTicket, theCamera.GetCameraPosition() + theCamera.GetCameraUp() * -1.5 + theCamera.GetCameraForward() * 1.5 + theCamera.GetCameraDirection() * 1.5 );
						victimMovementAdjustor.SlideTo( victimTicket, npc.GetWorldPosition() + npc.GetWorldForward() * 5 );
					}
				}
			
			}
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function ACS_Restore_Darkness()
	{
		if (ACS_IsNight_Adjustable())
		{
			if (FactsQuerySum("ACS_Darkness_Upon_Us") > 0)
			{
				if (ACS_SpiralSkyStars_Enabled())
				{
					GetACSSpiralSkyStars().PlayEffectSingle('stars');
				}

				if (ACS_SpiralSkyPlanets_Enabled())
				{
					GetACSSpiralSky().PlayEffectSingle('spiral_sky_original_second_moon');
				}
				
				Activate_Restored_Darkness();
			}
		}
	}

	private var darknessEnvironment 							: CEnvironmentDefinition;	

	function Activate_Restored_Darkness()
	{
		if (DarknessIntensityCalculation() <= 0)
		{
			return;
		}

		if ((theGame.GetWorld().GetDepotPath() == "dlc\bob\data\levels\bob\bob.w2w"))
		{
			if (ACS_Darkness_HBAO_Enabled())
			{
				darknessEnvironment = (CEnvironmentDefinition)LoadResource(

				"dlc\dlc_acs\data\env\darkness_upon_us_bob_alt.env"

				, true);
			}
			else
			{
				darknessEnvironment = (CEnvironmentDefinition)LoadResource(

				"dlc\dlc_acs\data\env\darkness_upon_us_bob.env"

				, true);
			}
		}
		else
		{
			if (ACS_Darkness_HBAO_Enabled())
			{
				darknessEnvironment = (CEnvironmentDefinition)LoadResource(

				"dlc\dlc_acs\data\env\darkness_upon_us_alt.env"

				, true);
			}
			else
			{
				darknessEnvironment = (CEnvironmentDefinition)LoadResource(

				"dlc\dlc_acs\data\env\darkness_upon_us.env"

				, true);
			}
		}

		darknessEnvID = ActivateEnvironmentDefinition( darknessEnvironment, 1001, DarknessIntensityCalculation(), 0.25 );
		
		theGame.SetEnvironmentID(darknessEnvID);
	}

	function ACS_Darkness()
	{
		if (ACS_IsNight_Adjustable())
		{
			if ( FactsQuerySum("ACS_Darkness_Upon_Us") <= 0 )
			{
				Activate_Darkness();

				if (ACS_SpiralSkyStars_Enabled())
				{
					GetACSSpiralSkyStars().PlayEffectSingle('stars');
				}

				if (ACS_SpiralSkyPlanets_Enabled())
				{
					GetACSSpiralSky().PlayEffectSingle('spiral_sky_original_second_moon');
				}

				FactsAdd("ACS_Darkness_Upon_Us", 1, -1);
			}
		}
		else
		{
			if (FactsQuerySum("ACS_Darkness_Upon_Us") > 0)
			{
				Deactivate_Darkness();

				GetACSSpiralSkyStars().StopEffect('stars');

				GetACSSpiralSky().DestroyEffect('spiral_sky_original_second_moon');

				FactsRemove("ACS_Darkness_Upon_Us");
			}
		}

		ACS_Darkness_Menu_Switch();
	}

	function ACS_Darkness_Menu_Switch()
	{
		if (theGame.IsPaused())
		{
			if ( FactsQuerySum("ACS_Darkness_Upon_Us_Menu_Paused") <= 0 )
			{
				Deactivate_Darkness_Quick();

				FactsAdd("ACS_Darkness_Upon_Us_Menu_Paused", 1, -1);
			}
		}
		else
		{
			if ( FactsQuerySum("ACS_Darkness_Upon_Us_Menu_Paused") > 0 )
			{
				if (ACS_IsNight_Adjustable())
				{
					Activate_Darkness_Quick();
				}

				FactsRemove("ACS_Darkness_Upon_Us_Menu_Paused");
			}
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	private var storedHoursPerMinuteForDarkness 					: float;	

	function Darkness_Blend_Time_Calculation() : float
	{
		storedHoursPerMinuteForDarkness = theGame.GetHoursPerMinute();

		if (storedHoursPerMinuteForDarkness == 0.25)
		{
			return ACS_Darkness_BlendTime();
		}
		else if (storedHoursPerMinuteForDarkness > 0.25)
		{
			if ((ACS_Darkness_BlendTime() - storedHoursPerMinuteForDarkness) <= 0)
			{
				return 0.5;
			}
			else
			{
				return ACS_Darkness_BlendTime() - storedHoursPerMinuteForDarkness;
			}
		}
		else if (storedHoursPerMinuteForDarkness < 0.25)
		{
			return ACS_Darkness_BlendTime() + storedHoursPerMinuteForDarkness;
		}

		return ACS_Darkness_BlendTime();
	}

	function Activate_Darkness_Quick()
	{
		if (DarknessIntensityCalculation() <= 0)
		{
			return;
		}

		if ((theGame.GetWorld().GetDepotPath() == "dlc\bob\data\levels\bob\bob.w2w"))
		{
			if (ACS_Darkness_HBAO_Enabled())
			{
				darknessEnvironment = (CEnvironmentDefinition)LoadResource(

				"dlc\dlc_acs\data\env\darkness_upon_us_bob_alt.env"

				, true);
			}
			else
			{
				darknessEnvironment = (CEnvironmentDefinition)LoadResource(

				"dlc\dlc_acs\data\env\darkness_upon_us_bob.env"

				, true);
			}
		}
		else
		{
			if (ACS_Darkness_HBAO_Enabled())
			{
				darknessEnvironment = (CEnvironmentDefinition)LoadResource(

				"dlc\dlc_acs\data\env\darkness_upon_us_alt.env"

				, true);
			}
			else
			{
				darknessEnvironment = (CEnvironmentDefinition)LoadResource(

				"dlc\dlc_acs\data\env\darkness_upon_us.env"

				, true);
			}
		}

		darknessEnvID = ActivateEnvironmentDefinition( darknessEnvironment, 1001, DarknessIntensityCalculation(), 0.5 );
		
		theGame.SetEnvironmentID(darknessEnvID);
	}

	function Activate_Darkness()
	{
		if (DarknessIntensityCalculation() <= 0)
		{
			return;
		}

		if ((theGame.GetWorld().GetDepotPath() == "dlc\bob\data\levels\bob\bob.w2w"))
		{
			if (ACS_Darkness_HBAO_Enabled())
			{
				darknessEnvironment = (CEnvironmentDefinition)LoadResource(

				"dlc\dlc_acs\data\env\darkness_upon_us_bob_alt.env"

				, true);
			}
			else
			{
				darknessEnvironment = (CEnvironmentDefinition)LoadResource(

				"dlc\dlc_acs\data\env\darkness_upon_us_bob.env"

				, true);
			}
		}
		else
		{
			if (ACS_Darkness_HBAO_Enabled())
			{
				darknessEnvironment = (CEnvironmentDefinition)LoadResource(

				"dlc\dlc_acs\data\env\darkness_upon_us_alt.env"

				, true);
			}
			else
			{
				darknessEnvironment = (CEnvironmentDefinition)LoadResource(

				"dlc\dlc_acs\data\env\darkness_upon_us.env"

				, true);
			}
		}

		darknessEnvID = ActivateEnvironmentDefinition( darknessEnvironment, 1001, DarknessIntensityCalculation(), Darkness_Blend_Time_Calculation() );
		
		theGame.SetEnvironmentID(darknessEnvID);
	}

	function DarknessIntensityCalculation() : float
	{
		/*
		if ((theGame.GetWorld().GetDepotPath() == "levels\skellige\skellige.w2w"))
		{
			if (ACS_Darkness_Intensity() + 0.0875 > 1)
			{
				return 1;
			}
			else
			{
				return ACS_Darkness_Intensity() + 0.0875;
			}
		}
		else
		{
			return ACS_Darkness_Intensity();
		}
		*/

		return ACS_Darkness_Intensity();
	}

	function Deactivate_Darkness()
	{
		DeactivateEnvironment(darknessEnvID, Darkness_Blend_Time_Calculation());
	}

	function Deactivate_Darkness_Quick()
	{
		DeactivateEnvironment(darknessEnvID, 0.5);
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	private var paintingEnvironment 							: CEnvironmentDefinition;	

	function Activate_Painting_Env()
	{
		paintingEnvironment = ( CEnvironmentDefinition )LoadResource( 
			
		//"dlc\ep1\data\environment\definitions\in_progress\q604\q604_unmasking.env"
		//"dlc\ep1\data\environment\definitions\in_progress\q604\q604_unmasking_dark.env"
		//"dlc\ep1\data\environment\definitions\in_progress\q604\q604_unmasking_shadow_more_details.env"

		//"environment\definitions\env_island_of_mist\env_island_of_mist.env"

		//"environment\definitions\env_island_of_mist\env_island_fog_1.env"

		//"environment\definitions\env_island_of_mist\env_island_of_mist_2.env"

		//"environment\definitions\env_island_of_mist\env_island_of_mist_dark.env"

		//"environment\definitions\env_island_of_mist\env_island_of_mist_dark_cutscen.env"

		//"dlc\bob\data\environment\definitions\quests\q704\temp\detlaff_arena_hemisphere.env"

		//"dlc\dlc_acs\data\env\q605_hell_red_blockout.env"

		//"environment\definitions\skellige\env_dense_fog_mq2041.env"

		//"dlc\ep1\data\environment\definitions\in_progress\q604\q604_blizzard.env"

		//"dlc\bob\data\environment\definitions\quests\q704\q704_snow2_cs.env"

		//"dlc\bob\data\environment\definitions\foggy\fog_tm.env"

		"dlc\dlc_acs\data\env\env_blizzard.env"
		
		, true );

		paintingEnvID = ActivateEnvironmentDefinition( paintingEnvironment, 1000, 0.5, 0.25f );

		theGame.SetEnvironmentID(paintingEnvID);
	}

	function Deactivate_Painting_Env()
	{
		DeactivateEnvironment(paintingEnvID, 0.25f);
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	private var env1, env2, env3, env4, env5, env6, env7, env8, env9, env10, env11 								: CEnvironmentDefinition;	

	private var env1ID, env2ID, env3ID, env4ID, env5ID, env6ID, env7ID, env8ID, env9ID, env10ID, env11ID 			: Int32;

	function Activate_Naglfar_Env()
	{
		env11 = ( CEnvironmentDefinition )LoadResource( 

		"dlc\dlc_acs\data\env\env_blizzard.env"
		
		, true );

		env11ID = ActivateEnvironmentDefinition( env11, 1000, 1, 2.25f );

		theGame.SetEnvironmentID(env11ID);
	}

	function Deactivate_Naglfar_Env()
	{
		DeactivateEnvironment(env11ID, 2.25f);
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	

	function Activate_Blizzard_Env()
	{
		env1 = ( CEnvironmentDefinition )LoadResource( 

		"dlc\dlc_acs\data\env\env_blizzard.env"
		
		, true );

		env1ID = ActivateEnvironmentDefinition( env1, 1000, 1, 2.25f );

		theGame.SetEnvironmentID(env1ID);
	}

	function Deactivate_Blizzard_Env()
	{
		DeactivateEnvironment(env1ID, 2.25f);
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function Activate_Dark_Clouds_Heavy_Rain_Env()
	{
		env2 = ( CEnvironmentDefinition )LoadResource( 

		"dlc\dlc_acs\data\env\env_dark_clouds_heavy_rain_color.env"
		
		, true );

		env2ID = ActivateEnvironmentDefinition( env2, 1000, 1, 2.25f );

		theGame.SetEnvironmentID(env2ID);
	}

	function Deactivate_Dark_Clouds_Heavy_Rain_Env()
	{
		DeactivateEnvironment(env2ID, 2.25f);
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function Activate_Dark_Clouds_Heavy_Rain_Snow_Env()
	{
		env3 = ( CEnvironmentDefinition )LoadResource( 

		"dlc\dlc_acs\data\env\env_dark_clouds_heavy_rain_color_snow.env"
		
		, true );

		env3ID = ActivateEnvironmentDefinition( env3, 1000, 1, 2.25f );

		theGame.SetEnvironmentID(env3ID);
	}

	function Deactivate_Dark_Clouds_Heavy_Rain_Snow_Env()
	{
		DeactivateEnvironment(env3ID, 2.25f);
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function Activate_Heavy_Fog_Env()
	{
		env4 = ( CEnvironmentDefinition )LoadResource( 

		"dlc\dlc_acs\data\env\env_fog_heavy.env"
		
		, true );

		env4ID = ActivateEnvironmentDefinition( env4, 1000, 1, 2.25f );

		theGame.SetEnvironmentID(env4ID);
	}

	function Deactivate_Heavy_Fog_Env()
	{
		DeactivateEnvironment(env4ID, 2.25f);
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function Activate_Dark_Clouds_Env()
	{
		env5 = ( CEnvironmentDefinition )LoadResource( 

		"dlc\dlc_acs\data\env\env_skellige_dark_clouds.env"
		
		, true );

		env5ID = ActivateEnvironmentDefinition( env5, 1000, 1, 2.25f );

		theGame.SetEnvironmentID(env5ID);
	}

	function Deactivate_Dark_Clouds_Env()
	{
		DeactivateEnvironment(env5ID, 2.25f);
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function Activate_Rain_Storm_Env()
	{
		env6 = ( CEnvironmentDefinition )LoadResource( 

		"dlc\dlc_acs\data\env\env_skellige_rain_storm.env"
		
		, true );

		env6ID = ActivateEnvironmentDefinition( env6, 1000, 1, 2.25f );

		theGame.SetEnvironmentID(env6ID);
	}

	function Deactivate_Rain_Storm_Env()
	{
		DeactivateEnvironment(env6ID, 2.25f);
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function Activate_Fog_Env()
	{
		env7 = ( CEnvironmentDefinition )LoadResource( 

		"dlc\dlc_acs\data\env\env_winter_fog.env"
		
		, true );

		env7ID = ActivateEnvironmentDefinition( env7, 1000, 1, 2.25f );

		theGame.SetEnvironmentID(env7ID);
	}

	function Deactivate_Fog_Env()
	{
		DeactivateEnvironment(env7ID, 2.25f);
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function Activate_Normal_Skellige_Env()
	{
		env8 = ( CEnvironmentDefinition )LoadResource( 

		"dlc\dlc_acs\data\env\env_winter_skellige.env"
		
		, true );

		env8ID = ActivateEnvironmentDefinition( env8, 1000, 1, 2.25f );

		theGame.SetEnvironmentID(env8ID);
	}

	function Deactivate_Normal_Skellige_Env()
	{
		DeactivateEnvironment(env8ID, 2.25f);
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	private var focusModeEnvironment 							: CEnvironmentDefinition;	

	function Activate_Focus_Mode_Env()
	{
		if (ACS_Focus_Mode_Intensity() <= 0)
		{
			return;
		}

		if ((theGame.GetWorld().GetDepotPath() == "dlc\bob\data\levels\bob\bob.w2w"))
		{
			if (ACS_Darkness_HBAO_Enabled())
			{
				focusModeEnvironment = (CEnvironmentDefinition)LoadResource(

				"dlc\dlc_acs\data\env\darkness_upon_us_bob_alt.env"

				, true);
			}
			else
			{
				focusModeEnvironment = (CEnvironmentDefinition)LoadResource(

				"dlc\dlc_acs\data\env\darkness_upon_us_bob.env"

				, true);
			}
		}
		else
		{
			if (ACS_Darkness_HBAO_Enabled())
			{
				focusModeEnvironment = (CEnvironmentDefinition)LoadResource(

				"dlc\dlc_acs\data\env\darkness_upon_us_alt.env"

				, true);
			}
			else
			{
				focusModeEnvironment = (CEnvironmentDefinition)LoadResource(

				"dlc\dlc_acs\data\env\darkness_upon_us.env"

				, true);
			}
		}

		focusModeEnvID = ActivateEnvironmentDefinition( focusModeEnvironment, 1000, ACS_Focus_Mode_Intensity(), 0.25f );

		theGame.SetEnvironmentID(focusModeEnvID);
	}

	function Deactivate_Focus_Mode_Env()
	{
		DeactivateEnvironment(focusModeEnvID, 0.25f);
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	private var bruxaCamoEnvironment 							: CEnvironmentDefinition;	

	function Activate_Bruxa_Camo_Env()
	{
		bruxaCamoEnvironment = (CEnvironmentDefinition)LoadResource(

		"dlc\dlc_acs\data\env\env_bies_hypnotize.env"

		, true);

		bruxaCamoEnvID = ActivateEnvironmentDefinition( bruxaCamoEnvironment, 1100, 1, 0.25f );

		theGame.SetEnvironmentID(bruxaCamoEnvID);
	}

	function Deactivate_Bruxa_Camo_Env()
	{
		DeactivateEnvironment(bruxaCamoEnvID, 0.25f);
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Wraith Mode

	function ACS_Wraith_Mode_Create_Savelock()
	{
		theGame.CreateNoSaveLock( "ACS_Wraith_Mode_State", ACS_Wraith_Mode_Savelock_ID, false, false );
	}

	function WraithModeActivate()
	{
		ACS_Wraith_Mode_Tutorial();

		ACS_Wraith_Mode_Create_Savelock();

		ACS_StaminaDrain(4);

		thePlayer.AddTag('in_wraith');

		thePlayer.SoundEvent("magic_yennefer_necromancy_loop_start");

		thePlayer.SoundEvent( "q704_regis_mistform_activates" );

		thePlayer.SoundEvent( "q704_regis_mistform_LP" );
		thePlayer.SoundEvent( "q704_regis_mistform_LP" );
		thePlayer.SoundEvent( "q704_regis_mistform_LP" );

		environment = (CEnvironmentDefinition)LoadResource(
			//"dlc\bob\data\fx\cutscenes\cs702_vision\vision_env.env"
			"dlc\dlc_acs\data\env\q605_hell_red_blockout.env"
			, true);
		envID = ActivateEnvironmentDefinition( environment, 1000, 1, 0.25f );
		theGame.SetEnvironmentID(envID);

		camera = (CCustomCamera)theCamera.GetTopmostCameraObject();

		camera.StopAnimation('camera_shake_loop_lvl1_1');

		theGame.GetGameCamera().StopAnimation( 'camera_shake_loop_lvl1_1' );

		camera.StopAnimation('camera_shake_loop_lvl1_5');

		theGame.GetGameCamera().StopAnimation( 'camera_shake_loop_lvl1_5' );

		thePlayer.BlockAction( EIAB_DrawWeapon, 		'ACS_Wraith'); 
		thePlayer.BlockAction( EIAB_Crossbow, 			'ACS_Wraith');
		thePlayer.BlockAction( EIAB_CallHorse,			'ACS_Wraith');
		thePlayer.BlockAction( EIAB_Signs, 				'ACS_Wraith');
		thePlayer.BlockAction( EIAB_FastTravel, 		'ACS_Wraith');
		thePlayer.BlockAction( EIAB_Fists, 				'ACS_Wraith');
		thePlayer.BlockAction( EIAB_InteractionAction, 	'ACS_Wraith');
		thePlayer.BlockAction( EIAB_UsableItem,			'ACS_Wraith');
		thePlayer.BlockAction( EIAB_ThrowBomb,			'ACS_Wraith');
		thePlayer.BlockAction( EIAB_SwordAttack,		'ACS_Wraith');
		thePlayer.BlockAction( EIAB_LightAttacks,		'ACS_Wraith');
		thePlayer.BlockAction( EIAB_HeavyAttacks,		'ACS_Wraith');
		thePlayer.BlockAction( EIAB_SpecialAttackLight,	'ACS_Wraith');
		thePlayer.BlockAction( EIAB_SpecialAttackHeavy,	'ACS_Wraith');
		//thePlayer.BlockAction( EIAB_Dodge,			'ACS_Wraith');
		//thePlayer.BlockAction( EIAB_Roll,				'ACS_Wraith');
		thePlayer.BlockAction( EIAB_MeditationWaiting,	'ACS_Wraith');
		thePlayer.BlockAction( EIAB_OpenMeditation,		'ACS_Wraith');
		thePlayer.BlockAction( EIAB_RadialMenu,			'ACS_Wraith');
		thePlayer.BlockAction( EIAB_Interactions, 		'ACS_Wraith');
		thePlayer.BlockAction( EIAB_QuickSlots, 		'ACS_Wraith');

		thePlayer.OnMeleeForceHolster( true );
		thePlayer.OnRangedForceHolster( true );
				
		thePlayer.StopAllEffects();

		//RemoveTimer('ACS_Embers_Timer');
			
		thePlayer.StopEffect('special_attack_short_fx');
		thePlayer.PlayEffectSingle('special_attack_short_fx');

		thePlayer.StopEffect('mist_fly_regis');
		thePlayer.PlayEffectSingle('mist_fly_regis');

		thePlayer.PlayEffectSingle( 'mist_regis' );

		thePlayer.StopEffect( 'mist_regis' );

		if (GetACSEredinSkirt())
		{
			GetACSEredinSkirt().StopEffect('special_attack_short_fx');
			GetACSEredinSkirt().PlayEffectSingle('special_attack_short_fx');
		}

		if (GetACSEredinCloak())
		{
			GetACSEredinCloak().StopEffect('special_attack_short_fx');
			GetACSEredinCloak().PlayEffectSingle('special_attack_short_fx');
		}

		if (GetACSVGXEredinCloak())
		{
			GetACSVGXEredinCloak().StopEffect('special_attack_short_fx');
			GetACSVGXEredinCloak().PlayEffectSingle('special_attack_short_fx');
		}

		if (GetACSImlerithSkirt())
		{
			GetACSImlerithSkirt().StopEffect('special_attack_short_fx');
			GetACSImlerithSkirt().PlayEffectSingle('special_attack_short_fx');
		}

		if (ACS_Armor_Equipped_Check())
		{
			thePlayer.PlayEffectSingle('shadows_form');
		}

		thePlayer.EnableCollisions(false);
		thePlayer.EnableCharacterCollisions(false);
										
		AddTimer('ACS_wraith', 0.000000000000000001f, true);
	}

	function WraithModeDeactivate()
	{
		if (thePlayer.HasTag('in_wraith'))
		{
			theGame.ReleaseNoSaveLock( ACS_Wraith_Mode_Savelock_ID );

			if (thePlayer.HasTag('ACS_Wraith_Mode_Flight_Anim'))
			{
				thePlayer.RemoveTag('ACS_Wraith_Mode_Flight_Anim');
			}

			((CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent')).UnfreezePoseFadeOut(0.1);

			((CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent')).UnfreezePose();

			thePlayer.EnableCollisions(true);

			thePlayer.SoundEvent("magic_yennefer_necromancy_loop_stop");

			thePlayer.SoundEvent("q704_regis_mistform_LP_stop");
			thePlayer.SoundEvent("q704_regis_mistform_LP_stop");
			thePlayer.SoundEvent("q704_regis_mistform_LP_stop");

			DeactivateEnvironment(envID, 1);

			RemoveTimer('ACS_wraith');

			thePlayer.StopEffect('special_attack_short_fx');

			thePlayer.StopEffect('wraith_fx');

			thePlayer.StopEffect('mist_fly_regis');

			thePlayer.PlayEffectSingle( 'mist_regis' );

			thePlayer.StopEffect( 'mist_regis' );

			if (ACS_Armor_Equipped_Check())
			{
				thePlayer.StopEffect('shadows_form');
			}

			if (GetACSEredinSkirt())
			{
				GetACSEredinSkirt().StopEffect('special_attack_short_fx');
			}

			if (GetACSEredinCloak())
			{
				GetACSEredinCloak().StopEffect('special_attack_short_fx');
			}

			if (GetACSVGXEredinCloak())
			{
				GetACSVGXEredinCloak().StopEffect('special_attack_short_fx');
			}

			if (GetACSImlerithSkirt())
			{
				GetACSImlerithSkirt().StopEffect('special_attack_short_fx');
			}

			thePlayer.UnblockAction( EIAB_DrawWeapon, 			'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_Crossbow, 			'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_CallHorse,			'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_Signs, 				'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_FastTravel, 			'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_Fists, 				'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_InteractionAction, 	'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_UsableItem,			'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_ThrowBomb,			'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_SwordAttack,			'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_LightAttacks,			'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_HeavyAttacks,			'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_SpecialAttackLight,	'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_SpecialAttackHeavy,	'ACS_Wraith');
			//thePlayer.UnblockAction( EIAB_Dodge,				'ACS_Wraith');
			//thePlayer.UnblockAction( EIAB_Roll,				'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_MeditationWaiting,	'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_OpenMeditation,		'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_RadialMenu,			'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_Interactions, 		'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_QuickSlots, 			'ACS_Wraith');

			thePlayer.RemoveTag('in_wraith');

			if (ACS_Zireael_Check())
			{
				if (!thePlayer.IsEffectActive('fury_403_ciri', false))
				{
					thePlayer.PlayEffectSingle( 'fury_403_ciri' );
				}

				if (!thePlayer.IsEffectActive('fury_ciri', false))
				{
					thePlayer.PlayEffectSingle( 'fury_ciri' );
				}

				if (!thePlayer.IsEffectActive('acs_fury_effect', false))
				{
					thePlayer.PlayEffectSingle( 'acs_fury_effect' );
				}
			}
		}
	}

	// Bruxa Dash
	
	function BruxaDash_Combat()
	{
		if( CiriCheck()
		&& HitAnimCheck()
		&& FinisherCheck() 
		&& CrossbowCheck()
		&& ACS_BuffCheck()
		&& thePlayer.IsActionAllowed(EIAB_Movement)
		&& (thePlayer.IsInCombat() || !ACS_CombatToExplorationCheck())
		)
		{
			if (ACS_can_bruxa_dash())
			{
				RemoveTimer('BruxaDashAnimationCancel');

				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				&& !thePlayer.HasTag('in_wraith')
				)
				{	
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_bruxa_dash_cooldown();

					ACS_StaminaDrain(4);

					DeactivateThings_BruxaDash();

					ACS_ThingsThatShouldBeRemoved_NoWeaponRespawn();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					thePlayer.SetIsCurrentlyDodging(true);

					thePlayer.EnableCharacterCollisions(false); 

					WraithModeDeactivate();

					if (!thePlayer.HasTag('ACS_Camo_Active')
					&& !thePlayer.HasTag('blood_sucking'))
					{
						thePlayer.PlayEffectSingle( 'bruxa_dash_trails_backup' );
						thePlayer.StopEffect( 'bruxa_dash_trails_backup' );

						thePlayer.DestroyEffect('shadowdash_short');
						thePlayer.PlayEffectSingle( 'shadowdash_short' );
						thePlayer.StopEffect( 'shadowdash_short' );
					}

					if (thePlayer.HasTag('blood_sucking'))
					{
						bruxa_blood_suck_end_no_jump_actual();
					}
					
					dodge_timer_actual();
						
					thePlayer.BreakAttachment();		

					ACS_ExplorationDelayHack();

					DeactivateThings_BruxaDash();

					if (ACS_Bruxa_Camo_Trail())
					{
						ACS_Bruxa_Camo_Trail().StopEffect('smoke');
						ACS_Bruxa_Camo_Trail().PlayEffectSingle('smoke');
					}	

					bruxa_dash();			
				}
			}
		}
	}

	function JumpAttackCombat()
	{
		if (theInput.GetActionValue('Sprint') == 0 )
		{
			WraithModeDeactivate();

			if (ACS_Enabled())
			{
				RemoveTimer('RollDelay');
				
				if (thePlayer.HasTag('blood_sucking'))
				{
					bruxa_blood_suck_end_no_jump_actual();
				}

				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{									 
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					thePlayer.DrainStamina( ESAT_FixedValue,  thePlayer.GetStatMax( BCS_Stamina ) * 0.5, 1 );

					if (thePlayer.HasTag('aard_sword_equipped')
					|| thePlayer.HasTag('vampire_claws_equipped'))
					{
						if (!thePlayer.HasTag('ACS_Camo_Active')
						&& !thePlayer.HasTag('blood_sucking'))
						{
							if (!ACS_HideVampireClaws_Enabled())
							{
								if (thePlayer.HasTag('aard_sword_equipped')
								|| thePlayer.HasTag('vampire_claws_equipped')
								)
								{
									if (!ACS_HideVampireClaws_Enabled())
									{
										thePlayer.PlayEffectSingle('claws_effect');
										thePlayer.StopEffect('claws_effect');
									}
								}

								thePlayer.PlayEffectSingle('shadowdash_shockwave');
								thePlayer.StopEffect('shadowdash_shockwave');
							}

							//thePlayer.PlayEffectSingle('trap_attack_smoke');
							//thePlayer.StopEffect('trap_attack_smoke');
						}
					}

					if (!thePlayer.HasTag('ACS_HideWeaponOnDodge'))
					{
						thePlayer.AddTag('ACS_HideWeaponOnDodge');
					}

					thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
					thePlayer.SetCanPlayHitAnim(false); 
					thePlayer.EnableCharacterCollisions(false); 
					thePlayer.AddBuffImmunity_AllNegative('acs_dodge', true); 
					thePlayer.SetIsCurrentlyDodging(true);

					if (!thePlayer.HasTag('aard_sword_equipped'))
					{
						ACS_Weapon_Invisible();
					}

					RemoveTimer('ACS_jump_attack_reveal_timer');

					AddTimer('ACS_jump_attack_reveal_timer', 0.5, false);
										
					if (thePlayer.IsInAir())
					{	
						air_jump_attack();
					}
					else
					{
						jump_attack();
					}
				}
			}
			else
			{
				if (thePlayer.HasTag('blood_sucking'))
				{
					bruxa_blood_suck_end_no_jump_actual();
				}

				ACS_BruxaDodgeSlideBackInit();
			}
		}
	}

	function ACS_BruxaDodgeSlideBackInit()
	{
		var vBruxaDodgeSlideBack : cBruxaDodgeSlideBack;

		if (ACS_New_Replacers_Female_Active() || thePlayer.IsCiri())
		{
			GetWitcherPlayer().EvadePressed(EBAT_Dodge);
			GetACSWatcher().ACS_StaminaDrain(4);
			return;
		}

		vBruxaDodgeSlideBack = new cBruxaDodgeSlideBack in this;
		
		if ( ACS_Enabled() )
		{
			if (!GetWitcherPlayer().IsCiri()
			&& !GetWitcherPlayer().IsPerformingFinisher()
			&& !GetWitcherPlayer().HasTag('in_wraith')
			&& !GetWitcherPlayer().HasTag('blood_sucking')
			&& ACS_BuffCheck()
			&& GetWitcherPlayer().IsActionAllowed(EIAB_Dodge)
			)
			{
				vBruxaDodgeSlideBack.BruxaDodgeSlideBack_Engage();
			}
		}
	}

	var vWildHuntBlink : cWildHuntBlink;

	function ACS_WildHuntBlinkInit()
	{
		if (ACS_New_Replacers_Female_Active() || thePlayer.IsCiri())
		{
			GetWitcherPlayer().EvadePressed(EBAT_Roll);
			GetACSWatcher().ACS_StaminaDrain(4);
			return;
		}

		vWildHuntBlink = new cWildHuntBlink in this;
		
		if ( ACS_Enabled()
		&& !GetWitcherPlayer().IsCiri()
		&& !GetWitcherPlayer().IsPerformingFinisher()
		&& !GetWitcherPlayer().HasTag('in_wraith')
		&& !GetWitcherPlayer().HasTag('blood_sucking')
		&& ACS_BuffCheck()
		&& GetWitcherPlayer().IsActionAllowed(EIAB_Roll)
		)
		{
			vWildHuntBlink.WildHuntBlink_Engage();
		}
	}

	function Jump_Attack_Reveal_Actual()
	{	 
		thePlayer.SetImmortalityMode( AIM_None, AIC_Combat ); 
		thePlayer.SetCanPlayHitAnim(true); 
		thePlayer.EnableCharacterCollisions(true); 
		thePlayer.RemoveBuffImmunity_AllNegative('acs_dodge'); 
		thePlayer.SetIsCurrentlyDodging(false);

		if ( thePlayer.HasTag('ACS_HideWeaponOnDodge') 
		//&& !thePlayer.HasTag('blood_sucking')
		)
		{
			if (!thePlayer.HasTag('aard_sword_equipped'))
			{
				ACS_Weapon_Respawn();
			}
			
			thePlayer.RemoveTag('ACS_HideWeaponOnDodge');

			thePlayer.RemoveTag('ACS_HideWeaponOnDodge_Claw_Effect');
		}
	}

	function BruxaDash_NEW_For_Sprint()
	{
		if (CiriCheck()
		&& HitAnimCheck()
		&& FinisherCheck() 
		&& CrossbowCheck()
		&& ACS_BuffCheck()
		&& thePlayer.IsActionAllowed(EIAB_Movement)
		)
		{
			DeactivateThings_BruxaDash();

			ACS_ThingsThatShouldBeRemoved_NoWeaponRespawn();

			if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

			if( BruxaDashCallTime + DOUBLE_TAP_WINDOW >= theGame.GetEngineTimeAsSeconds() )
			{
				BruxaDashDoubleTap = true;
			}
			else
			{
				BruxaDashDoubleTap = false;	
			}
			
			if( BruxaDashDoubleTap )
			{
				if (ACS_BruxaDash_Enabled() 
				&& !theGame.IsFocusModeActive()
				&& ACS_BruxaDashInput() == 1
				&& ACS_BruxaDashSprintOrW() == 1
				&& ACS_can_bruxa_dash())
				{
					RemoveTimer('BruxaDashAnimationCancel');

					if ( ACS_StaminaBlockAction_Enabled() 
					&& StaminaCheck()
					&& !thePlayer.HasTag('in_wraith')
					)
					{	
						if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
					}
					else
					{
						ACS_StaminaDrain(4);

						thePlayer.SetIsCurrentlyDodging(true);

						thePlayer.EnableCharacterCollisions(false); 

						ACS_refresh_bruxa_dash_cooldown();

						WraithModeDeactivate();

						if (!thePlayer.HasTag('ACS_Camo_Active')
						&& !thePlayer.HasTag('blood_sucking'))
						{
							thePlayer.PlayEffectSingle( 'bruxa_dash_trails_backup' );
							thePlayer.StopEffect( 'bruxa_dash_trails_backup' );

							thePlayer.DestroyEffect('shadowdash_short');
							thePlayer.PlayEffectSingle( 'shadowdash_short' );
							thePlayer.StopEffect( 'shadowdash_short' );
						}

						if (thePlayer.HasTag('blood_sucking'))
						{
							bruxa_blood_suck_end_no_jump_actual();
						}
						
						dodge_timer_actual();
							
						thePlayer.BreakAttachment();		

						bruxa_dash();						
					}
				}
			}
			else 
			{	
				if ( thePlayer.HasTag('vampire_claws_equipped') )
				{
					if ( !thePlayer.HasTag('ACS_Camo_Active') && !thePlayer.HasTag('in_wraith') && !thePlayer.HasTag('blood_sucking') )
					{
						thePlayer.PlayEffectSingle( 'magic_step_l_new' );
						thePlayer.StopEffect( 'magic_step_l_new' );	

						thePlayer.PlayEffectSingle( 'magic_step_r_new' );
						thePlayer.StopEffect( 'magic_step_r_new' );	

						thePlayer.PlayEffectSingle( 'bruxa_dash_trails' );
						thePlayer.StopEffect( 'bruxa_dash_trails' );

						thePlayer.DestroyEffect('shadowdash_short');
						thePlayer.PlayEffectSingle( 'shadowdash_short' );
						thePlayer.StopEffect( 'shadowdash_short' );
					}
				}

				if (ACS_BruxaDash_Enabled() 
				&& !theGame.IsFocusModeActive()
				&& ACS_BruxaDashInput() == 0
				&& ACS_BruxaDashSprintOrW() == 1
				&& ACS_can_bruxa_dash()
				)
				{
					RemoveTimer('BruxaDashAnimationCancel');

					if ( ACS_StaminaBlockAction_Enabled() 
					&& StaminaCheck()
					&& !thePlayer.HasTag('in_wraith')
					)
					{	
						if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
					}
					else
					{
						ACS_StaminaDrain(4);

						thePlayer.SetIsCurrentlyDodging(true);

						thePlayer.EnableCharacterCollisions(false); 

						ACS_refresh_bruxa_dash_cooldown();

						WraithModeDeactivate();

						if (!thePlayer.HasTag('ACS_Camo_Active')
						&& !thePlayer.HasTag('blood_sucking'))
						{
							thePlayer.PlayEffectSingle( 'bruxa_dash_trails_backup' );
							thePlayer.StopEffect( 'bruxa_dash_trails_backup' );
							
							thePlayer.DestroyEffect('shadowdash_short');
							thePlayer.PlayEffectSingle( 'shadowdash_short' );
							thePlayer.StopEffect( 'shadowdash_short' );
						}

						if (thePlayer.HasTag('blood_sucking'))
						{
							bruxa_blood_suck_end_no_jump_actual();
						}
						
						dodge_timer_actual();
							
						thePlayer.BreakAttachment();		

						bruxa_dash();						
					}
				}
			}

			DeactivateThings_BruxaDash();
			
			BruxaDashCallTime = theGame.GetEngineTimeAsSeconds();
		}
	}

	function BruxaDash_NEW()
	{
		if (CiriCheck()
		&& HitAnimCheck()
		&& FinisherCheck() 
		&& CrossbowCheck()
		&& ACS_BuffCheck()
		&& thePlayer.IsActionAllowed(EIAB_Movement)
		)
		{
			DeactivateThings_BruxaDash();

			ACS_ThingsThatShouldBeRemoved_NoWeaponRespawn();

			if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

			if( BruxaDashCallTime + DOUBLE_TAP_WINDOW >= theGame.GetEngineTimeAsSeconds() )
			{
				BruxaDashDoubleTap = true;
			}
			else
			{
				BruxaDashDoubleTap = false;	
			}
			
			if( BruxaDashDoubleTap )
			{
				if (ACS_BruxaDash_Enabled() 
				&& !theGame.IsFocusModeActive()
				&& ACS_BruxaDashInput() == 1
				&& ACS_BruxaDashSprintOrW() == 0
				&& ACS_can_bruxa_dash())
				{
					RemoveTimer('BruxaDashAnimationCancel');

					if ( ACS_StaminaBlockAction_Enabled() 
					&& StaminaCheck()
					&& !thePlayer.HasTag('in_wraith')
					)
					{	
						if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
					}
					else
					{
						ACS_StaminaDrain(4);

						thePlayer.SetIsCurrentlyDodging(true);

						thePlayer.EnableCharacterCollisions(false); 

						ACS_refresh_bruxa_dash_cooldown();

						WraithModeDeactivate();

						if (!thePlayer.HasTag('ACS_Camo_Active')
						&& !thePlayer.HasTag('blood_sucking'))
						{
							thePlayer.PlayEffectSingle( 'bruxa_dash_trails_backup' );
							thePlayer.StopEffect( 'bruxa_dash_trails_backup' );

							thePlayer.DestroyEffect('shadowdash_short');
							thePlayer.PlayEffectSingle( 'shadowdash_short' );
							thePlayer.StopEffect( 'shadowdash_short' );
						}

						if (thePlayer.HasTag('blood_sucking'))
						{
							bruxa_blood_suck_end_no_jump_actual();
						}
						
						dodge_timer_actual();
							
						thePlayer.BreakAttachment();		

						bruxa_dash();						
					}
				}
			}
			else 
			{	
				if ( thePlayer.HasTag('vampire_claws_equipped') )
				{
					if ( !thePlayer.HasTag('ACS_Camo_Active') && !thePlayer.HasTag('in_wraith') && !thePlayer.HasTag('blood_sucking') )
					{
						thePlayer.PlayEffectSingle( 'magic_step_l_new' );
						thePlayer.StopEffect( 'magic_step_l_new' );	

						thePlayer.PlayEffectSingle( 'magic_step_r_new' );
						thePlayer.StopEffect( 'magic_step_r_new' );	

						thePlayer.PlayEffectSingle( 'bruxa_dash_trails' );
						thePlayer.StopEffect( 'bruxa_dash_trails' );

						thePlayer.DestroyEffect('shadowdash_short');
						thePlayer.PlayEffectSingle( 'shadowdash_short' );
						thePlayer.StopEffect( 'shadowdash_short' );
					}
				}

				if (ACS_BruxaDash_Enabled() 
				&& !theGame.IsFocusModeActive()
				&& ACS_BruxaDashInput() == 0
				&& ACS_BruxaDashSprintOrW() == 0
				&& ACS_can_bruxa_dash()
				&& !thePlayer.GetIsRunning()
				&& !thePlayer.GetIsWalking()
				)
				{
					RemoveTimer('BruxaDashAnimationCancel');

					if ( ACS_StaminaBlockAction_Enabled() 
					&& StaminaCheck()
					&& !thePlayer.HasTag('in_wraith')
					)
					{	
						if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
					}
					else
					{
						ACS_StaminaDrain(4);

						thePlayer.SetIsCurrentlyDodging(true);

						thePlayer.EnableCharacterCollisions(false); 

						ACS_refresh_bruxa_dash_cooldown();

						WraithModeDeactivate();

						if (!thePlayer.HasTag('ACS_Camo_Active')
						&& !thePlayer.HasTag('blood_sucking'))
						{
							thePlayer.PlayEffectSingle( 'bruxa_dash_trails_backup' );
							thePlayer.StopEffect( 'bruxa_dash_trails_backup' );

							thePlayer.DestroyEffect('shadowdash_short');
							thePlayer.PlayEffectSingle( 'shadowdash_short' );
							thePlayer.StopEffect( 'shadowdash_short' );
						}

						if (thePlayer.HasTag('blood_sucking'))
						{
							bruxa_blood_suck_end_no_jump_actual();
						}
						
						dodge_timer_actual();
							
						thePlayer.BreakAttachment();		

						bruxa_dash();						
					}
				}
			}

			DeactivateThings_BruxaDash();
			
			BruxaDashCallTime = theGame.GetEngineTimeAsSeconds();
		}
	}

	timer function BruxaDashAnimationCancel(dt : float, id : int)
	{
		thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'bruxa_move_run_to_idle_f_ACS', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.875f, 0.875f) );
	}

	function bruxa_dash()
	{
		var dest1, dest2, dest3, dest4		: Vector;

		ACS_Bruxa_Dash_Tutorial();

		if (thePlayer.HasTag('ACS_Camo_Active'))
		{
			thePlayer.SoundEvent("monster_bruxa_combat_disappear");
		}
		
		if ( thePlayer.IsInInterior() )
		{
			dest1 = thePlayer.GetWorldPosition() + (thePlayer.GetWorldRight() * (0-(ACS_BruxaDash_Combat_Distance()/4))) + thePlayer.GetHeadingVector() * (ACS_BruxaDash_Combat_Distance()/2);
			
			dest2 = thePlayer.GetWorldPosition() + (thePlayer.GetWorldRight() * (ACS_BruxaDash_Combat_Distance()/4)) + thePlayer.GetHeadingVector() * (ACS_BruxaDash_Combat_Distance()/2);
			
			dest3 = thePlayer.GetWorldPosition() + (thePlayer.GetWorldRight() * (0-(ACS_BruxaDash_Normal_Distance()/4))) + thePlayer.GetHeadingVector() * (ACS_BruxaDash_Normal_Distance()/2);
			
			dest4 = thePlayer.GetWorldPosition() + (thePlayer.GetWorldRight() * (ACS_BruxaDash_Normal_Distance()/4)) + thePlayer.GetHeadingVector() * (ACS_BruxaDash_Normal_Distance()/2);

		}
		else if (thePlayer.IsSwimming())
		{
			dest1 = theCamera.GetCameraPosition() + theCamera.GetCameraDirection() * ACS_BruxaDash_Combat_Distance();
			
			dest2 = theCamera.GetCameraPosition() + theCamera.GetCameraDirection() * ACS_BruxaDash_Combat_Distance();
			
			dest3 = theCamera.GetCameraPosition() + theCamera.GetCameraDirection() * ACS_BruxaDash_Normal_Distance();
			
			dest4 = theCamera.GetCameraPosition() + theCamera.GetCameraDirection() * ACS_BruxaDash_Normal_Distance();
		}
		else
		{
			dest1 = thePlayer.GetWorldPosition() + (thePlayer.GetWorldRight() * (0-(ACS_BruxaDash_Combat_Distance()/4))) + thePlayer.GetHeadingVector() * ACS_BruxaDash_Combat_Distance();
			
			dest2 = thePlayer.GetWorldPosition() + (thePlayer.GetWorldRight() * (ACS_BruxaDash_Combat_Distance()/4)) + thePlayer.GetHeadingVector() * ACS_BruxaDash_Combat_Distance();
			
			dest3 = thePlayer.GetWorldPosition() + (thePlayer.GetWorldRight() * (0-(ACS_BruxaDash_Normal_Distance()/4))) + thePlayer.GetHeadingVector() * ACS_BruxaDash_Normal_Distance();
			
			dest4 = thePlayer.GetWorldPosition() + (thePlayer.GetWorldRight() * (ACS_BruxaDash_Normal_Distance()/4)) + thePlayer.GetHeadingVector() * ACS_BruxaDash_Normal_Distance();

			if (!thePlayer.IsInCombat() && thePlayer.IsOnGround())
			{
				AddTimer('BruxaDashAnimationCancel', 0.5, false);
			}
		}
		
		MovementAdjustBruxaDash();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsSwimming())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsSwimming())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
					}
				}
				else
				{
					if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}
			}
			
			if (theInput.GetActionValue('GI_AxisLeftX') > 0.5 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
			{
				PlayerPlayAnimation( 'bruxa_run_dash_right_ACS');
				
				movementAdjustor.SlideTo( ticket, ACSPlayerFixZAxis(dest2) );
			}	
			else if (theInput.GetActionValue('GI_AxisLeftX') < -0.5 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
			{
				PlayerPlayAnimation( 'bruxa_run_dash_ACS');
				
				movementAdjustor.SlideTo( ticket, ACSPlayerFixZAxis(dest1) );
			}	
			else
			{	
				bruxa_dash_index_1 = RandDifferent(this.previous_bruxa_dash_index_1 , 2);

				switch (bruxa_dash_index_1) 
				{				
					case 1:
					movementAdjustor.SlideTo( ticket, ACSPlayerFixZAxis(dest1) );
					PlayerPlayAnimation( 'bruxa_run_dash_ACS');
					break;	
							
					default:
					movementAdjustor.SlideTo( ticket, ACSPlayerFixZAxis(dest2) );
					PlayerPlayAnimation( 'bruxa_run_dash_right_ACS');
					break;	
				}

				this.previous_bruxa_dash_index_1 = bruxa_dash_index_1;
			}
		}
		else
		{	
			if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (theInput.GetActionValue('GI_AxisLeftX') < -0.5 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
			{
				PlayerPlayAnimation( 'bruxa_run_dash_ACS');
				
				if (thePlayer.IsInCombat())
				{
					movementAdjustor.SlideTo( ticket, ACSPlayerFixZAxis(dest1) );
				}
				else
				{
					movementAdjustor.SlideTo( ticket, ACSPlayerFixZAxis(dest3) );
				}
			}	
			else if (theInput.GetActionValue('GI_AxisLeftX') > 0.5 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
			{
				PlayerPlayAnimation( 'bruxa_run_dash_right_ACS');
				
				if (thePlayer.IsInCombat())
				{
					movementAdjustor.SlideTo( ticket, ACSPlayerFixZAxis(dest2) );
				}
				else
				{
					movementAdjustor.SlideTo( ticket, ACSPlayerFixZAxis(dest4) );
				}
			}	
			else
			{			
				bruxa_dash_index_2 = RandDifferent(this.previous_bruxa_dash_index_2 , 2);

				switch (bruxa_dash_index_2) 
				{				
					case 1:
					
					if (thePlayer.IsInCombat())
					{
						movementAdjustor.SlideTo( ticket, ACSPlayerFixZAxis(dest1) );
					}
					else
					{
						movementAdjustor.SlideTo( ticket, ACSPlayerFixZAxis(dest3) );
					}
					PlayerPlayAnimation( 'bruxa_run_dash_ACS');
					break;	
							
					default:
					
					if (thePlayer.IsInCombat())
					{
						movementAdjustor.SlideTo( ticket, ACSPlayerFixZAxis(dest2) );
					}
					else
					{
						movementAdjustor.SlideTo( ticket, ACSPlayerFixZAxis(dest4) );
					}
					PlayerPlayAnimation( 'bruxa_run_dash_right_ACS');
					break;	
				}

				this.previous_bruxa_dash_index_2 = bruxa_dash_index_2;
			}
		}
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Claw Attacks
	
	function geraltRandomClawFistAttack() 
	{
		MovementAdjust();

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_claw_fist_light )
				{
					default:
					PlayerPlayAnimation( 'bruxa_attack_01_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_fist_light += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'bruxa_attack_01_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_fist_light += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'bruxa_attack_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_light += 1;
					break;

					case 2:
					PlayerPlayAnimation( 'bruxa_attack_03_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_light += 1;
					break;

					case 3:
					PlayerPlayAnimation( 'attack_light_01_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_light += 1;
					break;

					case 4:
					PlayerPlayAnimation( 'attack_light_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_light -= combo_counter_claw_fist_light;
					break;
				}

				/*
				if (combo_counter_claw_fist_light == 0)
				{
					PlayerPlayAnimation( 'bruxa_attack_01_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_fist_light += 1;
				}
				else if (combo_counter_claw_fist_light == 1)
				{
					PlayerPlayAnimation( 'bruxa_attack_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_light += 1;
				}
				else if (combo_counter_claw_fist_light == 2)
				{
					PlayerPlayAnimation( 'bruxa_attack_03_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_light += 1;
				}
				else if (combo_counter_claw_fist_light == 3)
				{
					PlayerPlayAnimation( 'attack_light_01_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_light += 1;
				}

				else if (combo_counter_claw_fist_light == 4)
				{
					PlayerPlayAnimation( 'attack_light_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_light -= combo_counter_claw_fist_light;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				claw_fist_attack_index_1 = RandDifferent(this.previous_claw_fist_attack_index_1 , 5);

				switch (claw_fist_attack_index_1) 
				{	
					case 4:
					PlayerPlayAnimation( 'bruxa_attack_03_ACS');	
					break;
					
					case 3:
					PlayerPlayAnimation( 'bruxa_attack_02_ACS');	
					break;
					
					case 2:
					PlayerPlayAnimation( 'bruxa_attack_01_ACS');	
					break;
					
					case 1:
					PlayerPlayAnimation( 'attack_light_02_ACS');
					break;

					default:
					PlayerPlayAnimation( 'attack_light_01_ACS');
					break;
				}
			
				this.previous_claw_fist_attack_index_1 = claw_fist_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_claw_fist_light )
				{
					default:
					PlayerPlayAnimation( 'bruxa_attack_01_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_fist_light += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'bruxa_attack_01_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_fist_light += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'bruxa_attack_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_light += 1;
					break;

					case 2:
					PlayerPlayAnimation( 'bruxa_attack_03_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_light += 1;
					break;

					case 3:
					PlayerPlayAnimation( 'attack_light_01_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_light += 1;
					break;

					case 4:
					PlayerPlayAnimation( 'attack_light_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_light -= combo_counter_claw_fist_light;
					break;
				}

				/*
				if (combo_counter_claw_fist_light == 0)
				{
					PlayerPlayAnimation( 'bruxa_attack_01_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_fist_light += 1;
				}
				else if (combo_counter_claw_fist_light == 1)
				{
					PlayerPlayAnimation( 'bruxa_attack_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_light += 1;
				}
				else if (combo_counter_claw_fist_light == 2)
				{
					PlayerPlayAnimation( 'bruxa_attack_03_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_light += 1;
				}
				else if (combo_counter_claw_fist_light == 3)
				{
					PlayerPlayAnimation( 'attack_light_01_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_light += 1;
				}

				else if (combo_counter_claw_fist_light == 4)
				{
					PlayerPlayAnimation( 'attack_light_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_light -= combo_counter_claw_fist_light;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				claw_fist_attack_index_3 = RandDifferent(this.previous_claw_fist_attack_index_3 , 5);

				switch (claw_fist_attack_index_3) 
				{							
					case 4:
					PlayerPlayAnimation( 'bruxa_attack_03_ACS');	
					break;
					
					case 3:
					PlayerPlayAnimation( 'bruxa_attack_02_ACS');	
					break;
					
					case 2:
					PlayerPlayAnimation( 'bruxa_attack_01_ACS');	
					break;
					
					case 1:
					PlayerPlayAnimation( 'attack_light_02_ACS');
					break;

					default:
					PlayerPlayAnimation( 'attack_light_01_ACS');
					break;
				}
				
				this.previous_claw_fist_attack_index_3 = claw_fist_attack_index_3;
			}
		}	
	}

	function geraltClawSprintingAttack() 
	{
		MovementAdjust();

		ACS_Combo_Mode_Reset_Hard();

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			PlayerPlayAnimation( 'bruxa_attack_special_charge_run_ACS');
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			PlayerPlayAnimation( 'bruxa_attack_special_charge_run_ACS');
		}

		thePlayer.SetSprintActionPressed( false );
		thePlayer.SetSprintToggle( false );
		thePlayer.SetWalkToggle( true );
	}
	
	function geraltRandomHeavyClawAttack() 
	{
		MovementAdjust();

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_claw_fist_heavy )
				{
					default:
					PlayerPlayAnimation( 'attack_heavy_01_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_fist_heavy += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'attack_heavy_01_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_fist_heavy += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'attack_heavy_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
					break;

					case 2:
					PlayerPlayAnimation( 'attack_heavy_single_01_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
					break;

					case 3:
					PlayerPlayAnimation( 'attack_heavy_single_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
					break;

					case 4:
					PlayerPlayAnimation( 'attack_heavy_single_03_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
					break;

					case 5:
					PlayerPlayAnimation( 'attack_counter_medium_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
					break;

					case 6:
					PlayerPlayAnimation( 'attack_counter_close_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
					break;

					case 7:
					PlayerPlayAnimation( 'attack_special_strong_uppercut_ACS');	
					
					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy -= combo_counter_claw_fist_heavy;
					break;
				}

				/*
				if (combo_counter_claw_fist_heavy == 0)
				{
					PlayerPlayAnimation( 'attack_heavy_01_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_fist_heavy += 1;
				}
				else if (combo_counter_claw_fist_heavy == 1)
				{
					PlayerPlayAnimation( 'attack_heavy_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
				}
				else if (combo_counter_claw_fist_heavy == 2)
				{
					PlayerPlayAnimation( 'attack_heavy_single_01_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
				}
				else if (combo_counter_claw_fist_heavy == 3)
				{
					PlayerPlayAnimation( 'attack_heavy_single_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
				}
				else if (combo_counter_claw_fist_heavy == 4)
				{
					PlayerPlayAnimation( 'attack_heavy_single_03_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
				}
				else if (combo_counter_claw_fist_heavy == 5)
				{
					PlayerPlayAnimation( 'attack_counter_medium_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
				}
				else if (combo_counter_claw_fist_heavy == 6)
				{
					PlayerPlayAnimation( 'attack_counter_close_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
				}
				else if (combo_counter_claw_fist_heavy == 7)
				{
					PlayerPlayAnimation( 'attack_special_strong_uppercut_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_fist_heavy -= combo_counter_claw_fist_heavy;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5*1.5 ) 
				{							
					heavy_claw_attack_index = RandDifferent(this.previous_heavy_claw_attack_index , 3);

					switch (heavy_claw_attack_index) 
					{		
						case 2:
						PlayerPlayAnimation( 'attack_counter_medium_ACS');
						break;	
						
						case 1:	
						PlayerPlayAnimation( 'attack_counter_close_ACS');	
						break;

						default:
						PlayerPlayAnimation( 'attack_special_strong_uppercut_ACS');	
						break;
					}
						
					this.previous_heavy_claw_attack_index = heavy_claw_attack_index;
				}
				else
				{
					heavy_claw_attack_index = RandDifferent(this.previous_heavy_claw_attack_index , 5);

					switch (heavy_claw_attack_index) 
					{		
						case 4:
						PlayerPlayAnimation( 'attack_heavy_single_03_ACS');	
						break;
						
						case 3:
						PlayerPlayAnimation( 'attack_heavy_single_02_ACS');
						break;

						case 2:
						PlayerPlayAnimation( 'attack_heavy_single_01_ACS');
						break;	
						
						case 1:	
						PlayerPlayAnimation( 'attack_heavy_02_ACS');	
						break;

						default:
						PlayerPlayAnimation( 'attack_heavy_01_ACS');	
						break;
					}
						
					this.previous_heavy_claw_attack_index = heavy_claw_attack_index;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_claw_fist_heavy )
				{
					default:
					PlayerPlayAnimation( 'attack_heavy_01_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_fist_heavy += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'attack_heavy_01_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_fist_heavy += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'attack_heavy_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
					break;

					case 2:
					PlayerPlayAnimation( 'attack_heavy_single_01_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
					break;

					case 3:
					PlayerPlayAnimation( 'attack_heavy_single_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
					break;

					case 4:
					PlayerPlayAnimation( 'attack_heavy_single_03_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
					break;

					case 5:
					PlayerPlayAnimation( 'attack_counter_medium_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
					break;

					case 6:
					PlayerPlayAnimation( 'attack_counter_close_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
					break;

					case 7:
					PlayerPlayAnimation( 'attack_special_strong_uppercut_ACS');	
					
					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy -= combo_counter_claw_fist_heavy;
					break;
				}

				/*
				if (combo_counter_claw_fist_heavy == 0)
				{
					PlayerPlayAnimation( 'attack_heavy_01_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_fist_heavy += 1;
				}
				else if (combo_counter_claw_fist_heavy == 1)
				{
					PlayerPlayAnimation( 'attack_heavy_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
				}
				else if (combo_counter_claw_fist_heavy == 2)
				{
					PlayerPlayAnimation( 'attack_heavy_single_01_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
				}
				else if (combo_counter_claw_fist_heavy == 3)
				{
					PlayerPlayAnimation( 'attack_heavy_single_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
				}
				else if (combo_counter_claw_fist_heavy == 4)
				{
					PlayerPlayAnimation( 'attack_heavy_single_03_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
				}
				else if (combo_counter_claw_fist_heavy == 5)
				{
					PlayerPlayAnimation( 'attack_counter_medium_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
				}
				else if (combo_counter_claw_fist_heavy == 6)
				{
					PlayerPlayAnimation( 'attack_counter_close_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
				}
				else if (combo_counter_claw_fist_heavy == 7)
				{
					PlayerPlayAnimation( 'attack_special_strong_uppercut_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_fist_heavy -= combo_counter_claw_fist_heavy;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				heavy_claw_attack_index = RandDifferent(this.previous_heavy_claw_attack_index , 5);

				switch (heavy_claw_attack_index) 
				{									
					case 4:
					PlayerPlayAnimation( 'attack_heavy_single_03_ACS');	
					break;
						
					case 3:
					PlayerPlayAnimation( 'attack_heavy_single_02_ACS');
					break;

					case 2:
					PlayerPlayAnimation( 'attack_heavy_single_01_ACS');
					break;	
						
					case 1:	
					PlayerPlayAnimation( 'attack_heavy_02_ACS');	
					break;

					default:
					PlayerPlayAnimation( 'attack_heavy_01_ACS');	
					break;
				}
				
				this.previous_heavy_claw_attack_index = heavy_claw_attack_index;
			}
		}	
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Fist Attacks

	function geraltRandomLightFistAttack()
	{
		MovementAdjust();

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_fist_attack )
				{
					default:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_far_forward_1_rh_50ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_fist_attack += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'man_fistfight_attack_fast_far_forward_1_rh_50ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_fist_attack += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_far_forward_2_lh_50ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
					break;

					case 2:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_far_forward_2_rh_50ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
					break;

					case 3:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_5_rl_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
					break;

					case 4:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_4_lh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
					break;

					case 5:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_3_rh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
					break;

					case 6:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_3_lh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
					break;

					case 7:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_2_rh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
					break;

					case 8:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_2_lh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
					break;

					case 9:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_1_rh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
					break;

					case 10:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_1_lh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
					break;

					case 11:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_1_lh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
					break;

					case 12:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_1_rh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
					break;

					case 13:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_2_lh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
					break;

					case 14:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_2_rh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
					break;

					case 15:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_3_lh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
					break;

					case 16:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_3_rh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
					break;

					case 17:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_4_lh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
					break;

					case 18:
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_1');	

					combo_counter_damage += 1;

					combo_counter_fist_attack -= combo_counter_fist_attack;
					break;
				}
				
				/*
				if (combo_counter_fist_attack == 0)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_far_forward_1_rh_50ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 1)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_far_forward_2_lh_50ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 2)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_far_forward_2_rh_50ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 3)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_5_rl_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 4)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_4_lh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 5)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_3_rh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 6)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_3_lh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 7)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_2_rh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 8)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_2_lh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 9)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_1_rh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 10)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_1_lh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 11)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_1_lh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 12)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_1_rh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 13)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_2_lh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 14)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_2_rh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 15)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_3_lh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 16)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_3_rh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 17)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_4_lh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 18)
				{
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_1');	

					combo_counter_damage += 1;

					combo_counter_fist_attack -= combo_counter_fist_attack;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5*1.5 ) 
				{
					fist_attack_index_1 = RandDifferent(this.previous_fist_attack_index_1 , 8);

					switch (fist_attack_index_1) 
					{	
						case 7:
						PlayerPlayAnimation( 'man_fistfight_close_combo_attack_1');	
						break;

						case 6:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_4_lh_40ms_short');	
						break;

						case 5:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_3_rh_40ms_short');	
						break;

						case 4:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_1_lh_40ms_short');	
						break;
						
						case 3:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_1_rh_40ms_short');	
						break;
						
						case 2:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_2_lh_40ms_short');	
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_2_rh_40ms_short');
						break;

						default:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_3_lh_40ms_short');
						break;
					}
				
					this.previous_fist_attack_index_1 = fist_attack_index_1;
				}
				else if( targetDistance > 1.5*1.5 && targetDistance <= 3.5*3.5) 
				{
					fist_attack_index_1 = RandDifferent(this.previous_fist_attack_index_1 , 8);

					switch (fist_attack_index_1) 
					{	
						case 7:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_5_rl_40ms');	
						break;

						case 6:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_4_lh_40ms');	
						break;

						case 5:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_3_rh_40ms');	
						break;

						case 4:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_3_lh_40ms');	
						break;
						
						case 3:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_2_rh_40ms');	
						break;
						
						case 2:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_2_lh_40ms');	
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_1_rh_40ms');
						break;

						default:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_1_lh_40ms');
						break;
					}
				
					this.previous_fist_attack_index_1 = fist_attack_index_1;
				}
				else
				{
					fist_attack_index_2 = RandDifferent(this.previous_fist_attack_index_2 , 3);

					switch (fist_attack_index_2) 
					{	
						case 2:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_far_forward_1_rh_50ms');	
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_far_forward_2_lh_50ms');
						break;

						default:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_far_forward_2_rh_50ms');
						break;
					}
				
					this.previous_fist_attack_index_2 = fist_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_fist_attack )
				{
					default:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_far_forward_1_rh_50ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_fist_attack += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'man_fistfight_attack_fast_far_forward_1_rh_50ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_fist_attack += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_far_forward_2_lh_50ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
					break;

					case 2:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_far_forward_2_rh_50ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
					break;

					case 3:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_5_rl_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
					break;

					case 4:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_4_lh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
					break;

					case 5:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_3_rh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
					break;

					case 6:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_3_lh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
					break;

					case 7:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_2_rh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
					break;

					case 8:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_2_lh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
					break;

					case 9:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_1_rh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
					break;

					case 10:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_1_lh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
					break;

					case 11:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_1_lh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
					break;

					case 12:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_1_rh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
					break;

					case 13:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_2_lh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
					break;

					case 14:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_2_rh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
					break;

					case 15:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_3_lh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
					break;

					case 16:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_3_rh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
					break;

					case 17:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_4_lh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
					break;

					case 18:
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_1');	

					combo_counter_damage += 1;

					combo_counter_fist_attack -= combo_counter_fist_attack;
					break;
				}
				
				/*
				if (combo_counter_fist_attack == 0)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_far_forward_1_rh_50ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 1)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_far_forward_2_lh_50ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 2)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_far_forward_2_rh_50ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 3)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_5_rl_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 4)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_4_lh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 5)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_3_rh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 6)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_3_lh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 7)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_2_rh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 8)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_2_lh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 9)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_1_rh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 10)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_1_lh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 11)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_1_lh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 12)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_1_rh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 13)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_2_lh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 14)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_2_rh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 15)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_3_lh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 16)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_3_rh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 17)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_4_lh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 18)
				{
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_1');	

					combo_counter_damage += 1;

					combo_counter_fist_attack -= combo_counter_fist_attack;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				fist_attack_index_3 = RandDifferent(this.previous_fist_attack_index_3 , 19);

				switch (fist_attack_index_3) 
				{	
					case 18:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_far_forward_1_rh_50ms');	
					break;
					
					case 17:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_far_forward_2_lh_50ms');
					break;

					case 16:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_far_forward_2_rh_50ms');
					break;

					case 15:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_5_rl_40ms');	
					break;

					case 14:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_4_lh_40ms');	
					break;

					case 13:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_3_rh_40ms');	
					break;

					case 12:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_3_lh_40ms');	
					break;
					
					case 11:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_2_rh_40ms');	
					break;
					
					case 10:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_2_lh_40ms');	
					break;
					
					case 9:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_1_rh_40ms');
					break;

					case 8:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_1_lh_40ms');
					break;

					case 7:
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_1');	
					break;

					case 6:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_4_lh_40ms_short');	
					break;

					case 5:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_3_rh_40ms_short');	
					break;

					case 4:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_1_lh_40ms_short');	
					break;
					
					case 3:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_1_rh_40ms_short');	
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_2_lh_40ms_short');	
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_2_rh_40ms_short');
					break;

					default:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_3_lh_40ms_short');
					break;
				}
				
				this.previous_fist_attack_index_3 = fist_attack_index_3;
			}
		}
	}

	function geraltRandomHeavyFistAttack()
	{
		MovementAdjust();

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_fist_attack_heavy )
				{
					default:
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_far_2_ll_80ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_fist_attack_heavy += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_far_2_ll_80ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_fist_attack_heavy += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_far_1_rh_80ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
					break;

					case 2:
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_far_1_lh_80ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
					break;

					case 3:
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_1_rh_70ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
					break;

					case 4:
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_2_lh_70ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
					break;

					case 5:
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_2_rh_70ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
					break;

					case 6:
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_3_lh_70ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
					break;

					case 7:
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_4_ll_70ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
					break;

					case 8:
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_1');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
					break;

					case 9:
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_2');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
					break;

					case 10:
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_3');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
					break;

					case 11:
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_4');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
					break;

					case 12:
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_5');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
					break;

					case 13:
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_6');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy -= combo_counter_fist_attack_heavy;
					break;
				}
				
				/*
				if (combo_counter_fist_attack_heavy == 0)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_far_2_ll_80ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_fist_attack_heavy += 1;
				}
				else if (combo_counter_fist_attack_heavy == 1)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_far_1_rh_80ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}
				else if (combo_counter_fist_attack_heavy == 2)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_far_1_lh_80ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}
				else if (combo_counter_fist_attack_heavy == 3)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_1_rh_70ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 4)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_2_lh_70ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 5)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_2_rh_70ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 6)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_3_lh_70ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 7)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_4_ll_70ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 8)
				{
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_1');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 9)
				{
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_2');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 10)
				{
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_3');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 11)
				{
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_4');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 12)
				{
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_5');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 13)
				{
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_6');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy -= combo_counter_fist_attack_heavy;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5*1.5 ) 
				{
					heavy_fist_attack_index_1 = RandDifferent(this.previous_heavy_fist_attack_index_1 , 6);

					switch (heavy_fist_attack_index_1) 
					{	
						case 5:
						PlayerPlayAnimation( 'man_fistfight_close_combo_attack_1');	
						break;

						case 4:
						PlayerPlayAnimation( 'man_fistfight_close_combo_attack_6');	
						break;
						
						case 3:
						PlayerPlayAnimation( 'man_fistfight_close_combo_attack_5');	
						break;
						
						case 2:
						PlayerPlayAnimation( 'man_fistfight_close_combo_attack_4');	
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_fistfight_close_combo_attack_3');
						break;

						default:
						PlayerPlayAnimation( 'man_fistfight_close_combo_attack_2');
						break;
					}
				
					this.previous_heavy_fist_attack_index_1 = heavy_fist_attack_index_1;
				}
				else if( targetDistance > 1.5*1.5 && targetDistance <= 3.5*3.5) 
				{
					heavy_fist_attack_index_1 = RandDifferent(this.previous_heavy_fist_attack_index_1 , 6);

					switch (heavy_fist_attack_index_1) 
					{	
						case 5:
						PlayerPlayAnimation( 'man_fistfight_attack_heavy_4_ll_70ms');	
						break;

						case 4:
						PlayerPlayAnimation( 'man_fistfight_attack_heavy_3_lh_70ms');	
						break;
						
						case 3:
						PlayerPlayAnimation( 'man_fistfight_attack_heavy_2_rh_70ms');	
						break;
						
						case 2:
						PlayerPlayAnimation( 'man_fistfight_attack_heavy_2_lh_70ms');	
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_fistfight_attack_heavy_1_rh_70ms');
						break;

						default:
						PlayerPlayAnimation( 'man_fistfight_attack_heavy_1_lh_70ms');
						break;
					}
				
					this.previous_heavy_fist_attack_index_1 = heavy_fist_attack_index_1;
				}
				else
				{
					heavy_fist_attack_index_2 = RandDifferent(this.previous_heavy_fist_attack_index_2 , 3);

					switch (heavy_fist_attack_index_2) 
					{	
						case 2:
						PlayerPlayAnimation( 'man_fistfight_attack_heavy_far_2_ll_80ms');	
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_fistfight_attack_heavy_far_1_rh_80ms');
						break;

						default:
						PlayerPlayAnimation( 'man_fistfight_attack_heavy_far_1_lh_80ms');
						break;
					}
				
					this.previous_heavy_fist_attack_index_2 = heavy_fist_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_fist_attack_heavy )
				{
					default:
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_far_2_ll_80ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_fist_attack_heavy += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_far_2_ll_80ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_fist_attack_heavy += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_far_1_rh_80ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
					break;

					case 2:
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_far_1_lh_80ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
					break;

					case 3:
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_1_rh_70ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
					break;

					case 4:
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_2_lh_70ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
					break;

					case 5:
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_2_rh_70ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
					break;

					case 6:
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_3_lh_70ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
					break;

					case 7:
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_4_ll_70ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
					break;

					case 8:
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_1');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
					break;

					case 9:
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_2');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
					break;

					case 10:
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_3');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
					break;

					case 11:
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_4');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
					break;

					case 12:
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_5');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
					break;

					case 13:
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_6');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy -= combo_counter_fist_attack_heavy;
					break;
				}
				
				/*
				if (combo_counter_fist_attack_heavy == 0)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_far_2_ll_80ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_fist_attack_heavy += 1;
				}
				else if (combo_counter_fist_attack_heavy == 1)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_far_1_rh_80ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}
				else if (combo_counter_fist_attack_heavy == 2)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_far_1_lh_80ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}
				else if (combo_counter_fist_attack_heavy == 3)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_1_rh_70ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 4)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_2_lh_70ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 5)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_2_rh_70ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 6)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_3_lh_70ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 7)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_4_ll_70ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 8)
				{
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_1');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 9)
				{
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_2');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 10)
				{
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_3');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 11)
				{
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_4');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 12)
				{
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_5');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 13)
				{
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_6');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy -= combo_counter_fist_attack_heavy;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				heavy_fist_attack_index_3 = RandDifferent(this.previous_heavy_fist_attack_index_3 , 15);

				switch (heavy_fist_attack_index_3) 
				{
					case 14:
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_far_2_ll_80ms');	
					break;
					
					case 13:
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_far_1_rh_80ms');
					break;

					case 12:
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_far_1_lh_80ms');
					break;

					case 11:
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_4_ll_70ms');	
					break;

					case 10:
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_3_lh_70ms');	
					break;
					
					case 9:
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_2_rh_70ms');	
					break;
					
					case 8:
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_2_lh_70ms');	
					break;
					
					case 7:
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_1_rh_70ms');
					break;

					case 6:
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_1_lh_70ms');
					break;

					case 5:
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_1');	
					break;

					case 4:
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_6');	
					break;
					
					case 3:
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_5');	
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_4');	
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_3');
					break;

					default:
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_2');
					break;
				}
				
				this.previous_heavy_fist_attack_index_3 = heavy_fist_attack_index_3;
			}
		}
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Counters
	
	function geraltRandomKick() 
	{
		MovementAdjust();

		//
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_kick )
				{
					default:
					PlayerPlayAnimation( 'man_geralt_sword_repel_lp_kick_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_kick += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'man_geralt_sword_repel_lp_kick_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_kick += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_repel_rp_kick_ACS');	

					combo_counter_damage += 1;

					combo_counter_kick -= combo_counter_kick;
					break;
				}
				
				/*
				if (combo_counter_kick == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_repel_lp_kick_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_kick += 1;
				}

				else if (combo_counter_kick == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_repel_rp_kick_ACS');	

					combo_counter_damage += 1;

					combo_counter_kick -= combo_counter_kick;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				kick_index_1 = RandDifferent(this.previous_kick_index_1 , 2);

				switch (kick_index_1) 
				{										
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_repel_lp_kick_ACS');
					break;
						
					default:
					PlayerPlayAnimation( 'man_geralt_sword_repel_rp_kick_ACS');
					break;	
				}
			
				this.previous_kick_index_1 = kick_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_kick )
				{
					default:
					PlayerPlayAnimation( 'man_geralt_sword_repel_lp_kick_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_kick += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'man_geralt_sword_repel_lp_kick_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_kick += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_repel_rp_kick_ACS');	

					combo_counter_damage += 1;

					combo_counter_kick -= combo_counter_kick;
					break;
				}
				
				/*
				if (combo_counter_kick == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_repel_lp_kick_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_kick += 1;
				}

				else if (combo_counter_kick == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_repel_rp_kick_ACS');	

					combo_counter_damage += 1;

					combo_counter_kick -= combo_counter_kick;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				kick_index_2 = RandDifferent(this.previous_kick_index_2 , 2);

				switch (kick_index_2) 
				{						
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_repel_lp_kick_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_geralt_sword_repel_rp_kick_ACS');
					break;
				}
				
				this.previous_kick_index_2 = kick_index_2;
			}
		}	
	}
	
	function geraltRandomPush() 
	{
		MovementAdjust();

		//

		if (thePlayer.HasTag('axii_sword_equipped'))
		{
			RemoveTimer('ACS_Shield_Spawn_Delay');

			AddTimer('ACS_Shield_Spawn_Delay', 0.5, false);
		}
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_push )
				{
					default:
					PlayerPlayAnimation( 'man_geralt_sword_repel_rp_bash_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.3, false);

					combo_counter_damage -= combo_counter_damage;

					combo_counter_push += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'man_geralt_sword_repel_rp_bash_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.3, false);

					combo_counter_damage -= combo_counter_damage;

					combo_counter_push += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'man_npc_sword_1hand_push_1_ACS');	

					AddTimer('ACS_HeadbuttDamage', 0.2, false);

					combo_counter_damage += 1;

					combo_counter_push += 1;
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_repel_lp_bash_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.3, false);

					combo_counter_damage += 1;

					combo_counter_push += 1;
					break;

					case 3:
					PlayerPlayAnimation( 'man_npc_sword_1hand_push_2_ACS');	

					AddTimer('ACS_HeadbuttDamage', 0.2, false);

					combo_counter_damage += 1;

					combo_counter_push -= combo_counter_push;
					break;
				}

				/*
				if (combo_counter_push == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_repel_rp_bash_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.3, false);

					combo_counter_damage -= combo_counter_damage;

					combo_counter_push += 1;
				}
				
				else if (combo_counter_push == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_push_1_ACS');	

					combo_counter_damage += 1;

					combo_counter_push += 1;
				}

				else if (combo_counter_push == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_repel_lp_bash_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.3, false);

					combo_counter_damage += 1;

					combo_counter_push += 1;
				}

				else if (combo_counter_push == 3)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_push_2_ACS');	

					combo_counter_damage += 1;

					combo_counter_push -= combo_counter_push;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				push_index_1 = RandDifferent(this.previous_push_index_1 , 4);

				switch (push_index_1) 
				{	
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_repel_lp_bash_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.3, false);
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_repel_rp_bash_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.3, false);
					break;

					case 1:
					PlayerPlayAnimation( 'man_npc_sword_1hand_push_1_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_sword_1hand_push_2_ACS');
					break;
				}
					
				this.previous_push_index_1 = push_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_push )
				{
					default:
					PlayerPlayAnimation( 'man_geralt_sword_repel_rp_bash_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.3, false);

					combo_counter_damage -= combo_counter_damage;

					combo_counter_push += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'man_geralt_sword_repel_rp_bash_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.3, false);

					combo_counter_damage -= combo_counter_damage;

					combo_counter_push += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'man_npc_sword_1hand_push_1_ACS');	

					AddTimer('ACS_HeadbuttDamage', 0.2, false);

					combo_counter_damage += 1;

					combo_counter_push += 1;
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_repel_lp_bash_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.3, false);

					combo_counter_damage += 1;

					combo_counter_push += 1;
					break;

					case 3:
					PlayerPlayAnimation( 'man_npc_sword_1hand_push_2_ACS');	

					AddTimer('ACS_HeadbuttDamage', 0.2, false);

					combo_counter_damage += 1;

					combo_counter_push -= combo_counter_push;
					break;
				}

				/*
				if (combo_counter_push == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_repel_rp_bash_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.3, false);

					combo_counter_damage -= combo_counter_damage;

					combo_counter_push += 1;
				}
				
				else if (combo_counter_push == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_push_1_ACS');	

					combo_counter_damage += 1;

					combo_counter_push += 1;
				}

				else if (combo_counter_push == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_repel_lp_bash_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.3, false);

					combo_counter_damage += 1;

					combo_counter_push += 1;
				}

				else if (combo_counter_push == 3)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_push_2_ACS');	

					combo_counter_damage += 1;

					combo_counter_push -= combo_counter_push;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				push_index_2 = RandDifferent(this.previous_push_index_2 , 4);

				switch (push_index_2) 
				{	
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_repel_lp_bash_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.3, false);
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_repel_rp_bash_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.3, false);
					break;

					case 1:
					PlayerPlayAnimation( 'man_npc_sword_1hand_push_1_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_sword_1hand_push_2_ACS');
					break;
				}
				
				this.previous_push_index_2 = push_index_2;
			}

			AddTimer('ACS_HeadbuttDamage', 0.2, false);
		}	
	}
	
	/*
	function geraltRandomPunch() 
	{
		MovementAdjust();

		ACS_Dagger_Summon();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_punch == 0)
				{
					PlayerPlayAnimation( 'combat_locomotion_sucker_punch_70ms_far');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_punch += 1;
				}

				else if (combo_counter_punch == 1)
				{
					PlayerPlayAnimation( 'combat_locomotion_sucker_punch_40ms_close');	

					combo_counter_damage += 1;

					combo_counter_punch -= combo_counter_punch;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				punch_index_1 = RandDifferent(this.previous_punch_index_1 , 2);

				switch (punch_index_1) 
				{														
					case 1:
					PlayerPlayAnimation( 'combat_locomotion_sucker_punch_70ms_far');
					break;

					default:
					PlayerPlayAnimation( 'combat_locomotion_sucker_punch_40ms_close');
					break;
				}
					
				this.previous_punch_index_1 = punch_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_punch == 0)
				{
					PlayerPlayAnimation( 'combat_locomotion_sucker_punch_70ms_far');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_punch += 1;
				}

				else if (combo_counter_punch == 1)
				{
					PlayerPlayAnimation( 'combat_locomotion_sucker_punch_40ms_close');	

					combo_counter_damage += 1;

					combo_counter_punch -= combo_counter_punch;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				punch_index_2 = RandDifferent(this.previous_punch_index_2 , 2);

				switch (punch_index_2) 
				{	
					case 1:
					PlayerPlayAnimation( 'combat_locomotion_sucker_punch_70ms_far');
					break;

					default:
					PlayerPlayAnimation( 'combat_locomotion_sucker_punch_40ms_close');
					break;
				}
				
				this.previous_punch_index_2 = punch_index_2;
			}
		}	
	}
	*/

	function geraltRandomPunch() 
	{
		MovementAdjust();

		if (thePlayer.IsAnyWeaponHeld() && !thePlayer.IsWeaponHeld('fist'))
		{
			ACS_Dagger_Summon();	
		}

		//

		if (thePlayer.HasTag('axii_sword_equipped'))
		{
			RemoveTimer('ACS_Shield_Spawn_Delay');

			AddTimer('ACS_Shield_Spawn_Delay', 0.5, false);
		}
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if( targetDistance <= 1.75 * 1.75 ) 
			{	
				PlayerPlayAnimation( 'combat_locomotion_sucker_punch_40ms_close');
			}
			else
			{
				PlayerPlayAnimation( 'combat_locomotion_sucker_punch_70ms_far');
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_punch )
				{
					default:
					PlayerPlayAnimation( 'combat_locomotion_sucker_punch_70ms_far');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_punch += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'combat_locomotion_sucker_punch_70ms_far');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_punch += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'combat_locomotion_sucker_punch_40ms_close');	

					combo_counter_damage += 1;

					combo_counter_punch -= combo_counter_punch;
					break;
				}
				
				/*
				if (combo_counter_punch == 0)
				{
					PlayerPlayAnimation( 'combat_locomotion_sucker_punch_70ms_far');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_punch += 1;
				}

				else if (combo_counter_punch == 1)
				{
					PlayerPlayAnimation( 'combat_locomotion_sucker_punch_40ms_close');	

					combo_counter_damage += 1;

					combo_counter_punch -= combo_counter_punch;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				punch_index_2 = RandDifferent(this.previous_punch_index_2 , 2);

				switch (punch_index_2) 
				{	
					case 1:
					PlayerPlayAnimation( 'combat_locomotion_sucker_punch_70ms_far');
					break;

					default:
					PlayerPlayAnimation( 'combat_locomotion_sucker_punch_40ms_close');
					break;
				}
				
				this.previous_punch_index_2 = punch_index_2;
			}
		}	
	}

	var vACS_Throw_Knife: cACS_Throw_Knife;

	public timer function Throw_Knife_Delay_Timer(deltaTime : float , id : int)
	{
		vACS_Throw_Knife = new cACS_Throw_Knife in this;

		vACS_Throw_Knife.ACS_Throw_Knife_Engage();
	}

	function geraltThrowKnife()
	{
		if ( !theSound.SoundIsBankLoaded("mq_nml_1035.bnk") )
		{
			theSound.SoundLoadBank( "mq_nml_1035.bnk", false );
		}

		GetWitcherPlayer().SoundEvent("scene_weapon_sword_unsheat_fast");
		
		MovementAdjust();

		thePlayer.inv.RemoveItemByName('ACS_Knife', 1);

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			PlayerPlayAnimation( 'man_npc_sword_1hand_throw_bomb_01_rp_ACS');

			RemoveTimer('Throw_Knife_Delay_Timer');
			AddTimer('Throw_Knife_Delay_Timer', 0.5, false);
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			PlayerPlayAnimation( 'man_npc_sword_1hand_throw_bomb_01_rp_ACS');

			RemoveTimer('Throw_Knife_Delay_Timer');
			AddTimer('Throw_Knife_Delay_Timer', 0.5, false);
		}
	}

	function geraltRandomMageCounter() 
	{
		MovementAdjust();

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			PlayerPlayAnimation( 'man_mage_cast_shield_02_ACS');
			
			AddTimer('MageAttackCone', 0.5, false);
		}
		else
		{	
			if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			PlayerPlayAnimation( 'man_mage_cast_shield_02_ACS');

			AddTimer('MageAttackCone', 0.5, false);
		}
	}
	
	function geraltRandomYrdenCounter() 
	{
		MovementAdjust();

		
		
		//ACS_Giant_Lightning_Strike_Single();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			PlayerPlayAnimation( 'man_npc_2h_parry_ACS');
			
			/*
			yrden_counter_index_1 = RandDifferent(this.previous_yrden_counter_index_1 , 2);

			switch (yrden_counter_index_1) 
			{														
				case 1:
				PlayerPlayAnimation( 'attack_counter_caretaker_ACS');
				break;	

				default:
				PlayerPlayAnimation( 'attack_counter_caretaker_ACS');
				break;
			}
				
			this.previous_yrden_counter_index_1 = yrden_counter_index_1;
			*/
		}
		else
		{	
			if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			PlayerPlayAnimation( 'man_npc_2h_parry_ACS');
			
			/*
			yrden_counter_index_2 = RandDifferent(this.previous_yrden_counter_index_2 , 2);

			switch (yrden_counter_index_2) 
			{	
				case 1:
				PlayerPlayAnimation( 'attack_counter_caretaker_ACS');
				break;	

				default:
				PlayerPlayAnimation( 'attack_counter_caretaker_ACS');
				break;
			}
			
			this.previous_yrden_counter_index_2 = yrden_counter_index_2;
			*/
		}

		AddTimer('ACS_HeadbuttDamage', 0.5, false);	
	}
	
	function geraltRandomAardCounter() 
	{
		MovementAdjust();

		

		//ACS_toadtest(1);

		AddTimer('ACS_Blood_Spray', 0.5, false);
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_aard_counter )
				{
					default:
					PlayerPlayAnimation( 'bruxa_attack_special_01_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_aard_counter += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'bruxa_attack_special_01_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_aard_counter += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'bruxa_special_attack_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_aard_counter -= combo_counter_aard_counter;
					break;
				}

				/*
				if (combo_counter_aard_counter == 0)
				{
					PlayerPlayAnimation( 'bruxa_attack_special_01_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_aard_counter += 1;
				}

				else if (combo_counter_aard_counter == 1)
				{
					PlayerPlayAnimation( 'bruxa_special_attack_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_aard_counter -= combo_counter_aard_counter;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				aard_counter_index_1 = RandDifferent(this.previous_aard_counter_index_1 , 2);

				switch (aard_counter_index_1) 
				{	
					case 1:	
					PlayerPlayAnimation( 'bruxa_special_attack_02_ACS');		
					break;

					default:
					PlayerPlayAnimation( 'bruxa_attack_special_01_ACS');	
					break;
				}
					
				this.previous_aard_counter_index_1 = aard_counter_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_aard_counter )
				{
					default:
					PlayerPlayAnimation( 'bruxa_attack_special_01_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_aard_counter += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'bruxa_attack_special_01_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_aard_counter += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'bruxa_special_attack_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_aard_counter -= combo_counter_aard_counter;
					break;
				}

				/*
				if (combo_counter_aard_counter == 0)
				{
					PlayerPlayAnimation( 'bruxa_attack_special_01_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_aard_counter += 1;
				}

				else if (combo_counter_aard_counter == 1)
				{
					PlayerPlayAnimation( 'bruxa_special_attack_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_aard_counter -= combo_counter_aard_counter;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				aard_counter_index_2 = RandDifferent(this.previous_aard_counter_index_2 , 2);

				switch (aard_counter_index_2) 
				{	
					case 1:	
					PlayerPlayAnimation( 'bruxa_special_attack_02_ACS');		
					break;

					default:
					PlayerPlayAnimation( 'bruxa_attack_special_01_ACS');	
					break;
				}
				
				this.previous_aard_counter_index_2 = aard_counter_index_2;
			}
		}	
	}

	function geraltRandomVampireCounter() 
	{
		MovementAdjust();

		//ACS_toadtest(1);

		AddTimer('ACS_Blood_Spray', 0.5, false);

		VampVoiceEffects_Monster();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_aard_counter )
				{
					default:
					PlayerPlayAnimation( 'bruxa_attack_special_01_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_aard_counter += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'bruxa_attack_special_01_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_aard_counter += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'bruxa_special_attack_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_aard_counter -= combo_counter_aard_counter;
					break;
				}

				/*
				if (combo_counter_aard_counter == 0)
				{
					PlayerPlayAnimation( 'bruxa_attack_special_01_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_aard_counter += 1;
				}

				else if (combo_counter_aard_counter == 1)
				{
					PlayerPlayAnimation( 'bruxa_special_attack_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_aard_counter -= combo_counter_aard_counter;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				aard_counter_index_1 = RandDifferent(this.previous_aard_counter_index_1 , 2);

				switch (aard_counter_index_1) 
				{	
					case 1:	
					PlayerPlayAnimation( 'bruxa_special_attack_02_ACS');		
					break;

					default:
					PlayerPlayAnimation( 'bruxa_attack_special_01_ACS');	
					break;
				}
					
				this.previous_aard_counter_index_1 = aard_counter_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_aard_counter )
				{
					default:
					PlayerPlayAnimation( 'bruxa_attack_special_01_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_aard_counter += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'bruxa_attack_special_01_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_aard_counter += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'bruxa_special_attack_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_aard_counter -= combo_counter_aard_counter;
					break;
				}

				/*
				if (combo_counter_aard_counter == 0)
				{
					PlayerPlayAnimation( 'bruxa_attack_special_01_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_aard_counter += 1;
				}

				else if (combo_counter_aard_counter == 1)
				{
					PlayerPlayAnimation( 'bruxa_special_attack_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_aard_counter -= combo_counter_aard_counter;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				aard_counter_index_2 = RandDifferent(this.previous_aard_counter_index_2 , 2);

				switch (aard_counter_index_2) 
				{	
					case 1:	
					PlayerPlayAnimation( 'bruxa_special_attack_02_ACS');		
					break;

					default:
					PlayerPlayAnimation( 'bruxa_attack_special_01_ACS');	
					break;
				}
				
				this.previous_aard_counter_index_2 = aard_counter_index_2;
			}
		}	
	}
	
	function geraltRandomQuenCounter() 
	{
		MovementAdjust();

		
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_quen_counter )
				{
					default:
					PlayerPlayAnimation( 'attack_sand_hand_left_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_quen_counter += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'attack_sand_hand_left_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_quen_counter += 1;
					break;

					case 1:
					if (thePlayer.GetStat(BCS_Vitality) <= thePlayer.GetStatMax(BCS_Vitality) * 0.75)
					{
						PlayerPlayAnimation( 'ethereal_attack_shout_ACS');

						RemoveTimer('ACS_Shout_Stop');
						AddTimer('ACS_Shout_Stop', 1.5, false);
					}
					else
					{
						PlayerPlayAnimation( 'attack_sand_hand_right_ACS');
					}

					combo_counter_damage += 1;

					combo_counter_quen_counter += 1;
					break;

					case 2:
					if (thePlayer.GetStat(BCS_Vitality) <= thePlayer.GetStatMax(BCS_Vitality) * 0.75)
					{
						PlayerPlayAnimation( 'ethereal_attack_with_shout_001_ACS');

						RemoveTimer('ACS_Shout');
						AddTimer('ACS_Shout', 1, false);
					}
					else
					{
						PlayerPlayAnimation( 'attack_elbow_r_ACS');
					}

					combo_counter_damage += 1;

					combo_counter_quen_counter -= combo_counter_quen_counter;
					break;
				}

				/*
				
				if (combo_counter_quen_counter == 0)
				{
					PlayerPlayAnimation( 'attack_sand_hand_left_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_quen_counter += 1;
				}

				else if (combo_counter_quen_counter == 1)
				{
					if (thePlayer.GetStat(BCS_Vitality) <= thePlayer.GetStatMax(BCS_Vitality) * 0.5)
					{
						PlayerPlayAnimation( 'ethereal_attack_shout_ACS');

						RemoveTimer('ACS_Shout_Stop');
						AddTimer('ACS_Shout_Stop', 1.5, false);
					}
					else
					{
						PlayerPlayAnimation( 'attack_sand_hand_right_ACS');
					}

					combo_counter_damage += 1;

					combo_counter_quen_counter += 1;
				}

				else if (combo_counter_quen_counter == 2)
				{
					if (thePlayer.GetStat(BCS_Vitality) <= thePlayer.GetStatMax(BCS_Vitality) * 0.5)
					{
						PlayerPlayAnimation( 'ethereal_attack_with_shout_001_ACS');

						RemoveTimer('ACS_Shout');
						AddTimer('ACS_Shout', 1, false);
					}
					else
					{
						PlayerPlayAnimation( 'attack_elbow_r_ACS');
					}

					combo_counter_damage += 1;

					combo_counter_quen_counter -= combo_counter_quen_counter;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				quen_counter_index_1 = RandDifferent(this.previous_quen_counter_index_1 , 3);

				switch (quen_counter_index_1) 
				{	
					/*
					case 3:
					PlayerPlayAnimation( 'attack_sand_1_ACS');
					break;	
					*/
					
					case 2:
					if (thePlayer.GetStat(BCS_Vitality) <= thePlayer.GetStatMax(BCS_Vitality) * 0.75)
					{
						PlayerPlayAnimation( 'ethereal_attack_with_shout_001_ACS');

						RemoveTimer('ACS_Shout');
						AddTimer('ACS_Shout', 1, false);
					}
					else
					{
						PlayerPlayAnimation( 'attack_sand_hand_right_ACS');
					}
					break;	
									
					case 1:
					PlayerPlayAnimation( 'attack_sand_hand_left_ACS');
					break;	

					default:
					if (thePlayer.GetStat(BCS_Vitality) <= thePlayer.GetStatMax(BCS_Vitality) * 0.75)
					{
						PlayerPlayAnimation( 'ethereal_attack_shout_ACS');

						RemoveTimer('ACS_Shout_Stop');
						AddTimer('ACS_Shout_Stop', 1.5, false);
					}
					else
					{
						PlayerPlayAnimation( 'attack_elbow_r_ACS');
					}
					break;
				}
					
				this.previous_quen_counter_index_1 = quen_counter_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_quen_counter )
				{
					default:
					PlayerPlayAnimation( 'attack_sand_hand_left_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_quen_counter += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'attack_sand_hand_left_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_quen_counter += 1;
					break;

					case 1:
					if (thePlayer.GetStat(BCS_Vitality) <= thePlayer.GetStatMax(BCS_Vitality) * 0.75)
					{
						PlayerPlayAnimation( 'ethereal_attack_shout_ACS');

						RemoveTimer('ACS_Shout_Stop');
						AddTimer('ACS_Shout_Stop', 1.5, false);
					}
					else
					{
						PlayerPlayAnimation( 'attack_sand_hand_right_ACS');
					}

					combo_counter_damage += 1;

					combo_counter_quen_counter += 1;
					break;

					case 2:
					if (thePlayer.GetStat(BCS_Vitality) <= thePlayer.GetStatMax(BCS_Vitality) * 0.75)
					{
						PlayerPlayAnimation( 'ethereal_attack_with_shout_001_ACS');

						RemoveTimer('ACS_Shout');
						AddTimer('ACS_Shout', 1, false);
					}
					else
					{
						PlayerPlayAnimation( 'attack_elbow_r_ACS');
					}

					combo_counter_damage += 1;

					combo_counter_quen_counter -= combo_counter_quen_counter;
					break;
				}

				/*
				
				if (combo_counter_quen_counter == 0)
				{
					PlayerPlayAnimation( 'attack_sand_hand_left_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_quen_counter += 1;
				}

				else if (combo_counter_quen_counter == 1)
				{
					if (thePlayer.GetStat(BCS_Vitality) <= thePlayer.GetStatMax(BCS_Vitality) * 0.5)
					{
						PlayerPlayAnimation( 'ethereal_attack_shout_ACS');

						RemoveTimer('ACS_Shout_Stop');
						AddTimer('ACS_Shout_Stop', 1.5, false);
					}
					else
					{
						PlayerPlayAnimation( 'attack_sand_hand_right_ACS');
					}

					combo_counter_damage += 1;

					combo_counter_quen_counter += 1;
				}

				else if (combo_counter_quen_counter == 2)
				{
					if (thePlayer.GetStat(BCS_Vitality) <= thePlayer.GetStatMax(BCS_Vitality) * 0.5)
					{
						PlayerPlayAnimation( 'ethereal_attack_with_shout_001_ACS');

						RemoveTimer('ACS_Shout');
						AddTimer('ACS_Shout', 1, false);
					}
					else
					{
						PlayerPlayAnimation( 'attack_elbow_r_ACS');
					}

					combo_counter_damage += 1;

					combo_counter_quen_counter -= combo_counter_quen_counter;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				quen_counter_index_2 = RandDifferent(this.previous_quen_counter_index_2 , 3);

				switch (quen_counter_index_2) 
				{	
					/*
					case 3:
					PlayerPlayAnimation( 'attack_sand_1_ACS');
					break;	
					*/
					
					case 2:
					if (thePlayer.GetStat(BCS_Vitality) <= thePlayer.GetStatMax(BCS_Vitality) * 0.75)
					{
						PlayerPlayAnimation( 'ethereal_attack_with_shout_001_ACS');

						RemoveTimer('ACS_Shout');
						AddTimer('ACS_Shout', 1, false);
					}
					else
					{
						PlayerPlayAnimation( 'attack_sand_hand_right_ACS');
					}
					break;	
									
					case 1:
					PlayerPlayAnimation( 'attack_sand_hand_left_ACS');
					break;	

					default:
					if (thePlayer.GetStat(BCS_Vitality) <= thePlayer.GetStatMax(BCS_Vitality) * 0.75)
					{
						PlayerPlayAnimation( 'ethereal_attack_shout_ACS');

						RemoveTimer('ACS_Shout_Stop');
						AddTimer('ACS_Shout_Stop', 1.5, false);
					}
					else
					{
						PlayerPlayAnimation( 'attack_elbow_r_ACS');
					}
					break;
				}
				
				this.previous_quen_counter_index_2 = quen_counter_index_2;
			}
		}	
	}
	
	function geraltRandomAxiiCounter() 
	{
		MovementAdjust();

		
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_axii_counter )
				{
					default:
					if( RandF() < 0.5 ) 
					{
						if( RandF() < 0.5 ) 
						{
							
							PlayerPlayAnimation( 'attack_ready_kick_01_ACS');
						}
						else
						{
							
							PlayerPlayAnimation( 'attack_ready_kick_02_ACS');
						}
					}
					else
					{
						
						PlayerPlayAnimation( 'attack_ready_kick_03_ACS');
					}


					combo_counter_damage -= combo_counter_damage;

					combo_counter_axii_counter += 1;
					break;

					case 0: 
					if( RandF() < 0.5 ) 
					{
						if( RandF() < 0.5 ) 
						{
							
							PlayerPlayAnimation( 'attack_ready_kick_01_ACS');
						}
						else
						{
							
							PlayerPlayAnimation( 'attack_ready_kick_02_ACS');
						}
					}
					else
					{
						
						PlayerPlayAnimation( 'attack_ready_kick_03_ACS');
					}


					combo_counter_damage -= combo_counter_damage;

					combo_counter_axii_counter += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'attack_ready_stepthrust_01_ACS');

					combo_counter_damage += 1;

					combo_counter_axii_counter += 1;
					break;

					case 2:
					PlayerPlayAnimation( 'attack_ready_kickswing_01_ACS');

					combo_counter_damage += 1;

					combo_counter_axii_counter -= combo_counter_axii_counter;
					break;
				}

				/*
				if (combo_counter_axii_counter == 0)
				{
					if( RandF() < 0.5 ) 
					{
						if( RandF() < 0.5 ) 
						{
							
							PlayerPlayAnimation( 'attack_ready_kick_01_ACS');
						}
						else
						{
							
							PlayerPlayAnimation( 'attack_ready_kick_02_ACS');
						}
					}
					else
					{
						
						PlayerPlayAnimation( 'attack_ready_kick_03_ACS');
					}


					combo_counter_damage -= combo_counter_damage;

					combo_counter_axii_counter += 1;
				}
				else if (combo_counter_axii_counter == 1)
				{
					
					PlayerPlayAnimation( 'attack_ready_stepthrust_01_ACS');

					combo_counter_damage += 1;

					combo_counter_axii_counter += 1;
				}
				else if (combo_counter_axii_counter == 2)
				{
					
					PlayerPlayAnimation( 'attack_ready_kickswing_01_ACS');

					combo_counter_damage += 1;

					combo_counter_axii_counter -= combo_counter_axii_counter;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				axii_counter_index_1 = RandDifferent(this.previous_axii_counter_index_1 , 3);

				switch (axii_counter_index_1) 
				{	
					case 2:
					if( RandF() < 0.5 ) 
					{
						if( RandF() < 0.5 ) 
						{
							
							PlayerPlayAnimation( 'attack_ready_kick_01_ACS');
						}
						else
						{
							
							PlayerPlayAnimation( 'attack_ready_kick_02_ACS');
						}
					}
					else
					{
						
						PlayerPlayAnimation( 'attack_ready_kick_03_ACS');
					}
					break;

					case 1:
					
					PlayerPlayAnimation( 'attack_ready_stepthrust_01_ACS');
					break;
						
					default:
					
					PlayerPlayAnimation( 'attack_ready_kickswing_01_ACS');
					break;
				}
					
				this.previous_axii_counter_index_1 = axii_counter_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_axii_counter )
				{
					default:
					if( RandF() < 0.5 ) 
					{
						if( RandF() < 0.5 ) 
						{
							
							PlayerPlayAnimation( 'attack_ready_kick_01_ACS');
						}
						else
						{
							
							PlayerPlayAnimation( 'attack_ready_kick_02_ACS');
						}
					}
					else
					{
						
						PlayerPlayAnimation( 'attack_ready_kick_03_ACS');
					}


					combo_counter_damage -= combo_counter_damage;

					combo_counter_axii_counter += 1;
					break;

					case 0: 
					if( RandF() < 0.5 ) 
					{
						if( RandF() < 0.5 ) 
						{
							
							PlayerPlayAnimation( 'attack_ready_kick_01_ACS');
						}
						else
						{
							
							PlayerPlayAnimation( 'attack_ready_kick_02_ACS');
						}
					}
					else
					{
						
						PlayerPlayAnimation( 'attack_ready_kick_03_ACS');
					}


					combo_counter_damage -= combo_counter_damage;

					combo_counter_axii_counter += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'attack_ready_stepthrust_01_ACS');

					combo_counter_damage += 1;

					combo_counter_axii_counter += 1;
					break;

					case 2:
					PlayerPlayAnimation( 'attack_ready_kickswing_01_ACS');

					combo_counter_damage += 1;

					combo_counter_axii_counter -= combo_counter_axii_counter;
					break;
				}
				
				/*
				if (combo_counter_axii_counter == 0)
				{
					if( RandF() < 0.5 ) 
					{
						if( RandF() < 0.5 ) 
						{
							
							PlayerPlayAnimation( 'attack_ready_kick_01_ACS');
						}
						else
						{
							
							PlayerPlayAnimation( 'attack_ready_kick_02_ACS');
						}
					}
					else
					{
						
						PlayerPlayAnimation( 'attack_ready_kick_03_ACS');
					}


					combo_counter_damage -= combo_counter_damage;

					combo_counter_axii_counter += 1;
				}
				else if (combo_counter_axii_counter == 1)
				{
					
					PlayerPlayAnimation( 'attack_ready_stepthrust_01_ACS');

					combo_counter_damage += 1;

					combo_counter_axii_counter += 1;
				}
				else if (combo_counter_axii_counter == 2)
				{
					
					PlayerPlayAnimation( 'attack_ready_kickswing_01_ACS');

					combo_counter_damage += 1;

					combo_counter_axii_counter -= combo_counter_axii_counter;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				axii_counter_index_2 = RandDifferent(this.previous_axii_counter_index_2 , 3);

				switch (axii_counter_index_2) 
				{		
					case 2:
					if( RandF() < 0.5 ) 
					{
						if( RandF() < 0.5 ) 
						{
							
							PlayerPlayAnimation( 'attack_ready_kick_01_ACS');
						}
						else
						{
							
							PlayerPlayAnimation( 'attack_ready_kick_02_ACS');
						}
					}
					else
					{
						
						PlayerPlayAnimation( 'attack_ready_kick_03_ACS');
					}
					break;

					case 1:
					
					PlayerPlayAnimation( 'attack_ready_stepthrust_01_ACS');
					break;
						
					default:
					
					PlayerPlayAnimation( 'attack_ready_kickswing_01_ACS');
					break;
				}
				
				this.previous_axii_counter_index_2 = axii_counter_index_2;
			}
		}	
	}
	
	function geraltRandomIgniCounter_Human() 
	{
		MovementAdjust();

		
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_igni_counter )
				{
					default:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
					break;

					case 2:
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					thePlayer.SetAnimationSpeedMultiplier( 0.25 );

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'ice_skating_attack_end_l');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
					break;

					case 3:
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					thePlayer.SetAnimationSpeedMultiplier( 0.25 );

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'ice_skating_attack_end_r');

					combo_counter_damage += 1;

					combo_counter_igni_counter -= combo_counter_igni_counter;
					break;
				}

				/*
				if (combo_counter_igni_counter == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
				}
				else if (combo_counter_igni_counter == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
				}
				else if (combo_counter_igni_counter == 2)
				{
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					thePlayer.SetAnimationSpeedMultiplier( 0.25 );

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'ice_skating_attack_end_l');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
				}
				else if (combo_counter_igni_counter == 3)
				{
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					thePlayer.SetAnimationSpeedMultiplier( 0.25 );

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'ice_skating_attack_end_r');

					combo_counter_damage += 1;

					combo_counter_igni_counter -= combo_counter_igni_counter;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5 * 1.5 ) 
				{	
					igni_counter_index_1 = RandDifferent(this.previous_igni_counter_index_1 , 2);

					switch (igni_counter_index_1) 
					{	
						case 1:
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						thePlayer.SetAnimationSpeedMultiplier( 0.25 );

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

						PlayerPlayAnimation( 'ice_skating_attack_end_l');
						break;
						
						default:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');
						break;	
					}
			
					this.previous_igni_counter_index_1 = igni_counter_index_1;
				}
				else
				{
					igni_counter_index_2 = RandDifferent(this.previous_igni_counter_index_2 , 2);

					switch (igni_counter_index_2) 
					{	
						case 1:
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						thePlayer.SetAnimationSpeedMultiplier( 0.25 );

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

						PlayerPlayAnimation( 'ice_skating_attack_end_r');
						break;

						default:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');
						break;
					}
					
					this.previous_igni_counter_index_2 = igni_counter_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_igni_counter )
				{
					default:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
					break;

					case 2:
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					thePlayer.SetAnimationSpeedMultiplier( 0.25 );

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'ice_skating_attack_end_l');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
					break;

					case 3:
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					thePlayer.SetAnimationSpeedMultiplier( 0.25 );

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'ice_skating_attack_end_r');

					combo_counter_damage += 1;

					combo_counter_igni_counter -= combo_counter_igni_counter;
					break;
				}

				/*
				if (combo_counter_igni_counter == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
				}
				else if (combo_counter_igni_counter == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
				}
				else if (combo_counter_igni_counter == 2)
				{
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					thePlayer.SetAnimationSpeedMultiplier( 0.25 );

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'ice_skating_attack_end_l');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
				}
				else if (combo_counter_igni_counter == 3)
				{
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					thePlayer.SetAnimationSpeedMultiplier( 0.25 );

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'ice_skating_attack_end_r');

					combo_counter_damage += 1;

					combo_counter_igni_counter -= combo_counter_igni_counter;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				igni_counter_index_3 = RandDifferent(this.previous_igni_counter_index_3 , 4);

				switch (igni_counter_index_3) 
				{	
					case 3:
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					thePlayer.SetAnimationSpeedMultiplier( 0.25 );

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'ice_skating_attack_end_l');
					break;	

					case 2:
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					thePlayer.SetAnimationSpeedMultiplier( 0.25 );

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'ice_skating_attack_end_r');
					break;	

					case 1:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');
					break;	

					default:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');
					break;
				}
				
				this.previous_igni_counter_index_3 = igni_counter_index_3;
			}
		}	
	}

	function geraltRandomIgniCounter_Monster() 
	{
		MovementAdjust();

		
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_igni_counter )
				{
					default:
					PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_left_rp');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_igni_counter += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_left_rp');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_igni_counter += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_right_lp');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
					break;

					case 3:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter -= combo_counter_igni_counter;
					break;

					case 4:
					PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_left_lp');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
					break;

					case 5:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
					break;

					case 6:
					PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_right_rp');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
					break;

					case 7:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter -= combo_counter_igni_counter;
					break;
				}

				/*
				if (combo_counter_igni_counter == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_left_rp');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_igni_counter += 1;
				}

				else if (combo_counter_igni_counter == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
				}

				else if (combo_counter_igni_counter == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_right_lp');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
				}

				else if (combo_counter_igni_counter == 3)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter -= combo_counter_igni_counter;
				}

				else if (combo_counter_igni_counter == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_left_lp');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
				}

				else if (combo_counter_igni_counter == 5)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
				}

				else if (combo_counter_igni_counter == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_right_rp');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
				}

				else if (combo_counter_igni_counter == 7)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter -= combo_counter_igni_counter;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5 * 1.5 ) 
				{	
					igni_counter_index_1 = RandDifferent(this.previous_igni_counter_index_1 , 3);

					switch (igni_counter_index_1) 
					{	
						case 2:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');
						break;

						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_right_lp');
						break;
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_left_rp');
						break;	
					}
			
					this.previous_igni_counter_index_1 = igni_counter_index_1;
				}
				else
				{
					igni_counter_index_2 = RandDifferent(this.previous_igni_counter_index_2 , 3);

					switch (igni_counter_index_2) 
					{	
						case 2:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');
						break;

						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_left_lp');
						break;

						default:
						PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_right_rp');
						break;
					}
					
					this.previous_igni_counter_index_2 = igni_counter_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_igni_counter )
				{
					default:
					PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_left_rp');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_igni_counter += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_left_rp');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_igni_counter += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_right_lp');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
					break;

					case 3:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter -= combo_counter_igni_counter;
					break;

					case 4:
					PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_left_lp');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
					break;

					case 5:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
					break;

					case 6:
					PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_right_rp');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
					break;

					case 7:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter -= combo_counter_igni_counter;
					break;
				}

				/*
				if (combo_counter_igni_counter == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_left_rp');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_igni_counter += 1;
				}

				else if (combo_counter_igni_counter == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
				}

				else if (combo_counter_igni_counter == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_right_lp');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
				}

				else if (combo_counter_igni_counter == 3)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter -= combo_counter_igni_counter;
				}

				else if (combo_counter_igni_counter == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_left_lp');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
				}

				else if (combo_counter_igni_counter == 5)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
				}

				else if (combo_counter_igni_counter == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_right_rp');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
				}

				else if (combo_counter_igni_counter == 7)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter -= combo_counter_igni_counter;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				igni_counter_index_3 = RandDifferent(this.previous_igni_counter_index_3 , 6);

				switch (igni_counter_index_3) 
				{
					case 5:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');
					break;

					case 4:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');
					break;

					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_right_lp');
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_left_rp');
					break;	
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_left_lp');
					break;

					default:
					PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_right_rp');
					break;
				}
				
				this.previous_igni_counter_index_3 = igni_counter_index_3;
			}
		}	
	}
	
	function geraltRandomSpearCounter() 
	{
		MovementAdjust();

		
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_spear_counter )
				{
					default:
					PlayerPlayAnimation( 'man_mage_force_blast_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_counter += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'man_mage_force_blast_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_counter += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'man_mage_force_blast_02_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_counter -= combo_counter_spear_counter;
					break;
				}

				/*
				if (combo_counter_spear_counter == 0)
				{
					PlayerPlayAnimation( 'man_mage_force_blast_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_counter += 1;
				}

				else if (combo_counter_spear_counter == 1)
				{
					PlayerPlayAnimation( 'man_mage_force_blast_02_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_counter -= combo_counter_spear_counter;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				quen_counter_index_1 = RandDifferent(this.previous_quen_counter_index_1 , 2);

				switch (quen_counter_index_1) 
				{	
					case 1:	
					PlayerPlayAnimation( 'man_mage_force_blast_02_ACS');		
					break;

					default:
					PlayerPlayAnimation( 'man_mage_force_blast_01_ACS');	
					break;
				}
					
				this.previous_quen_counter_index_1 = quen_counter_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_spear_counter )
				{
					default:
					PlayerPlayAnimation( 'man_mage_force_blast_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_counter += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'man_mage_force_blast_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_counter += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'man_mage_force_blast_02_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_counter -= combo_counter_spear_counter;
					break;
				}

				/*
				if (combo_counter_spear_counter == 0)
				{
					PlayerPlayAnimation( 'man_mage_force_blast_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_counter += 1;
				}

				else if (combo_counter_spear_counter == 1)
				{
					PlayerPlayAnimation( 'man_mage_force_blast_02_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_counter -= combo_counter_spear_counter;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				quen_counter_index_2 = RandDifferent(this.previous_quen_counter_index_2 , 2);

				switch (quen_counter_index_2) 
				{	
					case 1:	
					PlayerPlayAnimation( 'man_mage_force_blast_01_ACS');		
					break;

					default:
					PlayerPlayAnimation( 'man_mage_force_blast_02_ACS');	
					break;
				}
				
				this.previous_quen_counter_index_2 = quen_counter_index_2;
			}
		}

		AddTimer('ACS_HeadbuttDamage', 0.3, false);	
	}
	
	function geraltRandomGiantCounter() 
	{
		MovementAdjust();

		

		RemoveTimer( 'ACS_alive_check' );
		AddTimer( 'ACS_alive_check', 1, false );
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			
			PlayerPlayAnimation( 'attack_counter_caretaker_ACS');		

			/*
			yrden_counter_index_1 = RandDifferent(this.previous_yrden_counter_index_1 , 2);

			switch (yrden_counter_index_1) 
			{	
				case 1:	
				
				PlayerPlayAnimation( 'attack_counter_caretaker_ACS');		
				break;

				default:
				
				PlayerPlayAnimation( 'attack_counter_caretaker_ACS');	
				break;
			}
				
			this.previous_yrden_counter_index_1 = yrden_counter_index_1;
			*/
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			
			PlayerPlayAnimation( 'attack_counter_caretaker_ACS');	

			/*
			yrden_counter_index_2 = RandDifferent(this.previous_yrden_counter_index_2 , 2);

			switch (yrden_counter_index_2) 
			{	
				case 1:	
				
				PlayerPlayAnimation( 'attack_counter_caretaker_ACS');		
				break;

				default:
				
				PlayerPlayAnimation( 'attack_counter_caretaker_ACS');	
				break;
			}
			
			this.previous_yrden_counter_index_2 = yrden_counter_index_2;
			*/
		}	
	}

	function HeadbuttDamageActual()
	{
		var tmpBool 				: bool;
		var mc 						: EMonsterCategory;
		var tmpName 				: name;
		var attAction				: W3Action_Attack;

		actors.Clear();

		actors = thePlayer.GetNPCsAndPlayersInCone(1.65, VecHeading(thePlayer.GetHeadingVector()), 10, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Headbutt_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Headbutt_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Headbutt_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticket, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);
				
				//dmg.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, RandRangeF(damageMax,damageMin) );

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality ) - actortarget.GetStat( BCS_Vitality );

					damageMax = maxTargetVitality * 0.10; 

					damageMin = maxTargetVitality * 0.075; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence ) - actortarget.GetStat( BCS_Essence );
					
					damageMax = maxTargetEssence * 0.125; 
					
					damageMin = maxTargetEssence * 0.075; 
				}

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(50 + damageMax,50 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(50 + damageMax,50 + damageMin) );

				if (actortarget.IsGuarded()
				|| actortarget.IsCurrentlyDodging())
				{
					dmg.ClearDamage(); 

					dmg.SetHitReactionType( EHRT_Reflect, true);

					if (actortarget.HasTag('ACS_Swapped_To_Shield')
					|| ((CNewNPC)actortarget).IsShielded( NULL ) )
					{
						actortarget.SoundEvent("shield_wood_impact");
						movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
						dmg.AddEffectInfo( EET_Stagger, 0.1 );
					}
					else
					{
						thePlayer.SoundEvent("monster_bruxa_movement_whoosh_mid");
					}
				}
				else
				{
					thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

					dmg.SetHitReactionType( EHRT_Heavy, true);

					if (actortarget.HasTag('ACS_Swapped_To_Shield')
					|| ((CNewNPC)actortarget).IsShielded( NULL ) )
					{
						movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
						dmg.AddEffectInfo( EET_Stagger, 0.1 );
					}
					else
					{
						if( RandF() < 0.25 ) 
						{
							movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
							dmg.AddEffectInfo( EET_Stagger, 0.1 );
						}
					}

					thePlayer.SoundEvent("scene_cmb_fist_hit");

					thePlayer.SoundEvent("cmb_fistfight_parry");

					actortarget.PlayEffectSingle('blood');
					actortarget.StopEffect('blood');

					actortarget.PlayEffectSingle('death_blood');
					actortarget.StopEffect('death_blood');

					actortarget.PlayEffectSingle('heavy_hit');
					actortarget.StopEffect('heavy_hit');

					actortarget.PlayEffectSingle('light_hit');
					actortarget.StopEffect('light_hit');

					actortarget.PlayEffectSingle('blood_spill');
					actortarget.StopEffect('blood_spill');

					theGame.GetMonsterParamsForActor(actortarget, mc, tmpName, tmpBool, tmpBool, tmpBool);

					if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), actortarget.GetWorldPosition() ) <= 5 * 5 )
					{
						RemoveAllCoveredBlood();

						if( ((CNewNPC)actortarget).GetBloodType() == BT_Red) 
						{
							if (actortarget.HasAbility('mon_lessog_base')
							|| actortarget.HasAbility('mon_sprigan_base')
							)
							{						
								if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}
							} 
							else
							{
								if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}
							}
						}
						else if( ((CNewNPC)actortarget).GetBloodType() == BT_Green) 
						{
							if (actortarget.HasAbility('mon_kikimore_base')
							|| actortarget.HasAbility('mon_black_spider_base')
							|| actortarget.HasAbility('mon_black_spider_ep2_base')
							)
							{						
								if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}
							} 
							else 
							{
								if (!thePlayer.IsEffectActive('covered_blood_green_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_green_ACS');}
							}
						}
						else if( ((CNewNPC)actortarget).GetBloodType() == BT_Yellow) 
						{
							if (actortarget.HasAbility('mon_archespor_base'))
							{
								if (!thePlayer.IsEffectActive('covered_blood_yellow_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_yellow_ACS');}
							} 
							else 
							{
								if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}
							}
						}
						else if( ((CNewNPC)actortarget).GetBloodType() == BT_Black) 
						{
							if ( mc == MC_Vampire ) 
							{
								if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}
							}
							else if ( mc == MC_Magicals ) 
							{
								if (actortarget.HasAbility('mon_golem_base')
								|| actortarget.HasAbility('mon_djinn')
								|| actortarget.HasAbility('mon_gargoyle')
								)
								{

									if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}
								}
								else
								{
									if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}
								}
							}
							else
							{
								if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}
							}
						}
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}
						}

						RemoveTimer('ACS_RemoveCoveredBlood');
						AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
					}
				}
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;
			}		
		}
	}

	function KickDamageActual()
	{
		var tmpBool 				: bool;
		var mc 						: EMonsterCategory;
		var tmpName 				: name;

		actors.Clear();

		actors = thePlayer.GetNPCsAndPlayersInCone(1.75, VecHeading(thePlayer.GetHeadingVector()), 10, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Kick_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Kick_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Kick_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);
				
				//dmg.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, RandRangeF(damageMax,damageMin) );

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality ) - actortarget.GetStat( BCS_Vitality );

					damageMax = maxTargetVitality * 0.025; 

					damageMin = maxTargetVitality * 0.0125; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence ) - actortarget.GetStat( BCS_Essence );
					
					damageMax = maxTargetEssence * 0.0125; 
					
					damageMin = maxTargetEssence * 0.00625; 
				}

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(1 + damageMax,1 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(1 + damageMax,1 + damageMin) );

				if (actortarget.IsGuarded()
				|| actortarget.IsCurrentlyDodging())
				{
					dmg.ClearDamage(); 

					dmg.SetHitReactionType( EHRT_Reflect, true);

					if (actortarget.HasTag('ACS_Swapped_To_Shield')
					|| ((CNewNPC)actortarget).IsShielded( NULL ) )
					{
						actortarget.SoundEvent("shield_wood_impact");
						movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
						dmg.AddEffectInfo( EET_Stagger, 0.1 );
					}
					else
					{
						thePlayer.SoundEvent("monster_bruxa_movement_whoosh_mid");
					}
				}
				else
				{
					dmg.SetHitReactionType( EHRT_Heavy, true);

					if (actortarget.HasTag('ACS_Swapped_To_Shield') 
					|| ((CNewNPC)actortarget).IsShielded( NULL ) 
					)
					{
						movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
						dmg.AddEffectInfo( EET_Stagger, 0.1 );
					}
					else
					{
						if( RandF() < 0.25 ) 
						{
							movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
							dmg.AddEffectInfo( EET_Stagger, 0.1 );
						}
					}

					thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

					thePlayer.SoundEvent("scene_cmb_fist_hit");

					thePlayer.SoundEvent("cmb_fistfight_parry");

					actortarget.PlayEffectSingle('blood');
					actortarget.StopEffect('blood');

					actortarget.PlayEffectSingle('death_blood');
					actortarget.StopEffect('death_blood');

					actortarget.PlayEffectSingle('heavy_hit');
					actortarget.StopEffect('heavy_hit');

					actortarget.PlayEffectSingle('light_hit');
					actortarget.StopEffect('light_hit');

					actortarget.PlayEffectSingle('blood_spill');
					actortarget.StopEffect('blood_spill');

					theGame.GetMonsterParamsForActor(actortarget, mc, tmpName, tmpBool, tmpBool, tmpBool);

					if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), actortarget.GetWorldPosition() ) <= 5 * 5 )
					{
						RemoveAllCoveredBlood();

						if( ((CNewNPC)actortarget).GetBloodType() == BT_Red) 
						{
							if (actortarget.HasAbility('mon_lessog_base')
							|| actortarget.HasAbility('mon_sprigan_base')
							)
							{						
								if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}
							} 
							else
							{
								if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}
							}
						}
						else if( ((CNewNPC)actortarget).GetBloodType() == BT_Green) 
						{
							if (actortarget.HasAbility('mon_kikimore_base')
							|| actortarget.HasAbility('mon_black_spider_base')
							|| actortarget.HasAbility('mon_black_spider_ep2_base')
							)
							{						
								if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}
							} 
							else 
							{
								if (!thePlayer.IsEffectActive('covered_blood_green_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_green_ACS');}
							}
						}
						else if( ((CNewNPC)actortarget).GetBloodType() == BT_Yellow) 
						{
							if (actortarget.HasAbility('mon_archespor_base'))
							{
								if (!thePlayer.IsEffectActive('covered_blood_yellow_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_yellow_ACS');}
							} 
							else 
							{
								if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}
							}
						}
						else if( ((CNewNPC)actortarget).GetBloodType() == BT_Black) 
						{
							if ( mc == MC_Vampire ) 
							{
								if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}
							}
							else if ( mc == MC_Magicals ) 
							{
								if (actortarget.HasAbility('mon_golem_base')
								|| actortarget.HasAbility('mon_djinn')
								|| actortarget.HasAbility('mon_gargoyle')
								)
								{

									if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}
								}
								else
								{
									if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}
								}
							}
							else
							{
								if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}
							}
						}
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}
						}

						RemoveTimer('ACS_RemoveCoveredBlood');
						AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
					}
				}
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	function PushDamageActual()
	{
		var tmpBool 				: bool;
		var mc 						: EMonsterCategory;
		var tmpName 				: name;

		actors.Clear();

		actors = thePlayer.GetNPCsAndPlayersInCone(1.5, VecHeading(thePlayer.GetHeadingVector()), 10, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Push_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Push_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Push_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);
				
				//dmg.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, RandRangeF(damageMax,damageMin) );

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality ) - actortarget.GetStat( BCS_Vitality );

					damageMax = maxTargetVitality * 0.025; 

					damageMin = maxTargetVitality * 0.0125; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence ) - actortarget.GetStat( BCS_Essence );
					
					damageMax = maxTargetEssence * 0.0125; 
					
					damageMin = maxTargetEssence * 0.00625; 
				}

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(1 + damageMax,1 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(1 + damageMax,1 + damageMin) );

				if (actortarget.IsGuarded()
				|| actortarget.IsCurrentlyDodging())
				{
					dmg.ClearDamage(); 

					dmg.SetHitReactionType( EHRT_Reflect, true);

					if (actortarget.HasTag('ACS_Swapped_To_Shield')
					|| ((CNewNPC)actortarget).IsShielded( NULL ) )
					{
						actortarget.SoundEvent("shield_wood_impact");
						movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
						dmg.AddEffectInfo( EET_Stagger, 0.1 );
					}
					else
					{
						thePlayer.SoundEvent("monster_bruxa_movement_whoosh_mid");
					}
				}
				else
				{
					dmg.SetHitReactionType( EHRT_Heavy, true);

					if (actortarget.HasTag('ACS_Swapped_To_Shield')
					|| ((CNewNPC)actortarget).IsShielded( NULL ) )
					{
						movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
						dmg.AddEffectInfo( EET_Stagger, 0.1 );
					}
					else
					{
						if( RandF() < 0.25 ) 
						{
							movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
							dmg.AddEffectInfo( EET_Stagger, 0.1 );
						}
					}	

					thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

					thePlayer.SoundEvent("scene_cmb_fist_hit");

					thePlayer.SoundEvent("cmb_fistfight_parry");

					actortarget.PlayEffectSingle('blood');
					actortarget.StopEffect('blood');

					actortarget.PlayEffectSingle('death_blood');
					actortarget.StopEffect('death_blood');

					actortarget.PlayEffectSingle('heavy_hit');
					actortarget.StopEffect('heavy_hit');

					actortarget.PlayEffectSingle('light_hit');
					actortarget.StopEffect('light_hit');

					actortarget.PlayEffectSingle('blood_spill');
					actortarget.StopEffect('blood_spill');

					theGame.GetMonsterParamsForActor(actortarget, mc, tmpName, tmpBool, tmpBool, tmpBool);

					if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), actortarget.GetWorldPosition() ) <= 5 * 5 )
					{
						RemoveAllCoveredBlood();

						if( ((CNewNPC)actortarget).GetBloodType() == BT_Red) 
						{
							if (actortarget.HasAbility('mon_lessog_base')
							|| actortarget.HasAbility('mon_sprigan_base')
							)
							{						
								if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}
							} 
							else
							{
								if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}
							}
						}
						else if( ((CNewNPC)actortarget).GetBloodType() == BT_Green) 
						{
							if (actortarget.HasAbility('mon_kikimore_base')
							|| actortarget.HasAbility('mon_black_spider_base')
							|| actortarget.HasAbility('mon_black_spider_ep2_base')
							)
							{						
								if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}
							} 
							else 
							{
								if (!thePlayer.IsEffectActive('covered_blood_green_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_green_ACS');}
							}
						}
						else if( ((CNewNPC)actortarget).GetBloodType() == BT_Yellow) 
						{
							if (actortarget.HasAbility('mon_archespor_base'))
							{
								if (!thePlayer.IsEffectActive('covered_blood_yellow_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_yellow_ACS');}
							} 
							else 
							{
								if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}
							}
						}
						else if( ((CNewNPC)actortarget).GetBloodType() == BT_Black) 
						{
							if ( mc == MC_Vampire ) 
							{
								if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}
							}
							else if ( mc == MC_Magicals ) 
							{
								if (actortarget.HasAbility('mon_golem_base')
								|| actortarget.HasAbility('mon_djinn')
								|| actortarget.HasAbility('mon_gargoyle')
								)
								{

									if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}
								}
								else
								{
									if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}
								}
							}
							else
							{
								if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}
							}
						}
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}
						}

						RemoveTimer('ACS_RemoveCoveredBlood');
						AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
					}
				}
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}
	
	function geraltRandomGregCounter() 
	{
		MovementAdjust();

		
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
				
			//PlayerPlayAnimation( 'gregoire_attack_punch_ACS');

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				switch ( combo_counter_greg_counter )
				{
					default:
					PlayerPlayAnimation( 'man_finisher_hilt_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_greg_counter += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'man_finisher_hilt_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_greg_counter += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'man_finisher_hilt_01_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_counter -= combo_counter_greg_counter;
					break;
				}

				/*
				if (combo_counter_greg_counter == 0)
				{
					PlayerPlayAnimation( 'man_finisher_hilt_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_greg_counter += 1;
				}
				else if (combo_counter_greg_counter == 1)
				{
					PlayerPlayAnimation( 'man_finisher_hilt_01_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_counter -= combo_counter_greg_counter;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				punch_index_1 = RandDifferent(this.previous_punch_index_1 , 2);

				switch (punch_index_1) 
				{														
					case 1:
					PlayerPlayAnimation( 'man_finisher_hilt_01_lp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_finisher_hilt_01_rp_ACS');
					break;
				}
					
				this.previous_punch_index_1 = punch_index_1;
			}

			AddTimer('ACS_HeadbuttDamage', 0.3, false);
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			//PlayerPlayAnimation( 'gregoire_attack_punch_ACS');

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				switch ( combo_counter_greg_counter )
				{
					default:
					PlayerPlayAnimation( 'man_finisher_hilt_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_greg_counter += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'man_finisher_hilt_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_greg_counter += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'man_finisher_hilt_01_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_counter -= combo_counter_greg_counter;
					break;
				}

				/*
				if (combo_counter_greg_counter == 0)
				{
					PlayerPlayAnimation( 'man_finisher_hilt_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_greg_counter += 1;
				}
				else if (combo_counter_greg_counter == 1)
				{
					PlayerPlayAnimation( 'man_finisher_hilt_01_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_counter -= combo_counter_greg_counter;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				punch_index_1 = RandDifferent(this.previous_punch_index_1 , 2);

				switch (punch_index_1) 
				{														
					case 1:
					PlayerPlayAnimation( 'man_finisher_hilt_01_lp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_finisher_hilt_01_rp_ACS');
					break;
				}
					
				this.previous_punch_index_1 = punch_index_1;
			}

			AddTimer('ACS_HeadbuttDamage', 0.3, false);
		}	
	}
	
	function geraltRandomAxeCounter() 
	{
		MovementAdjust();

		
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_axe_counter )
				{
					default:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_counter += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_counter += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_counter -= combo_counter_axe_counter;
					break;
				}

				/*
				if (combo_counter_axe_counter == 0)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_counter += 1;
				}
				else if (combo_counter_axe_counter == 1)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_counter -= combo_counter_axe_counter;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				aard_counter_index_1 = RandDifferent(this.previous_aard_counter_index_1 , 2);

				switch (aard_counter_index_1) 
				{	
					case 1:	
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_03_rp_ACS');		
					break;

					default:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_rp_ACS');	
					break;
				}
					
				this.previous_aard_counter_index_1 = aard_counter_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_axe_counter )
				{
					default:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_counter += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_counter += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_counter -= combo_counter_axe_counter;
					break;
				}

				/*
				if (combo_counter_axe_counter == 0)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_counter += 1;
				}
				else if (combo_counter_axe_counter == 1)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_counter -= combo_counter_axe_counter;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				aard_counter_index_2 = RandDifferent(this.previous_aard_counter_index_2 , 2);

				switch (aard_counter_index_2) 
				{	
					case 1:	
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_03_rp_ACS');		
					break;

					default:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_rp_ACS');	
					break;
				}
				
				this.previous_aard_counter_index_2 = aard_counter_index_2;
			}
		}	
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Claw Weapon Stuff
	
	function geraltRandomClawAttack() 
	{		
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_claw_attack )
				{
					default:
					PlayerPlayAnimation( 'bruxa_attack_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_attack += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'bruxa_attack_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_attack += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'bruxa_attack_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
					break;

					case 2:
					PlayerPlayAnimation( 'bruxa_attack_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
					break;

					case 3:
					PlayerPlayAnimation( 'bruxa_attack_special_turn_left_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
					break;

					case 4:
					PlayerPlayAnimation( 'bruxa_attack_special_turn_right_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
					break;

					case 5:
					PlayerPlayAnimation( 'attack_light_01_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
					break;

					case 6:
					PlayerPlayAnimation( 'attack_light_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
					break;

					case 7:
					PlayerPlayAnimation( 'attack_counter_medium_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
					break;

					case 8:
					PlayerPlayAnimation( 'attack_counter_close_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
					break;

					case 9:
					PlayerPlayAnimation( 'attack_heavy_01_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
					break;

					case 10:
					PlayerPlayAnimation( 'attack_heavy_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
					break;

					case 11:
					PlayerPlayAnimation( 'attack_heavy_single_01_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
					break;

					case 12:
					PlayerPlayAnimation( 'attack_heavy_single_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
					break;

					case 13:
					PlayerPlayAnimation( 'attack_heavy_single_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack -= combo_counter_claw_attack;
					break;
				}
				
				/*
				if (combo_counter_claw_attack == 0)
				{
					PlayerPlayAnimation( 'bruxa_attack_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 1)
				{

					PlayerPlayAnimation( 'bruxa_attack_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 2)
				{
					PlayerPlayAnimation( 'bruxa_attack_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 3)
				{
					PlayerPlayAnimation( 'bruxa_attack_special_turn_left_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 4)
				{
					PlayerPlayAnimation( 'bruxa_attack_special_turn_right_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 5)
				{
					PlayerPlayAnimation( 'attack_light_01_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 6)
				{
					PlayerPlayAnimation( 'attack_light_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 7)
				{
					PlayerPlayAnimation( 'attack_counter_medium_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 8)
				{
					PlayerPlayAnimation( 'attack_counter_close_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 9)
				{
					PlayerPlayAnimation( 'attack_heavy_01_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 10)
				{
					PlayerPlayAnimation( 'attack_heavy_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 11)
				{
					PlayerPlayAnimation( 'attack_heavy_single_01_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 12)
				{
					PlayerPlayAnimation( 'attack_heavy_single_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 13)
				{
					PlayerPlayAnimation( 'attack_heavy_single_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack -= combo_counter_claw_attack;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5*1.5 ) 
				{	
					claw_attack_index_1 = RandDifferent(this.previous_claw_attack_index_1 , 7);

					switch (claw_attack_index_1) 
					{	
						case 6:
						PlayerPlayAnimation( 'bruxa_attack_special_turn_right_ACS');	
						break;
							
						case 5:
						PlayerPlayAnimation( 'bruxa_attack_special_turn_left_ACS');	
						break;
					
						case 4:
						PlayerPlayAnimation( 'attack_counter_medium_ACS');	
						break;

						case 3:
						PlayerPlayAnimation( 'attack_counter_close_ACS');	
						break;	
						
						case 2:
						PlayerPlayAnimation( 'bruxa_attack_03_ACS');
						break;
						
						case 1:
						PlayerPlayAnimation( 'bruxa_attack_02_ACS');
						break;
						
						default:
						PlayerPlayAnimation( 'bruxa_attack_01_ACS');
						break;
					}
			
					this.previous_claw_attack_index_1 = claw_attack_index_1;
				}
				else
				{
					claw_attack_index_2 = RandDifferent(this.previous_claw_attack_index_2 , 7);

					switch (claw_attack_index_2) 
					{								
						case 6:
						PlayerPlayAnimation( 'attack_heavy_single_03_ACS');	
						break;
						
						case 5:	
						PlayerPlayAnimation( 'attack_heavy_single_02_ACS');	
						break;

						case 4:
						PlayerPlayAnimation( 'attack_heavy_single_01_ACS');	
						break;

						case 3:
						PlayerPlayAnimation( 'attack_heavy_02_ACS');	
						break;
						
						case 2:
						PlayerPlayAnimation( 'attack_heavy_01_ACS');	
						break;
						
						case 1:
						PlayerPlayAnimation( 'attack_light_02_ACS');	
						break;

						default:
						PlayerPlayAnimation( 'attack_light_01_ACS');	
						break;
					}
					
					this.previous_claw_attack_index_2 = claw_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_claw_attack )
				{
					default:
					PlayerPlayAnimation( 'bruxa_attack_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_attack += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'bruxa_attack_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_attack += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'bruxa_attack_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
					break;

					case 2:
					PlayerPlayAnimation( 'bruxa_attack_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
					break;

					case 3:
					PlayerPlayAnimation( 'bruxa_attack_special_turn_left_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
					break;

					case 4:
					PlayerPlayAnimation( 'bruxa_attack_special_turn_right_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
					break;

					case 5:
					PlayerPlayAnimation( 'attack_light_01_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
					break;

					case 6:
					PlayerPlayAnimation( 'attack_light_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
					break;

					case 7:
					PlayerPlayAnimation( 'attack_counter_medium_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
					break;

					case 8:
					PlayerPlayAnimation( 'attack_counter_close_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
					break;

					case 9:
					PlayerPlayAnimation( 'attack_heavy_01_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
					break;

					case 10:
					PlayerPlayAnimation( 'attack_heavy_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
					break;

					case 11:
					PlayerPlayAnimation( 'attack_heavy_single_01_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
					break;

					case 12:
					PlayerPlayAnimation( 'attack_heavy_single_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
					break;

					case 13:
					PlayerPlayAnimation( 'attack_heavy_single_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack -= combo_counter_claw_attack;
					break;
				}
				
				/*
				if (combo_counter_claw_attack == 0)
				{
					PlayerPlayAnimation( 'bruxa_attack_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 1)
				{

					PlayerPlayAnimation( 'bruxa_attack_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 2)
				{
					PlayerPlayAnimation( 'bruxa_attack_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 3)
				{
					PlayerPlayAnimation( 'bruxa_attack_special_turn_left_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 4)
				{
					PlayerPlayAnimation( 'bruxa_attack_special_turn_right_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 5)
				{
					PlayerPlayAnimation( 'attack_light_01_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 6)
				{
					PlayerPlayAnimation( 'attack_light_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 7)
				{
					PlayerPlayAnimation( 'attack_counter_medium_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 8)
				{
					PlayerPlayAnimation( 'attack_counter_close_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 9)
				{
					PlayerPlayAnimation( 'attack_heavy_01_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 10)
				{
					PlayerPlayAnimation( 'attack_heavy_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 11)
				{
					PlayerPlayAnimation( 'attack_heavy_single_01_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 12)
				{
					PlayerPlayAnimation( 'attack_heavy_single_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 13)
				{
					PlayerPlayAnimation( 'attack_heavy_single_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack -= combo_counter_claw_attack;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				claw_attack_index_3 = RandDifferent(this.previous_claw_attack_index_3 , 14);

				switch (claw_attack_index_3) 
				{	
					case 13:
					PlayerPlayAnimation( 'bruxa_attack_special_turn_right_ACS');	
					break;
							
					case 12:
					PlayerPlayAnimation( 'bruxa_attack_special_turn_left_ACS');	
					break;
						
					case 11:	
					PlayerPlayAnimation( 'attack_heavy_single_03_ACS');	
					break;
					
					case 10:
					PlayerPlayAnimation( 'attack_heavy_single_02_ACS');	
					break;

					case 9:	
					PlayerPlayAnimation( 'attack_heavy_single_01_ACS');	
					break;

					case 8:
					PlayerPlayAnimation( 'attack_heavy_02_ACS');	
					break;
					
					case 7:
					PlayerPlayAnimation( 'attack_heavy_01_ACS');	
					break;
					
					case 6:
					PlayerPlayAnimation( 'bruxa_attack_03_ACS');	
					break;
					
					case 5:
					PlayerPlayAnimation( 'bruxa_attack_02_ACS');	
					break;
					
					case 4:
					PlayerPlayAnimation( 'bruxa_attack_01_ACS');	
					break;
					
					case 3:
					PlayerPlayAnimation( 'attack_counter_medium_ACS');	
					break;

					case 2:
					PlayerPlayAnimation( 'attack_counter_close_ACS');	
					break;	
					
					case 1:
					PlayerPlayAnimation( 'attack_light_02_ACS');	
					break;

					default:
					PlayerPlayAnimation( 'attack_light_01_ACS');	
					break;
				}
				
				this.previous_claw_attack_index_3 = claw_attack_index_3;
			}
		}	
	}
	
	function geraltRandomClawComboAttack() 
	{		
		MovementAdjust();

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_claw_attack_alt )
				{
					default:
					PlayerPlayAnimation( 'attack_combo_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_attack_alt += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'attack_combo_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_attack_alt += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'attack_combo_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack_alt += 1;
					break;

					case 2:
					PlayerPlayAnimation( 'attack_combo_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack_alt -= combo_counter_claw_attack_alt;
					break;
				}
				
				/*
				if (combo_counter_claw_attack_alt == 0)
				{
					PlayerPlayAnimation( 'attack_combo_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_attack_alt += 1;
				}

				else if (combo_counter_claw_attack_alt == 1)
				{
					PlayerPlayAnimation( 'attack_combo_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack_alt += 1;
				}

				else if (combo_counter_claw_attack_alt == 2)
				{
					PlayerPlayAnimation( 'attack_combo_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack_alt -= combo_counter_claw_attack_alt;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				claw_attack_alt_index_1 = RandDifferent(this.previous_claw_attack_alt_index_1 , 3);

				switch (claw_attack_alt_index_1) 
				{												
					case 2:
					PlayerPlayAnimation( 'attack_combo_03_ACS');	
					break;
						
					case 1:
					PlayerPlayAnimation( 'attack_combo_02_ACS');	
					break;
						
					default:	
					PlayerPlayAnimation( 'attack_combo_01_ACS');	
					break;
				}
					
				this.previous_claw_attack_alt_index_1 = claw_attack_alt_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_claw_attack_alt )
				{
					default:
					PlayerPlayAnimation( 'attack_combo_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_attack_alt += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'attack_combo_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_attack_alt += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'attack_combo_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack_alt += 1;
					break;

					case 2:
					PlayerPlayAnimation( 'attack_combo_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack_alt -= combo_counter_claw_attack_alt;
					break;
				}
				
				/*
				if (combo_counter_claw_attack_alt == 0)
				{
					PlayerPlayAnimation( 'attack_combo_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_attack_alt += 1;
				}

				else if (combo_counter_claw_attack_alt == 1)
				{
					PlayerPlayAnimation( 'attack_combo_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack_alt += 1;
				}

				else if (combo_counter_claw_attack_alt == 2)
				{
					PlayerPlayAnimation( 'attack_combo_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack_alt -= combo_counter_claw_attack_alt;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				claw_attack_alt_index_3 = RandDifferent(this.previous_claw_attack_alt_index_3 , 3);

				switch (claw_attack_alt_index_3) 
				{	
					case 2:
					PlayerPlayAnimation( 'attack_combo_03_ACS');	
					break;
						
					case 1:
					PlayerPlayAnimation( 'attack_combo_02_ACS');	
					break;
						
					default:	
					PlayerPlayAnimation( 'attack_combo_01_ACS');	
					break;
				}
				
				this.previous_claw_attack_alt_index_3 = claw_attack_alt_index_3;
			}
		}	
	}
	
	function jump_attack()
	{
		MovementAdjust();
		
		thePlayer.BreakAttachment();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if( targetDistance <= 3*3 ) 
			{
				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
					}
				}

				if (thePlayer.IsAnyWeaponHeld())
				{
					if (thePlayer.IsWeaponHeld('fist')
					|| thePlayer.HasTag('vampire_claws_equipped')
					|| thePlayer.HasTag('aard_sword_equipped'))
					{
						thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");
						
						thePlayer.SoundEvent("monster_dettlaff_monster_construct_whoosh_claws_large");

						PlayerPlayAnimation( 'bruxa_jump_up_attack_ACS');
					}
					else
					{
						movementAdjustor.AdjustmentDuration( ticket, 1 );

						thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");

						jump_attack_index_1 = RandDifferent(this.previous_jump_attack_index_1 , 2);

						switch (jump_attack_index_1) 
						{	
							case 1:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
							break;
							
							default:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
							break;
						}
						
						this.previous_jump_attack_index_1 = jump_attack_index_1;
					}
				}
			}
			if( targetDistance > 3*3 && targetDistance <= 5*5 ) 
			{
				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
					movementAdjustor.SlideTowards( ticket, actor, distJump, distJump );
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
						movementAdjustor.SlideTowards( ticket, actor, distJump, distJump );
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
						movementAdjustor.SlideTo( ticket, ACSPlayerFixZAxis( ( thePlayer.GetWorldPosition() + thePlayer.GetWorldForward() * 2.5 ) + theCamera.GetCameraDirection() + theCamera.GetCameraForward() * 2.5) );
					}
				}

				if (thePlayer.IsAnyWeaponHeld())
				{
					if (thePlayer.IsWeaponHeld('fist')
					|| thePlayer.HasTag('vampire_claws_equipped')
					|| thePlayer.HasTag('aard_sword_equipped'))
					{
						thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");
						
						thePlayer.SoundEvent("monster_dettlaff_monster_construct_whoosh_claws_large");

						PlayerPlayAnimation( 'bruxa_jump_up_attack_ACS');
					}
					else
					{
						movementAdjustor.AdjustmentDuration( ticket, 1 );

						thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");

						jump_attack_index_1 = RandDifferent(this.previous_jump_attack_index_1 , 2);

						switch (jump_attack_index_1) 
						{	
							case 1:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
							break;
							
							default:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
							break;
						}
						
						this.previous_jump_attack_index_1 = jump_attack_index_1;	
					}
				}
			}
			else if( targetDistance > 5*5 && targetDistance <= 15*15 ) 
			{
				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
					movementAdjustor.SlideTowards( ticket, actor, distJump, distJump );
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
						movementAdjustor.SlideTowards( ticket, actor, distJump, distJump );
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
						movementAdjustor.SlideTo( ticket, ACSPlayerFixZAxis( ( thePlayer.GetWorldPosition() + thePlayer.GetWorldForward() * 3.25 ) + theCamera.GetCameraDirection() + theCamera.GetCameraForward() * 3.25) );
					}
				}

				if (thePlayer.IsAnyWeaponHeld())
				{
					if (thePlayer.IsWeaponHeld('fist')
					|| thePlayer.HasTag('aard_sword_equipped')
					|| thePlayer.HasTag('vampire_claws_equipped')
					)
					{
						thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");
						
						thePlayer.SoundEvent("monster_dettlaff_monster_construct_whoosh_claws_large");

						PlayerPlayAnimation( 'bruxa_jump_up_attack_ACS');
					}
					else
					{
						movementAdjustor.AdjustmentDuration( ticket, 1 );

						thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");

						jump_attack_index_1 = RandDifferent(this.previous_jump_attack_index_1 , 2);

						switch (jump_attack_index_1) 
						{	
							case 1:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
							break;
							
							default:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
							break;
						}
						
						this.previous_jump_attack_index_1 = jump_attack_index_1;	
					}
				}
			}
			else if( targetDistance > 15*15 ) 
			{
				if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				movementAdjustor.SlideTo( ticket, ACSPlayerFixZAxis( ( thePlayer.GetWorldPosition() + thePlayer.GetWorldForward() * 3.25 ) + theCamera.GetCameraDirection() + theCamera.GetCameraForward() * 3.25) );

				if (thePlayer.IsAnyWeaponHeld())
				{
					if (thePlayer.IsWeaponHeld('fist')
					|| thePlayer.HasTag('aard_sword_equipped')
					|| thePlayer.HasTag('vampire_claws_equipped')
					)
					{
						thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");
						
						thePlayer.SoundEvent("monster_dettlaff_monster_construct_whoosh_claws_large");

						PlayerPlayAnimation( 'bruxa_jump_up_attack_ACS');
					}
					else
					{
						movementAdjustor.AdjustmentDuration( ticket, 1 );

						thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");

						jump_attack_index_1 = RandDifferent(this.previous_jump_attack_index_1 , 2);

						switch (jump_attack_index_1) 
						{	
							case 1:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
							break;
							
							default:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
							break;
						}
						
						this.previous_jump_attack_index_1 = jump_attack_index_1;	
					}
				}
			}
		}
		else
		{
			if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); 
			
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			movementAdjustor.SlideTo( ticket, ACSPlayerFixZAxis( ( thePlayer.GetWorldPosition() + thePlayer.GetWorldForward() * 3.25 ) + theCamera.GetCameraDirection() + theCamera.GetCameraForward() * 3.25) );
			
			if (thePlayer.IsAnyWeaponHeld())
			{
				if (thePlayer.IsWeaponHeld('fist')
				|| thePlayer.HasTag('aard_sword_equipped')
				|| thePlayer.HasTag('vampire_claws_equipped')
				)
				{
					thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");
					
					thePlayer.SoundEvent("monster_dettlaff_monster_construct_whoosh_claws_large");

					PlayerPlayAnimation( 'bruxa_jump_up_attack_ACS');
				}
				else
				{
					movementAdjustor.AdjustmentDuration( ticket, 1 );

					thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");

					if( RandF() < 0.5 ) 
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
					}
					else
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
					}	
				}
			}
		}
	}

	function Rock_Pillar()
	{
		var vACS_Rock_Pillar : cACS_Rock_Pillar;
		vACS_Rock_Pillar = new cACS_Rock_Pillar in this;
				
		vACS_Rock_Pillar.ACS_Rock_Pillar_Engage();
	}

	public timer function SuperheroLandingEffectsDelay(deltaTime : float , id : int)
	{
		if 
		(
		GetWeatherConditionName() == 'WT_Blizzard' 
		|| GetWeatherConditionName() == 'WT_Rain_Storm' 
		|| GetWeatherConditionName() == 'WT_Battle' 
		|| GetWeatherConditionName() == 'WT_Battle_Forest' 
		|| GetWeatherConditionName() == 'WT_Wild_Hunt' 
		|| GetWeatherConditionName() == 'WT_q501_Blizzard' 
		|| GetWeatherConditionName() == 'WT_q501_Storm' 
		|| GetWeatherConditionName() == 'WT_q501_Blizzard2' 
		|| GetWeatherConditionName() == 'WT_q501_fight_ship_18_00' 
		|| GetWeatherConditionName() == 'WT_q501_storm_arena' 
		|| GetWeatherConditionName() == 'Spiral_Eternal_Cold' 
		|| GetWeatherConditionName() == 'Spiral_Dark_Valley'
		|| GetWeatherConditionName() == 'WT_Rain_Heavy' 
		|| GetWeatherConditionName() == 'WT_Rain_Dark' 
		)
		{
			ACS_Lightning_Area();
		
			ACS_Giant_Lightning_Strike_Mult();
		}
		
		Rock_Pillar();
	}
	
	function air_jump_attack()
	{
		MovementAdjust();
		
		thePlayer.BreakAttachment();

		RemoveTimer('SuperheroLandingEffectsDelay');

		AddTimer('SuperheroLandingEffectsDelay', 0.25, false);
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

			movementAdjustor.SlideTowards( ticket, actor, distJump, distJump );
			
			if (thePlayer.HasTag('vampire_claws_equipped'))
			{
				thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");

				thePlayer.SoundEvent("monster_dettlaff_monster_construct_whoosh_claws_large");

				PlayerPlayAnimation( 'bruxa_jump_up_attack_ACS');
			}
			else
			{
				thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");

				PlayerPlayAnimation( 'bruxa_jump_up_stop_ACS');
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			movementAdjustor.SlideTo( ticket, ACSPlayerFixZAxis(theCamera.GetCameraPosition() + theCamera.GetCameraDirection() * 7.5) );
			
			if (thePlayer.HasTag('vampire_claws_equipped'))
			{
				thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");

				thePlayer.SoundEvent("monster_dettlaff_monster_construct_whoosh_claws_large");

				PlayerPlayAnimation( 'bruxa_jump_up_attack_ACS');
			}
			else
			{
				thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");

				PlayerPlayAnimation( 'bruxa_jump_up_stop_ACS');
			}
		}
	}
	
	function geraltRandomAttackSpecialDash() 
	{
		var actorPos, newActorPos			: Vector;

		//theGame.SetTimeScale( 0.75, theGame.GetTimescaleSource( ETS_InstantKill ), theGame.GetTimescalePriority( ETS_InstantKill ), false, true );

		//AddTimer( 'RemoveInstantKillSloMo', 0.3 );

		Bruxa_Camo_Decoy_Deactivate();

		MovementAdjust();

		dodge_timer_attack_actual();

		thePlayer.SetIsCurrentlyDodging(true);

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{		
			if( targetDistance <= 3.5 * 3.5 ) 
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

				RemoveTimer('SpecialDashCloseSlideDelay');

				if (actor.IsOnGround() && !((CNewNPC)actor).IsFlying())
				{
					AddTimer('SpecialDashCloseSlideDelay', 0.375, false);
				}
				
				thePlayer.StopEffect('shadowdash_shockwave');

				thePlayer.PlayEffectSingle('shadowdash_shockwave');

				thePlayer.StopEffect('shadowdash_shockwave');

				if (!thePlayer.HasTag('ACS_Camo_Active') && ACS_DodgeEffects_Enabled() )
				{
					thePlayer.StopEffect( 'magic_step_l_new' );	
					thePlayer.PlayEffectSingle( 'magic_step_l_new' );

					thePlayer.StopEffect( 'magic_step_r_new' );	
					thePlayer.PlayEffectSingle( 'magic_step_r_new' );
				}

				PlayerPlayAnimation( 'attack_special_dash_close_ACS');

				if (!thePlayer.HasTag('ACS_Vampire_Dash_Attack'))
				{
					thePlayer.AddTag('ACS_Vampire_Dash_Attack');
				}
			}
			else if( targetDistance > 3.5 * 3.5 && targetDistance <= 10 * 10 ) 
			{
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

				if (!thePlayer.HasTag('ACS_Camo_Active') && ACS_DodgeEffects_Enabled() )
				{
					thePlayer.StopEffect( 'magic_step_l_new' );	
					thePlayer.PlayEffectSingle( 'magic_step_l_new' );

					thePlayer.StopEffect( 'magic_step_r_new' );	
					thePlayer.PlayEffectSingle( 'magic_step_r_new' );
				}

				thePlayer.StopEffect('shadowdash_shockwave');

				thePlayer.PlayEffectSingle('shadowdash_shockwave');

				thePlayer.StopEffect('shadowdash_shockwave');

				attack_special_dash_index_1 = RandDifferent(this.previous_attack_special_dash_index_1 , 3);

				switch (attack_special_dash_index_1) 
				{	
					case 2:

					PlayerPlayAnimation( 'attack_special_dash_close_ACS');

					thePlayer.AddTag('ACS_Vampire_Dash_Close');

					AddTimer('ACS_bruxa_tackle', 0.375  , false);
					break;

					case 1:

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }	
						
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'attack_special_dash_medium_02_ACS');

					AddTimer('ACS_bruxa_tackle', 0.5  , false);
					break;
					
					default:

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }	
						
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'attack_special_dash_medium_01_ACS');	

					AddTimer('ACS_bruxa_tackle', 0.75  , false);
					break;
				}
				
				this.previous_attack_special_dash_index_1 = attack_special_dash_index_1;

				if (!thePlayer.HasTag('ACS_Vampire_Dash_Attack'))
				{
					thePlayer.AddTag('ACS_Vampire_Dash_Attack');
				}
			}
			else
			{
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
							
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }	
						
				AddTimer('ACS_ResetAnimation', 0.75 , false);

				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

				if (!thePlayer.HasTag('ACS_Camo_Active') && ACS_DodgeEffects_Enabled() )
				{
					thePlayer.StopEffect( 'magic_step_l_new' );	
					thePlayer.PlayEffectSingle( 'magic_step_l_new' );

					thePlayer.StopEffect( 'magic_step_r_new' );	
					thePlayer.PlayEffectSingle( 'magic_step_r_new' );
				}

				thePlayer.StopEffect('shadowdash_shockwave');

				thePlayer.PlayEffectSingle('shadowdash_shockwave');

				thePlayer.StopEffect('shadowdash_shockwave');

				PlayerPlayAnimation( 'attack_special_dash_medium_01_ACS');

				AddTimer('ACS_bruxa_tackle', 0.75 , false);
			}
		}
		else
		{
			if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}

			if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			attack_special_dash_index_1 = RandDifferent(this.previous_attack_special_dash_index_1 , 3);

			switch (attack_special_dash_index_1) 
			{	
				case 2:
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2  ); }	
						
				AddTimer('ACS_ResetAnimation', 0.25 , false);

				PlayerPlayAnimation( 'attack_special_dash_close_ACS');
				break;

				case 1:
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2  ); }	
						
				AddTimer('ACS_ResetAnimation', 0.75 , false);

				PlayerPlayAnimation( 'attack_special_dash_medium_02_ACS');
				break;
				
				default:
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2  ); }	
						
				AddTimer('ACS_ResetAnimation', 0.75 , false);

				PlayerPlayAnimation( 'attack_special_dash_medium_01_ACS');	
				break;
			}
			
			this.previous_attack_special_dash_index_1 = attack_special_dash_index_1;
		}			
	}

	function SpecialDashCloseSlideDelayActual()
	{
		var actorPos, newActorPos			: Vector;

		MovementAdjust();

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			actorPos = ACSPlayerFixZAxis(actor.PredictWorldPosition(0.25)) + VecFromHeading( AngleNormalize180( thePlayer.GetHeading() - dist ) ) * 4;

			if( !theGame.GetWorld().NavigationFindSafeSpot( actorPos, 0.3, 0.3 , newActorPos ) )
			{
				theGame.GetWorld().NavigationFindSafeSpot( actorPos, 0.3, 4 , newActorPos );
				actorPos = newActorPos;
			}

			SpecialDashCloseDamage();

			special_dash_close_dodge_timer_actual();

			movementAdjustor.AdjustmentDuration( ticket, 0.125 );

			movementAdjustor.SlideTo( ticket, ACSPlayerFixZAxis(actorPos) );
			
			if (!ACS_HideVampireClaws_Enabled())
			{
				thePlayer.StopEffect('shadowdash_shockwave');

				thePlayer.PlayEffectSingle('shadowdash_shockwave');

				thePlayer.StopEffect('shadowdash_shockwave');
			}
			
			if (!thePlayer.HasTag('ACS_Camo_Active') && ACS_DodgeEffects_Enabled() )
			{
				thePlayer.StopEffect( 'magic_step_l_new' );	
				thePlayer.PlayEffectSingle( 'magic_step_l_new' );

				thePlayer.StopEffect( 'magic_step_r_new' );	
				thePlayer.PlayEffectSingle( 'magic_step_r_new' );

				//thePlayer.PlayEffectSingle('dash_close_fx');
				thePlayer.StopEffect('dash_close_fx');
			}
		}
	}

	function SpecialDashCloseDamage()
	{
		var tmpBool 				: bool;
		var mc 						: EMonsterCategory;
		var tmpName 				: name;
		var actors	    			: array<CActor>;
		var i 						: int;
		var dmg						: W3DamageAction;
		var actortarget	    		: CActor;
		var curTargetVitality, maxTargetVitality, curTargetEssence, maxTargetEssence, finisherDist, vampireDmgValSteel, vampireDmgValSilver										: float;
		var item_steel, item_silver																																				: SItemUniqueId;
	
		thePlayer.GetInventory().GetItemEquippedOnSlot(EES_SteelSword, item_steel);

		thePlayer.GetInventory().GetItemEquippedOnSlot(EES_SilverSword, item_silver);

		actors.Clear();

		actors = thePlayer.GetNPCsAndPlayersInCone(5, 

		AngleNormalize180( VecHeading(thePlayer.GetHeadingVector()) )
		
		, 45, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Special_Dash_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Special_Dash_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Special_Dash_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);
	
				if (actortarget.UsesVitality()) 
				{
					thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

					vampireDmgValSteel = thePlayer.GetTotalWeaponDamage(item_steel, theGame.params.DAMAGE_NAME_SLASHING, GetInvalidUniqueId()) 
					+ thePlayer.GetTotalWeaponDamage(item_steel, theGame.params.DAMAGE_NAME_PIERCING, GetInvalidUniqueId())
					+ thePlayer.GetTotalWeaponDamage(item_steel, theGame.params.DAMAGE_NAME_BLUDGEONING, GetInvalidUniqueId());

					dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, vampireDmgValSteel );

					dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, (actortarget.GetMaxHealth() - actortarget.GetCurrentHealth()) * 0.15 );
				} 
				else if (actortarget.UsesEssence()) 
				{
					thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.1 ); 

					vampireDmgValSilver = thePlayer.GetTotalWeaponDamage(item_silver, theGame.params.DAMAGE_NAME_SILVER, GetInvalidUniqueId()); 

					dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, vampireDmgValSilver );

					dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, (actortarget.GetMaxHealth() - actortarget.GetCurrentHealth()) * 0.15 );
				}

				if( ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					((CNewNPC)actortarget).ProcessShieldDestruction();
				}

				dmg.SetHitReactionType( EHRT_Heavy );

				dmg.SetForceExplosionDismemberment();

				//dmg.AddEffectInfo( EET_Stagger, 0.5 );

				thePlayer.GainStat( BCS_Vitality, thePlayer.GetStatMax(BCS_Vitality) * 0.025 ); 

				thePlayer.SoundEvent("cmb_play_dismemberment_gore");

				thePlayer.SoundEvent("monster_dettlaff_monster_vein_hit_blood");

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');

				theGame.GetMonsterParamsForActor(actortarget, mc, tmpName, tmpBool, tmpBool, tmpBool);

				if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), actortarget.GetWorldPosition() ) <= 5 * 5 )
				{
					RemoveAllCoveredBlood();

					if( ((CNewNPC)actortarget).GetBloodType() == BT_Red) 
					{
						if (actortarget.HasAbility('mon_lessog_base')
						|| actortarget.HasAbility('mon_sprigan_base')
						)
						{						
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}
						} 
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Green) 
					{
						if (actortarget.HasAbility('mon_kikimore_base')
						|| actortarget.HasAbility('mon_black_spider_base')
						|| actortarget.HasAbility('mon_black_spider_ep2_base')
						)
						{						
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}
						} 
						else 
						{
							if (!thePlayer.IsEffectActive('covered_blood_green_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_green_ACS');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Yellow) 
					{
						if (actortarget.HasAbility('mon_archespor_base'))
						{
							if (!thePlayer.IsEffectActive('covered_blood_yellow_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_yellow_ACS');}
						} 
						else 
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Black) 
					{
						if ( mc == MC_Vampire ) 
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}
						}
						else if ( mc == MC_Magicals ) 
						{
							if (actortarget.HasAbility('mon_golem_base')
							|| actortarget.HasAbility('mon_djinn')
							|| actortarget.HasAbility('mon_gargoyle')
							)
							{

								if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}
							}
							else
							{
								if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}
							}
						}
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}
						}
					}
					else
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}
					}

					RemoveTimer('ACS_RemoveCoveredBlood');
					AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
				}
	
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	function SpecialDashCloseSlideDelayCiriActual()
	{
		var actorPos, newActorPos			: Vector;

		MovementAdjust();

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			actorPos = ACSPlayerFixZAxis(actor.PredictWorldPosition(0.25)) + VecFromHeading( AngleNormalize180( thePlayer.GetHeading() - dist ) ) * 4;

			if( !theGame.GetWorld().NavigationFindSafeSpot( actorPos, 0.3, 0.3 , newActorPos ) )
			{
				theGame.GetWorld().NavigationFindSafeSpot( actorPos, 0.3, 4 , newActorPos );
				actorPos = newActorPos;
			}

			SpecialDashCloseCiriDamage();

			special_dash_close_dodge_timer_actual();

			movementAdjustor.AdjustmentDuration( ticket, 0.125 );

			movementAdjustor.SlideTo( ticket, ACSPlayerFixZAxis(actorPos) );

			thePlayer.StopEffect('shadowdash_shockwave');

			thePlayer.PlayEffectSingle('shadowdash_shockwave');

			thePlayer.StopEffect('shadowdash_shockwave');
		}
	}

	function SpecialDashCloseCiriDamage()
	{
		var tmpBool 				: bool;
		var mc 						: EMonsterCategory;
		var tmpName 				: name;
		var actors	    			: array<CActor>;
		var i 						: int;
		var dmg						: W3DamageAction;
		var actortarget	    		: CActor;
		var curTargetVitality, maxTargetVitality, curTargetEssence, maxTargetEssence, finisherDist, vampireDmgValSteel, vampireDmgValSilver										: float;
		var item_steel, item_silver																																				: SItemUniqueId;
	
		thePlayer.GetInventory().GetItemEquippedOnSlot(EES_SteelSword, item_steel);

		thePlayer.GetInventory().GetItemEquippedOnSlot(EES_SilverSword, item_silver);

		actors.Clear();

		actors = thePlayer.GetNPCsAndPlayersInCone(15, 

		AngleNormalize180( VecHeading(thePlayer.GetHeadingVector()) )
		
		, 30, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Special_Dash_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Special_Dash_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Special_Dash_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);
	
				if (actortarget.UsesVitality()) 
				{
					thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

					vampireDmgValSteel = thePlayer.GetTotalWeaponDamage(item_steel, theGame.params.DAMAGE_NAME_SLASHING, GetInvalidUniqueId()) 
					+ thePlayer.GetTotalWeaponDamage(item_steel, theGame.params.DAMAGE_NAME_PIERCING, GetInvalidUniqueId())
					+ thePlayer.GetTotalWeaponDamage(item_steel, theGame.params.DAMAGE_NAME_BLUDGEONING, GetInvalidUniqueId());

					dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, vampireDmgValSteel );

					dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, (actortarget.GetMaxHealth() - actortarget.GetCurrentHealth()) * 0.15 );
				} 
				else if (actortarget.UsesEssence()) 
				{
					thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.1 ); 

					vampireDmgValSilver = thePlayer.GetTotalWeaponDamage(item_silver, theGame.params.DAMAGE_NAME_SILVER, GetInvalidUniqueId()); 

					dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, vampireDmgValSilver );

					dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, (actortarget.GetMaxHealth() - actortarget.GetCurrentHealth()) * 0.15 );
				}

				if( ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					((CNewNPC)actortarget).ProcessShieldDestruction();
				}

				dmg.SetHitReactionType( EHRT_Heavy );

				dmg.SetForceExplosionDismemberment();

				//dmg.AddEffectInfo( EET_Stagger, 0.5 );

				//thePlayer.SoundEvent("cmb_play_dismemberment_gore");

				npc.SoundEvent("cmb_play_ger_stab_in");
				GetWitcherPlayer().SoundEvent("cmb_play_ger_stab_in");

				npc.SoundEvent("cmb_play_ger_stab_out");
				GetWitcherPlayer().SoundEvent("cmb_play_ger_stab_out");

				//thePlayer.SoundEvent("monster_dettlaff_monster_vein_hit_blood");

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');

				theGame.GetMonsterParamsForActor(actortarget, mc, tmpName, tmpBool, tmpBool, tmpBool);

				if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), actortarget.GetWorldPosition() ) <= 5 * 5 )
				{
					RemoveAllCoveredBlood();

					if( ((CNewNPC)actortarget).GetBloodType() == BT_Red) 
					{
						if (actortarget.HasAbility('mon_lessog_base')
						|| actortarget.HasAbility('mon_sprigan_base')
						)
						{						
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}
						} 
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Green) 
					{
						if (actortarget.HasAbility('mon_kikimore_base')
						|| actortarget.HasAbility('mon_black_spider_base')
						|| actortarget.HasAbility('mon_black_spider_ep2_base')
						)
						{						
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}
						} 
						else 
						{
							if (!thePlayer.IsEffectActive('covered_blood_green_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_green_ACS');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Yellow) 
					{
						if (actortarget.HasAbility('mon_archespor_base'))
						{
							if (!thePlayer.IsEffectActive('covered_blood_yellow_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_yellow_ACS');}
						} 
						else 
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Black) 
					{
						if ( mc == MC_Vampire ) 
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}
						}
						else if ( mc == MC_Magicals ) 
						{
							if (actortarget.HasAbility('mon_golem_base')
							|| actortarget.HasAbility('mon_djinn')
							|| actortarget.HasAbility('mon_gargoyle')
							)
							{

								if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}
							}
							else
							{
								if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}
							}
						}
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}
						}
					}
					else
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}
					}

					RemoveTimer('ACS_RemoveCoveredBlood');
					AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
				}
	
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	public timer function SpecialDashCloseSlideDelay(deltaTime : float , id : int)
	{
		if (thePlayer.HasTag('vampire_claws_equipped'))
		{
			SpecialDashCloseSlideDelayActual();
		}
		else if (ACS_Zireael_Check() || ACS_Armor_Equipped_Check())
		{
			SpecialDashCloseSlideDelayCiriActual();
		}
	}

	function geraltRandomClawAttackSpecialDash() 
	{
		var actorPos, newActorPos			: Vector;

		Bruxa_Camo_Decoy_Deactivate();

		MovementAdjust();

		dodge_timer_attack_actual();

		thePlayer.SetIsCurrentlyDodging(true);

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{		
			if( targetDistance <= 3.5 * 3.5 ) 
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

				RemoveTimer('SpecialDashCloseSlideDelay');

				if (actor.IsOnGround() && !((CNewNPC)actor).IsFlying())
				{
					AddTimer('SpecialDashCloseSlideDelay', 0.375, false);
				}

				if (!ACS_HideVampireClaws_Enabled())
				{
					thePlayer.StopEffect('shadowdash_shockwave');

					thePlayer.PlayEffectSingle('shadowdash_shockwave');

					thePlayer.StopEffect('shadowdash_shockwave');
				}

				if (!thePlayer.HasTag('ACS_Camo_Active') && ACS_DodgeEffects_Enabled() )
				{
					thePlayer.StopEffect( 'magic_step_l_new' );	
					thePlayer.PlayEffectSingle( 'magic_step_l_new' );

					thePlayer.StopEffect( 'magic_step_r_new' );	
					thePlayer.PlayEffectSingle( 'magic_step_r_new' );
				}

				PlayerPlayAnimation( 'attack_special_dash_close_ACS');

				if (!thePlayer.HasTag('ACS_Vampire_Dash_Attack'))
				{
					thePlayer.AddTag('ACS_Vampire_Dash_Attack');
				}
			}
			else if( targetDistance > 3.5 * 3.5 && targetDistance <= 10 * 10 ) 
			{
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

				if (!thePlayer.HasTag('ACS_Camo_Active') && ACS_DodgeEffects_Enabled() )
				{
					thePlayer.StopEffect( 'magic_step_l_new' );	
					thePlayer.PlayEffectSingle( 'magic_step_l_new' );

					thePlayer.StopEffect( 'magic_step_r_new' );	
					thePlayer.PlayEffectSingle( 'magic_step_r_new' );
				}

				if (!ACS_HideVampireClaws_Enabled())
				{
					thePlayer.StopEffect('shadowdash_shockwave');

					thePlayer.PlayEffectSingle('shadowdash_shockwave');

					thePlayer.StopEffect('shadowdash_shockwave');
				}

				attack_special_dash_index_1 = RandDifferent(this.previous_attack_special_dash_index_1 , 3);

				switch (attack_special_dash_index_1) 
				{	
					case 2:

					PlayerPlayAnimation( 'attack_special_dash_close_ACS');

					thePlayer.AddTag('ACS_Vampire_Dash_Close');

					AddTimer('ACS_bruxa_tackle', 0.375 , false);
					break;

					case 1:

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }	
						
					AddTimer('ACS_ResetAnimation', 1 , false);

					PlayerPlayAnimation( 'attack_special_dash_medium_02_ACS');

					AddTimer('ACS_bruxa_tackle', 0.5 , false);
					break;
					
					default:

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }	
						
					AddTimer('ACS_ResetAnimation', 1 , false);

					PlayerPlayAnimation( 'attack_special_dash_medium_01_ACS');	

					AddTimer('ACS_bruxa_tackle', 0.75 , false);
					break;
				}
				
				this.previous_attack_special_dash_index_1 = attack_special_dash_index_1;

				if (!thePlayer.HasTag('ACS_Vampire_Dash_Attack'))
				{
					thePlayer.AddTag('ACS_Vampire_Dash_Attack');
				}
			}
			else
			{
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
							
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }	
						
				AddTimer('ACS_ResetAnimation', 1 , false);

				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

				if (!thePlayer.HasTag('ACS_Camo_Active') && ACS_DodgeEffects_Enabled() )
				{
					thePlayer.StopEffect( 'magic_step_l_new' );	
					thePlayer.PlayEffectSingle( 'magic_step_l_new' );

					thePlayer.StopEffect( 'magic_step_r_new' );	
					thePlayer.PlayEffectSingle( 'magic_step_r_new' );
				}

				if (!ACS_HideVampireClaws_Enabled())
				{
					thePlayer.StopEffect('shadowdash_shockwave');

					thePlayer.PlayEffectSingle('shadowdash_shockwave');

					thePlayer.StopEffect('shadowdash_shockwave');
				}

				PlayerPlayAnimation( 'attack_special_dash_medium_01_ACS');

				AddTimer('ACS_bruxa_tackle', 0.75 , false);
			}
		}
		else
		{
			if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}

			if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			attack_special_dash_index_1 = RandDifferent(this.previous_attack_special_dash_index_1 , 3);

			switch (attack_special_dash_index_1) 
			{	
				case 2:
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2  ); }	
						
				AddTimer('ACS_ResetAnimation', 0.25 , false);

				PlayerPlayAnimation( 'attack_special_dash_close_ACS');
				break;

				case 1:
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2  ); }	
						
				AddTimer('ACS_ResetAnimation', 0.75 , false);

				PlayerPlayAnimation( 'attack_special_dash_medium_02_ACS');
				break;
				
				default:
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2  ); }	
						
				AddTimer('ACS_ResetAnimation', 0.75 , false);

				PlayerPlayAnimation( 'attack_special_dash_medium_01_ACS');	
				break;
			}
			
			this.previous_attack_special_dash_index_1 = attack_special_dash_index_1;
		}			
	}
	
	function geraltClawWhirlAttack() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{			
			if( targetDistance <= 3.5 * 3.5 ) 
			{
				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
					}	
				}

				PlayerPlayAnimation( 'attack_light_03_ACS');
			}
			else if( targetDistance > 3.5 * 3.5  && targetDistance <= 5*5 ) 
			{
				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

					//movementAdjustor.SlideTowards( ticket, actor, distClawWhirl, distClawWhirl );
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

						//movementAdjustor.SlideTowards( ticket, actor, distClawWhirl, distClawWhirl );
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

						//movementAdjustor.SlideTo( ticket, thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 5 );
					}
				}

				//PlayerPlayAnimation( 'attack_light_03_ACS');

				PlayerPlayAnimation( 'attack_special_dash_medium_02_ACS');

				thePlayer.AddTag('ACS_Whirl_Attack');

				AddTimer('ACS_bruxa_tackle', 0.75 , false);
			}
			else
			{
				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

					//movementAdjustor.SlideTowards( ticket, actor, distClawWhirl, distClawWhirl );
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

						//movementAdjustor.SlideTowards( ticket, actor, distClawWhirl, distClawWhirl );
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');
						
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

						//movementAdjustor.SlideTo( ticket, theCamera.GetCameraPosition() + theCamera.GetCameraDirection() * 7.5 );
					}
				}

				//PlayerPlayAnimation( 'attack_light_03_ACS');

				PlayerPlayAnimation( 'attack_special_dash_medium_01_ACS');

				thePlayer.AddTag('ACS_Whirl_Attack');

				AddTimer('ACS_bruxa_tackle', 0.75 , false);
			}
		}
		else
		{
			if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			PlayerPlayAnimation( 'attack_light_03_ACS');
		}
	}

	function geraltClawWhirlReactionAttack() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{			
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			PlayerPlayAnimation( 'attack_light_03_ACS');
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			PlayerPlayAnimation( 'attack_light_03_ACS');
		}
	}
	
	function geraltRandomClawHeavyAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_claw_heavy_attack_alt )
				{
					default:
					PlayerPlayAnimation( 'attack_heavy_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_heavy_attack_alt += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'attack_heavy_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_heavy_attack_alt += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'attack_heavy_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack_alt += 1;
					break;

					case 2:
					PlayerPlayAnimation( 'attack_heavy_single_01_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack_alt += 1;
					break;

					case 3:
					PlayerPlayAnimation( 'attack_heavy_single_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack_alt += 1;
					break;

					case 4:
					PlayerPlayAnimation( 'attack_heavy_single_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack_alt -= combo_counter_claw_heavy_attack_alt;
					break;
				}
				
				/*
				if (combo_counter_claw_heavy_attack_alt == 0)
				{
					PlayerPlayAnimation( 'attack_heavy_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_heavy_attack_alt += 1;
				}

				else if (combo_counter_claw_heavy_attack_alt == 1)
				{
					PlayerPlayAnimation( 'attack_heavy_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack_alt += 1;
				}

				else if (combo_counter_claw_heavy_attack_alt == 2)
				{
					PlayerPlayAnimation( 'attack_heavy_single_01_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack_alt += 1;
				}

				else if (combo_counter_claw_heavy_attack_alt == 3)
				{
					PlayerPlayAnimation( 'attack_heavy_single_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack_alt += 1;
				}

				else if (combo_counter_claw_heavy_attack_alt == 4)
				{
					PlayerPlayAnimation( 'attack_heavy_single_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack_alt -= combo_counter_claw_heavy_attack_alt;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				heavy_claw_attack_index = RandDifferent(this.previous_heavy_claw_attack_index , 5);

				switch (heavy_claw_attack_index) 
				{		
					case 4:
					PlayerPlayAnimation( 'attack_heavy_single_03_ACS');	
					break;
						
					case 3:
					PlayerPlayAnimation( 'attack_heavy_single_02_ACS');
					break;

					case 2:
					PlayerPlayAnimation( 'attack_heavy_single_01_ACS');
					break;	
						
					case 1:	
					PlayerPlayAnimation( 'attack_heavy_02_ACS');	
					break;

					default:
					PlayerPlayAnimation( 'attack_heavy_01_ACS');	
					break;
				}
						
				this.previous_heavy_claw_attack_index = heavy_claw_attack_index;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_claw_heavy_attack_alt )
				{
					default:
					PlayerPlayAnimation( 'attack_heavy_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_heavy_attack_alt += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'attack_heavy_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_heavy_attack_alt += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'attack_heavy_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack_alt += 1;
					break;

					case 2:
					PlayerPlayAnimation( 'attack_heavy_single_01_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack_alt += 1;
					break;

					case 3:
					PlayerPlayAnimation( 'attack_heavy_single_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack_alt += 1;
					break;

					case 4:
					PlayerPlayAnimation( 'attack_heavy_single_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack_alt -= combo_counter_claw_heavy_attack_alt;
					break;
				}
				
				/*
				if (combo_counter_claw_heavy_attack_alt == 0)
				{
					PlayerPlayAnimation( 'attack_heavy_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_heavy_attack_alt += 1;
				}

				else if (combo_counter_claw_heavy_attack_alt == 1)
				{
					PlayerPlayAnimation( 'attack_heavy_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack_alt += 1;
				}

				else if (combo_counter_claw_heavy_attack_alt == 2)
				{
					PlayerPlayAnimation( 'attack_heavy_single_01_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack_alt += 1;
				}

				else if (combo_counter_claw_heavy_attack_alt == 3)
				{
					PlayerPlayAnimation( 'attack_heavy_single_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack_alt += 1;
				}

				else if (combo_counter_claw_heavy_attack_alt == 4)
				{
					PlayerPlayAnimation( 'attack_heavy_single_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack_alt -= combo_counter_claw_heavy_attack_alt;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				heavy_claw_attack_index = RandDifferent(this.previous_heavy_claw_attack_index , 5);

				switch (heavy_claw_attack_index) 
				{									
					case 4:
					PlayerPlayAnimation( 'attack_heavy_single_03_ACS');	
					break;
						
					case 3:
					PlayerPlayAnimation( 'attack_heavy_single_02_ACS');
					break;

					case 2:
					PlayerPlayAnimation( 'attack_heavy_single_01_ACS');
					break;	
						
					case 1:	
					PlayerPlayAnimation( 'attack_heavy_02_ACS');	
					break;

					default:
					PlayerPlayAnimation( 'attack_heavy_01_ACS');	
					break;
				}
				
				this.previous_heavy_claw_attack_index = heavy_claw_attack_index;
			}
		}
	}
	
	function geraltRandomClawHeavyAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_claw_heavy_attack )
				{
					default:
					PlayerPlayAnimation( 'attack_counter_medium_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_heavy_attack += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'attack_counter_medium_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_heavy_attack += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'attack_counter_close_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack += 1;
					break;

					case 2:
					PlayerPlayAnimation( 'attack_special_strong_uppercut_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack -= combo_counter_claw_heavy_attack;
					break;
				}
				
				/*
				if (combo_counter_claw_heavy_attack == 0)
				{
					PlayerPlayAnimation( 'attack_counter_medium_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_heavy_attack += 1;
				}

				else if (combo_counter_claw_heavy_attack == 1)
				{
					PlayerPlayAnimation( 'attack_counter_close_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack += 1;
				}

				else if (combo_counter_claw_heavy_attack == 2)
				{
					PlayerPlayAnimation( 'attack_special_strong_uppercut_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack -= combo_counter_claw_heavy_attack;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{	
				heavy_claw_attack_index = RandDifferent(this.previous_heavy_claw_attack_index , 3);

				switch (heavy_claw_attack_index) 
				{		
					case 2:
					PlayerPlayAnimation( 'attack_counter_medium_ACS');
					break;	
						
					case 1:	
					PlayerPlayAnimation( 'attack_counter_close_ACS');	
					break;

					default:
					PlayerPlayAnimation( 'attack_special_strong_uppercut_ACS');	
					break;
				}
						
				this.previous_heavy_claw_attack_index = heavy_claw_attack_index;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_claw_heavy_attack )
				{
					default:
					PlayerPlayAnimation( 'attack_counter_medium_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_heavy_attack += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'attack_counter_medium_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_heavy_attack += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'attack_counter_close_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack += 1;
					break;

					case 2:
					PlayerPlayAnimation( 'attack_special_strong_uppercut_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack -= combo_counter_claw_heavy_attack;
					break;
				}
				
				/*
				if (combo_counter_claw_heavy_attack == 0)
				{
					PlayerPlayAnimation( 'attack_counter_medium_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_heavy_attack += 1;
				}

				else if (combo_counter_claw_heavy_attack == 1)
				{
					PlayerPlayAnimation( 'attack_counter_close_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack += 1;
				}

				else if (combo_counter_claw_heavy_attack == 2)
				{
					PlayerPlayAnimation( 'attack_special_strong_uppercut_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack -= combo_counter_claw_heavy_attack;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				heavy_claw_attack_index = RandDifferent(this.previous_heavy_claw_attack_index , 3);

				switch (heavy_claw_attack_index) 
				{									
					case 2:
					PlayerPlayAnimation( 'attack_counter_medium_ACS');
					break;	
						
					case 1:	
					PlayerPlayAnimation( 'attack_counter_close_ACS');	
					break;

					default:
					PlayerPlayAnimation( 'attack_special_strong_uppercut_ACS');	
					break;
				}
				
				this.previous_heavy_claw_attack_index = heavy_claw_attack_index;
			}
		}
	}
	
	function geraltRandomClawLightAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_claw_light_attack_alt )
				{
					default:
					PlayerPlayAnimation( 'attack_combo_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_light_attack_alt += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'attack_combo_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_light_attack_alt += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'attack_combo_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack_alt += 1;
					break;

					case 2:
					PlayerPlayAnimation( 'attack_combo_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack_alt -= combo_counter_claw_light_attack_alt;
					break;
				}
				
				/*
				if (combo_counter_claw_light_attack_alt == 0)
				{
					PlayerPlayAnimation( 'attack_combo_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_light_attack_alt += 1;
				}

				else if (combo_counter_claw_light_attack_alt == 1)
				{
					PlayerPlayAnimation( 'attack_combo_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack_alt += 1;
				}

				else if (combo_counter_claw_light_attack_alt == 2)
				{
					PlayerPlayAnimation( 'attack_combo_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack_alt -= combo_counter_claw_light_attack_alt;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				claw_attack_alt_index_1 = RandDifferent(this.previous_claw_attack_alt_index_1 , 3);

				switch (claw_attack_alt_index_1) 
				{												
					case 2:
					PlayerPlayAnimation( 'attack_combo_03_ACS');	
					break;
						
					case 1:
					PlayerPlayAnimation( 'attack_combo_02_ACS');	
					break;
						
					default:	
					PlayerPlayAnimation( 'attack_combo_01_ACS');	
					break;
				}
					
				this.previous_claw_attack_alt_index_1 = claw_attack_alt_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_claw_light_attack_alt )
				{
					default:
					PlayerPlayAnimation( 'attack_combo_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_light_attack_alt += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'attack_combo_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_light_attack_alt += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'attack_combo_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack_alt += 1;
					break;

					case 2:
					PlayerPlayAnimation( 'attack_combo_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack_alt -= combo_counter_claw_light_attack_alt;
					break;
				}
				
				/*
				if (combo_counter_claw_light_attack_alt == 0)
				{
					PlayerPlayAnimation( 'attack_combo_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_light_attack_alt += 1;
				}

				else if (combo_counter_claw_light_attack_alt == 1)
				{
					PlayerPlayAnimation( 'attack_combo_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack_alt += 1;
				}

				else if (combo_counter_claw_light_attack_alt == 2)
				{
					PlayerPlayAnimation( 'attack_combo_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack_alt -= combo_counter_claw_light_attack_alt;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				claw_attack_alt_index_3 = RandDifferent(this.previous_claw_attack_alt_index_3 , 3);

				switch (claw_attack_alt_index_3) 
				{	
					case 2:
					PlayerPlayAnimation( 'attack_combo_03_ACS');	
					break;
						
					case 1:
					PlayerPlayAnimation( 'attack_combo_02_ACS');	
					break;
						
					default:	
					PlayerPlayAnimation( 'attack_combo_01_ACS');	
					break;
				}
				
				this.previous_claw_attack_alt_index_3 = claw_attack_alt_index_3;
			}
		}
	}		
	
	function geraltRandomClawLightAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_claw_light_attack )
				{
					default:
					PlayerPlayAnimation( 'bruxa_attack_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_light_attack += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'bruxa_attack_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_light_attack += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'bruxa_attack_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack += 1;
					break;

					case 2:
					PlayerPlayAnimation( 'bruxa_attack_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack += 1;
					break;

					case 3:
					PlayerPlayAnimation( 'attack_light_01_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack += 1;
					break;

					case 4:
					PlayerPlayAnimation( 'attack_light_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack -= combo_counter_claw_light_attack;
					break;
				}
				
				/*
				if (combo_counter_claw_light_attack == 0)
				{
					PlayerPlayAnimation( 'bruxa_attack_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_light_attack += 1;
				}

				else if (combo_counter_claw_light_attack == 1)
				{
					PlayerPlayAnimation( 'bruxa_attack_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack += 1;
				}

				else if (combo_counter_claw_light_attack == 2)
				{
					PlayerPlayAnimation( 'bruxa_attack_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack += 1;
				}

				else if (combo_counter_claw_light_attack == 3)
				{
					PlayerPlayAnimation( 'attack_light_01_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack += 1;
				}

				else if (combo_counter_claw_light_attack == 4)
				{
					PlayerPlayAnimation( 'attack_light_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack -= combo_counter_claw_light_attack;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				claw_fist_attack_index_1 = RandDifferent(this.previous_claw_fist_attack_index_1 , 5);

				switch (claw_fist_attack_index_1) 
				{	
					case 4:
					PlayerPlayAnimation( 'bruxa_attack_03_ACS');	
					break;
					
					case 3:
					PlayerPlayAnimation( 'bruxa_attack_02_ACS');	
					break;
					
					case 2:
					PlayerPlayAnimation( 'bruxa_attack_01_ACS');	
					break;
					
					case 1:
					PlayerPlayAnimation( 'attack_light_02_ACS');
					break;

					default:
					PlayerPlayAnimation( 'attack_light_01_ACS');
					break;
				}
			
				this.previous_claw_fist_attack_index_1 = claw_fist_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				switch ( combo_counter_claw_light_attack )
				{
					default:
					PlayerPlayAnimation( 'bruxa_attack_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_light_attack += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'bruxa_attack_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_light_attack += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'bruxa_attack_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack += 1;
					break;

					case 2:
					PlayerPlayAnimation( 'bruxa_attack_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack += 1;
					break;

					case 3:
					PlayerPlayAnimation( 'attack_light_01_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack += 1;
					break;

					case 4:
					PlayerPlayAnimation( 'attack_light_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack -= combo_counter_claw_light_attack;
					break;
				}
				
				/*
				if (combo_counter_claw_light_attack == 0)
				{
					PlayerPlayAnimation( 'bruxa_attack_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_light_attack += 1;
				}

				else if (combo_counter_claw_light_attack == 1)
				{
					PlayerPlayAnimation( 'bruxa_attack_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack += 1;
				}

				else if (combo_counter_claw_light_attack == 2)
				{
					PlayerPlayAnimation( 'bruxa_attack_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack += 1;
				}

				else if (combo_counter_claw_light_attack == 3)
				{
					PlayerPlayAnimation( 'attack_light_01_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack += 1;
				}

				else if (combo_counter_claw_light_attack == 4)
				{
					PlayerPlayAnimation( 'attack_light_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack -= combo_counter_claw_light_attack;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				claw_fist_attack_index_3 = RandDifferent(this.previous_claw_fist_attack_index_3 , 5);

				switch (claw_fist_attack_index_3) 
				{							
					case 4:
					PlayerPlayAnimation( 'bruxa_attack_03_ACS');	
					break;
					
					case 3:
					PlayerPlayAnimation( 'bruxa_attack_02_ACS');	
					break;
					
					case 2:
					PlayerPlayAnimation( 'bruxa_attack_01_ACS');	
					break;
					
					case 1:
					PlayerPlayAnimation( 'attack_light_02_ACS');
					break;

					default:
					PlayerPlayAnimation( 'attack_light_01_ACS');
					break;
				}
				
				this.previous_claw_fist_attack_index_3 = claw_fist_attack_index_3;
			}
		}	
	}
	
	function geraltRandomClawSpecialAttackAlt()
	{
		//theGame.SetTimeScale( 0.75, theGame.GetTimescaleSource( ETS_InstantKill ), theGame.GetTimescalePriority( ETS_InstantKill ), false, true );

		//AddTimer( 'RemoveInstantKillSloMo', 0.3 );

		Bruxa_Camo_Decoy_Deactivate();

		MovementAdjust();

		dodge_timer_attack_actual();

		thePlayer.SetIsCurrentlyDodging(true);
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if( targetDistance <= 2.5*2.5 ) 
			{
				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

					//movementAdjustor.SlideTowards( ticket, actor, dist * 0.25, dist * 0.25 );
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

						//movementAdjustor.SlideTowards( ticket, actor, dist * 0.25, dist * 0.25 );
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
					}	
				}

				thePlayer.DestroyEffect('shadowdash_short');
				thePlayer.PlayEffectSingle('shadowdash_short');
				
				PlayerPlayAnimation( 'attack_special_dash_close_ACS');

				thePlayer.StopEffect('shadowdash_short');
			}
			else if( targetDistance > 2.5*2.5 && targetDistance <= 5*5 ) 
			{
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
							
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }	
						
				AddTimer('ACS_ResetAnimation', 0.75 , false);

				//dodge_timer_attack_actual();

				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
					}
				}

				attack_special_dash_index_1 = RandDifferent(this.previous_attack_special_dash_index_1 , 2);

				switch (attack_special_dash_index_1) 
				{	
					case 1:
					PlayerPlayAnimation( 'attack_special_dash_medium_02_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'attack_special_dash_medium_01_ACS');	
					break;
				}
				
				this.previous_attack_special_dash_index_1 = attack_special_dash_index_1;

				//PlayerPlayAnimation( 'attack_special_dash_close_ACS');	

				AddTimer('ACS_bruxa_tackle', 0.75 , false);
			}
			else
			{
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
							
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }	
						
				AddTimer('ACS_ResetAnimation', 0.75 , false);

				//dodge_timer_attack_actual();
				
				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
					}	
				}

				PlayerPlayAnimation( 'attack_special_dash_medium_01_ACS');

				//PlayerPlayAnimation( 'attack_special_dash_close_ACS');	

				AddTimer('ACS_bruxa_tackle', 0.75 , false);
			}
		}
		else
		{
			if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}

			if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			attack_special_dash_index_1 = RandDifferent(this.previous_attack_special_dash_index_1 , 2);

			switch (attack_special_dash_index_1) 
			{	
				case 2:
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }	
						
				AddTimer('ACS_ResetAnimation', 0.25 , false);
				PlayerPlayAnimation( 'attack_special_dash_close_ACS');
				break;

				case 1:
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }	
						
				AddTimer('ACS_ResetAnimation', 0.75 , false);
				PlayerPlayAnimation( 'attack_special_dash_medium_02_ACS');
				break;
				
				default:
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }	
						
				AddTimer('ACS_ResetAnimation', 0.75 , false);
				PlayerPlayAnimation( 'attack_special_dash_medium_01_ACS');	
				break;
			}
			
			this.previous_attack_special_dash_index_1 = attack_special_dash_index_1;
		}			
	}

	function geraltRandomClawSpecialAttack() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{			
			if( targetDistance <= 3.5 * 3.5 ) 
			{
				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
					}	
				}

				PlayerPlayAnimation( 'attack_light_03_ACS');
			}
			else if( targetDistance > 3.5 * 3.5  && targetDistance <= 5*5 ) 
			{
				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

					//movementAdjustor.SlideTowards( ticket, actor, distClawWhirl, distClawWhirl );
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

						//movementAdjustor.SlideTowards( ticket, actor, distClawWhirl, distClawWhirl );
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

						//movementAdjustor.SlideTo( ticket, thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 5 );
					}
				}

				//PlayerPlayAnimation( 'attack_light_03_ACS');

				PlayerPlayAnimation( 'attack_special_dash_medium_02_ACS');

				thePlayer.AddTag('ACS_Whirl_Attack');

				AddTimer('ACS_bruxa_tackle', 0.75 , false);
			}
			else
			{
				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

					//movementAdjustor.SlideTowards( ticket, actor, distClawWhirl, distClawWhirl );
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

						//movementAdjustor.SlideTowards( ticket, actor, distClawWhirl, distClawWhirl );
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

						//movementAdjustor.SlideTo( ticket, theCamera.GetCameraPosition() + theCamera.GetCameraDirection() * 7.5 );
					}
				}

				//PlayerPlayAnimation( 'attack_light_03_ACS');

				PlayerPlayAnimation( 'attack_special_dash_medium_01_ACS');

				thePlayer.AddTag('ACS_Whirl_Attack');

				AddTimer('ACS_bruxa_tackle', 0.75 , false);
			}
		}
		else
		{
			if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			PlayerPlayAnimation( 'attack_light_03_ACS');
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Geralt attack stuff //

	// Bear School

	function geraltRandomGeraltLightAttack_Bear() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				if (combo_counter_geralt_light_attack_bear == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}
				else if (combo_counter_geralt_light_attack_bear == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}
				else if (combo_counter_geralt_light_attack_bear == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}
				else if (combo_counter_geralt_light_attack_bear == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}
				else if (combo_counter_geralt_light_attack_bear == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}
				else if (combo_counter_geralt_light_attack_bear == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}
				else if (combo_counter_geralt_light_attack_bear == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}
				else if (combo_counter_geralt_light_attack_bear == 7)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_9_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}
				else if (combo_counter_geralt_light_attack_bear == 8)
				{
					PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}
				else if (combo_counter_geralt_light_attack_bear == 9)
				{
					PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}
				else if (combo_counter_geralt_light_attack_bear == 10)
				{
					PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}
				else if (combo_counter_geralt_light_attack_bear == 11)
				{
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}
				else if (combo_counter_geralt_light_attack_bear == 12)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_10_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear -= combo_counter_geralt_light_attack_bear;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_index_1 = RandDifferent(this.previous_geralt_light_attack_index_1 , 13);

				switch (geralt_light_attack_index_1) 
				{
					case 12:
					PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');
					break;

					case 11:
					PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');
					break;

					case 10:
					PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');
					break;

					case 9:
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');
					break;

					case 8:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_10_lp_70ms');
					break;	

					case 7:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_9_lp_70ms');
					break;	

					case 6:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');
					break;	

					case 5:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');
					break;	

					case 4:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
					break;			
					
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');
					break;
				}

				this.previous_geralt_light_attack_index_1 = geralt_light_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_bear == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}
				else if (combo_counter_geralt_light_attack_bear == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}

				else if (combo_counter_geralt_light_attack_bear == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}

				else if (combo_counter_geralt_light_attack_bear == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}

				else if (combo_counter_geralt_light_attack_bear == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}

				else if (combo_counter_geralt_light_attack_bear == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}

				else if (combo_counter_geralt_light_attack_bear == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}

				else if (combo_counter_geralt_light_attack_bear == 7)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_9_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}

				else if (combo_counter_geralt_light_attack_bear == 8)
				{
					PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}
				else if (combo_counter_geralt_light_attack_bear == 9)
				{
					PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}
				else if (combo_counter_geralt_light_attack_bear == 10)
				{
					PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}
				else if (combo_counter_geralt_light_attack_bear == 11)
				{
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}

				else if (combo_counter_geralt_light_attack_bear == 12)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_10_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear -= combo_counter_geralt_light_attack_bear;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_index_3 = RandDifferent(this.previous_geralt_light_attack_index_3 , 13);

				switch (geralt_light_attack_index_3) 
				{
					case 12:
					PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');
					break;

					case 11:
					PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');
					break;

					case 10:
					PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');
					break;

					case 9:
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');
					break;

					case 8:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');
					break;
					
					case 7:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');
					break;
					
					case 6:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
					break;	
					
					case 5:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');
					break;	
					
					case 4:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');
					break;	
				
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');
					break;	

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');
					break;	

					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_10_lp_70ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_9_lp_70ms');
					break;	
				}

				this.previous_geralt_light_attack_index_3 = geralt_light_attack_index_3;
			}
		}
	}

	function geraltRandomGeraltHeavyAttack_Bear() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_bear == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_6_rp_70ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}
				else if (combo_counter_geralt_heavy_attack_bear == 1)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_6_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_7_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_7_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_8_rp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_8_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_9_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 7)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 8)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_10_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 9)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 10)
				{
					
					PlayerPlayAnimation( 'geralt_attack_strong_5_rp_ACS');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 11)
				{
					
					PlayerPlayAnimation( 'geralt_attack_strong_3_lp_ACS');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 12)
				{
					
					PlayerPlayAnimation( 'geralt_attack_strong_4_rp_ACS');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 13)
				{
					
					PlayerPlayAnimation( 'geralt_attack_strong_2_lp_ACS');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 14)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear -= combo_counter_geralt_heavy_attack_bear;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_heavy_attack_index_1 = RandDifferent(this.previous_geralt_heavy_attack_index_1 , 15);

				switch (geralt_heavy_attack_index_1) 
				{
					case 14:
					PlayerPlayAnimation( 'geralt_attack_strong_2_lp_ACS');
					break;

					case 13:
					PlayerPlayAnimation( 'geralt_attack_strong_4_rp_ACS');
					break;

					case 12:
					PlayerPlayAnimation( 'geralt_attack_strong_3_lp_ACS');
					break;

					case 11:
					PlayerPlayAnimation( 'geralt_attack_strong_5_rp_ACS');
					break;

					case 10:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
					break;

					case 9:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
					break;	

					case 8:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_10_rp_70ms');
					break;	

					case 7:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');
					break;	

					case 6:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_9_rp_70ms');
					break;	

					case 5:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_8_lp_70ms');
					break;	

					case 4:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_8_rp_70ms');
					break;			
					
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_7_lp_70ms');
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_7_rp_70ms');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_6_lp_70ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_6_rp_70ms');
					break;
				}

				this.previous_geralt_heavy_attack_index_1 = geralt_heavy_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_bear == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_6_rp_70ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}
				else if (combo_counter_geralt_heavy_attack_bear == 1)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_6_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_7_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_7_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_8_rp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_8_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_9_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 7)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 8)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_10_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 9)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 10)
				{
					
					PlayerPlayAnimation( 'geralt_attack_strong_5_rp_ACS');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 11)
				{
					
					PlayerPlayAnimation( 'geralt_attack_strong_3_lp_ACS');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 12)
				{
					
					PlayerPlayAnimation( 'geralt_attack_strong_4_rp_ACS');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 13)
				{
					
					PlayerPlayAnimation( 'geralt_attack_strong_2_lp_ACS');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 14)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear -= combo_counter_geralt_heavy_attack_bear;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_heavy_attack_index_3 = RandDifferent(this.previous_geralt_heavy_attack_index_3 , 15);

				switch (geralt_heavy_attack_index_3) 
				{	
					case 14:
					PlayerPlayAnimation( 'geralt_attack_strong_2_lp_ACS');
					break;

					case 13:
					PlayerPlayAnimation( 'geralt_attack_strong_4_rp_ACS');
					break;

					case 12:
					PlayerPlayAnimation( 'geralt_attack_strong_3_lp_ACS');
					break;

					case 11:
					PlayerPlayAnimation( 'geralt_attack_strong_5_rp_ACS');
					break;

					case 10:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
					break;

					case 9:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
					break;	

					case 8:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_10_rp_70ms');
					break;	

					case 7:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');
					break;	

					case 6:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_9_rp_70ms');
					break;	

					case 5:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_8_lp_70ms');
					break;	

					case 4:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_8_rp_70ms');
					break;			
					
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_7_lp_70ms');
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_7_rp_70ms');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_6_lp_70ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_6_rp_70ms');
					break;
				}

				this.previous_geralt_heavy_attack_index_3 = geralt_heavy_attack_index_3;
			}
		}
	}

	function geraltRandomGeraltLightAttackForward_Bear() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if( targetDistance <= 3 * 3 ) 
				{
					if (combo_counter_geralt_light_attack_bear == 0)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_bear += 1;
					}
					else if (combo_counter_geralt_light_attack_bear == 1)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_bear += 1;
					}
					else if (combo_counter_geralt_light_attack_bear == 2)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_bear += 1;
					}
					else if (combo_counter_geralt_light_attack_bear == 3)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_bear += 1;
					}
					else if (combo_counter_geralt_light_attack_bear == 4)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
		
						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_bear += 1;
					}
					else if (combo_counter_geralt_light_attack_bear == 5)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_bear += 1;
					}
					else if (combo_counter_geralt_light_attack_bear == 6)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_bear += 1;
					}
					else if (combo_counter_geralt_light_attack_bear == 7)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_9_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_bear += 1;
					}

					else if (combo_counter_geralt_light_attack_bear == 8)
					{
						PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_bear += 1;
					}
					else if (combo_counter_geralt_light_attack_bear == 9)
					{
						PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_bear += 1;
					}
					else if (combo_counter_geralt_light_attack_bear == 10)
					{
						PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_bear += 1;
					}
					else if (combo_counter_geralt_light_attack_bear == 11)
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

						PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_bear += 1;
					}

					else if (combo_counter_geralt_light_attack_bear == 12)
					{
						
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_10_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_bear -= combo_counter_geralt_light_attack_bear;
					}
				}
				else
				{
					if (combo_counter_geralt_light_attack_forward_bear == 0)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_lp_80ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward_bear += 1;
					}
					else if (combo_counter_geralt_light_attack_forward_bear == 1)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_right_1_rp_80ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward_bear += 1;
					}
					else if (combo_counter_geralt_light_attack_forward_bear == 2)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_back_1_rp_80ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward_bear += 1;
					}
					else if (combo_counter_geralt_light_attack_forward_bear == 3)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_rp_80ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward_bear -= combo_counter_geralt_light_attack_forward_bear;
					}
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3 * 3 ) 
				{
					geralt_light_attack_forward_index_1 = RandDifferent(this.previous_geralt_light_attack_forward_index_1 , 13);

					switch (geralt_light_attack_forward_index_1) 
					{	
						case 12:
						PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');
						break;

						case 11:
						PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');
						break;

						case 10:
						PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');
						break;

						case 9:
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

						PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');
						break;

						case 8:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_10_lp_70ms');
						break;	

						case 7:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_9_lp_70ms');
						break;	

						case 6:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');
						break;	

						case 5:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');
						break;	

						case 4:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
						break;			
						
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');
						break;

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');
						break;
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');
						break;
					}

					this.previous_geralt_light_attack_forward_index_1 = geralt_light_attack_forward_index_1;
				}
				else
				{
					geralt_light_attack_forward_index_1 = RandDifferent(this.previous_geralt_light_attack_forward_index_1 , 4);

					switch (geralt_light_attack_forward_index_1) 
					{	
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_back_1_rp_80ms_mod_ACS');
						break;	

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_rp_80ms_mod_ACS');
						break;	

						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_right_1_rp_80ms_mod_ACS');
						break;	

						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_lp_80ms_mod_ACS');
						break;		
					}

					this.previous_geralt_light_attack_forward_index_1 = geralt_light_attack_forward_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_forward_bear == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_lp_80ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_bear += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_bear == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_right_1_rp_80ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_bear += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_bear == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_back_1_rp_80ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_bear += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_bear == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_rp_80ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_bear -= combo_counter_geralt_light_attack_forward_bear;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_forward_index_3 = RandDifferent(this.previous_geralt_light_attack_forward_index_3 , 4);

				switch (geralt_light_attack_forward_index_3) 
				{	
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_back_1_rp_80ms_mod_ACS');
					break;	

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_rp_80ms_mod_ACS');
					break;	

					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_right_1_rp_80ms_mod_ACS');
					break;	

					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_lp_80ms_mod_ACS');
					break;		
				}

				this.previous_geralt_light_attack_forward_index_3 = geralt_light_attack_forward_index_3;
			}
		}
	}

	function geraltRandomGeraltHeavyAttackForward_Bear() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				if( targetDistance <= 3 * 3 ) 
				{
					if (combo_counter_geralt_heavy_attack_bear == 0)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_6_rp_70ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_bear += 1;
					}
					else if (combo_counter_geralt_heavy_attack_bear == 1)
					{
						
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_6_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_bear += 1;
					}

					else if (combo_counter_geralt_heavy_attack_bear == 2)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_7_rp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_bear += 1;
					}

					else if (combo_counter_geralt_heavy_attack_bear == 3)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_7_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_bear += 1;
					}

					else if (combo_counter_geralt_heavy_attack_bear == 4)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_8_rp_70ms');
		
						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_bear += 1;
					}

					else if (combo_counter_geralt_heavy_attack_bear == 5)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_8_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_bear += 1;
					}

					else if (combo_counter_geralt_heavy_attack_bear == 6)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_9_rp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_bear += 1;
					}

					else if (combo_counter_geralt_heavy_attack_bear == 7)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_bear += 1;
					}

					else if (combo_counter_geralt_heavy_attack_bear == 8)
					{
						
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_10_rp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_bear += 1;
					}

					else if (combo_counter_geralt_heavy_attack_bear == 9)
					{
						
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
		
						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_bear += 1;
					}

					else if (combo_counter_geralt_heavy_attack_bear == 10)
					{
						
						PlayerPlayAnimation( 'geralt_attack_strong_5_rp_ACS');
		
						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_bear += 1;
					}

					else if (combo_counter_geralt_heavy_attack_bear == 11)
					{
						
						PlayerPlayAnimation( 'geralt_attack_strong_3_lp_ACS');
		
						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_bear += 1;
					}

					else if (combo_counter_geralt_heavy_attack_bear == 12)
					{
						
						PlayerPlayAnimation( 'geralt_attack_strong_4_rp_ACS');
		
						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_bear += 1;
					}

					else if (combo_counter_geralt_heavy_attack_bear == 13)
					{
						
						PlayerPlayAnimation( 'geralt_attack_strong_2_lp_ACS');
		
						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_bear += 1;
					}

					else if (combo_counter_geralt_heavy_attack_bear == 14)
					{
						
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
		
						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_bear -= combo_counter_geralt_heavy_attack_bear;
					}
				}
				else
				{
					if (combo_counter_geralt_heavy_attack_forward_bear == 0)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_lp_80ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_forward_bear += 1;
					}
					else if (combo_counter_geralt_heavy_attack_forward_bear == 1)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_right_1_rp_80ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_forward_bear += 1;
					}
					else if (combo_counter_geralt_heavy_attack_forward_bear == 2)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_back_1_rp_80ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_forward_bear += 1;
					}
					else if (combo_counter_geralt_heavy_attack_forward_bear == 3)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_rp_80ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_forward_bear -= combo_counter_geralt_heavy_attack_forward_bear;
					}
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3 * 3 ) 
				{
					geralt_heavy_attack_forward_index_1 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_1 , 15);

					switch (geralt_heavy_attack_forward_index_1) 
					{
						case 14:
						PlayerPlayAnimation( 'geralt_attack_strong_2_lp_ACS');
						break;

						case 13:
						PlayerPlayAnimation( 'geralt_attack_strong_4_rp_ACS');
						break;

						case 12:
						PlayerPlayAnimation( 'geralt_attack_strong_3_lp_ACS');
						break;

						case 11:
						PlayerPlayAnimation( 'geralt_attack_strong_5_rp_ACS');
						break;

						case 10:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
						break;

						case 9:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
						break;	

						case 8:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_10_rp_70ms');
						break;	

						case 7:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');
						break;	

						case 6:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_9_rp_70ms');
						break;	

						case 5:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_8_lp_70ms');
						break;	

						case 4:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_8_rp_70ms');
						break;			
						
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_7_lp_70ms');
						break;

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_7_rp_70ms');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_6_lp_70ms');
						break;
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_6_rp_70ms');
						break;
					}

					this.previous_geralt_heavy_attack_forward_index_1 = geralt_heavy_attack_forward_index_1;
				}
				else
				{
					geralt_heavy_attack_forward_index_1 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_1 , 4);

					switch (geralt_heavy_attack_forward_index_1) 
					{	
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_back_1_rp_80ms_mod_ACS');
						break;	

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_rp_80ms_mod_ACS');
						break;	

						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_right_1_rp_80ms_mod_ACS');
						break;	

						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_lp_80ms_mod_ACS');
						break;	
					}

					this.previous_geralt_heavy_attack_forward_index_1 = geralt_heavy_attack_forward_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				if (combo_counter_geralt_heavy_attack_forward_bear == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_lp_80ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_bear += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_bear == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_right_1_rp_80ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_bear += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_bear == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_back_1_rp_80ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_bear += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_bear == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_rp_80ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_bear -= combo_counter_geralt_heavy_attack_forward_bear;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_heavy_attack_forward_index_3 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_3 , 4);

				switch (geralt_heavy_attack_forward_index_3) 
				{	
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_back_1_rp_80ms_mod_ACS');
					break;	

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_rp_80ms_mod_ACS');
					break;	

					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_right_1_rp_80ms_mod_ACS');
					break;	

					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_lp_80ms_mod_ACS');
					break;
				}

				this.previous_geralt_heavy_attack_forward_index_3 = geralt_heavy_attack_forward_index_3;
			}
		}
	}

	timer function RemoveBearSpecialAttackTag(dt : float, id : int)
	{
		thePlayer.RemoveTag('ACS_Bear_Special_Attack');
	}

	function geraltRandomGeraltSpecialAttack_Bear() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_special_attack_bear == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_heavy_special_rp_end');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_special_attack_bear += 1;
				}
				else if (combo_counter_geralt_special_attack_bear == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_heavy_special_lp_end');

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_bear -= combo_counter_geralt_special_attack_bear;
				}
			}
			else if (ACS_ComboMode() == 1)
			{		
				geralt_special_attack_index_3 = RandDifferent(this.previous_geralt_special_attack_index_3 , 2);

				switch (geralt_special_attack_index_3) 
				{	
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_heavy_special_lp_end');
					break;

					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_heavy_special_rp_end');
					break;
				}

				this.previous_geralt_special_attack_index_3 = geralt_special_attack_index_3;	
			}

			thePlayer.AddTag('ACS_Bear_Special_Attack');
			RemoveTimer('RemoveBearSpecialAttackTag');	
			AddTimer('RemoveBearSpecialAttackTag', 1, false);
		}	
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_special_attack_bear == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_heavy_special_rp_end');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_special_attack_bear += 1;
				}
				else if (combo_counter_geralt_special_attack_bear == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_heavy_special_lp_end');

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_bear -= combo_counter_geralt_special_attack_bear;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_special_attack_index_3 = RandDifferent(this.previous_geralt_special_attack_index_3, 2);

				switch (geralt_special_attack_index_3) 
				{	
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_heavy_special_lp_end');
					break;

					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_heavy_special_rp_end');
					break;
				}	
				
				this.previous_geralt_special_attack_index_3 = geralt_special_attack_index_3;
			}

			thePlayer.AddTag('ACS_Bear_Special_Attack');
			RemoveTimer('RemoveBearSpecialAttackTag');	
			AddTimer('RemoveBearSpecialAttackTag', 1, false);	
		}
	}

	// Cat School

	function geraltRandomGeraltLightAttack_Cat() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				switch ( combo_counter_geralt_light_attack_cat )
				{
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_cat += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_cat += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_cat += 1;
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_cat += 1;
					break;

					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_cat += 1;
					break;
					
					case 4:
					PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_cat += 1;
					break;
					
					case 5:
					PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_cat += 1;
					break;

					case 6:
					PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_cat += 1;
					break;
					
					case 7:
					PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_cat += 1;
					break;
					
					case 8:
					PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_cat += 1;
					break;

					case 9:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_cat += 1;
					break;

					case 10:
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_cat += 1;
					break;

					case 11:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_right_1_lp_40ms_forward_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_cat -= combo_counter_geralt_light_attack_cat;
					break;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_index_1 = RandDifferent(this.previous_geralt_light_attack_index_1 , 12);

				switch (geralt_light_attack_index_1) 
				{	
					case 11:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	
					break;

					case 10:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_right_1_lp_40ms_forward_ACS');
					break;

					case 9:
					PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');
					break;

					case 8:
					PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');
					break;

					case 7:
					PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');
					break;

					case 6:
					PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');
					break;

					case 5:
					PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');
					break;

					case 4:
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');
					break;

					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
					break;
				}

				this.previous_geralt_light_attack_index_1 = geralt_light_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				switch ( combo_counter_geralt_light_attack_cat )
				{
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_cat += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_cat += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_cat += 1;
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_cat += 1;
					break;

					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_cat += 1;
					break;
					
					case 4:
					PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_cat += 1;
					break;
					
					case 5:
					PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_cat += 1;
					break;

					case 6:
					PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_cat += 1;
					break;
					
					case 7:
					PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_cat += 1;
					break;
					
					case 8:
					PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_cat += 1;
					break;

					case 9:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_cat += 1;
					break;

					case 10:
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_cat += 1;
					break;

					case 11:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_right_1_lp_40ms_forward_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_cat -= combo_counter_geralt_light_attack_cat;
					break;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_index_3 = RandDifferent(this.previous_geralt_light_attack_index_3 , 12);

				switch (geralt_light_attack_index_3) 
				{	
					case 11:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	
					break;

					case 10:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_right_1_lp_40ms_forward_ACS');
					break;

					case 9:
					PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');
					break;

					case 8:
					PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');
					break;

					case 7:
					PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');
					break;

					case 6:
					PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');
					break;

					case 5:
					PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');
					break;

					case 4:
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');
					break;

					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
					break;	
				}

				this.previous_geralt_light_attack_index_3 = geralt_light_attack_index_3;
			}
		}
	}

	function geraltRandomGeraltHeavyAttack_Cat() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_cat == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_heavy_attack_cat += 1;
				}
				else if (combo_counter_geralt_heavy_attack_cat == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_cat += 1;
				}
				else if (combo_counter_geralt_heavy_attack_cat == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_cat += 1;
				}
				else if (combo_counter_geralt_heavy_attack_cat == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_cat += 1;
				}
				else if (combo_counter_geralt_heavy_attack_cat == 4)
				{
					PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_cat += 1;
				}
				else if (combo_counter_geralt_heavy_attack_cat == 5)
				{
					PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_cat += 1;
				}
				else if (combo_counter_geralt_heavy_attack_cat == 6)
				{
					PlayerPlayAnimation( 'geralt_attack_strong_5_rp_ACS');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_cat += 1;
				}

				else if (combo_counter_geralt_heavy_attack_cat == 7)
				{
					PlayerPlayAnimation( 'geralt_attack_strong_3_lp_ACS');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_cat += 1;
				}

				else if (combo_counter_geralt_heavy_attack_cat == 8)
				{
					PlayerPlayAnimation( 'geralt_attack_strong_4_rp_ACS');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_cat += 1;
				}

				else if (combo_counter_geralt_heavy_attack_cat == 9)
				{
					PlayerPlayAnimation( 'geralt_attack_strong_2_lp_ACS');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_cat -= combo_counter_geralt_heavy_attack_cat;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_index_1 = RandDifferent(this.previous_geralt_light_attack_index_1 , 10);

				switch (geralt_light_attack_index_1) 
				{
					case 9:
					PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');
					break;

					case 8:
					PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');
					break;

					case 7:
					PlayerPlayAnimation( 'geralt_attack_strong_2_lp_ACS');
					break;

					case 6:
					PlayerPlayAnimation( 'geralt_attack_strong_4_rp_ACS');
					break;

					case 5:
					PlayerPlayAnimation( 'geralt_attack_strong_3_lp_ACS');
					break;

					case 4:
					PlayerPlayAnimation( 'geralt_attack_strong_5_rp_ACS');
					break;

					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
					break;
				}

				this.previous_geralt_light_attack_index_1 = geralt_light_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_cat == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_heavy_attack_cat += 1;
				}
				else if (combo_counter_geralt_heavy_attack_cat == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_cat += 1;
				}
				else if (combo_counter_geralt_heavy_attack_cat == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_cat += 1;
				}
				else if (combo_counter_geralt_heavy_attack_cat == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_cat += 1;
				}
				else if (combo_counter_geralt_heavy_attack_cat == 4)
				{
					PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_cat += 1;
				}
				else if (combo_counter_geralt_heavy_attack_cat == 5)
				{
					PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_cat += 1;
				}
				else if (combo_counter_geralt_heavy_attack_cat == 6)
				{
					PlayerPlayAnimation( 'geralt_attack_strong_5_rp_ACS');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_cat += 1;
				}

				else if (combo_counter_geralt_heavy_attack_cat == 7)
				{
					PlayerPlayAnimation( 'geralt_attack_strong_3_lp_ACS');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_cat += 1;
				}

				else if (combo_counter_geralt_heavy_attack_cat == 8)
				{
					PlayerPlayAnimation( 'geralt_attack_strong_4_rp_ACS');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_cat += 1;
				}

				else if (combo_counter_geralt_heavy_attack_cat == 9)
				{
					PlayerPlayAnimation( 'geralt_attack_strong_2_lp_ACS');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_cat -= combo_counter_geralt_heavy_attack_cat;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_index_3 = RandDifferent(this.previous_geralt_light_attack_index_3 , 10);

				switch (geralt_light_attack_index_3) 
				{	
					case 9:
					PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');
					break;

					case 8:
					PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');
					break;

					case 7:
					PlayerPlayAnimation( 'geralt_attack_strong_2_lp_ACS');
					break;

					case 6:
					PlayerPlayAnimation( 'geralt_attack_strong_4_rp_ACS');
					break;

					case 5:
					PlayerPlayAnimation( 'geralt_attack_strong_3_lp_ACS');
					break;

					case 4:
					PlayerPlayAnimation( 'geralt_attack_strong_5_rp_ACS');
					break;

					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
					break;
				}

				this.previous_geralt_light_attack_index_3 = geralt_light_attack_index_3;
			}
		}
	}

	function geraltRandomGeraltLightAttackForward_Cat() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_forward_cat == 0)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_left_NEW_test_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 1)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_right_NEW_test_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 2)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_left_NEW_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 3)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_right_NEW_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 4)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_3_right_NEW_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 5)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 6)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 7)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 8)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 9)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 10)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 11)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 12)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 13)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 14)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat -= combo_counter_geralt_light_attack_forward_cat;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_forward_index_1 = RandDifferent(this.previous_geralt_light_attack_forward_index_1 , 15);

				switch (geralt_light_attack_forward_index_1) 
				{	
					case 14:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');
					break;

					case 13:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');
					break;

					case 12:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');
					break;

					case 11:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');
					break;

					case 10:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');
					break;

					case 9:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');
					break;

					case 8:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
					break;

					case 7:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
					break;
					
					case 6:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
					break;
					
					case 5:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
					break;

					case 4:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_3_right_NEW_ACS');
					break;	
					
					case 3:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_right_NEW_ACS');
					break;	
					
					case 2:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_left_NEW_ACS');
					break;	
				
					case 1:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_right_NEW_test_ACS');
					break;	
					
					default:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_left_NEW_test_ACS');
					break;	
				}

				this.previous_geralt_light_attack_forward_index_1 = geralt_light_attack_forward_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_forward_cat == 0)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_left_NEW_test_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 1)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_right_NEW_test_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 2)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_left_NEW_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 3)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_right_NEW_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 4)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_3_right_NEW_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 5)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 6)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 7)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 8)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 9)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 10)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 11)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 12)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 13)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 14)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat -= combo_counter_geralt_light_attack_forward_cat;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_forward_index_1 = RandDifferent(this.previous_geralt_light_attack_forward_index_1 , 15);

				switch (geralt_light_attack_forward_index_1) 
				{	
					case 14:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');
					break;

					case 13:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');
					break;

					case 12:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');
					break;

					case 11:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');
					break;

					case 10:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');
					break;

					case 9:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');
					break;

					case 8:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
					break;

					case 7:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
					break;
					
					case 6:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
					break;
					
					case 5:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
					break;

					case 4:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_3_right_NEW_ACS');
					break;	
					
					case 3:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_right_NEW_ACS');
					break;	
					
					case 2:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_left_NEW_ACS');
					break;	
				
					case 1:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_right_NEW_test_ACS');
					break;	
					
					default:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_left_NEW_test_ACS');
					break;	
				}

				this.previous_geralt_light_attack_forward_index_1 = geralt_light_attack_forward_index_1;
			}
		}
	}

	function geraltRandomGeraltHeavyAttackForward_Cat() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_forward_cat == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_heavy_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_cat == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_cat == 2)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_cat == 3)
				{
					
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_cat == 4)
				{
					
					PlayerPlayAnimation( 'geralt_attack_strong_5_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_cat += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_cat == 5)
				{
					
					PlayerPlayAnimation( 'geralt_attack_strong_3_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_cat += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_cat == 6)
				{
					
					PlayerPlayAnimation( 'geralt_attack_strong_4_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_cat += 1;
				}


				else if (combo_counter_geralt_heavy_attack_forward_cat == 7)
				{
					
					PlayerPlayAnimation( 'geralt_attack_strong_2_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_cat -= combo_counter_geralt_heavy_attack_forward_cat;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_heavy_attack_forward_index_1 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_1 , 8);

				switch (geralt_heavy_attack_forward_index_1) 
				{
					case 7:
					PlayerPlayAnimation( 'geralt_attack_strong_2_lp_ACS');
					break;

					case 6:
					PlayerPlayAnimation( 'geralt_attack_strong_4_rp_ACS');
					break;

					case 5:
					PlayerPlayAnimation( 'geralt_attack_strong_3_lp_ACS');
					break;

					case 4:
					PlayerPlayAnimation( 'geralt_attack_strong_5_rp_ACS');
					break;

					case 3:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');
					break;	
					
					case 2:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');
					break;	
				
					case 1:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');
					break;	
					
					default:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');
					break;	
				}

				this.previous_geralt_heavy_attack_forward_index_1 = geralt_heavy_attack_forward_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_forward_cat == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_heavy_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_cat == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_cat == 2)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_cat == 3)
				{
					
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_cat == 4)
				{
					
					PlayerPlayAnimation( 'geralt_attack_strong_5_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_cat += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_cat == 5)
				{
					
					PlayerPlayAnimation( 'geralt_attack_strong_3_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_cat += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_cat == 6)
				{
					
					PlayerPlayAnimation( 'geralt_attack_strong_4_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_cat += 1;
				}


				else if (combo_counter_geralt_heavy_attack_forward_cat == 7)
				{
					
					PlayerPlayAnimation( 'geralt_attack_strong_2_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_cat -= combo_counter_geralt_heavy_attack_forward_cat;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_heavy_attack_forward_index_3 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_3 , 8);

				switch (geralt_heavy_attack_forward_index_3) 
				{	
					case 7:
					PlayerPlayAnimation( 'geralt_attack_strong_2_lp_ACS');
					break;

					case 6:
					PlayerPlayAnimation( 'geralt_attack_strong_4_rp_ACS');
					break;

					case 5:
					PlayerPlayAnimation( 'geralt_attack_strong_3_lp_ACS');
					break;

					case 4:
					PlayerPlayAnimation( 'geralt_attack_strong_5_rp_ACS');
					break;

					case 3:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');
					break;	
					
					case 2:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');
					break;	
				
					case 1:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');
					break;	
					
					default:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');
					break;		
				}

				this.previous_geralt_heavy_attack_forward_index_3 = geralt_heavy_attack_forward_index_3;
			}
		}
	}

	function geraltRandomGeraltSpecialAttack_Cat() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_special_attack_cat == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_special_attack_cat += 1;
				}
				else if (combo_counter_geralt_special_attack_cat == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_cat += 1;
				}
				else if (combo_counter_geralt_special_attack_cat == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_cat -= combo_counter_geralt_special_attack_cat;
				}
			}
			else if (ACS_ComboMode() == 1)
			{		
				geralt_special_attack_index_3 = RandDifferent(this.previous_geralt_special_attack_index_3 , 3);

				switch (geralt_special_attack_index_3) 
				{	
					case 2:
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');
					break;

					case 1:
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');
					break;
				}

				this.previous_geralt_special_attack_index_3 = geralt_special_attack_index_3;	
			}	
		}	
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_special_attack_cat == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_special_attack_cat += 1;
				}
				else if (combo_counter_geralt_special_attack_cat == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_cat += 1;
				}
				else if (combo_counter_geralt_special_attack_cat == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_cat -= combo_counter_geralt_special_attack_cat;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_special_attack_index_3 = RandDifferent(this.previous_geralt_special_attack_index_3, 3);

				switch (geralt_special_attack_index_3) 
				{	
					case 2:
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');
					break;

					case 1:
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');
					break;
				}	
				
				this.previous_geralt_special_attack_index_3 = geralt_special_attack_index_3;
			}
		}
	}

	// Griffin School

	function geraltRandomGeraltLightAttack_Griffin() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				switch ( combo_counter_geralt_light_attack_griffin )
				{
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_griffin += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_griffin += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_griffin += 1;
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_griffin += 1;
					break;

					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_griffin += 1;
					break;
					
					case 4:
					PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_griffin += 1;
					break;
					
					case 5:
					PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_griffin += 1;
					break;

					case 6:
					PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_griffin += 1;
					break;
					
					case 7:
					PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_griffin += 1;
					break;
					
					case 8:
					PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_griffin += 1;
					break;

					case 9:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_griffin += 1;
					break;

					case 10:
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_griffin += 1;
					break;

					case 11:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_right_1_lp_40ms_forward_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_griffin -= combo_counter_geralt_light_attack_griffin;
					break;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_index_1 = RandDifferent(this.previous_geralt_light_attack_index_1 , 12);

				switch (geralt_light_attack_index_1) 
				{
					case 11:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	
					break;

					case 10:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_right_1_lp_40ms_forward_ACS');
					break;

					case 9:
					PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');
					break;

					case 8:
					PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');
					break;

					case 7:
					PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');
					break;

					case 6:
					PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');
					break;

					case 5:
					PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');
					break;

					case 4:
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');
					break;

					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
					break;
				}

				this.previous_geralt_light_attack_index_1 = geralt_light_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				switch ( combo_counter_geralt_light_attack_griffin )
				{
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_griffin += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_griffin += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_griffin += 1;
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_griffin += 1;
					break;

					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_griffin += 1;
					break;
					
					case 4:
					PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_griffin += 1;
					break;
					
					case 5:
					PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_griffin += 1;
					break;

					case 6:
					PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_griffin += 1;
					break;
					
					case 7:
					PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_griffin += 1;
					break;
					
					case 8:
					PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_griffin += 1;
					break;

					case 9:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_griffin += 1;
					break;

					case 10:
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_griffin += 1;
					break;

					case 11:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_right_1_lp_40ms_forward_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_griffin -= combo_counter_geralt_light_attack_griffin;
					break;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_index_3 = RandDifferent(this.previous_geralt_light_attack_index_3 , 12);

				switch (geralt_light_attack_index_3) 
				{
					case 11:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	
					break;

					case 10:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_right_1_lp_40ms_forward_ACS');
					break;

					case 9:
					PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');
					break;

					case 8:
					PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');
					break;

					case 7:
					PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');
					break;

					case 6:
					PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');
					break;

					case 5:
					PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');
					break;

					case 4:
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');
					break;

					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
					break;
				}

				this.previous_geralt_light_attack_index_3 = geralt_light_attack_index_3;
			}
		}
	}

	function geraltRandomGeraltHeavyAttack_Griffin() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_griffin == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_1_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}
				else if (combo_counter_geralt_heavy_attack_griffin == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_2_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}
				else if (combo_counter_geralt_heavy_attack_griffin == 2)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_1_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_griffin == 3)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_2_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_griffin == 4)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_left_1_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_griffin == 5)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_up_1_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_griffin == 6)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_left_1_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_griffin == 7)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_up_1_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_griffin == 8)
				{
					PlayerPlayAnimation( 'geralt_attack_strong_5_rp_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_griffin == 9)
				{
					PlayerPlayAnimation( 'geralt_attack_strong_3_lp_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_griffin == 10)
				{
					PlayerPlayAnimation( 'geralt_attack_strong_4_rp_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_griffin == 11)
				{
					PlayerPlayAnimation( 'geralt_attack_strong_2_lp_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin -= combo_counter_geralt_heavy_attack_griffin;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_heavy_attack_index_1 = RandDifferent(this.previous_geralt_heavy_attack_index_1 , 12);

				switch (geralt_heavy_attack_index_1) 
				{
					case 11:
					PlayerPlayAnimation( 'geralt_attack_strong_2_lp_ACS');
					break;

					case 10:
					PlayerPlayAnimation( 'geralt_attack_strong_4_rp_ACS');
					break;

					case 9:
					PlayerPlayAnimation( 'geralt_attack_strong_3_lp_ACS');
					break;

					case 8:
					PlayerPlayAnimation( 'geralt_attack_strong_5_rp_ACS');
					break;

					case 7:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_up_1_ACS');
					break;

					case 6:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_left_1_ACS');
					break;

					case 5:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_2_ACS');
					break;

					case 4:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_1_ACS');
					break;

					case 3:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_1_ACS');
					break;

					case 2:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_2_ACS');
					break;

					case 1:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_left_1_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_up_1_ACS');
					break;
				}

				this.previous_geralt_heavy_attack_index_1 = geralt_heavy_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_griffin == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_1_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}
				else if (combo_counter_geralt_heavy_attack_griffin == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_2_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}
				else if (combo_counter_geralt_heavy_attack_griffin == 2)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_1_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_griffin == 3)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_2_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_griffin == 4)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_left_1_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_griffin == 5)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_up_1_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_griffin == 6)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_left_1_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_griffin == 7)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_up_1_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_griffin == 8)
				{
					PlayerPlayAnimation( 'geralt_attack_strong_5_rp_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_griffin == 9)
				{
					PlayerPlayAnimation( 'geralt_attack_strong_3_lp_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_griffin == 10)
				{
					PlayerPlayAnimation( 'geralt_attack_strong_4_rp_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_griffin == 11)
				{
					PlayerPlayAnimation( 'geralt_attack_strong_2_lp_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin -= combo_counter_geralt_heavy_attack_griffin;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_heavy_attack_index_3 = RandDifferent(this.previous_geralt_heavy_attack_index_3 , 12);

				switch (geralt_heavy_attack_index_3) 
				{	
					case 11:
					PlayerPlayAnimation( 'geralt_attack_strong_2_lp_ACS');
					break;

					case 10:
					PlayerPlayAnimation( 'geralt_attack_strong_4_rp_ACS');
					break;

					case 9:
					PlayerPlayAnimation( 'geralt_attack_strong_3_lp_ACS');
					break;

					case 8:
					PlayerPlayAnimation( 'geralt_attack_strong_5_rp_ACS');
					break;

					case 7:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_up_1_ACS');
					break;

					case 6:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_left_1_ACS');
					break;

					case 5:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_2_ACS');
					break;

					case 4:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_1_ACS');
					break;

					case 3:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_1_ACS');
					break;

					case 2:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_2_ACS');
					break;

					case 1:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_left_1_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_up_1_ACS');
					break;
				}

				this.previous_geralt_heavy_attack_index_3 = geralt_heavy_attack_index_3;
			}
		}
	}

	function geraltRandomGeraltLightAttackForward_Griffin() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_forward_griffin == 0)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_rp_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_griffin == 1)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_lp_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_griffin == 2)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_rp_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_griffin == 3)
				{
					
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_04_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_griffin == 4)
				{
					
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_griffin == 5)
				{
					
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_griffin == 6)
				{
					
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_griffin == 7)
				{
					
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_05_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_griffin == 8)
				{
					
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_griffin == 9)
				{
					
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_griffin == 10)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_06_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin -= combo_counter_geralt_light_attack_forward_griffin;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_forward_index_1 = RandDifferent(this.previous_geralt_light_attack_forward_index_1 , 12);

				switch (geralt_light_attack_forward_index_1) 
				{	
					case 11:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_06_lp_ACS');
					break;
					
					case 10:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_04_rp_ACS');
					break;
					
					case 9:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');
					break;
					
					case 7:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_05_rp_ACS');
					break;
					
					case 6:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_04_lp_ACS');
					break;
					
					case 5:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_rp_ACS');
					break;
					
					case 4:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_lp_ACS');
					break;
					
					case 3:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_lp_ACS');
					break;	
				}

				this.previous_geralt_light_attack_forward_index_1 = geralt_light_attack_forward_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_forward_griffin == 0)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_rp_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_griffin == 1)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_lp_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_griffin == 2)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_rp_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_griffin == 3)
				{
					
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_04_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_griffin == 4)
				{
					
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_griffin == 5)
				{
					
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_griffin == 6)
				{
					
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_griffin == 7)
				{
					
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_05_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_griffin == 8)
				{
					
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_griffin == 9)
				{
					
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_griffin == 10)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_06_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin -= combo_counter_geralt_light_attack_forward_griffin;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_forward_index_3 = RandDifferent(this.previous_geralt_light_attack_forward_index_3 , 12);

				switch (geralt_light_attack_forward_index_3) 
				{	
					case 11:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_06_lp_ACS');
					break;
					
					case 10:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_04_rp_ACS');
					break;
					
					case 9:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');
					break;
					
					case 7:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_05_rp_ACS');
					break;
					
					case 6:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_04_lp_ACS');
					break;
					
					case 5:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_rp_ACS');
					break;
					
					case 4:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_lp_ACS');
					break;
					
					case 3:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_lp_ACS');
					break;
				}

				this.previous_geralt_light_attack_forward_index_3 = geralt_light_attack_forward_index_3;
			}
		}
	}

	function geraltRandomGeraltHeavyAttackForward_Griffin() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_forward_griffin == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_griffin == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_griffin == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_griffin == 3)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_griffin == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_griffin == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_griffin == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_griffin == 7)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_griffin == 8)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_griffin == 9)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_griffin == 10)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_griffin == 11)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin -= combo_counter_geralt_heavy_attack_forward_griffin;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5*1.5 ) 
				{
					geralt_heavy_attack_forward_index_1 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_1 , 2);

					switch (geralt_heavy_attack_forward_index_1) 
					{
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
						break;	
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
						break;	
					}

					this.previous_geralt_heavy_attack_forward_index_1 = geralt_heavy_attack_forward_index_1;
				}
				else
				{
					geralt_heavy_attack_forward_index_1 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_1 , 10);

					switch (geralt_heavy_attack_forward_index_1) 
					{
						case 9:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
						break;	

						case 8:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
						break;	

						case 7:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');
						break;	

						case 6:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');
						break;	

						case 5:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');
						break;	

						case 4:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
						break;			
						
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');
						break;

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');
						break;
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');
						break;
					}

					this.previous_geralt_heavy_attack_forward_index_1 = geralt_heavy_attack_forward_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_forward_griffin == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_griffin == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_griffin == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_griffin == 3)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_griffin == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_griffin == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_griffin == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_griffin == 7)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_griffin == 8)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_griffin == 9)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_griffin == 10)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_griffin == 11)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin -= combo_counter_geralt_heavy_attack_forward_griffin;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_heavy_attack_forward_index_3 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_3 , 12);

				switch (geralt_heavy_attack_forward_index_3) 
				{	
					case 11:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
					break;
							
					case 10:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
					break;	

					case 9:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');
					break;	
					
					case 8:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');
					break;
					
					case 7:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');
					break;
					
					case 6:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
					break;	
					
					case 5:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');
					break;	
					
					case 4:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');
					break;	
				
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');
					break;	

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');
					break;	

					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
					break;	
				}

				this.previous_geralt_heavy_attack_forward_index_3 = geralt_heavy_attack_forward_index_3;
			}
		}
	}

	timer function RemoveGriffinSpecialAttackTag(dt : float, id : int)
	{
		thePlayer.RemoveTag('ACS_Griffin_Special_Attack');
	}

	function geraltRandomGeraltSpecialAttack_Griffin() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				PlayerPlayAnimation( 'man_npc_longsword_attack_special_01_rp_ACS');

				thePlayer.AddTag('ACS_Griffin_Special_Attack');

				ACS_Griffin_Special_Attack_Effects();
			}
			else if (ACS_ComboMode() == 1)
			{		
				PlayerPlayAnimation( 'man_npc_longsword_attack_special_01_rp_ACS');

				thePlayer.AddTag('ACS_Griffin_Special_Attack');

				ACS_Griffin_Special_Attack_Effects();
			}

			RemoveTimer('RemoveGriffinSpecialAttackTag');	
			AddTimer('RemoveGriffinSpecialAttackTag', 1.10625, false);	
		}	
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				PlayerPlayAnimation( 'man_npc_longsword_attack_special_01_rp_ACS');

				thePlayer.AddTag('ACS_Griffin_Special_Attack');

				ACS_Griffin_Special_Attack_Effects();
			}
			else if (ACS_ComboMode() == 1)
			{
				PlayerPlayAnimation( 'man_npc_longsword_attack_special_01_rp_ACS');

				thePlayer.AddTag('ACS_Griffin_Special_Attack');

				ACS_Griffin_Special_Attack_Effects();
			}

			RemoveTimer('RemoveGriffinSpecialAttackTag');	
			AddTimer('RemoveGriffinSpecialAttackTag', 1.10625, false);
		}
	}

	// Manticore School

	function geraltRandomGeraltLightAttack_Manticore() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				switch ( combo_counter_geralt_light_attack_manticore )
				{
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_manticore += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_manticore += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_manticore += 1;
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_manticore += 1;
					break;

					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_manticore += 1;
					break;
					
					case 4:
					PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_manticore += 1;
					break;
					
					case 5:
					PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_manticore += 1;
					break;

					case 6:
					PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_manticore += 1;
					break;
					
					case 7:
					PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_manticore += 1;
					break;
					
					case 8:
					PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_manticore += 1;
					break;

					case 9:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_manticore += 1;
					break;

					case 10:
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_manticore += 1;
					break;

					case 11:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_right_1_lp_40ms_forward_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_manticore -= combo_counter_geralt_light_attack_manticore;
					break;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_index_1 = RandDifferent(this.previous_geralt_light_attack_index_1 , 12);

				switch (geralt_light_attack_index_1) 
				{
					case 11:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	
					break;

					case 10:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_right_1_lp_40ms_forward_ACS');
					break;

					case 9:
					PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');
					break;

					case 8:
					PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');
					break;

					case 7:
					PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');
					break;

					case 6:
					PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');
					break;

					case 5:
					PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');
					break;

					case 4:
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');
					break;

					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
					break;
				}

				this.previous_geralt_light_attack_index_1 = geralt_light_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				switch ( combo_counter_geralt_light_attack_manticore )
				{
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_manticore += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_manticore += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_manticore += 1;
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_manticore += 1;
					break;

					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_manticore += 1;
					break;
					
					case 4:
					PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_manticore += 1;
					break;
					
					case 5:
					PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_manticore += 1;
					break;

					case 6:
					PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_manticore += 1;
					break;
					
					case 7:
					PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_manticore += 1;
					break;
					
					case 8:
					PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_manticore += 1;
					break;

					case 9:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_manticore += 1;
					break;

					case 10:
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_manticore += 1;
					break;

					case 11:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_right_1_lp_40ms_forward_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_manticore -= combo_counter_geralt_light_attack_manticore;
					break;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_index_3 = RandDifferent(this.previous_geralt_light_attack_index_3 , 12);

				switch (geralt_light_attack_index_3) 
				{	
					case 11:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	
					break;

					case 10:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_right_1_lp_40ms_forward_ACS');
					break;

					case 9:
					PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');
					break;

					case 8:
					PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');
					break;

					case 7:
					PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');
					break;

					case 6:
					PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');
					break;

					case 5:
					PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');
					break;

					case 4:
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');
					break;

					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
					break;
				}

				this.previous_geralt_light_attack_index_3 = geralt_light_attack_index_3;
			}
		}
	}

	function geraltRandomGeraltHeavyAttack_Manticore() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_manticore == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}
				else if (combo_counter_geralt_heavy_attack_manticore == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}
				else if (combo_counter_geralt_heavy_attack_manticore == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}
				else if (combo_counter_geralt_heavy_attack_manticore == 3)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_manticore == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_manticore == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_manticore == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_manticore == 7)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_manticore == 8)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_manticore == 9)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_manticore == 10)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_manticore == 11)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore -= combo_counter_geralt_heavy_attack_manticore;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5*1.5 ) 
				{
					geralt_heavy_attack_index_1 = RandDifferent(this.previous_geralt_heavy_attack_index_1 , 2);

					switch (geralt_heavy_attack_index_1) 
					{
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
						break;	
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
						break;	
					}

					this.previous_geralt_heavy_attack_index_1 = geralt_heavy_attack_index_1;
				}
				else
				{
					geralt_heavy_attack_index_1 = RandDifferent(this.previous_geralt_heavy_attack_index_1 , 10);

					switch (geralt_heavy_attack_index_1) 
					{
						case 9:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
						break;	

						case 8:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
						break;	

						case 7:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');
						break;	

						case 6:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');
						break;	

						case 5:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');
						break;	

						case 4:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
						break;			
						
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');
						break;

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');
						break;
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');
						break;
					}

					this.previous_geralt_heavy_attack_index_1 = geralt_heavy_attack_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_manticore == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}
				else if (combo_counter_geralt_heavy_attack_manticore == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}
				else if (combo_counter_geralt_heavy_attack_manticore == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}
				else if (combo_counter_geralt_heavy_attack_manticore == 3)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_manticore == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_manticore == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_manticore == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_manticore == 7)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_manticore == 8)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_manticore == 9)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_manticore == 10)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_manticore == 11)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore -= combo_counter_geralt_heavy_attack_manticore;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_heavy_attack_index_3 = RandDifferent(this.previous_geralt_heavy_attack_index_3 , 12);

				switch (geralt_heavy_attack_index_3) 
				{
					case 11:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
					break;	
					
					case 10:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
					break;	

					case 9:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
					break;	

					case 8:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
					break;	

					case 7:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');
					break;	

					case 6:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');
					break;	

					case 5:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');
					break;	

					case 4:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
					break;			
					
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');
					break;
				}

				this.previous_geralt_heavy_attack_index_3 = geralt_heavy_attack_index_3;
			}
		}
	}

	function geraltRandomGeraltLightAttackForward_Manticore() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_forward_manticore == 0)
				{
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					PlayerPlayAnimation( 'man_npc_2hspear_attack_02_rp_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_forward_manticore += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_manticore == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_3_lp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_manticore += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_manticore == 2)
				{
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_2hspear_attack_03_rp_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_manticore += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_manticore == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_4_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_manticore == 4)
				{	
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_rp_50ms_mod_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_manticore == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_lp_50ms_mod_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_manticore -= combo_counter_geralt_light_attack_forward_manticore;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_forward_index_1 = RandDifferent(this.previous_geralt_light_attack_forward_index_1 , 6);

				switch (geralt_light_attack_forward_index_1) 
				{	
					case 5:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_lp_50ms_mod_ACS');
					break;
					
					case 4:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_rp_50ms_mod_ACS');
					break;
					
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_4_lp_40ms');
					break;
					
					case 2:
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_2hspear_attack_03_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_3_lp_40ms');
					break;

					default:
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_2hspear_attack_02_rp_ACS');
					break;	
				}

				this.previous_geralt_light_attack_forward_index_1 = geralt_light_attack_forward_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_forward_manticore == 0)
				{
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_2hspear_attack_02_rp_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_forward_manticore += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_manticore == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_3_lp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_manticore += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_manticore == 2)
				{
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_2hspear_attack_03_rp_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_manticore += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_manticore == 3)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_4_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_manticore == 4)
				{	
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_rp_50ms_mod_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_manticore == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_lp_50ms_mod_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_manticore -= combo_counter_geralt_light_attack_forward_manticore;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_forward_index_3 = RandDifferent(this.previous_geralt_light_attack_forward_index_3 , 6);

				switch (geralt_light_attack_forward_index_3) 
				{	
					case 5:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_lp_50ms_mod_ACS');
					break;
					
					case 4:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_rp_50ms_mod_ACS');
					break;
					
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_4_lp_40ms');
					break;
					
					case 2:
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_2hspear_attack_03_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_3_lp_40ms');
					break;

					default:
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_2hspear_attack_02_rp_ACS');
					break;	
				}

				this.previous_geralt_light_attack_forward_index_3 = geralt_light_attack_forward_index_3;
			}
		}
	}

	function geraltRandomGeraltHeavyAttackForward_Manticore() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_forward_manticore == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_manticore == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_manticore == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_manticore == 3)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_manticore == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_manticore == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_manticore == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_manticore == 7)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_manticore == 8)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_manticore == 9)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_manticore == 10)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_manticore == 11)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore -= combo_counter_geralt_heavy_attack_forward_manticore;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5*1.5 ) 
				{
					geralt_heavy_attack_forward_index_1 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_1 , 2);

					switch (geralt_heavy_attack_forward_index_1) 
					{
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
						break;	
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
						break;	
					}

					this.previous_geralt_heavy_attack_forward_index_1 = geralt_heavy_attack_forward_index_1;
				}
				else
				{
					geralt_heavy_attack_forward_index_1 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_1 , 10);

					switch (geralt_heavy_attack_forward_index_1) 
					{
						case 9:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
						break;	

						case 8:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
						break;	

						case 7:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');
						break;	

						case 6:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');
						break;	

						case 5:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');
						break;	

						case 4:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
						break;			
						
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');
						break;

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');
						break;
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');
						break;
					}

					this.previous_geralt_heavy_attack_forward_index_1 = geralt_heavy_attack_forward_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_forward_manticore == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_manticore == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_manticore == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_manticore == 3)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_manticore == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_manticore == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_manticore == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_manticore == 7)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_manticore == 8)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_manticore == 9)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_manticore == 10)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_manticore == 11)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore -= combo_counter_geralt_heavy_attack_forward_manticore;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_heavy_attack_forward_index_3 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_3 , 12);

				switch (geralt_heavy_attack_forward_index_3) 
				{	
					case 11:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
					break;
							
					case 10:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
					break;	

					case 9:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');
					break;	
					
					case 8:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');
					break;
					
					case 7:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');
					break;
					
					case 6:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
					break;	
					
					case 5:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');
					break;	
					
					case 4:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');
					break;	
				
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');
					break;	

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');
					break;	

					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
					break;	
				}

				this.previous_geralt_heavy_attack_forward_index_3 = geralt_heavy_attack_forward_index_3;
			}
		}
	}

	timer function RemoveManticoreSpecialAttackTag(dt : float, id : int)
	{
		thePlayer.RemoveTag('ACS_Manticore_Special_Attack');
	}

	function geraltRandomGeraltSpecialAttack_Manticore() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_special_attack_manticore == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_01_rp_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_special_attack_manticore += 1;
				}
				else if (combo_counter_geralt_special_attack_manticore == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_02_rp_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_manticore += 1;
				}
				else if (combo_counter_geralt_special_attack_manticore == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_03_rp_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_manticore += 1;
				}
				else if (combo_counter_geralt_special_attack_manticore == 3)
				{
					
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_manticore -= combo_counter_geralt_special_attack_manticore;
				}
			}
			else if (ACS_ComboMode() == 1)
			{		
				geralt_special_attack_index_3 = RandDifferent(this.previous_geralt_special_attack_index_3 , 4);

				switch (geralt_special_attack_index_3) 
				{	
					case 3:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_04_rp_ACS');
					break;

					case 2:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_03_rp_ACS');
					break;

					case 1:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_02_rp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_01_rp_ACS');
					break;
				}

				this.previous_geralt_special_attack_index_3 = geralt_special_attack_index_3;	
			}

			ACS_Manticore_Special_Attack_Effects();
			thePlayer.AddTag('ACS_Manticore_Special_Attack');
			RemoveTimer('RemoveManticoreSpecialAttackTag');	
			AddTimer('RemoveManticoreSpecialAttackTag', 1.10625, false);	
		}	
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_special_attack_manticore == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_01_rp_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_special_attack_manticore += 1;
				}
				else if (combo_counter_geralt_special_attack_manticore == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_02_rp_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_manticore += 1;
				}
				else if (combo_counter_geralt_special_attack_manticore == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_03_rp_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_manticore += 1;
				}
				else if (combo_counter_geralt_special_attack_manticore == 3)
				{
					
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_manticore -= combo_counter_geralt_special_attack_manticore;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_special_attack_index_3 = RandDifferent(this.previous_geralt_special_attack_index_3 , 4);

				switch (geralt_special_attack_index_3) 
				{	
					case 3:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_04_rp_ACS');
					break;

					case 2:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_03_rp_ACS');
					break;

					case 1:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_02_rp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_01_rp_ACS');
					break;
				}

				this.previous_geralt_special_attack_index_3 = geralt_special_attack_index_3;	
			}

			ACS_Manticore_Special_Attack_Effects();
			thePlayer.AddTag('ACS_Manticore_Special_Attack');
			RemoveTimer('RemoveManticoreSpecialAttackTag');	
			AddTimer('RemoveManticoreSpecialAttackTag', 1.10625, false);
		}
	}

	// Wolf School

	function geraltRandomGeraltLightAttack_Wolf() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				switch ( combo_counter_geralt_light_attack )
				{
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
					break;

					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
					break;
					
					case 4:
					PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
					break;
					
					case 5:
					PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
					break;
					
					case 6:
					PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
					break;
					
					case 7:
					PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
					break;
					
					case 8:
					PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
					break;

					case 9:
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
					break;

					case 10:
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
					break;

					case 11:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_right_1_lp_40ms_forward_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack -= combo_counter_geralt_light_attack;
					break;
				}

				/*
				if (combo_counter_geralt_light_attack == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack += 1;
				}
				else if (combo_counter_geralt_light_attack == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}
				else if (combo_counter_geralt_light_attack == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}
				else if (combo_counter_geralt_light_attack == 3)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}
				else if (combo_counter_geralt_light_attack == 4)
				{
					PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}
				else if (combo_counter_geralt_light_attack == 5)
				{
					PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}
				else if (combo_counter_geralt_light_attack == 6)
				{
					
					PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}

				else if (combo_counter_geralt_light_attack == 7)
				{
					
					PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}

				else if (combo_counter_geralt_light_attack == 8)
				{
					
					PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}

				else if (combo_counter_geralt_light_attack == 9)
				{
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack -= combo_counter_geralt_light_attack;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3 * 3 ) 
				{
					geralt_light_attack_index_1 = RandDifferent(this.previous_geralt_light_attack_index_1 , 12);

					switch (geralt_light_attack_index_1) 
					{
						case 11:
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');
						break;

						case 10:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_right_1_lp_40ms_forward_ACS');
						break;

						case 9:
						PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');
						break;

						case 8:
						PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');
						break;

						case 7:
						PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');
						break;

						case 6:
						PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');
						break;

						case 5:
						PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');
						break;

						case 4:
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

						PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');
						break;

						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
						break;

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
						break;
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
						break;
					}

					this.previous_geralt_light_attack_index_1 = geralt_light_attack_index_1;
				}
				else
				{
					geralt_light_attack_index_1 = RandDifferent(this.previous_geralt_light_attack_index_1 , 10);

					switch (geralt_light_attack_index_1) 
					{
						case 9:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_3_rp_50ms_mod_ACS');
						break;

						case 8:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_rp_50ms_mod_ACS');
						break;

						case 7:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_lp_50ms_mod_ACS');
						break;

						case 6:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_rp_50ms_mod_ACS');
						break;

						case 5:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_2_rp_50ms_mod_ACS');
						break;

						case 4:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_2_lp_50ms_mod_ACS');
						break;

						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_1_rp_50ms_mod_ACS');
						break;	

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_lp_50ms_mod_ACS');
						break;	

						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_lp_50ms_mod_ACS');
						break;	
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_rp_50ms_mod_ACS');
						break;	
					}

					this.previous_geralt_light_attack_index_1 = geralt_light_attack_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				switch ( combo_counter_geralt_light_attack )
				{
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack += 1;
					break;

					case 0: 
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack += 1;
					break;

					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
					break;

					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
					break;
					
					case 4:
					PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
					break;
					
					case 5:
					PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
					break;
					
					case 6:
					PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
					break;
					
					case 7:
					PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
					break;
					
					case 8:
					PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
					break;

					case 9:
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
					break;

					case 10:
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
					break;

					case 11:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_right_1_lp_40ms_forward_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack -= combo_counter_geralt_light_attack;
					break;
				}

				/*
				if (combo_counter_geralt_light_attack == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack += 1;
				}
				else if (combo_counter_geralt_light_attack == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}
				else if (combo_counter_geralt_light_attack == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}
				else if (combo_counter_geralt_light_attack == 3)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}
				else if (combo_counter_geralt_light_attack == 4)
				{
					PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}
				else if (combo_counter_geralt_light_attack == 5)
				{
					PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}
				else if (combo_counter_geralt_light_attack == 6)
				{
					
					PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}

				else if (combo_counter_geralt_light_attack == 7)
				{
					
					PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}

				else if (combo_counter_geralt_light_attack == 8)
				{
					
					PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}

				else if (combo_counter_geralt_light_attack == 9)
				{
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack -= combo_counter_geralt_light_attack;
				}
				*/
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_index_3 = RandDifferent(this.previous_geralt_light_attack_index_3 , 12);

				switch (geralt_light_attack_index_3) 
				{	
					case 11:
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
					
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');
					break;

					case 10:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_right_1_lp_40ms_forward_ACS');
					break;

					case 9:
					PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');
					break;

					case 8:
					PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');
					break;

					case 7:
					PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');
					break;

					case 6:
					PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');
					break;

					case 5:
					PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');
					break;

					case 4:
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');
					break;

					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
					break;
				}

				this.previous_geralt_light_attack_index_3 = geralt_light_attack_index_3;
			}
		}
	}

	function geraltRandomGeraltHeavyAttack_Wolf() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}
				else if (combo_counter_geralt_heavy_attack == 1)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 7)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 8)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 9)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}


				else if (combo_counter_geralt_heavy_attack == 10)
				{
					
					PlayerPlayAnimation( 'geralt_attack_strong_5_rp_ACS');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 11)
				{
					
					PlayerPlayAnimation( 'geralt_attack_strong_3_lp_ACS');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 12)
				{
					
					PlayerPlayAnimation( 'geralt_attack_strong_4_rp_ACS');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 13)
				{
					
					PlayerPlayAnimation( 'geralt_attack_strong_2_lp_ACS');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack -= combo_counter_geralt_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3 * 3 )
				{
					geralt_heavy_attack_index_1 = RandDifferent(this.previous_geralt_heavy_attack_index_1 , 14);

					switch (geralt_heavy_attack_index_1) 
					{
						case 13:
						PlayerPlayAnimation( 'geralt_attack_strong_2_lp_ACS');
						break;

						case 12:
						PlayerPlayAnimation( 'geralt_attack_strong_4_rp_ACS');
						break;

						case 11:
						PlayerPlayAnimation( 'geralt_attack_strong_3_lp_ACS');
						break;

						case 10:
						PlayerPlayAnimation( 'geralt_attack_strong_5_rp_ACS');
						break;

						case 9:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
						break;	

						case 8:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
						break;	

						case 7:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');
						break;	

						case 6:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');
						break;	

						case 5:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');
						break;	

						case 4:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
						break;			
						
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');
						break;

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');
						break;
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');
						break;
					}

					this.previous_geralt_heavy_attack_index_1 = geralt_heavy_attack_index_1;
				}
				else
				{
					geralt_heavy_attack_index_1 = RandDifferent(this.previous_geralt_heavy_attack_index_1 , 2);

					switch (geralt_heavy_attack_index_1) 
					{
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
						break;
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
						break;
					}

					this.previous_geralt_heavy_attack_index_1 = geralt_heavy_attack_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}
				else if (combo_counter_geralt_heavy_attack == 1)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 7)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 8)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 9)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}


				else if (combo_counter_geralt_heavy_attack == 10)
				{
					
					PlayerPlayAnimation( 'geralt_attack_strong_5_rp_ACS');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 11)
				{
					
					PlayerPlayAnimation( 'geralt_attack_strong_3_lp_ACS');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 12)
				{
					
					PlayerPlayAnimation( 'geralt_attack_strong_4_rp_ACS');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 13)
				{
					
					PlayerPlayAnimation( 'geralt_attack_strong_2_lp_ACS');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack -= combo_counter_geralt_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_heavy_attack_index_3 = RandDifferent(this.previous_geralt_heavy_attack_index_3 , 16);

				switch (geralt_heavy_attack_index_3) 
				{
					case 15:
					PlayerPlayAnimation( 'geralt_attack_strong_2_lp_ACS');
					break;

					case 14:
					PlayerPlayAnimation( 'geralt_attack_strong_4_rp_ACS');
					break;

					case 13:
					PlayerPlayAnimation( 'geralt_attack_strong_3_lp_ACS');
					break;

					case 12:
					PlayerPlayAnimation( 'geralt_attack_strong_5_rp_ACS');
					break;

					case 11:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
					break;	
					
					case 10:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
					break;	

					case 9:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
					break;	

					case 8:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
					break;	

					case 7:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');
					break;	

					case 6:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');
					break;	

					case 5:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');
					break;	

					case 4:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
					break;			
					
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');
					break;
				}

				this.previous_geralt_heavy_attack_index_3 = geralt_heavy_attack_index_3;
			}
		}
	}

	function geraltRandomGeraltLightAttackForward_Wolf() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				if( targetDistance <= 3 * 3 ) 
				{
					ACS_Combo_Mode_Reset();

					switch ( combo_counter_geralt_light_attack )
					{
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

						combo_counter_damage -= combo_counter_damage;

						combo_counter_geralt_light_attack += 1;
						break;

						case 0: 
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

						combo_counter_damage -= combo_counter_damage;

						combo_counter_geralt_light_attack += 1;
						break;

						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
						break;

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
						break;

						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
						break;
						
						case 4:
						PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
						break;
						
						case 5:
						PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
						break;

						case 6:
						PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
						break;
						
						case 7:
						PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
						break;
						
						case 8:
						PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
						break;

						case 9:
						PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
						break;

						case 10:
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

						PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
						break;

						case 11:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_right_1_lp_40ms_forward_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack -= combo_counter_geralt_light_attack;
						break;
					}

					/*
					if (combo_counter_geralt_light_attack == 0)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

						combo_counter_damage -= combo_counter_damage;

						combo_counter_geralt_light_attack += 1;
					}
					else if (combo_counter_geralt_light_attack == 1)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
					}
					else if (combo_counter_geralt_light_attack == 2)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
					}
					else if (combo_counter_geralt_light_attack == 3)
					{
						
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
					}
					else if (combo_counter_geralt_light_attack == 4)
					{
						PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
					}
					else if (combo_counter_geralt_light_attack == 5)
					{
						PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
					}
					else if (combo_counter_geralt_light_attack == 6)
					{
						
						PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
					}

					else if (combo_counter_geralt_light_attack == 7)
					{
						
						PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
					}

					else if (combo_counter_geralt_light_attack == 8)
					{
						
						PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
					}

					else if (combo_counter_geralt_light_attack == 9)
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

						PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack -= combo_counter_geralt_light_attack;
					}
					*/
				}
				else
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_geralt_light_attack_forward == 0)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_rp_50ms_mod_ACS');	

						combo_counter_damage -= combo_counter_damage;

						combo_counter_geralt_light_attack_forward += 1;
					}
					else if (combo_counter_geralt_light_attack_forward == 1)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_lp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward += 1;
					}

					else if (combo_counter_geralt_light_attack_forward == 2)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_lp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward += 1;
					}

					else if (combo_counter_geralt_light_attack_forward == 3)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_1_rp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward += 1;
					}

					else if (combo_counter_geralt_light_attack_forward == 4)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_2_lp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward += 1;
					}

					else if (combo_counter_geralt_light_attack_forward == 5)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_2_rp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward += 1;
					}

					else if (combo_counter_geralt_light_attack_forward == 6)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_rp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward += 1;
					}

					else if (combo_counter_geralt_light_attack_forward == 7)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_lp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward += 1;
					}

					else if (combo_counter_geralt_light_attack_forward == 8)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_rp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward += 1;
					}

					else if (combo_counter_geralt_light_attack_forward == 9)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_3_rp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward -= combo_counter_geralt_light_attack_forward;
					}
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3 * 3 ) 
				{
					geralt_light_attack_forward_index_1 = RandDifferent(this.previous_geralt_light_attack_forward_index_1 , 12);

					switch (geralt_light_attack_forward_index_1) 
					{
						case 11:
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
						PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');
						break;

						case 10:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_right_1_lp_40ms_forward_ACS');
						break;

						case 9:
						PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');
						break;

						case 8:
						PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');
						break;

						case 7:
						PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');
						break;

						case 6:
						PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');
						break;

						case 5:
						PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');
						break;

						case 4:
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

						PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');
						break;

						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
						break;

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
						break;
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
						break;	
					}

					this.previous_geralt_light_attack_forward_index_1 = geralt_light_attack_forward_index_1;
				}
				else
				{
					geralt_light_attack_forward_index_1 = RandDifferent(this.previous_geralt_light_attack_forward_index_1 , 10);

					switch (geralt_light_attack_forward_index_1) 
					{	
						case 9:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_3_rp_50ms_mod_ACS');
						break;

						case 8:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_rp_50ms_mod_ACS');
						break;

						case 7:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_lp_50ms_mod_ACS');
						break;

						case 6:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_rp_50ms_mod_ACS');
						break;

						case 5:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_2_rp_50ms_mod_ACS');
						break;

						case 4:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_2_lp_50ms_mod_ACS');
						break;

						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_1_rp_50ms_mod_ACS');
						break;	

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_lp_50ms_mod_ACS');
						break;	

						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_lp_50ms_mod_ACS');
						break;	
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_rp_50ms_mod_ACS');
						break;		
					}

					this.previous_geralt_light_attack_forward_index_1 = geralt_light_attack_forward_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_forward == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_rp_50ms_mod_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_forward += 1;
				}
				else if (combo_counter_geralt_light_attack_forward == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_lp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_lp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_1_rp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_2_lp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_2_rp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_rp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 7)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_lp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 8)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_rp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 9)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_3_rp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward -= combo_counter_geralt_light_attack_forward;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_forward_index_3 = RandDifferent(this.previous_geralt_light_attack_forward_index_3 , 10);

				switch (geralt_light_attack_forward_index_3) 
				{	
					case 9:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_3_rp_50ms_mod_ACS');
					break;

					case 8:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_rp_50ms_mod_ACS');
					break;

					case 7:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_lp_50ms_mod_ACS');
					break;

					case 6:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_rp_50ms_mod_ACS');
					break;

					case 5:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_2_rp_50ms_mod_ACS');
					break;

					case 4:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_2_lp_50ms_mod_ACS');
					break;

					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_1_rp_50ms_mod_ACS');
					break;	

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_lp_50ms_mod_ACS');
					break;	

					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_lp_50ms_mod_ACS');
					break;	
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_rp_50ms_mod_ACS');
					break;
				}

				this.previous_geralt_light_attack_forward_index_3 = geralt_light_attack_forward_index_3;
			}
		}
	}

	function geraltRandomGeraltHeavyAttackForward_Wolf() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				if( targetDistance <= 3 * 3 ) 
				{
					ACS_Combo_Mode_Reset();
				
					if (combo_counter_geralt_heavy_attack == 0)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack += 1;
					}
					else if (combo_counter_geralt_heavy_attack == 1)
					{
						
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack += 1;
					}

					else if (combo_counter_geralt_heavy_attack == 2)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack += 1;
					}

					else if (combo_counter_geralt_heavy_attack == 3)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack += 1;
					}

					else if (combo_counter_geralt_heavy_attack == 4)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
		
						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack += 1;
					}

					else if (combo_counter_geralt_heavy_attack == 5)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack += 1;
					}

					else if (combo_counter_geralt_heavy_attack == 6)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack += 1;
					}

					else if (combo_counter_geralt_heavy_attack == 7)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack += 1;
					}

					else if (combo_counter_geralt_heavy_attack == 8)
					{
						
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack += 1;
					}

					else if (combo_counter_geralt_heavy_attack == 9)
					{
						
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
		
						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack += 1;
					}

					else if (combo_counter_geralt_heavy_attack == 10)
					{
						
						PlayerPlayAnimation( 'geralt_attack_strong_5_rp_ACS');
		
						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack += 1;
					}

					else if (combo_counter_geralt_heavy_attack == 11)
					{
						
						PlayerPlayAnimation( 'geralt_attack_strong_3_lp_ACS');
		
						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack += 1;
					}

					else if (combo_counter_geralt_heavy_attack == 12)
					{
						
						PlayerPlayAnimation( 'geralt_attack_strong_4_rp_ACS');
		
						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack += 1;
					}

					else if (combo_counter_geralt_heavy_attack == 13)
					{
						
						PlayerPlayAnimation( 'geralt_attack_strong_2_lp_ACS');
		
						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack -= combo_counter_geralt_heavy_attack;
					}
				}
				else
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_geralt_heavy_attack_forward == 0)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_lp_80ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_forward += 1;
					}
					else if (combo_counter_geralt_heavy_attack_forward == 1)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_right_1_rp_80ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_forward += 1;
					}
					else if (combo_counter_geralt_heavy_attack_forward == 2)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_back_1_rp_80ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_forward += 1;
					}
					else if (combo_counter_geralt_heavy_attack_forward == 3)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_rp_80ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_forward -= combo_counter_geralt_heavy_attack_forward;
					}
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3 * 3 ) 
				{
					geralt_heavy_attack_forward_index_1 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_1 , 14);

					switch (geralt_heavy_attack_forward_index_1) 
					{
						case 13:
						PlayerPlayAnimation( 'geralt_attack_strong_2_lp_ACS');
						break;

						case 12:
						PlayerPlayAnimation( 'geralt_attack_strong_4_rp_ACS');
						break;

						case 11:
						PlayerPlayAnimation( 'geralt_attack_strong_3_lp_ACS');
						break;

						case 10:
						PlayerPlayAnimation( 'geralt_attack_strong_5_rp_ACS');
						break;

						case 9:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
						break;	

						case 8:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
						break;	

						case 7:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');
						break;	

						case 6:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');
						break;	

						case 5:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');
						break;	

						case 4:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
						break;			
						
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');
						break;

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');
						break;
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');
						break;
					}

					this.previous_geralt_heavy_attack_forward_index_1 = geralt_heavy_attack_forward_index_1;
				}
				else
				{
					geralt_heavy_attack_forward_index_1 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_1 , 4);

					switch (geralt_heavy_attack_forward_index_1) 
					{	
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_back_1_rp_80ms_mod_ACS');
						break;	

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_rp_80ms_mod_ACS');
						break;	

						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_right_1_rp_80ms_mod_ACS');
						break;	

						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_lp_80ms_mod_ACS');
						break;	
					}

					this.previous_geralt_heavy_attack_forward_index_1 = geralt_heavy_attack_forward_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_forward == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_lp_80ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_right_1_rp_80ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_back_1_rp_80ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_rp_80ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward -= combo_counter_geralt_heavy_attack_forward;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_heavy_attack_forward_index_3 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_3 , 4);

				switch (geralt_heavy_attack_forward_index_3) 
				{	
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_back_1_rp_80ms_mod_ACS');
					break;	

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_rp_80ms_mod_ACS');
					break;	

					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_right_1_rp_80ms_mod_ACS');
					break;	

					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_lp_80ms_mod_ACS');
					break;			
				}

				this.previous_geralt_heavy_attack_forward_index_3 = geralt_heavy_attack_forward_index_3;
			}
		}
	}

	function geraltRandomGeraltSpecialAttack_Wolf() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_special_attack_cat == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_special_attack_cat += 1;
				}
				else if (combo_counter_geralt_special_attack_cat == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_cat += 1;
				}
				else if (combo_counter_geralt_special_attack_cat == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_cat -= combo_counter_geralt_special_attack_cat;
				}
			}
			else if (ACS_ComboMode() == 1)
			{		
				geralt_special_attack_index_3 = RandDifferent(this.previous_geralt_special_attack_index_3 , 3);

				switch (geralt_special_attack_index_3) 
				{	
					case 2:
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');
					break;

					case 1:
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');
					break;
				}

				this.previous_geralt_special_attack_index_3 = geralt_special_attack_index_3;	
			}	
		}	
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_special_attack_cat == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_special_attack_cat += 1;
				}
				else if (combo_counter_geralt_special_attack_cat == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_cat += 1;
				}
				else if (combo_counter_geralt_special_attack_cat == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_cat -= combo_counter_geralt_special_attack_cat;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_special_attack_index_3 = RandDifferent(this.previous_geralt_special_attack_index_3, 3);

				switch (geralt_special_attack_index_3) 
				{	
					case 2:
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');
					break;

					case 1:
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');
					break;
				}	
				
				this.previous_geralt_special_attack_index_3 = geralt_special_attack_index_3;
			}
		}
	}

	// Viper School
	function geraltRandomGeraltLightAttack_Viper()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_viper == 0)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_viper += 1;
				}
				else if (combo_counter_geralt_light_attack_viper == 1)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_viper += 1;
				}
				else if (combo_counter_geralt_light_attack_viper == 2)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_viper += 1;
				}
				else if (combo_counter_geralt_light_attack_viper == 3)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_viper += 1;
				}

				else if (combo_counter_geralt_light_attack_viper == 4)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_viper += 1;
				}

				else if (combo_counter_geralt_light_attack_viper == 5)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_viper -= combo_counter_geralt_light_attack_viper;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3 * 3 ) 
				{
					geralt_light_attack_index_1 = RandDifferent(this.previous_geralt_light_attack_index_1 , 11);

					switch (geralt_light_attack_index_1) 
					{
						case 10:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');
						break;

						case 9:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');
						break;

						case 8:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_lp_ACS');
						break;

						case 7:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_rp_ACS');
						break;

						case 6:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');
						break;

						case 5:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');
						break;

						case 4:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');
						break;

						case 3:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
						break;

						case 2:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
						break;
						
						case 1:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
						break;
						
						default:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
						break;
					}

					this.previous_geralt_light_attack_index_1 = geralt_light_attack_index_1;
				}
				else
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					geralt_light_attack_index_1 = RandDifferent(this.previous_geralt_light_attack_index_1 , 10);

					switch (geralt_light_attack_index_1) 
					{
						case 9:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_3_rp_50ms_mod_ACS');
						break;

						case 8:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_rp_50ms_mod_ACS');
						break;

						case 7:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_lp_50ms_mod_ACS');
						break;

						case 6:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_rp_50ms_mod_ACS');
						break;

						case 5:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_2_rp_50ms_mod_ACS');
						break;

						case 4:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_2_lp_50ms_mod_ACS');
						break;

						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_1_rp_50ms_mod_ACS');
						break;	

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_lp_50ms_mod_ACS');
						break;	

						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_lp_50ms_mod_ACS');
						break;	
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_rp_50ms_mod_ACS');
						break;
					}

					this.previous_geralt_light_attack_index_1 = geralt_light_attack_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_viper == 0)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_viper += 1;
				}
				else if (combo_counter_geralt_light_attack_viper == 1)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_viper += 1;
				}
				else if (combo_counter_geralt_light_attack_viper == 2)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_viper += 1;
				}
				else if (combo_counter_geralt_light_attack_viper == 3)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_viper += 1;
				}

				else if (combo_counter_geralt_light_attack_viper == 4)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_viper += 1;
				}

				else if (combo_counter_geralt_light_attack_viper == 5)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_viper -= combo_counter_geralt_light_attack_viper;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_index_3 = RandDifferent(this.previous_geralt_light_attack_index_3 , 11);

				switch (geralt_light_attack_index_3) 
				{	
					case 10:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
					
					PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');
					break;

					case 9:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');
					break;

					case 8:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_lp_ACS');
					break;

					case 7:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_rp_ACS');
					break;

					case 6:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');
					break;

					case 5:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');
					break;

					case 4:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');
					break;		
					
					case 3:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
					break;

					case 2:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
					break;
					
					case 1:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
					break;
					
					default:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
					break;
				}

				this.previous_geralt_light_attack_index_3 = geralt_light_attack_index_3;
			}
		}
	}

	function geraltRandomGeraltHeavyAttack_Viper()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_viper == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}
				else if (combo_counter_geralt_heavy_attack_viper == 1)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}

				else if (combo_counter_geralt_heavy_attack_viper == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}

				else if (combo_counter_geralt_heavy_attack_viper == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}

				else if (combo_counter_geralt_heavy_attack_viper == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}

				else if (combo_counter_geralt_heavy_attack_viper == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}

				else if (combo_counter_geralt_heavy_attack_viper == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}

				else if (combo_counter_geralt_heavy_attack_viper == 7)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}

				else if (combo_counter_geralt_heavy_attack_viper == 8)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}

				else if (combo_counter_geralt_heavy_attack_viper == 9)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper -= combo_counter_geralt_heavy_attack_viper;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3 * 3 )
				{
					geralt_heavy_attack_index_1 = RandDifferent(this.previous_geralt_heavy_attack_index_1 , 10);

					switch (geralt_heavy_attack_index_1) 
					{
						case 9:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
						break;	

						case 8:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
						break;	

						case 7:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');
						break;	

						case 6:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');
						break;	

						case 5:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');
						break;	

						case 4:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
						break;			
						
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');
						break;

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');
						break;
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');
						break;
					}

					this.previous_geralt_heavy_attack_index_1 = geralt_heavy_attack_index_1;
				}
				else
				{
					geralt_heavy_attack_index_1 = RandDifferent(this.previous_geralt_heavy_attack_index_1 , 2);

					switch (geralt_heavy_attack_index_1) 
					{
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
						break;
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
						break;
					}

					this.previous_geralt_heavy_attack_index_1 = geralt_heavy_attack_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_viper == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}
				else if (combo_counter_geralt_heavy_attack_viper == 1)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}

				else if (combo_counter_geralt_heavy_attack_viper == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}

				else if (combo_counter_geralt_heavy_attack_viper == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}

				else if (combo_counter_geralt_heavy_attack_viper == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}

				else if (combo_counter_geralt_heavy_attack_viper == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}

				else if (combo_counter_geralt_heavy_attack_viper == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}

				else if (combo_counter_geralt_heavy_attack_viper == 7)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}

				else if (combo_counter_geralt_heavy_attack_viper == 8)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}

				else if (combo_counter_geralt_heavy_attack_viper == 9)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper -= combo_counter_geralt_heavy_attack_viper;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_heavy_attack_index_3 = RandDifferent(this.previous_geralt_heavy_attack_index_3 , 12);

				switch (geralt_heavy_attack_index_3) 
				{
					case 11:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
					break;	
					
					case 10:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
					break;	

					case 9:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
					break;	

					case 8:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
					break;	

					case 7:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');
					break;	

					case 6:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');
					break;	

					case 5:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');
					break;	

					case 4:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
					break;			
					
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');
					break;
				}

				this.previous_geralt_heavy_attack_index_3 = geralt_heavy_attack_index_3;
			}
		}
	}

	function geraltRandomGeraltLightAttackForward_Viper()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				if( targetDistance <= 3 * 3 ) 
				{
					ACS_Combo_Mode_Reset();
				
					if (combo_counter_geralt_light_attack_viper == 0)
					{
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

						combo_counter_damage -= combo_counter_damage;

						combo_counter_geralt_light_attack_viper += 1;
					}
					else if (combo_counter_geralt_light_attack_viper == 1)
					{
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_viper += 1;
					}
					else if (combo_counter_geralt_light_attack_viper == 2)
					{
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_viper += 1;
					}
					else if (combo_counter_geralt_light_attack_viper == 3)
					{
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_viper += 1;
					}

					else if (combo_counter_geralt_light_attack_viper == 4)
					{
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_lp_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_viper += 1;
					}

					else if (combo_counter_geralt_light_attack_viper == 5)
					{
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_viper -= combo_counter_geralt_light_attack_viper;
					}
				}
				else
				{
					ACS_Combo_Mode_Reset();

					if (combo_counter_geralt_light_attack_forward_viper == 0)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_rp_50ms_mod_ACS');	

						combo_counter_damage -= combo_counter_damage;

						combo_counter_geralt_light_attack_forward_viper += 1;
					}
					else if (combo_counter_geralt_light_attack_forward_viper == 1)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_lp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward_viper += 1;
					}

					else if (combo_counter_geralt_light_attack_forward_viper == 2)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_lp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward_viper += 1;
					}

					else if (combo_counter_geralt_light_attack_forward_viper == 3)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_1_rp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward_viper += 1;
					}

					else if (combo_counter_geralt_light_attack_forward_viper == 4)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_2_lp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward_viper += 1;
					}

					else if (combo_counter_geralt_light_attack_forward_viper == 5)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_2_rp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward_viper += 1;
					}

					else if (combo_counter_geralt_light_attack_forward_viper == 6)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_rp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward_viper += 1;
					}

					else if (combo_counter_geralt_light_attack_forward_viper == 7)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_lp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward_viper += 1;
					}

					else if (combo_counter_geralt_light_attack_forward_viper == 8)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_rp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward_viper += 1;
					}

					else if (combo_counter_geralt_light_attack_forward_viper == 9)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_3_rp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward_viper -= combo_counter_geralt_light_attack_forward_viper;
					}
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3 * 3 ) 
				{
					geralt_light_attack_forward_index_1 = RandDifferent(this.previous_geralt_light_attack_forward_index_1 , 11);

					switch (geralt_light_attack_forward_index_1) 
					{	
						case 10:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
						
						PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');
						break;

						case 9:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');
						break;

						case 8:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_lp_ACS');
						break;

						case 7:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_rp_ACS');
						break;

						case 6:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');
						break;

						case 5:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');
						break;

						case 4:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');
						break;	
						
						case 3:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
						break;

						case 2:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
						break;
						
						case 1:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
						break;
						
						default:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
						break;	
					}

					this.previous_geralt_light_attack_forward_index_1 = geralt_light_attack_forward_index_1;
				}
				else
				{
					geralt_light_attack_forward_index_1 = RandDifferent(this.previous_geralt_light_attack_forward_index_1 , 10);

					switch (geralt_light_attack_forward_index_1) 
					{	
						case 9:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_3_rp_50ms_mod_ACS');
						break;

						case 8:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_rp_50ms_mod_ACS');
						break;

						case 7:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_lp_50ms_mod_ACS');
						break;

						case 6:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_rp_50ms_mod_ACS');
						break;

						case 5:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_2_rp_50ms_mod_ACS');
						break;

						case 4:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_2_lp_50ms_mod_ACS');
						break;

						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_1_rp_50ms_mod_ACS');
						break;	

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_lp_50ms_mod_ACS');
						break;	

						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_lp_50ms_mod_ACS');
						break;	
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_rp_50ms_mod_ACS');
						break;			
					}

					this.previous_geralt_light_attack_forward_index_1 = geralt_light_attack_forward_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_forward_viper == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_rp_50ms_mod_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_forward_viper += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_viper == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_lp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_viper += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_viper == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_lp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_viper += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_viper == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_1_rp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_viper += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_viper == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_2_lp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_viper += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_viper == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_2_rp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_viper += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_viper == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_rp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_viper += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_viper == 7)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_lp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_viper += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_viper == 8)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_rp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_viper += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_viper == 9)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_3_rp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_viper -= combo_counter_geralt_light_attack_forward_viper;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_forward_index_3 = RandDifferent(this.previous_geralt_light_attack_forward_index_3 , 10);

				switch (geralt_light_attack_forward_index_3) 
				{	
					case 9:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_3_rp_50ms_mod_ACS');
					break;

					case 8:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_rp_50ms_mod_ACS');
					break;

					case 7:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_lp_50ms_mod_ACS');
					break;

					case 6:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_rp_50ms_mod_ACS');
					break;

					case 5:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_2_rp_50ms_mod_ACS');
					break;

					case 4:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_2_lp_50ms_mod_ACS');
					break;

					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_1_rp_50ms_mod_ACS');
					break;	

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_lp_50ms_mod_ACS');
					break;	

					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_lp_50ms_mod_ACS');
					break;	
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_rp_50ms_mod_ACS');
					break;		
				}

				this.previous_geralt_light_attack_forward_index_3 = geralt_light_attack_forward_index_3;
			}
		}
	}

	function geraltRandomGeraltHeavyAttackForward_Viper()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				if( targetDistance <= 3 * 3 ) 
				{
					ACS_Combo_Mode_Reset();
				
					if (combo_counter_geralt_heavy_attack_viper == 0)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_viper += 1;
					}
					else if (combo_counter_geralt_heavy_attack_viper == 1)
					{
						
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_viper += 1;
					}

					else if (combo_counter_geralt_heavy_attack_viper == 2)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_viper += 1;
					}

					else if (combo_counter_geralt_heavy_attack_viper == 3)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_viper += 1;
					}

					else if (combo_counter_geralt_heavy_attack_viper == 4)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
		
						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_viper += 1;
					}

					else if (combo_counter_geralt_heavy_attack_viper == 5)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_viper += 1;
					}

					else if (combo_counter_geralt_heavy_attack_viper == 6)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_viper += 1;
					}

					else if (combo_counter_geralt_heavy_attack_viper == 7)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_viper += 1;
					}

					else if (combo_counter_geralt_heavy_attack_viper == 8)
					{
						
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_viper += 1;
					}

					else if (combo_counter_geralt_heavy_attack_viper == 9)
					{
						
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
		
						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_viper -= combo_counter_geralt_heavy_attack_viper;
					}
				}
				else
				{
					ACS_Combo_Mode_Reset();

					if (combo_counter_geralt_heavy_attack_forward_viper == 0)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_lp_80ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_forward_viper += 1;
					}
					else if (combo_counter_geralt_heavy_attack_forward_viper == 1)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_right_1_rp_80ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_forward_viper += 1;
					}
					else if (combo_counter_geralt_heavy_attack_forward_viper == 2)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_back_1_rp_80ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_forward_viper += 1;
					}
					else if (combo_counter_geralt_heavy_attack_forward_viper == 3)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_rp_80ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_forward_viper -= combo_counter_geralt_heavy_attack_forward_viper;
					}
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3 * 3 ) 
				{
					geralt_heavy_attack_forward_index_1 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_1 , 10);

					switch (geralt_heavy_attack_forward_index_1) 
					{	
						case 9:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
						break;	

						case 8:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
						break;	

						case 7:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');
						break;	

						case 6:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');
						break;	

						case 5:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');
						break;	

						case 4:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
						break;			
						
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');
						break;

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');
						break;
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');
						break;
					}

					this.previous_geralt_heavy_attack_forward_index_1 = geralt_heavy_attack_forward_index_1;
				}
				else
				{
					geralt_heavy_attack_forward_index_1 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_1 , 4);

					switch (geralt_heavy_attack_forward_index_1) 
					{	
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_back_1_rp_80ms_mod_ACS');
						break;	

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_rp_80ms_mod_ACS');
						break;	

						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_right_1_rp_80ms_mod_ACS');
						break;	

						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_lp_80ms_mod_ACS');
						break;
					}

					this.previous_geralt_heavy_attack_forward_index_1 = geralt_heavy_attack_forward_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_forward_viper == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_lp_80ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_viper += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_viper == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_right_1_rp_80ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_viper += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_viper == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_back_1_rp_80ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_viper += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_viper == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_rp_80ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_viper -= combo_counter_geralt_heavy_attack_forward_viper;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_heavy_attack_forward_index_3 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_3 , 4);

				switch (geralt_heavy_attack_forward_index_3) 
				{	
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_back_1_rp_80ms_mod_ACS');
					break;	

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_rp_80ms_mod_ACS');
					break;	

					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_right_1_rp_80ms_mod_ACS');
					break;	

					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_lp_80ms_mod_ACS');
					break;	
				}

				this.previous_geralt_heavy_attack_forward_index_3 = geralt_heavy_attack_forward_index_3;
			}
		}
	}

	timer function RemoveViperSpecialAttackTag(dt : float, id : int)
	{
		thePlayer.RemoveTag('ACS_Viper_Special_Attack');
	}

	function geraltRandomGeraltSpecialAttack_Viper()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');

			ACS_Manticore_Special_Attack_Effects();
			thePlayer.AddTag('ACS_Viper_Special_Attack');
			RemoveTimer('RemoveViperSpecialAttackTag');	
			AddTimer('RemoveViperSpecialAttackTag', 1.10625, false);	
		}	
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');

			ACS_Manticore_Special_Attack_Effects();
			thePlayer.AddTag('ACS_Viper_Special_Attack');
			RemoveTimer('RemoveViperSpecialAttackTag');	
			AddTimer('RemoveViperSpecialAttackTag', 1.10625, false);	
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function geraltRandomGeraltLightAttackForward_Ciri() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				if( targetDistance <= 3 * 3 ) 
				{
					switch ( combo_counter_geralt_light_attack )
					{
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

						combo_counter_damage -= combo_counter_damage;

						combo_counter_geralt_light_attack += 1;
						break;

						case 0: 
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

						combo_counter_damage -= combo_counter_damage;

						combo_counter_geralt_light_attack += 1;
						break;

						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
						break;

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
						break;

						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
						break;
						
						case 4:
						PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
						break;
						
						case 5:
						PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
						break;

						case 6:
						PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
						break;
						
						case 7:
						PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
						break;
						
						case 8:
						PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
						break;

						case 9:
						PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
						break;

						case 10:
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

						PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
						break;

						case 11:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_right_1_lp_40ms_forward_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack -= combo_counter_geralt_light_attack;
						break;
					}
				}
				else
				{
					thePlayer.DestroyEffect('dodge_ciri');
					thePlayer.PlayEffectSingle('dodge_ciri');

					vACS_Ciri_Special_Attack = new cACS_Ciri_Special_Attack in this;
	
					vACS_Ciri_Special_Attack.ACS_Ciri_Spectre_Attack_Engage();

					dodge_timer_attack_ciri_actual();

					movementAdjustor.SlideTowards( ticket, actor, distJump, distJump );

					if (combo_counter_geralt_light_attack_forward == 0)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_rp_50ms_mod_ACS');	

						combo_counter_damage -= combo_counter_damage;

						combo_counter_geralt_light_attack_forward += 1;
					}
					else if (combo_counter_geralt_light_attack_forward == 1)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_lp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward += 1;
					}

					else if (combo_counter_geralt_light_attack_forward == 2)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_lp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward += 1;
					}

					else if (combo_counter_geralt_light_attack_forward == 3)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_1_rp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward += 1;
					}

					else if (combo_counter_geralt_light_attack_forward == 4)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_2_lp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward += 1;
					}

					else if (combo_counter_geralt_light_attack_forward == 5)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_2_rp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward += 1;
					}

					else if (combo_counter_geralt_light_attack_forward == 6)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_rp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward += 1;
					}

					else if (combo_counter_geralt_light_attack_forward == 7)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_lp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward += 1;
					}

					else if (combo_counter_geralt_light_attack_forward == 8)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_rp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward += 1;
					}

					else if (combo_counter_geralt_light_attack_forward == 9)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_3_rp_50ms_mod_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward -= combo_counter_geralt_light_attack_forward;
					}
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3 * 3 ) 
				{
					geralt_light_attack_forward_index_1 = RandDifferent(this.previous_geralt_light_attack_forward_index_1 , 12);

					switch (geralt_light_attack_forward_index_1) 
					{
						case 11:
						PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	
						break;

						case 10:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_right_1_lp_40ms_forward_ACS');
						break;

						case 9:
						PlayerPlayAnimation( 'geralt_attack_fast_7_lp_ACS');
						break;

						case 8:
						PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');
						break;

						case 7:
						PlayerPlayAnimation( 'geralt_attack_fast_5_rp_ACS');
						break;

						case 6:
						PlayerPlayAnimation( 'geralt_attack_fast_5_lp_ACS');
						break;

						case 5:
						PlayerPlayAnimation( 'geralt_attack_fast_6_rp_ACS');
						break;

						case 4:
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

						PlayerPlayAnimation( 'geralt_attack_fast_4_rp_ACS');
						break;

						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
						break;

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
						break;
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
						break;	
					}

					this.previous_geralt_light_attack_forward_index_1 = geralt_light_attack_forward_index_1;
				}
				else
				{
					movementAdjustor.SlideTowards( ticket, actor, distJump, distJump );

					thePlayer.DestroyEffect('dodge_ciri');
					thePlayer.PlayEffectSingle('dodge_ciri');

					vACS_Ciri_Special_Attack = new cACS_Ciri_Special_Attack in this;
	
					vACS_Ciri_Special_Attack.ACS_Ciri_Spectre_Attack_Engage();

					dodge_timer_attack_ciri_actual();

					geralt_light_attack_forward_index_1 = RandDifferent(this.previous_geralt_light_attack_forward_index_1 , 10);

					switch (geralt_light_attack_forward_index_1) 
					{	
						case 9:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_3_rp_50ms_mod_ACS');
						break;

						case 8:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_rp_50ms_mod_ACS');
						break;

						case 7:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_lp_50ms_mod_ACS');
						break;

						case 6:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_rp_50ms_mod_ACS');
						break;

						case 5:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_2_rp_50ms_mod_ACS');
						break;

						case 4:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_2_lp_50ms_mod_ACS');
						break;

						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_1_rp_50ms_mod_ACS');
						break;	

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_lp_50ms_mod_ACS');
						break;	

						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_lp_50ms_mod_ACS');
						break;	
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_rp_50ms_mod_ACS');
						break;	
					}

					this.previous_geralt_light_attack_forward_index_1 = geralt_light_attack_forward_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_forward == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_rp_50ms_mod_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_forward += 1;
				}
				else if (combo_counter_geralt_light_attack_forward == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_lp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_lp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_1_rp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_2_lp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_2_rp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_rp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 7)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_lp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 8)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_rp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 9)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_3_rp_50ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward -= combo_counter_geralt_light_attack_forward;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_forward_index_3 = RandDifferent(this.previous_geralt_light_attack_forward_index_3 , 10);

				switch (geralt_light_attack_forward_index_3) 
				{	
					case 9:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_3_rp_50ms_mod_ACS');
					break;

					case 8:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_rp_50ms_mod_ACS');
					break;

					case 7:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_2_lp_50ms_mod_ACS');
					break;

					case 6:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_rp_50ms_mod_ACS');
					break;

					case 5:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_2_rp_50ms_mod_ACS');
					break;

					case 4:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_2_lp_50ms_mod_ACS');
					break;

					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_left_1_rp_50ms_mod_ACS');
					break;	

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_right_1_lp_50ms_mod_ACS');
					break;	

					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_lp_50ms_mod_ACS');
					break;	
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_back_1_rp_50ms_mod_ACS');
					break;
				}

				this.previous_geralt_light_attack_forward_index_3 = geralt_light_attack_forward_index_3;
			}
		}
	}

	function geraltRandomGeraltHeavyAttackForward_Ciri() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				if( GetWitcherPlayer().GetStat( BCS_Stamina ) > GetWitcherPlayer().GetStatMax( BCS_Stamina ) * 0.125  ) 
				{
					RemoveTimer('SpecialDashCloseSlideDelay');

					if (actor.IsOnGround() && !((CNewNPC)actor).IsFlying())
					{
						AddTimer('SpecialDashCloseSlideDelay', 0.06125, false);
					}

					thePlayer.DestroyEffect('dodge_ciri');
					thePlayer.PlayEffectSingle('dodge_ciri');

					vACS_Ciri_Special_Attack = new cACS_Ciri_Special_Attack in this;
	
					vACS_Ciri_Special_Attack.ACS_Ciri_Spectre_Attack_Engage();

					dodge_timer_attack_ciri_actual();

					thePlayer.StopEffect('shadowdash_shockwave');

					thePlayer.PlayEffectSingle('shadowdash_shockwave');

					thePlayer.StopEffect('shadowdash_shockwave');

					PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');

					GetWitcherPlayer().DrainStamina( ESAT_FixedValue, GetWitcherPlayer().GetStatMax( BCS_Stamina ) * 0.125 , 1.5 );
				}
				else
				{
					if( targetDistance <= 3 * 3 ) 
					{
						if (combo_counter_geralt_heavy_attack == 0)
						{
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');	

							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack += 1;
						}
						else if (combo_counter_geralt_heavy_attack == 1)
						{
							
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');

							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack += 1;
						}

						else if (combo_counter_geralt_heavy_attack == 2)
						{
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');

							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack += 1;
						}

						else if (combo_counter_geralt_heavy_attack == 3)
						{
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');

							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack += 1;
						}

						else if (combo_counter_geralt_heavy_attack == 4)
						{
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
			
							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack += 1;
						}

						else if (combo_counter_geralt_heavy_attack == 5)
						{
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');

							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack += 1;
						}

						else if (combo_counter_geralt_heavy_attack == 6)
						{
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');

							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack += 1;
						}

						else if (combo_counter_geralt_heavy_attack == 7)
						{
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');

							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack += 1;
						}

						else if (combo_counter_geralt_heavy_attack == 8)
						{
							
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');

							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack += 1;
						}

						else if (combo_counter_geralt_heavy_attack == 9)
						{
							
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
			
							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack += 1;
						}

						else if (combo_counter_geralt_heavy_attack == 10)
						{
							
							PlayerPlayAnimation( 'geralt_attack_strong_5_rp_ACS');
			
							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack += 1;
						}

						else if (combo_counter_geralt_heavy_attack == 11)
						{
							
							PlayerPlayAnimation( 'geralt_attack_strong_3_lp_ACS');
			
							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack += 1;
						}

						else if (combo_counter_geralt_heavy_attack == 12)
						{
							
							PlayerPlayAnimation( 'geralt_attack_strong_4_rp_ACS');
			
							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack += 1;
						}

						else if (combo_counter_geralt_heavy_attack == 13)
						{
							
							PlayerPlayAnimation( 'geralt_attack_strong_2_lp_ACS');
			
							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack -= combo_counter_geralt_heavy_attack;
						}
					}
					else
					{
						movementAdjustor.SlideTowards( ticket, actor, distJump, distJump );

						thePlayer.DestroyEffect('dodge_ciri');
						thePlayer.PlayEffectSingle('dodge_ciri');

						vACS_Ciri_Special_Attack = new cACS_Ciri_Special_Attack in this;
		
						vACS_Ciri_Special_Attack.ACS_Ciri_Spectre_Attack_Engage();

						dodge_timer_attack_ciri_actual();

						if (combo_counter_geralt_heavy_attack_forward == 0)
						{
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_lp_80ms_mod_ACS');	

							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack_forward += 1;
						}
						else if (combo_counter_geralt_heavy_attack_forward == 1)
						{
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_right_1_rp_80ms_mod_ACS');	

							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack_forward += 1;
						}
						else if (combo_counter_geralt_heavy_attack_forward == 2)
						{
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_back_1_rp_80ms_mod_ACS');	

							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack_forward += 1;
						}
						else if (combo_counter_geralt_heavy_attack_forward == 3)
						{
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_rp_80ms_mod_ACS');	

							combo_counter_damage += 1;

							combo_counter_geralt_heavy_attack_forward -= combo_counter_geralt_heavy_attack_forward;
						}
					}
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( GetWitcherPlayer().GetStat( BCS_Stamina ) > GetWitcherPlayer().GetStatMax( BCS_Stamina ) * 0.125  ) 
				{
					RemoveTimer('SpecialDashCloseSlideDelay');

					if (actor.IsOnGround() && !((CNewNPC)actor).IsFlying())
					{
						AddTimer('SpecialDashCloseSlideDelay', 0.06125, false);
					}

					thePlayer.DestroyEffect('dodge_ciri');
					thePlayer.PlayEffectSingle('dodge_ciri');

					vACS_Ciri_Special_Attack = new cACS_Ciri_Special_Attack in this;
	
					vACS_Ciri_Special_Attack.ACS_Ciri_Spectre_Attack_Engage();

					dodge_timer_attack_ciri_actual();

					thePlayer.StopEffect('shadowdash_shockwave');

					thePlayer.PlayEffectSingle('shadowdash_shockwave');

					thePlayer.StopEffect('shadowdash_shockwave');

					PlayerPlayAnimation( 'geralt_attack_fast_7_rp_ACS');

					GetWitcherPlayer().DrainStamina( ESAT_FixedValue, GetWitcherPlayer().GetStatMax( BCS_Stamina ) * 0.125 , 1.5 );
				}
				else
				{
					if( targetDistance <= 3 * 3 ) 
					{
						geralt_heavy_attack_forward_index_1 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_1 , 10);

						switch (geralt_heavy_attack_forward_index_1) 
						{
							case 13:
							PlayerPlayAnimation( 'geralt_attack_strong_2_lp_ACS');
							break;

							case 12:
							PlayerPlayAnimation( 'geralt_attack_strong_4_rp_ACS');
							break;

							case 11:
							PlayerPlayAnimation( 'geralt_attack_strong_3_lp_ACS');
							break;

							case 10:
							PlayerPlayAnimation( 'geralt_attack_strong_5_rp_ACS');
							break;

							case 9:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
							break;	

							case 8:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
							break;	

							case 7:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');
							break;	

							case 6:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');
							break;	

							case 5:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');
							break;	

							case 4:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
							break;			
							
							case 3:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');
							break;

							case 2:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');
							break;
							
							case 1:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');
							break;
							
							default:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');
							break;
						}

						this.previous_geralt_heavy_attack_forward_index_1 = geralt_heavy_attack_forward_index_1;
					}
					else
					{
						movementAdjustor.SlideTowards( ticket, actor, distJump, distJump );

						thePlayer.DestroyEffect('dodge_ciri');
						thePlayer.PlayEffectSingle('dodge_ciri');

						vACS_Ciri_Special_Attack = new cACS_Ciri_Special_Attack in this;
		
						vACS_Ciri_Special_Attack.ACS_Ciri_Spectre_Attack_Engage();

						dodge_timer_attack_ciri_actual();

						geralt_heavy_attack_forward_index_1 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_1 , 4);

						switch (geralt_heavy_attack_forward_index_1) 
						{	
							case 3:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_back_1_rp_80ms_mod_ACS');
							break;	

							case 2:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_rp_80ms_mod_ACS');
							break;	

							case 1:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_right_1_rp_80ms_mod_ACS');
							break;	

							default:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_lp_80ms_mod_ACS');
							break;			
						}

						this.previous_geralt_heavy_attack_forward_index_1 = geralt_heavy_attack_forward_index_1;
					}
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_forward == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_lp_80ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_right_1_rp_80ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_back_1_rp_80ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_rp_80ms_mod_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward -= combo_counter_geralt_heavy_attack_forward;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_heavy_attack_forward_index_3 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_3 , 4);

				switch (geralt_heavy_attack_forward_index_3) 
				{	
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_back_1_rp_80ms_mod_ACS');
					break;	

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_rp_80ms_mod_ACS');
					break;	

					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_right_1_rp_80ms_mod_ACS');
					break;	

					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_left_1_lp_80ms_mod_ACS');
					break;			
				}

				this.previous_geralt_heavy_attack_forward_index_3 = geralt_heavy_attack_forward_index_3;
			}
		}
	}

	function geraltRandomGeraltSpecialAttack_Ciri() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			vACS_Ciri_Special_Attack = new cACS_Ciri_Special_Attack in this;
	
			vACS_Ciri_Special_Attack.ACS_Ciri_Special_Attack_Engage();
		}	
		else
		{
			thePlayer.DestroyEffect('dodge_ciri');
			thePlayer.PlayEffectSingle('dodge_ciri');

			if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_special_attack_cat == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_special_attack_cat += 1;
				}
				else if (combo_counter_geralt_special_attack_cat == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_cat += 1;
				}
				else if (combo_counter_geralt_special_attack_cat == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_cat -= combo_counter_geralt_special_attack_cat;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_special_attack_index_3 = RandDifferent(this.previous_geralt_special_attack_index_3, 3);

				switch (geralt_special_attack_index_3) 
				{	
					case 2:
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');
					break;

					case 1:
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');
					break;
				}	
				
				this.previous_geralt_special_attack_index_3 = geralt_special_attack_index_3;
			}
		}
	}

	function CiriSpectreDodgeFront()
	{
		vACS_Ciri_Special_Attack = new cACS_Ciri_Special_Attack in this;
	
		vACS_Ciri_Special_Attack.ACS_Ciri_Spectre_Dodge_Front_Engage();
	}

	function CiriSpectreDodgeBack()
	{
		vACS_Ciri_Special_Attack = new cACS_Ciri_Special_Attack in this;
	
		vACS_Ciri_Special_Attack.ACS_Ciri_Spectre_Dodge_Back_Engage();
	}

	function CiriSpectreDodgeLeft()
	{
		vACS_Ciri_Special_Attack = new cACS_Ciri_Special_Attack in this;
	
		vACS_Ciri_Special_Attack.ACS_Ciri_Spectre_Dodge_Left_Engage();
	}

	function CiriSpectreDodgeRight()
	{
		vACS_Ciri_Special_Attack = new cACS_Ciri_Special_Attack in this;
	
		vACS_Ciri_Special_Attack.ACS_Ciri_Spectre_Dodge_Right_Engage();
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Olgierd attack stuff
	
	function geraltRandomOlgierdAttack() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_olgierd_attack == 0)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_1_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_olgierd_attack += 1;
				}
				else if (combo_counter_olgierd_attack == 1)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_2_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}
				else if (combo_counter_olgierd_attack == 2)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_5_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}
				else if (combo_counter_olgierd_attack == 3)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 4)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 5)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 6)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');
	
					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 7)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_single_1_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 8)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_single_2_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 9)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_tripple_1_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 10)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();

					PlayerPlayAnimation( 'attack_strong_single_1_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 11)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();

					PlayerPlayAnimation( 'attack_strong_single_2_ACS');
	
					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 12)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();

					PlayerPlayAnimation( 'attack_strong_down_left_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 13)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();

					PlayerPlayAnimation( 'attack_strong_up_right_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 14)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();

					PlayerPlayAnimation( 'attack_strong_down_left_with_step_back_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 15)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();

					PlayerPlayAnimation( 'attack_strong_up_right_with_step_back_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack -= combo_counter_olgierd_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5*1.5 ) 
				{
					quen_sword_glow();

					olgierd_attack_index_1 = RandDifferent(this.previous_olgierd_attack_index_1 , 9);

					switch (olgierd_attack_index_1) 
					{
						case 8:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_fast_tripple_1_ACS');
						break;	

						case 7:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_fast_single_2_ACS');
						break;	
						
						case 6:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_fast_single_1_ACS');
						break;	

						case 5:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_strong_up_right_ACS');
						break;			
						
						case 4:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_strong_down_left_ACS');
						break;	
						
						case 3:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_strong_single_1_ACS');
						break;	
						
						case 2:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_strong_up_right_with_step_back_ACS');
						break;	
					
						case 1:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_strong_down_left_with_step_back_ACS');
						break;	
						
						default:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_strong_single_2_ACS');
						break;	
					}

					this.previous_olgierd_attack_index_1 = olgierd_attack_index_1;
				}
				else
				{
					olgierd_attack_index_1 = RandDifferent(this.previous_olgierd_attack_index_1 , 7);

					switch (olgierd_attack_index_1) 
					{	
						case 6:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');
						break;	

						case 5:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');
						break;	

						case 4:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');
						break;			
						
						case 3:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');
						break;

						case 2:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_pirouette_5_ACS');
						break;
						
						case 1:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_pirouette_2_ACS');
						break;
						
						default:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_pirouette_1_ACS');
						break;
					}

					this.previous_olgierd_attack_index_1 = olgierd_attack_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_olgierd_attack == 0)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_1_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_olgierd_attack += 1;
				}
				else if (combo_counter_olgierd_attack == 1)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_2_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}
				else if (combo_counter_olgierd_attack == 2)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_5_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}
				else if (combo_counter_olgierd_attack == 3)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 4)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 5)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 6)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');
	
					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 7)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_single_1_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 8)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_single_2_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 9)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_tripple_1_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 10)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();

					PlayerPlayAnimation( 'attack_strong_single_1_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 11)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();

					PlayerPlayAnimation( 'attack_strong_single_2_ACS');
	
					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 12)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();

					PlayerPlayAnimation( 'attack_strong_down_left_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 13)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();

					PlayerPlayAnimation( 'attack_strong_up_right_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 14)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();

					PlayerPlayAnimation( 'attack_strong_down_left_with_step_back_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 15)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();

					PlayerPlayAnimation( 'attack_strong_up_right_with_step_back_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack -= combo_counter_olgierd_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				olgierd_attack_index_3 = RandDifferent(this.previous_olgierd_attack_index_3 , 14);

				switch (olgierd_attack_index_3) 
				{	
					case 13:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_tripple_1_ACS');
					break;	

					case 12:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_5_ACS');
					break;	
						
					case 11:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_4_ACS');
					break;
							
					case 10:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_3_ACS');
					break;	

					case 9:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_2_ACS');
					break;	
					
					case 8:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_up_right_ACS');
					break;
					
					case 7:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_down_left_ACS');
					break;
					
					case 6:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_single_2_ACS');
					break;	
					
					case 5:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_single_1_ACS');
					break;	
					
					case 4:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_up_right_with_step_back_ACS');
					break;	
				
					case 3:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_down_left_with_step_back_ACS');
					break;	

					case 2:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_single_2_ACS');
					break;	

					case 1:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_single_1_ACS');
					break;
					
					default:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_1_ACS');
					break;	
				}

				this.previous_olgierd_attack_index_3 = olgierd_attack_index_3;
			}
		}
	}
	
	function geraltRandomOlgierdPirouette()
	{	
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_olgierd_pirouette == 0)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_left_NEW_test_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_olgierd_pirouette += 1;
				}
				else if (combo_counter_olgierd_pirouette == 1)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_right_NEW_test_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}
				else if (combo_counter_olgierd_pirouette == 2)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_left_NEW_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}
				else if (combo_counter_olgierd_pirouette == 3)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_right_NEW_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 4)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_3_right_NEW_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 5)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 6)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 7)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 8)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 9)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_l_003_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 10)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_r_002_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 11)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_knee_left_003_ACS');
	
					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 12)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_knee_right_002_ACS');
					
					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 13)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_knee_slash_180_1_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette -= combo_counter_olgierd_pirouette;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5*1.5 ) 
				{
					olgierd_pirouette_index_2 = RandDifferent(this.previous_olgierd_pirouette_index_2 , 9);

					switch (olgierd_pirouette_index_2) 
					{	
						/*
						case 1:
						PlayerPlayAnimation( 'attack_pirouette_down_r_001_ACS');
						break;
						
						default:
						PlayerPlayAnimation( 'attack_pirouette_down_l_001_ACS');
						break;
						*/

						case 8:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_knee_left_003_ACS');
						break;	

						case 7:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_knee_right_002_ACS');
						break;	
						
						case 6:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_knee_slash_180_1_ACS');
						break;			
						
						case 5:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_pirouette_r_002_ACS');
						break;
						
						case 4:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_pirouette_l_003_ACS');
						break;

						case 3:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');
						break;	
							
						case 2:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');
						break;
							
						case 1:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');
						break;	
							
						default:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');
						break;
					}
					
					this.previous_olgierd_pirouette_index_2 = olgierd_pirouette_index_2;
				}
				else
				{
					olgierd_attack_index_1 = RandDifferent(this.previous_olgierd_attack_index_1 , 5);

					switch (olgierd_attack_index_1) 
					{						
						case 4:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_left_NEW_test_ACS');
						break;
						
						case 3:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_right_NEW_test_ACS');
						break;
						
						case 2:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_left_NEW_ACS');
						break;
						
						case 1:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_right_NEW_ACS');
						break;
						
						default:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_3_right_NEW_ACS');
						break;
					}

					this.previous_olgierd_attack_index_1 = olgierd_attack_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_olgierd_pirouette == 0)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_left_NEW_test_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_olgierd_pirouette += 1;
				}
				else if (combo_counter_olgierd_pirouette == 1)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_right_NEW_test_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}
				else if (combo_counter_olgierd_pirouette == 2)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_left_NEW_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}
				else if (combo_counter_olgierd_pirouette == 3)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_right_NEW_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 4)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_3_right_NEW_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 5)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 6)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 7)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 8)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 9)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_l_003_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 10)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_r_002_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 11)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_knee_left_003_ACS');
	
					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 12)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_knee_right_002_ACS');
					
					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 13)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
					
					PlayerPlayAnimation( 'attack_knee_slash_180_1_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette -= combo_counter_olgierd_pirouette;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				olgierd_attack_index_3 = RandDifferent(this.previous_olgierd_attack_index_3 , 10);

				switch (olgierd_attack_index_3) 
				{
					case 9:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_knee_left_003_ACS');
					break;	

					case 8:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_knee_right_002_ACS');
					break;	
						
					case 7:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_knee_slash_180_1_ACS');
					break;			
						
					case 6:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_r_002_ACS');
					break;
						
					case 5:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_l_003_ACS');
					break;

					case 4:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_left_NEW_test_ACS');
					break;
						
					case 3:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_right_NEW_test_ACS');
					break;
						
					case 2:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_left_NEW_ACS');
					break;
						
					case 1:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_right_NEW_ACS');
					break;
						
					default:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_3_right_NEW_ACS');
					break;
				}

				this.previous_olgierd_attack_index_3 = olgierd_attack_index_3;
			}
		}
	}	
	
	function geraltRandomShadowAttack() 
	{
		if (!thePlayer.IsActionAllowed(EIAB_Signs))
		{
			return;
		}

		//theGame.SetTimeScale( 0.75, theGame.GetTimescaleSource( ETS_InstantKill ), theGame.GetTimescalePriority( ETS_InstantKill ), false, true );

		//AddTimer( 'RemoveInstantKillSloMo', 0.3 );

		MovementAdjust();

		dodge_timer_attack_actual();

		thePlayer.SetIsCurrentlyDodging(true);

		quen_sword_glow();	
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{			
			if( targetDistance <= 3.25*3.25 ) 
			{
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
										
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
				
				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
					}	
				}

				olgierd_shadow_attack_index_1 = RandDifferent(this.previous_olgierd_shadow_attack_index_1 , 3);

				switch (olgierd_shadow_attack_index_1) 
				{	
					case 2:
					PlayerPlayAnimation( 'attack_shadowdash_strong_3_ACS');
					break;

					case 1:
					PlayerPlayAnimation( 'attack_shadowdash_strong_2_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'shadow_attack_jump_forward_middle_right_ACS');
					break;
				}

				this.previous_olgierd_shadow_attack_index_1 = olgierd_shadow_attack_index_1;
			}
			else if( targetDistance > 3.25*3.25 && targetDistance <= 11*11) 
			{
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
										
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }
				
				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
					}
				}

				olgierd_shadow_attack_part_2_index_2 = RandDifferent(this.previous_olgierd_shadow_attack_part_2_index_2 , 2);

				switch (olgierd_shadow_attack_part_2_index_2) 
				{	
					case 1:
					thePlayer.PlayEffectSingle('special_attack_fx');
					PlayerPlayAnimation( 'attack_shadowdash_strong_1_ACS');
					thePlayer.StopEffect('special_attack_fx');
					break;
					
					default:
					PlayerPlayAnimation( 'attack_shadowstep_001_ACS');
					break;
				}

				this.previous_olgierd_shadow_attack_part_2_index_2 = olgierd_shadow_attack_part_2_index_2;

				AddTimer('ACS_bruxa_tackle', 0.5  , false);
			}
			else
			{
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
										
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.25  ); }
				
				AddTimer('ACS_ResetAnimation', 0.25 , false);

				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
					}
				}
			
				if (thePlayer.GetStat(BCS_Vitality) <= thePlayer.GetStatMax(BCS_Vitality) * 0.75)
				{
					thePlayer.PlayEffectSingle('special_attack_fx');
					PlayerPlayAnimation( 'ethereal_shadow_attack_001_ACS');
					thePlayer.StopEffect('special_attack_fx');
					AddTimer('ACS_bruxa_tackle', 1.5  , false);
				}
				else
				{
					PlayerPlayAnimation( 'attack_shadowstep_001_ACS');
					AddTimer('ACS_bruxa_tackle', 1.5  , false);
				}

				if (!thePlayer.HasTag('ACS_Shadowstep_Long_Buff'))
				{
					thePlayer.AddTag('ACS_Shadowstep_Long_Buff');
				} 
			}
		}
		else
		{
			if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			olgierd_shadow_attack_index_2 = RandDifferent(this.previous_olgierd_shadow_attack_index_2 , 4);

			switch (olgierd_shadow_attack_index_2) 
			{	
				case 3:
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}							
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

				PlayerPlayAnimation( 'attack_shadowdash_strong_3_ACS');
				break;

				case 2:
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}							
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

				PlayerPlayAnimation( 'attack_shadowdash_strong_2_ACS');
				break;
				
				case 1:
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}							
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

				PlayerPlayAnimation( 'shadow_attack_jump_forward_middle_right_ACS');
				break;

				default:
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}						
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.25  ); }
				AddTimer('ACS_ResetAnimation', 0.25 , false);

				PlayerPlayAnimation( 'attack_shadowstep_001_ACS');

				AddTimer('ACS_bruxa_tackle', 1.5 , false);
				break;
			}

			this.previous_olgierd_shadow_attack_index_2 = olgierd_shadow_attack_index_2;
		}
	}

	var umbralslashenv : CEnvironmentDefinition;
	var umbralSlashEnvID : int;

	function Umbral_Slash_End() 
	{
		if (!thePlayer.IsActionAllowed(EIAB_Signs))
		{
			return;
		}

		//thePlayer.PlayBattleCry( 'BattleCryAttack', 1, true, false );
		thePlayer.PlayEffectSingle('special_attack_break'); thePlayer.StopEffect('special_attack_break');

		quen_sword_glow();

		actors.Clear();

		actors = thePlayer.GetNPCsAndPlayersInRange( 50, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];
				
				actortarget.AddEffectDefault( EET_Confusion, thePlayer, 'ACS_Umbral_Slash_End_Start' );

				actortarget.AddEffectDefault( EET_Stagger, thePlayer, 'ACS_Umbral_Slash_End_Start' );
			}
		}

		thePlayer.StopEffect('olgierd_energy_blast');
		thePlayer.PlayEffectSingle('olgierd_energy_blast');

		umbralslashenv = (CEnvironmentDefinition)LoadResource(

		"dlc\dlc_acs\data\env\q605_hell_red_blockout.env"

		, true);

		umbralSlashEnvID = ActivateEnvironmentDefinition( umbralslashenv, 1000, 0.9f, 0.25f );
		theGame.SetEnvironmentID(umbralSlashEnvID);

		//theGame.SetTimeScale( 0.25, theGame.GetTimescaleSource( ETS_InstantKill ), theGame.GetTimescalePriority( ETS_InstantKill ), false, true );

		//thePlayer.AddTimer( 'RemoveInstantKillSloMo', 1.25 );

		MovementAdjust();

		dodge_timer_attack_actual();

		thePlayer.SetIsCurrentlyDodging(true);

		quen_sword_glow();	
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{			
			if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
									
			thePlayer.SetAnimationSpeedMultiplier( 1.25 );
			
			AddTimer('ACS_ResetAnimation', 0.25 , false);
			
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}
			}
		
			PlayerPlayAnimation( 'attack_shadowstep_001_ACS');

			//AddTimer('ACS_bruxa_tackle', 1.5  , false);

			//thePlayer.AddTag('ACS_Shadowstep_Long_Buff');

			AddTimer('ACS_Umbral_Slash_End', 1 , false);
		}
		else
		{
			if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}						
			thePlayer.SetAnimationSpeedMultiplier( 1.25  );
			AddTimer('ACS_ResetAnimation', 0.25 , false);

			PlayerPlayAnimation( 'attack_shadowstep_001_ACS');

			AddTimer('ACS_Umbral_Slash_End', 1 );
		}
	}

	function geraltRandomOlgierdComboAttack() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_olgierd_combo_attack == 0)
				{
					PlayerPlayAnimation( 'attack_fast_combo_004_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_olgierd_combo_attack += 1;
				}
				else if (combo_counter_olgierd_combo_attack == 1)
				{
					PlayerPlayAnimation( 'attack_fast_combo_005_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}
				else if (combo_counter_olgierd_combo_attack == 2)
				{
					PlayerPlayAnimation( 'attack_fast_combo_006_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}
				else if (combo_counter_olgierd_combo_attack == 3)
				{
					PlayerPlayAnimation( 'attack_fast_combo_002_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 4)
				{
					PlayerPlayAnimation( 'attack_fast_combo_003_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 5)
				{
					PlayerPlayAnimation( 'attack_fast_combo_007_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 6)
				{
					PlayerPlayAnimation( 'attack_fast_combo_008_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 7)
				{
					PlayerPlayAnimation( 'attack_fast_combo_009_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 8)
				{
					PlayerPlayAnimation( 'attack_fast_combo_010_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 9)
				{
					PlayerPlayAnimation( 'attack_fast_combo_011_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 10)
				{
					PlayerPlayAnimation( 'attack_fast_combo_012_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 11)
				{
					PlayerPlayAnimation( 'attack_fast_combo_013_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 12)
				{
					PlayerPlayAnimation( 'attack_fast_combo_014_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 13)
				{
					PlayerPlayAnimation( 'attack_fast_combo_015_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 14)
				{
					PlayerPlayAnimation( 'attack_fast_combo_1_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 15)
				{
					PlayerPlayAnimation( 'attack_fast_combo_2_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 16)
				{
					PlayerPlayAnimation( 'attack_fast_combo_3_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 17)
				{
					PlayerPlayAnimation( 'attack_fast_combo_to_strong_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack -= combo_counter_olgierd_combo_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 2.25*2.25 ) 
				{
					olgierd_combo_attack_index_1 = RandDifferent(this.previous_olgierd_combo_attack_index_1 , 4);

					switch (olgierd_combo_attack_index_1) 
					{	
						case 3:
						PlayerPlayAnimation( 'attack_fast_combo_to_strong_ACS');
						break;
						
						case 2:
						PlayerPlayAnimation( 'attack_fast_combo_3_ACS');
						break;
						
						case 1:
						PlayerPlayAnimation( 'attack_fast_combo_2_ACS');
						break;

						default:
						PlayerPlayAnimation( 'attack_fast_combo_1_ACS');
						break;
					}

					this.previous_olgierd_combo_attack_index_1 = olgierd_combo_attack_index_1;
				}
				else if( targetDistance > 2.25*2.25 
				&& targetDistance <= 3.5*3.5 ) 
				{
					olgierd_combo_attack_index_1 = RandDifferent(this.previous_olgierd_combo_attack_index_1 , 11);

					switch (olgierd_combo_attack_index_1) 
					{									
						case 10:
						PlayerPlayAnimation( 'attack_fast_combo_012_ACS');
						break;
						
						case 9:
						PlayerPlayAnimation( 'attack_fast_combo_011_ACS');
						break;
						
						case 8:
						PlayerPlayAnimation( 'attack_fast_combo_010_ACS');
						break;
						
						case 7:
						PlayerPlayAnimation( 'attack_fast_combo_009_ACS');
						break;
						
						case 6:
						PlayerPlayAnimation( 'attack_fast_combo_008_ACS');
						break;
						
						case 5:
						PlayerPlayAnimation( 'attack_fast_combo_007_ACS');
						break;
						
						case 4:
						PlayerPlayAnimation( 'attack_fast_combo_013_ACS');
						break;
						
						case 3:
						PlayerPlayAnimation( 'attack_fast_combo_014_ACS');
						break;
						
						case 2:
						PlayerPlayAnimation( 'attack_fast_combo_015_ACS');
						break;
						
						case 1:
						PlayerPlayAnimation( 'attack_fast_combo_003_ACS');
						break;

						default:
						PlayerPlayAnimation( 'attack_fast_combo_002_ACS');
						break;
					}

					this.previous_olgierd_combo_attack_index_1 = olgierd_combo_attack_index_1;
				}
				else
				{
					olgierd_combo_attack_index_1 = RandDifferent(this.previous_olgierd_combo_attack_index_1 , 3);

					switch (olgierd_combo_attack_index_1) 
					{	
						case 2:
						PlayerPlayAnimation( 'attack_fast_combo_006_ACS');
						break;
						
						case 1:
						PlayerPlayAnimation( 'attack_fast_combo_005_ACS');
						break;

						default:
						PlayerPlayAnimation( 'attack_fast_combo_004_ACS');
						break;
					}

					this.previous_olgierd_combo_attack_index_1 = olgierd_combo_attack_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_olgierd_combo_attack == 0)
				{
					PlayerPlayAnimation( 'attack_fast_combo_004_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_olgierd_combo_attack += 1;
				}
				else if (combo_counter_olgierd_combo_attack == 1)
				{
					PlayerPlayAnimation( 'attack_fast_combo_005_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}
				else if (combo_counter_olgierd_combo_attack == 2)
				{
					PlayerPlayAnimation( 'attack_fast_combo_006_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}
				else if (combo_counter_olgierd_combo_attack == 3)
				{
					PlayerPlayAnimation( 'attack_fast_combo_002_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 4)
				{
					PlayerPlayAnimation( 'attack_fast_combo_003_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 5)
				{
					PlayerPlayAnimation( 'attack_fast_combo_007_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 6)
				{
					PlayerPlayAnimation( 'attack_fast_combo_008_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 7)
				{
					PlayerPlayAnimation( 'attack_fast_combo_009_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 8)
				{
					PlayerPlayAnimation( 'attack_fast_combo_010_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 9)
				{
					PlayerPlayAnimation( 'attack_fast_combo_011_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 10)
				{
					PlayerPlayAnimation( 'attack_fast_combo_012_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 11)
				{
					PlayerPlayAnimation( 'attack_fast_combo_013_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 12)
				{
					PlayerPlayAnimation( 'attack_fast_combo_014_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 13)
				{
					PlayerPlayAnimation( 'attack_fast_combo_015_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 14)
				{
					PlayerPlayAnimation( 'attack_fast_combo_1_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 15)
				{
					PlayerPlayAnimation( 'attack_fast_combo_2_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 16)
				{
					PlayerPlayAnimation( 'attack_fast_combo_3_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 17)
				{
					PlayerPlayAnimation( 'attack_fast_combo_to_strong_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack -= combo_counter_olgierd_combo_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				olgierd_combo_attack_index_2 = RandDifferent(this.previous_olgierd_combo_attack_index_2 , 18);

				switch (olgierd_combo_attack_index_2) 
				{	
					case 17:
					PlayerPlayAnimation( 'attack_fast_combo_to_strong_ACS');
					break;	
				
					case 16:
					PlayerPlayAnimation( 'attack_fast_combo_3_ACS');
					break;	

					case 15:
					PlayerPlayAnimation( 'attack_fast_combo_2_ACS');
					break;	

					case 14:
					PlayerPlayAnimation( 'attack_fast_combo_1_ACS');
					break;	
					
					case 13:
					PlayerPlayAnimation( 'attack_fast_combo_015_ACS');
					break;
					
					case 12:
					PlayerPlayAnimation( 'attack_fast_combo_014_ACS');
					break;
					
					case 11:
					PlayerPlayAnimation( 'attack_fast_combo_013_ACS');
					break;
					
					case 10:
					PlayerPlayAnimation( 'attack_fast_combo_012_ACS');
					break;
					
					case 9:
					PlayerPlayAnimation( 'attack_fast_combo_011_ACS');
					break;
					
					case 8:
					PlayerPlayAnimation( 'attack_fast_combo_010_ACS');
					break;
					
					case 7:
					PlayerPlayAnimation( 'attack_fast_combo_009_ACS');
					break;
					
					case 6:
					PlayerPlayAnimation( 'attack_fast_combo_008_ACS');
					break;
					
					case 5:
					PlayerPlayAnimation( 'attack_fast_combo_007_ACS');
					break;
					
					case 4:
					PlayerPlayAnimation( 'attack_fast_combo_006_ACS');
					break;
					
					case 3:
					PlayerPlayAnimation( 'attack_fast_combo_005_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'attack_fast_combo_004_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'attack_fast_combo_003_ACS');
					break;

					default:
					PlayerPlayAnimation( 'attack_fast_combo_002_ACS');
					break;
				}

				this.previous_olgierd_combo_attack_index_2 = olgierd_combo_attack_index_2;
			}
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function geraltRandomOlgierdHeavyAttackAlt()
	{			
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_olgierd_heavy_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_olgierd_heavy_attack_alt += 1;
				}
				else if (combo_counter_olgierd_heavy_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_heavy_attack_alt += 1;
				}
				else if (combo_counter_olgierd_heavy_attack_alt == 2)
				{
					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_up_right_with_step_back_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_heavy_attack_alt += 1;
				}
				else if (combo_counter_olgierd_heavy_attack_alt == 3)
				{
					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_down_left_with_step_back_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_heavy_attack_alt -= combo_counter_olgierd_heavy_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5*1.5 ) 
				{
					quen_sword_glow();

					olgierd_heavy_attack_alt_index_1 = RandDifferent(this.previous_olgierd_heavy_attack_alt_index_1 , 2);

					switch (olgierd_heavy_attack_alt_index_1) 
					{						
						case 1:
						PlayerPlayAnimation( 'attack_strong_up_right_with_step_back_ACS');
						break;
						
						default:
						PlayerPlayAnimation( 'attack_strong_down_left_with_step_back_ACS');
						break;	
					}

					this.previous_olgierd_heavy_attack_alt_index_1 = olgierd_heavy_attack_alt_index_1;
				}
				else
				{
					olgierd_heavy_attack_alt_index_2 = RandDifferent(this.previous_olgierd_heavy_attack_alt_index_2 , 2);

					switch (olgierd_heavy_attack_alt_index_2) 
					{						
						case 1:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');
						break;
						
						default:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');
						break;
					}

					this.previous_olgierd_heavy_attack_alt_index_2 = olgierd_heavy_attack_alt_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_olgierd_heavy_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_olgierd_heavy_attack_alt += 1;
				}
				else if (combo_counter_olgierd_heavy_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_heavy_attack_alt += 1;
				}
				else if (combo_counter_olgierd_heavy_attack_alt == 2)
				{
					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_up_right_with_step_back_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_heavy_attack_alt += 1;
				}
				else if (combo_counter_olgierd_heavy_attack_alt == 3)
				{
					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_down_left_with_step_back_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_heavy_attack_alt -= combo_counter_olgierd_heavy_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				olgierd_heavy_attack_alt_index_3 = RandDifferent(this.previous_olgierd_heavy_attack_alt_index_3 , 6);

				switch (olgierd_heavy_attack_alt_index_3) 
				{									
					case 3:
					PlayerPlayAnimation( 'attack_strong_up_right_with_step_back_ACS');
					break;
						
					case 2:
					PlayerPlayAnimation( 'attack_strong_down_left_with_step_back_ACS');
					break;
						
					case 1:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');
					break;
						
					default:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');
					break;
				}

				this.previous_olgierd_heavy_attack_alt_index_3 = olgierd_heavy_attack_alt_index_3;
			}
		}
	}
	
	function geraltRandomOlgierdHeavyAttack()
	{			
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_olgierd_heavy_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_olgierd_heavy_attack += 1;
				}
				else if (combo_counter_olgierd_heavy_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_heavy_attack += 1;
				}
				else if (combo_counter_olgierd_heavy_attack == 2)
				{
					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_single_2_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_heavy_attack += 1;
				}

				else if (combo_counter_olgierd_heavy_attack == 3)
				{
					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_up_right_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_heavy_attack += 1;
				}

				else if (combo_counter_olgierd_heavy_attack == 4)
				{
					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_single_1_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_heavy_attack += 1;
				}

				else if (combo_counter_olgierd_heavy_attack == 5)
				{
					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_down_left_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_heavy_attack -= combo_counter_olgierd_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5*1.5 ) 
				{
					quen_sword_glow();

					olgierd_heavy_attack_index_1 = RandDifferent(this.previous_olgierd_heavy_attack_index_1 , 2);

					switch (olgierd_heavy_attack_index_1) 
					{						
						case 1:
						PlayerPlayAnimation( 'attack_strong_down_left_ACS');
						break;
						
						default:
						PlayerPlayAnimation( 'attack_strong_single_1_ACS');
						break;	
					}

					this.previous_olgierd_heavy_attack_index_1 = olgierd_heavy_attack_index_1;
				}
				else
				{
					olgierd_heavy_attack_index_2 = RandDifferent(this.previous_olgierd_heavy_attack_index_2 , 4);

					switch (olgierd_heavy_attack_index_2) 
					{						
						case 3:
						PlayerPlayAnimation( 'attack_strong_up_right_ACS');
						break;
						
						case 2:
						PlayerPlayAnimation( 'attack_strong_single_2_ACS');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');
						break;
						
						default:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');
						break;
					}

					this.previous_olgierd_heavy_attack_index_2 = olgierd_heavy_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_olgierd_heavy_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_olgierd_heavy_attack += 1;
				}
				else if (combo_counter_olgierd_heavy_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_heavy_attack += 1;
				}
				else if (combo_counter_olgierd_heavy_attack == 2)
				{
					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_single_2_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_heavy_attack += 1;
				}

				else if (combo_counter_olgierd_heavy_attack == 3)
				{
					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_up_right_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_heavy_attack += 1;
				}

				else if (combo_counter_olgierd_heavy_attack == 4)
				{
					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_single_1_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_heavy_attack += 1;
				}

				else if (combo_counter_olgierd_heavy_attack == 5)
				{
					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_down_left_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_heavy_attack -= combo_counter_olgierd_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				olgierd_heavy_attack_index_3 = RandDifferent(this.previous_olgierd_heavy_attack_index_3 , 6);

				switch (olgierd_heavy_attack_index_3) 
				{									
					case 5:
					PlayerPlayAnimation( 'attack_strong_single_2_ACS');
					break;
					
					case 4:
					PlayerPlayAnimation( 'attack_strong_single_1_ACS');
					break;
					
					case 3:
					PlayerPlayAnimation( 'attack_strong_up_right_ACS');
					break;
						
					case 2:
					PlayerPlayAnimation( 'attack_strong_down_left_ACS');
					break;
						
					case 1:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');
					break;
						
					default:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');
					break;
				}

				this.previous_olgierd_heavy_attack_index_3 = olgierd_heavy_attack_index_3;
			}
		}
	}
	
	function geraltRandomOlgierdLightAttackAlt()
	{	
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_olgierd_light_attack_alt == 0)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);
						
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_left_NEW_test_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_olgierd_light_attack_alt += 1;
				}
				else if (combo_counter_olgierd_light_attack_alt == 1)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_right_NEW_test_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt += 1;
				}
				else if (combo_counter_olgierd_light_attack_alt == 2)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_left_NEW_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt += 1;
				}

				else if (combo_counter_olgierd_light_attack_alt == 3)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_right_NEW_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt += 1;
				}

				else if (combo_counter_olgierd_light_attack_alt == 4)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_3_right_NEW_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt += 1;
				}

				else if (combo_counter_olgierd_light_attack_alt == 5)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_l_003_ACS');
					
					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt += 1;
				}

				else if (combo_counter_olgierd_light_attack_alt == 6)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_r_002_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt += 1;
				}

				else if (combo_counter_olgierd_light_attack_alt == 7)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_knee_left_003_ACS');
	
					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt += 1;
				}

				else if (combo_counter_olgierd_light_attack_alt == 8)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_knee_right_002_ACS');
					
					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt += 1;
				}

				else if (combo_counter_olgierd_light_attack_alt == 9)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_knee_slash_180_1_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt -= combo_counter_olgierd_light_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5*1.5 ) 
				{
					olgierd_light_attack_alt_index_1 = RandDifferent(this.previous_olgierd_light_attack_alt_index_1 , 5);

					switch (olgierd_light_attack_alt_index_1) 
					{						
						case 4:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_knee_left_003_ACS');
						break;	

						case 3:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_knee_right_002_ACS');
						break;	
						
						case 2:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_knee_slash_180_1_ACS');
						break;			
						
						case 1:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_pirouette_r_002_ACS');
						break;
						
						default:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_pirouette_l_003_ACS');
						break;
					}

					this.previous_olgierd_light_attack_alt_index_1 = olgierd_light_attack_alt_index_1;
				}
				else
				{
					olgierd_light_attack_alt_index_2 = RandDifferent(this.previous_olgierd_light_attack_alt_index_2 , 5);

					switch (olgierd_light_attack_alt_index_2) 
					{	
						case 4:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_left_NEW_test_ACS');
						break;
						
						case 3:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_right_NEW_test_ACS');
						break;
						
						case 2:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_left_NEW_ACS');
						break;
						
						case 1:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_right_NEW_ACS');
						break;
						
						default:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_3_right_NEW_ACS');
						break;
					}

					this.previous_olgierd_light_attack_alt_index_2 = olgierd_light_attack_alt_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_olgierd_light_attack_alt == 0)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_left_NEW_test_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_olgierd_light_attack_alt += 1;
				}
				else if (combo_counter_olgierd_light_attack_alt == 1)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_right_NEW_test_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt += 1;
				}
				else if (combo_counter_olgierd_light_attack_alt == 2)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_left_NEW_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt += 1;
				}

				else if (combo_counter_olgierd_light_attack_alt == 3)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_right_NEW_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt += 1;
				}

				else if (combo_counter_olgierd_light_attack_alt == 4)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_3_right_NEW_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt += 1;
				}

				else if (combo_counter_olgierd_light_attack_alt == 5)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_l_003_ACS');
					
					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt += 1;
				}

				else if (combo_counter_olgierd_light_attack_alt == 6)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_r_002_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt += 1;
				}

				else if (combo_counter_olgierd_light_attack_alt == 7)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_knee_left_003_ACS');
	
					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt += 1;
				}

				else if (combo_counter_olgierd_light_attack_alt == 8)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_knee_right_002_ACS');
					
					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt += 1;
				}

				else if (combo_counter_olgierd_light_attack_alt == 9)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_knee_slash_180_1_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt -= combo_counter_olgierd_light_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				olgierd_light_attack_alt_index_3 = RandDifferent(this.previous_olgierd_light_attack_alt_index_3 , 10);

				switch (olgierd_light_attack_alt_index_3) 
				{	
					case 9:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_knee_left_003_ACS');
					break;	

					case 8:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_knee_right_002_ACS');
					break;	
					
					case 7:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_knee_slash_180_1_ACS');
					break;			
					
					case 6:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_r_002_ACS');
					break;
					
					case 5:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_l_003_ACS');
					break;
					
					case 4:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_left_NEW_test_ACS');
					break;
						
					case 3:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_right_NEW_test_ACS');
					break;
						
					case 2:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_left_NEW_ACS');
					break;
						
					case 1:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_right_NEW_ACS');
					break;
						
					default:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_3_right_NEW_ACS');
					break;
				}

				this.previous_olgierd_light_attack_alt_index_3 = olgierd_light_attack_alt_index_3;
			}
		}
	}
	
	function geraltRandomOlgierdLightAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_olgierd_light_attack == 0)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_1_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_olgierd_light_attack += 1;
				}
				else if (combo_counter_olgierd_light_attack == 1)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_2_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack += 1;
				}
				else if (combo_counter_olgierd_light_attack == 2)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_5_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack += 1;
				}

				else if (combo_counter_olgierd_light_attack == 3)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack += 1;
				}

				else if (combo_counter_olgierd_light_attack == 4)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack += 1;
				}

				else if (combo_counter_olgierd_light_attack == 5)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');
					
					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack += 1;
				}

				else if (combo_counter_olgierd_light_attack == 6)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack += 1;
				}

				else if (combo_counter_olgierd_light_attack == 7)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_single_1_ACS');
	
					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack += 1;
				}

				else if (combo_counter_olgierd_light_attack == 8)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_single_2_ACS');
					
					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack += 1;
				}

				else if (combo_counter_olgierd_light_attack == 9)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_tripple_1_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack -= combo_counter_olgierd_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5*1.5 ) 
				{
					//quen_sword_glow();

					olgierd_light_attack_index_1 = RandDifferent(this.previous_olgierd_light_attack_index_1 , 3);

					switch (olgierd_light_attack_index_1) 
					{	
						case 2:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_fast_tripple_1_ACS');
						break;

						case 1:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1 ); }
												
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_fast_single_2_ACS');
						break;	
						
						default:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1 ); }
												
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_fast_single_1_ACS');
						break;	
					}

					this.previous_olgierd_light_attack_index_1 = olgierd_light_attack_index_1;
				}
				else
				{
					olgierd_light_attack_index_2 = RandDifferent(this.previous_olgierd_light_attack_index_2 , 7);

					switch (olgierd_light_attack_index_2) 
					{						
						case 6:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');
						break;	
							
						case 5:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');
						break;
							
						case 4:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');
						break;	
							
						case 3:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');
						break;

						case 2:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_pirouette_5_ACS');
						break;
						
						case 1:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_pirouette_2_ACS');
						break;
						
						default:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_pirouette_1_ACS');
						break;
					}

					this.previous_olgierd_light_attack_index_2 = olgierd_light_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_olgierd_light_attack == 0)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_1_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_olgierd_light_attack += 1;
				}
				else if (combo_counter_olgierd_light_attack == 1)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_2_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack += 1;
				}
				else if (combo_counter_olgierd_light_attack == 2)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_5_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack += 1;
				}

				else if (combo_counter_olgierd_light_attack == 3)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack += 1;
				}

				else if (combo_counter_olgierd_light_attack == 4)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack += 1;
				}

				else if (combo_counter_olgierd_light_attack == 5)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');
					
					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack += 1;
				}

				else if (combo_counter_olgierd_light_attack == 6)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack += 1;
				}

				else if (combo_counter_olgierd_light_attack == 7)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_single_1_ACS');
	
					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack += 1;
				}

				else if (combo_counter_olgierd_light_attack == 8)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_single_2_ACS');
					
					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack += 1;
				}

				else if (combo_counter_olgierd_light_attack == 9)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_tripple_1_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack -= combo_counter_olgierd_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				olgierd_light_attack_index_3 = RandDifferent(this.previous_olgierd_light_attack_index_3 , 10);

				switch (olgierd_light_attack_index_3) 
				{	
					case 9:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');
					break;	
						
					case 8:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');
					break;

					case 7:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_tripple_1_ACS');
					break;

					case 6:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_single_2_ACS');
					break;
					
					case 5:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_single_1_ACS');
					break;
					
					case 4:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_5_ACS');
					break;

					case 3:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');
					break;

					case 2:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');
					break;
					
					case 1:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_2_ACS');
					break;
					
					default:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_1_ACS');
					break;
				}

				this.previous_olgierd_light_attack_index_3 = olgierd_light_attack_index_3;
			}
		}
	}
	
	function geraltRandomOlgierdSpecialAttackAlt()
	{
		if (!thePlayer.IsActionAllowed(EIAB_Signs))
		{
			return;
		}

		//theGame.SetTimeScale( 0.75, theGame.GetTimescaleSource( ETS_InstantKill ), theGame.GetTimescalePriority( ETS_InstantKill ), false, true );

		//AddTimer( 'RemoveInstantKillSloMo', 0.3 );

		MovementAdjust();

		quen_sword_glow();	

		dodge_timer_attack_actual();

		thePlayer.SetIsCurrentlyDodging(true);
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if( targetDistance <= 3.25*3.25 ) 
			{
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
										
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
				
				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
					}	
				}

				olgierd_shadow_attack_index_1 = RandDifferent(this.previous_olgierd_shadow_attack_index_1 , 3);

				switch (olgierd_shadow_attack_index_1) 
				{	
					case 2:
					PlayerPlayAnimation( 'attack_shadowdash_strong_3_ACS');
					break;

					case 1:
					PlayerPlayAnimation( 'attack_shadowdash_strong_2_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'shadow_attack_jump_forward_middle_right_ACS');
					break;
				}

				this.previous_olgierd_shadow_attack_index_1 = olgierd_shadow_attack_index_1;
			}
			else if( targetDistance > 3.25*3.25 && targetDistance <= 11*11) 
			{
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
										
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }
				
				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
					}
				}
			
				olgierd_shadow_attack_part_2_index_2 = RandDifferent(this.previous_olgierd_shadow_attack_part_2_index_2 , 2);

				switch (olgierd_shadow_attack_part_2_index_2) 
				{	
					case 1:
					thePlayer.PlayEffectSingle('special_attack_fx');
					PlayerPlayAnimation( 'attack_shadowdash_strong_1_ACS');
					thePlayer.StopEffect('special_attack_fx');
					break;
					
					default:
					PlayerPlayAnimation( 'attack_shadowstep_001_ACS');
					break;
				}

				this.previous_olgierd_shadow_attack_part_2_index_2 = olgierd_shadow_attack_part_2_index_2;

				AddTimer('ACS_bruxa_tackle', 0.5  , false);
			}
			else
			{
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
										
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.25  ); }
				
				AddTimer('ACS_ResetAnimation', 0.25 , false);

				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
					}
				}
			
				if (thePlayer.GetStat(BCS_Vitality) <= thePlayer.GetStatMax(BCS_Vitality) * 0.75)
				{
					thePlayer.PlayEffectSingle('special_attack_fx');
					PlayerPlayAnimation( 'ethereal_shadow_attack_001_ACS');
					thePlayer.StopEffect('special_attack_fx');
					AddTimer('ACS_bruxa_tackle', 1.5  , false);
				}
				else
				{
					PlayerPlayAnimation( 'attack_shadowstep_001_ACS');
					AddTimer('ACS_bruxa_tackle', 1.5  , false);
				}

				if (!thePlayer.HasTag('ACS_Shadowstep_Long_Buff'))
				{
					thePlayer.AddTag('ACS_Shadowstep_Long_Buff');
				} 
			}
		}
		else
		{
			if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			olgierd_shadow_attack_index_2 = RandDifferent(this.previous_olgierd_shadow_attack_index_2 , 4);

			switch (olgierd_shadow_attack_index_2) 
			{	
				case 3:
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}							
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

				PlayerPlayAnimation( 'attack_shadowdash_strong_3_ACS');
				break;

				case 2:
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}							
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

				PlayerPlayAnimation( 'attack_shadowdash_strong_2_ACS');
				break;
				
				case 1:
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}							
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

				PlayerPlayAnimation( 'shadow_attack_jump_forward_middle_right_ACS');
				break;

				default:
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}						
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.25  ); }
				AddTimer('ACS_ResetAnimation', 0.25 , false);

				PlayerPlayAnimation( 'attack_shadowstep_001_ACS');

				AddTimer('ACS_bruxa_tackle', 1.5 , false);
				break;
			}

			this.previous_olgierd_shadow_attack_index_2 = olgierd_shadow_attack_index_2;
		}
	}
	
	function geraltRandomOlgierdSpecialAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if( targetDistance <= 2.25*2.25 ) 
			{
				olgierd_combo_attack_index_1 = RandDifferent(this.previous_olgierd_combo_attack_index_1 , 4);

				switch (olgierd_combo_attack_index_1) 
				{	
					case 3:
					PlayerPlayAnimation( 'attack_fast_combo_to_strong_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'attack_fast_combo_3_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'attack_fast_combo_2_ACS');
					break;

					default:
					PlayerPlayAnimation( 'attack_fast_combo_1_ACS');
					break;
				}

				this.previous_olgierd_combo_attack_index_1 = olgierd_combo_attack_index_1;
			}
			else if( targetDistance > 2.25*2.25 
			&& targetDistance <= 3.5*3.5 ) 
			{
				olgierd_combo_attack_index_1 = RandDifferent(this.previous_olgierd_combo_attack_index_1 , 11);

				switch (olgierd_combo_attack_index_1) 
				{									
					case 10:
					PlayerPlayAnimation( 'attack_fast_combo_012_ACS');
					break;
					
					case 9:
					PlayerPlayAnimation( 'attack_fast_combo_011_ACS');
					break;
					
					case 8:
					PlayerPlayAnimation( 'attack_fast_combo_010_ACS');
					break;
					
					case 7:
					PlayerPlayAnimation( 'attack_fast_combo_009_ACS');
					break;
					
					case 6:
					PlayerPlayAnimation( 'attack_fast_combo_008_ACS');
					break;
					
					case 5:
					PlayerPlayAnimation( 'attack_fast_combo_007_ACS');
					break;
					
					case 4:
					PlayerPlayAnimation( 'attack_fast_combo_013_ACS');
					break;
					
					case 3:
					PlayerPlayAnimation( 'attack_fast_combo_014_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'attack_fast_combo_015_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'attack_fast_combo_003_ACS');
					break;

					default:
					PlayerPlayAnimation( 'attack_fast_combo_002_ACS');
					break;
				}

				this.previous_olgierd_combo_attack_index_1 = olgierd_combo_attack_index_1;
			}
			else
			{
				olgierd_combo_attack_index_1 = RandDifferent(this.previous_olgierd_combo_attack_index_1 , 3);

				switch (olgierd_combo_attack_index_1) 
				{	
					case 2:
					PlayerPlayAnimation( 'attack_fast_combo_006_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'attack_fast_combo_005_ACS');
					break;

					default:
					PlayerPlayAnimation( 'attack_fast_combo_004_ACS');
					break;
				}

				this.previous_olgierd_combo_attack_index_1 = olgierd_combo_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			olgierd_combo_attack_index_2 = RandDifferent(this.previous_olgierd_combo_attack_index_2 , 18);

			switch (olgierd_combo_attack_index_2) 
			{	
				case 17:
				PlayerPlayAnimation( 'attack_fast_combo_to_strong_ACS');
				break;	
			
				case 16:
				PlayerPlayAnimation( 'attack_fast_combo_3_ACS');
				break;	

				case 15:
				PlayerPlayAnimation( 'attack_fast_combo_2_ACS');
				break;	

				case 14:
				PlayerPlayAnimation( 'attack_fast_combo_1_ACS');
				break;	
				
				case 13:
				PlayerPlayAnimation( 'attack_fast_combo_015_ACS');
				break;
				
				case 12:
				PlayerPlayAnimation( 'attack_fast_combo_014_ACS');
				break;
				
				case 11:
				PlayerPlayAnimation( 'attack_fast_combo_013_ACS');
				break;
				
				case 10:
				PlayerPlayAnimation( 'attack_fast_combo_012_ACS');
				break;
				
				case 9:
				PlayerPlayAnimation( 'attack_fast_combo_011_ACS');
				break;
				
				case 8:
				PlayerPlayAnimation( 'attack_fast_combo_010_ACS');
				break;
				
				case 7:
				PlayerPlayAnimation( 'attack_fast_combo_009_ACS');
				break;
				
				case 6:
				PlayerPlayAnimation( 'attack_fast_combo_008_ACS');
				break;
				
				case 5:
				PlayerPlayAnimation( 'attack_fast_combo_007_ACS');
				break;
				
				case 4:
				PlayerPlayAnimation( 'attack_fast_combo_006_ACS');
				break;
				
				case 3:
				PlayerPlayAnimation( 'attack_fast_combo_005_ACS');
				break;
				
				case 2:
				PlayerPlayAnimation( 'attack_fast_combo_004_ACS');
				break;
				
				case 1:
				PlayerPlayAnimation( 'attack_fast_combo_003_ACS');
				break;

				default:
				PlayerPlayAnimation( 'attack_fast_combo_002_ACS');
				break;
			}

			this.previous_olgierd_combo_attack_index_2 = olgierd_combo_attack_index_2;
		}
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Shield stuff

	function geraltRandomShieldAttack() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				if (ACS_ComboMode() == 0)
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_shield_attack == 0)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_rp_02_ACS');

						combo_counter_damage -= combo_counter_damage;

						combo_counter_shield_attack += 1;
					}
					else if (combo_counter_shield_attack == 1)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_push_lp_ACS');

						ACS_Shield().PlayEffectSingle('destroy');
						ACS_Shield().StopEffect('destroy');
						ACS_Shield().PlayEffectSingle('destroy_shield_fx');
						ACS_Shield().StopEffect('destroy_shield_fx');
						ACS_Shield().PlayEffectSingle('igni_cone_hit');
						ACS_Shield().StopEffect('igni_cone_hit');

						combo_counter_damage += 1;

						combo_counter_shield_attack += 1;
					}
					else if (combo_counter_shield_attack == 2)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_rp_03_ACS');


						combo_counter_damage += 1;

						combo_counter_shield_attack += 1;
					}

					else if (combo_counter_shield_attack == 3)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_push_rp_ACS');
						ACS_Shield().PlayEffectSingle('destroy');
						ACS_Shield().StopEffect('destroy');
						ACS_Shield().PlayEffectSingle('destroy_shield_fx');
						ACS_Shield().StopEffect('destroy_shield_fx');
						ACS_Shield().PlayEffectSingle('igni_cone_hit');
						ACS_Shield().StopEffect('igni_cone_hit');

						combo_counter_damage += 1;

						combo_counter_shield_attack += 1;
					}

					else if (combo_counter_shield_attack == 4)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_lp_02_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_attack += 1;
					}

					else if (combo_counter_shield_attack == 5)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_lp_03_ACS');
						
						combo_counter_damage += 1;

						combo_counter_shield_attack -= combo_counter_shield_attack;
					}
				}
				else if (ACS_ComboMode() == 1)
				{
					if( targetDistance <= 1.5*1.5 ) 
					{	
						eredin_attack_index_1 = RandDifferent(this.previous_eredin_attack_index_1 , 2);

						switch (eredin_attack_index_1) 
						{	
							case 1:
							PlayerPlayAnimation( 'man_npc_shield_attack_push_rp_ACS');
							break;
							
							default:
							PlayerPlayAnimation( 'man_npc_shield_attack_push_lp_ACS');
							break;
						}
						
						this.previous_eredin_attack_index_1 = eredin_attack_index_1;

						ACS_Shield().PlayEffectSingle('destroy');
						ACS_Shield().StopEffect('destroy');
						ACS_Shield().PlayEffectSingle('destroy_shield_fx');
						ACS_Shield().StopEffect('destroy_shield_fx');
						ACS_Shield().PlayEffectSingle('igni_cone_hit');
						ACS_Shield().StopEffect('igni_cone_hit');
					}
					else
					{		
						eredin_attack_index_2 = RandDifferent(this.previous_eredin_attack_index_2 , 4);

						switch (eredin_attack_index_2) 
						{	
							case 3:
							PlayerPlayAnimation( 'man_npc_shield_attack_rp_03_ACS');
							break;
							
							case 2:
							PlayerPlayAnimation( 'man_npc_shield_attack_lp_02_ACS');
							break;
							
							case 1:
							PlayerPlayAnimation( 'man_npc_shield_attack_lp_03_ACS');
							break;
							
							default:
							PlayerPlayAnimation( 'man_npc_shield_attack_rp_02_ACS');
							break;
						}

						this.previous_eredin_attack_index_2 = eredin_attack_index_2;
					}
				}
			}	
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				if (ACS_ComboMode() == 0)
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_shield_attack == 0)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_rp_02_ACS');

						combo_counter_damage -= combo_counter_damage;

						combo_counter_shield_attack += 1;
					}
					else if (combo_counter_shield_attack == 1)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_push_lp_ACS');
						ACS_Shield().PlayEffectSingle('destroy');
						ACS_Shield().StopEffect('destroy');
						ACS_Shield().PlayEffectSingle('destroy_shield_fx');
						ACS_Shield().StopEffect('destroy_shield_fx');
						ACS_Shield().PlayEffectSingle('igni_cone_hit');
						ACS_Shield().StopEffect('igni_cone_hit');

						combo_counter_damage += 1;

						combo_counter_shield_attack += 1;
					}
					else if (combo_counter_shield_attack == 2)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_rp_03_ACS');


						combo_counter_damage += 1;

						combo_counter_shield_attack += 1;
					}

					else if (combo_counter_shield_attack == 3)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_push_rp_ACS');
						ACS_Shield().PlayEffectSingle('destroy');
						ACS_Shield().StopEffect('destroy');
						ACS_Shield().PlayEffectSingle('destroy_shield_fx');
						ACS_Shield().StopEffect('destroy_shield_fx');
						ACS_Shield().PlayEffectSingle('igni_cone_hit');
						ACS_Shield().StopEffect('igni_cone_hit');

						combo_counter_damage += 1;

						combo_counter_shield_attack += 1;
					}

					else if (combo_counter_shield_attack == 4)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_lp_02_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_attack += 1;
					}

					else if (combo_counter_shield_attack == 5)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_lp_03_ACS');
						
						combo_counter_damage += 1;

						combo_counter_shield_attack -= combo_counter_shield_attack;
					}
				}
				else if (ACS_ComboMode() == 1)
				{
					eredin_attack_index_3 = RandDifferent(this.previous_eredin_attack_index_3 , 6);

					switch (eredin_attack_index_3) 
					{					
						case 5:
						PlayerPlayAnimation( 'man_npc_shield_attack_push_rp_ACS');
						ACS_Shield().PlayEffectSingle('destroy');
						ACS_Shield().StopEffect('destroy');
						ACS_Shield().PlayEffectSingle('destroy_shield_fx');
						ACS_Shield().StopEffect('destroy_shield_fx');
						ACS_Shield().PlayEffectSingle('igni_cone_hit');
						ACS_Shield().StopEffect('igni_cone_hit');
						break;
							
						case 4:
						PlayerPlayAnimation( 'man_npc_shield_attack_push_lp_ACS');
						ACS_Shield().PlayEffectSingle('destroy');
						ACS_Shield().StopEffect('destroy');
						ACS_Shield().PlayEffectSingle('destroy_shield_fx');
						ACS_Shield().StopEffect('destroy_shield_fx');
						ACS_Shield().PlayEffectSingle('igni_cone_hit');
						ACS_Shield().StopEffect('igni_cone_hit');
						break;
							
						case 3:
						PlayerPlayAnimation( 'man_npc_shield_attack_rp_03_ACS');
						break;
							
						case 2:
						PlayerPlayAnimation( 'man_npc_shield_attack_lp_02_ACS');
						break;
							
						case 1:
						PlayerPlayAnimation( 'man_npc_shield_attack_lp_03_ACS');
						break;
							
						default:
						PlayerPlayAnimation( 'man_npc_shield_attack_rp_02_ACS');
						break;
					}

					this.previous_eredin_attack_index_3 = eredin_attack_index_3;
				}
			}
		}
	}
	
	function geraltRandomShieldComboAttack() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				if (ACS_ComboMode() == 0)
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_shield_attack_alt == 0)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');

						combo_counter_damage -= combo_counter_damage;

						combo_counter_shield_attack_alt += 1;
					}
					else if (combo_counter_shield_attack_alt == 1)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_attack_alt += 1;
					}
					else if (combo_counter_shield_attack_alt == 2)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_attack_alt += 1;
					}

					else if (combo_counter_shield_attack_alt == 3)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_attack_alt -= combo_counter_shield_attack_alt;
					}
				}
				else if (ACS_ComboMode() == 1)
				{
					eredin_attack_index_2 = RandDifferent(this.previous_eredin_attack_index_2 , 4);

					switch (eredin_attack_index_2) 
					{	
						case 3:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');
						break;
							
						case 2:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');
						break;
							
						case 1:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');
						break;
							
						default:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');
						break;
					}
					this.previous_eredin_attack_index_2 = eredin_attack_index_2;			
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				if (ACS_ComboMode() == 0)
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_shield_attack_alt == 0)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');

						combo_counter_damage -= combo_counter_damage;

						combo_counter_shield_attack_alt += 1;
					}
					else if (combo_counter_shield_attack_alt == 1)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_attack_alt += 1;
					}
					else if (combo_counter_shield_attack_alt == 2)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_attack_alt += 1;
					}

					else if (combo_counter_shield_attack_alt == 3)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_attack_alt -= combo_counter_shield_attack_alt;
					}
				}
				else if (ACS_ComboMode() == 1)
				{
					eredin_attack_index_3 = RandDifferent(this.previous_eredin_attack_index_3 , 4);

					switch (eredin_attack_index_3) 
					{					
						case 3:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');
						break;
							
						case 2:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');
						break;
							
						case 1:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');
						break;
							
						default:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');
						break;
					}

					this.previous_eredin_attack_index_3 = eredin_attack_index_3;
				}
			}
		}
	}
	
	function geraltRandomShieldAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				if (ACS_ComboMode() == 0)
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_shield_attack_special_alt == 0)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');

						combo_counter_damage -= combo_counter_damage;

						combo_counter_shield_attack_special_alt += 1;
					}
					else if (combo_counter_shield_attack_special_alt == 1)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_attack_special_alt -= combo_counter_shield_attack_special_alt;
					}
				}
				else if (ACS_ComboMode() == 1)
				{	
					eredin_attack_index_2 = RandDifferent(this.previous_eredin_attack_index_2 , 4);

					switch (eredin_attack_index_2) 
					{	
						case 1:
						PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');
						break;
							
						default:
						PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');
						break;
					}

					this.previous_eredin_attack_index_2 = eredin_attack_index_2;
				}
			}	
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				if (ACS_ComboMode() == 0)
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_shield_attack_special_alt == 0)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');

						combo_counter_damage -= combo_counter_damage;

						combo_counter_shield_attack_special_alt += 1;
					}
					else if (combo_counter_shield_attack_special_alt == 1)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_attack_special_alt -= combo_counter_shield_attack_special_alt;
					}
				}
				else if (ACS_ComboMode() == 1)
				{
					eredin_attack_index_3 = RandDifferent(this.previous_eredin_attack_index_3 , 6);

					switch (eredin_attack_index_3) 
					{						
						case 1:
						PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');
						break;
							
						default:
						PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');
						break;
					}

					this.previous_eredin_attack_index_3 = eredin_attack_index_3;
				}
			}
		}
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function geraltRandomShieldHeavyAttackAlt()
	{		
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				if (ACS_ComboMode() == 0)
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_shield_heavy_attack_alt == 0)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');

						combo_counter_damage -= combo_counter_damage;

						combo_counter_shield_heavy_attack_alt += 1;
					}
					else if (combo_counter_shield_heavy_attack_alt == 1)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_heavy_attack_alt -= combo_counter_shield_heavy_attack_alt;
					}
				}
				else if (ACS_ComboMode() == 1)
				{
					eredin_attack_index_2 = RandDifferent(this.previous_eredin_attack_index_2 , 2);

					switch (eredin_attack_index_2) 
					{	
						case 1:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');
						break;
							
						default:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');
						break;
					}

					this.previous_eredin_attack_index_2 = eredin_attack_index_2;	
				}
			}	
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				if (ACS_ComboMode() == 0)
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_shield_heavy_attack_alt == 0)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');

						combo_counter_damage -= combo_counter_damage;

						combo_counter_shield_heavy_attack_alt += 1;
					}
					else if (combo_counter_shield_heavy_attack_alt == 1)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_heavy_attack_alt -= combo_counter_shield_heavy_attack_alt;
					}
				}
				else if (ACS_ComboMode() == 1)
				{
					eredin_attack_index_3 = RandDifferent(this.previous_eredin_attack_index_3 , 2);

					switch (eredin_attack_index_3) 
					{							
						case 1:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');
						break;
							
						default:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');
						break;
					}

					this.previous_eredin_attack_index_3 = eredin_attack_index_3;
				}
			}
		}
	}
	
	function geraltRandomShieldHeavyAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				if (ACS_ComboMode() == 0)
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_shield_heavy_attack == 0)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_lp_02_ACS');

						combo_counter_damage -= combo_counter_damage;

						combo_counter_shield_heavy_attack += 1;
					}
					else if (combo_counter_shield_heavy_attack == 1)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_push_rp_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_heavy_attack += 1;
					}

					else if (combo_counter_shield_heavy_attack == 2)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_lp_03_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_heavy_attack -= combo_counter_shield_heavy_attack;
					}
				}
				else if (ACS_ComboMode() == 1)
				{
					if( targetDistance <= 1.5*1.5 ) 
					{	
						PlayerPlayAnimation( 'man_npc_shield_attack_push_rp_ACS');
						ACS_Shield().PlayEffectSingle('destroy');
						ACS_Shield().StopEffect('destroy');
						ACS_Shield().PlayEffectSingle('destroy_shield_fx');
						ACS_Shield().StopEffect('destroy_shield_fx');
						ACS_Shield().PlayEffectSingle('igni_cone_hit');
						ACS_Shield().StopEffect('igni_cone_hit');
					}
					else
					{		
						eredin_attack_index_2 = RandDifferent(this.previous_eredin_attack_index_2 , 2);

						switch (eredin_attack_index_2) 
						{	
							case 1:
							PlayerPlayAnimation( 'man_npc_shield_attack_lp_03_ACS');
							break;
							
							default:
							PlayerPlayAnimation( 'man_npc_shield_attack_lp_02_ACS');
							break;
						}

						this.previous_eredin_attack_index_2 = eredin_attack_index_2;
					}		
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				if (ACS_ComboMode() == 0)
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_shield_heavy_attack == 0)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_lp_02_ACS');

						combo_counter_damage -= combo_counter_damage;

						combo_counter_shield_heavy_attack += 1;
					}
					else if (combo_counter_shield_heavy_attack == 1)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_push_rp_ACS');
						ACS_Shield().PlayEffectSingle('destroy');
						ACS_Shield().StopEffect('destroy');
						ACS_Shield().PlayEffectSingle('destroy_shield_fx');
						ACS_Shield().StopEffect('destroy_shield_fx');
						ACS_Shield().PlayEffectSingle('igni_cone_hit');
						ACS_Shield().StopEffect('igni_cone_hit');

						combo_counter_damage += 1;

						combo_counter_shield_heavy_attack += 1;
					}

					else if (combo_counter_shield_heavy_attack == 2)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_lp_03_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_heavy_attack -= combo_counter_shield_heavy_attack;
					}
				}
				else if (ACS_ComboMode() == 1)
				{
					eredin_attack_index_3 = RandDifferent(this.previous_eredin_attack_index_3 , 3);

					switch (eredin_attack_index_3) 
					{					
						case 2:
						PlayerPlayAnimation( 'man_npc_shield_attack_push_rp_ACS');
						ACS_Shield().PlayEffectSingle('destroy');
						ACS_Shield().StopEffect('destroy');
						ACS_Shield().PlayEffectSingle('destroy_shield_fx');
						ACS_Shield().StopEffect('destroy_shield_fx');
						ACS_Shield().PlayEffectSingle('igni_cone_hit');
						ACS_Shield().StopEffect('igni_cone_hit');
						break;
							
						case 1:
						PlayerPlayAnimation( 'man_npc_shield_attack_lp_03_ACS');
						break;
							
						default:
						PlayerPlayAnimation( 'man_npc_shield_attack_lp_02_ACS');
						break;
					}

					this.previous_eredin_attack_index_3 = eredin_attack_index_3;
				}
			}
		}
	}
	
	function geraltRandomShieldLightAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				if (ACS_ComboMode() == 0)
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_shield_light_attack_alt == 0)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');

						combo_counter_damage -= combo_counter_damage;

						combo_counter_shield_light_attack_alt += 1;
					}
					else if (combo_counter_shield_light_attack_alt == 1)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_light_attack_alt -= combo_counter_shield_light_attack_alt;
					}
				}
				else if (ACS_ComboMode() == 1)
				{
					eredin_attack_index_2 = RandDifferent(this.previous_eredin_attack_index_2 , 2);

					switch (eredin_attack_index_2) 
					{	
						case 1:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');
						break;
							
						default:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');
						break;
					}

					this.previous_eredin_attack_index_2 = eredin_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				if (ACS_ComboMode() == 0)
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_shield_light_attack_alt == 0)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');

						combo_counter_damage -= combo_counter_damage;

						combo_counter_shield_light_attack_alt += 1;
					}
					else if (combo_counter_shield_light_attack_alt == 1)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_light_attack_alt -= combo_counter_shield_light_attack_alt;
					}
				}
				else if (ACS_ComboMode() == 1)
				{
					eredin_attack_index_3 = RandDifferent(this.previous_eredin_attack_index_3 , 2);

					switch (eredin_attack_index_3) 
					{							
						case 1:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');
						break;
							
						default:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');
						break;
					}

					this.previous_eredin_attack_index_3 = eredin_attack_index_3;
				}
			}
		}
	}
	
	function geraltRandomShieldLightAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				if (ACS_ComboMode() == 0)
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_shield_light_attack == 0)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_rp_02_ACS');

						combo_counter_damage -= combo_counter_damage;

						combo_counter_shield_light_attack += 1;
					}
					else if (combo_counter_shield_light_attack == 1)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_push_lp_ACS');
						ACS_Shield().PlayEffectSingle('destroy');
						ACS_Shield().StopEffect('destroy');
						ACS_Shield().PlayEffectSingle('destroy_shield_fx');
						ACS_Shield().StopEffect('destroy_shield_fx');
						ACS_Shield().PlayEffectSingle('igni_cone_hit');
						ACS_Shield().StopEffect('igni_cone_hit');

						combo_counter_damage += 1;

						combo_counter_shield_light_attack += 1;
					}

					else if (combo_counter_shield_light_attack == 2)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_rp_03_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_light_attack -= combo_counter_shield_light_attack;
					}
				}
				else if (ACS_ComboMode() == 1)
				{
					if( targetDistance <= 1.5*1.5 ) 
					{	
						PlayerPlayAnimation( 'man_npc_shield_attack_push_lp_ACS');
						ACS_Shield().PlayEffectSingle('destroy');
						ACS_Shield().StopEffect('destroy');
						ACS_Shield().PlayEffectSingle('destroy_shield_fx');
						ACS_Shield().StopEffect('destroy_shield_fx');
						ACS_Shield().PlayEffectSingle('igni_cone_hit');
						ACS_Shield().StopEffect('igni_cone_hit');
					}
					else
					{		
						eredin_attack_index_2 = RandDifferent(this.previous_eredin_attack_index_2 , 2);

						switch (eredin_attack_index_2) 
						{	
							case 1:
							PlayerPlayAnimation( 'man_npc_shield_attack_rp_03_ACS');
							break;
							
							default:
							PlayerPlayAnimation( 'man_npc_shield_attack_rp_02_ACS');
							break;
						}

						this.previous_eredin_attack_index_2 = eredin_attack_index_2;
					}	
				}
			}		
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				if (ACS_ComboMode() == 0)
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_shield_light_attack == 0)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_rp_02_ACS');

						combo_counter_damage -= combo_counter_damage;

						combo_counter_shield_light_attack += 1;
					}
					else if (combo_counter_shield_light_attack == 1)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_push_lp_ACS');
						ACS_Shield().PlayEffectSingle('destroy');
						ACS_Shield().StopEffect('destroy');
						ACS_Shield().PlayEffectSingle('destroy_shield_fx');
						ACS_Shield().StopEffect('destroy_shield_fx');
						ACS_Shield().PlayEffectSingle('igni_cone_hit');
						ACS_Shield().StopEffect('igni_cone_hit');

						combo_counter_damage += 1;

						combo_counter_shield_light_attack += 1;
					}

					else if (combo_counter_shield_light_attack == 2)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_rp_03_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_light_attack -= combo_counter_shield_light_attack;
					}
				}
				else if (ACS_ComboMode() == 1)
				{
					eredin_attack_index_3 = RandDifferent(this.previous_eredin_attack_index_3 , 3);

					switch (eredin_attack_index_3) 
					{					
						case 2:
						PlayerPlayAnimation( 'man_npc_shield_attack_push_lp_ACS');
						ACS_Shield().PlayEffectSingle('destroy');
						ACS_Shield().StopEffect('destroy');
						ACS_Shield().PlayEffectSingle('destroy_shield_fx');
						ACS_Shield().StopEffect('destroy_shield_fx');
						ACS_Shield().PlayEffectSingle('igni_cone_hit');
						ACS_Shield().StopEffect('igni_cone_hit');
						break;
							
						case 1:
						PlayerPlayAnimation( 'man_npc_shield_attack_rp_03_ACS');
						break;
							
						default:
						PlayerPlayAnimation( 'man_npc_shield_attack_rp_02_ACS');
						break;
					}

					this.previous_eredin_attack_index_3 = eredin_attack_index_3;
				}
			}
		}
	}
	
	function geraltRandomShieldSpecialAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				if (ACS_ComboMode() == 0)
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_shield_special_attack_alt == 0)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');

						combo_counter_damage -= combo_counter_damage;

						combo_counter_shield_special_attack_alt += 1;
					}
					else if (combo_counter_shield_special_attack_alt == 1)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_special_attack_alt -= combo_counter_shield_special_attack_alt;
					}
				}
				else if (ACS_ComboMode() == 1)
				{	
					eredin_attack_index_2 = RandDifferent(this.previous_eredin_attack_index_2 , 4);

					switch (eredin_attack_index_2) 
					{	
						case 1:
						PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');
						break;
							
						default:
						PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');
						break;
					}

					this.previous_eredin_attack_index_2 = eredin_attack_index_2;
				}
			}		
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				if (ACS_ComboMode() == 0)
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_shield_special_attack_alt == 0)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');

						combo_counter_damage -= combo_counter_damage;

						combo_counter_shield_special_attack_alt += 1;
					}
					else if (combo_counter_shield_special_attack_alt == 1)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_special_attack_alt -= combo_counter_shield_special_attack_alt;
					}
				}
				else if (ACS_ComboMode() == 1)
				{
					eredin_attack_index_3 = RandDifferent(this.previous_eredin_attack_index_3 , 6);

					switch (eredin_attack_index_3) 
					{						
						case 1:
						PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');
						break;
							
						default:
						PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');
						break;
					}

					this.previous_eredin_attack_index_3 = eredin_attack_index_3;
				}
			}
		}
	}
	
	function geraltRandomShieldSpecialAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				eredin_attack_index_2 = RandDifferent(this.previous_eredin_attack_index_2 , 4);

				switch (eredin_attack_index_2) 
				{	
					case 3:
					PlayerPlayAnimation( 'man_npc_shield_taunt_rp_01_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_shield_taunt_lp_03_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_shield_taunt_lp_02_ACS');
					break;
						
					default:
					PlayerPlayAnimation( 'man_npc_shield_taunt_lp_01_ACS');
					break;
				}

				this.previous_eredin_attack_index_2 = eredin_attack_index_2;
			}	
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				eredin_attack_index_3 = RandDifferent(this.previous_eredin_attack_index_3 , 2);

				switch (eredin_attack_index_3) 
				{							
					case 3:
					PlayerPlayAnimation( 'man_npc_shield_taunt_rp_01_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_shield_taunt_lp_03_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_shield_taunt_lp_02_ACS');
					break;
						
					default:
					PlayerPlayAnimation( 'man_npc_shield_taunt_lp_01_ACS');
					break;
				}

				this.previous_eredin_attack_index_3 = eredin_attack_index_3;
			}
		}
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Eredin attack stuff
	
	function geraltRandomEredinAttack() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_eredin_attack == 0)
				{
					
					PlayerPlayAnimation( 'walkattack_ready_lf_01_TO_IDLE_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_eredin_attack += 1;
				}
				else if (combo_counter_eredin_attack == 1)
				{
					
					PlayerPlayAnimation( 'attack_ready_lowswing_overhead_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}
				else if (combo_counter_eredin_attack == 2)
				{
					
					PlayerPlayAnimation( 'attack_relaxed_right_45_READY_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}
				else if (combo_counter_eredin_attack == 3)
				{
					
					PlayerPlayAnimation( 'attack_ready_swingswing_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 4)
				{
					
					PlayerPlayAnimation( 'attack_relaxed_left_45_READY_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 5)
				{
					
					PlayerPlayAnimation( 'attack_ready_swingswingturnswing_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 6)
				{
					
					PlayerPlayAnimation( 'attack_relaxed_forward_01_READY_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 7)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 8)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');
	
					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 9)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 10)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 11)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 12)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack -= combo_counter_eredin_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if (targetDistance <= 1.5 * 1.5  )
				{	
					eredin_attack_index_1 = RandDifferent(this.previous_eredin_attack_index_1 , 6);

					switch (eredin_attack_index_1) 
					{	
						case 5:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');
						break;

						case 4:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');
						break;

						case 3:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');
						break;	
							
						case 2:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');
						break;
							
						case 1:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');
						break;	
							
						default:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');
						break;
					}
					
					this.previous_eredin_attack_index_1 = eredin_attack_index_1;
				}
				else if (targetDistance > 1.5 * 1.5 && targetDistance <= 5*5 )
				{		
					eredin_attack_index_2 = RandDifferent(this.previous_eredin_attack_index_2 , 6);

					switch (eredin_attack_index_2) 
					{	
						case 5:
						
						PlayerPlayAnimation( 'attack_relaxed_left_45_READY_ACS');
						break;

						case 4:
						
						PlayerPlayAnimation( 'attack_relaxed_forward_01_READY_ACS');
						break;			
					
						case 3:
						
						PlayerPlayAnimation( 'attack_ready_lowswing_overhead_01_ACS');
						break;
						
						case 2:
						
						PlayerPlayAnimation( 'attack_relaxed_right_45_READY_ACS');
						break;
						
						case 1:
						
						PlayerPlayAnimation( 'attack_ready_swingswingturnswing_01_ACS');
						break;
						
						default:
						
						PlayerPlayAnimation( 'attack_ready_swingswing_01_ACS');
						break;
					}

					this.previous_eredin_attack_index_2 = eredin_attack_index_2;
				}		
				else
				{
					
					PlayerPlayAnimation( 'walkattack_ready_lf_01_TO_IDLE_ACS');
				}		
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_eredin_attack == 0)
				{
					
					PlayerPlayAnimation( 'walkattack_ready_lf_01_TO_IDLE_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_eredin_attack += 1;
				}
				else if (combo_counter_eredin_attack == 1)
				{
					
					PlayerPlayAnimation( 'attack_ready_lowswing_overhead_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}
				else if (combo_counter_eredin_attack == 2)
				{
					
					PlayerPlayAnimation( 'attack_relaxed_right_45_READY_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}
				else if (combo_counter_eredin_attack == 3)
				{
					
					PlayerPlayAnimation( 'attack_ready_swingswing_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 4)
				{
					
					PlayerPlayAnimation( 'attack_relaxed_left_45_READY_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 5)
				{
					
					PlayerPlayAnimation( 'attack_ready_swingswingturnswing_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 6)
				{
					
					PlayerPlayAnimation( 'attack_relaxed_forward_01_READY_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 7)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 8)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');
	
					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 9)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 10)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 11)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 12)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack -= combo_counter_eredin_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				eredin_attack_index_3 = RandDifferent(this.previous_eredin_attack_index_3 , 12);

				switch (eredin_attack_index_3) 
				{	
					case 11:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');
					break;	
						
					case 10:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');
					break;
						
					case 9:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');
					break;	
						
					case 8:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');
					break;

					case 7:

					

					PlayerPlayAnimation( 'attack_relaxed_left_45_READY_ACS');
					break;

					case 6:

					

					PlayerPlayAnimation( 'attack_relaxed_forward_01_READY_ACS');
					break;			
				
					case 5:

					

					PlayerPlayAnimation( 'attack_ready_lowswing_overhead_01_ACS');
					break;
					
					case 4:

					

					PlayerPlayAnimation( 'attack_relaxed_right_45_READY_ACS');
					break;
					
					case 3:

					

					PlayerPlayAnimation( 'attack_ready_swingswingturnswing_01_ACS');
					break;
					
					case 2:

					

					PlayerPlayAnimation( 'attack_ready_swingswing_01_ACS');
					break;

					case 1:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');
					break;
				}

				this.previous_eredin_attack_index_3 = eredin_attack_index_3;
			}
		}
	}

	function geraltRandomEredinComboAttack() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_eredin_combo_attack == 0)
				{
					
					PlayerPlayAnimation( 'attack_ready_combo_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_eredin_combo_attack += 1;
				}
				else if (combo_counter_eredin_combo_attack == 1)
				{
					
					PlayerPlayAnimation( 'attack_ready_swingswing_01_caretaker_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_combo_attack += 1;
				}
				else if (combo_counter_eredin_combo_attack == 2)
				{
					
					PlayerPlayAnimation( 'attack_ready_r_combo_01_caretaker_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_combo_attack += 1;
				}
				else if (combo_counter_eredin_combo_attack == 3)
				{
					
					PlayerPlayAnimation( 'attack_ready_swingswingturnswing_01_caretaker_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_combo_attack += 1;
				}

				else if (combo_counter_eredin_combo_attack == 4)
				{
					
					PlayerPlayAnimation( 'attack_ready_punchcombo_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_combo_attack += 1;
				}

				else if (combo_counter_eredin_combo_attack == 5)
				{
					
					PlayerPlayAnimation( 'attack_ready_kickcombo_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_combo_attack += 1;
				}

				else if (combo_counter_eredin_combo_attack == 6)
				{
					
					PlayerPlayAnimation( 'attack_ready_kickcombo_02_ACS');
	
					combo_counter_damage += 1;

					combo_counter_eredin_combo_attack -= combo_counter_eredin_combo_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 2*2 ) 
				{
					eredin_combo_attack_index_1 = RandDifferent(this.previous_eredin_combo_attack_index_1 , 3);
					
					switch (eredin_combo_attack_index_1) 
					{					
						case 2:
						
						PlayerPlayAnimation( 'attack_ready_kickcombo_02_ACS');
						break;
						
						case 1:
						
						PlayerPlayAnimation( 'attack_ready_kickcombo_01_ACS');
						break;
						
						default:
						
						PlayerPlayAnimation( 'attack_ready_punchcombo_01_ACS');
						break;
					}

					this.previous_eredin_combo_attack_index_1 = eredin_combo_attack_index_1;
				}
				else if( targetDistance > 2*2 && targetDistance <= 3.5*3.5) 
				{
					eredin_combo_attack_index_2 = RandDifferent(this.previous_eredin_combo_attack_index_2 , 2);
					
					switch (eredin_combo_attack_index_2) 
					{	
						case 1:
						
						PlayerPlayAnimation( 'attack_ready_swingswingturnswing_01_caretaker_ACS');
						break;
						
						default:
						
						PlayerPlayAnimation( 'attack_ready_swingswing_01_caretaker_ACS');
						break;
					}
					this.previous_eredin_combo_attack_index_2 = eredin_combo_attack_index_2;
				}
				else
				{
					eredin_combo_attack_index_2 = RandDifferent(this.previous_eredin_combo_attack_index_2 , 2);
					
					switch (eredin_combo_attack_index_2) 
					{	
						case 1:
						
						PlayerPlayAnimation( 'attack_ready_combo_01_ACS');
						break;
						
						default:
						
						PlayerPlayAnimation( 'attack_ready_r_combo_01_caretaker_ACS');
						break;
					}
					this.previous_eredin_combo_attack_index_2 = eredin_combo_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_eredin_combo_attack == 0)
				{
					
					PlayerPlayAnimation( 'attack_ready_combo_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_eredin_combo_attack += 1;
				}
				else if (combo_counter_eredin_combo_attack == 1)
				{
					
					PlayerPlayAnimation( 'attack_ready_swingswing_01_caretaker_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_combo_attack += 1;
				}
				else if (combo_counter_eredin_combo_attack == 2)
				{
					
					PlayerPlayAnimation( 'attack_ready_r_combo_01_caretaker_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_combo_attack += 1;
				}
				else if (combo_counter_eredin_combo_attack == 3)
				{
					
					PlayerPlayAnimation( 'attack_ready_swingswingturnswing_01_caretaker_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_combo_attack += 1;
				}

				else if (combo_counter_eredin_combo_attack == 4)
				{
					
					PlayerPlayAnimation( 'attack_ready_punchcombo_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_combo_attack += 1;
				}

				else if (combo_counter_eredin_combo_attack == 5)
				{
					
					PlayerPlayAnimation( 'attack_ready_kickcombo_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_combo_attack += 1;
				}

				else if (combo_counter_eredin_combo_attack == 6)
				{
					
					PlayerPlayAnimation( 'attack_ready_kickcombo_02_ACS');
	
					combo_counter_damage += 1;

					combo_counter_eredin_combo_attack -= combo_counter_eredin_combo_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				eredin_combo_attack_index_3 = RandDifferent(this.previous_eredin_combo_attack_index_3 , 7);
					
				switch (eredin_combo_attack_index_3) 
				{		
					case 6:
					
					PlayerPlayAnimation( 'attack_ready_combo_01_ACS');
					break;
						
					case 5:
					
					PlayerPlayAnimation( 'attack_ready_kickcombo_02_ACS');
					break;
						
					case 4:
					
					PlayerPlayAnimation( 'attack_ready_kickcombo_01_ACS');
					break;
						
					case 3:
					
					PlayerPlayAnimation( 'attack_ready_punchcombo_01_ACS');
					break;
					
					case 2:
					
					PlayerPlayAnimation( 'attack_ready_swingswingturnswing_01_caretaker_ACS');
					break;
						
					case 1:
					
					PlayerPlayAnimation( 'attack_ready_swingswing_01_caretaker_ACS');
					break;
						
					default:
					
					PlayerPlayAnimation( 'attack_ready_r_combo_01_caretaker_ACS');
					break;
				}
				
				this.previous_eredin_combo_attack_index_3 = eredin_combo_attack_index_3;
			}
		}
	}
	
	function geraltEredinStab() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			
			PlayerPlayAnimation( 'attack_special_stab_caretaker_ACS');

			thePlayer.AddTag('ACS_Eredin_Stab');

			AddTimer('ACS_bruxa_tackle', 0.5  , false);
		}
		else
		{
			if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			
			
			PlayerPlayAnimation( 'attack_special_stab_caretaker_ACS');
		}
	}
	
	function geraltEredinFuryCombo() 
	{
		MovementAdjust();

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_eredin_combo_attack_alt == 0)
				{
					
					PlayerPlayAnimation( 'attack_ready_furycombo_02_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_eredin_combo_attack_alt += 1;
				}
				else if (combo_counter_eredin_combo_attack_alt == 1)
				{
					
					PlayerPlayAnimation( 'attack_ready_light2heavy_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_combo_attack_alt += 1;
				}
				else if (combo_counter_eredin_combo_attack_alt == 2)
				{
					
					PlayerPlayAnimation( 'attack_ready_furycombo_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_combo_attack_alt -= combo_counter_eredin_combo_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3 * 3 ) 
				{	
					
					PlayerPlayAnimation( 'attack_ready_furycombo_01_ACS');
				}
				else if( targetDistance > 3 * 3 
				&& targetDistance <= 4 * 4 ) 
				{	
					
					PlayerPlayAnimation( 'attack_ready_light2heavy_01_ACS');
				}
				else
				{
					
					PlayerPlayAnimation( 'attack_ready_furycombo_02_ACS');
				}	
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_eredin_combo_attack_alt == 0)
				{
					
					PlayerPlayAnimation( 'attack_ready_furycombo_02_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_eredin_combo_attack_alt += 1;
				}
				else if (combo_counter_eredin_combo_attack_alt == 1)
				{
					
					PlayerPlayAnimation( 'attack_ready_light2heavy_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_combo_attack_alt += 1;
				}
				else if (combo_counter_eredin_combo_attack_alt == 2)
				{
					
					PlayerPlayAnimation( 'attack_ready_furycombo_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_combo_attack_alt -= combo_counter_eredin_combo_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				
				PlayerPlayAnimation( 'attack_ready_furycombo_02_ACS');
			}
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function geraltRandomEredinHeavyAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_eredin_heavy_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_eredin_heavy_attack_alt += 1;
				}
				else if (combo_counter_eredin_heavy_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack_alt += 1;
				}
				else if (combo_counter_eredin_heavy_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack_alt += 1;
				}

				else if (combo_counter_eredin_heavy_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack_alt -= combo_counter_eredin_heavy_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if (targetDistance <= 1.5 * 1.5 )
				{	
					eredin_attack_index_1 = RandDifferent(this.previous_eredin_attack_index_1 , 2);

					switch (eredin_attack_index_1) 
					{	
						case 1:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');
						break;			
						
						default:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');
						break;
					}
					
					this.previous_eredin_attack_index_1 = eredin_attack_index_1;
				}
				else
				{		
					eredin_attack_index_2 = RandDifferent(this.previous_eredin_attack_index_2 , 2);

					switch (eredin_attack_index_2) 
					{		
						case 1:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');
						break;	

						default:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');
						break;	
					}
					
					this.previous_eredin_attack_index_2 = eredin_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_eredin_heavy_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_eredin_heavy_attack_alt += 1;
				}
				else if (combo_counter_eredin_heavy_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack_alt += 1;
				}
				else if (combo_counter_eredin_heavy_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack_alt += 1;
				}

				else if (combo_counter_eredin_heavy_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack_alt -= combo_counter_eredin_heavy_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				eredin_combo_attack_index_3 = RandDifferent(this.previous_eredin_combo_attack_index_3 , 4);
					
				switch (eredin_combo_attack_index_3) 
				{		
					case 3:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');
					break;	

					case 2:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');
					break;	

					case 1:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');
					break;			
					
					default:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');
					break;
				}
				
				this.previous_eredin_combo_attack_index_3 = eredin_combo_attack_index_3;
			}
		}
	}
	
	function geraltRandomEredinHeavyAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_eredin_heavy_attack == 0)
				{
					
					PlayerPlayAnimation( 'attack_ready_lowswing_overhead_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_eredin_heavy_attack += 1;
				}
				else if (combo_counter_eredin_heavy_attack == 1)
				{
					
					PlayerPlayAnimation( 'attack_relaxed_left_45_READY_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack += 1;
				}
				else if (combo_counter_eredin_heavy_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_special_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack += 1;
				}

				else if (combo_counter_eredin_heavy_attack == 3)
				{
					
					PlayerPlayAnimation( 'attack_relaxed_right_45_READY_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack += 1;
				}

				else if (combo_counter_eredin_heavy_attack == 4)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack += 1;
				}

				else if (combo_counter_eredin_heavy_attack == 5)
				{
					
					PlayerPlayAnimation( 'attack_relaxed_forward_01_READY_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack += 1;
				}

				else if (combo_counter_eredin_heavy_attack == 6)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack += 1;
				}

				else if (combo_counter_eredin_heavy_attack == 7)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_06_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack += 1;
				}

				else if (combo_counter_eredin_heavy_attack == 8)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack += 1;
				}

				else if (combo_counter_eredin_heavy_attack == 9)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack -= combo_counter_eredin_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if (targetDistance <= 1.5 * 1.5 )
				{	
					eredin_attack_index_1 = RandDifferent(this.previous_eredin_attack_index_1 , 4);

					switch (eredin_attack_index_1) 
					{	
						case 3:
						
						PlayerPlayAnimation( 'attack_ready_lowswing_overhead_01_ACS');
						break;
						
						case 2:
						
						PlayerPlayAnimation( 'attack_relaxed_left_45_READY_ACS');
						break;
						
						case 1:
						
						PlayerPlayAnimation( 'attack_relaxed_right_45_READY_ACS');
						break;
						
						default:
						
						PlayerPlayAnimation( 'attack_relaxed_forward_01_READY_ACS');
						break;
					}
					
					this.previous_eredin_attack_index_1 = eredin_attack_index_1;
				}
				else
				{		
					eredin_attack_index_2 = RandDifferent(this.previous_eredin_attack_index_2 , 6);

					switch (eredin_attack_index_2) 
					{		
						case 5:
						PlayerPlayAnimation( 'man_npc_longsword_attack_l_06_lp_ACS');
						break;
						
						case 4:
						PlayerPlayAnimation( 'man_npc_longsword_attack_l_04_rp_ACS');
						break;
						
						case 3:
						PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');
						break;
						
						case 2:
						PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');
						break;
					
						case 1:
						PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_lp_ACS');
						break;
						
						default:
						PlayerPlayAnimation( 'man_npc_longsword_attack_special_01_rp_ACS');
						break;
					}

					this.previous_eredin_attack_index_2 = eredin_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_eredin_heavy_attack == 0)
				{
					
					PlayerPlayAnimation( 'attack_ready_lowswing_overhead_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_eredin_heavy_attack += 1;
				}
				else if (combo_counter_eredin_heavy_attack == 1)
				{
					
					PlayerPlayAnimation( 'attack_relaxed_left_45_READY_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack += 1;
				}
				else if (combo_counter_eredin_heavy_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_special_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack += 1;
				}

				else if (combo_counter_eredin_heavy_attack == 3)
				{
					
					PlayerPlayAnimation( 'attack_relaxed_right_45_READY_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack += 1;
				}

				else if (combo_counter_eredin_heavy_attack == 4)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack += 1;
				}

				else if (combo_counter_eredin_heavy_attack == 5)
				{
					
					PlayerPlayAnimation( 'attack_relaxed_forward_01_READY_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack += 1;
				}

				else if (combo_counter_eredin_heavy_attack == 6)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack += 1;
				}

				else if (combo_counter_eredin_heavy_attack == 7)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_06_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack += 1;
				}

				else if (combo_counter_eredin_heavy_attack == 8)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack += 1;
				}

				else if (combo_counter_eredin_heavy_attack == 9)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack -= combo_counter_eredin_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				eredin_combo_attack_index_3 = RandDifferent(this.previous_eredin_combo_attack_index_3 , 10);
					
				switch (eredin_combo_attack_index_3) 
				{	
					case 9:
					
					PlayerPlayAnimation( 'attack_ready_lowswing_overhead_01_ACS');
					break;
						
					case 8:
					
					PlayerPlayAnimation( 'attack_relaxed_left_45_READY_ACS');
					break;
						
					case 7:
					
					PlayerPlayAnimation( 'attack_relaxed_right_45_READY_ACS');
					break;
						
					case 6:
					
					PlayerPlayAnimation( 'attack_relaxed_forward_01_READY_ACS');
					break;
						
					case 5:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_06_lp_ACS');
					break;
						
					case 4:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_04_rp_ACS');
					break;
						
					case 3:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');
					break;
						
					case 2:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_lp_ACS');
					break;
						
					default:
					PlayerPlayAnimation( 'man_npc_longsword_attack_special_01_rp_ACS');
					break;
				}
				
				this.previous_eredin_combo_attack_index_3 = eredin_combo_attack_index_3;
			}
		}
	}
	
	function geraltRandomEredinLightAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_eredin_light_attack_alt == 0)
				{
					
					PlayerPlayAnimation( 'attack_ready_punchcombo_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_eredin_light_attack_alt += 1;
				}
				else if (combo_counter_eredin_light_attack_alt == 1)
				{
					
					PlayerPlayAnimation( 'attack_ready_kickcombo_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_light_attack_alt += 1;
				}
				else if (combo_counter_eredin_light_attack_alt == 2)
				{
					
					PlayerPlayAnimation( 'attack_ready_kickcombo_02_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_light_attack_alt -= combo_counter_eredin_light_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				eredin_combo_attack_index_1 = RandDifferent(this.previous_eredin_combo_attack_index_1 , 3);
					
				switch (eredin_combo_attack_index_1) 
				{					
					case 2:
					
					PlayerPlayAnimation( 'attack_ready_kickcombo_02_ACS');
					break;
						
					case 1:
					
					PlayerPlayAnimation( 'attack_ready_kickcombo_01_ACS');
					break;
						
					default:
					
					PlayerPlayAnimation( 'attack_ready_punchcombo_01_ACS');
					break;
				}

				this.previous_eredin_combo_attack_index_1 = eredin_combo_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_eredin_light_attack_alt == 0)
				{
					
					PlayerPlayAnimation( 'attack_ready_punchcombo_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_eredin_light_attack_alt += 1;
				}
				else if (combo_counter_eredin_light_attack_alt == 1)
				{
					
					PlayerPlayAnimation( 'attack_ready_kickcombo_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_light_attack_alt += 1;
				}
				else if (combo_counter_eredin_light_attack_alt == 2)
				{
					
					PlayerPlayAnimation( 'attack_ready_kickcombo_02_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_light_attack_alt -= combo_counter_eredin_light_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				eredin_combo_attack_index_3 = RandDifferent(this.previous_eredin_combo_attack_index_3 , 3);
					
				switch (eredin_combo_attack_index_3) 
				{		
					case 2:
					
					PlayerPlayAnimation( 'attack_ready_kickcombo_02_ACS');
					break;
						
					case 1:
					
					PlayerPlayAnimation( 'attack_ready_kickcombo_01_ACS');
					break;
						
					default:
					
					PlayerPlayAnimation( 'attack_ready_punchcombo_01_ACS');
					break;
				}
				
				this.previous_eredin_combo_attack_index_3 = eredin_combo_attack_index_3;
			}
		}
	}
	
	function geraltRandomEredinLightAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_eredin_light_attack == 0)
				{
					
					PlayerPlayAnimation( 'walkattack_ready_lf_01_TO_IDLE_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_eredin_light_attack += 1;
				}
				else if (combo_counter_eredin_light_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_light_attack += 1;
				}
				else if (combo_counter_eredin_light_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_light_attack += 1;
				}

				else if (combo_counter_eredin_light_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_light_attack += 1;
				}

				else if (combo_counter_eredin_light_attack == 4)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_light_attack += 1;
				}

				else if (combo_counter_eredin_light_attack == 5)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_light_attack += 1;
				}

				else if (combo_counter_eredin_light_attack == 6)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_light_attack -= combo_counter_eredin_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if (targetDistance <= 1.5 * 1.5 )
				{	
					eredin_attack_index_1 = RandDifferent(this.previous_eredin_attack_index_1 , 4);

					switch (eredin_attack_index_1) 
					{
						case 3:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');
						break;

						case 2:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');
						break;	

						case 1:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');
						break;

						default:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');
						break;
					}
					
					this.previous_eredin_attack_index_1 = eredin_attack_index_1;
				}
				else if (targetDistance > 1.5 * 1.5 && targetDistance <= 5*5 )
				{		
					eredin_attack_index_2 = RandDifferent(this.previous_eredin_attack_index_2 , 2);

					switch (eredin_attack_index_2) 
					{			
						case 1:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');
						break;	
							
						default:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');
						break;
					}

					this.previous_eredin_attack_index_2 = eredin_attack_index_2;
				}		
				else
				{
					
					PlayerPlayAnimation( 'walkattack_ready_lf_01_TO_IDLE_ACS');
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_eredin_light_attack == 0)
				{
					
					PlayerPlayAnimation( 'walkattack_ready_lf_01_TO_IDLE_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_eredin_light_attack += 1;
				}
				else if (combo_counter_eredin_light_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_light_attack += 1;
				}
				else if (combo_counter_eredin_light_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_light_attack += 1;
				}

				else if (combo_counter_eredin_light_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_light_attack += 1;
				}

				else if (combo_counter_eredin_light_attack == 4)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_light_attack += 1;
				}

				else if (combo_counter_eredin_light_attack == 5)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_light_attack += 1;
				}

				else if (combo_counter_eredin_light_attack == 6)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_light_attack -= combo_counter_eredin_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				eredin_attack_index_3 = RandDifferent(this.previous_eredin_attack_index_3 , 6);

				switch (eredin_attack_index_3) 
				{		
					case 5:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');
					break;

					case 4:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');
					break;

					case 3:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');
					break;	
						
					case 2:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');
					break;
						
					case 1:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');
					break;	
						
					default:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');
					break;
				}

				this.previous_eredin_attack_index_3 = eredin_attack_index_3;
			}
		}
	}
	
	function geraltRandomEredinSpecialAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			
			PlayerPlayAnimation( 'attack_special_stab_caretaker_ACS');

			thePlayer.AddTag('ACS_Eredin_Stab');

			AddTimer('ACS_bruxa_tackle', 0.5  , false);
		}
		else
		{
			if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			
			PlayerPlayAnimation( 'attack_special_stab_caretaker_ACS');
		}
	}
	
	function geraltRandomEredinSpecialAttack()
	{
		MovementAdjust();

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_eredin_special_attack_alt == 0)
				{
					
					PlayerPlayAnimation( 'attack_ready_furycombo_02_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_eredin_special_attack_alt += 1;
				}
				else if (combo_counter_eredin_special_attack_alt == 1)
				{
					
					PlayerPlayAnimation( 'attack_ready_light2heavy_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_special_attack_alt += 1;
				}
				else if (combo_counter_eredin_special_attack_alt == 2)
				{
					
					PlayerPlayAnimation( 'attack_ready_furycombo_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_special_attack_alt -= combo_counter_eredin_special_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3 * 3 ) 
				{	
					
					PlayerPlayAnimation( 'attack_ready_furycombo_01_ACS');
				}
				else if( targetDistance > 3 * 3 
				&& targetDistance <= 4 * 4 ) 
				{	
					
					PlayerPlayAnimation( 'attack_ready_light2heavy_01_ACS');
				}
				else
				{
					
					PlayerPlayAnimation( 'attack_ready_furycombo_02_ACS');
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_eredin_special_attack_alt == 0)
				{
					
					PlayerPlayAnimation( 'attack_ready_furycombo_02_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_eredin_special_attack_alt += 1;
				}
				else if (combo_counter_eredin_special_attack_alt == 1)
				{
					
					PlayerPlayAnimation( 'attack_ready_light2heavy_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_special_attack_alt += 1;
				}
				else if (combo_counter_eredin_special_attack_alt == 2)
				{
					
					PlayerPlayAnimation( 'attack_ready_furycombo_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_special_attack_alt -= combo_counter_eredin_special_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				
				PlayerPlayAnimation( 'attack_ready_furycombo_02_ACS');
			}
		}
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Imlerith Attack Stuff

	function geraltRandomImlerithAttack() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_attack == 0)
				{
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_idle_forward_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_attack += 1;
				}
				else if (combo_counter_imlerith_attack == 1)
				{
					
					PlayerPlayAnimation( 'attack_guard_forward_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}
				else if (combo_counter_imlerith_attack == 2)
				{
					
					PlayerPlayAnimation( 'taunt_after_death_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}
				else if (combo_counter_imlerith_attack == 3)
				{
					
					PlayerPlayAnimation( 'hit_guard_attack_forward_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 4)
				{
					
					PlayerPlayAnimation( 'attack_idle_backhandturn_forward_imlerith_ACS');
						
					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 5)
				{
					
					PlayerPlayAnimation( 'attack_shield_thrust_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 6)
				{
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_swing_shield_swing_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 7)
				{
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_thrust_shield_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 8)
				{
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_swing_shield_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 9)
				{
					
					PlayerPlayAnimation( 'attack_front_03_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 10)
				{
					
					PlayerPlayAnimation( 'attack_fast_03_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 11)
				{
					
					PlayerPlayAnimation( 'attack_front_02_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 12)
				{
					
					PlayerPlayAnimation( 'attack_fast_01_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack -= combo_counter_imlerith_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				imlerith_attack_index_2 = RandDifferent(this.previous_imlerith_attack_index_2 , 13);

				switch (imlerith_attack_index_2) 
				{		
					/*
					case 16:
					PlayerPlayAnimation( 'hit_guard_attack_right_45_imlerith_ACS');
					break;
					
					case 15:
					PlayerPlayAnimation( 'hit_guard_attack_left_45_imlerith_ACS');
					break;

					case 14:
					PlayerPlayAnimation( 'attack_idle_right_45_imlerith_ACS');
					break;

					case 13:
					PlayerPlayAnimation( 'attack_idle_left_45_imlerith_ACS');
					break;
					*/
					
					/*
					case 11:
					PlayerPlayAnimation( 'attack_idle_backhandturn_right_45_imlerith_ACS');
					break;
					
					case 10:
					PlayerPlayAnimation( 'attack_idle_backhandturn_left_45_imlerith_ACS');
					break;
					*/
					
					/*
					case 8:
					PlayerPlayAnimation( 'attack_guard_right_45_imlerith_ACS');
					break;
						
					case 7:
					PlayerPlayAnimation( 'attack_guard_left_45_imlerith_ACS');
					break;
					*/
					
					/*
					case 5:
					PlayerPlayAnimation( 'attack_counter_right_45_imlerith_ACS');
					break;
					
					case 4:
					PlayerPlayAnimation( 'attack_counter_left_45_imlerith_ACS');
					break;
					*/

					case 12:
					
					PlayerPlayAnimation( 'hit_guard_attack_forward_imlerith_ACS');
					break;

					case 11:
					
					PlayerPlayAnimation( 'attack_shield_thrust_imlerith_ACS');
					break;
					
					case 10:
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_swing_shield_imlerith_ACS');
					break;
					
					case 9:
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_swing_shield_swing_imlerith_ACS');
					break;
					
					case 8:
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_thrust_shield_imlerith_ACS');
					break;
					
					case 7:
					
					PlayerPlayAnimation( 'taunt_after_death_imlerith_ACS');
					break;

					case 6:
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_idle_forward_imlerith_ACS');
					break;

					case 5:
					
					PlayerPlayAnimation( 'attack_idle_backhandturn_forward_imlerith_ACS');
					break;

					case 4:
					
					PlayerPlayAnimation( 'attack_guard_forward_imlerith_ACS');
					break;

					case 3:
					
					PlayerPlayAnimation( 'attack_front_03_ACS');
					break;
					
					case 2:
					
					PlayerPlayAnimation( 'attack_front_02_ACS');
					break;
					
					case 1:
					
					PlayerPlayAnimation( 'attack_fast_03_ACS');
					break;
					
					default:
					
					PlayerPlayAnimation( 'attack_fast_01_ACS');
					break;
				}

				this.previous_imlerith_attack_index_2 = imlerith_attack_index_2;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_attack == 0)
				{
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_idle_forward_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_attack += 1;
				}
				else if (combo_counter_imlerith_attack == 1)
				{
					
					PlayerPlayAnimation( 'attack_guard_forward_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}
				else if (combo_counter_imlerith_attack == 2)
				{
					
					PlayerPlayAnimation( 'taunt_after_death_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}
				else if (combo_counter_imlerith_attack == 3)
				{
					
					PlayerPlayAnimation( 'hit_guard_attack_forward_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 4)
				{
					
					PlayerPlayAnimation( 'attack_idle_backhandturn_forward_imlerith_ACS');
						
					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 5)
				{
					
					PlayerPlayAnimation( 'attack_shield_thrust_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 6)
				{
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_swing_shield_swing_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 7)
				{
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_thrust_shield_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 8)
				{
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_swing_shield_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 9)
				{
					
					PlayerPlayAnimation( 'attack_front_03_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 10)
				{
					
					PlayerPlayAnimation( 'attack_fast_03_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 11)
				{
					
					PlayerPlayAnimation( 'attack_front_02_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 12)
				{
					
					PlayerPlayAnimation( 'attack_fast_01_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack -= combo_counter_imlerith_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				imlerith_attack_index_3 = RandDifferent(this.previous_imlerith_attack_index_3 , 13);

				switch (imlerith_attack_index_3) 
				{	
					/*
					case 16:
					PlayerPlayAnimation( 'hit_guard_attack_right_45_imlerith_ACS');
					break;
					
					case 15:
					PlayerPlayAnimation( 'hit_guard_attack_left_45_imlerith_ACS');
					break;

					case 14:
					PlayerPlayAnimation( 'attack_idle_right_45_imlerith_ACS');
					break;

					case 13:
					PlayerPlayAnimation( 'attack_idle_left_45_imlerith_ACS');
					break;
					*/
					
					/*
					case 11:
					PlayerPlayAnimation( 'attack_idle_backhandturn_right_45_imlerith_ACS');
					break;
					
					case 10:
					PlayerPlayAnimation( 'attack_idle_backhandturn_left_45_imlerith_ACS');
					break;
					*/
					
					/*
					case 8:
					PlayerPlayAnimation( 'attack_guard_right_45_imlerith_ACS');
					break;
						
					case 7:
					PlayerPlayAnimation( 'attack_guard_left_45_imlerith_ACS');
					break;
					*/
					
					/*
					case 5:
					PlayerPlayAnimation( 'attack_counter_right_45_imlerith_ACS');
					break;
					
					case 4:
					PlayerPlayAnimation( 'attack_counter_left_45_imlerith_ACS');
					break;
					*/

					case 12:
					
					PlayerPlayAnimation( 'hit_guard_attack_forward_imlerith_ACS');
					break;

					case 11:
					
					PlayerPlayAnimation( 'attack_shield_thrust_imlerith_ACS');
					break;
					
					case 10:
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_swing_shield_imlerith_ACS');
					break;
					
					case 9:
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_swing_shield_swing_imlerith_ACS');
					break;
					
					case 8:
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_thrust_shield_imlerith_ACS');
					break;
					
					case 7:
					
					PlayerPlayAnimation( 'taunt_after_death_imlerith_ACS');
					break;

					case 6:
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_idle_forward_imlerith_ACS');
					break;

					case 5:
					
					PlayerPlayAnimation( 'attack_idle_backhandturn_forward_imlerith_ACS');
					break;

					case 4:
					
					PlayerPlayAnimation( 'attack_guard_forward_imlerith_ACS');
					break;

					case 3:
					
					PlayerPlayAnimation( 'attack_front_03_ACS');
					break;
					
					case 2:
					
					PlayerPlayAnimation( 'attack_front_02_ACS');
					break;
					
					case 1:
					
					PlayerPlayAnimation( 'attack_fast_03_ACS');
					break;
					
					default:
					
					PlayerPlayAnimation( 'attack_fast_01_ACS');
					break;
				}

				this.previous_imlerith_attack_index_3 = imlerith_attack_index_3;
			}
		}	
	}

	function geraltRandomImlerithBerserkAttack() 
	{	
		//yrden_sword_effect_around();

		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_berserk_attack == 0)
				{
					
					PlayerPlayAnimation( 'berserk_attack_whirlwind_02_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_berserk_attack += 1;
				}
				else if (combo_counter_imlerith_berserk_attack == 1)
				{
					
					PlayerPlayAnimation( 'berserk_attack_whirlwind_01_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack += 1;
				}
				else if (combo_counter_imlerith_berserk_attack == 2)
				{
					
					PlayerPlayAnimation( 'attack_tornado_01_unused_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack += 1;
				}
				else if (combo_counter_imlerith_berserk_attack == 3)
				{
					
					PlayerPlayAnimation( 'berserk_start_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack += 1;
				}

				else if (combo_counter_imlerith_berserk_attack == 4)
				{
					
					PlayerPlayAnimation( 'berserk_attack_stuck_imlerith_ACS');
						
					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack += 1;
				}

				else if (combo_counter_imlerith_berserk_attack == 5)
				{
					
					PlayerPlayAnimation( 'berserk_stuck_attack_forward_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack += 1;
				}

				else if (combo_counter_imlerith_berserk_attack == 6)
				{
					
					PlayerPlayAnimation( 'berserk_attack_single_01_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack += 1;
				}

				else if (combo_counter_imlerith_berserk_attack == 7)
				{
					
					PlayerPlayAnimation( 'berserk_attack_single_02_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack += 1;
				}

				else if (combo_counter_imlerith_berserk_attack == 8)
				{
					
					PlayerPlayAnimation( 'attack_heavy_1_caretaker_ACS');
				
					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack -= combo_counter_imlerith_berserk_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 2 * 2 ) 
				{	
					imlerith_berserk_attack_index_1 = RandDifferent(this.previous_imlerith_berserk_attack_index_1 , 6);

					switch (imlerith_berserk_attack_index_1) 
					{	
						/*						
						case 7:
						PlayerPlayAnimation( 'berserk_stuck_attack_right_imlerith_ACS');
						break;
						
						case 6:
						PlayerPlayAnimation( 'berserk_stuck_attack_left_imlerith_ACS');
						break;
						*/

						case 5:
						
						PlayerPlayAnimation( 'berserk_stuck_attack_forward_imlerith_ACS');
						break;
						
						case 4:
						
						PlayerPlayAnimation( 'berserk_start_imlerith_ACS');
						break;
						
						case 3:
						
						PlayerPlayAnimation( 'berserk_attack_stuck_imlerith_ACS');
						break;		
										
						case 2:
						
						PlayerPlayAnimation( 'attack_heavy_1_caretaker_ACS');
						break;			
						
						case 1:
						
						PlayerPlayAnimation( 'berserk_attack_single_02_imlerith_ACS');
						break;

						default:
						
						PlayerPlayAnimation( 'berserk_attack_single_01_imlerith_ACS');
						break;		
					}
					
					this.previous_imlerith_berserk_attack_index_1 = imlerith_berserk_attack_index_1;
				}
				else
				{
					imlerith_berserk_attack_index_2 = RandDifferent(this.previous_imlerith_berserk_attack_index_2 , 3);

					switch (imlerith_berserk_attack_index_2) 
					{								
						case 2:
						
						PlayerPlayAnimation( 'attack_tornado_01_unused_imlerith_ACS');
						break;
						
						case 1:
						
						PlayerPlayAnimation( 'berserk_attack_whirlwind_02_imlerith_ACS');
						break;
						
						default:
						
						PlayerPlayAnimation( 'berserk_attack_whirlwind_01_imlerith_ACS');
						break;	
					}
					
					this.previous_imlerith_berserk_attack_index_2 = imlerith_berserk_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_berserk_attack == 0)
				{
					
					PlayerPlayAnimation( 'berserk_attack_whirlwind_02_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_berserk_attack += 1;
				}
				else if (combo_counter_imlerith_berserk_attack == 1)
				{
					
					PlayerPlayAnimation( 'berserk_attack_whirlwind_01_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack += 1;
				}
				else if (combo_counter_imlerith_berserk_attack == 2)
				{
					
					PlayerPlayAnimation( 'attack_tornado_01_unused_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack += 1;
				}
				else if (combo_counter_imlerith_berserk_attack == 3)
				{
					
					PlayerPlayAnimation( 'berserk_start_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack += 1;
				}

				else if (combo_counter_imlerith_berserk_attack == 4)
				{
					
					PlayerPlayAnimation( 'berserk_attack_stuck_imlerith_ACS');
						
					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack += 1;
				}

				else if (combo_counter_imlerith_berserk_attack == 5)
				{
					
					PlayerPlayAnimation( 'berserk_stuck_attack_forward_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack += 1;
				}

				else if (combo_counter_imlerith_berserk_attack == 6)
				{
					
					PlayerPlayAnimation( 'berserk_attack_single_01_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack += 1;
				}

				else if (combo_counter_imlerith_berserk_attack == 7)
				{
					
					PlayerPlayAnimation( 'berserk_attack_single_02_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack += 1;
				}

				else if (combo_counter_imlerith_berserk_attack == 8)
				{
					
					PlayerPlayAnimation( 'attack_heavy_1_caretaker_ACS');
				
					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack -= combo_counter_imlerith_berserk_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				imlerith_berserk_attack_index_3 = RandDifferent(this.previous_imlerith_berserk_attack_index_3 , 9);

				switch (imlerith_berserk_attack_index_3) 
				{	
					/*
					case 10:
					PlayerPlayAnimation( 'berserk_stuck_attack_right_imlerith_ACS');
					break;
						
					case 9:
					PlayerPlayAnimation( 'berserk_stuck_attack_left_imlerith_ACS');
					break;
					*/

					case 8:
					
					PlayerPlayAnimation( 'berserk_stuck_attack_forward_imlerith_ACS');
					break;
						
					case 7:
					
					PlayerPlayAnimation( 'berserk_start_imlerith_ACS');
					break;
						
					case 6:
					
					PlayerPlayAnimation( 'berserk_attack_stuck_imlerith_ACS');
					break;
						
					case 5:
					
					PlayerPlayAnimation( 'attack_heavy_1_caretaker_ACS');
					break;
					
					case 4:
					
					PlayerPlayAnimation( 'berserk_attack_single_02_imlerith_ACS');
					break;
					
					case 3:
					
					PlayerPlayAnimation( 'berserk_attack_single_01_imlerith_ACS');				
					break;	
						
					case 2:
					
					PlayerPlayAnimation( 'attack_tornado_01_unused_imlerith_ACS');
					break;
						
					case 1:
					
					PlayerPlayAnimation( 'berserk_attack_whirlwind_02_imlerith_ACS');
					break;
						
					default:
					
					PlayerPlayAnimation( 'berserk_attack_whirlwind_01_imlerith_ACS');
					break;	
				}

				this.previous_imlerith_berserk_attack_index_3 = imlerith_berserk_attack_index_3;
			}
		}	
	}
	
	function geraltImlerithWalkAttack() 
	{
		//yrden_sword_effect_big();

		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_walk_attack == 0)
				{
					
					PlayerPlayAnimation( 'walk_attack_leftfoot_forward_01_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_walk_attack += 1;
				}
				else if (combo_counter_imlerith_walk_attack == 1)
				{
					
					PlayerPlayAnimation( 'walk_attack_rightfoot_forward_01_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_walk_attack += 1;
				}
				else if (combo_counter_imlerith_walk_attack == 2)
				{
					
					PlayerPlayAnimation( 'walk_attack_leftfoot_forward_02_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_walk_attack -= combo_counter_imlerith_walk_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				imlerith_walk_attack_index_1 = RandDifferent(this.previous_imlerith_walk_attack_index_1 , 3);

				switch (imlerith_walk_attack_index_1) 
				{	
					case 2:
					
					PlayerPlayAnimation( 'walk_attack_rightfoot_forward_01_imlerith_ACS');
					break;
					
					case 1:
					
					PlayerPlayAnimation( 'walk_attack_leftfoot_forward_02_imlerith_ACS');
					break;
			
					default:
					
					PlayerPlayAnimation( 'walk_attack_leftfoot_forward_01_imlerith_ACS');
					break;
				}

				this.previous_imlerith_walk_attack_index_1 = imlerith_walk_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_walk_attack == 0)
				{
					
					PlayerPlayAnimation( 'walk_attack_leftfoot_forward_01_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_walk_attack += 1;
				}
				else if (combo_counter_imlerith_walk_attack == 1)
				{
					
					PlayerPlayAnimation( 'walk_attack_rightfoot_forward_01_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_walk_attack += 1;
				}
				else if (combo_counter_imlerith_walk_attack == 2)
				{
					
					PlayerPlayAnimation( 'walk_attack_leftfoot_forward_02_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_walk_attack -= combo_counter_imlerith_walk_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				imlerith_walk_attack_index_2 = RandDifferent(this.previous_imlerith_walk_attack_index_2 , 3);

				switch (imlerith_walk_attack_index_2) 
				{	
					case 2:
					
					PlayerPlayAnimation( 'walk_attack_rightfoot_forward_01_imlerith_ACS');
					break;
					
					case 1:
					
					PlayerPlayAnimation( 'walk_attack_leftfoot_forward_02_imlerith_ACS');
					break;
			
					default:
					
					PlayerPlayAnimation( 'walk_attack_leftfoot_forward_01_imlerith_ACS');
					break;
				}

				this.previous_imlerith_walk_attack_index_2 = imlerith_walk_attack_index_2;
			}
		}
	}

	function geraltRandomImlerithComboAttack() 
	{
		//yrden_sword_effect_around();

		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_combo_attack == 0)
				{
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_combo_01_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_combo_attack += 1;
				}
				else if (combo_counter_imlerith_combo_attack == 1)
				{
					
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_01_imlerith_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_combo_attack += 1;
				}

				else if (combo_counter_imlerith_combo_attack == 2)
				{
					
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_02_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_combo_attack += 1;
				}

				else if (combo_counter_imlerith_combo_attack == 3)
				{
					
					PlayerPlayAnimation( 'berserk_attack_combo_2_attacks_03_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_combo_attack += 1;
				}

				else if (combo_counter_imlerith_combo_attack == 4)
				{
					
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_03_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_combo_attack += 1;
				}

				else if (combo_counter_imlerith_combo_attack == 5)
				{
					
					PlayerPlayAnimation( 'berserk_attack_combo_4_attacks_01_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_combo_attack -= combo_counter_imlerith_combo_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				imlerith_combo_attack_index_1 = RandDifferent(this.previous_imlerith_combo_attack_index_1 , 6);

				switch (imlerith_combo_attack_index_1) 
				{	
					/*
					case 6:
					PlayerPlayAnimation( 'berserk_attack_combo_7_attacks_01_unused_imlerith_ACS');
					break;
					*/

					case 5:
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_combo_01_imlerith_ACS');
					break;
					
					case 4:
					
					PlayerPlayAnimation( 'berserk_attack_combo_4_attacks_01_imlerith_ACS');
					break;
					
					case 3:
					
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_03_imlerith_ACS');
					break;
					
					case 2:
					
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_02_imlerith_ACS');
					break;
					
					case 1:
					
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_01_imlerith_ACS');
					break;

					default:
					
					PlayerPlayAnimation( 'berserk_attack_combo_2_attacks_03_imlerith_ACS');
					break;
					
					/*
					default:
					PlayerPlayAnimation( 'berserk_attack_combo_2_attacks_02_imlerith_ACS');
					break;
					*/
				}	

				this.previous_imlerith_combo_attack_index_1 = imlerith_combo_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_combo_attack == 0)
				{
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_combo_01_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_combo_attack += 1;
				}
				else if (combo_counter_imlerith_combo_attack == 1)
				{
					
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_01_imlerith_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_combo_attack += 1;
				}

				else if (combo_counter_imlerith_combo_attack == 2)
				{
					
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_02_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_combo_attack += 1;
				}

				else if (combo_counter_imlerith_combo_attack == 3)
				{
					
					PlayerPlayAnimation( 'berserk_attack_combo_2_attacks_03_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_combo_attack += 1;
				}

				else if (combo_counter_imlerith_combo_attack == 4)
				{
					
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_03_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_combo_attack += 1;
				}

				else if (combo_counter_imlerith_combo_attack == 5)
				{
					
					PlayerPlayAnimation( 'berserk_attack_combo_4_attacks_01_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_combo_attack -= combo_counter_imlerith_combo_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				imlerith_combo_attack_index_2 = RandDifferent(this.previous_imlerith_combo_attack_index_2 , 6);

				switch (imlerith_combo_attack_index_2) 
				{	
					/*
					case 6:
					PlayerPlayAnimation( 'berserk_attack_combo_7_attacks_01_unused_imlerith_ACS');
					break;
					*/

					case 5:
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_combo_01_imlerith_ACS');
					break;
					
					case 4:
					
					PlayerPlayAnimation( 'berserk_attack_combo_4_attacks_01_imlerith_ACS');
					break;
					
					case 3:
					
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_03_imlerith_ACS'); // OK
					break;
					
					case 2:
					
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_02_imlerith_ACS');
					break;
					
					case 1:
					
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_01_imlerith_ACS');
					break;

					default:
					
					PlayerPlayAnimation( 'berserk_attack_combo_2_attacks_03_imlerith_ACS');
					break;
					
					/*
					default:
					PlayerPlayAnimation( 'berserk_attack_combo_2_attacks_02_imlerith_ACS');
					break;
					*/
				}	
				
				this.previous_imlerith_combo_attack_index_2 = imlerith_combo_attack_index_2;
			}
		}	
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function geraltRandomImlerithHeavyAttackAlt()
	{
		//yrden_sword_effect_big();

		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_heavy_attack_alt == 0)
				{
					
					PlayerPlayAnimation( 'walk_attack_leftfoot_forward_01_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}
				else if (combo_counter_imlerith_heavy_attack_alt == 1)
				{
					
					PlayerPlayAnimation( 'walk_attack_rightfoot_forward_01_imlerith_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}

				else if (combo_counter_imlerith_heavy_attack_alt == 2)
				{
					
					PlayerPlayAnimation( 'walk_attack_leftfoot_forward_02_imlerith_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}

				else if (combo_counter_imlerith_heavy_attack_alt == 3)
				{
					
					PlayerPlayAnimation( 'attack_front_03_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}

				else if (combo_counter_imlerith_heavy_attack_alt == 4)
				{
					
					PlayerPlayAnimation( 'attack_front_02_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}

				else if (combo_counter_imlerith_heavy_attack_alt == 5)
				{
					
					PlayerPlayAnimation( 'attack_idle_backhandturn_forward_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}

				else if (combo_counter_imlerith_heavy_attack_alt == 6)
				{
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_idle_forward_imlerith_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}

				else if (combo_counter_imlerith_heavy_attack_alt == 7)
				{
					
					PlayerPlayAnimation( 'attack_guard_forward_imlerith_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}

				else if (combo_counter_imlerith_heavy_attack_alt == 8)
				{
					
					PlayerPlayAnimation( 'attack_fast_01_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}

				else if (combo_counter_imlerith_heavy_attack_alt == 9)
				{
					
					PlayerPlayAnimation( 'attack_fast_03_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt -= combo_counter_imlerith_heavy_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 2 * 2 ) 
				{	
					imlerith_attack_index_1 = RandDifferent(this.previous_imlerith_attack_index_1 , 5);

					switch (imlerith_attack_index_1) 
					{					
						case 4:
						
						PlayerPlayAnimation( 'attack_idle_backhandturn_forward_imlerith_ACS');
						break;
							
						case 3:
						
						ACS_Yrden_Sidearm_Summon();
						PlayerPlayAnimation( 'attack_idle_forward_imlerith_ACS');
						break;
						
						case 2:
						
						PlayerPlayAnimation( 'attack_guard_forward_imlerith_ACS');
						break;
						
						case 1:
						
						PlayerPlayAnimation( 'attack_fast_03_ACS');
						break;
						
						default:
						
						PlayerPlayAnimation( 'attack_fast_01_ACS');
						break;
					}

					this.previous_imlerith_attack_index_1 = imlerith_attack_index_1;
				}
				else
				{
					imlerith_attack_index_2 = RandDifferent(this.previous_imlerith_attack_index_2 , 5);

					switch (imlerith_attack_index_2) 
					{	
						case 4:
						
						PlayerPlayAnimation( 'attack_front_03_ACS');
						break;
						
						case 3:
						
						PlayerPlayAnimation( 'attack_front_02_ACS');
						break;
						
						case 2:
						
						PlayerPlayAnimation( 'walk_attack_rightfoot_forward_01_imlerith_ACS');
						break;
						
						case 1:
						
						PlayerPlayAnimation( 'walk_attack_leftfoot_forward_02_imlerith_ACS');
						break;
				
						default:
						
						PlayerPlayAnimation( 'walk_attack_leftfoot_forward_01_imlerith_ACS');
						break;
					}

					this.previous_imlerith_attack_index_2 = imlerith_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_heavy_attack_alt == 0)
				{
					
					PlayerPlayAnimation( 'walk_attack_leftfoot_forward_01_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}
				else if (combo_counter_imlerith_heavy_attack_alt == 1)
				{
					
					PlayerPlayAnimation( 'walk_attack_rightfoot_forward_01_imlerith_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}

				else if (combo_counter_imlerith_heavy_attack_alt == 2)
				{
					
					PlayerPlayAnimation( 'walk_attack_leftfoot_forward_02_imlerith_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}

				else if (combo_counter_imlerith_heavy_attack_alt == 3)
				{
					
					PlayerPlayAnimation( 'attack_front_03_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}

				else if (combo_counter_imlerith_heavy_attack_alt == 4)
				{
					
					PlayerPlayAnimation( 'attack_front_02_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}

				else if (combo_counter_imlerith_heavy_attack_alt == 5)
				{
					
					PlayerPlayAnimation( 'attack_idle_backhandturn_forward_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}

				else if (combo_counter_imlerith_heavy_attack_alt == 6)
				{
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_idle_forward_imlerith_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}

				else if (combo_counter_imlerith_heavy_attack_alt == 7)
				{
					
					PlayerPlayAnimation( 'attack_guard_forward_imlerith_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}

				else if (combo_counter_imlerith_heavy_attack_alt == 8)
				{
					
					PlayerPlayAnimation( 'attack_fast_01_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}

				else if (combo_counter_imlerith_heavy_attack_alt == 9)
				{
					
					PlayerPlayAnimation( 'attack_fast_03_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt -= combo_counter_imlerith_heavy_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				imlerith_attack_index_3 = RandDifferent(this.previous_imlerith_attack_index_3 , 10);

				switch (imlerith_attack_index_3) 
				{	
					case 9:
					
					PlayerPlayAnimation( 'walk_attack_rightfoot_forward_01_imlerith_ACS');
					break;
						
					case 8:
					
					PlayerPlayAnimation( 'walk_attack_leftfoot_forward_02_imlerith_ACS');
					break;
				
					case 7:
					
					PlayerPlayAnimation( 'walk_attack_leftfoot_forward_01_imlerith_ACS');
					break;
						
					case 6:
					
					PlayerPlayAnimation( 'attack_idle_backhandturn_forward_imlerith_ACS');
					break;
					
					case 5:
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_idle_forward_imlerith_ACS');
					break;
					
					case 4:
					
					PlayerPlayAnimation( 'attack_guard_forward_imlerith_ACS');
					break;
					
					case 3:
					
					PlayerPlayAnimation( 'attack_fast_03_ACS');
					break;
					
					case 2:
					
					PlayerPlayAnimation( 'attack_fast_01_ACS');
					break;
					
					case 1:
					
					PlayerPlayAnimation( 'attack_front_03_ACS');
					break;
					
					default:
					
					PlayerPlayAnimation( 'attack_front_02_ACS');
					break;
				}

				this.previous_imlerith_attack_index_3 = imlerith_attack_index_3;
			}
		}
	}
	
	function geraltRandomImlerithHeavyAttack()
	{	
		//yrden_sword_effect_big();

		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_heavy_attack == 0)
				{
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_swing_shield_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_heavy_attack += 1;
				}
				else if (combo_counter_imlerith_heavy_attack == 1)
				{
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_swing_shield_swing_imlerith_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack += 1;
				}

				else if (combo_counter_imlerith_heavy_attack == 2)
				{
					
					PlayerPlayAnimation( 'attack_heavy_1_caretaker_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack -= combo_counter_imlerith_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 2.5 * 2.5 ) 
				{	
					/*
					imlerith_attack_index_1 = RandDifferent(this.previous_imlerith_attack_index_1 , 2);

					switch (imlerith_attack_index_1) 
					{	
									
						case 7:
						PlayerPlayAnimation( 'attack_counter_right_45_imlerith_ACS');
						break;
						
						case 6:
						PlayerPlayAnimation( 'attack_counter_left_45_imlerith_ACS');
						break;
						
						case 5:
						PlayerPlayAnimation( 'attack_idle_right_45_imlerith_ACS');
						break;
						
						case 4:
						PlayerPlayAnimation( 'attack_idle_left_45_imlerith_ACS');
						break;
							
						case 3:
						PlayerPlayAnimation( 'attack_idle_backhandturn_right_45_imlerith_ACS');
						break;
						
						case 2:
						PlayerPlayAnimation( 'attack_idle_backhandturn_left_45_imlerith_ACS');
						break;
						
						case 1:
						PlayerPlayAnimation( 'attack_guard_right_45_imlerith_ACS');
						break;
						
						default:
						PlayerPlayAnimation( 'attack_guard_left_45_imlerith_ACS');
						break;
						

						case 1:
						PlayerPlayAnimation( 'attack_swing_shield_imlerith_ACS');
						break;
						
						default:
						PlayerPlayAnimation( 'attack_swing_shield_swing_imlerith_ACS');
						break;
					}

					this.previous_imlerith_attack_index_1 = imlerith_attack_index_1;
					*/

					
					PlayerPlayAnimation( 'attack_heavy_1_caretaker_ACS');
				}
				else
				{
					//PlayerPlayAnimation( 'attack_heavy_1_caretaker_ACS');

					imlerith_attack_index_2 = RandDifferent(this.previous_imlerith_attack_index_2 , 2);

					switch (imlerith_attack_index_2) 
					{	
						case 1:
						
						ACS_Yrden_Sidearm_Summon();
						PlayerPlayAnimation( 'attack_swing_shield_imlerith_ACS');
						break;
						
						default:
						
						ACS_Yrden_Sidearm_Summon();
						PlayerPlayAnimation( 'attack_swing_shield_swing_imlerith_ACS');
						break;
					}

					this.previous_imlerith_attack_index_2 = imlerith_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_heavy_attack == 0)
				{
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_swing_shield_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_heavy_attack += 1;
				}
				else if (combo_counter_imlerith_heavy_attack == 1)
				{
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_swing_shield_swing_imlerith_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack += 1;
				}

				else if (combo_counter_imlerith_heavy_attack == 2)
				{
					
					PlayerPlayAnimation( 'attack_heavy_1_caretaker_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack -= combo_counter_imlerith_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				imlerith_attack_index_3 = RandDifferent(this.previous_imlerith_attack_index_3 , 10);

				switch (imlerith_attack_index_3) 
				{	
					/*
					case 9:
					PlayerPlayAnimation( 'attack_counter_right_45_imlerith_ACS');
					break;
					
					case 8:
					PlayerPlayAnimation( 'attack_counter_left_45_imlerith_ACS');
					break;
					
					case 7:
					PlayerPlayAnimation( 'attack_idle_right_45_imlerith_ACS');
					break;
					
					case 6:
					PlayerPlayAnimation( 'attack_idle_left_45_imlerith_ACS');
					break;
					
					case 5:
					PlayerPlayAnimation( 'attack_idle_backhandturn_right_45_imlerith_ACS');
					break;
					
					case 4:
					PlayerPlayAnimation( 'attack_idle_backhandturn_left_45_imlerith_ACS');
					break;
					
					case 3:
					PlayerPlayAnimation( 'attack_guard_right_45_imlerith_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'attack_guard_left_45_imlerith_ACS');
					break;
					*/
					
					case 2:
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_swing_shield_imlerith_ACS');
					break;
					
					case 1:
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_swing_shield_swing_imlerith_ACS');
					break;

					default:
					
					PlayerPlayAnimation( 'attack_heavy_1_caretaker_ACS');
					break;
				}

				this.previous_imlerith_attack_index_3 = imlerith_attack_index_3;
			}
		}
	}
	
	function geraltRandomImlerithLightAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_light_attack == 0)
				{
					
					PlayerPlayAnimation( 'hit_guard_attack_forward_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_light_attack += 1;
				}
				else if (combo_counter_imlerith_light_attack == 1)
				{
					
					PlayerPlayAnimation( 'attack_shield_thrust_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_light_attack += 1;
				}

				else if (combo_counter_imlerith_light_attack == 2)
				{
					
					PlayerPlayAnimation( 'taunt_after_death_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_light_attack += 1;
				}

				else if (combo_counter_imlerith_light_attack == 3)
				{
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_thrust_shield_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_light_attack -= combo_counter_imlerith_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				imlerith_attack_index_1 = RandDifferent(this.previous_imlerith_attack_index_1 , 4);

				switch (imlerith_attack_index_1) 
				{					
					case 3:
					
					PlayerPlayAnimation( 'hit_guard_attack_forward_imlerith_ACS');
					break;
					
					/*
					case 4:
					PlayerPlayAnimation( 'hit_guard_attack_left_45_imlerith_ACS');
					break;
					
					case 3:
					PlayerPlayAnimation( 'hit_guard_attack_right_45_imlerith_ACS');
					break;
					*/

					case 2:
					
					PlayerPlayAnimation( 'taunt_after_death_imlerith_ACS');
					break;
					
					case 1:
					
					PlayerPlayAnimation( 'attack_shield_thrust_imlerith_ACS');
					break;
					
					default:
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_thrust_shield_imlerith_ACS');
					break;
				}

				this.previous_imlerith_attack_index_1 = imlerith_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_light_attack == 0)
				{
					
					PlayerPlayAnimation( 'hit_guard_attack_forward_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_light_attack += 1;
				}
				else if (combo_counter_imlerith_light_attack == 1)
				{
					
					PlayerPlayAnimation( 'attack_shield_thrust_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_light_attack += 1;
				}

				else if (combo_counter_imlerith_light_attack == 2)
				{
					
					PlayerPlayAnimation( 'taunt_after_death_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_light_attack += 1;
				}

				else if (combo_counter_imlerith_light_attack == 3)
				{
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_thrust_shield_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_light_attack -= combo_counter_imlerith_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				imlerith_attack_index_3 = RandDifferent(this.previous_imlerith_attack_index_3 , 4);

				switch (imlerith_attack_index_3) 
				{	
					case 3:
					
					PlayerPlayAnimation( 'hit_guard_attack_forward_imlerith_ACS');
					break;
					
					/*
					case 4:
					PlayerPlayAnimation( 'hit_guard_attack_left_45_imlerith_ACS');
					break;
					
					case 3:
					PlayerPlayAnimation( 'hit_guard_attack_right_45_imlerith_ACS');
					break;
					*/

					case 2:
					
					PlayerPlayAnimation( 'taunt_after_death_imlerith_ACS');
					break;
					
					case 1:
					
					PlayerPlayAnimation( 'attack_shield_thrust_imlerith_ACS');
					break;
					
					default:
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_thrust_shield_imlerith_ACS');
					break;
				}

				this.previous_imlerith_attack_index_3 = imlerith_attack_index_3;
			}
		}
	}
	
	function geraltRandomImlerithSpecialAttackAlt()
	{
		//yrden_sword_effect_around();

		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_berserk_attack == 0)
				{
					
					PlayerPlayAnimation( 'berserk_attack_whirlwind_02_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_berserk_attack += 1;
				}
				else if (combo_counter_imlerith_berserk_attack == 1)
				{
					
					PlayerPlayAnimation( 'berserk_attack_whirlwind_01_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack += 1;
				}
				else if (combo_counter_imlerith_special_attack_alt == 2)
				{
					
					PlayerPlayAnimation( 'attack_tornado_01_unused_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack_alt += 1;
				}
				else if (combo_counter_imlerith_special_attack_alt == 3)
				{
					
					PlayerPlayAnimation( 'berserk_start_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack_alt += 1;
				}

				else if (combo_counter_imlerith_special_attack_alt == 4)
				{
					
					PlayerPlayAnimation( 'berserk_attack_stuck_imlerith_ACS');
						
					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack_alt += 1;
				}

				else if (combo_counter_imlerith_special_attack_alt == 5)
				{
					
					PlayerPlayAnimation( 'berserk_stuck_attack_forward_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack_alt += 1;
				}

				else if (combo_counter_imlerith_special_attack_alt == 6)
				{
					
					PlayerPlayAnimation( 'berserk_attack_single_01_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack_alt += 1;
				}

				else if (combo_counter_imlerith_special_attack_alt == 7)
				{
					
					PlayerPlayAnimation( 'berserk_attack_single_02_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack_alt -= combo_counter_imlerith_special_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3.5 * 3.5 ) 
				{	
					imlerith_berserk_attack_index_1 = RandDifferent(this.previous_imlerith_berserk_attack_index_1 , 5);

					switch (imlerith_berserk_attack_index_1) 
					{	
						/*						
						case 7:
						PlayerPlayAnimation( 'berserk_stuck_attack_right_imlerith_ACS');
						break;
						
						case 6:
						PlayerPlayAnimation( 'berserk_stuck_attack_left_imlerith_ACS');
						break;
						*/

						case 4:
						
						PlayerPlayAnimation( 'berserk_stuck_attack_forward_imlerith_ACS');
						break;
						
						case 3:
						
						PlayerPlayAnimation( 'berserk_start_imlerith_ACS');
						break;
						
						case 2:
						
						PlayerPlayAnimation( 'berserk_attack_stuck_imlerith_ACS');
						break;				
						
						case 1:
						
						PlayerPlayAnimation( 'berserk_attack_single_02_imlerith_ACS');
						break;

						default:
						
						PlayerPlayAnimation( 'berserk_attack_single_01_imlerith_ACS');
						break;		
					}
					
					this.previous_imlerith_berserk_attack_index_1 = imlerith_berserk_attack_index_1;
				}
				else
				{
					imlerith_berserk_attack_index_2 = RandDifferent(this.previous_imlerith_berserk_attack_index_2 , 3);

					switch (imlerith_berserk_attack_index_2) 
					{								
						case 2:
						
						PlayerPlayAnimation( 'attack_tornado_01_unused_imlerith_ACS');
						break;
						
						case 1:
						
						PlayerPlayAnimation( 'berserk_attack_whirlwind_02_imlerith_ACS');
						break;
						
						default:
						
						PlayerPlayAnimation( 'berserk_attack_whirlwind_01_imlerith_ACS');
						break;	
					}
					
					this.previous_imlerith_berserk_attack_index_2 = imlerith_berserk_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_berserk_attack == 0)
				{
					
					PlayerPlayAnimation( 'berserk_attack_whirlwind_02_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_berserk_attack += 1;
				}
				else if (combo_counter_imlerith_berserk_attack == 1)
				{
					
					PlayerPlayAnimation( 'berserk_attack_whirlwind_01_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack += 1;
				}
				else if (combo_counter_imlerith_special_attack_alt == 2)
				{
					
					PlayerPlayAnimation( 'attack_tornado_01_unused_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack_alt += 1;
				}
				else if (combo_counter_imlerith_special_attack_alt == 3)
				{
					
					PlayerPlayAnimation( 'berserk_start_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack_alt += 1;
				}

				else if (combo_counter_imlerith_special_attack_alt == 4)
				{
					
					PlayerPlayAnimation( 'berserk_attack_stuck_imlerith_ACS');
						
					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack_alt += 1;
				}

				else if (combo_counter_imlerith_special_attack_alt == 5)
				{
					
					PlayerPlayAnimation( 'berserk_stuck_attack_forward_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack_alt += 1;
				}

				else if (combo_counter_imlerith_special_attack_alt == 6)
				{
					
					PlayerPlayAnimation( 'berserk_attack_single_01_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack_alt += 1;
				}

				else if (combo_counter_imlerith_special_attack_alt == 7)
				{
					
					PlayerPlayAnimation( 'berserk_attack_single_02_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack_alt -= combo_counter_imlerith_special_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				imlerith_berserk_attack_index_3 = RandDifferent(this.previous_imlerith_berserk_attack_index_3 , 8);

				switch (imlerith_berserk_attack_index_3) 
				{	
					/*
					case 10:
					PlayerPlayAnimation( 'berserk_stuck_attack_right_imlerith_ACS');
					break;
						
					case 9:
					PlayerPlayAnimation( 'berserk_stuck_attack_left_imlerith_ACS');
					break;
					*/

					case 7:
					
					PlayerPlayAnimation( 'berserk_stuck_attack_forward_imlerith_ACS');
					break;
						
					case 6:
					
					PlayerPlayAnimation( 'berserk_start_imlerith_ACS');
					break;
						
					case 5:
					
					PlayerPlayAnimation( 'berserk_attack_stuck_imlerith_ACS');
					break;
					
					case 4:
					
					PlayerPlayAnimation( 'berserk_attack_single_02_imlerith_ACS');
					break;
					
					case 3:
					
					PlayerPlayAnimation( 'berserk_attack_single_01_imlerith_ACS');				
					break;	
						
					case 2:
					
					PlayerPlayAnimation( 'attack_tornado_01_unused_imlerith_ACS');
					break;
						
					case 1:
					
					PlayerPlayAnimation( 'berserk_attack_whirlwind_02_imlerith_ACS');
					break;
						
					default:
					
					PlayerPlayAnimation( 'berserk_attack_whirlwind_01_imlerith_ACS');
					break;	
				}

				this.previous_imlerith_berserk_attack_index_3 = imlerith_berserk_attack_index_3;
			}
		}
	}
	
	function geraltRandomImlerithSpecialAttack()
	{
		//yrden_sword_effect_around();;

		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_special_attack == 0)
				{
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_combo_01_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_special_attack += 1;
				}
				else if (combo_counter_imlerith_special_attack == 1)
				{
					
					PlayerPlayAnimation( 'berserk_attack_combo_2_attacks_03_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack += 1;
				}
				else if (combo_counter_imlerith_special_attack == 2)
				{
					
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_01_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack += 1;
				}
				else if (combo_counter_imlerith_special_attack == 3)
				{
					
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_02_imlerith_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack += 1;
				}

				else if (combo_counter_imlerith_special_attack == 4)
				{
					
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_03_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack += 1;
				}

				else if (combo_counter_imlerith_special_attack == 5)
				{
					
					PlayerPlayAnimation( 'berserk_attack_combo_4_attacks_01_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack -= combo_counter_imlerith_special_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				imlerith_combo_attack_index_1 = RandDifferent(this.previous_imlerith_combo_attack_index_1 , 6);

				switch (imlerith_combo_attack_index_1) 
				{	
					/*
					case 6:
					PlayerPlayAnimation( 'berserk_attack_combo_7_attacks_01_unused_imlerith_ACS');
					break;
					*/

					case 5:
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_combo_01_imlerith_ACS');
					break;
					
					case 4:
					
					PlayerPlayAnimation( 'berserk_attack_combo_4_attacks_01_imlerith_ACS');
					break;
					
					case 3:
					
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_03_imlerith_ACS');
					break;
					
					case 2:
					
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_02_imlerith_ACS');
					break;
					
					case 1:
					
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_01_imlerith_ACS');
					break;

					default:
					
					PlayerPlayAnimation( 'berserk_attack_combo_2_attacks_03_imlerith_ACS');
					break;
					
					/*
					default:
					PlayerPlayAnimation( 'berserk_attack_combo_2_attacks_02_imlerith_ACS');
					break;
					*/
				}	
				
				this.previous_imlerith_combo_attack_index_1 = imlerith_combo_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_special_attack == 0)
				{
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_combo_01_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_special_attack += 1;
				}
				else if (combo_counter_imlerith_special_attack == 1)
				{
					
					PlayerPlayAnimation( 'berserk_attack_combo_2_attacks_03_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack += 1;
				}
				else if (combo_counter_imlerith_special_attack == 2)
				{
					
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_01_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack += 1;
				}
				else if (combo_counter_imlerith_special_attack == 3)
				{
					
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_02_imlerith_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack += 1;
				}

				else if (combo_counter_imlerith_special_attack == 4)
				{
					
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_03_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack += 1;
				}

				else if (combo_counter_imlerith_special_attack == 5)
				{
					
					PlayerPlayAnimation( 'berserk_attack_combo_4_attacks_01_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack -= combo_counter_imlerith_special_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				imlerith_combo_attack_index_2 = RandDifferent(this.previous_imlerith_combo_attack_index_2 , 6);

				switch (imlerith_combo_attack_index_2) 
				{	
					/*
					case 6:
					PlayerPlayAnimation( 'berserk_attack_combo_7_attacks_01_unused_imlerith_ACS');
					break;
					*/

					case 5:
					
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_combo_01_imlerith_ACS');
					break;
					
					case 4:
					
					PlayerPlayAnimation( 'berserk_attack_combo_4_attacks_01_imlerith_ACS');
					break;
					
					case 3:
					
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_03_imlerith_ACS');
					break;
					
					case 2:
					
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_02_imlerith_ACS');
					break;
					
					case 1:
					
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_01_imlerith_ACS');
					break;

					default:
					
					PlayerPlayAnimation( 'berserk_attack_combo_2_attacks_03_imlerith_ACS');
					break;
					
					/*
					default:
					PlayerPlayAnimation( 'berserk_attack_combo_2_attacks_02_imlerith_ACS');
					break;
					*/
				}	
				
				this.previous_imlerith_combo_attack_index_2 = imlerith_combo_attack_index_2;
			}
		}
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Spear Attack Stuff

	function SetSpearWhirlProcess( flag : bool )
	{
		ACS_SpearWhirlProcess = flag;
	}

	timer function SpearAttackRepeatWhirl(deltaTime : float , id : int)
	{
		geraltRandomSpearAttackAlt();

		if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
					
		if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	

		RemoveTimer('ACS_ResetAnimation');				

		RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

		if (!ACS_SpearWhirlProcess)
		{
			PlayerPlayAnimation( 'man_mage_melee_attack_04_ACS');

			SetSpearWhirlProcess(true);
		}
		else
		{
			PlayerPlayAnimation( 'man_mage_melee_attack_03_ACS');

			SetSpearWhirlProcess(false);
		}

		ACS_StaminaDrain(3);
	}
	
	function geraltRandomSpearAttack() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_spear_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_attack += 1;
				}
				else if (combo_counter_spear_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}
				else if (combo_counter_spear_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_03_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}
				else if (combo_counter_spear_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}

				else if (combo_counter_spear_attack == 4)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}

				else if (combo_counter_spear_attack == 5)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}

				else if (combo_counter_spear_attack == 6)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}

				else if (combo_counter_spear_attack == 7)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}

				else if (combo_counter_spear_attack == 8)
				{
					PlayerPlayAnimation( 'man_mage_melee_attack_01_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}

				else if (combo_counter_spear_attack == 9)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}

				else if (combo_counter_spear_attack == 10)
				{
					PlayerPlayAnimation( 'man_mage_melee_attack_02_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}

				else if (combo_counter_spear_attack == 11)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_05_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_attack -= combo_counter_spear_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 2.5*2.5 ) 
				{	
					spear_attack_index_1 = RandDifferent(this.previous_spear_attack_index_1 , 5);

					switch (spear_attack_index_1) 
					{	
						case 4:
						PlayerPlayAnimation( 'man_mage_melee_attack_02_ACS');
						break;
						
						case 3:
						PlayerPlayAnimation( 'man_mage_melee_attack_01_ACS');
						break;
					
						case 2:
						PlayerPlayAnimation( 'man_npc_2hhalberd_attack_05_rp_ACS');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_npc_2hhalberd_attack_02_rp_ACS');
						break;

						default:
						PlayerPlayAnimation( 'man_npc_2hhalberd_attack_01_rp_ACS');
						break;
					}
			
					this.previous_spear_attack_index_1 = spear_attack_index_1;
				}
				else
				{
					spear_attack_index_2 = RandDifferent(this.previous_spear_attack_index_2 , 7);

					switch (spear_attack_index_2) 
					{						
						case 6:
						PlayerPlayAnimation( 'man_npc_2hspear_attack_special_04_rp_ACS');
						break;
						
						case 5:
						PlayerPlayAnimation( 'man_npc_2hspear_attack_special_03_rp_ACS');
						break;
						
						case 4:
						PlayerPlayAnimation( 'man_npc_2hspear_attack_special_02_rp_ACS');
						break;
						
						case 3:
						PlayerPlayAnimation( 'man_npc_2hspear_attack_special_01_rp_ACS');
						break;
					
						case 2:
						PlayerPlayAnimation( 'man_npc_2hspear_attack_03_rp_ACS');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_npc_2hspear_attack_02_rp_ACS');
						break;

						default:
						PlayerPlayAnimation( 'man_npc_2hspear_attack_01_rp_ACS');
						break;
					}
					
					this.previous_spear_attack_index_2 = spear_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_spear_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_attack += 1;
				}
				else if (combo_counter_spear_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}
				else if (combo_counter_spear_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_03_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}
				else if (combo_counter_spear_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}

				else if (combo_counter_spear_attack == 4)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}

				else if (combo_counter_spear_attack == 5)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}

				else if (combo_counter_spear_attack == 6)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}

				else if (combo_counter_spear_attack == 7)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}

				else if (combo_counter_spear_attack == 8)
				{
					PlayerPlayAnimation( 'man_mage_melee_attack_01_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}

				else if (combo_counter_spear_attack == 9)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}

				else if (combo_counter_spear_attack == 10)
				{
					PlayerPlayAnimation( 'man_mage_melee_attack_02_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}

				else if (combo_counter_spear_attack == 11)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_05_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_attack -= combo_counter_spear_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				spear_attack_index_3 = RandDifferent(this.previous_spear_attack_index_3 , 12);

				switch (spear_attack_index_3) 
				{	
					case 11:
					PlayerPlayAnimation( 'man_mage_melee_attack_02_ACS');
					break;
						
					case 10:
					PlayerPlayAnimation( 'man_mage_melee_attack_01_ACS');
					break;
						
					case 9:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_04_rp_ACS');
					break;
						
					case 8:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_03_rp_ACS');
					break;
						
					case 7:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_02_rp_ACS');
					break;
						
					case 6:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_01_rp_ACS');
					break;
					
					case 5:
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_05_rp_ACS');
					break;
					
					case 4:
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_02_rp_ACS');
					break;

					case 3:
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_01_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_03_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_02_rp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_01_rp_ACS');
					break;
				}
				
				this.previous_spear_attack_index_3 = spear_attack_index_3;
			}
		}	
	}
	
	function geraltRandomSpearAttackAlt() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_spear_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_mage_lightning_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_attack_alt += 1;
				}
				else if (combo_counter_spear_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_mage_lightning_02_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack_alt += 1;
				}
				else if (combo_counter_spear_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_special_01_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_attack_alt += 1;
				}
				else if (combo_counter_spear_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_mage_fireball_02_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack_alt += 1;
				}

				else if (combo_counter_spear_attack_alt == 4)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_03_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_attack_alt += 1;
				}

				else if (combo_counter_spear_attack_alt == 5)
				{
					PlayerPlayAnimation( 'man_mage_force_blast_03_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack_alt += 1;
				}

				else if (combo_counter_spear_attack_alt == 6)
				{
					PlayerPlayAnimation( 'man_mage_melee_attack_04_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack_alt += 1;
				}

				else if (combo_counter_spear_attack_alt == 7)
				{
					PlayerPlayAnimation( 'man_mage_melee_attack_03_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack_alt -= combo_counter_spear_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 2.5*2.5 ) 
				{	
					spear_attack_alt_index_1 = RandDifferent(this.previous_spear_attack_alt_index_1 , 7);

					switch (spear_attack_alt_index_1) 
					{	
						case 6:
						PlayerPlayAnimation( 'man_mage_lightning_01_ACS');
						break;	
						
						case 5:
						PlayerPlayAnimation( 'man_mage_lightning_02_ACS');
						break;	
						
						case 4:
						PlayerPlayAnimation( 'man_mage_fireball_02_ACS');
						break;	
						
						case 3:
						PlayerPlayAnimation( 'man_mage_force_blast_03_ACS');
						break;
						
						case 2:
						PlayerPlayAnimation( 'man_npc_2hhalberd_attack_04_rp_ACS');
						break;
					
						case 1:
						PlayerPlayAnimation( 'man_npc_2hhalberd_attack_03_rp_ACS');
						break;
						
						default:
						PlayerPlayAnimation( 'man_npc_2hhalberd_attack_special_01_rp_ACS');
						break;
					}
			
					this.previous_spear_attack_alt_index_1 = spear_attack_alt_index_1;
				}
				else
				{
					spear_attack_alt_index_2 = RandDifferent(this.previous_spear_attack_alt_index_2 , 2);

					switch (spear_attack_alt_index_2) 
					{
						case 1:
						PlayerPlayAnimation( 'man_mage_melee_attack_04_ACS');
						break;		
						
						default:
						PlayerPlayAnimation( 'man_mage_melee_attack_03_ACS');
						break;					
					}
					
					this.previous_spear_attack_alt_index_2 = spear_attack_alt_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_spear_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_mage_lightning_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_attack_alt += 1;
				}
				else if (combo_counter_spear_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_mage_lightning_02_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack_alt += 1;
				}
				else if (combo_counter_spear_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_special_01_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_attack_alt += 1;
				}
				else if (combo_counter_spear_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_mage_fireball_02_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack_alt += 1;
				}

				else if (combo_counter_spear_attack_alt == 4)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_03_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_attack_alt += 1;
				}

				else if (combo_counter_spear_attack_alt == 5)
				{
					PlayerPlayAnimation( 'man_mage_force_blast_03_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack_alt += 1;
				}

				else if (combo_counter_spear_attack_alt == 6)
				{
					PlayerPlayAnimation( 'man_mage_melee_attack_04_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack_alt += 1;
				}

				else if (combo_counter_spear_attack_alt == 7)
				{
					PlayerPlayAnimation( 'man_mage_melee_attack_03_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack_alt -= combo_counter_spear_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				spear_attack_alt_index_3 = RandDifferent(this.previous_spear_attack_alt_index_3 , 9);

				switch (spear_attack_alt_index_3) 
				{	
					case 8:
					PlayerPlayAnimation( 'man_mage_force_blast_03_ACS');
					break;
						
					case 7:
					PlayerPlayAnimation( 'man_mage_lightning_01_ACS');
					break;	
						
					case 6:
					PlayerPlayAnimation( 'man_mage_lightning_02_ACS');
					break;	
						
					case 5:
					PlayerPlayAnimation( 'man_mage_fireball_02_ACS');
					break;	
						
					case 4:
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_04_rp_ACS');
					break;
					
					case 3:
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_03_rp_ACS');
					break;
						
					case 2:
					PlayerPlayAnimation( 'man_mage_melee_attack_04_ACS');
					break;
						
					case 1:
					PlayerPlayAnimation( 'man_mage_melee_attack_03_ACS');
					break;
						
					default:
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_special_01_rp_ACS');
					break;
				}
				
				this.previous_spear_attack_alt_index_3 = spear_attack_alt_index_3;
			}
		}		
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function geraltRandomSpearLightAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_spear_light_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_mage_melee_attack_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_light_attack_alt += 1;
				}
				else if (combo_counter_spear_light_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_mage_melee_attack_02_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_light_attack_alt += 1;
				}
				else if (combo_counter_spear_light_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_mage_fireball_02_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_light_attack_alt += 1;
				}
				else if (combo_counter_spear_light_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_light_attack_alt -= combo_counter_spear_light_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3.5 * 3.5 ) 
				{	
					spear_attack_index_1 = RandDifferent(this.previous_spear_attack_index_1 , 2);

					switch (spear_attack_index_1) 
					{	
						case 1:
						PlayerPlayAnimation( 'man_mage_fireball_02_ACS');
						break;

						default:
						PlayerPlayAnimation( 'man_npc_2hspear_attack_01_rp_ACS');
						break;
					}
			
					this.previous_spear_attack_index_1 = spear_attack_index_1;
				}
				else
				{
					spear_attack_index_2 = RandDifferent(this.previous_spear_attack_index_2 , 2);

					switch (spear_attack_index_2) 
					{						
						case 1:
						PlayerPlayAnimation( 'man_mage_melee_attack_02_ACS');
						break;

						default:
						PlayerPlayAnimation( 'man_mage_melee_attack_01_ACS');
						break;
					}
					
					this.previous_spear_attack_index_2 = spear_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_spear_light_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_mage_melee_attack_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_light_attack_alt += 1;
				}
				else if (combo_counter_spear_light_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_mage_melee_attack_02_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_light_attack_alt += 1;
				}
				else if (combo_counter_spear_light_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_mage_fireball_02_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_light_attack_alt += 1;
				}
				else if (combo_counter_spear_light_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_light_attack_alt -= combo_counter_spear_light_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				spear_attack_index_3 = RandDifferent(this.previous_spear_attack_index_3 , 4);

				switch (spear_attack_index_3) 
				{	
					case 3:
					PlayerPlayAnimation( 'man_mage_fireball_02_ACS');
					break;
						
					case 2:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_01_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_mage_melee_attack_02_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_mage_melee_attack_01_ACS');
					break;
				}
				
				this.previous_spear_attack_index_3 = spear_attack_index_3;
			}
		}	
	}
	
	function geraltRandomSpearLightAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_spear_light_attack == 0)
				{
					PlayerPlayAnimation( 'man_mage_lightning_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_light_attack += 1;
				}
				else if (combo_counter_spear_light_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_light_attack += 1;
				}

				else if (combo_counter_spear_light_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_02_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_light_attack += 1;
				}

				else if (combo_counter_spear_light_attack == 3)
				{
					PlayerPlayAnimation( 'man_mage_force_blast_03_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_light_attack += 1;
				}

				else if (combo_counter_spear_light_attack == 4)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_05_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_light_attack -= combo_counter_spear_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.75 * 1.75 ) 
				{		
					PlayerPlayAnimation( 'man_mage_force_blast_03_ACS');
				}
				else
				{
					spear_attack_index_2 = RandDifferent(this.previous_spear_attack_index_2 , 4);

					switch (spear_attack_index_2) 
					{	
						case 3:
						PlayerPlayAnimation( 'man_mage_lightning_01_ACS');
						break;

						case 2:
						PlayerPlayAnimation( 'man_npc_2hhalberd_attack_05_rp_ACS');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_npc_2hhalberd_attack_02_rp_ACS');
						break;

						default:
						PlayerPlayAnimation( 'man_npc_2hhalberd_attack_01_rp_ACS');
						break;
					}
					
					this.previous_spear_attack_index_2 = spear_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_spear_light_attack == 0)
				{
					PlayerPlayAnimation( 'man_mage_lightning_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_light_attack += 1;
				}
				else if (combo_counter_spear_light_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_light_attack += 1;
				}

				else if (combo_counter_spear_light_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_02_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_light_attack += 1;
				}

				else if (combo_counter_spear_light_attack == 3)
				{
					PlayerPlayAnimation( 'man_mage_force_blast_03_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_light_attack += 1;
				}

				else if (combo_counter_spear_light_attack == 4)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_05_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_light_attack -= combo_counter_spear_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				spear_attack_index_3 = RandDifferent(this.previous_spear_attack_index_3 , 5);

				switch (spear_attack_index_3) 
				{	
					case 4:
					PlayerPlayAnimation( 'man_mage_lightning_01_ACS');
					break;
						
					case 3:
					PlayerPlayAnimation( 'man_mage_force_blast_03_ACS');
					break;
						
					case 2:
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_05_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_02_rp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_01_rp_ACS');
					break;
				}
				
				this.previous_spear_attack_index_3 = spear_attack_index_3;
			}
		}	
	}
	
	function geraltRandomSpearHeavyAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_spear_heavy_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_heavy_attack_alt += 1;
				}
				else if (combo_counter_spear_heavy_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_heavy_attack_alt += 1;
				}
				else if (combo_counter_spear_heavy_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_02_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_heavy_attack_alt -= combo_counter_spear_heavy_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3.5 * 3.5 ) 
				{	
					PlayerPlayAnimation( 'man_npc_2hspear_attack_02_rp_ACS');
				}
				else
				{
					spear_attack_index_2 = RandDifferent(this.previous_spear_attack_index_2 , 2);

					switch (spear_attack_index_2) 
					{						
						case 1:
						PlayerPlayAnimation( 'man_npc_2hspear_attack_special_04_rp_ACS');
						break;

						default:
						PlayerPlayAnimation( 'man_npc_2hspear_attack_special_01_rp_ACS');
						break;
					}
					
					this.previous_spear_attack_index_2 = spear_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_spear_heavy_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_heavy_attack_alt += 1;
				}
				else if (combo_counter_spear_heavy_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_heavy_attack_alt += 1;
				}
				else if (combo_counter_spear_heavy_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_02_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_heavy_attack_alt -= combo_counter_spear_heavy_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				spear_attack_index_3 = RandDifferent(this.previous_spear_attack_index_3 , 3);

				switch (spear_attack_index_3) 
				{	
					case 2:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_02_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_04_rp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_01_rp_ACS');
					break;
				}
				
				this.previous_spear_attack_index_3 = spear_attack_index_3;
			}
		}
	}
	
	function geraltRandomSpearHeavyAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_spear_heavy_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_02_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_heavy_attack += 1;
				}
				else if (combo_counter_spear_heavy_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_heavy_attack += 1;
				}
				else if (combo_counter_spear_heavy_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_03_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_heavy_attack -= combo_counter_spear_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3.5 * 3.5 ) 
				{	
					PlayerPlayAnimation( 'man_npc_2hspear_attack_03_rp_ACS');
				}
				else
				{
					spear_attack_index_2 = RandDifferent(this.previous_spear_attack_index_2 , 2);

					switch (spear_attack_index_2) 
					{						
						case 1:
						PlayerPlayAnimation( 'man_npc_2hspear_attack_special_03_rp_ACS');
						break;

						default:
						PlayerPlayAnimation( 'man_npc_2hspear_attack_special_02_rp_ACS');
						break;
					}
					
					this.previous_spear_attack_index_2 = spear_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_spear_heavy_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_02_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_heavy_attack += 1;
				}
				else if (combo_counter_spear_heavy_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_heavy_attack += 1;
				}
				else if (combo_counter_spear_heavy_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_03_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_heavy_attack -= combo_counter_spear_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				spear_attack_index_3 = RandDifferent(this.previous_spear_attack_index_3 , 3);

				switch (spear_attack_index_3) 
				{	
					case 2:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_03_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_03_rp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_02_rp_ACS');
					break;
				}
				
				this.previous_spear_attack_index_3 = spear_attack_index_3;
			}
		}	
	}
	
	function geraltRandomSpearSpecialAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			AddTimer('SpearAttackRepeatWhirl', 1.25, true);

			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_spear_special_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_mage_melee_attack_04_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_special_attack_alt += 1;
				}
				else if (combo_counter_spear_special_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_mage_lightning_02_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_special_attack_alt += 1;
				}
				else if (combo_counter_spear_special_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_mage_melee_attack_03_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_special_attack_alt -= combo_counter_spear_special_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 2.5*2.5 ) 
				{	
					PlayerPlayAnimation( 'man_mage_lightning_02_ACS');
				}
				else
				{
					spear_attack_alt_index_2 = RandDifferent(this.previous_spear_attack_alt_index_2 , 2);

					switch (spear_attack_alt_index_2) 
					{
						case 1:
						PlayerPlayAnimation( 'man_mage_melee_attack_04_ACS');
						break;		
						
						default:
						PlayerPlayAnimation( 'man_mage_melee_attack_03_ACS');
						break;					
					}
					
					this.previous_spear_attack_alt_index_2 = spear_attack_alt_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			AddTimer('SpearAttackRepeatWhirl', 1.25, true);
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_spear_special_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_mage_melee_attack_04_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_special_attack_alt += 1;
				}
				else if (combo_counter_spear_special_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_mage_lightning_02_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_special_attack_alt += 1;
				}
				else if (combo_counter_spear_special_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_mage_melee_attack_03_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_special_attack_alt -= combo_counter_spear_special_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				spear_attack_alt_index_3 = RandDifferent(this.previous_spear_attack_alt_index_3 , 3);

				switch (spear_attack_alt_index_3) 
				{		
					case 2:
					PlayerPlayAnimation( 'man_mage_lightning_02_ACS');
					break;
						
					case 1:
					PlayerPlayAnimation( 'man_mage_melee_attack_04_ACS');
					break;
						
					default:
					PlayerPlayAnimation( 'man_mage_melee_attack_03_ACS');
					break;
				}
				
				this.previous_spear_attack_alt_index_3 = spear_attack_alt_index_3;
			}
		}
	}
	
	function geraltRandomSpearSpecialAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_spear_special_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_03_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_special_attack += 1;
				}
				else if (combo_counter_spear_special_attack == 1)
				{
					PlayerPlayAnimation( 'man_mage_force_blast_03_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_special_attack += 1;
				}

				else if (combo_counter_spear_special_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_special_attack += 1;
				}

				else if (combo_counter_spear_special_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_special_01_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_special_attack -= combo_counter_spear_special_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 2.5*2.5 ) 
				{	
					spear_attack_index_1 = RandDifferent(this.previous_spear_attack_index_1 , 5);

					switch (spear_attack_index_1) 
					{	
						case 2:
						PlayerPlayAnimation( 'man_mage_force_blast_03_ACS');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_npc_2hhalberd_attack_04_rp_ACS');
						break;

						default:
						PlayerPlayAnimation( 'man_npc_2hhalberd_attack_03_rp_ACS');
						break;
					}
			
					this.previous_spear_attack_index_1 = spear_attack_index_1;
				}
				else
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_special_01_rp_ACS');
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_spear_special_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_03_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_special_attack += 1;
				}
				else if (combo_counter_spear_special_attack == 1)
				{
					PlayerPlayAnimation( 'man_mage_force_blast_03_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_special_attack += 1;
				}

				else if (combo_counter_spear_special_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_special_attack += 1;
				}

				else if (combo_counter_spear_special_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_special_01_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_special_attack -= combo_counter_spear_special_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				spear_attack_alt_index_3 = RandDifferent(this.previous_spear_attack_alt_index_3 , 4);

				switch (spear_attack_alt_index_3) 
				{	
					case 3:
					PlayerPlayAnimation( 'man_mage_force_blast_03_ACS');
					break;
						
					case 2:
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_04_rp_ACS');
					break;
						
					case 1:
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_03_rp_ACS');
					break;
						
					default:
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_special_01_rp_ACS');
					break;
				}
				
				this.previous_spear_attack_alt_index_3 = spear_attack_alt_index_3;
			}
		}	
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Mage Attack Stuff

	private var mage_light_attack_index_1																									: int;
	private var previous_mage_light_attack_index_1																							: int;

	private var mage_heavy_attack_index_1																									: int;
	private var previous_mage_heavy_attack_index_1																							: int;

	private var mage_special_attack_index_1																									: int;
	private var previous_mage_special_attack_index_1																						: int;

	function CreateMageAttack( mage_attack_name : name, pos : Vector )
	{
		var ent            : W3ACSMageAttacks;

		ent = (W3ACSMageAttacks)theGame.CreateEntity( 
			
		(CEntityTemplate)LoadResource( "dlc\dlc_acs\data\entities\other\acs_mage_attacks.w2ent", true ), 
		
		pos, thePlayer.GetWorldRotation() );

		ent.AddTag( mage_attack_name );
	}

	timer function MageAttackCone(deltaTime : float , id : int)
	{
		var pos : Vector;

		pos = thePlayer.GetWorldPosition() + thePlayer.GetHeadingVector() + thePlayer.GetWorldForward() * 1;
		pos.Z += 1;

		CreateMageAttack( 'ACS_Mage_Attack_Cone', pos );
	}

	timer function MageAttackCoil(deltaTime : float , id : int)
	{
		var pos : Vector;

		pos = thePlayer.GetWorldPosition() + thePlayer.GetHeadingVector() + thePlayer.GetWorldForward() * 2;
		pos.Z += 1.25;

		CreateMageAttack( 'ACS_Mage_Attack_Coil', pos );
	}

	timer function MageAttackCoilWithCone(deltaTime : float , id : int)
	{
		var pos : Vector;

		pos = thePlayer.GetWorldPosition() + thePlayer.GetHeadingVector() + thePlayer.GetWorldForward() * 2;
		pos.Z += 1.25;

		CreateMageAttack( 'ACS_Mage_Attack_Coil_With_Cone', pos );
	}

	timer function MageAttackBlast1(deltaTime : float , id : int)
	{
		var pos : Vector;

		if (thePlayer.IsInCombat())
		{
			if (thePlayer.GetTarget())
			{
				pos = (thePlayer.GetTarget()).GetWorldPosition();

				pos.Z += 1;
			}
			else
			{
				pos = thePlayer.GetWorldPosition() + thePlayer.GetHeadingVector() + thePlayer.GetWorldForward() * 7.5;
				pos.Z += 1;
			}
		}
		else
		{
			pos = thePlayer.GetWorldPosition() + thePlayer.GetHeadingVector() + thePlayer.GetWorldForward() * 7.5;
			pos.Z += 1;
		}

		CreateMageAttack( 'ACS_Mage_Attack_Blast_1', pos );
	}

	timer function MageAttackBlast2(deltaTime : float , id : int)
	{
		var pos : Vector;

		if (thePlayer.IsInCombat())
		{
			if (thePlayer.GetTarget())
			{
				pos = (thePlayer.GetTarget()).GetWorldPosition();

				pos.Z += 1;
			}
			else
			{
				pos = thePlayer.GetWorldPosition() + thePlayer.GetHeadingVector() + thePlayer.GetWorldForward() * 7.5;
				pos.Z += 1;
			}
		}
		else
		{
			pos = thePlayer.GetWorldPosition() + thePlayer.GetHeadingVector() + thePlayer.GetWorldForward() * 7.5;
			pos.Z += 1;
		}

		CreateMageAttack( 'ACS_Mage_Attack_Blast_2', pos );
	}

	timer function MageAttackBlast3(deltaTime : float , id : int)
	{
		var pos : Vector;

		if (thePlayer.IsInCombat())
		{
			if (thePlayer.GetTarget())
			{
				pos = (thePlayer.GetTarget()).GetWorldPosition();

				pos.Z += 1;
			}
			else
			{
				pos = thePlayer.GetWorldPosition() + thePlayer.GetHeadingVector() + thePlayer.GetWorldForward() * 7.5;
				pos.Z += 1;
			}
		}
		else
		{
			pos = thePlayer.GetWorldPosition() + thePlayer.GetHeadingVector() + thePlayer.GetWorldForward() * 7.5;
			pos.Z += 1;
		}

		CreateMageAttack( 'ACS_Mage_Attack_Blast_3', pos );
	}

	timer function MageAttackGustLeft(deltaTime : float , id : int)
	{
		var pos : Vector;

		if (thePlayer.IsInCombat())
		{
			if (thePlayer.GetTarget())
			{
				pos = (thePlayer.GetTarget()).GetWorldPosition();

				pos.Z += 0.5;
			}
			else
			{
				pos = thePlayer.GetWorldPosition() + thePlayer.GetHeadingVector() + thePlayer.GetWorldForward() * 7.5;
				pos.Z += 0.5;
			}
		}
		else
		{
			pos = thePlayer.GetWorldPosition() + thePlayer.GetHeadingVector() + thePlayer.GetWorldForward() * 7.5;
			pos.Z += 0.5;
		}

		CreateMageAttack( 'ACS_Mage_Attack_Gust_Left', pos );
	}

	timer function MageAttackGustRight(deltaTime : float , id : int)
	{
		var pos : Vector;

		if (thePlayer.IsInCombat())
		{
			if (thePlayer.GetTarget())
			{
				pos = (thePlayer.GetTarget()).GetWorldPosition();

				pos.Z += 0.5;
			}
			else
			{
				pos = thePlayer.GetWorldPosition() + thePlayer.GetHeadingVector() + thePlayer.GetWorldForward() * 7.5;
				pos.Z += 0.5;
			}
		}
		else
		{
			pos = thePlayer.GetWorldPosition() + thePlayer.GetHeadingVector() + thePlayer.GetWorldForward() * 7.5;
			pos.Z += 0.5;
		}

		CreateMageAttack( 'ACS_Mage_Attack_Gust_Right', pos );
	}

	timer function MageAttackGustUp(deltaTime : float , id : int)
	{
		var pos : Vector;

		if (thePlayer.IsInCombat())
		{
			if (thePlayer.GetTarget())
			{
				pos = (thePlayer.GetTarget()).GetWorldPosition();

				pos.Z += 0.5;
			}
			else
			{
				pos = thePlayer.GetWorldPosition() + thePlayer.GetHeadingVector() + thePlayer.GetWorldForward() * 7.5;
				pos.Z += 0.5;
			}
		}
		else
		{
			pos = thePlayer.GetWorldPosition() + thePlayer.GetHeadingVector() + thePlayer.GetWorldForward() * 7.5;
			pos.Z += 0.5;
		}

		CreateMageAttack( 'ACS_Mage_Attack_Gust_Up', pos );
	}

	timer function MageAttackMegaGust(deltaTime : float , id : int)
	{
		var pos : Vector;

		if (thePlayer.IsInCombat())
		{
			if (thePlayer.GetTarget())
			{
				pos = (thePlayer.GetTarget()).GetWorldPosition();

				pos.Z += 0.5;
			}
			else
			{
				pos = thePlayer.GetWorldPosition() + thePlayer.GetHeadingVector() + thePlayer.GetWorldForward() * 7.5;
				pos.Z += 0.5;
			}
		}
		else
		{
			pos = thePlayer.GetWorldPosition() + thePlayer.GetHeadingVector() + thePlayer.GetWorldForward() * 7.5;
			pos.Z += 0.5;
		}

		CreateMageAttack( 'ACS_Mage_Attack_Mega_Gust', pos );
	}

	timer function MageAttackQuicksand(deltaTime : float , id : int)
	{
		var pos : Vector;

		if (thePlayer.IsInCombat())
		{
			if (thePlayer.GetTarget())
			{
				pos = (thePlayer.GetTarget()).GetWorldPosition();

				pos.Z += 0.125;
			}
			else
			{
				pos = thePlayer.GetWorldPosition() + thePlayer.GetHeadingVector() + thePlayer.GetWorldForward() * 10;
				pos.Z += 0.125;
			}
		}
		else
		{
			pos = thePlayer.GetWorldPosition() + thePlayer.GetHeadingVector() + thePlayer.GetWorldForward() * 10;
			pos.Z += 0.125;
		}

		CreateMageAttack( 'ACS_Mage_Attack_Quicksand', pos );
	}

	timer function MageAttackSandCage(deltaTime : float , id : int)
	{
		var pos : Vector;

		if (thePlayer.IsInCombat())
		{
			if (thePlayer.GetTarget())
			{
				pos = (thePlayer.GetTarget()).GetWorldPosition();

				pos.Z += 0.125;
			}
			else
			{
				pos = thePlayer.GetWorldPosition() + thePlayer.GetHeadingVector() + thePlayer.GetWorldForward() * 10;
				pos.Z += 0.125;
			}
		}
		else
		{
			pos = thePlayer.GetWorldPosition() + thePlayer.GetHeadingVector() + thePlayer.GetWorldForward() * 10;
			pos.Z += 0.125;
		}

		CreateMageAttack( 'ACS_Mage_Attack_SandCage', pos );
	}

	timer function MageAttackTornado(deltaTime : float , id : int)
	{
		var pos : Vector;

		if (thePlayer.IsInCombat())
		{
			if (thePlayer.GetTarget())
			{
				pos = (thePlayer.GetTarget()).GetWorldPosition();

				pos.Z += 0.125;
			}
			else
			{
				pos = thePlayer.GetWorldPosition() + thePlayer.GetHeadingVector() + thePlayer.GetWorldForward() * 10;
				pos.Z += 0.125;
			}
		}
		else
		{
			pos = thePlayer.GetWorldPosition() + thePlayer.GetHeadingVector() + thePlayer.GetWorldForward() * 10;
			pos.Z += 0.125;
		}

		CreateMageAttack( 'ACS_Mage_Attack_Tornado', pos );
	}

	function RemoveMageAttackTimers()
	{
		RemoveTimer('MageAttackCone');

		RemoveTimer('MageAttackCoil');

		RemoveTimer('MageAttackCoilWithCone');

		RemoveTimer('MageAttackBlast1');

		RemoveTimer('MageAttackBlast2');

		RemoveTimer('MageAttackBlast3');

		RemoveTimer('MageAttackGustLeft');

		RemoveTimer('MageAttackGustRight');

		RemoveTimer('MageAttackGustUp');

		RemoveTimer('MageAttackMegaGust');

		RemoveTimer('MageAttackQuicksand');

		RemoveTimer('MageAttackSandCage');

		RemoveTimer('MageAttackTornado');

	}

	function geraltMageLightAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_mage_light_attack == 0)
				{
					PlayerPlayAnimation( 'man_mage_lightning_01_ACS');

					AddTimer('MageAttackCoil', 0.5, false);

					combo_counter_damage -= combo_counter_damage;

					combo_counter_mage_light_attack += 1;
				}
				else if (combo_counter_mage_light_attack == 1)
				{
					PlayerPlayAnimation( 'man_mage_lightning_02_ACS');

					AddTimer('MageAttackCoil', 0.75, false);

					combo_counter_damage += 1;

					combo_counter_mage_light_attack += 1;
				}

				else if (combo_counter_mage_light_attack == 2)
				{
					PlayerPlayAnimation( 'man_mage_fireball_02_ACS');

					AddTimer('MageAttackCoilWithCone', 1.5, false);
					
					combo_counter_damage += 1;

					combo_counter_mage_light_attack += 1;
				}

				else if (combo_counter_mage_light_attack == 3)
				{
					PlayerPlayAnimation( 'man_mage_force_blast_01_ACS');

					AddTimer('MageAttackBlast1', 0.5, false);
					
					combo_counter_damage += 1;

					combo_counter_mage_light_attack += 1;
				}

				else if (combo_counter_mage_light_attack == 4)
				{
					PlayerPlayAnimation( 'man_mage_force_blast_02_ACS');

					AddTimer('MageAttackBlast2', 0.5, false);
					
					combo_counter_damage += 1;

					combo_counter_mage_light_attack += 1;
				}

				else if (combo_counter_mage_light_attack == 5)
				{
					PlayerPlayAnimation( 'man_mage_force_blast_03_ACS');

					AddTimer('MageAttackBlast3', 0.5, false);

					combo_counter_damage += 1;

					combo_counter_mage_light_attack -= combo_counter_mage_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				mage_light_attack_index_1 = RandDifferent(this.previous_mage_light_attack_index_1 , 6);

				switch (mage_light_attack_index_1) 
				{	
					case 5:
					PlayerPlayAnimation( 'man_mage_force_blast_03_ACS');
					AddTimer('MageAttackBlast3', 0.5, false);
					break;

					case 4:
					PlayerPlayAnimation( 'man_mage_force_blast_02_ACS');
					AddTimer('MageAttackBlast2', 0.5, false);
					break;

					case 3:
					PlayerPlayAnimation( 'man_mage_force_blast_01_ACS');
					AddTimer('MageAttackBlast1', 0.5, false);
					break;

					case 2:
					PlayerPlayAnimation( 'man_mage_fireball_02_ACS');
					AddTimer('MageAttackCoilWithCone', 1.5, false);
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_mage_lightning_02_ACS');
					AddTimer('MageAttackCoil', 0.75, false);
					break;

					default:
					PlayerPlayAnimation( 'man_mage_lightning_01_ACS');
					AddTimer('MageAttackCoil', 0.5, false);
					break;
				}
				
				this.previous_mage_light_attack_index_1 = mage_light_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_mage_light_attack == 0)
				{
					PlayerPlayAnimation( 'man_mage_lightning_01_ACS');

					AddTimer('MageAttackCoil', 0.5, false);

					combo_counter_damage -= combo_counter_damage;

					combo_counter_mage_light_attack += 1;
				}
				else if (combo_counter_mage_light_attack == 1)
				{
					PlayerPlayAnimation( 'man_mage_lightning_02_ACS');

					AddTimer('MageAttackCoil', 0.75, false);

					combo_counter_damage += 1;

					combo_counter_mage_light_attack += 1;
				}

				else if (combo_counter_mage_light_attack == 2)
				{
					PlayerPlayAnimation( 'man_mage_fireball_02_ACS');

					AddTimer('MageAttackCoilWithCone', 1.5, false);

					combo_counter_damage += 1;

					combo_counter_mage_light_attack += 1;
				}

				else if (combo_counter_mage_light_attack == 3)
				{
					PlayerPlayAnimation( 'man_mage_force_blast_01_ACS');

					AddTimer('MageAttackBlast1', 0.5, false);
					
					combo_counter_damage += 1;

					combo_counter_mage_light_attack += 1;
				}

				else if (combo_counter_mage_light_attack == 4)
				{
					PlayerPlayAnimation( 'man_mage_force_blast_02_ACS');

					AddTimer('MageAttackBlast2', 0.5, false);
					
					combo_counter_damage += 1;

					combo_counter_mage_light_attack += 1;
				}

				else if (combo_counter_mage_light_attack == 5)
				{
					PlayerPlayAnimation( 'man_mage_force_blast_03_ACS');

					AddTimer('MageAttackBlast3', 0.5, false);

					combo_counter_damage += 1;

					combo_counter_mage_light_attack -= combo_counter_mage_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				mage_light_attack_index_1 = RandDifferent(this.previous_mage_light_attack_index_1 , 6);

				switch (mage_light_attack_index_1) 
				{	
					case 5:
					PlayerPlayAnimation( 'man_mage_force_blast_03_ACS');
					AddTimer('MageAttackBlast3', 0.5, false);
					break;

					case 4:
					PlayerPlayAnimation( 'man_mage_force_blast_02_ACS');
					AddTimer('MageAttackBlast2', 0.5, false);
					break;

					case 3:
					PlayerPlayAnimation( 'man_mage_force_blast_01_ACS');
					AddTimer('MageAttackBlast1', 0.5, false);
					break;

					case 2:
					PlayerPlayAnimation( 'man_mage_fireball_02_ACS');
					AddTimer('MageAttackCoilWithCone', 1.5, false);
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_mage_lightning_02_ACS');
					AddTimer('MageAttackCoil', 0.75, false);
					break;

					default:
					PlayerPlayAnimation( 'man_mage_lightning_01_ACS');
					AddTimer('MageAttackCoil', 0.5, false);
					break;
				}
				
				this.previous_mage_light_attack_index_1 = mage_light_attack_index_1;
			}
		}	
	}

	function geraltMageHeavyAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_mage_heavy_attack == 0)
				{
					PlayerPlayAnimation( 'man_mage_wind_gust_03_ACS');

					AddTimer('MageAttackGustLeft', 0.0625, false);

					combo_counter_damage -= combo_counter_damage;

					combo_counter_mage_heavy_attack += 1;
				}
				else if (combo_counter_mage_heavy_attack == 1)
				{
					PlayerPlayAnimation( 'man_mage_wind_gust_02_ACS');

					AddTimer('MageAttackGustRight', 0.0625, false);

					combo_counter_damage += 1;

					combo_counter_mage_heavy_attack += 1;
				}

				else if (combo_counter_mage_heavy_attack == 2)
				{
					PlayerPlayAnimation( 'man_mage_wind_gust_01_ACS');

					AddTimer('MageAttackGustUp', 0.0625, false);
					
					combo_counter_damage += 1;

					combo_counter_mage_heavy_attack += 1;
				}

				else if (combo_counter_mage_heavy_attack == 3)
				{
					PlayerPlayAnimation( 'man_mage_fireball_01_ACS');

					AddTimer('MageAttackMegaGust', 0.0625, false);

					combo_counter_damage += 1;

					combo_counter_mage_heavy_attack -= combo_counter_mage_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				mage_heavy_attack_index_1 = RandDifferent(this.previous_mage_heavy_attack_index_1 , 4);

				switch (mage_heavy_attack_index_1) 
				{						
					case 3:
					PlayerPlayAnimation( 'man_mage_wind_gust_03_ACS');
					AddTimer('MageAttackGustLeft', 0.0625, false);
					break;

					case 2:
					PlayerPlayAnimation( 'man_mage_wind_gust_02_ACS');
					AddTimer('MageAttackGustRight', 0.0625, false);
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_mage_wind_gust_01_ACS');
					AddTimer('MageAttackGustUp', 0.0625, false);
					break;

					default:
					PlayerPlayAnimation( 'man_mage_fireball_01_ACS');
					AddTimer('MageAttackMegaGust', 0.0625, false);
					break;
				}
				
				this.previous_mage_heavy_attack_index_1 = mage_heavy_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_mage_heavy_attack == 0)
				{
					PlayerPlayAnimation( 'man_mage_wind_gust_03_ACS');

					AddTimer('MageAttackGustLeft', 0.0625, false);

					combo_counter_damage -= combo_counter_damage;

					combo_counter_mage_heavy_attack += 1;
				}
				else if (combo_counter_mage_heavy_attack == 1)
				{
					PlayerPlayAnimation( 'man_mage_wind_gust_02_ACS');

					AddTimer('MageAttackGustRight', 0.0625, false);

					combo_counter_damage += 1;

					combo_counter_mage_heavy_attack += 1;
				}

				else if (combo_counter_mage_heavy_attack == 2)
				{
					PlayerPlayAnimation( 'man_mage_wind_gust_01_ACS');

					AddTimer('MageAttackGustUp', 0.0625, false);
					
					combo_counter_damage += 1;

					combo_counter_mage_heavy_attack += 1;
				}

				else if (combo_counter_mage_heavy_attack == 3)
				{
					PlayerPlayAnimation( 'man_mage_fireball_01_ACS');

					AddTimer('MageAttackMegaGust', 0.0625, false);

					combo_counter_damage += 1;

					combo_counter_mage_heavy_attack -= combo_counter_mage_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				mage_heavy_attack_index_1 = RandDifferent(this.previous_mage_heavy_attack_index_1 , 4);

				switch (mage_heavy_attack_index_1) 
				{						
					case 3:
					PlayerPlayAnimation( 'man_mage_wind_gust_03_ACS');
					AddTimer('MageAttackGustLeft', 0.0625, false);
					break;

					case 2:
					PlayerPlayAnimation( 'man_mage_wind_gust_02_ACS');
					AddTimer('MageAttackGustRight', 0.0625, false);
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_mage_wind_gust_01_ACS');
					AddTimer('MageAttackGustUp', 0.0625, false);
					break;

					default:
					PlayerPlayAnimation( 'man_mage_fireball_01_ACS');
					AddTimer('MageAttackMegaGust', 0.0625, false);
					break;
				}
				
				this.previous_mage_heavy_attack_index_1 = mage_heavy_attack_index_1;
			}
		}	
	}

	function geraltMageSpecialAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
			&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
			{	
				PlayerPlayAnimation( 'man_mage_root_attack_01_ACS');

				AddTimer('MageAttackQuicksand', 0.0625, false);
			}
			else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
			&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
			{	
				PlayerPlayAnimation( 'man_mage_sand_cage_01_ACS');

				AddTimer('MageAttackSandCage', 0.0625, false);
			}
			else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
			{
				PlayerPlayAnimation( 'man_mage_tornado_01_ACS');

				AddTimer('MageAttackTornado', 0.0625, false);
			}

			thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ));
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
			&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
			{	
				PlayerPlayAnimation( 'man_mage_root_attack_01_ACS');

				AddTimer('MageAttackQuicksand', 0.0625, false);
			}
			else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
			&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
			{	
				PlayerPlayAnimation( 'man_mage_sand_cage_01_ACS');

				AddTimer('MageAttackSandCage', 0.0625, false);
			}
			else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
			{
				PlayerPlayAnimation( 'man_mage_tornado_01_ACS');

				AddTimer('MageAttackTornado', 0.0625, false);
			}

			thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ));
		}	
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Hammer Attack Stuff
	
	function geraltRandomHammerAttack() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_attack += 1;
				}
				else if (combo_counter_hammer_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_attack += 1;
				}
				else if (combo_counter_hammer_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_attack -= combo_counter_hammer_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 3);

				switch (hammer_attack_index_1) 
				{								
					case 2:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_lp_ACS');
					break;
				}	
				
				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_attack += 1;
				}
				else if (combo_counter_hammer_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_attack += 1;
				}
				else if (combo_counter_hammer_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_attack -= combo_counter_hammer_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 3);

				switch (hammer_attack_index_1) 
				{								
					case 2:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_lp_ACS');
					break;
				}	
				
				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}	
	}
	
	function geraltRandomHammerSpecialAttack() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_attack_alt += 1;
				}
				else if (combo_counter_hammer_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_attack_alt += 1;
				}
				else if (combo_counter_hammer_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_attack_alt -= combo_counter_hammer_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_alt_index_1 = RandDifferent(this.previous_hammer_attack_alt_index_1 , 3);

				switch (hammer_attack_alt_index_1) 
				{					
					case 2:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_lp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_rp_ACS');
					break;
				}	
				
				this.previous_hammer_attack_alt_index_1 = hammer_attack_alt_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_attack_alt += 1;
				}
				else if (combo_counter_hammer_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_attack_alt += 1;
				}
				else if (combo_counter_hammer_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_attack_alt -= combo_counter_hammer_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_alt_index_2 = RandDifferent(this.previous_hammer_attack_alt_index_2 , 3);

				switch (hammer_attack_alt_index_2) 
				{					
					case 2:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_lp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_rp_ACS');
					break;
				}	
				
				this.previous_hammer_attack_alt_index_2 = hammer_attack_alt_index_2;
			}
		}				
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function geraltRandomMaceAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_light_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_light_attack_alt += 1;
				}
				else if (combo_counter_hammer_light_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack_alt += 1;
				}
				else if (combo_counter_hammer_light_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack_alt += 1;
				}
				else if (combo_counter_hammer_light_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_05_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack_alt -= combo_counter_hammer_light_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 4);

				switch (hammer_attack_index_1) 
				{										
					case 3:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_05_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_04_rp_ACS');
					break;
				}

				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_light_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_light_attack_alt += 1;
				}
				else if (combo_counter_hammer_light_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack_alt += 1;
				}
				else if (combo_counter_hammer_light_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack_alt += 1;
				}
				else if (combo_counter_hammer_light_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_05_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack_alt -= combo_counter_hammer_light_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 4);

				switch (hammer_attack_index_1) 
				{								
					case 3:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_05_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_04_rp_ACS');
					break;
				}	

				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}
	}
	
	function geraltRandomMaceAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_light_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_light_attack += 1;
				}
				else if (combo_counter_hammer_light_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack += 1;
				}
				else if (combo_counter_hammer_light_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack += 1;
				}
				else if (combo_counter_hammer_light_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack -= combo_counter_hammer_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 4);

				switch (hammer_attack_index_1) 
				{										
					case 3:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');
					break;
				}

				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_light_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_light_attack += 1;
				}
				else if (combo_counter_hammer_light_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack += 1;
				}
				else if (combo_counter_hammer_light_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack += 1;
				}
				else if (combo_counter_hammer_light_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack -= combo_counter_hammer_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 4);

				switch (hammer_attack_index_1) 
				{								
					case 3:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');
					break;
				}	

				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}
	}
	
	function geraltRandomGiantAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_heavy_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_heavy_attack_alt += 1;
				}
				else if (combo_counter_hammer_heavy_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_heavy_attack_alt += 1;
				}
				else if (combo_counter_hammer_heavy_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_heavy_attack_alt -= combo_counter_hammer_heavy_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_alt_index_1 = RandDifferent(this.previous_hammer_attack_alt_index_1 , 3);

				switch (hammer_attack_alt_index_1) 
				{					
					case 2:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_lp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_rp_ACS');
					break;
				}	

				this.previous_hammer_attack_alt_index_1 = hammer_attack_alt_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_heavy_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_heavy_attack_alt += 1;
				}
				else if (combo_counter_hammer_heavy_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_heavy_attack_alt += 1;
				}
				else if (combo_counter_hammer_heavy_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_heavy_attack_alt -= combo_counter_hammer_heavy_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_alt_index_2 = RandDifferent(this.previous_hammer_attack_alt_index_2 , 3);

				switch (hammer_attack_alt_index_2) 
				{					
					case 2:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_lp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_rp_ACS');
					break;
				}

				this.previous_hammer_attack_alt_index_2 = hammer_attack_alt_index_2;
			}
		}
	}
	
	function geraltRandomGiantAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_heavy_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_heavy_attack += 1;
				}
				else if (combo_counter_hammer_heavy_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_heavy_attack += 1;
				}
				else if (combo_counter_hammer_heavy_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_heavy_attack -= combo_counter_hammer_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_alt_index_1 = RandDifferent(this.previous_hammer_attack_alt_index_1 , 3);

				switch (hammer_attack_alt_index_1) 
				{					
					case 2:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_rp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_lp_ACS');
					break;
				}

				this.previous_hammer_attack_alt_index_1 = hammer_attack_alt_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_heavy_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_heavy_attack += 1;
				}
				else if (combo_counter_hammer_heavy_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_heavy_attack += 1;
				}
				else if (combo_counter_hammer_heavy_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_heavy_attack -= combo_counter_hammer_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_alt_index_2 = RandDifferent(this.previous_hammer_attack_alt_index_2 , 3);

				switch (hammer_attack_alt_index_2) 
				{					
					case 2:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_rp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_lp_ACS');
					break;
				}

				this.previous_hammer_attack_alt_index_2 = hammer_attack_alt_index_2;
			}
		}
	}
	
	function geraltRandomGiantSpecialAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_special_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_special_attack_alt += 1;
				}

				else if (combo_counter_hammer_special_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_special_attack_alt += 1;
				}

				else if (combo_counter_hammer_special_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_special_attack_alt += 1;
				}

				else if (combo_counter_hammer_special_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_special_attack_alt -= combo_counter_hammer_special_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 4);

				switch (hammer_attack_index_1) 
				{										
					case 3:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_01_lp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_01_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_02_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_02_lp_ACS');
					break;
				}	

				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_special_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_special_attack_alt += 1;
				}

				else if (combo_counter_hammer_special_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_special_attack_alt += 1;
				}

				else if (combo_counter_hammer_special_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_special_attack_alt += 1;
				}

				else if (combo_counter_hammer_special_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_special_attack_alt -= combo_counter_hammer_special_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 4);

				switch (hammer_attack_index_1) 
				{								
					case 3:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_01_lp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_01_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_02_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_02_lp_ACS');
					break;
				}	

				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}
	}
	
	function geraltRandomGiantSpecialAttack()
	{			
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_special_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_special_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_special_attack += 1;
				}

				else if (combo_counter_hammer_special_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_special_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_special_attack -= combo_counter_hammer_special_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 4);

				switch (hammer_attack_index_1) 
				{										
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_special_01_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_special_01_lp_ACS');
					break;
				}	

				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_special_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_special_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_special_attack += 1;
				}

				else if (combo_counter_hammer_special_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_special_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_special_attack -= combo_counter_hammer_special_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 4);

				switch (hammer_attack_index_1) 
				{								
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_special_01_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_special_01_lp_ACS');
					break;
				}	
				
				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Mace Attack Stuff
	
	function geraltRandomMaceLightAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_light_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_light_attack_alt += 1;
				}
				else if (combo_counter_hammer_light_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack_alt += 1;
				}
				else if (combo_counter_hammer_light_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack_alt += 1;
				}
				else if (combo_counter_hammer_light_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_05_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack_alt -= combo_counter_hammer_light_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 4);

				switch (hammer_attack_index_1) 
				{										
					case 3:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_05_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_04_rp_ACS');
					break;
				}

				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_light_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_light_attack_alt += 1;
				}
				else if (combo_counter_hammer_light_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack_alt += 1;
				}
				else if (combo_counter_hammer_light_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack_alt += 1;
				}
				else if (combo_counter_hammer_light_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_05_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack_alt -= combo_counter_hammer_light_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 4);

				switch (hammer_attack_index_1) 
				{								
					case 3:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_05_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_04_rp_ACS');
					break;
				}	

				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}
	}
	
	function geraltRandomMaceLightAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_light_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_light_attack += 1;
				}
				else if (combo_counter_hammer_light_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack += 1;
				}
				else if (combo_counter_hammer_light_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack += 1;
				}
				else if (combo_counter_hammer_light_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack -= combo_counter_hammer_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 4);

				switch (hammer_attack_index_1) 
				{										
					case 3:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');
					break;
				}

				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_light_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_light_attack += 1;
				}
				else if (combo_counter_hammer_light_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack += 1;
				}
				else if (combo_counter_hammer_light_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack += 1;
				}
				else if (combo_counter_hammer_light_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack -= combo_counter_hammer_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 4);

				switch (hammer_attack_index_1) 
				{								
					case 3:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');
					break;
				}	

				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}
	}
	
	function geraltRandomMaceHeavyAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_heavy_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_heavy_attack_alt += 1;
				}
				else if (combo_counter_hammer_heavy_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_heavy_attack_alt += 1;
				}
				else if (combo_counter_hammer_heavy_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_heavy_attack_alt -= combo_counter_hammer_heavy_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_alt_index_1 = RandDifferent(this.previous_hammer_attack_alt_index_1 , 3);

				switch (hammer_attack_alt_index_1) 
				{					
					case 2:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_lp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_rp_ACS');
					break;
				}	

				this.previous_hammer_attack_alt_index_1 = hammer_attack_alt_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_heavy_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_heavy_attack_alt += 1;
				}
				else if (combo_counter_hammer_heavy_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_heavy_attack_alt += 1;
				}
				else if (combo_counter_hammer_heavy_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_heavy_attack_alt -= combo_counter_hammer_heavy_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_alt_index_2 = RandDifferent(this.previous_hammer_attack_alt_index_2 , 3);

				switch (hammer_attack_alt_index_2) 
				{					
					case 2:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_lp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_rp_ACS');
					break;
				}

				this.previous_hammer_attack_alt_index_2 = hammer_attack_alt_index_2;
			}
		}
	}
	
	function geraltRandomMaceHeavyAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_heavy_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_heavy_attack += 1;
				}
				else if (combo_counter_hammer_heavy_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_heavy_attack += 1;
				}
				else if (combo_counter_hammer_heavy_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_heavy_attack -= combo_counter_hammer_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_alt_index_1 = RandDifferent(this.previous_hammer_attack_alt_index_1 , 3);

				switch (hammer_attack_alt_index_1) 
				{					
					case 2:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_rp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_lp_ACS');
					break;
				}

				this.previous_hammer_attack_alt_index_1 = hammer_attack_alt_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_heavy_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_heavy_attack += 1;
				}
				else if (combo_counter_hammer_heavy_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_heavy_attack += 1;
				}
				else if (combo_counter_hammer_heavy_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_heavy_attack -= combo_counter_hammer_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_alt_index_2 = RandDifferent(this.previous_hammer_attack_alt_index_2 , 3);

				switch (hammer_attack_alt_index_2) 
				{					
					case 2:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_rp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_lp_ACS');
					break;
				}

				this.previous_hammer_attack_alt_index_2 = hammer_attack_alt_index_2;
			}
		}
	}
	
	function geraltRandomMaceSpecialAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_special_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_special_attack_alt += 1;
				}

				else if (combo_counter_hammer_special_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_special_attack_alt += 1;
				}

				else if (combo_counter_hammer_special_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_special_attack_alt += 1;
				}

				else if (combo_counter_hammer_special_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_special_attack_alt -= combo_counter_hammer_special_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 4);

				switch (hammer_attack_index_1) 
				{										
					case 3:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_01_lp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_01_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_02_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_02_lp_ACS');
					break;
				}	

				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_special_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_special_attack_alt += 1;
				}

				else if (combo_counter_hammer_special_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_special_attack_alt += 1;
				}

				else if (combo_counter_hammer_special_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_special_attack_alt += 1;
				}

				else if (combo_counter_hammer_special_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_special_attack_alt -= combo_counter_hammer_special_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 4);

				switch (hammer_attack_index_1) 
				{								
					case 3:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_01_lp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_01_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_02_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_02_lp_ACS');
					break;
				}	

				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}
	}
	
	function geraltRandomMaceSpecialAttack()
	{			
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_special_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_special_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_special_attack += 1;
				}

				else if (combo_counter_hammer_special_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_special_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_special_attack -= combo_counter_hammer_special_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 4);

				switch (hammer_attack_index_1) 
				{										
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_special_01_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_special_01_lp_ACS');
					break;
				}	

				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_special_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_special_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_special_attack += 1;
				}

				else if (combo_counter_hammer_special_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_special_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_special_attack -= combo_counter_hammer_special_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 4);

				switch (hammer_attack_index_1) 
				{								
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_special_01_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_special_01_lp_ACS');
					break;
				}	
				
				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Axe Attack Stuff
	
	function geraltRandom1hAxeAttack_Armiger() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axe_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_attack += 1;
				}
				else if (combo_counter_axe_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack += 1;
				}
				else if (combo_counter_axe_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_03_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_axe_attack += 1;
				}
				else if (combo_counter_axe_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack += 1;
				}

				else if (combo_counter_axe_attack == 4)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack += 1;
				}

				else if (combo_counter_axe_attack == 5)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack += 1;
				}

				else if (combo_counter_axe_attack == 6)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack -= combo_counter_axe_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				axe_attack_index_1 = RandDifferent(this.previous_axe_attack_index_1 , 7);

				switch (axe_attack_index_1) 
				{						
					case 6:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_03_rp_ACS');
					break;
					
					case 5:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_02_rp_ACS');
					break;
					
					case 4:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_01_rp_ACS');
					break;
					
					case 3:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_03_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_lp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_01_rp_ACS');
					break;
				}	

				this.previous_axe_attack_index_1 = axe_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axe_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_attack += 1;
				}
				else if (combo_counter_axe_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack += 1;
				}
				else if (combo_counter_axe_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_03_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_axe_attack += 1;
				}
				else if (combo_counter_axe_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack += 1;
				}

				else if (combo_counter_axe_attack == 4)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack += 1;
				}

				else if (combo_counter_axe_attack == 5)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack += 1;
				}

				else if (combo_counter_axe_attack == 6)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack -= combo_counter_axe_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				axe_attack_index_2 = RandDifferent(this.previous_axe_attack_index_2 , 7);

				switch (axe_attack_index_2) 
				{						
					case 6:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_03_rp_ACS');
					break;
					
					case 5:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_02_rp_ACS');
					break;
					
					case 4:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_01_rp_ACS');
					break;
					
					case 3:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_03_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_lp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_01_rp_ACS');
					break;
				}	
				
				this.previous_axe_attack_index_2 = axe_attack_index_2;
			}
		}				
	}
	
	function geraltRandom2hAxeAttack_Armiger() 
	{
		MovementAdjust();

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axe_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_attack_alt += 1;
				}
				else if (combo_counter_axe_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack_alt += 1;
				}
				else if (combo_counter_axe_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_02_lp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_axe_attack_alt += 1;
				}
				else if (combo_counter_axe_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack_alt += 1;
				}

				else if (combo_counter_axe_attack_alt == 4)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack_alt += 1;
				}

				else if (combo_counter_axe_attack_alt == 5)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack_alt += 1;
				}

				else if (combo_counter_axe_attack_alt == 6)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_04_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack_alt -= combo_counter_axe_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				axe_attack_alt_index_1 = RandDifferent(this.previous_axe_attack_alt_index_1 , 7);

				switch (axe_attack_alt_index_1) 
				{								
					case 6:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_04_lp_ACS');
					break;
					
					case 5:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_03_rp_ACS');
					break;
					
					case 4:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_03_lp_ACS');
					break;
					
					case 3:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_02_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_02_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_01_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_01_lp_ACS');
					break;
				}	

				this.previous_axe_attack_alt_index_1 = axe_attack_alt_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axe_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_attack_alt += 1;
				}
				else if (combo_counter_axe_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack_alt += 1;
				}
				else if (combo_counter_axe_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_02_lp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_axe_attack_alt += 1;
				}
				else if (combo_counter_axe_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack_alt += 1;
				}

				else if (combo_counter_axe_attack_alt == 4)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack_alt += 1;
				}

				else if (combo_counter_axe_attack_alt == 5)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack_alt += 1;
				}

				else if (combo_counter_axe_attack_alt == 6)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_04_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack_alt -= combo_counter_axe_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				axe_attack_alt_index_2 = RandDifferent(this.previous_axe_attack_alt_index_2 , 7);

				switch (axe_attack_alt_index_2) 
				{								
					case 6:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_04_lp_ACS');
					break;
					
					case 5:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_03_rp_ACS');
					break;
					
					case 4:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_03_lp_ACS');
					break;
					
					case 3:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_02_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_02_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_01_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_01_lp_ACS');
					break;
				}	
				
				this.previous_axe_attack_alt_index_2 = axe_attack_alt_index_2;
			}
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function geraltRandom1hAxeAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axe_light_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_light_attack_alt += 1;
				}

				else if (combo_counter_axe_light_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_light_attack_alt += 1;
				}

				else if (combo_counter_axe_light_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_axe_light_attack_alt += 1;
				}

				else if (combo_counter_axe_light_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_light_attack_alt -= combo_counter_axe_light_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				axe_attack_index_1 = RandDifferent(this.previous_axe_attack_index_1 , 4);

				switch (axe_attack_index_1) 
				{						
					case 3:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');
					break;
				}	

				this.previous_axe_attack_index_1 = axe_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axe_light_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_light_attack_alt += 1;
				}

				else if (combo_counter_axe_light_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_light_attack_alt += 1;
				}

				else if (combo_counter_axe_light_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_axe_light_attack_alt += 1;
				}

				else if (combo_counter_axe_light_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_light_attack_alt -= combo_counter_axe_light_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				axe_attack_index_2 = RandDifferent(this.previous_axe_attack_index_2 , 4);

				switch (axe_attack_index_2) 
				{						
					case 3:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');
					break;
				}	
				
				this.previous_axe_attack_index_2 = axe_attack_index_2;
			}
		}	
	}
	
	function geraltRandom1hAxeAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axe_light_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_light_attack += 1;
				}

				else if (combo_counter_axe_light_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_light_attack += 1;
				}

				else if (combo_counter_axe_light_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_light_attack -= combo_counter_axe_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				axe_attack_index_1 = RandDifferent(this.previous_axe_attack_index_1 , 3);

				switch (axe_attack_index_1) 
				{						
					case 2:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_03_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_02_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_01_rp_ACS');
					break;
				}	

				this.previous_axe_attack_index_1 = axe_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axe_light_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_light_attack += 1;
				}

				else if (combo_counter_axe_light_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_light_attack += 1;
				}

				else if (combo_counter_axe_light_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_light_attack -= combo_counter_axe_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				axe_attack_index_2 = RandDifferent(this.previous_axe_attack_index_2 , 3);

				switch (axe_attack_index_2) 
				{						
					case 2:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_03_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_02_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_01_rp_ACS');
					break;
				}	

				this.previous_axe_attack_index_2 = axe_attack_index_2;
			}
		}	
	}
	
	function geraltRandom2hAxeAttackAlt()
	{	
		MovementAdjust();

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axe_heavy_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_03_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_heavy_attack_alt += 1;
				}

				else if (combo_counter_axe_heavy_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_heavy_attack_alt += 1;
				}

				else if (combo_counter_axe_heavy_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_04_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_heavy_attack_alt -= combo_counter_axe_heavy_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				axe_attack_alt_index_1 = RandDifferent(this.previous_axe_attack_alt_index_1 , 3);

				switch (axe_attack_alt_index_1) 
				{									
					case 2:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_04_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_03_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_03_lp_ACS');
					break;
				}

				this.previous_axe_attack_alt_index_1 = axe_attack_alt_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axe_heavy_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_03_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_heavy_attack_alt += 1;
				}

				else if (combo_counter_axe_heavy_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_heavy_attack_alt += 1;
				}

				else if (combo_counter_axe_heavy_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_04_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_heavy_attack_alt -= combo_counter_axe_heavy_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				axe_attack_alt_index_2 = RandDifferent(this.previous_axe_attack_alt_index_2 , 3);

				switch (axe_attack_alt_index_2) 
				{								
					case 2:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_04_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_03_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_03_lp_ACS');
					break;
				}

				this.previous_axe_attack_alt_index_2 = axe_attack_alt_index_2;
			}
		}
	}
	
	function geraltRandom2hAxeAttack()
	{
		MovementAdjust();

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axe_heavy_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_heavy_attack += 1;
				}

				else if (combo_counter_axe_heavy_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_heavy_attack += 1;
				}

				else if (combo_counter_axe_heavy_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_heavy_attack += 1;
				}

				else if (combo_counter_axe_heavy_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_heavy_attack -= combo_counter_axe_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				axe_attack_alt_index_1 = RandDifferent(this.previous_axe_attack_alt_index_1 , 4);

				switch (axe_attack_alt_index_1) 
				{									
					case 3:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_02_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_02_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_01_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_01_lp_ACS');
					break;
				}

				this.previous_axe_attack_alt_index_1 = axe_attack_alt_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axe_heavy_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_heavy_attack += 1;
				}

				else if (combo_counter_axe_heavy_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_heavy_attack += 1;
				}

				else if (combo_counter_axe_heavy_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_heavy_attack += 1;
				}

				else if (combo_counter_axe_heavy_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_heavy_attack -= combo_counter_axe_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				axe_attack_alt_index_2 = RandDifferent(this.previous_axe_attack_alt_index_2 , 4);

				switch (axe_attack_alt_index_2) 
				{								
					case 3:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_02_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_02_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_01_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_01_lp_ACS');
					break;
				}	
				
				this.previous_axe_attack_alt_index_2 = axe_attack_alt_index_2;
			}
		}
	}
	
	function geraltRandomAxeSpecialAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axe_special_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_special_attack_alt += 1;
				}

				else if (combo_counter_axe_special_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_special_attack_alt -= combo_counter_axe_special_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				axe_attack_index_1 = RandDifferent(this.previous_axe_attack_index_1 , 2);

				switch (axe_attack_index_1) 
				{						
					case 1:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_01_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_03_rp_ACS');
					break;
					
				}	

				this.previous_axe_attack_index_1 = axe_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axe_special_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_special_attack_alt += 1;
				}

				else if (combo_counter_axe_special_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_special_attack_alt -= combo_counter_axe_special_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				axe_attack_index_2 = RandDifferent(this.previous_axe_attack_index_2 , 2);

				switch (axe_attack_index_2) 
				{						
					case 1:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_01_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_03_rp_ACS');
					break;
				}	
				
				this.previous_axe_attack_index_2 = axe_attack_index_2;
			}
		}
	}
	
	function geraltRandomAxeSpecialAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axe_special_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_special_attack += 1;
				}

				else if (combo_counter_axe_special_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_special_attack -= combo_counter_axe_special_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				axe_attack_index_1 = RandDifferent(this.previous_axe_attack_index_1 , 2);

				switch (axe_attack_index_1) 
				{						
					case 1:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_lp_ACS');
					break;
					
				}	

				this.previous_axe_attack_index_1 = axe_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axe_special_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_special_attack += 1;
				}

				else if (combo_counter_axe_special_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_special_attack -= combo_counter_axe_special_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				axe_attack_index_2 = RandDifferent(this.previous_axe_attack_index_2 , 2);

				switch (axe_attack_index_2) 
				{						
					case 1:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_lp_ACS');
					break;
				}	
				
				this.previous_axe_attack_index_2 = axe_attack_index_2;
			}
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Greg Attack Stuff

	function geraltRandomGregAttack() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_greg_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_greg_attack_alt += 1;
				}
				else if (combo_counter_greg_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_special_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}
				else if (combo_counter_greg_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_1_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}
				else if (combo_counter_greg_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_2_ACS');
					
					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 4)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_1_ACS');
					
					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 5)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_2_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 6)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_left_1_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 7)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_up_1_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 8)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_left_1_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 9)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_up_1_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 10)
				{
					PlayerPlayAnimation( 'man_finisher_head_01_rp_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.5, false);

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 11)
				{
					PlayerPlayAnimation( 'man_finisher_head_01_lp_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.5, false);

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 12)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_heavy_special_rp_end');

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt -= combo_counter_greg_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5 * 1.5 ) 
				{		
					//PlayerPlayAnimation( 'gregoire_attack_punch_ACS');

					punch_index_1 = RandDifferent(this.previous_punch_index_1 , 2);

					switch (punch_index_1) 
					{														
						case 1:
						PlayerPlayAnimation( 'man_finisher_head_01_lp_ACS');
						break;

						default:
						PlayerPlayAnimation( 'man_finisher_head_01_rp_ACS');
						break;
					}
						
					this.previous_punch_index_1 = punch_index_1;

					AddTimer('ACS_HeadbuttDamage', 0.5, false);
				}
				else if( targetDistance > 1.5 * 1.5 
				&& targetDistance <= 4.5*4.5 ) 
				{			
					greg_attack_alt_index_1 = RandDifferent(this.previous_greg_attack_alt_index_1 , 10);

					switch (greg_attack_alt_index_1) 
					{	
						case 9:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_up_1_ACS');
						break;

						case 8:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_left_1_ACS');
						break;

						case 7:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_up_1_ACS');
						break;

						case 6:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_left_1_ACS');
						break;

						case 5:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_2_ACS');
						break;

						case 4:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_1_ACS');
						break;

						case 3:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_1_ACS');
						break;

						case 2:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_2_ACS');
						break;

						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_heavy_special_rp_end');
						break;

						default:
						PlayerPlayAnimation( 'man_npc_longsword_attack_special_01_rp_ACS');
						break;
					}

					this.previous_greg_attack_alt_index_1 = greg_attack_alt_index_1;	
				}	
				else
				{
					PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');
				}
			}	
		}	
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_greg_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_greg_attack_alt += 1;
				}
				else if (combo_counter_greg_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_special_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}
				else if (combo_counter_greg_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_1_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}
				else if (combo_counter_greg_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_2_ACS');
					
					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 4)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_1_ACS');
					
					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 5)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_2_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 6)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_left_1_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 7)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_up_1_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 8)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_left_1_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 9)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_up_1_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 10)
				{
					PlayerPlayAnimation( 'man_finisher_head_01_rp_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.5, false);

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 11)
				{
					PlayerPlayAnimation( 'man_finisher_head_01_lp_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.5, false);

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 12)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_heavy_special_rp_end');

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt -= combo_counter_greg_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				greg_attack_alt_index_2 = RandDifferent(this.previous_greg_attack_alt_index_2, 11);

				switch (greg_attack_alt_index_2) 
				{	
					case 10:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_2_ACS');
					break;

					case 9:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_up_1_ACS');
					break;

					case 8:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_left_1_ACS');
					break;

					case 7:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_up_1_ACS');
					break;

					case 6:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_left_1_ACS');
					break;

					case 5:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_2_ACS');
					break;

					case 4:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_1_ACS');
					break;

					case 3:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_1_ACS');
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_heavy_special_rp_end');
					break;
						
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_longsword_attack_special_01_rp_ACS');
					break;
				}	
				
				this.previous_greg_attack_alt_index_2 = greg_attack_alt_index_2;
			}
		}
	}
	
	function geraltRandomGregAttackAlt() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_greg_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_greg_attack += 1;
				}
				else if (combo_counter_greg_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}
				else if (combo_counter_greg_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}
				else if (combo_counter_greg_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_04_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}

				else if (combo_counter_greg_attack == 4)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}

				else if (combo_counter_greg_attack == 5)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}

				else if (combo_counter_greg_attack == 6)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}

				else if (combo_counter_greg_attack == 7)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_05_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}

				else if (combo_counter_greg_attack == 8)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}

				else if (combo_counter_greg_attack == 9)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}

				else if (combo_counter_greg_attack == 10)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_06_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack -= combo_counter_greg_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5*1.5 ) 
				{
					greg_attack_index_1 = RandDifferent(this.previous_greg_attack_index_1 , 7);

					switch (greg_attack_index_1) 
					{				
						case 6:
						PlayerPlayAnimation( 'man_npc_longsword_attack_l_06_lp_ACS');
						break;
						
						case 5:
						PlayerPlayAnimation( 'man_npc_longsword_attack_l_04_rp_ACS');
						break;
						
						case 4:
						PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');
						break;
						
						case 3:
						PlayerPlayAnimation( 'man_npc_longsword_attack_h_05_rp_ACS');
						break;
						
						case 2:
						PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');
						break;

						default:
						PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_lp_ACS');
						break;
					}	
					this.previous_greg_attack_index_1 = greg_attack_index_1;
				}
				else
				{
					greg_attack_index_1 = RandDifferent(this.previous_greg_attack_index_1 , 4);

					switch (greg_attack_index_1) 
					{				
						case 3:
						PlayerPlayAnimation( 'man_npc_longsword_attack_h_04_lp_ACS');
						break;
						
						case 2:
						PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_rp_ACS');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_lp_ACS');
						break;

						default:
						PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_rp_ACS');
						break;
					}

					this.previous_greg_attack_index_1 = greg_attack_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_greg_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_greg_attack += 1;
				}
				else if (combo_counter_greg_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}
				else if (combo_counter_greg_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}
				else if (combo_counter_greg_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_04_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}

				else if (combo_counter_greg_attack == 4)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}

				else if (combo_counter_greg_attack == 5)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}

				else if (combo_counter_greg_attack == 6)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}

				else if (combo_counter_greg_attack == 7)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_05_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}

				else if (combo_counter_greg_attack == 8)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}

				else if (combo_counter_greg_attack == 9)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}

				else if (combo_counter_greg_attack == 10)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_06_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack -= combo_counter_greg_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				greg_attack_index_2 = RandDifferent(this.previous_greg_attack_index_2, 12);

				switch (greg_attack_index_2) 
				{				
					case 11:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_06_lp_ACS');
					break;
					
					case 10:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_04_rp_ACS');
					break;
					
					case 9:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');
					break;
					
					case 7:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_05_rp_ACS');
					break;
					
					case 6:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_04_lp_ACS');
					break;
					
					case 5:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_rp_ACS');
					break;
					
					case 4:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_lp_ACS');
					break;
					
					case 3:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_lp_ACS');
					break;
				}

				this.previous_greg_attack_index_2 = greg_attack_index_2;
			}
		}			
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function geraltRandomGregLightAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_greg_light_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_greg_light_attack_alt += 1;
				}
				else if (combo_counter_greg_light_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_light_attack_alt += 1;
				}
				else if (combo_counter_greg_light_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_light_attack_alt += 1;
				}

				else if (combo_counter_greg_light_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_04_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_light_attack_alt -= combo_counter_greg_light_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				greg_attack_index_1 = RandDifferent(this.previous_greg_attack_index_1 , 4);

				switch (greg_attack_index_1) 
				{				
					case 3:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_lp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_04_lp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_rp_ACS');
					break;
				}	
				
				this.previous_greg_attack_index_1 = greg_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_greg_light_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_greg_light_attack_alt += 1;
				}
				else if (combo_counter_greg_light_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_light_attack_alt += 1;
				}
				else if (combo_counter_greg_light_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_light_attack_alt += 1;
				}

				else if (combo_counter_greg_light_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_04_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_light_attack_alt -= combo_counter_greg_light_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				greg_attack_index_2 = RandDifferent(this.previous_greg_attack_index_2, 4);

				switch (greg_attack_index_2) 
				{	
					case 3:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_lp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_04_lp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_rp_ACS');
					break;
				}

				this.previous_greg_attack_index_2 = greg_attack_index_2;
			}
		}
	}
	
	function geraltRandomGregLightAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_greg_light_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_greg_light_attack += 1;
				}
				else if (combo_counter_greg_light_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_light_attack += 1;
				}
				else if (combo_counter_greg_light_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_light_attack += 1;
				}

				else if (combo_counter_greg_light_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_light_attack += 1;
				}

				else if (combo_counter_greg_light_attack == 4)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_06_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_light_attack -= combo_counter_greg_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				greg_attack_index_1 = RandDifferent(this.previous_greg_attack_index_1 , 5);

				switch (greg_attack_index_1) 
				{				
					case 4:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');
					break;
						
					case 3:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_lp_ACS');
					break;
						
					case 2:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');
					break;
						
					case 1:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_04_rp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_06_lp_ACS');
					break;
				}	
					
				this.previous_greg_attack_index_1 = greg_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_greg_light_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_greg_light_attack += 1;
				}
				else if (combo_counter_greg_light_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_light_attack += 1;
				}
				else if (combo_counter_greg_light_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_light_attack += 1;
				}

				else if (combo_counter_greg_light_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_light_attack += 1;
				}

				else if (combo_counter_greg_light_attack == 4)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_06_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_light_attack -= combo_counter_greg_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				greg_attack_index_2 = RandDifferent(this.previous_greg_attack_index_2, 5);

				switch (greg_attack_index_2) 
				{				
					case 4:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');
					break;
					
					case 3:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_lp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_04_rp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_06_lp_ACS');
					break;
				}

				this.previous_greg_attack_index_2 = greg_attack_index_2;
			}
		}
	}
	
	function geraltRandomGregHeavyAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_greg_heavy_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_up_1_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_greg_heavy_attack_alt += 1;
				}
				else if (combo_counter_greg_heavy_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_left_1_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}
				else if (combo_counter_greg_heavy_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_up_1_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}

				else if (combo_counter_greg_heavy_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_left_1_ACS');
					
					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}

				else if (combo_counter_greg_heavy_attack_alt == 4)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_1_ACS');
					
					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}

				else if (combo_counter_greg_heavy_attack_alt == 5)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_2_ACS');
					
					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}

				else if (combo_counter_greg_heavy_attack_alt == 6)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_1_ACS');
					
					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}

				else if (combo_counter_greg_heavy_attack_alt == 7)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_2_ACS');
					
					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}

				else if (combo_counter_greg_heavy_attack_alt == 8)
				{
					PlayerPlayAnimation( 'man_finisher_head_01_rp_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.5, false);

					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}

				else if (combo_counter_greg_heavy_attack_alt == 9)
				{
					PlayerPlayAnimation( 'man_finisher_head_01_lp_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.5, false);

					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}

				else if (combo_counter_greg_heavy_attack_alt == 10)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_heavy_special_rp_end');

					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt -= combo_counter_greg_heavy_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5 * 1.5 ) 
				{
					//PlayerPlayAnimation( 'gregoire_attack_punch_ACS');

					punch_index_1 = RandDifferent(this.previous_punch_index_1 , 2);

					switch (punch_index_1) 
					{														
						case 1:
						PlayerPlayAnimation( 'man_finisher_head_01_lp_ACS');
						break;

						default:
						PlayerPlayAnimation( 'man_finisher_head_01_rp_ACS');
						break;
					}
						
					this.previous_punch_index_1 = punch_index_1;

					AddTimer('ACS_HeadbuttDamage', 0.5, false);
				}
				else
				{
					greg_attack_index_1 = RandDifferent(this.previous_greg_attack_index_1 , 9);

					switch (greg_attack_index_1) 
					{				
						case 8:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_left_1_ACS');
						break;

						case 7:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_up_1_ACS');
						break;

						case 6:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_left_1_ACS');
						break;

						case 5:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_2_ACS');
						break;

						case 4:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_1_ACS');
						break;

						case 3:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_1_ACS');
						break;

						case 2:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_up_1_ACS');
						break;

						case 1:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_2_ACS');
						break;

						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_heavy_special_rp_end');
						break;
					}	
						
					this.previous_greg_attack_index_1 = greg_attack_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_greg_heavy_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_up_1_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_greg_heavy_attack_alt += 1;
				}
				else if (combo_counter_greg_heavy_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_left_1_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}
				else if (combo_counter_greg_heavy_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_up_1_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}

				else if (combo_counter_greg_heavy_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_left_1_ACS');
					
					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}

				else if (combo_counter_greg_heavy_attack_alt == 4)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_1_ACS');
					
					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}

				else if (combo_counter_greg_heavy_attack_alt == 5)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_2_ACS');
					
					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}

				else if (combo_counter_greg_heavy_attack_alt == 6)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_1_ACS');
					
					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}

				else if (combo_counter_greg_heavy_attack_alt == 7)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_2_ACS');
					
					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}

				else if (combo_counter_greg_heavy_attack_alt == 8)
				{
					PlayerPlayAnimation( 'man_finisher_head_01_rp_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.5, false);

					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}

				else if (combo_counter_greg_heavy_attack_alt == 9)
				{
					PlayerPlayAnimation( 'man_finisher_head_01_lp_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.5, false);

					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}

				else if (combo_counter_greg_heavy_attack_alt == 10)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_heavy_special_rp_end');

					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt -= combo_counter_greg_heavy_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				greg_attack_index_2 = RandDifferent(this.previous_greg_attack_index_2, 10);

				switch (greg_attack_index_2) 
				{	
					case 9:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_2_ACS');
					break;

					case 8:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_left_1_ACS');
					break;

					case 7:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_up_1_ACS');
					break;

					case 6:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_left_1_ACS');
					break;

					case 5:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_2_ACS');
					break;

					case 4:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_1_ACS');
					break;

					case 3:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_1_ACS');
					break;

					case 2:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_up_1_ACS');
					break;

					case 1:
					PlayerPlayAnimation( 'combat_locomotion_sucker_punch_40ms_close');
					break;

					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_heavy_special_rp_end');
					break;
				}

				this.previous_greg_attack_index_2 = greg_attack_index_2;
			}
		}
	}
	
	function geraltRandomGregHeavyAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_greg_heavy_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_greg_heavy_attack += 1;
				}
				else if (combo_counter_greg_heavy_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack += 1;
				}
				else if (combo_counter_greg_heavy_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack += 1;
				}

				else if (combo_counter_greg_heavy_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_05_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack -= combo_counter_greg_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				greg_attack_index_1 = RandDifferent(this.previous_greg_attack_index_1 , 4);

				switch (greg_attack_index_1) 
				{				
					case 3:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');
					break;
						
					case 1:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');
					break;
						
					default:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_05_rp_ACS');
					break;
				}	
					
				this.previous_greg_attack_index_1 = greg_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_greg_heavy_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_greg_heavy_attack += 1;
				}
				else if (combo_counter_greg_heavy_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack += 1;
				}
				else if (combo_counter_greg_heavy_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack += 1;
				}

				else if (combo_counter_greg_heavy_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_05_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack -= combo_counter_greg_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				greg_attack_index_2 = RandDifferent(this.previous_greg_attack_index_2, 4);

				switch (greg_attack_index_2) 
				{				
					case 3:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_05_rp_ACS');
					break;
				}

				this.previous_greg_attack_index_2 = greg_attack_index_2;
			}
		}
	}
	
	function geraltRandomGregSpecialAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');
		}
	}
	
	function geraltRandomGregSpecialAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			PlayerPlayAnimation( 'man_npc_longsword_attack_special_01_rp_ACS');
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			PlayerPlayAnimation( 'man_npc_longsword_attack_special_01_rp_ACS');
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Bow & Crossbow Stuff

	function geraltShootBowStationary()
	{
		MovementAdjust();

		if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');
		
		PlayerPlayAnimation( 'man_npc_bow_idle_aiming_01_ACS');

		PlayBowAnim_IdleAiming();

		ACS_Arrow_Create_Ready_Arrow_Rain();

		if( actor && ACS_AttitudeCheck_NoDistance ( actor ) && thePlayer.IsInCombat())
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}   
		}
		else
		{
			movementAdjustor.RotateTo( ticket, theCamera.GetCameraHeading() );
		}

		AddTimer('ACS_ShootBowToIdleArrowRain', 0.75, false);
	}

	function geraltShootBowMoving()
	{
		MovementAdjust();

		if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');
		
		PlayerPlayAnimation( 'man_npc_bow_idle_aiming_01_ACS');

		PlayBowAnim_IdleAiming();

		ACS_Arrow_Create_Ready();

		if( actor && ACS_AttitudeCheck_NoDistance ( actor ) && thePlayer.IsInCombat())
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}   
		}
		else
		{
			movementAdjustor.RotateTo( ticket, theCamera.GetCameraHeading() );
		}

		AddTimer('ACS_ShootBowToIdle', 0.25, false);
	}

	function geraltShootCrossbowStationary()
	{
		MovementAdjust();

		if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');
		
		if( actor && ACS_AttitudeCheck_NoDistance ( actor ) && thePlayer.IsInCombat())
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}   
		}
		else
		{
			movementAdjustor.RotateTo( ticket, theCamera.GetCameraHeading() );
		}

		PlayerPlayAnimation( 'man_npc_crossbow_idle_aiming_01_ACS');

		PlayCrossbowAnim_IdleAiming();

		RemoveTimer('ACS_ShootCrossbowToIdle');
		AddTimer('ACS_ShootCrossbowToIdle', 0.25, false);
	}

	function geraltShootCrossbowMoving()
	{
		MovementAdjust();

		if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');
		
		if( actor && ACS_AttitudeCheck_NoDistance ( actor ) && thePlayer.IsInCombat())
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}   
		}
		else
		{
			movementAdjustor.RotateTo( ticket, theCamera.GetCameraHeading() );
		}

		PlayerPlayAnimation( 'man_npc_crossbow_idle_aiming_01_ACS');

		PlayCrossbowAnim_IdleAiming();

		RemoveTimer('ACS_ShootCrossbowToAim');
		AddTimer('ACS_ShootCrossbowToAim', 0.25, false);
	}

	function PlayBowAnim_IdleAiming()
	{
		igni_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		axii_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		aard_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		quen_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		yrden_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );

		igni_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		axii_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		aard_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		quen_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		yrden_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );

		igni_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		axii_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		aard_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		quen_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		yrden_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );

		igni_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		axii_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		aard_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		quen_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		yrden_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
	}

	function PlayBowAnim_Reset()
	{
		igni_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );
		axii_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );
		aard_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );
		quen_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );
		yrden_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );

		igni_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );
		axii_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );
		aard_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );
		quen_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );
		yrden_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );

		igni_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );
		axii_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );
		aard_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );
		quen_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );
		yrden_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );

		igni_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );
		axii_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );
		aard_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );
		quen_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );
		yrden_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );
	}

	function PlayBowAnim_ShootToIdle()
	{
		//PlayerPlayAnimation( 'man_npc_bow_shoot_to_idle_lp_ACS');

		PlayerPlayAnimation( 'man_npc_bow_shoot_to_idle_lp_ACS');

		igni_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		axii_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		aard_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		quen_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		yrden_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );

		igni_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		axii_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		aard_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		quen_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		yrden_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );

		igni_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		axii_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		aard_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		quen_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		yrden_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );

		igni_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		axii_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		aard_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		quen_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		yrden_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );

		AddTimer('ACS_Arrow_Shoot_Delay', 0.125, false);

		AddTimer('ACS_Arrow_Create_Delay', 0.5, false);
	}

	function PlayBowAnim_ShootToIdle_ArrowRain()
	{
		//PlayerPlayAnimation( 'man_npc_bow_shoot_to_idle_lp_ACS');

		PlayerPlayAnimation( 'man_npc_bow_shoot_to_idle_lp_ACS');

		igni_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		axii_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		aard_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		quen_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		yrden_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );

		igni_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		axii_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		aard_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		quen_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		yrden_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );

		igni_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		axii_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		aard_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		quen_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		yrden_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );

		igni_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		axii_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		aard_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		quen_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		yrden_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );

		AddTimer('ACS_Arrow_Rain_Shoot_Delay', 0.125, false);

		AddTimer('ACS_Arrow_Create_Delay', 0.5, false);
	}

	function PlayCrossbowAnim_IdleAiming()
	{
		var attach_rot : EulerAngles;
		var attach_vec : Vector;

		igni_crossbow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		axii_crossbow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		aard_crossbow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		quen_crossbow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		yrden_crossbow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );

		igni_crossbow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		axii_crossbow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		aard_crossbow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		quen_crossbow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		yrden_crossbow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );

		igni_crossbow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		axii_crossbow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		aard_crossbow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		quen_crossbow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		yrden_crossbow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );

		igni_crossbow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		axii_crossbow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		aard_crossbow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		quen_crossbow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		yrden_crossbow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );

		RemoveTimer('ACS_Create_Crossbow_Arrow_Delay');

		ACS_CreateCrossbow_Arrow();
	}

	timer function ACS_Create_Crossbow_Arrow_Delay(deltaTime : float , id : int)
	{
		ACS_CreateCrossbow_Arrow();
	}

	function PlayCrossbowAnim_ShootToIdle()
	{
		var attach_rot : EulerAngles;
		var attach_vec : Vector;

		thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'man_npc_crossbow_shoot_to_idle_lp_ACS' , 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 0.5f) );

		igni_crossbow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		axii_crossbow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		aard_crossbow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		quen_crossbow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		yrden_crossbow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );

		igni_crossbow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		axii_crossbow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		aard_crossbow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		quen_crossbow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		yrden_crossbow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );

		igni_crossbow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		axii_crossbow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		aard_crossbow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		quen_crossbow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		yrden_crossbow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );

		igni_crossbow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		axii_crossbow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		aard_crossbow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		quen_crossbow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		yrden_crossbow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
	
		ACS_ShootCrossbow_Arrow();

		RemoveTimer('ACS_Create_Crossbow_Arrow_Delay');
		AddTimer('ACS_Create_Crossbow_Arrow_Delay', 0.25f, false);
	}

	function PlayCrossbowAnim_ShootToAim()
	{
		var attach_rot : EulerAngles;
		var attach_vec : Vector;

		thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'man_npc_crossbow_shoot_to_aim_ACS' , 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 0.5f) );

		igni_crossbow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		axii_crossbow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		aard_crossbow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		quen_crossbow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		yrden_crossbow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );

		igni_crossbow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		axii_crossbow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		aard_crossbow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		quen_crossbow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		yrden_crossbow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );

		igni_crossbow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		axii_crossbow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		aard_crossbow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		quen_crossbow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		yrden_crossbow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );

		igni_crossbow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		axii_crossbow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		aard_crossbow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		quen_crossbow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		yrden_crossbow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );

		ACS_ShootCrossbow_Arrow();

		RemoveTimer('ACS_Create_Crossbow_Arrow_Delay');
		AddTimer('ACS_Create_Crossbow_Arrow_Delay', 0.25f, false);
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Wraith Stuff

	function Wraith_Static_Mesh_Check(): bool
	{
		var tempEndPoint_1, tempEndPoint_2, normal_1, normal_2			: Vector;
		var collisionGroupsNames										: array<name>;	

		collisionGroupsNames.Clear();

		collisionGroupsNames.PushBack( 'Terrain');
		collisionGroupsNames.PushBack( 'Static');
        collisionGroupsNames.PushBack( 'Door' );

		if ( 
		theGame.GetWorld().StaticTrace( thePlayer.GetWorldPosition(), thePlayer.GetWorldPosition() + thePlayer.GetHeadingVector() * 2, tempEndPoint_1, normal_1, collisionGroupsNames ) 
		|| theGame.GetWorld().StaticTrace( thePlayer.GetWorldPosition(), thePlayer.GetWorldPosition() + thePlayer.GetWorldUp() * -1.75, tempEndPoint_2, normal_2, collisionGroupsNames )
		)		
		{
			return true;
		}
		
		return false;
	}

	function wraith_freeze_pose()
	{
		if (!thePlayer.HasTag('ACS_Wraith_Mode_Flight_Anim')
		&& thePlayer.substateManager.GetStateCur() != 'Swim'
		&& thePlayer.substateManager.GetStateCur() != 'Swimming'
		)
		{
			if (!((CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent')).HasFrozenPose())
			{
				PlayerPlayAnimationInterrupt( 'swim_underwater_f_fast_ACS' );

				((CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent')).FreezePoseFadeIn(0.8);
			}

			thePlayer.AddTag('ACS_Wraith_Mode_Flight_Anim');
		}
	}

	function wraith_unfreeze_pose()
	{
		if (thePlayer.HasTag('ACS_Wraith_Mode_Flight_Anim'))
		{
			thePlayer.RemoveTag('ACS_Wraith_Mode_Flight_Anim');
		}

		if (((CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent')).HasFrozenPose())
		{
			((CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent')).UnfreezePoseFadeOut(0.1);

			((CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent')).UnfreezePose();
		}
	}
	
	function wraith_actual()
	{
		thePlayer.PlayEffectSingle('wraith_fx');

		camera.StopAnimation('camera_shake_loop_lvl1_1');

		theGame.GetGameCamera().StopAnimation( 'camera_shake_loop_lvl1_1' );

		camera.StopAnimation('camera_shake_loop_lvl1_5');

		theGame.GetGameCamera().StopAnimation( 'camera_shake_loop_lvl1_5' );

		thePlayer.EnableCharacterCollisions( false );

		MovementAdjustWraith();
		
		movementAdjustor.ScaleAnimation( ticket, true, false, true );
		
		//movementAdjustor.MatchMoveRotation( ticket );

		if (
		theInput.GetActionValue('Jump') > 0.5
		|| theInput.GetActionValue('Dodge') > 0.5
		|| theInput.GetActionValue('CbtRoll') > 0.5
		|| theInput.GetActionValue('WalkToggle') > 0.5
		|| theGame.IsDialogOrCutscenePlaying() 
		|| thePlayer.IsInNonGameplayCutscene() 
		|| thePlayer.IsInGameplayScene()
		|| thePlayer.IsUsingVehicle()
		|| thePlayer.IsUsingHorse()
		)
		{	
			wraith_unfreeze_pose();
			
			WraithModeDeactivate();

			return;
		}

		if (theInput.GetActionValue('GI_AxisLeftY') == 0 
		&& theInput.GetActionValue('GI_AxisLeftX') == 0 
		)
		{
			wraith_unfreeze_pose();

			PlayerPlayAnimationWraith( 'swim_underwater_idle_ACS' );
			
			if (thePlayer.IsInInterior())
			{
				if (theGame.IsFocusModeActive() || thePlayer.IsInsideInteraction() || Wraith_Static_Mesh_Check())
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 0.0125;
				}
				else
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 0.25;
				}
			}
			else
			{
				if (thePlayer.IsInsideInteraction() || Wraith_Static_Mesh_Check())
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 0.0125;
				}
				else if (theGame.IsFocusModeActive())
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 0.25;
				}
				else if (thePlayer.IsInCombat())
				{
					dest1 = thePlayer.GetWorldPosition() + thePlayer.GetWorldUp() * -0.03125 + theCamera.GetCameraDirection() * 0.25;
				}
				else
				{
					dest1 = thePlayer.GetWorldPosition() + thePlayer.GetWorldUp() * -0.03125 + theCamera.GetCameraDirection() * 0.5;
				}
			}
			
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
		}
		else
		{
			if (theInput.GetActionValue('GI_AxisLeftY') > 0.1 && theInput.GetActionValue('GI_AxisLeftX') == 0 )
			{
				if (thePlayer.IsInsideInteraction() || Wraith_Static_Mesh_Check() || thePlayer.IsSwimming() || thePlayer.IsDiving())
				{
					wraith_unfreeze_pose();
					PlayerPlayAnimationWraith( 'swim_underwater_idle_ACS' );
				}
				else
				{
					wraith_freeze_pose();
				}

				if (thePlayer.IsInInterior())
				{
					if (theGame.IsFocusModeActive() || thePlayer.IsInsideInteraction() || Wraith_Static_Mesh_Check())
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 1.25;
					}
					else
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 2.5;
					}
				}
				else
				{
					if (thePlayer.IsInsideInteraction() || Wraith_Static_Mesh_Check())
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 1.25;
					}
					else if (theGame.IsFocusModeActive())
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 5;
					}
					else if (thePlayer.IsInCombat())
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 10;
					}
					else
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 20;
					}
				}
				
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			}
			else if (theInput.GetActionValue('GI_AxisLeftY') < -0.1 && theInput.GetActionValue('GI_AxisLeftX') == 0 )
			{
				wraith_unfreeze_pose();

				PlayerPlayAnimationWraith( 'swim_underwater_idle_ACS' );

				if (thePlayer.IsInInterior())
				{
					if (theGame.IsFocusModeActive() || thePlayer.IsInsideInteraction() || Wraith_Static_Mesh_Check())
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * -1.25;
					}
					else
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * -2.5;
					}
				}
				else
				{
					if (thePlayer.IsInsideInteraction() || Wraith_Static_Mesh_Check())
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * -1.25;
					}
					else if (theGame.IsFocusModeActive())
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * -2.5;
					}
					else if (thePlayer.IsInCombat())
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * -7;
					}
					else
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * -10;
					}
				}
				
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			}
			else if (theInput.GetActionValue('GI_AxisLeftX') > 0.1 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
			{
				if (thePlayer.IsInsideInteraction() || Wraith_Static_Mesh_Check() || thePlayer.IsSwimming() || thePlayer.IsDiving())
				{
					wraith_unfreeze_pose();
					PlayerPlayAnimationWraith( 'swim_underwater_idle_ACS' );
				}
				else
				{
					wraith_freeze_pose();
				}

				if (thePlayer.IsInInterior())
				{
					if (theGame.IsFocusModeActive() || thePlayer.IsInsideInteraction() || Wraith_Static_Mesh_Check())
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() + theCamera.GetCameraRight() * 1.25;
					}
					else
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() + theCamera.GetCameraRight() * 2.5;
					}
				}
				else
				{
					if (thePlayer.IsInsideInteraction() || Wraith_Static_Mesh_Check())
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() + theCamera.GetCameraRight() * 1.25;
					}
					else if (theGame.IsFocusModeActive())
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() + theCamera.GetCameraRight() * 2.5;
					}
					else if (thePlayer.IsInCombat())
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() + theCamera.GetCameraRight() * 7;
					}
					else
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() + theCamera.GetCameraRight() * 10;
					}
				}
				
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() + theCamera.GetCameraRight() * 5 ) );}
			}
			else if (theInput.GetActionValue('GI_AxisLeftX') < -0.1 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
			{
				if (thePlayer.IsInsideInteraction() || Wraith_Static_Mesh_Check() || thePlayer.IsSwimming() || thePlayer.IsDiving())
				{
					wraith_unfreeze_pose();
					PlayerPlayAnimationWraith( 'swim_underwater_idle_ACS' );
				}
				else
				{
					wraith_freeze_pose();
				}

				if (thePlayer.IsInInterior())
				{
					if (theGame.IsFocusModeActive() || thePlayer.IsInsideInteraction() || Wraith_Static_Mesh_Check())
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() + theCamera.GetCameraRight() * -1.25;
					}
					else
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() + theCamera.GetCameraRight() * -2.5;
					}
				}
				else
				{
					if (thePlayer.IsInsideInteraction() || Wraith_Static_Mesh_Check())
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() + theCamera.GetCameraRight() * -1.25;
					}
					else if (theGame.IsFocusModeActive())
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() + theCamera.GetCameraRight() * -2.5;
					}
					else if (thePlayer.IsInCombat())
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() + theCamera.GetCameraRight() * -7;
					}
					else
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() + theCamera.GetCameraRight() * -10;
					}
				}
				
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() + theCamera.GetCameraRight() * -5 ) );}
			}
			else if (theInput.GetActionValue('GI_AxisLeftY') > 0.1 && theInput.GetActionValue('GI_AxisLeftX') > 0.1 )
			{
				if (thePlayer.IsInsideInteraction() || Wraith_Static_Mesh_Check() || thePlayer.IsSwimming() || thePlayer.IsDiving())
				{
					wraith_unfreeze_pose();
					PlayerPlayAnimationWraith( 'swim_underwater_idle_ACS' );
				}
				else
				{
					wraith_freeze_pose();
				}

				if (thePlayer.IsInInterior())
				{
					if (theGame.IsFocusModeActive() || thePlayer.IsInsideInteraction() || Wraith_Static_Mesh_Check())
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 1.25 + theCamera.GetCameraRight() * 1.25;
					}
					else
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 2.5 + theCamera.GetCameraRight() * 2.5;
					}
				}
				else
				{
					if (thePlayer.IsInsideInteraction() || Wraith_Static_Mesh_Check())
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 1.25 + theCamera.GetCameraRight() * 1.25;
					}
					else if (theGame.IsFocusModeActive())
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 2.5 + theCamera.GetCameraRight() * 2.5;
					}
					else if (thePlayer.IsInCombat())
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 7 + theCamera.GetCameraRight() * 7;
					}
					else
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 10 + theCamera.GetCameraRight() * 10;
					}
				}
				
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( (theCamera.GetCameraDirection() * 5)  + (theCamera.GetCameraRight() * 5) ) );}
			}
			else if (theInput.GetActionValue('GI_AxisLeftY') > 0.1 && theInput.GetActionValue('GI_AxisLeftX') < -0.1 )
			{
				if (thePlayer.IsInsideInteraction() || Wraith_Static_Mesh_Check() || thePlayer.IsSwimming() || thePlayer.IsDiving())
				{
					wraith_unfreeze_pose();
					PlayerPlayAnimationWraith( 'swim_underwater_idle_ACS' );
				}
				else
				{
					wraith_freeze_pose();
				}

				if (thePlayer.IsInInterior())
				{
					if (theGame.IsFocusModeActive() || thePlayer.IsInsideInteraction() || Wraith_Static_Mesh_Check())
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 1.25 + theCamera.GetCameraRight() * -1.25;
					}
					else
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 2.5 + theCamera.GetCameraRight() * -2.5;
					}
				}
				else
				{
					if (thePlayer.IsInsideInteraction() || Wraith_Static_Mesh_Check())
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 1.25 + theCamera.GetCameraRight() * -1.25;
					}
					else if (theGame.IsFocusModeActive())
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 2.5 + theCamera.GetCameraRight() * -2.5;
					}
					else if (thePlayer.IsInCombat())
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 7 + theCamera.GetCameraRight() * -7;
					}
					else
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 10 + theCamera.GetCameraRight() * -10;
					}
				}
				
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( (theCamera.GetCameraDirection() * 5)  + (theCamera.GetCameraRight() * -5) ) );}
			}
			else if (theInput.GetActionValue('GI_AxisLeftY') < -0.1 && theInput.GetActionValue('GI_AxisLeftX') > 0.1 )
			{
				if (thePlayer.IsInsideInteraction() || Wraith_Static_Mesh_Check() || thePlayer.IsSwimming() || thePlayer.IsDiving())
				{
					wraith_unfreeze_pose();
					PlayerPlayAnimationWraith( 'swim_underwater_idle_ACS' );
				}
				else
				{
					wraith_freeze_pose();
				}

				if (thePlayer.IsInInterior())
				{
					if (theGame.IsFocusModeActive() || thePlayer.IsInsideInteraction() || Wraith_Static_Mesh_Check())
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * -1.25 + theCamera.GetCameraRight() * 1.25;
					}
					else
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * -2.5 + theCamera.GetCameraRight() * 2.5;
					}
				}
				else
				{
					if (thePlayer.IsInsideInteraction() || Wraith_Static_Mesh_Check())
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * -1.25 + theCamera.GetCameraRight() * 1.25;
					}
					else if (theGame.IsFocusModeActive())
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * -2.5 + theCamera.GetCameraRight() * 2.5;
					}
					else if (thePlayer.IsInCombat())
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * -7 + theCamera.GetCameraRight() * 7;
					}
					else
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * -10 + theCamera.GetCameraRight() * 10;
					}
				}
				
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( (theCamera.GetCameraDirection() * -5)  + (theCamera.GetCameraRight() * 5) ) );}
			}
			else if (theInput.GetActionValue('GI_AxisLeftX') < -0.1 && theInput.GetActionValue('GI_AxisLeftY') < -0.1 )
			{
				if (thePlayer.IsInsideInteraction() || Wraith_Static_Mesh_Check() || thePlayer.IsSwimming() || thePlayer.IsDiving())
				{
					wraith_unfreeze_pose();
					PlayerPlayAnimationWraith( 'swim_underwater_idle_ACS' );
				}
				else
				{
					wraith_freeze_pose();
				}

				if (thePlayer.IsInInterior())
				{
					if (theGame.IsFocusModeActive() || thePlayer.IsInsideInteraction() || Wraith_Static_Mesh_Check())
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * -1.25 + theCamera.GetCameraRight() * -1.25;
					}
					else
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * -2.5 + theCamera.GetCameraRight() * -2.5;
					}
				}
				else
				{
					if (thePlayer.IsInsideInteraction() || Wraith_Static_Mesh_Check())
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * -1.25 + theCamera.GetCameraRight() * -1.25;
					}
					else if (theGame.IsFocusModeActive())
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * -2.5 + theCamera.GetCameraRight() * -2.5;
					}
					else if (thePlayer.IsInCombat())
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * -7 + theCamera.GetCameraRight() * -7;
					}
					else
					{
						dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * -10 + theCamera.GetCameraRight() * -10;
					}
				}
				
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( (theCamera.GetCameraDirection() * -5)  + (theCamera.GetCameraRight() * -5) ) );}
			}
		}
				
		movementAdjustor.SlideTo( ticket, dest1 );
	}


	function gliding_actual()
	{
		var pos1, pos2 										: Vector;
		var progres 										: float;

		camera.StopAnimation('camera_shake_loop_lvl1_1');

		theGame.GetGameCamera().StopAnimation( 'camera_shake_loop_lvl1_1' );

		camera.StopAnimation('camera_shake_loop_lvl1_5');

		theGame.GetGameCamera().StopAnimation( 'camera_shake_loop_lvl1_5' );

		thePlayer.EnableCharacterCollisions( false );

		MovementAdjustWraith();
		
		movementAdjustor.ScaleAnimation( ticket, true, false, true );
		
		//PlayerPlayAnimationGlide( 'swim_underwater_f_fast' );
			
		dest1 = thePlayer.GetWorldPosition() + thePlayer.GetWorldUp() * -0.125 + thePlayer.GetWorldForward() * 1.25 + theCamera.GetCameraDirection() * 1.25;
		
		if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				
		movementAdjustor.SlideTo( ticket, dest1 );
	}

	function Umbral_Slash_Single()
	{
		if (!thePlayer.IsActionAllowed(EIAB_Signs))
		{
			return;
		}

		//thePlayer.PlayBattleCry( 'BattleCryAttack', 1, true, false );
		thePlayer.PlayEffectSingle('special_attack_break'); thePlayer.StopEffect('special_attack_break');

		quen_sword_glow();

		ACS_Fast_Attack_Buff();

		ACS_Fast_Attack_Buff_Hit();

		MovementAdjust();

		if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

		thePlayer.SetAnimationSpeedMultiplier( 4  );

		RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
		}

		umbral_slash_index = RandDifferent(this.previous_umbral_slash_index, 2);

		switch (umbral_slash_index) 
		{	
			case 1:
			PlayerPlayAnimation( 'man_geralt_sword_attack_fast_right_1_lp_40ms_forward_ACS');
			break;

			default:
			PlayerPlayAnimation( 'man_geralt_sword_attack_fast_left_1_rp_40ms_forward_ACS');
			break;
		}	

		this.previous_umbral_slash_index = umbral_slash_index;

		//thePlayer.SoundEvent("monster_dettlaff_monster_combat_geralt_deathblow_01");

		//thePlayer.SoundEvent("monster_dettlaff_monster_combat_geralt_deathblow_02");

		ACS_Umbral_Slash_Single();
	}

	function Sparagmos()
	{
		if (!thePlayer.IsActionAllowed(EIAB_Signs))
		{
			return;
		}

		//thePlayer.PlayBattleCry( 'BattleCryAttack', 1, true, false );
		thePlayer.PlayEffectSingle('special_attack_break'); thePlayer.StopEffect('special_attack_break');

		RemoveTimer('Sparagmos_Deactivate');

		thePlayer.PlayEffectSingle('hit_lightning');
		thePlayer.StopEffect('hit_lightning');

		ACS_Fast_Attack_Buff();

		ACS_Fast_Attack_Buff_Hit();

		MovementAdjust();

		if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

		thePlayer.SetAnimationSpeedMultiplier( 0.25 );

		AddTimer('ACS_ResetAnimation', 1 , false);

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
		}

		sparagmos_index = RandDifferent(this.previous_sparagmos_index, 9);

		switch (sparagmos_index) 
		{
			case 8:
			PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_left_1_ACS');
			break;

			case 7:
			PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_up_1_ACS');
			break;

			case 6:
			PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_left_1_ACS');
			break;

			case 5:
			PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_2_ACS');
			break;

			case 4:
			PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_1_ACS');
			break;

			case 3:
			PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_1_ACS');
			break;

			case 2:
			PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_2_ACS');
			break;

			case 1:
			PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_up_1_ACS');
			break;

			default:
			PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');
			break;
		}	

		this.previous_sparagmos_index = sparagmos_index;

		//thePlayer.SoundEvent("monster_dettlaff_monster_combat_geralt_deathblow_01");

		//thePlayer.SoundEvent("monster_dettlaff_monster_combat_geralt_deathblow_02");

		ACS_Sparagmos_Effect();

		ACS_Light_Attack_Extended_Trail();

		//AddTimer('ACS_Sparagmos_Electric_Effect', 0.1, true);

		//AddTimer('ACS_Sparagmos_Damage_Delay', 0.2, false);

		thePlayer.AddTag('ACS_Sparagmos_Active');

		AddTimer('Sparagmos_Deactivate', 2, false);
	}

	function fill_lightning_array()
	{
		eff_names.Clear();

		eff_names.PushBack('diagonal_up_left');
		eff_names.PushBack('diagonal_down_left');
		eff_names.PushBack('down');
		eff_names.PushBack('up');
		eff_names.PushBack('diagonal_up_right');
		eff_names.PushBack('diagonal_down_right');
		eff_names.PushBack('right');
		eff_names.PushBack('left');
	}

	timer function ACS_Sparagmos_Electric_Effect(deltaTime : float , id : int)
	{
		fill_lightning_array();

		if (GetACSSparagmosEffect()
		&& GetACSSparagmosEffect_1()
		&& GetACSSparagmosEffect_2()
		&& GetACSSparagmosEffect_3()
		&& GetACSSparagmosEffect_4()
		&& GetACSSparagmosEffect_5()
		)
		{
			//GetACSSparagmosEffect().StopEffect('sword_slash_blue_large');
			//GetACSSparagmosEffect().PlayEffectSingle('sword_slash_blue_large');

			GetACSSparagmosEffect_2().PlayEffectSingle(eff_names[RandRange(eff_names.Size())]);
			GetACSSparagmosEffect_2().PlayEffectSingle(eff_names[RandRange(eff_names.Size())]);
			GetACSSparagmosEffect_2().PlayEffectSingle(eff_names[RandRange(eff_names.Size())]);

			GetACSSparagmosEffect_2().StopAllEffects();

			GetACSSparagmosEffect_3().PlayEffectSingle(eff_names[RandRange(eff_names.Size())]);
			GetACSSparagmosEffect_3().PlayEffectSingle(eff_names[RandRange(eff_names.Size())]);
			GetACSSparagmosEffect_3().PlayEffectSingle(eff_names[RandRange(eff_names.Size())]);

			GetACSSparagmosEffect_3().StopAllEffects();

			GetACSSparagmosEffect_4().PlayEffectSingle(eff_names[RandRange(eff_names.Size())]);
			GetACSSparagmosEffect_4().PlayEffectSingle(eff_names[RandRange(eff_names.Size())]);
			GetACSSparagmosEffect_4().PlayEffectSingle(eff_names[RandRange(eff_names.Size())]);

			GetACSSparagmosEffect_4().StopAllEffects();

			GetACSSparagmosEffect_5().PlayEffectSingle(eff_names[RandRange(eff_names.Size())]);
			GetACSSparagmosEffect_5().PlayEffectSingle(eff_names[RandRange(eff_names.Size())]);
			GetACSSparagmosEffect_5().PlayEffectSingle(eff_names[RandRange(eff_names.Size())]);

			GetACSSparagmosEffect_5().StopAllEffects();
		}
		else 
		{
			GetACSSparagmosEffect().Destroy();

			GetACSSparagmosEffect_1().Destroy();

			GetACSSparagmosEffect_2().Destroy();

			GetACSSparagmosEffect_3().Destroy();

			GetACSSparagmosEffect_4().Destroy();

			GetACSSparagmosEffect_5().Destroy();

			thePlayer.RemoveTag('ACS_Sparagmos_Active');

			RemoveTimer('ACS_Sparagmos_Electric_Effect');
		}

		if (!thePlayer.HasTag('axii_sword_equipped'))
		{
			GetACSSparagmosEffect().Destroy();

			GetACSSparagmosEffect_1().Destroy();

			GetACSSparagmosEffect_2().Destroy();

			GetACSSparagmosEffect_3().Destroy();

			GetACSSparagmosEffect_4().Destroy();

			GetACSSparagmosEffect_5().Destroy();

			thePlayer.RemoveTag('ACS_Sparagmos_Active');

			RemoveTimer('ACS_Sparagmos_Electric_Effect');
		}
	}

	timer function Sparagmos_Deactivate (deltaTime : float , id : int)
	{
		thePlayer.RemoveTag('ACS_Sparagmos_Active');

		GetACSSparagmosEffect().Destroy();

		GetACSSparagmosEffect_1().Destroy();

		GetACSSparagmosEffect_2().Destroy();

		GetACSSparagmosEffect_3().Destroy();

		GetACSSparagmosEffect_4().Destroy();

		GetACSSparagmosEffect_5().Destroy();

		RemoveTimer('ACS_Sparagmos_Electric_Effect');
	}

	timer function ACS_Sparagmos_Damage_Delay (deltaTime : float , id : int)
	{
		ACS_Sparagmos_Damage();
	}

	function Bruxa_Scream()
	{
		if (!thePlayer.IsActionAllowed(EIAB_Signs))
		{
			return;
		}

		MovementAdjust();

		if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
		}

		if (thePlayer.HasTag('vampire_claws_equipped'))
		{
			if ( thePlayer.HasBuff(EET_BlackBlood) )
			{
				thePlayer.PlayEffectSingle('special_attack_break'); thePlayer.StopEffect('special_attack_break');
				PlayerPlayAnimation ( 'bruxa_taunt_02_ACS');
			}
			else	
			{
				PlayerPlayAnimation ( 'bruxa_taunt_01_ACS');
			}
		}
		else if (thePlayer.HasTag('aard_sword_equipped'))
		{
			thePlayer.PlayEffectSingle('special_attack_break'); thePlayer.StopEffect('special_attack_break');

			PlayerPlayAnimation ( 'bruxa_taunt_02_ACS');
		}
		
		ACS_Bruxa_Scream();
	}

	function Water_Aard()
	{
		if (!thePlayer.IsActionAllowed(EIAB_Signs))
		{
			return;
		}

		//thePlayer.PlayBattleCry( 'BattleCryAttack', 1, true, false );
		thePlayer.PlayEffectSingle('special_attack_break'); thePlayer.StopEffect('special_attack_break');

		MovementAdjust();

		if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
		}

		axe_attack_alt_index_1 = RandDifferent(this.previous_axe_attack_alt_index_1 , 7);

		switch (axe_attack_alt_index_1) 
		{	
			case 6:
			PlayerPlayAnimation( 'man_npc_2haxe_taunt_03_rp_ACS');
			break;
			
			case 5:
			PlayerPlayAnimation( 'man_npc_2haxe_taunt_03_lp_ACS');
			break;
			
			case 4:
			PlayerPlayAnimation( 'man_npc_2haxe_taunt_02_rp_ACS');
			break;
			
			case 3:
			PlayerPlayAnimation( 'man_npc_2haxe_taunt_02_lp_ACS');
			break;
			
			case 2:
			PlayerPlayAnimation( 'man_npc_2haxe_attack_02_lp_ACS');
			break;
			
			case 1:
			PlayerPlayAnimation( 'man_npc_2haxe_taunt_01_rp_ACS');
			break;
			
			default:
			PlayerPlayAnimation( 'man_npc_2haxe_taunt_01_lp_ACS');
			break;
		}	

		this.previous_axe_attack_alt_index_1 = axe_attack_alt_index_1;	
		
		AddTimer('ACS_Water_Aard_Release_Repeat', 0.3, true);

		AddTimer('ACS_Water_Aard_Release_Stop', 1, false);
	}

	function Giant_Stomp()
	{
		if (!thePlayer.IsActionAllowed(EIAB_Signs))
		{
			return;
		}

		//thePlayer.PlayBattleCry( 'BattleCryAttack', 1, true, false );
		thePlayer.PlayEffectSingle('special_attack_break'); thePlayer.StopEffect('special_attack_break');

		MovementAdjust();

		if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
		}

		PlayerPlayAnimation( 'man_mage_teleport_in_ACS');

		ACS_Giant_Stomp();
	}

	function Storm_Spear()
	{
		if (!thePlayer.IsActionAllowed(EIAB_Signs))
		{
			return;
		}

		//thePlayer.PlayBattleCry( 'BattleCryAttack', 1, true, false );
		thePlayer.PlayEffectSingle('special_attack_break'); thePlayer.StopEffect('special_attack_break');

		RemoveTimer('Storm_Spear_Deactivate');

		ACS_Fast_Attack_Buff();

		ACS_Fast_Attack_Buff_Hit();

		MovementAdjust();

		if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

		thePlayer.SetAnimationSpeedMultiplier( 0.25 );

		AddTimer('ACS_ResetAnimation', 1 , false);

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
		}

		storm_spear_index = RandDifferent(this.previous_storm_spear_index, 5);

		switch (storm_spear_index) 
		{
			case 4:
			PlayerPlayAnimation( 'man_npc_2hhalberd_attack_05_rp_ACS');
			break;
			
			case 3:
			PlayerPlayAnimation( 'man_npc_2hhalberd_attack_02_rp_ACS');

			case 2:
			PlayerPlayAnimation( 'man_npc_2hhalberd_attack_04_rp_ACS');
			break;
		
			case 1:
			PlayerPlayAnimation( 'man_npc_2hhalberd_attack_03_rp_ACS');
			break;
			
			default:
			PlayerPlayAnimation( 'man_npc_2hhalberd_attack_special_01_rp_ACS');
			break;
		}	

		this.previous_storm_spear_index = storm_spear_index;

		ACS_Storm_Spear_Effect();

		ACS_Light_Attack_Extended_Trail();

		thePlayer.AddTag('ACS_Storm_Spear_Active');

		AddTimer('Storm_Spear_Check', 0.0001, true);

		AddTimer('Storm_Spear_Deactivate', 3.5, false);
	}

	timer function Storm_Spear_Deactivate (deltaTime : float , id : int)
	{
		thePlayer.RemoveTag('ACS_Storm_Spear_Active');

		ACS_Storm_Spear_Array_Destroy();

		RemoveTimer('Storm_Spear_Check');
	}

	timer function Storm_Spear_Check (deltaTime : float , id : int)
	{
		if (!thePlayer.HasTag('quen_secondary_sword_equipped'))
		{
			thePlayer.RemoveTag('ACS_Storm_Spear_Active');

			ACS_Storm_Spear_Array_Destroy();

			RemoveTimer('Storm_Spear_Check');
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function Giant_Sword()
	{
		if (!thePlayer.IsActionAllowed(EIAB_Signs))
		{
			return;
		}

		//thePlayer.PlayBattleCry( 'BattleCryAttack', 1, true, false );
		thePlayer.PlayEffectSingle('special_attack_break'); thePlayer.StopEffect('special_attack_break');

		ACS_Fast_Attack_Buff();

		ACS_Fast_Attack_Buff_Hit();

		MovementAdjust();

		if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

		thePlayer.SetAnimationSpeedMultiplier( 2 );

		AddTimer('ACS_ResetAnimation', 0.5 , false);

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
		}

		PlayerPlayAnimation( 'dialogue_witcher_combat_pose_ready');

		ACS_Giant_Sword_Fall();
	}

	function ACSFlyingAnimActual()
	{
		PlayerPlayAnimationInterrupt( 'swim_slow_f_ACS' );
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	private var specialAttackSphere 																		: CMeshComponent;

	private var specialAttackSphereScale 																	: float;

	default specialAttackSphereScale 																		= 0;

	public function ResetCiriSpecialSphereSize()
	{
		specialAttackSphereScale -= specialAttackSphereScale;
		//specialAttackSphereScale += 1;
	}

	public timer function GrowCiriSpecialSphereTimer ( dt : float, id : int)
	{ 
		if (specialAttackSphereScale >= 15)
		{
			ResetCiriSpecialSphereSize();
			RemoveTimer('GrowCiriSpecialSphereTimer');
		}
		else
		{
			GrowCiriSpecialSphereActual();
		}	
	} 

	function GrowCiriSpecialSphereActual()
	{
		specialAttackSphere = (CMeshComponent)(ACSCiriSpecialSphere().GetComponentByClassName('CMeshComponent'));

		if (specialAttackSphereScale >= 15)
		{
			ResetCiriSpecialSphereSize();
			RemoveTimer('GrowCiriSpecialSphereTimer');
		}
		else
		{
			specialAttackSphere.SetScale(Vector(
				
				specialAttackSphereScale += 0.0625,
				specialAttackSphereScale += 0.0625,
				specialAttackSphereScale += 0.0625
		
				));
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function VampiressLightAttackDamageActual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		if (GetACSTransformationVampiress().HasTag('ACS_Vampiress_Sorceress_Mode'))
		{
			attackRange = 15;

			attackAngle = 60;
		}
		else
		{
			if (GetACSTransformationVampiress().HasTag('ACS_Transformation_Bruxa'))
			{
				attackRange = 1.5;

				attackAngle = 60;
			}
			else
			{
				attackRange = 2;

				attackAngle = 90;
			}
		}

		actors.Clear();

		actors = GetACSTransformationVampiress().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationVampiress().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors);

		actors.Remove( GetACSTransformationVampiress() );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationVampiress()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud') 
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Vampiress_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Vampiress_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Vampiress_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					if ( actortarget.GetStat( BCS_Vitality ) >= maxTargetVitality * 0.25 )
					{
						damageMax = actortarget.GetStat( BCS_Vitality ) * 0.25; 

						damageMin = actortarget.GetStat( BCS_Vitality ) * 0.125; 
					}
					else if ( actortarget.GetStat( BCS_Vitality ) < maxTargetVitality * 0.25 )
					{
						damageMax = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.25; 

						damageMin = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.125; 
					}
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.125; 

							damageMin = actortarget.GetStat( BCS_Essence ) * 0.0625; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 

							damageMin = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.0625; 
						}
					}
					else
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.25; 

							damageMin = actortarget.GetStat( BCS_Essence ) * 0.125; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.25; 

							damageMin = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 
						}
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
					dmg.AddEffectInfo( EET_Stagger, 0.1 );
				}
				else
				{
					if( RandF() < 0.25 ) 
					{
						movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
						dmg.AddEffectInfo( EET_Stagger, 0.1 );
					}
				}

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');		

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(50 + damageMax,50 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(50 + damageMax,50 + damageMin) );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	


				if (GetACSTransformationVampiress().HasTag('ACS_Vampiress_Sorceress_Mode'))
				{
					ACS_Vampiress_Fx_Dummy_Spawn_Both_Hands(actortarget, actortarget.GetWorldPosition());

					thePlayer.SoundEvent("magic_sorceress_vfx_arcane_explode");
				}
				else
				{
					thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_large");

					thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_small");

					GetWitcherPlayer().GainStat(BCS_Vitality, damageMax );
				}

				theGame.GetMonsterParamsForActor(actortarget, mc, tmpName, tmpBool, tmpBool, tmpBool);

				RemoveAllCoveredBlood();

				if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), actortarget.GetWorldPosition() ) <= 5 * 5 
				&& !GetACSTransformationVampiress().HasTag('ACS_Vampiress_Sorceress_Mode')
				&& RandF() < 0.75
				)
				{
					if( ((CNewNPC)actortarget).GetBloodType() == BT_Red) 
					{
						if (actortarget.HasAbility('mon_lessog_base')
						|| actortarget.HasAbility('mon_sprigan_base')
						)
						{						
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_black');}
						} 
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Green) 
					{
						if (actortarget.HasAbility('mon_kikimore_base')
						|| actortarget.HasAbility('mon_black_spider_base')
						|| actortarget.HasAbility('mon_black_spider_ep2_base')
						)
						{						
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_black');}
						} 
						else 
						{
							if (!thePlayer.IsEffectActive('covered_blood_green_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_green_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_green', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_green');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Yellow) 
					{
						if (actortarget.HasAbility('mon_archespor_base'))
						{
							if (!thePlayer.IsEffectActive('covered_blood_yellow_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_yellow_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_yellow', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_yellow');}
						} 
						else 
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Black) 
					{
						if ( mc == MC_Vampire ) 
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
						}
						else if ( mc == MC_Magicals ) 
						{
							if (actortarget.HasAbility('mon_golem_base')
							|| actortarget.HasAbility('mon_djinn')
							|| actortarget.HasAbility('mon_gargoyle')
							)
							{
								if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

								if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_black');}
							}
							else
							{
								if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

								if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
							}
						}
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_black');}
						}
					}
					else
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

						if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
					}

					RemoveTimer('ACS_RemoveCoveredBlood');
					AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
				}
			}
		}
	}

	function VampiressLightAttackDamageActualLeft()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;
		var targetNum					: int;

		if (GetACSTransformationVampiress().HasTag('ACS_Vampiress_Sorceress_Mode'))
		{
			attackRange = 15;

			attackAngle = 60;

			targetNum = 7;
		}
		else
		{
			if (GetACSTransformationVampiress().HasTag('ACS_Transformation_Bruxa'))
			{
				attackRange = 1.5;

				attackAngle = 60;
			}
			else
			{
				attackRange = 2;

				attackAngle = 90;
			}

			targetNum = 20;
		}

		actors.Clear();

		actors = GetACSTransformationVampiress().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationVampiress().GetHeadingVector()), attackAngle, targetNum, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		actors.Remove( GetACSTransformationVampiress() );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationVampiress()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Vampiress_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Vampiress_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Vampiress_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (GetACSTransformationVampiress().HasTag('ACS_Vampiress_Sorceress_Mode'))
				{
					if (actortarget.UsesVitality()) 
					{ 
						maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

						if ( actortarget.GetStat( BCS_Vitality ) >= maxTargetVitality * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Vitality ) * 0.125; 

							damageMin = actortarget.GetStat( BCS_Vitality ) * 0.0625; 
						}
						else if ( actortarget.GetStat( BCS_Vitality ) < maxTargetVitality * 0.25 )
						{
							damageMax = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.125; 

							damageMin = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.0625; 
						}
					} 
					else if (actortarget.UsesEssence()) 
					{ 
						maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

						if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
						|| actortarget.GetRadius() >= 0.7
						)
						{
							if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
							{
								damageMax = actortarget.GetStat( BCS_Essence ) * 0.0625; 

								damageMin = actortarget.GetStat( BCS_Essence ) * 0.0625; 
							}
							else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
							{
								damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.0625; 

								damageMin = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.0625; 
							}
						}
						else
						{
							if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
							{
								damageMax = actortarget.GetStat( BCS_Essence ) * 0.125; 

								damageMin = actortarget.GetStat( BCS_Essence ) * 0.0625; 
							}
							else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
							{
								damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 

								damageMin = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.0625; 
							}
						}
					}
				}
				else
				{
					if (actortarget.UsesVitality()) 
					{ 
						maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

						if ( actortarget.GetStat( BCS_Vitality ) >= maxTargetVitality * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Vitality ) * 0.25; 

							damageMin = actortarget.GetStat( BCS_Vitality ) * 0.125; 
						}
						else if ( actortarget.GetStat( BCS_Vitality ) < maxTargetVitality * 0.25 )
						{
							damageMax = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.25; 

							damageMin = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.125; 
						}
					} 
					else if (actortarget.UsesEssence()) 
					{ 
						maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

						if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
						|| actortarget.GetRadius() >= 0.7
						)
						{
							if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
							{
								damageMax = actortarget.GetStat( BCS_Essence ) * 0.125; 

								damageMin = actortarget.GetStat( BCS_Essence ) * 0.0625; 
							}
							else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
							{
								damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 

								damageMin = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.0625; 
							}
						}
						else
						{
							if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.5 )
							{
								damageMax = actortarget.GetStat( BCS_Essence ) * 0.25; 

								damageMin = actortarget.GetStat( BCS_Essence ) * 0.125; 
							}
							else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.5 )
							{
								damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.25; 

								damageMin = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 
							}
						}
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
					dmg.AddEffectInfo( EET_Stagger, 0.1 );
				}
				else
				{
					if( RandF() < 0.25 ) 
					{
						movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
						dmg.AddEffectInfo( EET_Stagger, 0.1 );
					}
				}

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');		

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(50 + damageMax,50 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(50 + damageMax,50 + damageMin) );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;

				if (GetACSTransformationVampiress().HasTag('ACS_Vampiress_Sorceress_Mode'))
				{
					ACS_Vampiress_Fx_Dummy_Spawn_Left(actortarget, actortarget.GetWorldPosition());
				}
				else
				{
					GetWitcherPlayer().GainStat(BCS_Vitality, damageMax );

					ACS_Vampiress_Fx_Dummy_Spawn_Left_No_Tether(actortarget, actortarget.GetWorldPosition());
				}

				theGame.GetMonsterParamsForActor(actortarget, mc, tmpName, tmpBool, tmpBool, tmpBool);

				RemoveAllCoveredBlood();

				if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), actortarget.GetWorldPosition() ) <= 5 * 5 
				&& !GetACSTransformationVampiress().HasTag('ACS_Vampiress_Sorceress_Mode')
				&& RandF() < 0.75
				)
				{
					if( ((CNewNPC)actortarget).GetBloodType() == BT_Red) 
					{
						if (actortarget.HasAbility('mon_lessog_base')
						|| actortarget.HasAbility('mon_sprigan_base')
						)
						{						
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_black');}
						} 
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Green) 
					{
						if (actortarget.HasAbility('mon_kikimore_base')
						|| actortarget.HasAbility('mon_black_spider_base')
						|| actortarget.HasAbility('mon_black_spider_ep2_base')
						)
						{						
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_black');}
						} 
						else 
						{
							if (!thePlayer.IsEffectActive('covered_blood_green_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_green_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_green', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_green');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Yellow) 
					{
						if (actortarget.HasAbility('mon_archespor_base'))
						{
							if (!thePlayer.IsEffectActive('covered_blood_yellow_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_yellow_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_yellow', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_yellow');}
						} 
						else 
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Black) 
					{
						if ( mc == MC_Vampire ) 
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
						}
						else if ( mc == MC_Magicals ) 
						{
							if (actortarget.HasAbility('mon_golem_base')
							|| actortarget.HasAbility('mon_djinn')
							|| actortarget.HasAbility('mon_gargoyle')
							)
							{
								if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

								if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_black');}
							}
							else
							{
								if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

								if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
							}
						}
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_black');}
						}
					}
					else
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

						if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
					}

					RemoveTimer('ACS_RemoveCoveredBlood');
					AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
				}
			}
		}
	}

	function VampiressLightAttackDamageActualRight()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;
		var targetNum					: int;

		if (GetACSTransformationVampiress().HasTag('ACS_Vampiress_Sorceress_Mode'))
		{
			attackRange = 15;

			attackAngle = 60;

			targetNum = 7;
		}
		else
		{
			if (GetACSTransformationVampiress().HasTag('ACS_Transformation_Bruxa'))
			{
				attackRange = 1.5;

				attackAngle = 60;
			}
			else
			{
				attackRange = 2;

				attackAngle = 90;
			}

			targetNum = 20;
		}

		actors.Clear();

		actors = GetACSTransformationVampiress().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationVampiress().GetHeadingVector()), attackAngle, targetNum, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors);

		actors.Remove( GetACSTransformationVampiress() );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationVampiress()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Vampiress_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Vampiress_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Vampiress_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (GetACSTransformationVampiress().HasTag('ACS_Vampiress_Sorceress_Mode'))
				{
					if (actortarget.UsesVitality()) 
					{ 
						maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

						if ( actortarget.GetStat( BCS_Vitality ) >= maxTargetVitality * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Vitality ) * 0.125; 

							damageMin = actortarget.GetStat( BCS_Vitality ) * 0.0625; 
						}
						else if ( actortarget.GetStat( BCS_Vitality ) < maxTargetVitality * 0.25 )
						{
							damageMax = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.125; 

							damageMin = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.0625; 
						}
					} 
					else if (actortarget.UsesEssence()) 
					{ 
						maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

						if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
						|| actortarget.GetRadius() >= 0.7
						)
						{
							if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
							{
								damageMax = actortarget.GetStat( BCS_Essence ) * 0.0625; 

								damageMin = actortarget.GetStat( BCS_Essence ) * 0.0625; 
							}
							else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
							{
								damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.0625; 

								damageMin = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.0625; 
							}
						}
						else
						{
							if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
							{
								damageMax = actortarget.GetStat( BCS_Essence ) * 0.125; 

								damageMin = actortarget.GetStat( BCS_Essence ) * 0.0625; 
							}
							else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
							{
								damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 

								damageMin = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.0625; 
							}
						}
					}
				}
				else
				{
					if (actortarget.UsesVitality()) 
					{ 
						maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

						if ( actortarget.GetStat( BCS_Vitality ) >= maxTargetVitality * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Vitality ) * 0.25; 

							damageMin = actortarget.GetStat( BCS_Vitality ) * 0.125; 
						}
						else if ( actortarget.GetStat( BCS_Vitality ) < maxTargetVitality * 0.25 )
						{
							damageMax = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.25; 

							damageMin = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.125; 
						}
					} 
					else if (actortarget.UsesEssence()) 
					{ 
						maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

						if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
						|| actortarget.GetRadius() >= 0.7
						)
						{
							if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
							{
								damageMax = actortarget.GetStat( BCS_Essence ) * 0.125; 

								damageMin = actortarget.GetStat( BCS_Essence ) * 0.0625; 
							}
							else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
							{
								damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 

								damageMin = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.0625; 
							}
						}
						else
						{
							if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.5 )
							{
								damageMax = actortarget.GetStat( BCS_Essence ) * 0.25; 

								damageMin = actortarget.GetStat( BCS_Essence ) * 0.125; 
							}
							else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.5 )
							{
								damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.25; 

								damageMin = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 
							}
						}
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
					dmg.AddEffectInfo( EET_Stagger, 0.1 );
				}
				else
				{
					if( RandF() < 0.25 ) 
					{
						movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
						dmg.AddEffectInfo( EET_Stagger, 0.1 );
					}
				}

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');		

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(50 + damageMax,50 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(50 + damageMax,50 + damageMin) );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;

				if (GetACSTransformationVampiress().HasTag('ACS_Vampiress_Sorceress_Mode'))
				{
					ACS_Vampiress_Fx_Dummy_Spawn_Right(actortarget, actortarget.GetWorldPosition());
				}
				else
				{
					GetWitcherPlayer().GainStat(BCS_Vitality, damageMax );

					ACS_Vampiress_Fx_Dummy_Spawn_Right_No_Tether(actortarget, actortarget.GetWorldPosition());
				}

				theGame.GetMonsterParamsForActor(actortarget, mc, tmpName, tmpBool, tmpBool, tmpBool);

				RemoveAllCoveredBlood();

				if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), actortarget.GetWorldPosition() ) <= 5 * 5 
				&& !GetACSTransformationVampiress().HasTag('ACS_Vampiress_Sorceress_Mode')
				&& RandF() < 0.75
				)
				{
					if( ((CNewNPC)actortarget).GetBloodType() == BT_Red) 
					{
						if (actortarget.HasAbility('mon_lessog_base')
						|| actortarget.HasAbility('mon_sprigan_base')
						)
						{						
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_black');}
						} 
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Green) 
					{
						if (actortarget.HasAbility('mon_kikimore_base')
						|| actortarget.HasAbility('mon_black_spider_base')
						|| actortarget.HasAbility('mon_black_spider_ep2_base')
						)
						{						
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_black');}
						} 
						else 
						{
							if (!thePlayer.IsEffectActive('covered_blood_green_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_green_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_green', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_green');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Yellow) 
					{
						if (actortarget.HasAbility('mon_archespor_base'))
						{
							if (!thePlayer.IsEffectActive('covered_blood_yellow_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_yellow_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_yellow', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_yellow');}
						} 
						else 
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Black) 
					{
						if ( mc == MC_Vampire ) 
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
						}
						else if ( mc == MC_Magicals ) 
						{
							if (actortarget.HasAbility('mon_golem_base')
							|| actortarget.HasAbility('mon_djinn')
							|| actortarget.HasAbility('mon_gargoyle')
							)
							{
								if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

								if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_black');}
							}
							else
							{
								if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

								if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
							}
						}
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_black');}
						}
					}
					else
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

						if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
					}

					RemoveTimer('ACS_RemoveCoveredBlood');
					AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
				}
			}
		}
	}

	public timer function VampiressLightAttackDamage(deltaTime : float , id : int)
	{
		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q301');
		GetACSTransformationVampiress().StopEffect('fx_quest_q301');

		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q301_l');
		GetACSTransformationVampiress().StopEffect('fx_quest_q301_l');

		VampiressLightAttackDamageActual();
	}

	public timer function VampiressLightAttackDamageLeft(deltaTime : float , id : int)
	{
		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q301');
		GetACSTransformationVampiress().StopEffect('fx_quest_q301');

		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q301_l');
		GetACSTransformationVampiress().StopEffect('fx_quest_q301_l');

		VampiressLightAttackDamageActualLeft();
	}

	public timer function VampiressLightAttackDamageLeft_add1(deltaTime : float , id : int)
	{
		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q301');
		GetACSTransformationVampiress().StopEffect('fx_quest_q301');

		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q301_l');
		GetACSTransformationVampiress().StopEffect('fx_quest_q301_l');

		VampiressLightAttackDamageActualLeft();
	}

	public timer function VampiressLightAttackDamageLeft_add2(deltaTime : float , id : int)
	{
		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q301');
		GetACSTransformationVampiress().StopEffect('fx_quest_q301');

		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q301_l');
		GetACSTransformationVampiress().StopEffect('fx_quest_q301_l');

		VampiressLightAttackDamageActualLeft();
	}

	public timer function VampiressLightAttackDamageLeft_add3(deltaTime : float , id : int)
	{
		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q301');
		GetACSTransformationVampiress().StopEffect('fx_quest_q301');

		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q301_l');
		GetACSTransformationVampiress().StopEffect('fx_quest_q301_l');

		VampiressLightAttackDamageActualLeft();
	}

	public timer function VampiressLightAttackDamageLeft_add4(deltaTime : float , id : int)
	{
		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q301');
		GetACSTransformationVampiress().StopEffect('fx_quest_q301');

		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q301_l');
		GetACSTransformationVampiress().StopEffect('fx_quest_q301_l');

		VampiressLightAttackDamageActualLeft();
	}

	public timer function VampiressLightAttackDamageRight(deltaTime : float , id : int)
	{
		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q301');
		GetACSTransformationVampiress().StopEffect('fx_quest_q301');

		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q301_l');
		GetACSTransformationVampiress().StopEffect('fx_quest_q301_l');

		VampiressLightAttackDamageActualRight();
	}

	public timer function VampiressLightAttackDamageRight_add1(deltaTime : float , id : int)
	{
		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q301');
		GetACSTransformationVampiress().StopEffect('fx_quest_q301');

		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q301_l');
		GetACSTransformationVampiress().StopEffect('fx_quest_q301_l');

		VampiressLightAttackDamageActualRight();
	}

	public timer function VampiressLightAttackDamageRight_add2(deltaTime : float , id : int)
	{
		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q301');
		GetACSTransformationVampiress().StopEffect('fx_quest_q301');

		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q301_l');
		GetACSTransformationVampiress().StopEffect('fx_quest_q301_l');

		VampiressLightAttackDamageActualRight();
	}

	public timer function VampiressLightAttackDamageRight_add3(deltaTime : float , id : int)
	{
		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q301');
		GetACSTransformationVampiress().StopEffect('fx_quest_q301');

		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q301_l');
		GetACSTransformationVampiress().StopEffect('fx_quest_q301_l');

		VampiressLightAttackDamageActualRight();
	}

	public timer function VampiressLightAttackDamageRight_add4(deltaTime : float , id : int)
	{
		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q301');
		GetACSTransformationVampiress().StopEffect('fx_quest_q301');

		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q301_l');
		GetACSTransformationVampiress().StopEffect('fx_quest_q301_l');

		VampiressLightAttackDamageActualRight();
	}

	function VampiressHeavyAttackDamageActual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		if (GetACSTransformationVampiress().HasTag('ACS_Vampiress_Sorceress_Mode'))
		{
			attackRange = 15;

			attackAngle = 120;
		}
		else
		{
			if (GetACSTransformationVampiress().HasTag('ACS_Transformation_Bruxa'))
			{
				attackRange = 1.5;

				attackAngle = 60;
			}
			else
			{
				attackRange = 2;

				attackAngle = 90;
			}
		}

		actors.Clear();

		actors = GetACSTransformationVampiress().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationVampiress().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );
		actors.Remove( GetACSTransformationVampiress() );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationVampiress()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Vampiress_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Vampiress_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Vampiress_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					if ( actortarget.GetStat( BCS_Vitality ) >= maxTargetVitality * 0.25 )
					{
						damageMax = actortarget.GetStat( BCS_Vitality ) * 0.25; 
					}
					else if ( actortarget.GetStat( BCS_Vitality ) < maxTargetVitality * 0.25 )
					{
						damageMax = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.25; 
					}
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.125; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 
						}
					}
					else
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.25; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.25; 
						}
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				dmg.AddEffectInfo( EET_Stagger, 3 );

				dmg.AddEffectInfo( EET_Bleeding, 3 );

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');		

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, 100 + damageMax );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, 100 + damageMax );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	

				if (GetACSTransformationVampiress().HasTag('ACS_Vampiress_Sorceress_Mode'))
				{
					ACS_Vampiress_Fx_Dummy_Spawn_Both_Hands(actortarget, actortarget.GetWorldPosition());
				}
				else
				{
					GetWitcherPlayer().GainStat(BCS_Vitality, damageMax );

					ACS_Vampiress_Fx_Dummy_Spawn_Both_Hands_No_Tether(actortarget, actortarget.GetWorldPosition());
				}

				theGame.GetMonsterParamsForActor(actortarget, mc, tmpName, tmpBool, tmpBool, tmpBool);

				RemoveAllCoveredBlood();

				if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), actortarget.GetWorldPosition() ) <= 5 * 5 
				&& !GetACSTransformationVampiress().HasTag('ACS_Vampiress_Sorceress_Mode')
				&& RandF() < 0.75
				)
				{
					if( ((CNewNPC)actortarget).GetBloodType() == BT_Red) 
					{
						if (actortarget.HasAbility('mon_lessog_base')
						|| actortarget.HasAbility('mon_sprigan_base')
						)
						{						
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_black');}
						} 
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Green) 
					{
						if (actortarget.HasAbility('mon_kikimore_base')
						|| actortarget.HasAbility('mon_black_spider_base')
						|| actortarget.HasAbility('mon_black_spider_ep2_base')
						)
						{						
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_black');}
						} 
						else 
						{
							if (!thePlayer.IsEffectActive('covered_blood_green_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_green_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_green', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_green');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Yellow) 
					{
						if (actortarget.HasAbility('mon_archespor_base'))
						{
							if (!thePlayer.IsEffectActive('covered_blood_yellow_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_yellow_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_yellow', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_yellow');}
						} 
						else 
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Black) 
					{
						if ( mc == MC_Vampire ) 
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
						}
						else if ( mc == MC_Magicals ) 
						{
							if (actortarget.HasAbility('mon_golem_base')
							|| actortarget.HasAbility('mon_djinn')
							|| actortarget.HasAbility('mon_gargoyle')
							)
							{
								if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

								if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_black');}
							}
							else
							{
								if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

								if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
							}
						}
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_black');}
						}
					}
					else
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

						if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
					}

					RemoveTimer('ACS_RemoveCoveredBlood');
					AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
				}
			}
		}
	}

	public timer function VampiressHeavyAttackDamage(deltaTime : float , id : int)
	{
		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q309');
		GetACSTransformationVampiress().StopEffect('fx_quest_q309');

		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q309_l');
		GetACSTransformationVampiress().StopEffect('fx_quest_q309_l');

		VampiressHeavyAttackDamageActual();
	}

	public timer function VampiressHeavyAttackDamage_add1(deltaTime : float , id : int)
	{
		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q301');
		GetACSTransformationVampiress().StopEffect('fx_quest_q301');

		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q301_l');
		GetACSTransformationVampiress().StopEffect('fx_quest_q301_l');

		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q309');
		GetACSTransformationVampiress().StopEffect('fx_quest_q309');

		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q309_l');
		GetACSTransformationVampiress().StopEffect('fx_quest_q309_l');

		VampiressHeavyAttackDamageActual();
	}

	public timer function VampiressHeavyAttackDamage_add2(deltaTime : float , id : int)
	{
		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q309');
		GetACSTransformationVampiress().StopEffect('fx_quest_q309');

		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q309_l');
		GetACSTransformationVampiress().StopEffect('fx_quest_q309_l');

		VampiressHeavyAttackDamageActual();
	}

	public timer function VampiressHeavyAttackDamage_add3(deltaTime : float , id : int)
	{
		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q309');
		GetACSTransformationVampiress().StopEffect('fx_quest_q309');

		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q309_l');
		GetACSTransformationVampiress().StopEffect('fx_quest_q309_l');

		VampiressHeavyAttackDamageActual();
	}

	public timer function VampiressHeavyAttackDamage_add4(deltaTime : float , id : int)
	{
		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q309');
		GetACSTransformationVampiress().StopEffect('fx_quest_q309');

		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q309_l');
		GetACSTransformationVampiress().StopEffect('fx_quest_q309_l');

		VampiressHeavyAttackDamageActual();
	}

	function VampiressSpecialLightAttackDamageActual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		if (GetACSTransformationVampiress().HasTag('ACS_Vampiress_Sorceress_Mode'))
		{
			attackRange = 15;

			attackAngle = 120;
		}
		else
		{
			if (GetACSTransformationVampiress().HasTag('ACS_Transformation_Bruxa'))
			{
				attackRange = 1.5;

				attackAngle = 60;
			}
			else
			{
				attackRange = 2;

				attackAngle = 90;
			}
		}

		actors.Clear();

		actors = GetACSTransformationVampiress().GetNPCsAndPlayersInRange(attackRange, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationVampiress()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Vampiress_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Vampiress_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Vampiress_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					if ( actortarget.GetStat( BCS_Vitality ) >= maxTargetVitality * 0.5 )
					{
						damageMax = actortarget.GetStat( BCS_Vitality ) * 0.25; 
					}
					else if ( actortarget.GetStat( BCS_Vitality ) < maxTargetVitality * 0.5 )
					{
						damageMax = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.25; 
					}
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.5 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.125; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.5 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 
						}
					}
					else
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.5 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.25; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.5 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.25; 
						}
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );

				dmg.AddEffectInfo( EET_Stagger, 3 );

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				//thePlayer.GainStat( BCS_Vitality, thePlayer.GetStatMax( BCS_Vitality) * 0.05 );

				ACS_Vampiress_Fx_Dummy_Spawn_Both_Hands_No_Tether(actortarget, actortarget.GetWorldPosition());

				GetWitcherPlayer().GainStat(BCS_Vitality, damageMax );

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, 200 + damageMax );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, 200 + damageMax );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	

				theGame.GetMonsterParamsForActor(actortarget, mc, tmpName, tmpBool, tmpBool, tmpBool);

				RemoveAllCoveredBlood();

				if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), actortarget.GetWorldPosition() ) <= 5 * 5 
				&& !GetACSTransformationVampiress().HasTag('ACS_Vampiress_Sorceress_Mode')
				&& RandF() < 0.75
				)
				{
					if( ((CNewNPC)actortarget).GetBloodType() == BT_Red) 
					{
						if (actortarget.HasAbility('mon_lessog_base')
						|| actortarget.HasAbility('mon_sprigan_base')
						)
						{						
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_black');}
						} 
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Green) 
					{
						if (actortarget.HasAbility('mon_kikimore_base')
						|| actortarget.HasAbility('mon_black_spider_base')
						|| actortarget.HasAbility('mon_black_spider_ep2_base')
						)
						{						
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_black');}
						} 
						else 
						{
							if (!thePlayer.IsEffectActive('covered_blood_green_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_green_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_green', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_green');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Yellow) 
					{
						if (actortarget.HasAbility('mon_archespor_base'))
						{
							if (!thePlayer.IsEffectActive('covered_blood_yellow_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_yellow_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_yellow', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_yellow');}
						} 
						else 
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Black) 
					{
						if ( mc == MC_Vampire ) 
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
						}
						else if ( mc == MC_Magicals ) 
						{
							if (actortarget.HasAbility('mon_golem_base')
							|| actortarget.HasAbility('mon_djinn')
							|| actortarget.HasAbility('mon_gargoyle')
							)
							{
								if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

								if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_black');}
							}
							else
							{
								if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

								if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
							}
						}
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_black');}
						}
					}
					else
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

						if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
					}

					RemoveTimer('ACS_RemoveCoveredBlood');
					AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
				}
			}
		}
	}

	function VampiressSpecialLightAttackDamageActualLeft()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		if (GetACSTransformationVampiress().HasTag('ACS_Vampiress_Sorceress_Mode'))
		{
			attackRange = 15;

			attackAngle = 120;
		}
		else
		{
			if (GetACSTransformationVampiress().HasTag('ACS_Transformation_Bruxa'))
			{
				attackRange = 1.5;

				attackAngle = 60;
			}
			else
			{
				attackRange = 2;

				attackAngle = 90;
			}
		}

		actors.Clear();

		actors = GetACSTransformationVampiress().GetNPCsAndPlayersInRange(attackRange, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationVampiress()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Vampiress_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Vampiress_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Vampiress_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					if ( actortarget.GetStat( BCS_Vitality ) >= maxTargetVitality * 0.5 )
					{
						damageMax = actortarget.GetStat( BCS_Vitality ) * 0.25; 
					}
					else if ( actortarget.GetStat( BCS_Vitality ) < maxTargetVitality * 0.5 )
					{
						damageMax = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.25; 
					}
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.5 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.125; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.5 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 
						}
					}
					else
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.5 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.25; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.5 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.25; 
						}
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );

				dmg.AddEffectInfo( EET_Stagger, 3 );

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				//thePlayer.GainStat( BCS_Vitality, thePlayer.GetStatMax( BCS_Vitality) * 0.05 );

				ACS_Vampiress_Fx_Dummy_Spawn_Both_Hands_No_Tether(actortarget, actortarget.GetWorldPosition());

				GetWitcherPlayer().GainStat(BCS_Vitality, damageMax );

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, 200 + damageMax );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, 200 + damageMax );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	

				theGame.GetMonsterParamsForActor(actortarget, mc, tmpName, tmpBool, tmpBool, tmpBool);

				RemoveAllCoveredBlood();

				if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), actortarget.GetWorldPosition() ) <= 5 * 5 
				&& !GetACSTransformationVampiress().HasTag('ACS_Vampiress_Sorceress_Mode')
				&& RandF() < 0.75
				)
				{
					if( ((CNewNPC)actortarget).GetBloodType() == BT_Red) 
					{
						if (actortarget.HasAbility('mon_lessog_base')
						|| actortarget.HasAbility('mon_sprigan_base')
						)
						{						
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_black');}
						} 
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Green) 
					{
						if (actortarget.HasAbility('mon_kikimore_base')
						|| actortarget.HasAbility('mon_black_spider_base')
						|| actortarget.HasAbility('mon_black_spider_ep2_base')
						)
						{						
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_black');}
						} 
						else 
						{
							if (!thePlayer.IsEffectActive('covered_blood_green_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_green_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_green', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_green');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Yellow) 
					{
						if (actortarget.HasAbility('mon_archespor_base'))
						{
							if (!thePlayer.IsEffectActive('covered_blood_yellow_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_yellow_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_yellow', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_yellow');}
						} 
						else 
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Black) 
					{
						if ( mc == MC_Vampire ) 
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
						}
						else if ( mc == MC_Magicals ) 
						{
							if (actortarget.HasAbility('mon_golem_base')
							|| actortarget.HasAbility('mon_djinn')
							|| actortarget.HasAbility('mon_gargoyle')
							)
							{
								if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

								if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_black');}
							}
							else
							{
								if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

								if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
							}
						}
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_black');}
						}
					}
					else
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

						if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
					}

					RemoveTimer('ACS_RemoveCoveredBlood');
					AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
				}
			}
		}
	}

	function VampiressSpecialLightAttackDamageActualRight()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		if (GetACSTransformationVampiress().HasTag('ACS_Vampiress_Sorceress_Mode'))
		{
			attackRange = 15;

			attackAngle = 120;
		}
		else
		{
			if (GetACSTransformationVampiress().HasTag('ACS_Transformation_Bruxa'))
			{
				attackRange = 1.5;

				attackAngle = 60;
			}
			else
			{
				attackRange = 2;

				attackAngle = 90;
			}
		}

		actors.Clear();

		actors = GetACSTransformationVampiress().GetNPCsAndPlayersInRange(attackRange, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationVampiress()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Vampiress_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Vampiress_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Vampiress_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					if ( actortarget.GetStat( BCS_Vitality ) >= maxTargetVitality * 0.5 )
					{
						damageMax = actortarget.GetStat( BCS_Vitality ) * 0.25; 
					}
					else if ( actortarget.GetStat( BCS_Vitality ) < maxTargetVitality * 0.5 )
					{
						damageMax = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.25; 
					}
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.5 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.125; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.5 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 
						}
					}
					else
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.5 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.25; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.5 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.25; 
						}
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );

				dmg.AddEffectInfo( EET_Stagger, 3 );

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				//thePlayer.GainStat( BCS_Vitality, thePlayer.GetStatMax( BCS_Vitality) * 0.05 );

				ACS_Vampiress_Fx_Dummy_Spawn_Both_Hands_No_Tether(actortarget, actortarget.GetWorldPosition());

				GetWitcherPlayer().GainStat(BCS_Vitality, damageMax );

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, 200 + damageMax );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, 200 + damageMax );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	

				theGame.GetMonsterParamsForActor(actortarget, mc, tmpName, tmpBool, tmpBool, tmpBool);

				RemoveAllCoveredBlood();

				if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), actortarget.GetWorldPosition() ) <= 5 * 5 
				&& !GetACSTransformationVampiress().HasTag('ACS_Vampiress_Sorceress_Mode')
				&& RandF() < 0.75
				)
				{
					if( ((CNewNPC)actortarget).GetBloodType() == BT_Red) 
					{
						if (actortarget.HasAbility('mon_lessog_base')
						|| actortarget.HasAbility('mon_sprigan_base')
						)
						{						
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_black');}
						} 
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Green) 
					{
						if (actortarget.HasAbility('mon_kikimore_base')
						|| actortarget.HasAbility('mon_black_spider_base')
						|| actortarget.HasAbility('mon_black_spider_ep2_base')
						)
						{						
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_black');}
						} 
						else 
						{
							if (!thePlayer.IsEffectActive('covered_blood_green_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_green_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_green', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_green');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Yellow) 
					{
						if (actortarget.HasAbility('mon_archespor_base'))
						{
							if (!thePlayer.IsEffectActive('covered_blood_yellow_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_yellow_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_yellow', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_yellow');}
						} 
						else 
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Black) 
					{
						if ( mc == MC_Vampire ) 
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
						}
						else if ( mc == MC_Magicals ) 
						{
							if (actortarget.HasAbility('mon_golem_base')
							|| actortarget.HasAbility('mon_djinn')
							|| actortarget.HasAbility('mon_gargoyle')
							)
							{
								if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

								if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_black');}
							}
							else
							{
								if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

								if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
							}
						}
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test_black');}
						}
					}
					else
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

						if(!GetACSTransformationVampiress().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampiress().PlayEffectSingle('blood_effect_claws_test');}
					}

					RemoveTimer('ACS_RemoveCoveredBlood');
					AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
				}
			}
		}
	}

	public timer function VampiressSpecialLightAttackDamage(deltaTime : float , id : int)
	{
		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q301');
		GetACSTransformationVampiress().StopEffect('fx_quest_q301');

		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q301_l');
		GetACSTransformationVampiress().StopEffect('fx_quest_q301_l');

		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q309');
		GetACSTransformationVampiress().StopEffect('fx_quest_q309');

		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q309_l');
		GetACSTransformationVampiress().StopEffect('fx_quest_q309_l');

		VampiressSpecialLightAttackDamageActual();
	}

	public timer function VampiressSpecialLightAttackDamageLeft(deltaTime : float , id : int)
	{
		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q301');
		GetACSTransformationVampiress().StopEffect('fx_quest_q301');

		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q301_l');
		GetACSTransformationVampiress().StopEffect('fx_quest_q301_l');

		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q309');
		GetACSTransformationVampiress().StopEffect('fx_quest_q309');

		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q309_l');
		GetACSTransformationVampiress().StopEffect('fx_quest_q309_l');

		VampiressSpecialLightAttackDamageActualLeft();
	}

	public timer function VampiressSpecialLightAttackDamageRight(deltaTime : float , id : int)
	{
		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q301');
		GetACSTransformationVampiress().StopEffect('fx_quest_q301');

		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q301_l');
		GetACSTransformationVampiress().StopEffect('fx_quest_q301_l');

		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q309');
		GetACSTransformationVampiress().StopEffect('fx_quest_q309');

		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q309_l');
		GetACSTransformationVampiress().StopEffect('fx_quest_q309_l');

		VampiressSpecialLightAttackDamageActualRight();
	}

	function VampiressRepelDamageActual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		if (GetACSTransformationVampiress().HasTag('ACS_Vampiress_Sorceress_Mode'))
		{
			attackRange = 6;

			attackAngle = 360;
		}
		else
		{
			if (GetACSTransformationVampiress().HasTag('ACS_Transformation_Bruxa'))
			{
				attackRange = 1.5;

				attackAngle = 30;
			}
			else
			{
				attackRange = 4;

				attackAngle = 90;
			}
		}

		actors.Clear();

		actors = GetACSTransformationVampiress().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationVampiress().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors);
		actors.Remove( GetACSTransformationVampiress() );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationVampiress()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Vampiress_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Vampiress_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Vampiress_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					if ( actortarget.GetStat( BCS_Vitality ) >= maxTargetVitality * 0.25 )
					{
						damageMax = actortarget.GetStat( BCS_Vitality ) * 0.00025; 

						damageMin = actortarget.GetStat( BCS_Vitality ) * 0.000125; 
					}
					else if ( actortarget.GetStat( BCS_Vitality ) < maxTargetVitality * 0.25 )
					{
						damageMax = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.00025; 

						damageMin = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.000125; 
					}
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.000125; 

							damageMin = actortarget.GetStat( BCS_Essence ) * 0.0000625; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.000125; 

							damageMin = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.0000625; 
						}
					}
					else
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.00025; 

							damageMin = actortarget.GetStat( BCS_Essence ) * 0.000125; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.00025; 

							damageMin = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.000125; 
						}
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (GetACSTransformationVampiress().HasTag('ACS_Vampiress_Sorceress_Mode'))
				{
					dmg.AddEffectInfo( EET_Stagger, 2 );
				}

				if (GetACSTransformationVampiress().HasTag('ACS_Transformation_Bruxa'))
				{
					GetWitcherPlayer().GainStat(BCS_Vitality, damageMax );
				}

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');		

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(50 + damageMax,50 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(50 + damageMax,50 + damageMin) );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	

				if (GetACSTransformationVampiress().HasTag('ACS_Vampiress_Sorceress_Mode'))
				{
					thePlayer.SoundEvent("magic_sorceress_vfx_arcane_explode");
				}
				else
				{
					thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_large");

					thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_small");
				}
			}
		}
	}

	public timer function VampiressRepelDamage(deltaTime : float , id : int)
	{
		VampiressRepelDamageActual();

		if (GetACSTransformationVampiress().HasTag('ACS_Transformation_Bruxa'))
		{
			return;
		}

		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q301');
		GetACSTransformationVampiress().StopEffect('fx_quest_q301');

		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q301_l');
		GetACSTransformationVampiress().StopEffect('fx_quest_q301_l');

		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q309');
		GetACSTransformationVampiress().StopEffect('fx_quest_q309');

		GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q309_l');
		GetACSTransformationVampiress().StopEffect('fx_quest_q309_l');

		if (!GetACSTransformationVampiress().HasTag('ACS_Vampiress_Sorceress_Mode'))
		{
			GetACSTransformationVampiress().PlayEffectSingle('fx_push_triss');
			GetACSTransformationVampiress().StopEffect('fx_push_triss');
		}
		else
		{
			GetACSTransformationVampiress().PlayEffectSingle('teleport_in_djinn');
			GetACSTransformationVampiress().StopEffect('teleport_in_djinn');
		}
	}

	private var vampiress_light_attack_index_1																									: int;
	default vampiress_light_attack_index_1 																										= -1;

	private var previous_vampiress_light_attack_index_1																							: int;
	default previous_vampiress_light_attack_index_1 																							= -1;

	private var vampiress_light_attack_index_2																									: int;
	default vampiress_light_attack_index_2 																										= -1;

	private var previous_vampiress_light_attack_index_2																							: int;
	default previous_vampiress_light_attack_index_2 																							= -1;




	private var vampiress_light_attack_ranged_index_1																							: int;
	default vampiress_light_attack_ranged_index_1 																								= -1;

	private var previous_vampiress_light_attack_ranged_index_1																					: int;
	default previous_vampiress_light_attack_ranged_index_1 																						= -1;

	private var vampiress_light_attack_ranged_index_2																							: int;
	default vampiress_light_attack_ranged_index_2 																								= -1;

	private var previous_vampiress_light_attack_ranged_index_2																					: int;
	default previous_vampiress_light_attack_ranged_index_2 																						= -1;



	private var vampiress_heavy_attack_index_1																									: int;
	default vampiress_heavy_attack_index_1 																										= -1;

	private var previous_vampiress_heavy_attack_index_1																							: int;
	default previous_vampiress_heavy_attack_index_1 																							= -1;

	private var vampiress_heavy_attack_index_2																									: int;
	default vampiress_heavy_attack_index_2 																										= -1;

	private var previous_vampiress_heavy_attack_index_2																							: int;
	default previous_vampiress_heavy_attack_index_2 																							= -1;



	private var vampiress_heavy_attack_ranged_index_1																							: int;
	default vampiress_heavy_attack_ranged_index_1 																								= -1;

	private var previous_vampiress_heavy_attack_ranged_index_1																					: int;
	default previous_vampiress_heavy_attack_ranged_index_1 																						= -1;

	private var vampiress_heavy_attack_ranged_index_2																							: int;
	default vampiress_heavy_attack_ranged_index_2 																								= -1;

	private var previous_vampiress_heavy_attack_ranged_index_2																					: int;
	default previous_vampiress_heavy_attack_ranged_index_2 																						= -1;



	private var vampiress_special_attack_index_1																								: int;
	default vampiress_special_attack_index_1 																									= -1;

	private var previous_vampiress_special_attack_index_1																						: int;
	default previous_vampiress_special_attack_index_1 																							= -1;

	private var vampiress_special_attack_index_2																								: int;
	default vampiress_special_attack_index_2 																									= -1;

	private var previous_vampiress_special_attack_index_2																						: int;
	default previous_vampiress_special_attack_index_2 																							= -1;





	private var vampiress_special_attack_ranged_index_1																							: int;
	default vampiress_special_attack_ranged_index_1 																							= -1;

	private var previous_vampiress_special_attack_ranged_index_1																				: int;
	default previous_vampiress_special_attack_ranged_index_1 																					= -1;

	private var vampiress_special_attack_ranged_index_2																							: int;
	default vampiress_special_attack_ranged_index_2 																							= -1;

	private var previous_vampiress_special_attack_ranged_index_2																				: int;
	default previous_vampiress_special_attack_ranged_index_2 																					= -1;




	private var vampiress_dash_index_1																											: int;
	default vampiress_special_attack_ranged_index_1 																							= -1;

	private var previous_vampiress_dash_index_1																									: int;
	default previous_vampiress_special_attack_ranged_index_1 																					= -1;



	private var vampiress_repel_index_1																											: int;
	default vampiress_repel_index_1 																											= -1;

	private var previous_vampiress_repel_index_1																								: int;
	default previous_vampiress_repel_index_1 																									= -1;



	function ACS_Transformation_Vampiress_Light_Attacks_Melee()
	{
		if (ACS_can_perform_transformation_light_attack())
		{
			ACS_refresh_transformation_light_attack_cooldown();

			ACSVampiressRemoveMoveTimers();

			thePlayer.RemoveTag('ACS_Transformation_Vampiress_Is_Moving');

			if (thePlayer.IsInCombat())
			{
				ACSTransformVampiressMovementAdjustRotateTowardsEnemy();
			}
			else
			{
				ACSTransformVampiressMovementAdjustForward();
			}

			if (theInput.GetActionValue('GI_AxisLeftY') > 0.5
			)
			{
				vampiress_light_attack_index_2 = RandDifferent(this.previous_vampiress_light_attack_index_2 , 3);

				switch (vampiress_light_attack_index_2) 
				{	
					case 2:

					ACSTransformVampiressPlayAnim( 'attack_combo_03', 0.25f, 0.325f);

					AddTimer('VampiressLightAttackDamageLeft', 0.4005767, false);

					AddTimer('VampiressLightAttackDamageRight', 0.9114162, false);

					AddTimer('VampiressLightAttackDamageLeft_add1', 1.16995, false);

					AddTimer('VampiressLightAttackDamageRight_add1', 1.773778, false);

					AddTimer('VampiressLightAttackDamageLeft_add2', 2.197737, false);

					AddTimer('VampiressLightAttackDamageRight_add2', 2.728485, false);
					break;
					
					case 1:

					ACSTransformVampiressPlayAnim( 'attack_combo_02', 0.25f, 0.325f);

					AddTimer('VampiressLightAttackDamageRight', 0.2500574, false);

					AddTimer('VampiressLightAttackDamageLeft', 0.6154854, false);

					AddTimer('VampiressLightAttackDamageRight_add1', 1.315794, false);

					AddTimer('VampiressLightAttackDamageLeft_add2', 1.425574, false);

					AddTimer('VampiressLightAttackDamageRight_add2', 1.822023, false);
					break;
					
					default:

					ACSTransformVampiressPlayAnim( 'attack_combo_01', 0.25f, 0.325f);

					AddTimer('VampiressLightAttackDamageRight', 0.2056873, false);

					AddTimer('VampiressLightAttackDamageLeft', 0.5321876, false);

					AddTimer('VampiressLightAttackDamageRight_add1', 0.6861112, false);

					AddTimer('VampiressLightAttackDamageLeft_add2', 1.306553, false);

					AddTimer('VampiressLightAttackDamageRight_add2', 1.740563, false);

					AddTimer('VampiressLightAttackDamageLeft_add3', 2.220382, false);
					break;
				}
		
				this.previous_vampiress_light_attack_index_2 = vampiress_light_attack_index_2;
			}
			else
			{
				vampiress_light_attack_index_1 = RandDifferent(this.previous_vampiress_light_attack_index_1 , 6);

				switch (vampiress_light_attack_index_1) 
				{	
					case 5:
					ACSTransformVampiressPlayAnim( 'attack_light_03', 0.25f, 0.325f);

					AddTimer('VampiressLightAttackDamageLeft', 0.2269696, false);

					AddTimer('VampiressLightAttackDamageRight', 0.595, false);

					AddTimer('VampiressLightAttackDamageLeft_add1', 0.7636364, false);
					break;

					case 4:
					ACSTransformVampiressPlayAnim( 'attack_light_02', 0.25f, 0.325f);

					AddTimer('VampiressLightAttackDamageLeft', 0.2114286, false);

					AddTimer('VampiressLightAttackDamageRight', 0.4704762, false);

					AddTimer('VampiressLightAttackDamageLeft_add1', 0.8533334, false);
					break;

					case 3:
					ACSTransformVampiressPlayAnim( 'attack_light_01', 0.25f, 0.325f);

					AddTimer('VampiressLightAttackDamageLeft', 0.3324676, false);

					AddTimer('VampiressLightAttackDamageRight', 0.4806926, false);
					break;	
					
					case 2:
					ACSTransformVampiressPlayAnim( 'bruxa_attack_03', 0.25f, 0.325f);
					AddTimer('VampiressLightAttackDamageLeft', 0.2, false);

					AddTimer('VampiressLightAttackDamageRight', 0.66, false);
					break;
					
					case 1:
					ACSTransformVampiressPlayAnim( 'bruxa_attack_02', 0.25f, 0.325f);
					AddTimer('VampiressLightAttackDamageRight', 0.2, false);
					break;
					
					default:
					ACSTransformVampiressPlayAnim( 'bruxa_attack_01', 0.25f, 0.325f);
					AddTimer('VampiressLightAttackDamageRight', 0.2, false);
					break;
				}
		
				this.previous_vampiress_light_attack_index_1 = vampiress_light_attack_index_1;
			}

			ACS_StaminaDrainForced(5);
		}
	}

	function ACS_Transformation_Vampiress_Heavy_Attacks_Melee()
	{
		if (ACS_can_perform_transformation_heavy_attack())
		{
			ACS_refresh_transformation_heavy_attack_cooldown();

			ACSVampiressRemoveMoveTimers();

			thePlayer.RemoveTag('ACS_Transformation_Vampiress_Is_Moving');

			if (thePlayer.IsInCombat())
			{
				ACSTransformVampiressMovementAdjustRotateTowardsEnemy();
			}
			else
			{
				ACSTransformVampiressMovementAdjustForward();
			}

			vampiress_heavy_attack_index_1 = RandDifferent(this.previous_vampiress_heavy_attack_index_1 , 8);

			switch (vampiress_heavy_attack_index_1) 
			{	
				case 7:
				ACSTransformVampiressPlayAnim( 'attack_special_strong_uppercut', 0.25f, 0.325f);
				AddTimer('VampiressHeavyAttackDamage', 1.088406, false);
				break;

				case 6:
				ACSTransformVampiressPlayAnim( 'attack_counter_medium', 0.25f, 0.325f);
				AddTimer('VampiressHeavyAttackDamage', 0.4680222, false);
				break;

				case 5:
				ACSTransformVampiressPlayAnim( 'attack_counter_close', 0.25f, 0.325f);
				AddTimer('VampiressHeavyAttackDamage', 0.4746029, false);
				break;

				case 4:
				ACSTransformVampiressPlayAnim( 'attack_heavy_single_03', 0.25f, 0.325f);
				AddTimer('VampiressHeavyAttackDamage', 0.6864218, false);
				break;

				case 3:
				ACSTransformVampiressPlayAnim( 'attack_heavy_single_02', 0.25f, 0.325f);
				AddTimer('VampiressHeavyAttackDamage', 0.5177854, false);
				break;	
				
				case 2:
				ACSTransformVampiressPlayAnim( 'attack_heavy_single_01', 0.25f, 0.325f);
				AddTimer('VampiressHeavyAttackDamage', 0.6037538, false);
				break;
				
				case 1:
				ACSTransformVampiressPlayAnim( 'attack_heavy_02', 0.25f, 0.325f);

				AddTimer('VampiressHeavyAttackDamage', 0.2904761, false);

				AddTimer('VampiressHeavyAttackDamage_add1', 0.9728423, false);
				break;
				
				default:
				ACSTransformVampiressPlayAnim( 'attack_heavy_01', 0.25f, 0.325f);

				AddTimer('VampiressHeavyAttackDamage', 0.3511688, false);

				AddTimer('VampiressHeavyAttackDamage_add1', 0.9698939, false);
				break;
			}
	
			this.previous_vampiress_heavy_attack_index_1 = vampiress_heavy_attack_index_1;

			ACS_StaminaDrainForced(5);
		}
	}

	function ACS_Transformation_Vampiress_Light_Attacks_Ranged()
	{
		if (thePlayer.IsInCombat())
		{
			if (ACS_can_perform_transformation_light_attack() && thePlayer.GetStat(BCS_Stamina) >= thePlayer.GetStatMax( BCS_Stamina) * 0.05)
			{
				ACS_refresh_transformation_light_attack_cooldown();

				ACSVampiressRemoveMoveTimers();

				thePlayer.RemoveTag('ACS_Transformation_Vampiress_Is_Moving');

				GetACSTransformationVampiress().PlayEffectSingle('prepare_attack_fx_djinn');
				GetACSTransformationVampiress().StopEffect('prepare_attack_fx_djinn');

				if (thePlayer.IsInCombat())
				{
					ACSTransformVampiressMovementAdjustRotateTowardsEnemy();
				}
				else
				{
					ACSTransformVampiressMovementAdjustForward();
				}

				thePlayer.SoundEvent("magic_triss_fx_push");

				if (theInput.GetActionValue('GI_AxisLeftY') > 0.5
				)
				{
					vampiress_light_attack_ranged_index_2 = RandDifferent(this.previous_vampiress_light_attack_ranged_index_2 , 2);

					switch (vampiress_light_attack_ranged_index_2) 
					{	
						case 1:
						ACSTransformVampiressPlayAnim( 'woman_sorceress_attack_slash_right_rp', 0.25f, 0.325f);
						AddTimer('VampiressLightAttackDamageRight', 1, false);
						break;
						
						default:
						ACSTransformVampiressPlayAnim( 'woman_sorceress_attack_slash_left_lp', 0.25f, 0.325f);
						AddTimer('VampiressLightAttackDamageLeft', 1, false);
						break;
					}
			
					this.previous_vampiress_light_attack_ranged_index_2 = vampiress_light_attack_ranged_index_2;
				}
				else
				{
					vampiress_light_attack_ranged_index_1 = RandDifferent(this.previous_vampiress_light_attack_ranged_index_1 , 2);

					switch (vampiress_light_attack_ranged_index_1) 
					{	
						case 1:
						ACSTransformVampiressPlayAnim( 'woman_sorceress_attack_slash_left_rp', 0.25f, 0.325f);
						AddTimer('VampiressLightAttackDamageLeft', 1, false);
						break;
						
						default:
						ACSTransformVampiressPlayAnim( 'woman_sorceress_attack_slash_right_lp', 0.25f, 0.325f);
						AddTimer('VampiressLightAttackDamageRight', 1, false);
						break;
					}
			
					this.previous_vampiress_light_attack_ranged_index_1 = vampiress_light_attack_ranged_index_1;
				}

				ACS_StaminaDrainForced(5);
			}
			else
			{
				thePlayer.SoundEvent("gui_no_stamina");
			}
		}
		else
		{
			if (ACS_can_perform_transformation_light_attack())
			{
				ACS_refresh_transformation_light_attack_cooldown();

				ACSVampiressRemoveMoveTimers();

				thePlayer.RemoveTag('ACS_Transformation_Vampiress_Is_Moving');

				ACSTransformVampiressMovementAdjustForward();

				ACS_Transformation_Vampiress_Sorceress_Taunt();

				thePlayer.SoundEvent("monster_bruxa_voice_taunt_blood");
				
			}
		}
	}

	function ACS_Transformation_Vampiress_Heavy_Attacks_Ranged()
	{
		if (thePlayer.IsInCombat())
		{
			if (ACS_can_perform_transformation_heavy_attack() && thePlayer.GetStat(BCS_Stamina) >= thePlayer.GetStatMax( BCS_Stamina) * 0.05)
			{
				ACS_refresh_transformation_heavy_attack_cooldown();

				ACSVampiressRemoveMoveTimers();

				thePlayer.RemoveTag('ACS_Transformation_Vampiress_Is_Moving');

				if (thePlayer.IsInCombat())
				{
					ACSTransformVampiressMovementAdjustRotateTowardsEnemy();
				}
				else
				{
					ACSTransformVampiressMovementAdjustForward();
				}

				thePlayer.SoundEvent("magic_triss_fx_push");

				GetACSTransformationVampiress().PlayEffectSingle('prepare_attack_fx_djinn_bigger');
				GetACSTransformationVampiress().StopEffect('prepare_attack_fx_djinn_bigger');

				if (theInput.GetActionValue('GI_AxisLeftY') > 0.5
				)
				{
					vampiress_heavy_attack_ranged_index_2 = RandDifferent(this.previous_vampiress_heavy_attack_ranged_index_2 , 2);

					switch (vampiress_heavy_attack_ranged_index_2) 
					{	
						case 1:
						ACSTransformVampiressPlayAnim( 'woman_sorceress_special_attack_electricity_rp', 0.25f, 0.325f);
						AddTimer('VampiressLightAttackDamage', 1.5, false);
						break;
						
						default:
						ACSTransformVampiressPlayAnim( 'woman_sorceress_special_attack_electricity_lp', 0.25f, 0.325f);
						AddTimer('VampiressLightAttackDamage', 1.5, false);
						break;
					}
			
					this.previous_vampiress_heavy_attack_ranged_index_2 = vampiress_heavy_attack_ranged_index_2;
				}
				else
				{
					vampiress_heavy_attack_ranged_index_1 = RandDifferent(this.previous_vampiress_heavy_attack_ranged_index_1 , 2);

					switch (vampiress_heavy_attack_ranged_index_1) 
					{	
						case 1:
						ACSTransformVampiressPlayAnim( 'woman_sorceress_rip_apart_kill_rp', 0.25f, 0.325f);

						AddTimer('VampiressLightAttackDamage', 1.5, false);

						AddTimer('VampiressHeavyAttackDamage', 3, false);
						break;	
						
						default:
						ACSTransformVampiressPlayAnim( 'woman_sorceress_rip_apart_kill_lp', 0.25f, 0.325f);

						AddTimer('VampiressLightAttackDamage', 1.5, false);

						AddTimer('VampiressHeavyAttackDamage', 3, false);
						break;
					}
			
					this.previous_vampiress_heavy_attack_ranged_index_1 = vampiress_heavy_attack_ranged_index_1;
				}

				ACS_StaminaDrainForced(5);
			}
			else
			{
				thePlayer.SoundEvent("gui_no_stamina");
			}
		}
		else
		{
			if (ACS_can_perform_transformation_heavy_attack())
			{
				ACS_refresh_transformation_heavy_attack_cooldown();

				ACSVampiressRemoveMoveTimers();

				thePlayer.RemoveTag('ACS_Transformation_Vampiress_Is_Moving');

				ACSTransformVampiressMovementAdjustForward();

				ACS_Transformation_Vampiress_Sorceress_Taunt();

				thePlayer.SoundEvent("monster_bruxa_voice_taunt_blood");
			}
		}
	}

	function ACS_Transformation_Vampiress_Special_Light_Attacks_Melee()
	{
		if (ACS_can_perform_transformation_special_attack())
		{
			ACS_refresh_transformation_special_attack_cooldown();

			ACSVampiressRemoveMoveTimers();

			thePlayer.RemoveTag('ACS_Transformation_Vampiress_Is_Moving');

			if (thePlayer.IsInCombat())
			{
				ACSTransformVampiressMovementAdjustRotateTowardsEnemy();
			}
			else
			{
				ACSTransformVampiressMovementAdjustForward();
			}

			GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q301');
			GetACSTransformationVampiress().StopEffect('fx_quest_q301');

			GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q301_l');
			GetACSTransformationVampiress().StopEffect('fx_quest_q301_l');

			GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q309');
			GetACSTransformationVampiress().StopEffect('fx_quest_q309');

			GetACSTransformationVampiress().PlayEffectSingle('fx_quest_q309_l');
			GetACSTransformationVampiress().StopEffect('fx_quest_q309_l');

			vampiress_special_attack_index_1 = RandDifferent(this.previous_vampiress_special_attack_index_1 , 3);

			switch (vampiress_special_attack_index_1) 
			{	
				case 2:
				ACSTransformVampiressPlayAnim( 'attack_special_dash_close', 0.25f, 0.325f);

				AddTimer('VampiressSpecialAttackSlide', 0.25, false);

				AddTimer('VampiressSpecialLightAttackDamage', 0.4694805, false);
				break;
				
				case 1:
				ACSTransformVampiressPlayAnim( 'attack_special_dash_medium_02', 0.25f, 0.325f);

				GetACSTransformationVampiress().SetAnimationSpeedMultiplier( 2  );

				AddTimer('ACS_Vampiress_Reset_Animation_Speed', 1, false);

				AddTimer('VampiressSpecialAttackSlide', 0.25, false);

				AddTimer('VampiressSpecialLightAttackDamage', 0.75, false);
				break;
				
				default:
				ACSTransformVampiressPlayAnim( 'attack_special_dash_medium_01', 0.25f, 0.325f);

				GetACSTransformationVampiress().SetAnimationSpeedMultiplier( 2  );

				AddTimer('ACS_Vampiress_Reset_Animation_Speed', 1, false);

				AddTimer('VampiressSpecialAttackSlide', 0.25, false);

				AddTimer('VampiressSpecialLightAttackDamage', 0.75, false);
				break;
			}
	
			this.previous_vampiress_special_attack_index_1 = vampiress_special_attack_index_1;

			ACS_StaminaDrainForced(5);
		}
	}

	function ACS_Transformation_Vampiress_Special_Light_Attacks_Ranged()
	{
		if (thePlayer.IsInCombat())
		{
			if (ACS_can_perform_transformation_special_attack() 
			&& thePlayer.GetStat(BCS_Stamina) >= thePlayer.GetStatMax( BCS_Stamina) * 0.05 
			&& thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3
			)
			{
				ACS_refresh_transformation_special_attack_cooldown();

				ACSVampiressRemoveMoveTimers();

				thePlayer.RemoveTag('ACS_Transformation_Vampiress_Is_Moving');

				if (thePlayer.IsInCombat())
				{
					ACSTransformVampiressMovementAdjustRotateTowardsEnemy();
				}
				else
				{
					ACSTransformVampiressMovementAdjustForward();
				}

				GetACSTransformationVampiress().PlayEffectSingle('prepare_attack_fx_djinn_bigger');
				GetACSTransformationVampiress().StopEffect('prepare_attack_fx_djinn_bigger');

				if (theInput.GetActionValue('GI_AxisLeftY') > 0.5 && thePlayer.GetStat(BCS_Focus) >= thePlayer.GetStatMax(BCS_Focus) * 0.9)
				{
					GetACSTransformationVampiress().PlayEffectSingle('aard_reaction_djinn');
					GetACSTransformationVampiress().StopEffect('aard_reaction_djinn');

					GetACSTransformationVampiress().PlayEffectSingle('q502_barrier_tear');
					GetACSTransformationVampiress().StopEffect('q502_barrier_tear');

					if (GetVampiressEquippedSpecial() == 1)
					{
						ACSTransformVampiressPlayAnim( 'woman_sorceress_special_attack_fireball_lp', 0.25f, 0.325f);

						ACS_ChaosMeteorSingleSummon();

						AddTimer('VampiressCastMeteorStorm', 1, false);
					}
					else if (GetVampiressEquippedSpecial() == 2)
					{
						ACSTransformVampiressPlayAnim( 'woman_sorceress_attack_rock_bhand_lp', 0.25f, 0.325f);

						AddTimer('VampiressCastTornado', 0.01, false);
					}
					else if (GetVampiressEquippedSpecial() == 3)
					{
						ACSTransformVampiressPlayAnim( 'woman_sorceress_attack_rock_bhand_rp', 0.25f, 0.325f);

						AddTimer('VampiressCastChaosCloud', 1, false);
					}
					else if (GetVampiressEquippedSpecial() == 4)
					{
						ACSTransformVampiressPlayAnim( 'woman_sorceress_attack_rock_bhand_lp', 0.25f, 0.325f);

						AddTimer('VampiressCastRootProjectile', 1, false);
					}
					else if (GetVampiressEquippedSpecial() == 5)
					{
						ACSTransformVampiressPlayAnim( 'woman_sorceress_attack_rock_bhand_rp', 0.25f, 0.325f);

						AddTimer('VampiressCastIceExplosion', 1, false);
					}
					else if (GetVampiressEquippedSpecial() == 6)
					{
						GetACSTransformationVampiress().PlayEffectSingle('fx_catch_djinn');
						GetACSTransformationVampiress().StopEffect('fx_catch_djinn');

						ACSTransformVampiressPlayAnim( 'woman_sorceress_special_attack_fireball_lp', 0.25f, 0.325f);

						AddTimer('VampiressCastVacuumOrb', 1, false);
					}
					else if (GetVampiressEquippedSpecial() == 7)
					{
						GetACSTransformationVampiress().PlayEffectSingle('fx_catch_djinn');
						GetACSTransformationVampiress().StopEffect('fx_catch_djinn');

						ACSTransformVampiressPlayAnim( 'woman_sorceress_special_attack_fireball_lp', 0.25f, 0.325f);

						AddTimer('VampiressCastArena', 0.0001, false);
					}
				}
				else
				{
					if ( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
					{
						GetACSTransformationVampiress().PlayEffectSingle('q203_raise_tree');
						GetACSTransformationVampiress().StopEffect('q203_raise_tree');

						if (GetVampiressEquippedSpecial() == 1)
						{
							ACS_ChaosMeteorSingleSummon();

							ACSTransformVampiressPlayAnim( 'woman_sorceress_special_attack_fireball_rp', 0.25f, 0.325f);

							GetACSTransformationVampiress().SetBehaviorVariable( 'npcPose', (int)ENP_RightFootFront);

							AddTimer('VampiressCastMeteorSingle', 1.25, false);
						}
						else if (GetVampiressEquippedSpecial() == 2)
						{
							ACSTransformVampiressPlayAnim( 'woman_sorceress_attack_rock_rhand_rp', 0.25f, 0.325f);

							GetACSTransformationVampiress().SetBehaviorVariable( 'npcPose', (int)ENP_RightFootFront);

							ACS_ChaosMagmaSummon();

							AddTimer('VampiressCastMagmaLine', 1.25, false);
						}
						else if (GetVampiressEquippedSpecial() == 3)
						{
							ACSTransformVampiressPlayAnim( 'ciri_targeting_for_triss_meteorite_rp_loop', 0.25f, 0.875f);

							AddTimer('VampiressCastLightning', 0.5, false);
						}
						else if (GetVampiressEquippedSpecial() == 4)
						{
							ACSTransformVampiressPlayAnim( 'woman_sorceress_attack_lp_03', 0.25f, 0.325f);

							AddTimer('VampiressCastWoodProjectile', 1, false);
						}
						else if (GetVampiressEquippedSpecial() == 5)
						{
							ACS_ChaosSnowballSingleSummon();

							ACSTransformVampiressPlayAnim( 'woman_sorceress_attack_rock_rhand_lp', 0.25f, 0.325f);

							AddTimer('VampiressCastSnowball', 1.25, false);
						}
						else if (GetVampiressEquippedSpecial() == 6)
						{
							ACSTransformVampiressPlayAnim( 'woman_sorceress_attack_rp_01', 0.25f, 0.325f);

							AddTimer('VampiressCastChaosOrb', 1.25, false);
						}
						else if (GetVampiressEquippedSpecial() == 7)
						{
							ACSTransformVampiressPlayAnim( 'woman_sorceress_attack_rp_03', 0.25f, 0.325f);

							AddTimer('VampiressCastDrain', 1, false);
						}
					}
					else
					{
						thePlayer.SoundEvent("gui_no_stamina");
					}
				}

				ACS_StaminaDrainForced(5);
			}
			else
			{
				thePlayer.SoundEvent("gui_no_stamina");
			}
		}
		else
		{
			if (ACS_can_perform_transformation_special_attack())
			{
				ACS_refresh_transformation_special_attack_cooldown();

				ACSVampiressRemoveMoveTimers();

				thePlayer.RemoveTag('ACS_Transformation_Vampiress_Is_Moving');

				ACSTransformVampiressMovementAdjustForward();

				ACS_Transformation_Vampiress_Sorceress_Taunt();

				thePlayer.SoundEvent("monster_bruxa_voice_taunt_blood");
			}
		}
	}

	function FocusDrainByThirds()
	{
		if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
		&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
		{	
			thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
		}
		else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
		&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
		{	
			thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
		}
		else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
		{
			thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
		}
	}

	public timer function VampiressCastMeteorStorm ( dt : float, id : int) 
	{
		thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );

		ACS_ChaosMeteorStorm();
	} 

	public timer function VampiressCastMeteorSingle ( dt : float, id : int) 
	{
		FocusDrainByThirds();

		ACS_ChaosMeteorSingleFire();
	} 

	public timer function VampiressCastTornado ( dt : float, id : int) 
	{
		thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );

		ACS_ChaosTornado();
	} 

	public timer function VampiressCastMagmaLine ( dt : float, id : int) 
	{
		FocusDrainByThirds();

		ACS_ChaosMagmaLine();
	} 

	public timer function VampiressCastChaosCloud ( dt : float, id : int) 
	{
		thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );

		ACS_ChaosCloud();
	} 

	public timer function VampiressCastLightning ( dt : float, id : int) 
	{
		FocusDrainByThirds();

		ACS_ChaosLightning();
	}

	public timer function VampiressCastWoodProjectile ( dt : float, id : int) 
	{
		FocusDrainByThirds();

		ACS_ChaosWoodProj();
	}

	public timer function VampiressCastRootProjectile ( dt : float, id : int) 
	{
		thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );

		ACS_ChaosRootProjectile();
	}

	public timer function VampiressCastSnowball ( dt : float, id : int) 
	{
		FocusDrainByThirds();

		ACS_ChaosSnowball();
	}

	public timer function VampiressCastIceExplosion ( dt : float, id : int) 
	{
		thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );

		ACS_ChaosIceExplosion();
	}

	public timer function VampiressCastVacuumOrb ( dt : float, id : int) 
	{
		thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );

		ACS_ChaosVacuumOrb();
	}

	public timer function VampiressCastChaosOrb ( dt : float, id : int) 
	{
		FocusDrainByThirds();

		ACS_ChaosOrb();
	}

	public timer function VampiressCastDrain ( dt : float, id : int ) 
	{
		FocusDrainByThirds();

		Chaos_Drain_Engage();
	}

	public timer function VampiressCastArena ( dt : float, id : int ) 
	{
		thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );

		Chaos_Arena_Engage();
	}

	function ACS_Transformation_Vampiress_Repel_Melee()
	{
		if (ACS_can_perform_transformation_light_attack() && thePlayer.GetStat(BCS_Stamina) >= thePlayer.GetStatMax( BCS_Stamina) * 0.05)
		{
			ACS_refresh_transformation_light_attack_cooldown();

			ACSVampiressRemoveMoveTimers();

			thePlayer.RemoveTag('ACS_Transformation_Vampiress_Is_Moving');

			if (thePlayer.IsInCombat())
			{
				ACSTransformVampiressMovementAdjustRotateTowardsEnemy();
			}
			else
			{
				ACSTransformVampiressMovementAdjustForward();
			}

			if (GetACSTransformationVampiress().HasTag('ACS_Transformation_Bruxa'))
			{
				vampiress_repel_index_1 = RandDifferent(this.previous_vampiress_repel_index_1 , 2);

				switch (vampiress_repel_index_1) 
				{	
					case 1:
					ACSTransformVampiressPlayAnim( 'bruxa_special_attack_02', 0.25f, 0.325f);
					AddTimer('VampiressRepelDamage', 1, false);
					break;
					
					default:
					ACSTransformVampiressPlayAnim( 'bruxa_special_attack_01', 0.25f, 0.325f);
					AddTimer('VampiressRepelDamage', 1, false);
					break;
				}
		
				this.previous_vampiress_repel_index_1 = vampiress_repel_index_1;
			}
			else
			{
				switch (vampiress_repel_index_1) 
				{	
					case 1:
					ACSTransformVampiressPlayAnim( 'bruxa_special_attack_02', 0.25f, 0.325f);
					AddTimer('VampiressRepelDamage', 0.5, false);
					break;
					
					default:
					ACSTransformVampiressPlayAnim( 'bruxa_special_attack_01', 0.25f, 0.325f);
					AddTimer('VampiressRepelDamage', 0.5, false);
					break;
				}
		
				this.previous_vampiress_repel_index_1 = vampiress_repel_index_1;
			}

			ACS_StaminaDrainForced(5);
		}
		else
		{
			thePlayer.SoundEvent("gui_no_stamina");
		}
	}

	function ACS_Transformation_Vampiress_Bruxa_Scream()
	{
		if (ACS_can_perform_transformation_light_attack() && thePlayer.GetStat(BCS_Stamina) >= thePlayer.GetStatMax( BCS_Stamina) * 0.05)
		{
			ACS_refresh_transformation_light_attack_cooldown();

			ACSVampiressRemoveMoveTimers();

			thePlayer.RemoveTag('ACS_Transformation_Vampiress_Is_Moving');

			if (thePlayer.IsInCombat())
			{
				ACSTransformVampiressMovementAdjustRotateTowardsEnemy();
			}
			else
			{
				ACSTransformVampiressMovementAdjustForward();
			}

			if( thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )/3) 
			{
				ACSTransformVampiressPlayAnim( 'utility_taunt_01', 0.25f, 0.325f);
			}
			else
			{
				FocusDrainByThirds();

				ACSTransformVampiressPlayAnim( 'bruxa_taunt_01', 0.25f, 0.325f);

				ACS_Transformation_Bruxa_Scream();
			}

			ACS_StaminaDrainForced(5);
		}
		else
		{
			thePlayer.SoundEvent("gui_no_stamina");
		}
	}
	
	function ACS_Transformation_Vampiress_Repel_Ranged()
	{
		if (ACS_can_perform_transformation_light_attack() && thePlayer.GetStat(BCS_Stamina) >= thePlayer.GetStatMax( BCS_Stamina) * 0.05)
		{
			ACS_refresh_transformation_light_attack_cooldown();

			ACSVampiressRemoveMoveTimers();

			thePlayer.RemoveTag('ACS_Transformation_Vampiress_Is_Moving');

			if (thePlayer.IsInCombat())
			{
				ACSTransformVampiressMovementAdjustRotateTowardsEnemy();
			}
			else
			{
				ACSTransformVampiressMovementAdjustForward();
			}

			vampiress_repel_index_1 = RandDifferent(this.previous_vampiress_repel_index_1 , 2);

			switch (vampiress_repel_index_1) 
			{	
				case 1:
				ACSTransformVampiressPlayAnim( 'woman_sorceress_attack_push_lp_02', 0.25f, 0.325f);
				AddTimer('VampiressRepelDamage', 0.125, false);
				break;
				
				default:
				ACSTransformVampiressPlayAnim( 'woman_sorceress_attack_push_rp', 0.25f, 0.325f);
				AddTimer('VampiressRepelDamage', 0.125, false);
				break;
			}
	
			this.previous_vampiress_repel_index_1 = vampiress_repel_index_1;

			ACS_StaminaDrainForced(5);
		}
		else
		{
			thePlayer.SoundEvent("gui_no_stamina");
		}
	}

	function vampiress_dodge_timer_actual() 
	{
		RemoveTimer('ACS_vampiress_dodge_timer_end');

		//GetACSTransformationVampiress().PlayEffectSingle('shadowdash_cs701_2');
		//GetACSTransformationVampiress().StopEffect('shadowdash_cs701_2');

		//GetACSTransformationVampiress().PlayEffectSingle('shadowdash_cs701');
		//GetACSTransformationVampiress().StopEffect('shadowdash_cs701');

		//GetACSTransformationVampiress().PlayEffectSingle('shadowdash_cs701_2');
		//GetACSTransformationVampiress().StopEffect('shadowdash_cs701_2');

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 

		thePlayer.SetIsCurrentlyDodging(true);
	
		AddTimer('ACS_vampiress_dodge_timer_end', 0.875  , false);
	}
	
	function vampiress_dodge_timer_end_actual() 
	{ 
		thePlayer.SetImmortalityMode( AIM_None, AIC_Combat ); 

		thePlayer.SetIsCurrentlyDodging(false);
	}

	public timer function ACS_vampiress_dodge_timer_end ( dt : float, id : int) 
	{ 
		vampiress_dodge_timer_end_actual();
	} 

	public timer function ACS_Vampiress_Reset_Animation_Speed ( dt : float, id : int) 
	{ 
		GetACSTransformationVampiress().ClearAnimationSpeedMultipliers();
	}

	function ACS_Transformation_Vampiress_Dash()
	{
		if( BruxaDashCallTime + DOUBLE_TAP_WINDOW >= theGame.GetEngineTimeAsSeconds() )
		{
			BruxaDashDoubleTap = true;
		}
		else
		{
			BruxaDashDoubleTap = false;	
		}
		
		if( BruxaDashDoubleTap )
		{
			if (ACS_can_transformation_dodge())
			{
				ACS_refresh_transformation_dodge_cooldown();

				thePlayer.RemoveTag('ACS_Transformation_Vampiress_Is_Moving');

				ACSVampiressRemoveMoveTimers();

				vampiress_dodge_timer_actual();

				if (GetACSTransformationVampiress().HasTag('ACS_Transformation_Bruxa'))
				{
					if (GetACSTransformationVampiress().IsEffectActive('shadowdash', false))
					{
						GetACSTransformationVampiress().DestroyEffect('shadowdash');

						thePlayer.RemoveTag('ACS_Transformation_Bruxa_Cloaked');
					}
					else
					{
						GetACSTransformationVampiress().DestroyEffect('shadowdash');
						GetACSTransformationVampiress().PlayEffectSingle('shadowdash');

						thePlayer.AddTag('ACS_Transformation_Bruxa_Cloaked');
					}
				}
				else
				{
					GetACSTransformationVampiress().PlayEffectSingle('shadowdash_cs701_2');
					GetACSTransformationVampiress().StopEffect('shadowdash_cs701_2');
				}

				ACSTransformVampiressMovementAdjustNormalDash();

				if (thePlayer.IsInCombat())
				{
					ACS_StaminaDrainForced(5);
				}
			}
		}

		BruxaDashCallTime = theGame.GetEngineTimeAsSeconds();
	}
				
	function ACS_Transformation_Vampiress_Dodge_Melee()
	{
		if (ACS_can_transformation_dodge())
		{
			ACS_refresh_transformation_dodge_cooldown();

			thePlayer.RemoveTag('ACS_Transformation_Vampiress_Is_Moving');

			ACSVampiressRemoveMoveTimers();

			vampiress_dodge_timer_actual();

			if (!GetACSTransformationVampiress().HasTag('ACS_Transformation_Bruxa'))
			{
				GetACSTransformationVampiress().PlayEffectSingle('shadowdash_cs701_2');
				GetACSTransformationVampiress().StopEffect('shadowdash_cs701_2');
			}
			else
			{
				GetACSTransformationVampiress().DestroyEffect('shadowdash_short');
				GetACSTransformationVampiress().PlayEffectSingle('shadowdash_short');
				GetACSTransformationVampiress().StopEffect('shadowdash_short');
			}

			if (thePlayer.IsInCombat())
			{
				if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
				{
					ACSTransformVampiressMovementAdjustForwardDodge();
				}
				else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5)
				{
					ACSTransformVampiressMovementAdjustCounterDodge();
				}
				else if (theInput.GetActionValue('GI_AxisLeftX') > 0.5)
				{
					ACSTransformVampiressMovementAdjustSlideRight();
					ACSTransformVampiressPlayAnim('bruxa_dodge_back_right', 0.25f, 0.325f);
				}
				else if (theInput.GetActionValue('GI_AxisLeftX') < -0.5)
				{
					ACSTransformVampiressMovementAdjustSlideLeft();
					ACSTransformVampiressPlayAnim('bruxa_dodge_back_left', 0.25f, 0.325f);
				}
				else
				{
					ACSTransformVampiressMovementAdjustNormalDodge();
				}
			}
			else
			{
				ACSTransformVampiressMovementAdjustForward();

				if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
				{
					ACSTransformVampiressPlayAnim('bruxa_move_run_f', 0.25f, 0.325f);
				}
				else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5)
				{
					GetACSTransformationVampiress().SetAnimationSpeedMultiplier( 2  );

					AddTimer('ACS_Vampiress_Reset_Animation_Speed', 0.5, false);

					ACSTransformVampiressPlayAnim('bruxa_dodge_back_slide', 0.25f, 0.875f);
				}
				else if (theInput.GetActionValue('GI_AxisLeftX') > 0.5)
				{
					ACSTransformVampiressPlayAnim('bruxa_dodge_back_right', 0.25f, 0.325f);
				}
				else if (theInput.GetActionValue('GI_AxisLeftX') < -0.5)
				{
					ACSTransformVampiressPlayAnim('bruxa_dodge_back_left', 0.25f, 0.325f);
				}
				else
				{
					ACSTransformVampiressMovementAdjustNormalDodge();
				}
			}

			ACS_StaminaDrainForced(5);
		}
	}

	function ACS_Transformation_Vampiress_Dodge_Ranged()
	{
		if (ACS_can_transformation_dodge())
		{
			ACS_refresh_transformation_dodge_cooldown();

			thePlayer.RemoveTag('ACS_Transformation_Vampiress_Is_Moving');

			ACSVampiressRemoveMoveTimers();

			vampiress_dodge_timer_actual();

			GetACSTransformationVampiress().DestroyEffect('shadowdash_short');
			GetACSTransformationVampiress().PlayEffectSingle('shadowdash_short');
			GetACSTransformationVampiress().StopEffect('shadowdash_short');

			if (thePlayer.IsInCombat())
			{
				if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
				{
					ACSTransformVampiressMovementAdjustForwardDodge();
				}
				else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5)
				{
					ACSTransformVampiressMovementAdjustCounterDodge();
				}
				else if (theInput.GetActionValue('GI_AxisLeftX') > 0.5)
				{
					ACSTransformVampiressMovementAdjustSlideRight();
					ACSTransformVampiressPlayAnim('bruxa_dodge_back_right', 0.25f, 0.325f);
				}
				else if (theInput.GetActionValue('GI_AxisLeftX') < -0.5)
				{
					ACSTransformVampiressMovementAdjustSlideLeft();
					ACSTransformVampiressPlayAnim('bruxa_dodge_back_left', 0.25f, 0.325f);
				}
				else
				{
					ACSTransformVampiressMovementAdjustNormalDodge();
				}
			}
			else
			{
				ACSTransformVampiressMovementAdjustForward();

				if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
				{
					ACSTransformVampiressPlayAnim('bruxa_move_run_f', 0.25f, 0.325f);
				}
				else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5)
				{
					GetACSTransformationVampiress().SetAnimationSpeedMultiplier( 2  );

					AddTimer('ACS_Vampiress_Reset_Animation_Speed', 0.5, false);

					ACSTransformVampiressPlayAnim('bruxa_dodge_back_slide', 0.25f, 0.875f);
				}
				else if (theInput.GetActionValue('GI_AxisLeftX') > 0.5)
				{
					ACSTransformVampiressPlayAnim('bruxa_dodge_back_right', 0.25f, 0.325f);
				}
				else if (theInput.GetActionValue('GI_AxisLeftX') < -0.5)
				{
					ACSTransformVampiressPlayAnim('bruxa_dodge_back_left', 0.25f, 0.325f);
				}
				else
				{
					ACSTransformVampiressMovementAdjustNormalDodge();
				}
			}

			ACS_StaminaDrainForced(5);
		}
	}

	function ACS_Transformation_Vampiress_Roll_Melee()
	{
		if (ACS_can_transformation_dodge() && thePlayer.GetStat(BCS_Stamina) >= thePlayer.GetStatMax( BCS_Stamina) * 0.05)
		{
			ACS_refresh_transformation_dodge_cooldown();

			thePlayer.RemoveTag('ACS_Transformation_Vampiress_Is_Moving');

			ACSVampiressRemoveMoveTimers();

			vampiress_dodge_timer_actual();

			ACSTransformVampiressMovementAdjustRotateTowardsEnemy();

			if ( !theSound.SoundIsBankLoaded("magic_geralt.bnk") )
			{
				theSound.SoundLoadBank( "magic_geralt.bnk", false );
			}

			ACSTransformVampiressPlayAnim('bruxa_jump_up_stop_failsafe', 0.25f, 0.325f);

			if (!GetACSTransformationVampiress().HasTag('ACS_Transformation_Bruxa'))
			{
				GetACSTransformationVampiress().DestroyEffect('shadowdash');
				GetACSTransformationVampiress().PlayEffectSingle('shadowdash' );

				GetACSTransformationVampiress().PlayEffectSingle('shadowdash_cs701' );

				GetACSTransformationVampiress().PlayEffectSingle('shadowdash_cs701_2');
			}
			else
			{
				GetACSTransformationVampiress().DestroyEffect('shadowdash');
				GetACSTransformationVampiress().PlayEffectSingle('shadowdash' );
			}

			RemoveTimer('Vampiress_Teleport');

			GetACSTransformationVampiress().DestroyEffect('acs_armor_effect_1' );
			GetACSTransformationVampiress().DestroyEffect('acs_armor_effect_2' );

			AddTimer('Vampiress_Teleport', 0.25, false);

			ACS_StaminaDrainForced(5);
		}
		else
		{
			thePlayer.SoundEvent("gui_no_stamina");
		}
	}

	function ACS_Transformation_Vampiress_Roll_Ranged()
	{
		if (ACS_can_transformation_dodge() && thePlayer.GetStat(BCS_Stamina) >= thePlayer.GetStatMax( BCS_Stamina) * 0.05)
		{
			ACS_refresh_transformation_dodge_cooldown();

			thePlayer.RemoveTag('ACS_Transformation_Vampiress_Is_Moving');

			ACSVampiressRemoveMoveTimers();

			vampiress_dodge_timer_actual();

			ACSTransformVampiressMovementAdjustRotateTowardsEnemy();

			if ( !theSound.SoundIsBankLoaded("magic_geralt.bnk") )
			{
				theSound.SoundLoadBank( "magic_geralt.bnk", false );
			}

			thePlayer.SoundEvent("magic_geralt_teleport");

			if (RandF() < 0.5)
			{
				ACSTransformVampiressPlayAnim('woman_sorceress_teleport_rp', 0.25f, 0.325f);
			}
			else
			{
				ACSTransformVampiressPlayAnim('woman_sorceress_teleport_lp', 0.25f, 0.325f);
			}

			RemoveTimer('Vampiress_Teleport');

			AddTimer('Vampiress_Teleport', 1, false);

			ACS_StaminaDrainForced(5);
		}
		else
		{
			thePlayer.SoundEvent("gui_no_stamina");
		}
	}

	function Vampiress_Teleport_Actual()
	{
		var evadeTargetPos, victimPos 	: Vector;
		var dist 						: float;
		var evadeTarget					: CActor;

		GetACSTransformationVampiress().SetVisibility(false);

		if ( thePlayer.IsHardLockEnabled() )
		{
			evadeTarget = (CActor)( thePlayer.GetDisplayTarget() );
		}
		else
		{
			evadeTarget = thePlayer.moveTarget;		
		}

		dist = (((CMovingPhysicalAgentComponent)actor.GetMovingAgentComponent()).GetCapsuleRadius() 
		+ ((CMovingPhysicalAgentComponent)thePlayer.GetMovingAgentComponent()).GetCapsuleRadius()) * 1.25;

		evadeTargetPos = evadeTarget.GetWorldPosition();

		thePlayer.SoundEvent("magic_geralt_ghost_possession");

		movementAdjustorVampiress = GetACSTransformationVampiress().GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampiress = movementAdjustorVampiress.GetRequest( 'ACS_Transformation_Vampiress_Rotate');
		movementAdjustorVampiress.CancelByName( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.CancelAll();

		ticketVampiress = movementAdjustorVampiress.CreateNewRequest( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.MaxRotationAdjustmentSpeed( ticketVampiress, 500000 );
		movementAdjustorVampiress.AdjustLocationVertically( ticketVampiress, true );
		movementAdjustorVampiress.ScaleAnimationLocationVertically( ticketVampiress, true );

		victimPos = evadeTargetPos + VecFromHeading( AngleNormalize180( thePlayer.GetHeading() - dist ) ) * 7;

		if( !theGame.GetWorld().NavigationFindSafeSpot( victimPos, 0.3, 0.3 , newVictimPos) )
		{
			theGame.GetWorld().NavigationFindSafeSpot( victimPos, 0.3, 10 , newVictimPos );

			victimPos = newVictimPos;
		}

		movementAdjustorVampiress.AdjustmentDuration( ticket, 0.06125 );
			
		movementAdjustorVampiress.RotateTowards( ticketVampiress, evadeTarget );

		victimPos.Z += 10;

		movementAdjustorVampiress.SlideTo( ticketVampiress, victimPos );

		RemoveTimer('Vampiress_Teleport_Position_Adjust');
		AddTimer('Vampiress_Teleport_Position_Adjust', 0.125, false);

		RemoveTimer('Vampiress_Visibility_Restore');
		AddTimer('Vampiress_Visibility_Restore', 0.5, false);
	}

	public timer function Vampiress_Teleport_Position_Adjust ( dt : float, id : int) 
	{
		ACSTransformVampiressMovementAdjustSlideToGround();
	}

	public timer function Vampiress_Visibility_Restore ( dt : float, id : int) 
	{ 
		GetACSTransformationVampiress().SetVisibility(true);

		if (!GetACSTransformationVampiress().HasTag('ACS_Vampiress_Sorceress_Mode'))
		{
			GetACSTransformationVampiress().DestroyEffect('shadowdash');

			GetACSTransformationVampiress().StopEffect('shadowdash_cs701' );

			GetACSTransformationVampiress().StopEffect('shadowdash_cs701_2' );
			
			ACSTransformVampiressPlayAnim( 'bruxa_jump_up_stop', 0.25f, 0.325f);
		}
		else
		{
			GetACSTransformationVampiress().StopEffect('teleport_out');
			GetACSTransformationVampiress().PlayEffectSingle('teleport_out');
			GetACSTransformationVampiress().StopEffect('teleport_out');

			GetACSTransformationVampiress().PlayEffectSingle('teleport_out_djinn');
			GetACSTransformationVampiress().StopEffect('teleport_out_djinn');

			AddTimer('VampiressRepelDamage', 0.125, false);
		}

		GetACSTransformationVampiress().PlayEffectSingle('acs_armor_effect_1' );
		GetACSTransformationVampiress().PlayEffectSingle('acs_armor_effect_2' );
	} 

	public timer function Vampiress_Teleport ( dt : float, id : int) 
	{ 
		Vampiress_Teleport_Actual();
	} 

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function WerewolfBiteDamageActual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;
		var voiceTagName 							: name;
		var voiceTagStr								: string;
		var appearanceName 							: name;
		var appearanceStr							: string;

		if (GetACSTransformationWerewolf().HasTag('ACS_Werewolf_Berserk_Mode'))
		{
			attackRange = 2.5;

			attackAngle = 40;
		}
		else
		{
			attackRange = 2;

			attackAngle = 20;
		}

		actors.Clear();

		actors = GetACSTransformationWerewolf().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationWerewolf().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				voiceTagName =  actortarget.GetVoicetag();
				voiceTagStr = NameToString( voiceTagName );
				
				appearanceName =  actortarget.GetAppearance();
				appearanceStr = NameToString( appearanceName );

				if (StrFindFirst(voiceTagStr, "BOY") >= 0
				|| StrFindFirst(voiceTagStr, "GIRL") >= 0
				|| StrFindFirst(appearanceStr, "BOY") >= 0
				|| StrFindFirst(appearanceStr, "GIRL") >= 0)
				{
					ACS_Alghoul_Explode(actortarget, actortarget.GetWorldPosition());
					actortarget.Destroy();

					return;
				}

				if (actortarget == GetACSTransformationWerewolf()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Werewolf_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					damageMax = maxTargetVitality * 0.125; 

					damageMin = maxTargetVitality * 0.06125; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						damageMax = maxTargetEssence * 0.0625; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
					else
					{
						damageMax = maxTargetEssence * 0.125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
					dmg.AddEffectInfo( EET_Stagger, 0.1 );
				}
				else
				{
					if( RandF() < 0.25 ) 
					{
						movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
						dmg.AddEffectInfo( EET_Stagger, 0.1 );
					}
				}

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				thePlayer.GainStat( BCS_Vitality, thePlayer.GetStatMax( BCS_Vitality) * 0.1 );

				thePlayer.SoundEvent("cmb_play_dismemberment_gore");

				thePlayer.SoundEvent("monster_dettlaff_monster_vein_hit_blood");

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');		

				actortarget.PlayEffectSingle('critical_poison');
				actortarget.StopEffect('critical_poison');	
				

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddEffectInfo( EET_Poison, 3 );

				dmg.AddEffectInfo( EET_Bleeding, 3 );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	

				theGame.GetMonsterParamsForActor(actortarget, mc, tmpName, tmpBool, tmpBool, tmpBool);

				RemoveAllCoveredBlood();

				if( ((CNewNPC)actortarget).GetBloodType() == BT_Red) 
				{
					if (actortarget.HasAbility('mon_lessog_base')
					|| actortarget.HasAbility('mon_sprigan_base')
					)
					{						
						if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_jaw_black');
					} 
					else
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_jaw');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Green) 
				{
					if (actortarget.HasAbility('mon_kikimore_base')
					|| actortarget.HasAbility('mon_black_spider_base')
					|| actortarget.HasAbility('mon_black_spider_ep2_base')
					)
					{						
						if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_jaw_black');
					} 
					else 
					{
						if (!thePlayer.IsEffectActive('covered_blood_green_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_green_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_jaw_green');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Yellow) 
				{
					if (actortarget.HasAbility('mon_archespor_base'))
					{
						if (!thePlayer.IsEffectActive('covered_blood_yellow_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_yellow_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_jaw_yellow');
					} 
					else 
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_jaw');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Black) 
				{
					if ( mc == MC_Vampire ) 
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_jaw');
					}
					else if ( mc == MC_Magicals ) 
					{
						if (actortarget.HasAbility('mon_golem_base')
						|| actortarget.HasAbility('mon_djinn')
						|| actortarget.HasAbility('mon_gargoyle')
						)
						{
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_jaw_black');
						}
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_jaw');
						}
					}
					else
					{
						if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_jaw_black');
					}
				}
				else
				{
					if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

					GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_jaw');
				}

				RemoveTimer('ACS_RemoveCoveredBlood');
				AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
			}
		}
	}

	public timer function WerewolfBiteDamage(deltaTime : float , id : int)
	{
		WerewolfBiteDamageActual();
	}

	function WerewolfLightAttackDamageActualLeft()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;
		var voiceTagName 							: name;
		var voiceTagStr								: string;
		var appearanceName 							: name;
		var appearanceStr							: string;

		if (GetACSTransformationWerewolf().HasTag('ACS_Werewolf_Berserk_Mode'))
		{
			attackRange = 3;

			attackAngle = 60;
		}
		else
		{
			attackRange = 2.5;

			attackAngle = 45;
		}

		actors.Clear();

		actors = GetACSTransformationWerewolf().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationWerewolf().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				voiceTagName =  actortarget.GetVoicetag();
				voiceTagStr = NameToString( voiceTagName );
				
				appearanceName =  actortarget.GetAppearance();
				appearanceStr = NameToString( appearanceName );

				if (StrFindFirst(voiceTagStr, "BOY") >= 0
				|| StrFindFirst(voiceTagStr, "GIRL") >= 0
				|| StrFindFirst(appearanceStr, "BOY") >= 0
				|| StrFindFirst(appearanceStr, "GIRL") >= 0)
				{
					ACS_Alghoul_Explode(actortarget, actortarget.GetWorldPosition());
					actortarget.Destroy();

					return;
				}

				if (actortarget == GetACSTransformationWerewolf()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Werewolf_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					if ( actortarget.GetStat( BCS_Vitality ) >= maxTargetVitality * 0.25 )
					{
						damageMax = actortarget.GetStat( BCS_Vitality ) * 0.25; 

						damageMin = actortarget.GetStat( BCS_Vitality ) * 0.125; 
					}
					else if ( actortarget.GetStat( BCS_Vitality ) < maxTargetVitality * 0.25 )
					{
						damageMax = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.25; 

						damageMin = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.125; 
					}
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.125; 

							damageMin = actortarget.GetStat( BCS_Essence ) * 0.0625; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 

							damageMin = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.0625; 
						}
					}
					else
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.25; 

							damageMin = actortarget.GetStat( BCS_Essence ) * 0.125; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.25; 

							damageMin = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 
						}
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
					dmg.AddEffectInfo( EET_Stagger, 0.1 );
				}
				else
				{
					if( RandF() < 0.25 ) 
					{
						movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
						dmg.AddEffectInfo( EET_Stagger, 0.1 );
					}
				}

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				thePlayer.GainStat( BCS_Vitality, thePlayer.GetStatMax( BCS_Vitality) * 0.00625 );

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_large");

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_small");

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');		

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(50 + damageMax,50 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(50 + damageMax,50 + damageMin) );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	

				theGame.GetMonsterParamsForActor(actortarget, mc, tmpName, tmpBool, tmpBool, tmpBool);

				RemoveAllCoveredBlood();

				if( ((CNewNPC)actortarget).GetBloodType() == BT_Red) 
				{
					if (actortarget.HasAbility('mon_lessog_base')
					|| actortarget.HasAbility('mon_sprigan_base')
					)
					{						
						if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_left_black');
					} 
					else
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_left');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Green) 
				{
					if (actortarget.HasAbility('mon_kikimore_base')
					|| actortarget.HasAbility('mon_black_spider_base')
					|| actortarget.HasAbility('mon_black_spider_ep2_base')
					)
					{						
						if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_left_black');
					} 
					else 
					{
						if (!thePlayer.IsEffectActive('covered_blood_green_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_green_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_left_green');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Yellow) 
				{
					if (actortarget.HasAbility('mon_archespor_base'))
					{
						if (!thePlayer.IsEffectActive('covered_blood_yellow_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_yellow_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_left_yellow');
					} 
					else 
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_left');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Black) 
				{
					if ( mc == MC_Vampire ) 
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_left');
					}
					else if ( mc == MC_Magicals ) 
					{
						if (actortarget.HasAbility('mon_golem_base')
						|| actortarget.HasAbility('mon_djinn')
						|| actortarget.HasAbility('mon_gargoyle')
						)
						{
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_left_black');
						}
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_left');
						}
					}
					else
					{
						if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_left_black');
					}
				}
				else
				{
					if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

					GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_left');
				}

				RemoveTimer('ACS_RemoveCoveredBlood');
				AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
			}
		}
	}

	function WerewolfLightAttackDamageActualRight()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;
		var voiceTagName 							: name;
		var voiceTagStr								: string;
		var appearanceName 							: name;
		var appearanceStr							: string;

		if (GetACSTransformationWerewolf().HasTag('ACS_Werewolf_Berserk_Mode'))
		{
			attackRange = 3;

			attackAngle = 60;
		}
		else
		{
			attackRange = 2.5;

			attackAngle = 45;
		}

		actors.Clear();

		actors = GetACSTransformationWerewolf().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationWerewolf().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				voiceTagName =  actortarget.GetVoicetag();
				voiceTagStr = NameToString( voiceTagName );
				
				appearanceName =  actortarget.GetAppearance();
				appearanceStr = NameToString( appearanceName );

				if (StrFindFirst(voiceTagStr, "BOY") >= 0
				|| StrFindFirst(voiceTagStr, "GIRL") >= 0
				|| StrFindFirst(appearanceStr, "BOY") >= 0
				|| StrFindFirst(appearanceStr, "GIRL") >= 0)
				{
					ACS_Alghoul_Explode(actortarget, actortarget.GetWorldPosition());
					actortarget.Destroy();

					return;
				}

				if (actortarget == GetACSTransformationWerewolf()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Werewolf_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					if ( actortarget.GetStat( BCS_Vitality ) >= maxTargetVitality * 0.25 )
					{
						damageMax = actortarget.GetStat( BCS_Vitality ) * 0.25; 

						damageMin = actortarget.GetStat( BCS_Vitality ) * 0.125; 
					}
					else if ( actortarget.GetStat( BCS_Vitality ) < maxTargetVitality * 0.25 )
					{
						damageMax = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.25; 

						damageMin = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.125; 
					}
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.125; 

							damageMin = actortarget.GetStat( BCS_Essence ) * 0.0625; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 

							damageMin = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.0625; 
						}
					}
					else
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.25; 

							damageMin = actortarget.GetStat( BCS_Essence ) * 0.125; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.25; 

							damageMin = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 
						}
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
					dmg.AddEffectInfo( EET_Stagger, 0.1 );
				}
				else
				{
					if( RandF() < 0.25 ) 
					{
						movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
						dmg.AddEffectInfo( EET_Stagger, 0.1 );
					}
				}

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				thePlayer.GainStat( BCS_Vitality, thePlayer.GetStatMax( BCS_Vitality) * 0.00625 );

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_large");

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_small");

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');		

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(50 + damageMax,50 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(50 + damageMax,50 + damageMin) );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	

				theGame.GetMonsterParamsForActor(actortarget, mc, tmpName, tmpBool, tmpBool, tmpBool);

				RemoveAllCoveredBlood();

				if( ((CNewNPC)actortarget).GetBloodType() == BT_Red) 
				{
					if (actortarget.HasAbility('mon_lessog_base')
					|| actortarget.HasAbility('mon_sprigan_base')
					)
					{						
						if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_right_black');
					} 
					else
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_right');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Green) 
				{
					if (actortarget.HasAbility('mon_kikimore_base')
					|| actortarget.HasAbility('mon_black_spider_base')
					|| actortarget.HasAbility('mon_black_spider_ep2_base')
					)
					{						
						if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_right_black');
					} 
					else 
					{
						if (!thePlayer.IsEffectActive('covered_blood_green_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_green_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_right_green');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Yellow) 
				{
					if (actortarget.HasAbility('mon_archespor_base'))
					{
						if (!thePlayer.IsEffectActive('covered_blood_yellow_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_yellow_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_right_yellow');
					} 
					else 
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_right');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Black) 
				{
					if ( mc == MC_Vampire ) 
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_right');
					}
					else if ( mc == MC_Magicals ) 
					{
						if (actortarget.HasAbility('mon_golem_base')
						|| actortarget.HasAbility('mon_djinn')
						|| actortarget.HasAbility('mon_gargoyle')
						)
						{
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_right_black');
						}
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_right');
						}
					}
					else
					{
						if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_right_black');
					}
				}
				else
				{
					if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

					GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_right');
				}

				RemoveTimer('ACS_RemoveCoveredBlood');
				AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
			}
		}
	}

	public timer function WerewolfLightAttackDamageLeft(deltaTime : float , id : int)
	{
		GetACSTransformationWerewolf().PlayEffectSingle('l_claw_trail');
		GetACSTransformationWerewolf().StopEffect('l_claw_trail');

		WerewolfLightAttackDamageActualLeft();
	}

	public timer function WerewolfLightAttackDamageRight(deltaTime : float , id : int)
	{
		GetACSTransformationWerewolf().PlayEffectSingle('r_claw_trail');
		GetACSTransformationWerewolf().StopEffect('r_claw_trail');

		WerewolfLightAttackDamageActualRight();
	}

	function WerewolfHeavyAttackDamageActual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		if (GetACSTransformationWerewolf().HasTag('ACS_Werewolf_Berserk_Mode'))
		{
			attackRange = 3;

			attackAngle = 60;
		}
		else
		{
			attackRange = 2.5;

			attackAngle = 45;
		}

		actors.Clear();

		actors = GetACSTransformationWerewolf().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationWerewolf().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationWerewolf()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Werewolf_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					if ( actortarget.GetStat( BCS_Vitality ) >= maxTargetVitality * 0.25 )
					{
						damageMax = actortarget.GetStat( BCS_Vitality ) * 0.25; 
					}
					else if ( actortarget.GetStat( BCS_Vitality ) < maxTargetVitality * 0.25 )
					{
						damageMax = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.25; 
					}
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.125; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 
						}
					}
					else
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.25; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.25; 
						}
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				dmg.AddEffectInfo( EET_Stagger, 3 );

				dmg.AddEffectInfo( EET_Bleeding, 3 );

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_large");

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_small");

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');		

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, 100 + damageMax );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, 100 + damageMax );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	

				theGame.GetMonsterParamsForActor(actortarget, mc, tmpName, tmpBool, tmpBool, tmpBool);

				RemoveAllCoveredBlood();

				if( ((CNewNPC)actortarget).GetBloodType() == BT_Red) 
				{
					if (actortarget.HasAbility('mon_lessog_base')
					|| actortarget.HasAbility('mon_sprigan_base')
					)
					{						
						if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_test_black');
					} 
					else
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_test');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Green) 
				{
					if (actortarget.HasAbility('mon_kikimore_base')
					|| actortarget.HasAbility('mon_black_spider_base')
					|| actortarget.HasAbility('mon_black_spider_ep2_base')
					)
					{						
						if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_test_black');
					} 
					else 
					{
						if (!thePlayer.IsEffectActive('covered_blood_green_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_green_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('PlayEffectSingle');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Yellow) 
				{
					if (actortarget.HasAbility('mon_archespor_base'))
					{
						if (!thePlayer.IsEffectActive('covered_blood_yellow_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_yellow_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_test_yellow');
					} 
					else 
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_test');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Black) 
				{
					if ( mc == MC_Vampire ) 
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_test');
					}
					else if ( mc == MC_Magicals ) 
					{
						if (actortarget.HasAbility('mon_golem_base')
						|| actortarget.HasAbility('mon_djinn')
						|| actortarget.HasAbility('mon_gargoyle')
						)
						{
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_test_black');
						}
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_test');
						}
					}
					else
					{
						if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_test_black');
					}
				}
				else
				{
					if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

					GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_test');
				}

				RemoveTimer('ACS_RemoveCoveredBlood');
				AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
			}
		}
	}

	public timer function WerewolfHeavyAttackDamage(deltaTime : float , id : int)
	{
		GetACSTransformationWerewolf().PlayEffectSingle('r_claw_trail');
		GetACSTransformationWerewolf().StopEffect('r_claw_trail');

		GetACSTransformationWerewolf().PlayEffectSingle('l_claw_trail');
		GetACSTransformationWerewolf().StopEffect('l_claw_trail');

		WerewolfHeavyAttackDamageActual();
	}

	function WerewolfSpecialLightAttackDamageActual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		GetACSTransformationWerewolf().PlayEffectSingle('attack_special_forward');
		GetACSTransformationWerewolf().StopEffect('attack_special_forward');

		GetACSTransformationWerewolf().PlayEffectSingle('attack_special');
		GetACSTransformationWerewolf().StopEffect('attack_special');

		if (GetACSTransformationWerewolf().HasTag('ACS_Werewolf_Berserk_Mode'))
		{
			attackRange = 3.5;

			attackAngle = 360;
		}
		else
		{
			attackRange = 3;

			attackAngle = 360;
		}

		actors.Clear();

		actors = GetACSTransformationWerewolf().GetNPCsAndPlayersInRange(attackRange, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationWerewolf()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Werewolf_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					if ( actortarget.GetStat( BCS_Vitality ) >= maxTargetVitality * 0.25 )
					{
						damageMax = actortarget.GetStat( BCS_Vitality ) * 0.25; 
					}
					else if ( actortarget.GetStat( BCS_Vitality ) < maxTargetVitality * 0.25 )
					{
						damageMax = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.25; 
					}
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.125; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 
						}
					}
					else
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.25; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.25; 
						}
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );

				dmg.AddEffectInfo( EET_Stagger, 3 );

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				//thePlayer.GainStat( BCS_Vitality, thePlayer.GetStatMax( BCS_Vitality) * 0.05 );

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_large");

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_small");

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, 200 + damageMax );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, 200 + damageMax );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	

				theGame.GetMonsterParamsForActor(actortarget, mc, tmpName, tmpBool, tmpBool, tmpBool);

				RemoveAllCoveredBlood();

				if( ((CNewNPC)actortarget).GetBloodType() == BT_Red) 
				{
					if (actortarget.HasAbility('mon_lessog_base')
					|| actortarget.HasAbility('mon_sprigan_base')
					)
					{						
						if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_test_black');
					} 
					else
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_test');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Green) 
				{
					if (actortarget.HasAbility('mon_kikimore_base')
					|| actortarget.HasAbility('mon_black_spider_base')
					|| actortarget.HasAbility('mon_black_spider_ep2_base')
					)
					{						
						if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_test_black');
					} 
					else 
					{
						if (!thePlayer.IsEffectActive('covered_blood_green_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_green_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('PlayEffectSingle');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Yellow) 
				{
					if (actortarget.HasAbility('mon_archespor_base'))
					{
						if (!thePlayer.IsEffectActive('covered_blood_yellow_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_yellow_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_test_yellow');
					} 
					else 
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_test');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Black) 
				{
					if ( mc == MC_Vampire ) 
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_test');
					}
					else if ( mc == MC_Magicals ) 
					{
						if (actortarget.HasAbility('mon_golem_base')
						|| actortarget.HasAbility('mon_djinn')
						|| actortarget.HasAbility('mon_gargoyle')
						)
						{
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_test_black');
						}
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_test');
						}
					}
					else
					{
						if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_test_black');
					}
				}
				else
				{
					if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

					GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_test');
				}

				RemoveTimer('ACS_RemoveCoveredBlood');
				AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
			}
		}
	}

	function WerewolfSpecialLightAttackDamageActualLeft()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		GetACSTransformationWerewolf().PlayEffectSingle('attack_special_forward');
		GetACSTransformationWerewolf().StopEffect('attack_special_forward');

		GetACSTransformationWerewolf().PlayEffectSingle('attack_special');
		GetACSTransformationWerewolf().StopEffect('attack_special');

		if (GetACSTransformationWerewolf().HasTag('ACS_Werewolf_Berserk_Mode'))
		{
			attackRange = 3.5;

			attackAngle = 360;
		}
		else
		{
			attackRange = 3;

			attackAngle = 360;
		}

		actors.Clear();

		actors = GetACSTransformationWerewolf().GetNPCsAndPlayersInRange(attackRange, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationWerewolf()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Werewolf_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					if ( actortarget.GetStat( BCS_Vitality ) >= maxTargetVitality * 0.25 )
					{
						damageMax = actortarget.GetStat( BCS_Vitality ) * 0.25; 
					}
					else if ( actortarget.GetStat( BCS_Vitality ) < maxTargetVitality * 0.25 )
					{
						damageMax = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.25; 
					}
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.125; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 
						}
					}
					else
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.25; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.25; 
						}
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );

				dmg.AddEffectInfo( EET_Stagger, 3 );

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				//thePlayer.GainStat( BCS_Vitality, thePlayer.GetStatMax( BCS_Vitality) * 0.05 );

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_large");

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_small");

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, 200 + damageMax );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, 200 + damageMax );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	

				theGame.GetMonsterParamsForActor(actortarget, mc, tmpName, tmpBool, tmpBool, tmpBool);

				RemoveAllCoveredBlood();

				if( ((CNewNPC)actortarget).GetBloodType() == BT_Red) 
				{
					if (actortarget.HasAbility('mon_lessog_base')
					|| actortarget.HasAbility('mon_sprigan_base')
					)
					{						
						if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_left_black');
					} 
					else
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_left');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Green) 
				{
					if (actortarget.HasAbility('mon_kikimore_base')
					|| actortarget.HasAbility('mon_black_spider_base')
					|| actortarget.HasAbility('mon_black_spider_ep2_base')
					)
					{						
						if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_left_black');
					} 
					else 
					{
						if (!thePlayer.IsEffectActive('covered_blood_green_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_green_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_left_green');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Yellow) 
				{
					if (actortarget.HasAbility('mon_archespor_base'))
					{
						if (!thePlayer.IsEffectActive('covered_blood_yellow_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_yellow_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_left_yellow');
					} 
					else 
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_left');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Black) 
				{
					if ( mc == MC_Vampire ) 
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_left');
					}
					else if ( mc == MC_Magicals ) 
					{
						if (actortarget.HasAbility('mon_golem_base')
						|| actortarget.HasAbility('mon_djinn')
						|| actortarget.HasAbility('mon_gargoyle')
						)
						{
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_left_black');
						}
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_left');
						}
					}
					else
					{
						if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_left_black');
					}
				}
				else
				{
					if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

					GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_left');
				}

				RemoveTimer('ACS_RemoveCoveredBlood');
				AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
			}
		}
	}

	function WerewolfSpecialLightAttackDamageActualRight()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		GetACSTransformationWerewolf().PlayEffectSingle('attack_special_forward');
		GetACSTransformationWerewolf().StopEffect('attack_special_forward');

		GetACSTransformationWerewolf().PlayEffectSingle('attack_special');
		GetACSTransformationWerewolf().StopEffect('attack_special');

		if (GetACSTransformationWerewolf().HasTag('ACS_Werewolf_Berserk_Mode'))
		{
			attackRange = 3.5;

			attackAngle = 360;
		}
		else
		{
			attackRange = 3;

			attackAngle = 360;
		}

		actors.Clear();

		actors = GetACSTransformationWerewolf().GetNPCsAndPlayersInRange(attackRange, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationWerewolf()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Werewolf_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					if ( actortarget.GetStat( BCS_Vitality ) >= maxTargetVitality * 0.25 )
					{
						damageMax = actortarget.GetStat( BCS_Vitality ) * 0.25; 
					}
					else if ( actortarget.GetStat( BCS_Vitality ) < maxTargetVitality * 0.25 )
					{
						damageMax = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.25; 
					}
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.125; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 
						}
					}
					else
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.25; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.25; 
						}
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );

				dmg.AddEffectInfo( EET_Stagger, 3 );

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				//thePlayer.GainStat( BCS_Vitality, thePlayer.GetStatMax( BCS_Vitality) * 0.05 );

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_large");

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_small");

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, 200 + damageMax );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, 200 + damageMax );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	

				theGame.GetMonsterParamsForActor(actortarget, mc, tmpName, tmpBool, tmpBool, tmpBool);

				RemoveAllCoveredBlood();

				if( ((CNewNPC)actortarget).GetBloodType() == BT_Red) 
				{
					if (actortarget.HasAbility('mon_lessog_base')
					|| actortarget.HasAbility('mon_sprigan_base')
					)
					{						
						if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_left_black');
					} 
					else
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_left');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Green) 
				{
					if (actortarget.HasAbility('mon_kikimore_base')
					|| actortarget.HasAbility('mon_black_spider_base')
					|| actortarget.HasAbility('mon_black_spider_ep2_base')
					)
					{						
						if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_left_black');
					} 
					else 
					{
						if (!thePlayer.IsEffectActive('covered_blood_green_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_green_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_left_green');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Yellow) 
				{
					if (actortarget.HasAbility('mon_archespor_base'))
					{
						if (!thePlayer.IsEffectActive('covered_blood_yellow_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_yellow_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_left_yellow');
					} 
					else 
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_left');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Black) 
				{
					if ( mc == MC_Vampire ) 
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_left');
					}
					else if ( mc == MC_Magicals ) 
					{
						if (actortarget.HasAbility('mon_golem_base')
						|| actortarget.HasAbility('mon_djinn')
						|| actortarget.HasAbility('mon_gargoyle')
						)
						{
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_left_black');
						}
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_left');
						}
					}
					else
					{
						if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

						GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_left_black');
					}
				}
				else
				{
					if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

					GetACSTransformationWerewolf().PlayEffectSingle('blood_effect_claws_left');
				}

				RemoveTimer('ACS_RemoveCoveredBlood');
				AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
			}
		}
	}

	public timer function WerewolfSpecialLightAttackDamage(deltaTime : float , id : int)
	{
		GetACSTransformationWerewolf().PlayEffectSingle('r_claw_trail');
		GetACSTransformationWerewolf().StopEffect('r_claw_trail');

		GetACSTransformationWerewolf().PlayEffectSingle('l_claw_trail');
		GetACSTransformationWerewolf().StopEffect('l_claw_trail');

		WerewolfSpecialLightAttackDamageActual();
	}

	public timer function WerewolfSpecialLightAttackDamageLeft(deltaTime : float , id : int)
	{
		GetACSTransformationWerewolf().PlayEffectSingle('l_claw_trail');
		GetACSTransformationWerewolf().StopEffect('l_claw_trail');

		WerewolfSpecialLightAttackDamageActualLeft();
	}

	public timer function WerewolfSpecialLightAttackDamageRight(deltaTime : float , id : int)
	{
		GetACSTransformationWerewolf().PlayEffectSingle('r_claw_trail');
		GetACSTransformationWerewolf().StopEffect('r_claw_trail');

		WerewolfSpecialLightAttackDamageActualRight();
	}

	public timer function WerewolfBerserkModeDeactivate(deltaTime : float , id : int)
	{
		if (GetACSTransformationWerewolf().HasTag('ACS_Werewolf_Berserk_Mode'))
		{
			GetACSTransformationWerewolf().RemoveTag('ACS_Werewolf_Berserk_Mode');

			GetACSTransformationWerewolf().DestroyEffect('glow');

			GetACSTransformationWerewolf().StopEffect('him_smoke_swirl_black');

			GetACSTransformationWerewolf().DestroyEffect('morph_fx');
			GetACSTransformationWerewolf().PlayEffectSingle('morph_fx');

			AddTimer('ShrinkTransformationWolfTimer', 0.02, true);
		}
	}

	private var transformationWolfMeshComp 																		: CComponent;
	private var transformationWolfAnimComp 																		: CAnimatedComponent;

	private var transformationWolfScale 																		: float;

	default transformationWolfScale 																			= 1.1875;

	public function ResetTransformationWolfSize()
	{
		transformationWolfScale -= transformationWolfScale;
		transformationWolfScale = 1.1875;
	}

	public timer function GrowTransformationWolfTimer ( dt : float, id : int)
	{ 
		if (transformationWolfScale >= 1.5)
		{
			GetACSTransformationWerewolf().AddTag('ACS_Transformation_Werewolf_Mega_Sized');
			RemoveTimer('GrowTransformationWolfTimer');

			GetACSTransformationWerewolf().DestroyEffect('morph_fx');
				
			GetACSTransformationWerewolf().DestroyEffect('glow');
			GetACSTransformationWerewolf().PlayEffectSingle('glow');
		}
		else
		{
			GrowTransformationWolfActual();
		}	
	} 

	public timer function ShrinkTransformationWolfTimer ( dt : float, id : int)
	{ 
		if (transformationWolfScale <= 1.1875)
		{
			GetACSTransformationWerewolf().RemoveTag('ACS_Transformation_Werewolf_Mega_Sized');
			RemoveTimer('ShrinkTransformationWolfTimer');
		}
		else
		{
			ShrinkTransformationWolfActual();
		}	
	} 

	function GrowTransformationWolfActual()
	{
		transformationWolfMeshComp = GetACSTransformationWerewolf().GetComponentByClassName('CMeshComponent');

		transformationWolfAnimComp = (CAnimatedComponent)GetACSTransformationWerewolf().GetComponentByClassName('CAnimatedComponent');

		if (transformationWolfScale >= 1.5)
		{
			GetACSTransformationWerewolf().AddTag('ACS_Transformation_Werewolf_Mega_Sized');
			RemoveTimer('GrowTransformationWolfTimer');

			GetACSTransformationWerewolf().DestroyEffect('morph_fx');
				
			GetACSTransformationWerewolf().DestroyEffect('glow');
			GetACSTransformationWerewolf().PlayEffectSingle('glow');
		}
		else
		{
			transformationWolfMeshComp.SetScale(Vector(
				
			transformationWolfScale += 0.00078125,
			transformationWolfScale += 0.00078125,
			transformationWolfScale += 0.00078125
	
			));

			transformationWolfAnimComp.SetScale(Vector(
				
			transformationWolfScale += 0.00078125,
			transformationWolfScale += 0.00078125,
			transformationWolfScale += 0.00078125
	
			));
		}
	}

	function ShrinkTransformationWolfActual()
	{
		transformationWolfMeshComp = GetACSTransformationWerewolf().GetComponentByClassName('CMeshComponent');

		transformationWolfAnimComp = (CAnimatedComponent)GetACSTransformationWerewolf().GetComponentByClassName('CAnimatedComponent');

		if (transformationWolfScale <= 1.1875)
		{
			GetACSTransformationWerewolf().RemoveTag('ACS_Transformation_Werewolf_Mega_Sized');
			RemoveTimer('ShrinkTransformationWolfTimer');
		}
		else
		{
			transformationWolfMeshComp.SetScale(Vector(
				
			transformationWolfScale -= 0.00078125,
			transformationWolfScale -= 0.00078125,
			transformationWolfScale -= 0.00078125
	
			));

			transformationWolfAnimComp.SetScale(Vector(
				
			transformationWolfScale -= 0.00078125,
			transformationWolfScale -= 0.00078125,
			transformationWolfScale -= 0.00078125
	
			));
		}
	}

	private var werewolf_roar_index_1																									: int;
	default werewolf_roar_index_1 																										= 0;

	private var previous_werewolf_roar_index_1																							: int;
	default previous_werewolf_roar_index_1 																								= 0;

	function Transformation_Werewolf_Roar()
	{
		werewolf_roar_index_1 = RandDifferent(this.previous_werewolf_roar_index_1 , 3);

		switch (werewolf_roar_index_1) 
		{	
			case 2:
			ACSTransformWerewolfPlayAnim( 'monster_werewolf_taunt_counter', 0.25f, 0.325f);
			break;
			
			case 1:
			ACSTransformWerewolfPlayAnim( 'monster_werewolf_taunt_02', 0.25f, 0.325f);
			break;
			
			default:
			ACSTransformWerewolfPlayAnim( 'monster_werewolf_taunt_01', 0.25f, 0.325f);
			break;
		}

		this.previous_werewolf_roar_index_1 = werewolf_roar_index_1;

		RemoveTimer('WerewolfBerserkModeDeactivate');
		AddTimer('WerewolfBerserkModeDeactivate', 20, false);

		AddTimer('GrowTransformationWolfTimer', 0.02, true);

		GetACSTransformationWerewolf().PlayEffectSingle('pre_sonar');
		GetACSTransformationWerewolf().StopEffect('pre_sonar');

		GetACSTransformationWerewolf().PlayEffectSingle('sonar_ready');
		GetACSTransformationWerewolf().StopEffect('sonar_ready');

		GetACSTransformationWerewolf().PlayEffectSingle('sonar');
		GetACSTransformationWerewolf().StopEffect('sonar');

		GetACSTransformationWerewolf().PlayEffectSingle('special_force_l');
		GetACSTransformationWerewolf().StopEffect('special_force_l');

		GetACSTransformationWerewolf().PlayEffectSingle('special_force_r');
		GetACSTransformationWerewolf().StopEffect('special_force_r');

		GetACSTransformationWerewolf().PlayEffectSingle('attack_special');
		GetACSTransformationWerewolf().StopEffect('attack_special');
		
		GetACSTransformationWerewolf().PlayEffectSingle('smash_ground');
		GetACSTransformationWerewolf().StopEffect('smash_ground');

		GetACSTransformationWerewolf().DestroyEffect('glow');

		GetACSTransformationWerewolf().StopEffect('him_smoke_swirl_black');
		GetACSTransformationWerewolf().PlayEffectSingle('him_smoke_swirl_black');
		GetACSTransformationWerewolf().PlayEffectSingle('him_smoke_swirl_black');
		GetACSTransformationWerewolf().PlayEffectSingle('him_smoke_swirl_black');

		GetACSTransformationWerewolf().DestroyEffect('morph_fx');
		GetACSTransformationWerewolf().PlayEffectSingle('morph_fx');

		if (!GetACSTransformationWerewolf().HasTag('ACS_Werewolf_Berserk_Mode'))
		{
			GetACSTransformationWerewolf().AddTag('ACS_Werewolf_Berserk_Mode');
		}

		thePlayer.SoundEvent("animals_wolf_howl");
		thePlayer.SoundEvent("animals_wolf_howl");
		thePlayer.SoundEvent("animals_wolf_howl");
		thePlayer.SoundEvent("animals_wolf_howl");
		thePlayer.SoundEvent("animals_wolf_howl");

		thePlayer.SoundEvent("monster_wild_dog_howl");
		thePlayer.SoundEvent("monster_wild_dog_howl");
		thePlayer.SoundEvent("monster_wild_dog_howl");
		thePlayer.SoundEvent("monster_wild_dog_howl");
		thePlayer.SoundEvent("monster_wild_dog_howl");

		thePlayer.SoundEvent("monster_werewolf_vo_taunt1");
		thePlayer.SoundEvent("monster_werewolf_vo_taunt1");
		//thePlayer.SoundEvent("monster_werewolf_vo_taunt1");
		//thePlayer.SoundEvent("monster_werewolf_vo_taunt1");
		//thePlayer.SoundEvent("monster_werewolf_vo_taunt1");

		thePlayer.SoundEvent("monster_werewolf_vo_taunt2");
		thePlayer.SoundEvent("monster_werewolf_vo_taunt2");
		//thePlayer.SoundEvent("monster_werewolf_vo_taunt2");
		//thePlayer.SoundEvent("monster_werewolf_vo_taunt2");
		//thePlayer.SoundEvent("monster_werewolf_vo_taunt2");

		thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );

		thePlayer.DrainVitality( thePlayer.GetStat( BCS_Vitality ) * 0.5 );

		actors.Clear();

		actors = GetACSTransformationWerewolf().GetNPCsAndPlayersInRange(15, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationWerewolf()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Werewolf_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				dmg.SetHitReactionType( EHRT_Heavy, true);

				movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );

				dmg.AddEffectInfo( EET_Stagger, 3 );	

				dmg.AddEffectInfo( EET_Blindness, 6 );	

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, 1 );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, 1 );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	private var werewolf_light_attack_index_1																									: int;
	default werewolf_light_attack_index_1 																										= -1;

	private var previous_werewolf_light_attack_index_1																							: int;
	default previous_werewolf_light_attack_index_1 																								= -1;

	function ACS_Transformation_Werewolf_Light_Attacks()
	{
		if (ACS_can_perform_transformation_light_attack())
		{
			ACS_refresh_transformation_light_attack_cooldown();

			ACSWerewolfRemoveMoveTimers();

			thePlayer.RemoveTag('ACS_Transformation_Werewolf_Is_Moving');

			if (thePlayer.IsInCombat())
			{
				ACSTransformWerewolfMovementAdjustRotateTowardsEnemy();
			}
			else
			{
				ACSTransformWerewolfMovementAdjustForward();
			}

			if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
			&& thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 0.9
			&& thePlayer.IsInCombat()
			&& !GetACSTransformationWerewolf().HasTag('ACS_Transformation_Werewolf_Mega_Sized')
			)
			{
				Transformation_Werewolf_Roar();
			}
			else
			{
				werewolf_light_attack_index_1 = RandDifferent(this.previous_werewolf_light_attack_index_1 , 5);

				switch (werewolf_light_attack_index_1) 
				{	
					case 4:
					ACSTransformWerewolfPlayAnim( 'monster_werewolf_attack_counter_near', 0.25f, 0.325f);
					AddTimer('WerewolfLightAttackDamageRight', 0.5, false);
					break;

					case 3:
					ACSTransformWerewolfPlayAnim( 'monster_werewolf_attack06', 0.25f, 0.325f);
					AddTimer('WerewolfLightAttackDamageLeft', 0.5, false);
					break;	
					
					case 2:
					ACSTransformWerewolfPlayAnim( 'monster_werewolf_attack04', 0.25f, 0.325f);
					AddTimer('WerewolfLightAttackDamageLeft', 0.5, false);
					break;
					
					case 1:
					ACSTransformWerewolfPlayAnim( 'monster_werewolf_attack03', 0.25f, 0.325f);
					AddTimer('WerewolfLightAttackDamageRight', 0.5, false);
					break;
					
					default:
					ACSTransformWerewolfPlayAnim( 'monster_werewolf_attack01', 0.25f, 0.325f);
					AddTimer('WerewolfBiteDamage', 0.5, false);
					break;
				}
		
				this.previous_werewolf_light_attack_index_1 = werewolf_light_attack_index_1;
			}

			ACS_StaminaDrainForced(5);
		}
	}
	

	private var werewolf_special_light_attack_index_1																							: int;
	default werewolf_special_light_attack_index_1 																								= -1;

	private var previous_werewolf_special_light_attack_index_1																					: int;
	default previous_werewolf_special_light_attack_index_1 																						= -1;


	public timer function WerewolfReturnCollision ( dt : float, id : int)
	{
		GetACSTransformationWerewolf().EnableCharacterCollisions(true);
	}

	function ACS_Transformation_Werewolf_Special_Light_Attacks()
	{
		if (ACS_can_perform_transformation_special_attack() && thePlayer.GetStat(BCS_Stamina) >= thePlayer.GetStatMax( BCS_Stamina) * 0.05)
		{
			ACS_refresh_transformation_special_attack_cooldown();

			ACSWerewolfRemoveMoveTimers();

			thePlayer.RemoveTag('ACS_Transformation_Werewolf_Is_Moving');

			if (thePlayer.IsInCombat())
			{
				ACSTransformWerewolfMovementAdjustRotateTowardsEnemy();
			}
			else
			{
				ACSTransformWerewolfMovementAdjustForward();
			}

			//GetACSTransformationWerewolf().EnableCharacterCollisions(false);

			werewolf_special_light_attack_index_1 = RandDifferent(this.previous_werewolf_special_light_attack_index_1 , 4);

			switch (werewolf_special_light_attack_index_1) 
			{	
				case 3:
				ACSTransformWerewolfPlayAnim( 'monster_werewolf_run_attack02', 0.25f, 0.325f);
				AddTimer('WerewolfSpecialAttackSlide', 0.7, false);
				AddTimer('WerewolfSpecialLightAttackDamageLeft', 1.25, false);
				//AddTimer('WerewolfReturnCollision', 0.9, false);
				break;
			
				case 2:
				ACSTransformWerewolfPlayAnim( 'monster_werewolf_run_attack01', 0.25f, 0.325f);
				AddTimer('WerewolfSpecialAttackSlide', 0.7, false);
				AddTimer('WerewolfSpecialLightAttackDamageLeft', 1.25, false);
				//AddTimer('WerewolfReturnCollision', 1.15, false);
				break;

				case 1:
				ACSTransformWerewolfPlayAnim( 'monster_werewolf_attack_counter_far', 0.25f, 0.325f);
				AddTimer('WerewolfSpecialAttackSlide', 0.125, false);
				AddTimer('WerewolfSpecialLightAttackDamageLeft', 0.5, false);
				//AddTimer('WerewolfReturnCollision', 0.4, false);
				break;
				
				default:
				ACSTransformWerewolfPlayAnim( 'monster_werewolf_run_attack', 0.25f, 0.325f);
				AddTimer('WerewolfSpecialAttackSlide', 0.125, false);
				AddTimer('WerewolfSpecialLightAttackDamage', 0.5, false);
				//AddTimer('WerewolfReturnCollision', 0.4, false);
				break;
			}
	
			this.previous_werewolf_special_light_attack_index_1 = werewolf_special_light_attack_index_1;

			ACS_StaminaDrainForced(5);
		}
		else
		{
			thePlayer.SoundEvent("gui_no_stamina");
		}
	}

	private var werewolf_heavy_attack_index_1																									: int;
	default werewolf_heavy_attack_index_1 																										= -1;

	private var previous_werewolf_heavy_attack_index_1																							: int;
	default previous_werewolf_heavy_attack_index_1 																								= -1;

	function ACS_Transformation_Werewolf_Heavy_Attacks()
	{
		if (ACS_can_perform_transformation_heavy_attack())
		{
			ACS_refresh_transformation_heavy_attack_cooldown();

			ACSWerewolfRemoveMoveTimers();

			thePlayer.RemoveTag('ACS_Transformation_Werewolf_Is_Moving');

			if (thePlayer.IsInCombat())
			{
				ACSTransformWerewolfMovementAdjustRotateTowardsEnemy();
			}
			else
			{
				ACSTransformWerewolfMovementAdjustForward();
			}

			werewolf_heavy_attack_index_1 = RandDifferent(this.previous_werewolf_heavy_attack_index_1 , 2);

			switch (werewolf_heavy_attack_index_1) 
			{	
				case 1:
				ACSTransformWerewolfPlayAnim( 'monster_werewolf_attack05', 0.25f, 0.325f);
				AddTimer('WerewolfHeavyAttackDamage', 0.5, false);
				break;

				default:
				ACSTransformWerewolfPlayAnim( 'monster_werewolf_attack02', 0.25f, 0.325f);
				AddTimer('WerewolfHeavyAttackDamage', 0.5, false);
				break;
			}
	
			this.previous_werewolf_heavy_attack_index_1 = werewolf_heavy_attack_index_1;

			ACS_StaminaDrainForced(5);
		}
	}

	function werewolf_dodge_timer_actual() 
	{
		RemoveTimer('ACS_werewolf_dodge_timer_end');

		GetACSTransformationWerewolf().PlayEffectSingle('r_claw_trail');
		GetACSTransformationWerewolf().StopEffect('r_claw_trail');

		GetACSTransformationWerewolf().PlayEffectSingle('l_claw_trail');
		GetACSTransformationWerewolf().StopEffect('l_claw_trail');

		GetACSTransformationWerewolf().DestroyEffect('jump_ground_fx1');
		GetACSTransformationWerewolf().PlayEffectSingle('jump_ground_fx1');

		GetACSTransformationWerewolf().DestroyEffect('jump_ground_fx2');
		GetACSTransformationWerewolf().PlayEffectSingle('jump_ground_fx2');

		GetACSTransformationWerewolf().StopEffect('move_fx');
		GetACSTransformationWerewolf().PlayEffectSingle('move_fx');

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 

		thePlayer.SetIsCurrentlyDodging(true);
	
		AddTimer('ACS_werewolf_dodge_timer_end', 0.875  , false);
	}
	
	function werewolf_dodge_timer_end_actual() 
	{ 
		thePlayer.SetImmortalityMode( AIM_None, AIC_Combat ); 

		thePlayer.SetIsCurrentlyDodging(false);
	}

	public timer function ground_hand_sparks ( dt : float, id : int) 
	{ 
		GetACSTransformationWerewolf().DestroyEffect('ground_hand_fx');		
		GetACSTransformationWerewolf().PlayEffectSingle('ground_hand_fx');

		thePlayer.SoundEvent("monster_fleder_mv_claw_scratch_ground");
	}

	public timer function ACS_werewolf_dodge_timer_end ( dt : float, id : int) 
	{ 
		werewolf_dodge_timer_end_actual();
	} 

	function ACS_Transformation_Werewolf_Dodge()
	{
		if (ACS_can_transformation_dodge())
		{
			ACS_refresh_transformation_dodge_cooldown();

			thePlayer.RemoveTag('ACS_Transformation_Werewolf_Is_Moving');

			ACSWerewolfRemoveMoveTimers();

			werewolf_dodge_timer_actual();

			if (thePlayer.IsInCombat())
			{
				if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
				{
					ACSTransformWerewolfMovementAdjustForwardDodge();
				}
				else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5)
				{
					ACSTransformWerewolfMovementAdjustCounterDodge();
				}
				else if (theInput.GetActionValue('GI_AxisLeftX') > 0.5)
				{
					ACSTransformWerewolfMovementAdjustSlideRight();
					ACSTransformWerewolfPlayAnim('monster_werewolf_dodge_back_right', 0.25f, 0.325f);
				}
				else if (theInput.GetActionValue('GI_AxisLeftX') < -0.5)
				{
					ACSTransformWerewolfMovementAdjustSlideLeft();
					ACSTransformWerewolfPlayAnim('monster_werewolf_dodge_back_left', 0.25f, 0.325f);
				}
				else
				{
					ACSTransformWerewolfMovementAdjustNormalDodge();
				}
			}
			else
			{
				ACSTransformWerewolfMovementAdjustForward();

				if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
				{
					ACSTransformWerewolfPlayAnim('monster_werewolf_run_to_idle', 0.25f, 0.325f);
				}
				else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5)
				{
					ACSTransformWerewolfPlayAnim('monster_werewolf_dodge_counter_front', 0.25f, 0.875f);

					RemoveTimer('ground_hand_sparks');
					GetACSTransformationWerewolf().DestroyEffect('ground_hand_fx');	

					AddTimer('ground_hand_sparks', 0.5  , false);
				}
				else if (theInput.GetActionValue('GI_AxisLeftX') > 0.5)
				{
					ACSTransformWerewolfPlayAnim('monster_werewolf_dodge_back_right', 0.25f, 0.325f);
				}
				else if (theInput.GetActionValue('GI_AxisLeftX') < -0.5)
				{
					ACSTransformWerewolfPlayAnim('monster_werewolf_dodge_back_left', 0.25f, 0.325f);
				}
				else
				{
					ACSTransformWerewolfPlayAnim('monster_werewolf_dodge_b01', 0.25f, 0.325f);
				}
			}

			ACS_StaminaDrainForced(5);
		}
	}

	public timer function Werewolf_Change_Stance_Backward ( dt : float, id : int) 
	{ 
		((CNewNPC)GetACSTransformationWerewolf()).SetBehaviorVariable( 'npcStance', 2 , true );
	} 

	public timer function Werewolf_Change_Stance_Forward ( dt : float, id : int) 
	{ 
		((CNewNPC)GetACSTransformationWerewolf()).SetBehaviorVariable( 'npcStance', 3 , true );
	}

	public timer function Vampiress_Change_Stance_Backward ( dt : float, id : int) 
	{ 
		((CNewNPC)GetACSTransformationVampiress()).SetBehaviorVariable( 'npcStance', 2 , true );
	} 

	public timer function Vampiress_Change_Stance_Forward ( dt : float, id : int) 
	{ 
		((CNewNPC)GetACSTransformationVampiress()).SetBehaviorVariable( 'npcStance', 3 , true );
	}

	public timer function Transformation_Vampire_Monster_Change_Stance_Backward ( dt : float, id : int) 
	{ 
		((CNewNPC)GetACSTransformationVampireMonster()).SetBehaviorVariable( 'npcStance', 2 , true );
	} 

	public timer function Transformation_Vampire_Monster_Change_Stance_Forward ( dt : float, id : int) 
	{ 
		((CNewNPC)GetACSTransformationVampireMonster()).SetBehaviorVariable( 'npcStance', 3 , true );
	}

	public timer function Toad_Change_Stance_Backward ( dt : float, id : int) 
	{ 
		((CNewNPC)GetACSTransformationToad()).SetBehaviorVariable( 'npcStance', 2 , true );
	} 

	public timer function Toad_Change_Stance_Forward ( dt : float, id : int) 
	{ 
		((CNewNPC)GetACSTransformationToad()).SetBehaviorVariable( 'npcStance', 3 , true );
	}

	function RemoveChangeStanceTimers()
	{
		RemoveTimer('Werewolf_Change_Stance_Backward');

		RemoveTimer('Werewolf_Change_Stance_Forward');

		RemoveTimer('Vampiress_Change_Stance_Backward');

		RemoveTimer('Vampiress_Change_Stance_Forward');

		RemoveTimer('Transformation_Vampire_Monster_Change_Stance_Backward');

		RemoveTimer('Transformation_Vampire_Monster_Change_Stance_Forward');

		RemoveTimer('Toad_Change_Stance_Backward');

		RemoveTimer('Toad_Change_Stance_Forward');
	}

	public timer function Werewolf_Remove_Stationary_Tag ( dt : float, id : int) 
	{ 
		GetACSTransformationWerewolf().RemoveTag('ACS_Werewolf_Stationary_Transition');
	}

	function WerewolfRestoreRotation()
	{
		if (GetACSTransformationWerewolf().HasTag('ACS_Werewolf_Stopped_Moving'))
		{
			RemoveTimer('Werewolf_Remove_Stationary_Tag');
			AddTimer('Werewolf_Remove_Stationary_Tag', 1, false);

			GetACSTransformationWerewolf().RemoveTag('ACS_Werewolf_Stopped_Moving');
		}
	}

	function WerewolfChangeStance()
	{
		if (GetACSTransformationWerewolf().HasTag('ACS_Directional_Change_Anim'))
		{
			RemoveChangeStanceTimers();
			AddTimer('Werewolf_Change_Stance_Forward', 0.25f, false);

			ACSTransformWerewolfPlayAnim('monster_werewolf_run_f', 0.5f, 0.5f);

			GetACSTransformationWerewolf().RemoveTag('ACS_Directional_Change_Anim');
		}
	}

	public timer function Vampiress_Remove_Stationary_Tag ( dt : float, id : int) 
	{ 
		GetACSTransformationVampiress().RemoveTag('ACS_Werewolf_Stationary_Transition');
	}

	function VampiressRestoreRotation()
	{
		if (GetACSTransformationVampiress().HasTag('ACS_Vampiress_Stopped_Moving'))
		{
			RemoveTimer('Vampiress_Remove_Stationary_Tag');
			AddTimer('Vampiress_Remove_Stationary_Tag', 1, false);

			GetACSTransformationVampiress().RemoveTag('ACS_Vampiress_Stopped_Moving');
		}
	}

	function VampiressChangeStance()
	{
		if (GetACSTransformationVampiress().HasTag('ACS_Directional_Change_Anim'))
		{
			RemoveChangeStanceTimers();
			AddTimer('Vampiress_Change_Stance_Forward', 0.25f, false);

			//ACSTransformVampiressPlayAnim('monster_werewolf_run_f', 0.5f, 0.5f);

			GetACSTransformationVampiress().RemoveTag('ACS_Directional_Change_Anim');
		}
	}

	function ACS_Werewolf_Move_Controls()
	{
		if (thePlayer.IsInCombat())
		{
			if (thePlayer.GetStat(BCS_Toxicity) < thePlayer.GetStatMax(BCS_Toxicity))
			{
				thePlayer.GainStat(BCS_Toxicity, (thePlayer.GetStatMax(BCS_Toxicity) - thePlayer.GetStat(BCS_Toxicity)) * 0.00006125);
			}
			
			thePlayer.DrainVitality(thePlayer.GetStat(BCS_Vitality) * 0.000030625);
		}
		else
		{
			if (thePlayer.GetStat(BCS_Toxicity) < thePlayer.GetStatMax(BCS_Toxicity))
			{
				thePlayer.GainStat(BCS_Toxicity, (thePlayer.GetStatMax(BCS_Toxicity) - thePlayer.GetStat(BCS_Toxicity)) * 0.000030625);
			}
			
			thePlayer.DrainVitality(thePlayer.GetStat(BCS_Vitality) * 0.0000153125);
		}

		GetACSTransformationWerewolf().GetMovingAgentComponent().EnableCombatMode( true );

		GetACSTransformationWerewolf().GetMovingAgentComponent().SetVirtualRadius( 'CombatCharacterRadius' );

		if (!GetACSTransformationWerewolf().IsEffectActive('blood', false))
		{
			GetACSTransformationWerewolf().PlayEffectSingle( 'blood' );
		}

		((CNewNPC)GetACSTransformationWerewolf()).SetBehaviorVariable( 'additiveTauntOn', 1, true );

		/*
		if (thePlayer.IsInCombat())
		{
			if (thePlayer.GetTarget())
			{
				((CNewNPC)GetACSTransformationWerewolf()).SetBehaviorVectorVariable( 'lookAtTarget', ((CActor)(thePlayer.GetTarget())).GetWorldPosition() );

				((CNewNPC)GetACSTransformationWerewolf()).SetBehaviorVariable( 'lookatOn', 1, true );
			}
			else
			{
				((CNewNPC)GetACSTransformationWerewolf()).SetBehaviorVariable( 'lookatOn', 0, true );
			}
		}
		else
		{
			((CNewNPC)GetACSTransformationWerewolf()).SetBehaviorVariable( 'lookatOn', 0, true );
		}
		*/

		if (thePlayer.IsInCombat())
		{
			if (thePlayer.GetTarget())
			{
				((CNewNPC)GetACSTransformationWerewolf()).SetBehaviorVectorVariable( 'lookAtTarget', ((CActor)(thePlayer.GetTarget())).GetWorldPosition() );
			}
			else
			{
				((CNewNPC)GetACSTransformationWerewolf()).SetBehaviorVectorVariable( 'lookAtTarget', GetACSLookatEntity().GetWorldPosition() );
			}

			((CNewNPC)GetACSTransformationWerewolf()).SetBehaviorVariable( 'lookatOn', 1, true );
		}
		else
		{
			((CNewNPC)GetACSTransformationWerewolf()).SetBehaviorVectorVariable( 'lookAtTarget', GetACSLookatEntity().GetWorldPosition() );

			((CNewNPC)GetACSTransformationWerewolf()).SetBehaviorVariable( 'lookatOn', 1, true );
		}

		if (GetACSTransformationWerewolf().GetMovingAgentComponent().GetRelativeMoveSpeed() <= 0.1 )
		{
			if
			(
				theInput.GetLastActivationTime( 'GI_AxisLeftX' ) > 1.25f 
				|| theInput.GetLastActivationTime( 'GI_AxisLeftY' ) > 1.25f 
			)	
			{
				GetACSTransformationWerewolf().RemoveTag('ACS_Werewolf_Stationary_Transition');
			}
			else
			{
				RemoveTimer('Werewolf_Remove_Stationary_Tag');

				if (!GetACSTransformationWerewolf().HasTag('ACS_Werewolf_Stopped_Moving'))
				{
					GetACSTransformationWerewolf().AddTag('ACS_Werewolf_Stationary_Transition');

					GetACSTransformationWerewolf().AddTag('ACS_Werewolf_Stopped_Moving');
				}
			}
		}

		if (thePlayer.IsDodgeTimerRunning()
		|| thePlayer.IsCurrentlyDodging() )
		{
			return;
		}

		if (theInput.GetActionValue('GI_AxisLeftX') == 0 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
		{
			GetACSTransformationWerewolf().GetMovingAgentComponent().ForceSetRelativeMoveSpeed( 0.1 );
			GetACSTransformationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed( 0.1 );
		}
		else
		{
			if (theInput.GetActionValue('GI_AxisLeftY') > 0.1 && theInput.GetActionValue('GI_AxisLeftX') == 0 )
			{
				WerewolfRestoreRotation();

				WerewolfChangeStance();

				if (!GetACSTransformationWerewolf().HasTag('ACS_Werewolf_Stationary_Transition')
				)
				{
					ACSTransformWerewolfMovementAdjustForward();
				}

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftY') < -0.1 && theInput.GetActionValue('GI_AxisLeftX') == 0 )
			{
				WerewolfRestoreRotation();

				if (!GetACSTransformationWerewolf().HasTag('ACS_Werewolf_Stationary_Transition')
				)
				{
					if (thePlayer.IsInCombat())
					{
						ACSTransformWerewolfMovementAdjustForward();
					}
					else
					{
						ACSTransformWerewolfMovementAdjustBackward();
					}
				}

				if (thePlayer.IsInCombat())
				{
					if (!GetACSTransformationWerewolf().HasTag('ACS_Directional_Change_Anim'))
					{
						RemoveChangeStanceTimers();
						AddTimer('Werewolf_Change_Stance_Backward', 0.25f, false);

						ACSTransformWerewolfPlayAnim('monster_werewolf_dodge_b01', 0.5f, 0.5f);

						GetACSTransformationWerewolf().AddTag('ACS_Directional_Change_Anim');
					}

					GetACSTransformationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
				else
				{
					WerewolfChangeStance();

					if (
					theInput.IsActionPressed('Sprint')
					)
					{
						GetACSTransformationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
					}
					else
					{
						GetACSTransformationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
					}
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftX') > 0.1 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
			{
				WerewolfRestoreRotation();

				WerewolfChangeStance();

				if (!GetACSTransformationWerewolf().HasTag('ACS_Werewolf_Stationary_Transition')
				)
				{
					ACSTransformWerewolfMovementAdjustRight();
				}

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftX') < -0.1 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
			{
				WerewolfRestoreRotation();

				WerewolfChangeStance();

				if (!GetACSTransformationWerewolf().HasTag('ACS_Werewolf_Stationary_Transition')
				)
				{
					ACSTransformWerewolfMovementAdjustLeft();
				}

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftY') > 0.1 && theInput.GetActionValue('GI_AxisLeftX') > 0.1 )
			{
				WerewolfRestoreRotation();

				WerewolfChangeStance();

				if (!GetACSTransformationWerewolf().HasTag('ACS_Werewolf_Stationary_Transition')
				)
				{
					ACSTransformWerewolfMovementAdjustForwardRight();
				}

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftY') > 0.1 && theInput.GetActionValue('GI_AxisLeftX') < -0.1 )
			{
				WerewolfRestoreRotation();

				WerewolfChangeStance();

				if (!GetACSTransformationWerewolf().HasTag('ACS_Werewolf_Stationary_Transition')
				)
				{
					ACSTransformWerewolfMovementAdjustForwardLeft();
				}

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftY') < -0.1 && theInput.GetActionValue('GI_AxisLeftX') > 0.1 )
			{
				WerewolfRestoreRotation();

				WerewolfChangeStance();

				if (!GetACSTransformationWerewolf().HasTag('ACS_Werewolf_Stationary_Transition')
				)
				{
					ACSTransformWerewolfMovementAdjustBackwardRight();
				}

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftX') < -0.1 && theInput.GetActionValue('GI_AxisLeftY') < -0.1 )
			{
				WerewolfRestoreRotation();

				WerewolfChangeStance();

				if (!GetACSTransformationWerewolf().HasTag('ACS_Werewolf_Stationary_Transition')
				)
				{
					ACSTransformWerewolfMovementAdjustBackwardLeft();
				}

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
		}
	}

	function ACS_Transformation_Werewolf_Stop_Moving()
	{
		if (theInput.GetActionValue('GI_AxisLeftX') == 0 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
		{
			ACSTransformWerewolfMovementAdjustCancel();
			
			GetACSTransformationWerewolf().GetMovingAgentComponent().ForceSetRelativeMoveSpeed( 0.1f );
			GetACSTransformationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed( 0.1f );
		}
	}

	function ACSWerewolfRemoveMoveTimers()
	{
		GetACSTransformationWerewolf().EnableCharacterCollisions(true);

		RemoveTimer('WerewolfSpecialAttackSlide');

		RemoveTimer('WerewolfReturnCollision');

		RemoveTimer('WerewolfBiteDamage');

		RemoveTimer('WerewolfLightAttackDamage');

		RemoveTimer('WerewolfLightAttackDamageLeft');

		RemoveTimer('WerewolfLightAttackDamageRight');

		RemoveTimer('WerewolfSpecialLightAttackDamage');

		RemoveTimer('WerewolfSpecialLightAttackDamageLeft');

		RemoveTimer('WerewolfSpecialLightAttackDamageRight');

		RemoveTimer('WerewolfHeavyAttackDamage');

		RemoveTimer('ground_hand_sparks');

		GetACSTransformationWerewolf().DestroyEffect('ground_hand_fx');	

		((CAnimatedComponent)((CNewNPC)GetACSTransformationWerewolf()).GetComponentByClassName( 'CAnimatedComponent' )).RaiseBehaviorForceEvent('Taunt');
	}

	function ACSWerewolfRemoveAttackTimers()
	{
		GetACSTransformationWerewolf().EnableCharacterCollisions(true);

		RemoveTimer('WerewolfSpecialAttackSlide');

		RemoveTimer('WerewolfReturnCollision');
			
		RemoveTimer('WerewolfBiteDamage');

		RemoveTimer('WerewolfLightAttackDamage');

		RemoveTimer('WerewolfLightAttackDamageLeft');

		RemoveTimer('WerewolfLightAttackDamageRight');

		RemoveTimer('WerewolfSpecialLightAttackDamage');

		RemoveTimer('WerewolfSpecialLightAttackDamageLeft');

		RemoveTimer('WerewolfSpecialLightAttackDamageRight');

		RemoveTimer('WerewolfHeavyAttackDamage');

		RemoveTimer('ground_hand_sparks');

		GetACSTransformationWerewolf().DestroyEffect('ground_hand_fx');	

		((CAnimatedComponent)((CNewNPC)GetACSTransformationWerewolf()).GetComponentByClassName( 'CAnimatedComponent' )).RaiseBehaviorForceEvent('Taunt');
	}

	function ACSTransformWerewolfMovementAdjustForward()
	{
		movementAdjustorWerewolf = GetACSTransformationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		ticketWerewolf = movementAdjustorWerewolf.CreateNewRequest( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.AdjustmentDuration( ticketWerewolf, 0.5 );
		movementAdjustorWerewolf.MaxRotationAdjustmentSpeed( ticketWerewolf, 500000 );

		movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( theCamera.GetCameraDirection() ) );

		movementAdjustorWerewolfWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.GetRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate');
		movementAdjustorWerewolfWitcher.CancelByName( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.CancelAll();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.CreateNewRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.AdjustmentDuration( ticketWerewolfWitcher, 0.5 );
		movementAdjustorWerewolfWitcher.MaxRotationAdjustmentSpeed( ticketWerewolfWitcher, 500000 );

		movementAdjustorWerewolfWitcher.RotateTo( ticketWerewolfWitcher, VecHeading( theCamera.GetCameraDirection() ) );
	}

	function ACSTransformWerewolfMovementAdjustForwardDodge()
	{
		var targetactor 									: CActor;

		movementAdjustorWerewolf = GetACSTransformationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		ticketWerewolf = movementAdjustorWerewolf.CreateNewRequest( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.AdjustmentDuration( ticketWerewolf, 0.25 );
		movementAdjustorWerewolf.MaxRotationAdjustmentSpeed( ticketWerewolf, 500000 );

		if ( thePlayer.IsHardLockEnabled() )
		{
			targetactor = (CActor)( thePlayer.GetDisplayTarget() );	
		}
		else
		{
			thePlayer.FindMoveTarget();
			targetactor = (CActor)( thePlayer.moveTarget );		
		}

		if (targetactor)
		{
			if (thePlayer.IsEnemyInCone( targetactor, GetACSTransformationWerewolf().GetHeadingVector(), 50, 180, targetactor ))
			{
				movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( theCamera.GetCameraDirection() ) );

				ACSTransformWerewolfPlayAnim('monster_werewolf_run_to_idle', 0.25f, 0.325f);
			}
			else
			{
				movementAdjustorWerewolf.RotateTowards( ticketWerewolf, targetactor );

				ACSTransformWerewolfPlayAnim('monster_werewolf_dodge_counter_back', 0.25f, 0.875f);

				RemoveTimer('ground_hand_sparks');
				GetACSTransformationWerewolf().DestroyEffect('ground_hand_fx');	

				AddTimer('ground_hand_sparks', 0.75  , false);
			}
		}
		else
		{
			movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( theCamera.GetCameraDirection() ) );

			ACSTransformWerewolfPlayAnim('monster_werewolf_run_to_idle', 0.25f, 0.325f);
		}
	}

	function ACSTransformWerewolfMovementAdjustCounterDodge()
	{
		var targetactor 									: CActor;

		movementAdjustorWerewolf = GetACSTransformationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		ticketWerewolf = movementAdjustorWerewolf.CreateNewRequest( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.AdjustmentDuration( ticketWerewolf, 0.25 );
		movementAdjustorWerewolf.MaxRotationAdjustmentSpeed( ticketWerewolf, 500000 );

		if ( thePlayer.IsHardLockEnabled() && thePlayer.GetTarget() )
		{
			targetactor = (CActor)( thePlayer.GetDisplayTarget() );	
		}
		else
		{
			thePlayer.FindMoveTarget();
			targetactor = (CActor)( thePlayer.moveTarget );		
		}

		if (targetactor)
		{
			if (thePlayer.IsEnemyInCone( targetactor, GetACSTransformationWerewolf().GetHeadingVector(), 50, 180, targetactor ))
			{
				movementAdjustorWerewolf.RotateTowards( ticketWerewolf, targetactor );

				ACSTransformWerewolfPlayAnim('monster_werewolf_dodge_counter_front', 0.25f, 0.875f);

				RemoveTimer('ground_hand_sparks');
				GetACSTransformationWerewolf().DestroyEffect('ground_hand_fx');	

				AddTimer('ground_hand_sparks', 0.5  , false);
			}
			else
			{
				movementAdjustorWerewolf.RotateTowards( ticketWerewolf, targetactor );

				ACSTransformWerewolfPlayAnim('monster_werewolf_dodge_counter_back', 0.25f, 0.875f);

				RemoveTimer('ground_hand_sparks');
				GetACSTransformationWerewolf().DestroyEffect('ground_hand_fx');	

				AddTimer('ground_hand_sparks', 0.75  , false);
			}
		}
		else
		{
			movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( theCamera.GetCameraDirection() ) );

			ACSTransformWerewolfPlayAnim('monster_werewolf_dodge_counter_front', 0.25f, 0.325f);

			RemoveTimer('ground_hand_sparks');
			GetACSTransformationWerewolf().DestroyEffect('ground_hand_fx');	

			AddTimer('ground_hand_sparks', 0.5  , false);
		}
	}

	function ACSTransformWerewolfMovementAdjustNormalDodge()
	{
		var targetactor 									: CActor;

		movementAdjustorWerewolf = GetACSTransformationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		ticketWerewolf = movementAdjustorWerewolf.CreateNewRequest( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.AdjustmentDuration( ticketWerewolf, 0.25 );
		movementAdjustorWerewolf.MaxRotationAdjustmentSpeed( ticketWerewolf, 500000 );

		if ( thePlayer.IsHardLockEnabled() && thePlayer.GetTarget() )
		{
			targetactor = (CActor)( thePlayer.GetDisplayTarget() );	
		}
		else
		{
			thePlayer.FindMoveTarget();
			targetactor = (CActor)( thePlayer.moveTarget );		
		}

		if (targetactor)
		{
			if (thePlayer.IsEnemyInCone( targetactor, GetACSTransformationWerewolf().GetHeadingVector(), 50, 180, targetactor ))
			{
				movementAdjustorWerewolf.RotateTowards( ticketWerewolf, targetactor );

				ACSTransformWerewolfPlayAnim('monster_werewolf_dodge_b01', 0.25f, 0.875f);
			}
			else
			{
				movementAdjustorWerewolf.RotateTowards( ticketWerewolf, targetactor );

				ACSTransformWerewolfPlayAnim('monster_werewolf_dodge_counter_back', 0.25f, 0.875f);

				RemoveTimer('ground_hand_sparks');
				GetACSTransformationWerewolf().DestroyEffect('ground_hand_fx');	

				AddTimer('ground_hand_sparks', 0.75  , false);
			}
		}
		else
		{
			movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( theCamera.GetCameraDirection() ) );

			ACSTransformWerewolfPlayAnim('monster_werewolf_dodge_b01', 0.25f, 0.325f);
		}
	}

	function ACSTransformWerewolfMovementAdjustBackward()
	{
		movementAdjustorWerewolf = GetACSTransformationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		ticketWerewolf = movementAdjustorWerewolf.CreateNewRequest( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.AdjustmentDuration( ticketWerewolf, 0.5 );
		movementAdjustorWerewolf.MaxRotationAdjustmentSpeed( ticketWerewolf, 500000 );

		movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( theCamera.GetCameraDirection() * -5 ) );

		movementAdjustorWerewolfWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.GetRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate');
		movementAdjustorWerewolfWitcher.CancelByName( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.CancelAll();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.CreateNewRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.AdjustmentDuration( ticketWerewolfWitcher, 0.5 );
		movementAdjustorWerewolfWitcher.MaxRotationAdjustmentSpeed( ticketWerewolfWitcher, 500000 );

		movementAdjustorWerewolfWitcher.RotateTo( ticketWerewolfWitcher, VecHeading( theCamera.GetCameraDirection() * -5 ) );
	}

	function ACSTransformWerewolfMovementAdjustRight()
	{
		movementAdjustorWerewolf = GetACSTransformationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		ticketWerewolf = movementAdjustorWerewolf.CreateNewRequest( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.AdjustmentDuration( ticketWerewolf, 0.5 );
		movementAdjustorWerewolf.MaxRotationAdjustmentSpeed( ticketWerewolf, 500000 );

		movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( theCamera.GetCameraDirection() + theCamera.GetCameraRight() * 5 ) );




		movementAdjustorWerewolfWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.GetRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate');
		movementAdjustorWerewolfWitcher.CancelByName( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.CancelAll();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.CreateNewRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.AdjustmentDuration( ticketWerewolfWitcher, 0.5 );
		movementAdjustorWerewolfWitcher.MaxRotationAdjustmentSpeed( ticketWerewolfWitcher, 500000 );

		movementAdjustorWerewolfWitcher.RotateTo( ticketWerewolfWitcher, VecHeading( theCamera.GetCameraDirection() + theCamera.GetCameraRight() * 5 ) );
	}

	function ACSTransformWerewolfMovementAdjustLeft()
	{
		movementAdjustorWerewolf = GetACSTransformationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		ticketWerewolf = movementAdjustorWerewolf.CreateNewRequest( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.AdjustmentDuration( ticketWerewolf, 0.5 );
		movementAdjustorWerewolf.MaxRotationAdjustmentSpeed( ticketWerewolf, 500000 );

		movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( theCamera.GetCameraDirection() + theCamera.GetCameraRight() * -5 ) );



		movementAdjustorWerewolfWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.GetRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate');
		movementAdjustorWerewolfWitcher.CancelByName( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.CancelAll();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.CreateNewRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.AdjustmentDuration( ticketWerewolfWitcher, 0.5 );
		movementAdjustorWerewolfWitcher.MaxRotationAdjustmentSpeed( ticketWerewolfWitcher, 500000 );

		movementAdjustorWerewolfWitcher.RotateTo( ticketWerewolfWitcher, VecHeading( theCamera.GetCameraDirection() + theCamera.GetCameraRight() * -5 ) );
	}

	function ACSTransformWerewolfMovementAdjustForwardRight()
	{
		movementAdjustorWerewolf = GetACSTransformationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		ticketWerewolf = movementAdjustorWerewolf.CreateNewRequest( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.AdjustmentDuration( ticketWerewolf, 1 );
		movementAdjustorWerewolf.MaxRotationAdjustmentSpeed( ticketWerewolf, 500000 );

		//movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( (theCamera.GetCameraDirection() * 5)  + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * 5) ) );

		movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( (theCamera.GetCameraDirection() * 5) + (theCamera.GetCameraRight() * 5) ) );



		movementAdjustorWerewolfWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.GetRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate');
		movementAdjustorWerewolfWitcher.CancelByName( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.CancelAll();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.CreateNewRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.AdjustmentDuration( ticketWerewolfWitcher, 1 );
		movementAdjustorWerewolfWitcher.MaxRotationAdjustmentSpeed( ticketWerewolfWitcher, 500000 );

		//movementAdjustorWerewolfWitcher.RotateTo( ticketWerewolfWitcher, VecHeading( (theCamera.GetCameraDirection() * 5)  + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * 5) ) );

		movementAdjustorWerewolfWitcher.RotateTo( ticketWerewolfWitcher, VecHeading( (theCamera.GetCameraDirection() * 5)  + (theCamera.GetCameraRight() * 5) ) );
	}

	function ACSTransformWerewolfMovementAdjustForwardLeft()
	{
		movementAdjustorWerewolf = GetACSTransformationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		ticketWerewolf = movementAdjustorWerewolf.CreateNewRequest( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.AdjustmentDuration( ticketWerewolf, 1 );
		movementAdjustorWerewolf.MaxRotationAdjustmentSpeed( ticketWerewolf, 500000 );

		//movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( (theCamera.GetCameraDirection() * 5)  + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * -5) ) );

		movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( (theCamera.GetCameraDirection() * 5) + (theCamera.GetCameraRight() * -5) ) );



		movementAdjustorWerewolfWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.GetRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate');
		movementAdjustorWerewolfWitcher.CancelByName( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.CancelAll();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.CreateNewRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.AdjustmentDuration( ticketWerewolfWitcher, 1 );
		movementAdjustorWerewolfWitcher.MaxRotationAdjustmentSpeed( ticketWerewolfWitcher, 500000 );

		//movementAdjustorWerewolfWitcher.RotateTo( ticketWerewolfWitcher, VecHeading( (theCamera.GetCameraDirection() * 5) + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * -5) ) );

		movementAdjustorWerewolfWitcher.RotateTo( ticketWerewolfWitcher, VecHeading( (theCamera.GetCameraDirection() * 5) + (theCamera.GetCameraRight() * -5) ) );
	}

	function ACSTransformWerewolfMovementAdjustBackwardRight()
	{
		movementAdjustorWerewolf = GetACSTransformationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		ticketWerewolf = movementAdjustorWerewolf.CreateNewRequest( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.AdjustmentDuration( ticketWerewolf, 1 );
		movementAdjustorWerewolf.MaxRotationAdjustmentSpeed( ticketWerewolf, 500000 );

		//movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraForward() * -5) + (theCamera.GetCameraRight() * 5) ) );

		movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraRight() * 5) ) );



		movementAdjustorWerewolfWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.GetRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate');
		movementAdjustorWerewolfWitcher.CancelByName( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.CancelAll();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.CreateNewRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.AdjustmentDuration( ticketWerewolfWitcher, 1 );
		movementAdjustorWerewolfWitcher.MaxRotationAdjustmentSpeed( ticketWerewolfWitcher, 500000 );

		//movementAdjustorWerewolfWitcher.RotateTo( ticketWerewolfWitcher, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraForward() * -5) + (theCamera.GetCameraRight() * 5) ) );

		movementAdjustorWerewolfWitcher.RotateTo( ticketWerewolfWitcher, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraRight() * 5) ) );
	}

	function ACSTransformWerewolfMovementAdjustBackwardLeft()
	{
		movementAdjustorWerewolf = GetACSTransformationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		ticketWerewolf = movementAdjustorWerewolf.CreateNewRequest( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.AdjustmentDuration( ticketWerewolf, 1 );
		movementAdjustorWerewolf.MaxRotationAdjustmentSpeed( ticketWerewolf, 500000 );

		//movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraForward() * -5) + (theCamera.GetCameraRight() * -5) ) );

		movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraRight() * -5) ) );



		movementAdjustorWerewolfWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.GetRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate');
		movementAdjustorWerewolfWitcher.CancelByName( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.CancelAll();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.CreateNewRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.AdjustmentDuration( ticketWerewolfWitcher, 1 );
		movementAdjustorWerewolfWitcher.MaxRotationAdjustmentSpeed( ticketWerewolfWitcher, 500000 );

		//movementAdjustorWerewolfWitcher.RotateTo( ticketWerewolfWitcher, VecHeading( theCamera.GetCameraDirection()  + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * -5) ) );

		movementAdjustorWerewolfWitcher.RotateTo( ticketWerewolfWitcher, VecHeading( theCamera.GetCameraDirection() + (theCamera.GetCameraRight() * -5) ) );
	}

	function ACSTransformWerewolfMovementAdjustRotateTowardsEnemy()
	{
		movementAdjustorWerewolf = GetACSTransformationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		ticketWerewolf = movementAdjustorWerewolf.CreateNewRequest( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.AdjustmentDuration( ticketWerewolf, 0.25 );
		movementAdjustorWerewolf.MaxRotationAdjustmentSpeed( ticketWerewolf, 500000 );

		if (thePlayer.GetTarget())
		{
			movementAdjustorWerewolf.RotateTowards( ticketWerewolf, thePlayer.GetTarget() );
		}
		else
		{
			movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( theCamera.GetCameraDirection() ) );
		}
	}

	public timer function WerewolfSpecialAttackSlide(deltaTime : float , id : int)
	{
		ACSTransformWerewolfMovementAdjustRotateTowardsEnemyAndSlide();
	}

	function ACSTransformWerewolfMovementAdjustRotateTowardsEnemyAndSlide()
	{
		var distWerewolfJump							: float;

		movementAdjustorWerewolf = GetACSTransformationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		ticketWerewolf = movementAdjustorWerewolf.CreateNewRequest( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.AdjustmentDuration( ticketWerewolf, 0.5 );
		movementAdjustorWerewolf.MaxRotationAdjustmentSpeed( ticketWerewolf, 500000 );

		if (thePlayer.IsInCombat())
		{
			if (thePlayer.GetTarget())
			{
				movementAdjustorWerewolf.RotateTowards( ticketWerewolf, ((CActor)(thePlayer.GetTarget())) );

				distWerewolfJump = (((CMovingPhysicalAgentComponent)((CActor)(thePlayer.GetTarget())).GetMovingAgentComponent()).GetCapsuleRadius() 
				+ ((CMovingPhysicalAgentComponent)GetACSTransformationWerewolf().GetMovingAgentComponent()).GetCapsuleRadius());

				movementAdjustorWerewolf.RotateTowards( ticketWerewolf, ((CActor)(thePlayer.GetTarget())) );

				movementAdjustorWerewolf.SlideTowards( ticketWerewolf, ((CActor)(thePlayer.GetTarget())), distWerewolfJump, distWerewolfJump );
			}
			else
			{
				movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( theCamera.GetCameraDirection() ) );
			}
		}
		else
		{
			movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( theCamera.GetCameraDirection() ) );
		}
	}

	function ACSTransformWerewolfMovementAdjustRotateTowardsMovetarget()
	{
		var targetactor 									: CActor;

		movementAdjustorWerewolf = GetACSTransformationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		ticketWerewolf = movementAdjustorWerewolf.CreateNewRequest( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.AdjustmentDuration( ticketWerewolf, 0.25 );
		movementAdjustorWerewolf.MaxRotationAdjustmentSpeed( ticketWerewolf, 500000 );

		if ( thePlayer.IsHardLockEnabled() && thePlayer.GetTarget() )
		{
			targetactor = (CActor)( thePlayer.GetDisplayTarget() );	
		}
		else
		{
			thePlayer.FindMoveTarget();
			targetactor = (CActor)( thePlayer.moveTarget );		
		}

		if (targetactor)
		{
			movementAdjustorWerewolf.RotateTowards( ticketWerewolf, targetactor );
		}
		else
		{
			movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( theCamera.GetCameraDirection() ) );
		}
	}

	function ACSTransformWerewolfMovementAdjustSlideRight()
	{
		movementAdjustorWerewolf = GetACSTransformationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		ticketWerewolf = movementAdjustorWerewolf.CreateNewRequest( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.AdjustmentDuration( ticketWerewolf, 1 );
		movementAdjustorWerewolf.MaxRotationAdjustmentSpeed( ticketWerewolf, 500000 );

		movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( theCamera.GetCameraDirection() ) );

		movementAdjustorWerewolf.SlideTo( ticketWerewolf, ( ACSPlayerFixZAxis(GetACSTransformationWerewolf().GetWorldPosition() + GetACSTransformationWerewolf().GetWorldRight() * 1.5 ) + theCamera.GetCameraDirection() + theCamera.GetCameraRight() * 1.5) );
	}

	function ACSTransformWerewolfMovementAdjustSlideLeft()
	{
		movementAdjustorWerewolf = GetACSTransformationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		ticketWerewolf = movementAdjustorWerewolf.CreateNewRequest( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.AdjustmentDuration( ticketWerewolf, 1 );
		movementAdjustorWerewolf.MaxRotationAdjustmentSpeed( ticketWerewolf, 500000 );

		movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( theCamera.GetCameraDirection() ) );

		movementAdjustorWerewolf.SlideTo( ticketWerewolf, ( ACSPlayerFixZAxis(GetACSTransformationWerewolf().GetWorldPosition() + GetACSTransformationWerewolf().GetWorldRight() * -1.5 ) + theCamera.GetCameraDirection() + theCamera.GetCameraRight() * -1.5) );
	}

	function ACSTransformWerewolfMovementAdjustCancel()
	{
		movementAdjustorWerewolf = GetACSTransformationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		movementAdjustorWerewolfWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.GetRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate');
		movementAdjustorWerewolfWitcher.CancelByName( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.CancelAll();
	}

	function ACSTransformWerewolfMovementAdjustJump()
	{
		var dest			 											: Vector;

		werewolf_dodge_timer_actual();

		movementAdjustorWerewolf = GetACSTransformationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		ticketWerewolf = movementAdjustorWerewolf.CreateNewRequest( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.AdjustmentDuration( ticketWerewolf, 1 );
		movementAdjustorWerewolf.MaxRotationAdjustmentSpeed( ticketWerewolf, 500000 );

		movementAdjustorWerewolf.DontUseSourceAnimation(ticketWerewolf, true);

		movementAdjustorWerewolf.ScaleAnimationLocationVertically( ticketWerewolf, true );
		movementAdjustorWerewolf.AdjustLocationVertically( ticketWerewolf, true );

		dest = GetACSTransformationWerewolf().PredictWorldPosition(1.0) + (GetACSTransformationWerewolf().GetHeadingVector() * (ACS_Normal_JumpExtend_GetDistance() ));
			
		dest.Z += ACS_Normal_JumpExtend_GetHeight() ;
			
		//movementAdjustorWerewolf.MaxLocationAdjustmentDistance(ticketWerewolf, true, 20 + 5, 20 + 5);

		movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( theCamera.GetCameraDirection() ) );

		movementAdjustorWerewolf.SlideTo(ticketWerewolf, dest);




		

		movementAdjustorWerewolfWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.GetRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate');
		movementAdjustorWerewolfWitcher.CancelByName( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.CancelAll();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.CreateNewRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.AdjustmentDuration( ticketWerewolfWitcher, 0.5 );
		movementAdjustorWerewolfWitcher.MaxRotationAdjustmentSpeed( ticketWerewolfWitcher, 500000 );

		movementAdjustorWerewolfWitcher.RotateTo( ticketWerewolfWitcher, VecHeading( theCamera.GetCameraDirection() ) );
	}

	function ACSTransformRedMiasmalPlayAnim(animation_name: name, blendIn, blendout : float)
	{
		var animatedComponentA			: CAnimatedComponent;

		animatedComponentA = (CAnimatedComponent)((CNewNPC)GetACSTransformationRedMiasmal()).GetComponentByClassName( 'CAnimatedComponent' );	

		animatedComponentA.PlaySlotAnimationAsync ( animation_name, 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(blendIn, blendout) );
	}

	function ACSTransformWerewolfPlayAnim(animation_name: name, blendIn, blendout : float)
	{
		var animatedComponentA			: CAnimatedComponent;

		animatedComponentA = (CAnimatedComponent)((CNewNPC)GetACSTransformationWerewolf()).GetComponentByClassName( 'CAnimatedComponent' );	

		animatedComponentA.PlaySlotAnimationAsync ( animation_name, 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(blendIn, blendout) );
	}

	function ACSTransformToadPlayAnim(animation_name: name, blendIn, blendout : float)
	{
		var animatedComponentA			: CAnimatedComponent;

		animatedComponentA = (CAnimatedComponent)((CNewNPC)GetACSTransformationToad()).GetComponentByClassName( 'CAnimatedComponent' );	

		animatedComponentA.PlaySlotAnimationAsync ( animation_name, 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(blendIn, blendout) );
	}

	function ACSTransformVampireMonsterPlayAnim(animation_name: name, blendIn, blendout : float)
	{
		var animatedComponentA			: CAnimatedComponent;

		animatedComponentA = (CAnimatedComponent)((CNewNPC)GetACSTransformationVampireMonster()).GetComponentByClassName( 'CAnimatedComponent' );	

		animatedComponentA.PlaySlotAnimationAsync ( animation_name, 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(blendIn, blendout) );
	}

	function ACSTransformSharleyPlayAnim(animation_name: name, blendIn, blendout : float)
	{
		var animatedComponentA			: CAnimatedComponent;

		animatedComponentA = (CAnimatedComponent)((CNewNPC)GetACSTransformationSharley()).GetComponentByClassName( 'CAnimatedComponent' );	

		animatedComponentA.PlaySlotAnimationAsync ( animation_name, 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(blendIn, blendout) );
	}

	function ACSTransformBlackWolfPlayAnim(animation_name: name, blendIn, blendout : float)
	{
		var animatedComponentA			: CAnimatedComponent;

		animatedComponentA = (CAnimatedComponent)((CNewNPC)GetACSTransformationBlackWolf()).GetComponentByClassName( 'CAnimatedComponent' );	

		animatedComponentA.PlaySlotAnimationAsync ( animation_name, 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(blendIn, blendout) );
	}

	function ACSTransformVampiressPlayAnim(animation_name: name, blendIn, blendout : float)
	{
		var animatedComponentA			: CAnimatedComponent;

		animatedComponentA = (CAnimatedComponent)((CNewNPC)GetACSTransformationVampiress()).GetComponentByClassName( 'CAnimatedComponent' );	

		animatedComponentA.PlaySlotAnimationAsync ( animation_name, 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(blendIn, blendout) );
	}

	function ACSOriannaBasePlayAnim(animation_name: name, blendIn, blendout : float)
	{
		var animatedComponentA			: CAnimatedComponent;

		animatedComponentA = (CAnimatedComponent)((CNewNPC)ACS_Orianna_Vampire_Base()).GetComponentByClassName( 'CAnimatedComponent' );	

		animatedComponentA.PlaySlotAnimationAsync ( animation_name, 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(blendIn, blendout) );
	}

	function ACS_Transformation_Vampiress_Stop_Moving()
	{
		if (theInput.GetActionValue('GI_AxisLeftX') == 0 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
		{
			ACSTransformVampiressMovementAdjustCancel();
			
			GetACSTransformationVampiress().GetMovingAgentComponent().ForceSetRelativeMoveSpeed( 0.1f );
			GetACSTransformationVampiress().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed( 0.1f );
		}
	}

	function ACSVampiressRemoveMoveTimers()
	{
		GetACSTransformationVampiress().EnableCharacterCollisions(true);

		GetACSTransformationVampiress().ClearAnimationSpeedMultipliers();

		GetACSTransformationVampiress().DestroyEffect('shadowdash');

		GetACSTransformationVampiress().StopEffect('shadowdash_cs701_1');

		GetACSTransformationVampiress().StopEffect('shadowdash_cs701_2');

		GetACSTransformationVampiress().StopEffect('smoke_transform_cs');

		GetACSChaosMeteorSingle().Destroy();

		RemoveTimer('ACS_Vampiress_Reset_Animation_Speed');

		RemoveTimer('VampiressSpecialAttackSlide');

		RemoveTimer('VampiressReturnCollision');

		RemoveTimer('VampiressBiteDamage');

		RemoveTimer('VampiressLightAttackDamage');

		RemoveTimer('VampiressLightAttackDamageLeft');

		RemoveTimer('VampiressLightAttackDamageRight');

		RemoveTimer('VampiressLightAttackDamageLeft');

		RemoveTimer('VampiressLightAttackDamageRight');

		RemoveTimer('VampiressLightAttackDamageLeft_add1');

		RemoveTimer('VampiressLightAttackDamageRight_add1');

		RemoveTimer('VampiressLightAttackDamageLeft_add2');

		RemoveTimer('VampiressLightAttackDamageRight_add2');

		RemoveTimer('VampiressLightAttackDamageLeft_add3');

		RemoveTimer('VampiressLightAttackDamageRight_add3');

		RemoveTimer('VampiressLightAttackDamageLeft_add4');

		RemoveTimer('VampiressLightAttackDamageRight_add4');

		RemoveTimer('VampiressSpecialLightAttackDamage');

		RemoveTimer('VampiressSpecialLightAttackDamageLeft');

		RemoveTimer('VampiressSpecialLightAttackDamageRight');

		RemoveTimer('VampiressHeavyAttackDamage');

		RemoveTimer('VampiressHeavyAttackDamage_add1');

		RemoveTimer('VampiressHeavyAttackDamage_add2');

		RemoveTimer('VampiressHeavyAttackDamage_add3');

		RemoveTimer('VampiressHeavyAttackDamage_add4');

		RemoveTimer('Vampiress_Teleport');

		RemoveTimer('VampiressRepelDamage');

		RemoveTimer('VampiressCastMeteorSingle');

		RemoveTimer('VampiressCastMeteorStorm');

		RemoveTimer('VampiressCastMagmaLine');
		
		RemoveTimer('VampiressCastTornado');

		RemoveTimer('VampiressCastLightning');

		RemoveTimer('VampiressCastWoodProjectile');

		RemoveTimer('VampiressCastRootProjectile');

		RemoveTimer('VampiressCastSnowball');

		RemoveTimer('VampiressCastIceExplosion');

		RemoveTimer('VampiressCastVacuumOrb');

		RemoveTimer('VampiressCastChaosOrb');

		RemoveTimer('VampiressCastArena');

		RemoveTimer('VampiressCastDrain');

		RemoveTimer('ACS_Transformation_Bruxa_Scream_Release_Delay');

		thePlayer.RemoveTag('ACS_Transformation_Bruxa_Cloaked');

		Get_ACS_Transformation_Bruxa_Scream().Destroy();


		//((CAnimatedComponent)((CNewNPC)GetACSTransformationVampiress()).GetComponentByClassName( 'CAnimatedComponent' )).RaiseBehaviorForceEvent('Taunt');
	}

	function ACSVampiressRemoveAttackTimers()
	{
		GetACSTransformationVampiress().EnableCharacterCollisions(true);

		GetACSTransformationVampiress().ClearAnimationSpeedMultipliers();

		GetACSTransformationVampiress().DestroyEffect('shadowdash');

		GetACSTransformationVampiress().StopEffect('shadowdash_cs701_1');

		GetACSTransformationVampiress().StopEffect('shadowdash_cs701_2');

		GetACSTransformationVampiress().StopEffect('smoke_transform_cs');

		GetACSChaosMeteorSingle().Destroy();

		RemoveTimer('ACS_Vampiress_Reset_Animation_Speed');

		RemoveTimer('VampiressSpecialAttackSlide');

		RemoveTimer('VampiressReturnCollision');
			
		RemoveTimer('VampiressBiteDamage');

		RemoveTimer('VampiressLightAttackDamage');

		RemoveTimer('VampiressLightAttackDamageLeft');

		RemoveTimer('VampiressLightAttackDamageRight');

		RemoveTimer('VampiressLightAttackDamageLeft_add1');

		RemoveTimer('VampiressLightAttackDamageRight_add1');

		RemoveTimer('VampiressLightAttackDamageLeft_add2');

		RemoveTimer('VampiressLightAttackDamageRight_add2');

		RemoveTimer('VampiressLightAttackDamageLeft_add3');

		RemoveTimer('VampiressLightAttackDamageRight_add3');

		RemoveTimer('VampiressLightAttackDamageLeft_add4');

		RemoveTimer('VampiressLightAttackDamageRight_add4');

		RemoveTimer('VampiressSpecialLightAttackDamage');

		RemoveTimer('VampiressSpecialLightAttackDamageLeft');

		RemoveTimer('VampiressSpecialLightAttackDamageRight');

		RemoveTimer('VampiressHeavyAttackDamage');

		RemoveTimer('VampiressHeavyAttackDamage_add1');

		RemoveTimer('VampiressHeavyAttackDamage_add2');

		RemoveTimer('VampiressHeavyAttackDamage_add3');

		RemoveTimer('VampiressHeavyAttackDamage_add4');

		RemoveTimer('Vampiress_Teleport');

		RemoveTimer('VampiressRepelDamage');

		RemoveTimer('VampiressCastMeteorSingle');

		RemoveTimer('VampiressCastMeteorStorm');

		RemoveTimer('VampiressCastMagmaLine');
		
		RemoveTimer('VampiressCastTornado');

		RemoveTimer('VampiressCastLightning');

		RemoveTimer('VampiressCastWoodProjectile');

		RemoveTimer('VampiressCastRootProjectile');

		RemoveTimer('VampiressCastSnowball');

		RemoveTimer('VampiressCastIceExplosion');

		RemoveTimer('VampiressCastVacuumOrb');

		RemoveTimer('VampiressCastChaosOrb');

		RemoveTimer('VampiressCastArena');

		RemoveTimer('VampiressCastDrain');

		RemoveTimer('ACS_Transformation_Bruxa_Scream_Release_Delay');

		thePlayer.RemoveTag('ACS_Transformation_Bruxa_Cloaked');

		Get_ACS_Transformation_Bruxa_Scream().Destroy();

		//((CAnimatedComponent)((CNewNPC)GetACSTransformationVampiress()).GetComponentByClassName( 'CAnimatedComponent' )).RaiseBehaviorForceEvent('Taunt');
	}

	function ACSTransformVampiressMovementAdjustForward()
	{
		movementAdjustorVampiress = GetACSTransformationVampiress().GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampiress = movementAdjustorVampiress.GetRequest( 'ACS_Transformation_Vampiress_Rotate');
		movementAdjustorVampiress.CancelByName( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.CancelAll();

		ticketVampiress = movementAdjustorVampiress.CreateNewRequest( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.AdjustmentDuration( ticketVampiress, 0.5 );
		movementAdjustorVampiress.MaxRotationAdjustmentSpeed( ticketVampiress, 500000 );

		movementAdjustorVampiress.RotateTo( ticketVampiress, VecHeading( theCamera.GetCameraDirection() ) );

		movementAdjustorVampiressWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampiressWitcher = movementAdjustorVampiressWitcher.GetRequest( 'ACS_Transformation_Vampiress_Witcher_Rotate');
		movementAdjustorVampiressWitcher.CancelByName( 'ACS_Transformation_Vampiress_Witcher_Rotate' );
		movementAdjustorVampiressWitcher.CancelAll();

		ticketVampiressWitcher = movementAdjustorVampiressWitcher.CreateNewRequest( 'ACS_Transformation_Vampiress_Witcher_Rotate' );
		movementAdjustorVampiressWitcher.AdjustmentDuration( ticketVampiressWitcher, 0.5 );
		movementAdjustorVampiressWitcher.MaxRotationAdjustmentSpeed( ticketVampiressWitcher, 500000 );

		movementAdjustorVampiressWitcher.RotateTo( ticketVampiressWitcher, VecHeading( theCamera.GetCameraDirection() ) );
	}

	function ACSTransformVampiressMovementAdjustForwardDodge()
	{
		var targetactor 									: CActor;

		movementAdjustorVampiress = GetACSTransformationVampiress().GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampiress = movementAdjustorVampiress.GetRequest( 'ACS_Transformation_Vampiress_Rotate');
		movementAdjustorVampiress.CancelByName( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.CancelAll();

		ticketVampiress = movementAdjustorVampiress.CreateNewRequest( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.AdjustmentDuration( ticketVampiress, 0.25 );
		movementAdjustorVampiress.MaxRotationAdjustmentSpeed( ticketVampiress, 500000 );

		if ( thePlayer.IsHardLockEnabled() )
		{
			targetactor = (CActor)( thePlayer.GetDisplayTarget() );	
		}
		else
		{
			thePlayer.FindMoveTarget();
			targetactor = (CActor)( thePlayer.moveTarget );		
		}

		if (targetactor)
		{
			if (thePlayer.IsEnemyInCone( targetactor, GetACSTransformationVampiress().GetHeadingVector(), 50, 180, targetactor ))
			{
				movementAdjustorVampiress.RotateTo( ticketVampiress, VecHeading( theCamera.GetCameraDirection() ) );

				ACSTransformVampiressPlayAnim('bruxa_move_run_f', 0.25f, 0.325f);
			}
			else
			{
				movementAdjustorVampiress.RotateTowards( ticketVampiress, targetactor );

				GetACSTransformationVampiress().SetAnimationSpeedMultiplier( 2  );

				AddTimer('ACS_Vampiress_Reset_Animation_Speed', 0.5, false);

				ACSTransformVampiressPlayAnim('bruxa_dodge_back_slide', 0.25f, 0.875f);
			}
		}
		else
		{
			movementAdjustorVampiress.RotateTo( ticketVampiress, VecHeading( theCamera.GetCameraDirection() ) );

			ACSTransformVampiressPlayAnim('bruxa_move_run_f', 0.25f, 0.325f);
		}
	}

	function ACSTransformVampiressMovementAdjustCounterDodge()
	{
		var targetactor 									: CActor;

		movementAdjustorVampiress = GetACSTransformationVampiress().GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampiress = movementAdjustorVampiress.GetRequest( 'ACS_Transformation_Vampiress_Rotate');
		movementAdjustorVampiress.CancelByName( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.CancelAll();

		ticketVampiress = movementAdjustorVampiress.CreateNewRequest( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.AdjustmentDuration( ticketVampiress, 0.25 );
		movementAdjustorVampiress.MaxRotationAdjustmentSpeed( ticketVampiress, 500000 );

		if ( thePlayer.IsHardLockEnabled() && thePlayer.GetTarget() )
		{
			targetactor = (CActor)( thePlayer.GetDisplayTarget() );	
		}
		else
		{
			thePlayer.FindMoveTarget();
			targetactor = (CActor)( thePlayer.moveTarget );		
		}

		if (targetactor)
		{
			if (thePlayer.IsEnemyInCone( targetactor, GetACSTransformationVampiress().GetHeadingVector(), 50, 180, targetactor ))
			{
				movementAdjustorVampiress.RotateTowards( ticketVampiress, targetactor );

				GetACSTransformationVampiress().SetAnimationSpeedMultiplier( 2  );

				AddTimer('ACS_Vampiress_Reset_Animation_Speed', 0.5, false);

				ACSTransformVampiressPlayAnim('bruxa_dodge_back_slide', 0.25f, 0.875f);

				movementAdjustorVampiress.SlideTo( ticketVampiress, ( ACSPlayerFixZAxis(GetACSTransformationVampiress().GetWorldPosition() + GetACSTransformationVampiress().GetWorldForward() * -3 ) ) );
			}
			else
			{
				movementAdjustorVampiress.RotateTowards( ticketVampiress, targetactor );

				GetACSTransformationVampiress().SetAnimationSpeedMultiplier( 2  );

				AddTimer('ACS_Vampiress_Reset_Animation_Speed', 0.5, false);

				ACSTransformVampiressPlayAnim('bruxa_dodge_back_slide', 0.25f, 0.875f);

				movementAdjustorVampiress.SlideTo( ticketVampiress, ( ACSPlayerFixZAxis(GetACSTransformationVampiress().GetWorldPosition() + GetACSTransformationVampiress().GetWorldForward() * -3 ) ) );
			}
		}
		else
		{
			movementAdjustorVampiress.RotateTo( ticketVampiress, VecHeading( theCamera.GetCameraDirection() ) );

			GetACSTransformationVampiress().SetAnimationSpeedMultiplier( 2  );

			AddTimer('ACS_Vampiress_Reset_Animation_Speed', 0.5, false);

			ACSTransformVampiressPlayAnim('bruxa_dodge_back_slide', 0.25f, 0.325f);

			movementAdjustorVampiress.SlideTo( ticketVampiress, ( ACSPlayerFixZAxis(GetACSTransformationVampiress().GetWorldPosition() + GetACSTransformationVampiress().GetWorldForward() * -3 ) ) );
		}
	}

	function ACSVampiressDash()
	{
		thePlayer.SoundEvent("monster_bruxa_combat_disappear");

		GetACSTransformationVampiress().SetAnimationSpeedMultiplier( 1.125  );

		AddTimer('ACS_Vampiress_Reset_Animation_Speed', 0.25, false);

		vampiress_dash_index_1 = RandDifferent(this.previous_vampiress_dash_index_1 , 2);

		switch (vampiress_dash_index_1) 
		{	
			case 1:
			ACSTransformVampiressPlayAnim( 'bruxa_run_dash_right', 0.25f, 0.325f);
			break;
			
			default:
			ACSTransformVampiressPlayAnim( 'bruxa_run_dash', 0.25f, 0.325f);
			break;
		}

		this.previous_vampiress_dash_index_1 = vampiress_dash_index_1;
	}

	function ACSTransformVampiressMovementAdjustNormalDodge()
	{
		var targetactor 									: CActor;

		movementAdjustorVampiress = GetACSTransformationVampiress().GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampiress = movementAdjustorVampiress.GetRequest( 'ACS_Transformation_Vampiress_Rotate');
		movementAdjustorVampiress.CancelByName( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.CancelAll();

		ticketVampiress = movementAdjustorVampiress.CreateNewRequest( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.AdjustmentDuration( ticketVampiress, 0.25 );
		movementAdjustorVampiress.MaxRotationAdjustmentSpeed( ticketVampiress, 500000 );

		if ( thePlayer.IsHardLockEnabled() && thePlayer.GetTarget() )
		{
			targetactor = (CActor)( thePlayer.GetDisplayTarget() );	
		}
		else
		{
			thePlayer.FindMoveTarget();
			targetactor = (CActor)( thePlayer.moveTarget );		
		}

		if (targetactor)
		{
			movementAdjustorVampiress.RotateTowards( ticketVampiress, targetactor );
		}
		else
		{
			movementAdjustorVampiress.RotateTo( ticketVampiress, VecHeading( theCamera.GetCameraDirection() ) );
		}

		ACSTransformVampiressPlayAnim( 'bruxa_dodge_back_center', 0.25f, 0.325f);

		movementAdjustorVampiress.SlideTo( ticketVampiress, ( ACSPlayerFixZAxis(GetACSTransformationVampiress().GetWorldPosition() + GetACSTransformationVampiress().GetWorldForward() * -1.5 ) ) );
	}

	function ACSTransformVampiressMovementAdjustSlideToGround()
	{
		var targetactor 									: CActor;

		movementAdjustorVampiress = GetACSTransformationVampiress().GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampiress = movementAdjustorVampiress.GetRequest( 'ACS_Transformation_Vampiress_Rotate');
		movementAdjustorVampiress.CancelByName( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.CancelAll();

		ticketVampiress = movementAdjustorVampiress.CreateNewRequest( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.AdjustmentDuration( ticketVampiress, 0.00001 );
		movementAdjustorVampiress.MaxRotationAdjustmentSpeed( ticketVampiress, 500000 );

		if ( thePlayer.IsHardLockEnabled() && thePlayer.GetTarget() )
		{
			targetactor = (CActor)( thePlayer.GetDisplayTarget() );	
		}
		else
		{
			thePlayer.FindMoveTarget();
			targetactor = (CActor)( thePlayer.moveTarget );		
		}

		if (targetactor)
		{
			movementAdjustorVampiress.RotateTowards( ticketVampiress, targetactor );
		}
		else
		{
			movementAdjustorVampiress.RotateTo( ticketVampiress, VecHeading( theCamera.GetCameraDirection() ) );
		}

		movementAdjustorVampiress.SlideTo( ticketVampiress, ( ACSPlayerFixZAxis(GetACSTransformationVampiress().GetWorldPosition() + GetACSTransformationVampiress().GetWorldForward()) ));
	}

	function ACSTransformVampiressMovementAdjustNormalDash()
	{
		var targetactor 									: CActor;

		movementAdjustorVampiress = GetACSTransformationVampiress().GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampiress = movementAdjustorVampiress.GetRequest( 'ACS_Transformation_Vampiress_Rotate');
		movementAdjustorVampiress.CancelByName( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.CancelAll();

		ticketVampiress = movementAdjustorVampiress.CreateNewRequest( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.AdjustmentDuration( ticketVampiress, 0.25 );
		movementAdjustorVampiress.MaxRotationAdjustmentSpeed( ticketVampiress, 500000 );

		movementAdjustorVampiress.RotateTo( ticketVampiress, VecHeading( theCamera.GetCameraDirection() ) );

		//movementAdjustorVampiress.SlideTo( ticketVampiress, ( ACSPlayerFixZAxis(GetACSTransformationVampiress().GetWorldPosition() + GetACSTransformationVampiress().GetWorldForward() * 7.5 ) ) );

		thePlayer.SoundEvent("monster_bruxa_combat_disappear");

		GetACSTransformationVampiress().SetAnimationSpeedMultiplier( 1.125  );

		AddTimer('ACS_Vampiress_Reset_Animation_Speed', 0.25, false);

		vampiress_dash_index_1 = RandDifferent(this.previous_vampiress_dash_index_1 , 2);

		switch (vampiress_dash_index_1) 
		{	
			case 1:
			ACSTransformVampiressPlayAnim( 'bruxa_run_dash_right', 0.25f, 0.325f);
			movementAdjustorVampiress.SlideTo( ticketVampiress, ( ACSPlayerFixZAxis(GetACSTransformationVampiress().GetWorldPosition() + GetACSTransformationVampiress().GetWorldRight() * 3.75 + GetACSTransformationVampiress().GetWorldForward() * 7.5 ) ) );
			break;
			
			default:
			ACSTransformVampiressPlayAnim( 'bruxa_run_dash', 0.25f, 0.325f);
			movementAdjustorVampiress.SlideTo( ticketVampiress, ( ACSPlayerFixZAxis(GetACSTransformationVampiress().GetWorldPosition() + GetACSTransformationVampiress().GetWorldRight() * -3.75 + GetACSTransformationVampiress().GetWorldForward() * 7.5 ) ) );
			break;
		}

		this.previous_vampiress_dash_index_1 = vampiress_dash_index_1;
	}

	function ACSTransformVampiressMovementAdjustBackward()
	{
		movementAdjustorVampiress = GetACSTransformationVampiress().GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampiress = movementAdjustorVampiress.GetRequest( 'ACS_Transformation_Vampiress_Rotate');
		movementAdjustorVampiress.CancelByName( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.CancelAll();

		ticketVampiress = movementAdjustorVampiress.CreateNewRequest( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.AdjustmentDuration( ticketVampiress, 0.5 );
		movementAdjustorVampiress.MaxRotationAdjustmentSpeed( ticketVampiress, 500000 );

		movementAdjustorVampiress.RotateTo( ticketVampiress, VecHeading( theCamera.GetCameraDirection() * -5 ) );

		movementAdjustorVampiressWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampiressWitcher = movementAdjustorVampiressWitcher.GetRequest( 'ACS_Transformation_Vampiress_Witcher_Rotate');
		movementAdjustorVampiressWitcher.CancelByName( 'ACS_Transformation_Vampiress_Witcher_Rotate' );
		movementAdjustorVampiressWitcher.CancelAll();

		ticketVampiressWitcher = movementAdjustorVampiressWitcher.CreateNewRequest( 'ACS_Transformation_Vampiress_Witcher_Rotate' );
		movementAdjustorVampiressWitcher.AdjustmentDuration( ticketVampiressWitcher, 0.5 );
		movementAdjustorVampiressWitcher.MaxRotationAdjustmentSpeed( ticketVampiressWitcher, 500000 );

		movementAdjustorVampiressWitcher.RotateTo( ticketVampiressWitcher, VecHeading( theCamera.GetCameraDirection() * -5 ) );
	}

	function ACSTransformVampiressMovementAdjustRight()
	{
		movementAdjustorVampiress = GetACSTransformationVampiress().GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampiress = movementAdjustorVampiress.GetRequest( 'ACS_Transformation_Vampiress_Rotate');
		movementAdjustorVampiress.CancelByName( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.CancelAll();

		ticketVampiress = movementAdjustorVampiress.CreateNewRequest( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.AdjustmentDuration( ticketVampiress, 0.5 );
		movementAdjustorVampiress.MaxRotationAdjustmentSpeed( ticketVampiress, 500000 );

		movementAdjustorVampiress.RotateTo( ticketVampiress, VecHeading( theCamera.GetCameraDirection() + theCamera.GetCameraRight() * 5 ) );




		movementAdjustorVampiressWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampiressWitcher = movementAdjustorVampiressWitcher.GetRequest( 'ACS_Transformation_Vampiress_Witcher_Rotate');
		movementAdjustorVampiressWitcher.CancelByName( 'ACS_Transformation_Vampiress_Witcher_Rotate' );
		movementAdjustorVampiressWitcher.CancelAll();

		ticketVampiressWitcher = movementAdjustorVampiressWitcher.CreateNewRequest( 'ACS_Transformation_Vampiress_Witcher_Rotate' );
		movementAdjustorVampiressWitcher.AdjustmentDuration( ticketVampiressWitcher, 0.5 );
		movementAdjustorVampiressWitcher.MaxRotationAdjustmentSpeed( ticketVampiressWitcher, 500000 );

		movementAdjustorVampiressWitcher.RotateTo( ticketVampiressWitcher, VecHeading( theCamera.GetCameraDirection() + theCamera.GetCameraRight() * 5 ) );
	}

	function ACSTransformVampiressMovementAdjustLeft()
	{
		movementAdjustorVampiress = GetACSTransformationVampiress().GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampiress = movementAdjustorVampiress.GetRequest( 'ACS_Transformation_Vampiress_Rotate');
		movementAdjustorVampiress.CancelByName( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.CancelAll();

		ticketVampiress = movementAdjustorVampiress.CreateNewRequest( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.AdjustmentDuration( ticketVampiress, 0.5 );
		movementAdjustorVampiress.MaxRotationAdjustmentSpeed( ticketVampiress, 500000 );

		movementAdjustorVampiress.RotateTo( ticketVampiress, VecHeading( theCamera.GetCameraDirection() + theCamera.GetCameraRight() * -5 ) );



		movementAdjustorVampiressWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampiressWitcher = movementAdjustorVampiressWitcher.GetRequest( 'ACS_Transformation_Vampiress_Witcher_Rotate');
		movementAdjustorVampiressWitcher.CancelByName( 'ACS_Transformation_Vampiress_Witcher_Rotate' );
		movementAdjustorVampiressWitcher.CancelAll();

		ticketVampiressWitcher = movementAdjustorVampiressWitcher.CreateNewRequest( 'ACS_Transformation_Vampiress_Witcher_Rotate' );
		movementAdjustorVampiressWitcher.AdjustmentDuration( ticketVampiressWitcher, 0.5 );
		movementAdjustorVampiressWitcher.MaxRotationAdjustmentSpeed( ticketVampiressWitcher, 500000 );

		movementAdjustorVampiressWitcher.RotateTo( ticketVampiressWitcher, VecHeading( theCamera.GetCameraDirection() + theCamera.GetCameraRight() * -5 ) );
	}

	function ACSTransformVampiressMovementAdjustForwardRight()
	{
		movementAdjustorVampiress = GetACSTransformationVampiress().GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampiress = movementAdjustorVampiress.GetRequest( 'ACS_Transformation_Vampiress_Rotate');
		movementAdjustorVampiress.CancelByName( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.CancelAll();

		ticketVampiress = movementAdjustorVampiress.CreateNewRequest( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.AdjustmentDuration( ticketVampiress, 1 );
		movementAdjustorVampiress.MaxRotationAdjustmentSpeed( ticketVampiress, 500000 );

		//movementAdjustorVampiress.RotateTo( ticketVampiress, VecHeading( (theCamera.GetCameraDirection() * 5)  + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * 5) ) );

		movementAdjustorVampiress.RotateTo( ticketVampiress, VecHeading( (theCamera.GetCameraDirection() * 5) + (theCamera.GetCameraRight() * 5) ) );



		movementAdjustorVampiressWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampiressWitcher = movementAdjustorVampiressWitcher.GetRequest( 'ACS_Transformation_Vampiress_Witcher_Rotate');
		movementAdjustorVampiressWitcher.CancelByName( 'ACS_Transformation_Vampiress_Witcher_Rotate' );
		movementAdjustorVampiressWitcher.CancelAll();

		ticketVampiressWitcher = movementAdjustorVampiressWitcher.CreateNewRequest( 'ACS_Transformation_Vampiress_Witcher_Rotate' );
		movementAdjustorVampiressWitcher.AdjustmentDuration( ticketVampiressWitcher, 1 );
		movementAdjustorVampiressWitcher.MaxRotationAdjustmentSpeed( ticketVampiressWitcher, 500000 );

		//movementAdjustorVampiressWitcher.RotateTo( ticketVampiressWitcher, VecHeading( (theCamera.GetCameraDirection() * 5)  + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * 5) ) );

		movementAdjustorVampiressWitcher.RotateTo( ticketVampiressWitcher, VecHeading( (theCamera.GetCameraDirection() * 5)  + (theCamera.GetCameraRight() * 5) ) );
	}

	function ACSTransformVampiressMovementAdjustForwardLeft()
	{
		movementAdjustorVampiress = GetACSTransformationVampiress().GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampiress = movementAdjustorVampiress.GetRequest( 'ACS_Transformation_Vampiress_Rotate');
		movementAdjustorVampiress.CancelByName( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.CancelAll();

		ticketVampiress = movementAdjustorVampiress.CreateNewRequest( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.AdjustmentDuration( ticketVampiress, 1 );
		movementAdjustorVampiress.MaxRotationAdjustmentSpeed( ticketVampiress, 500000 );

		//movementAdjustorVampiress.RotateTo( ticketVampiress, VecHeading( (theCamera.GetCameraDirection() * 5)  + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * -5) ) );

		movementAdjustorVampiress.RotateTo( ticketVampiress, VecHeading( (theCamera.GetCameraDirection() * 5) + (theCamera.GetCameraRight() * -5) ) );



		movementAdjustorVampiressWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampiressWitcher = movementAdjustorVampiressWitcher.GetRequest( 'ACS_Transformation_Vampiress_Witcher_Rotate');
		movementAdjustorVampiressWitcher.CancelByName( 'ACS_Transformation_Vampiress_Witcher_Rotate' );
		movementAdjustorVampiressWitcher.CancelAll();

		ticketVampiressWitcher = movementAdjustorVampiressWitcher.CreateNewRequest( 'ACS_Transformation_Vampiress_Witcher_Rotate' );
		movementAdjustorVampiressWitcher.AdjustmentDuration( ticketVampiressWitcher, 1 );
		movementAdjustorVampiressWitcher.MaxRotationAdjustmentSpeed( ticketVampiressWitcher, 500000 );

		//movementAdjustorVampiressWitcher.RotateTo( ticketVampiressWitcher, VecHeading( (theCamera.GetCameraDirection() * 5) + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * -5) ) );

		movementAdjustorVampiressWitcher.RotateTo( ticketVampiressWitcher, VecHeading( (theCamera.GetCameraDirection() * 5) + (theCamera.GetCameraRight() * -5) ) );
	}

	function ACSTransformVampiressMovementAdjustBackwardRight()
	{
		movementAdjustorVampiress = GetACSTransformationVampiress().GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampiress = movementAdjustorVampiress.GetRequest( 'ACS_Transformation_Vampiress_Rotate');
		movementAdjustorVampiress.CancelByName( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.CancelAll();

		ticketVampiress = movementAdjustorVampiress.CreateNewRequest( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.AdjustmentDuration( ticketVampiress, 1 );
		movementAdjustorVampiress.MaxRotationAdjustmentSpeed( ticketVampiress, 500000 );

		//movementAdjustorVampiress.RotateTo( ticketVampiress, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraForward() * -5) + (theCamera.GetCameraRight() * 5) ) );

		movementAdjustorVampiress.RotateTo( ticketVampiress, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraRight() * 5) ) );



		movementAdjustorVampiressWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampiressWitcher = movementAdjustorVampiressWitcher.GetRequest( 'ACS_Transformation_Vampiress_Witcher_Rotate');
		movementAdjustorVampiressWitcher.CancelByName( 'ACS_Transformation_Vampiress_Witcher_Rotate' );
		movementAdjustorVampiressWitcher.CancelAll();

		ticketVampiressWitcher = movementAdjustorVampiressWitcher.CreateNewRequest( 'ACS_Transformation_Vampiress_Witcher_Rotate' );
		movementAdjustorVampiressWitcher.AdjustmentDuration( ticketVampiressWitcher, 1 );
		movementAdjustorVampiressWitcher.MaxRotationAdjustmentSpeed( ticketVampiressWitcher, 500000 );

		//movementAdjustorVampiressWitcher.RotateTo( ticketVampiressWitcher, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraForward() * -5) + (theCamera.GetCameraRight() * 5) ) );

		movementAdjustorVampiressWitcher.RotateTo( ticketVampiressWitcher, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraRight() * 5) ) );
	}

	function ACSTransformVampiressMovementAdjustBackwardLeft()
	{
		movementAdjustorVampiress = GetACSTransformationVampiress().GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampiress = movementAdjustorVampiress.GetRequest( 'ACS_Transformation_Vampiress_Rotate');
		movementAdjustorVampiress.CancelByName( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.CancelAll();

		ticketVampiress = movementAdjustorVampiress.CreateNewRequest( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.AdjustmentDuration( ticketVampiress, 1 );
		movementAdjustorVampiress.MaxRotationAdjustmentSpeed( ticketVampiress, 500000 );

		//movementAdjustorVampiress.RotateTo( ticketVampiress, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraForward() * -5) + (theCamera.GetCameraRight() * -5) ) );

		movementAdjustorVampiress.RotateTo( ticketVampiress, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraRight() * -5) ) );



		movementAdjustorVampiressWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampiressWitcher = movementAdjustorVampiressWitcher.GetRequest( 'ACS_Transformation_Vampiress_Witcher_Rotate');
		movementAdjustorVampiressWitcher.CancelByName( 'ACS_Transformation_Vampiress_Witcher_Rotate' );
		movementAdjustorVampiressWitcher.CancelAll();

		ticketVampiressWitcher = movementAdjustorVampiressWitcher.CreateNewRequest( 'ACS_Transformation_Vampiress_Witcher_Rotate' );
		movementAdjustorVampiressWitcher.AdjustmentDuration( ticketVampiressWitcher, 1 );
		movementAdjustorVampiressWitcher.MaxRotationAdjustmentSpeed( ticketVampiressWitcher, 500000 );

		//movementAdjustorVampiressWitcher.RotateTo( ticketVampiressWitcher, VecHeading( theCamera.GetCameraDirection()  + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * -5) ) );

		movementAdjustorVampiressWitcher.RotateTo( ticketVampiressWitcher, VecHeading( theCamera.GetCameraDirection() + (theCamera.GetCameraRight() * -5) ) );
	}

	function ACSTransformVampiressMovementAdjustRotateTowardsEnemy()
	{
		movementAdjustorVampiress = GetACSTransformationVampiress().GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampiress = movementAdjustorVampiress.GetRequest( 'ACS_Transformation_Vampiress_Rotate');
		movementAdjustorVampiress.CancelByName( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.CancelAll();

		ticketVampiress = movementAdjustorVampiress.CreateNewRequest( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.AdjustmentDuration( ticketVampiress, 1 );
		movementAdjustorVampiress.MaxRotationAdjustmentSpeed( ticketVampiress, 500000 );

		if (thePlayer.GetTarget())
		{
			movementAdjustorVampiress.RotateTowards( ticketVampiress, thePlayer.GetTarget() );
		}
		else
		{
			movementAdjustorVampiress.RotateTo( ticketVampiress, VecHeading( theCamera.GetCameraDirection() ) );
		}
	}

	public timer function VampiressSpecialAttackSlide(deltaTime : float , id : int)
	{
		GetACSTransformationVampiress().DestroyEffect('shadowdash_short');
		GetACSTransformationVampiress().PlayEffectSingle('shadowdash_short');
		GetACSTransformationVampiress().StopEffect('shadowdash_short');

		ACSTransformVampiressMovementAdjustRotateTowardsEnemyAndSlide();
	}

	function ACSTransformVampiressMovementAdjustRotateTowardsEnemyAndSlide()
	{
		var distVampiressJump							: float;

		movementAdjustorVampiress = GetACSTransformationVampiress().GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampiress = movementAdjustorVampiress.GetRequest( 'ACS_Transformation_Vampiress_Rotate');
		movementAdjustorVampiress.CancelByName( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.CancelAll();

		ticketVampiress = movementAdjustorVampiress.CreateNewRequest( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.AdjustmentDuration( ticketVampiress, 0.25 );
		movementAdjustorVampiress.MaxRotationAdjustmentSpeed( ticketVampiress, 500000 );
		movementAdjustorVampiress.AdjustLocationVertically( ticketVampiress, true );
		movementAdjustorVampiress.ScaleAnimationLocationVertically( ticketVampiress, true );

		if (thePlayer.IsInCombat())
		{
			if (thePlayer.GetTarget())
			{
				movementAdjustorVampiress.RotateTowards( ticketVampiress, ((CActor)(thePlayer.GetTarget())) );

				distVampiressJump = (((CMovingPhysicalAgentComponent)((CActor)(thePlayer.GetTarget())).GetMovingAgentComponent()).GetCapsuleRadius() 
				+ ((CMovingPhysicalAgentComponent)GetACSTransformationVampiress().GetMovingAgentComponent()).GetCapsuleRadius());

				movementAdjustorVampiress.RotateTowards( ticketVampiress, ((CActor)(thePlayer.GetTarget())) );

				movementAdjustorVampiress.SlideTowards( ticketVampiress, ((CActor)(thePlayer.GetTarget())), distVampiressJump, distVampiressJump );
			}
			else
			{
				movementAdjustorVampiress.RotateTo( ticketVampiress, VecHeading( theCamera.GetCameraDirection() ) );
			}
		}
		else
		{
			movementAdjustorVampiress.RotateTo( ticketVampiress, VecHeading( theCamera.GetCameraDirection() ) );
		}
	}

	function ACSTransformVampiressMovementAdjustRotateTowardsMovetarget()
	{
		var targetactor 									: CActor;

		movementAdjustorVampiress = GetACSTransformationVampiress().GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampiress = movementAdjustorVampiress.GetRequest( 'ACS_Transformation_Vampiress_Rotate');
		movementAdjustorVampiress.CancelByName( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.CancelAll();

		ticketVampiress = movementAdjustorVampiress.CreateNewRequest( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.AdjustmentDuration( ticketVampiress, 0.25 );
		movementAdjustorVampiress.MaxRotationAdjustmentSpeed( ticketVampiress, 500000 );

		if ( thePlayer.IsHardLockEnabled() && thePlayer.GetTarget() )
		{
			targetactor = (CActor)( thePlayer.GetDisplayTarget() );	
		}
		else
		{
			thePlayer.FindMoveTarget();
			targetactor = (CActor)( thePlayer.moveTarget );		
		}

		if (targetactor)
		{
			movementAdjustorVampiress.RotateTowards( ticketVampiress, targetactor );
		}
		else
		{
			movementAdjustorVampiress.RotateTo( ticketVampiress, VecHeading( theCamera.GetCameraDirection() ) );
		}
	}

	function ACSTransformVampiressMovementAdjustSlideRight()
	{
		movementAdjustorVampiress = GetACSTransformationVampiress().GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampiress = movementAdjustorVampiress.GetRequest( 'ACS_Transformation_Vampiress_Rotate');
		movementAdjustorVampiress.CancelByName( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.CancelAll();

		ticketVampiress = movementAdjustorVampiress.CreateNewRequest( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.AdjustmentDuration( ticketVampiress, 0.25 );
		movementAdjustorVampiress.MaxRotationAdjustmentSpeed( ticketVampiress, 500000 );

		movementAdjustorVampiress.RotateTo( ticketVampiress, VecHeading( theCamera.GetCameraDirection() ) );

		movementAdjustorVampiress.SlideTo( ticketVampiress, ( ACSPlayerFixZAxis(GetACSTransformationVampiress().GetWorldPosition() + GetACSTransformationVampiress().GetWorldRight() * 1.5 ) + theCamera.GetCameraDirection() + theCamera.GetCameraRight() * 1.5) );
	}

	function ACSTransformVampiressMovementAdjustSlideLeft()
	{
		movementAdjustorVampiress = GetACSTransformationVampiress().GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampiress = movementAdjustorVampiress.GetRequest( 'ACS_Transformation_Vampiress_Rotate');
		movementAdjustorVampiress.CancelByName( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.CancelAll();

		ticketVampiress = movementAdjustorVampiress.CreateNewRequest( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.AdjustmentDuration( ticketVampiress, 0.25 );
		movementAdjustorVampiress.MaxRotationAdjustmentSpeed( ticketVampiress, 500000 );

		movementAdjustorVampiress.RotateTo( ticketVampiress, VecHeading( theCamera.GetCameraDirection() ) );

		movementAdjustorVampiress.SlideTo( ticketVampiress, ( ACSPlayerFixZAxis(GetACSTransformationVampiress().GetWorldPosition() + GetACSTransformationVampiress().GetWorldRight() * -1.5 ) + theCamera.GetCameraDirection() + theCamera.GetCameraRight() * -1.5) );
	}

	function ACSTransformVampiressMovementAdjustCancel()
	{
		movementAdjustorVampiress = GetACSTransformationVampiress().GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampiress = movementAdjustorVampiress.GetRequest( 'ACS_Transformation_Vampiress_Rotate');
		movementAdjustorVampiress.CancelByName( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.CancelAll();

		movementAdjustorVampiressWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampiressWitcher = movementAdjustorVampiressWitcher.GetRequest( 'ACS_Transformation_Vampiress_Witcher_Rotate');
		movementAdjustorVampiressWitcher.CancelByName( 'ACS_Transformation_Vampiress_Witcher_Rotate' );
		movementAdjustorVampiressWitcher.CancelAll();
	}

	function ACSTransformVampiressMovementAdjustJump()
	{
		var dest			 											: Vector;

		vampiress_dodge_timer_actual();

		movementAdjustorVampiress = GetACSTransformationVampiress().GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampiress = movementAdjustorVampiress.GetRequest( 'ACS_Transformation_Vampiress_Rotate');
		movementAdjustorVampiress.CancelByName( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.CancelAll();

		ticketVampiress = movementAdjustorVampiress.CreateNewRequest( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorVampiress.AdjustmentDuration( ticketVampiress, 1 );
		movementAdjustorVampiress.MaxRotationAdjustmentSpeed( ticketVampiress, 500000 );

		movementAdjustorVampiress.DontUseSourceAnimation(ticketVampiress, true);

		movementAdjustorVampiress.ScaleAnimationLocationVertically( ticketVampiress, true );
		movementAdjustorVampiress.AdjustLocationVertically( ticketVampiress, true );

		dest = GetACSTransformationVampiress().PredictWorldPosition(1.0) + (GetACSTransformationVampiress().GetHeadingVector() * (ACS_Normal_JumpExtend_GetDistance() ));
			
		dest.Z += ACS_Normal_JumpExtend_GetHeight() ;
			
		//movementAdjustorVampiress.MaxLocationAdjustmentDistance(ticketVampiress, true, 20 + 5, 20 + 5);

		movementAdjustorVampiress.RotateTo( ticketVampiress, VecHeading( theCamera.GetCameraDirection() ) );

		movementAdjustorVampiress.SlideTo(ticketVampiress, dest);




		

		movementAdjustorVampiressWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampiressWitcher = movementAdjustorVampiressWitcher.GetRequest( 'ACS_Transformation_Vampiress_Witcher_Rotate');
		movementAdjustorVampiressWitcher.CancelByName( 'ACS_Transformation_Vampiress_Witcher_Rotate' );
		movementAdjustorVampiressWitcher.CancelAll();

		ticketVampiressWitcher = movementAdjustorVampiressWitcher.CreateNewRequest( 'ACS_Transformation_Vampiress_Witcher_Rotate' );
		movementAdjustorVampiressWitcher.AdjustmentDuration( ticketVampiressWitcher, 0.5 );
		movementAdjustorVampiressWitcher.MaxRotationAdjustmentSpeed( ticketVampiressWitcher, 500000 );

		movementAdjustorVampiressWitcher.RotateTo( ticketVampiressWitcher, VecHeading( theCamera.GetCameraDirection() ) );
	}

	function ACS_Vampiress_Move_Controls()
	{
		if (thePlayer.IsInCombat())
		{
			if (thePlayer.GetStat(BCS_Toxicity) < thePlayer.GetStatMax(BCS_Toxicity))
			{
				thePlayer.GainStat(BCS_Toxicity, (thePlayer.GetStatMax(BCS_Toxicity) - thePlayer.GetStat(BCS_Toxicity)) * 0.00006125);
			}
			
			thePlayer.DrainVitality(thePlayer.GetStat(BCS_Vitality) * 0.000030625);
		}
		else
		{
			if (thePlayer.GetStat(BCS_Toxicity) < thePlayer.GetStatMax(BCS_Toxicity))
			{
				thePlayer.GainStat(BCS_Toxicity, (thePlayer.GetStatMax(BCS_Toxicity) - thePlayer.GetStat(BCS_Toxicity)) * 0.000030625);
			}
			
			thePlayer.DrainVitality(thePlayer.GetStat(BCS_Vitality) * 0.0000153125);
		}

		GetACSTransformationVampiress().GetMovingAgentComponent().EnableCombatMode( true );

		GetACSTransformationVampiress().GetMovingAgentComponent().SetVirtualRadius( 'CombatCharacterRadius' );

		((CNewNPC)GetACSTransformationVampiress()).SetBehaviorVariable( 'additiveTauntOn', 1, true );

		if (thePlayer.IsInCombat())
		{
			if (thePlayer.GetTarget())
			{
				((CNewNPC)GetACSTransformationVampiress()).SetBehaviorVectorVariable( 'lookAtTarget', ((CActor)(thePlayer.GetTarget())).GetWorldPosition() );
			}
			else
			{
				((CNewNPC)GetACSTransformationVampiress()).SetBehaviorVectorVariable( 'lookAtTarget', GetACSLookatEntity().GetWorldPosition() );
			}

			((CNewNPC)GetACSTransformationVampiress()).SetBehaviorVariable( 'lookatOn', 1, true );
		}
		else
		{
			((CNewNPC)GetACSTransformationVampiress()).SetBehaviorVectorVariable( 'lookAtTarget', GetACSLookatEntity().GetWorldPosition() );

			((CNewNPC)GetACSTransformationVampiress()).SetBehaviorVariable( 'lookatOn', 1, true );
		}

		if (GetACSTransformationVampiress().GetMovingAgentComponent().GetRelativeMoveSpeed() <= 0.1 )
		{
			if
			(
				theInput.GetLastActivationTime( 'GI_AxisLeftX' ) > 1.25f 
				|| theInput.GetLastActivationTime( 'GI_AxisLeftY' ) > 1.25f 
			)	
			{
				GetACSTransformationVampiress().RemoveTag('ACS_Vampiress_Stationary_Transition');
			}
			else
			{
				RemoveTimer('Vampiress_Remove_Stationary_Tag');

				if (!GetACSTransformationVampiress().HasTag('ACS_Vampiress_Stopped_Moving'))
				{
					GetACSTransformationVampiress().AddTag('ACS_Vampiress_Stationary_Transition');

					GetACSTransformationVampiress().AddTag('ACS_Vampiress_Stopped_Moving');
				}
			}
		}

		if (thePlayer.IsDodgeTimerRunning()
		|| thePlayer.IsCurrentlyDodging() )
		{
			return;
		}

		if (theInput.GetActionValue('GI_AxisLeftX') == 0 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
		{
			GetACSTransformationVampiress().GetMovingAgentComponent().ForceSetRelativeMoveSpeed( 0 );
			GetACSTransformationVampiress().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed( 0 );
		}
		else
		{
			if (theInput.GetActionValue('GI_AxisLeftY') > 0.1 && theInput.GetActionValue('GI_AxisLeftX') == 0 )
			{
				VampiressRestoreRotation();

				VampiressChangeStance();

				GetACSTransformationVampiress().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationVampiress().GetHeadingVector()));

				if (!GetACSTransformationVampiress().HasTag('ACS_Vampiress_Stationary_Transition')
				)
				{
					ACSTransformVampiressMovementAdjustForward();
				}

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationVampiress().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationVampiress().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftY') < -0.1 && theInput.GetActionValue('GI_AxisLeftX') == 0 )
			{
				VampiressRestoreRotation();

				if (!GetACSTransformationVampiress().HasTag('ACS_Vampiress_Stationary_Transition')
				)
				{
					if (thePlayer.IsInCombat())
					{
						GetACSTransformationVampiress().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationVampiress().GetWorldForward() * -10));
						
						ACSTransformVampiressMovementAdjustForward();
					}
					else
					{
						GetACSTransformationVampiress().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationVampiress().GetHeadingVector()));
						
						ACSTransformVampiressMovementAdjustBackward();
					}
				}

				if (thePlayer.IsInCombat())
				{
					if (!GetACSTransformationVampiress().HasTag('ACS_Directional_Change_Anim'))
					{
						RemoveChangeStanceTimers();
						AddTimer('Vampiress_Change_Stance_Backward', 0.25f, false);

						//ACSTransformVampiressPlayAnim('monster_werewolf_dodge_b01', 0.5f, 0.5f);

						GetACSTransformationVampiress().AddTag('ACS_Directional_Change_Anim');
					}

					GetACSTransformationVampiress().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationVampiress().GetWorldForward() * -10));

					GetACSTransformationVampiress().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
				else
				{
					VampiressChangeStance();

					GetACSTransformationVampiress().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationVampiress().GetHeadingVector()));

					if (
					theInput.IsActionPressed('Sprint')
					)
					{
						GetACSTransformationVampiress().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
					}
					else
					{
						GetACSTransformationVampiress().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
					}
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftX') > 0.1 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
			{
				VampiressRestoreRotation();

				VampiressChangeStance();

				if (!GetACSTransformationVampiress().HasTag('ACS_Werewolf_Stationary_Transition')
				)
				{
					ACSTransformVampiressMovementAdjustRight();
				}

				GetACSTransformationVampiress().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationVampiress().GetHeadingVector()));

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationVampiress().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationVampiress().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftX') < -0.1 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
			{
				VampiressRestoreRotation();

				VampiressChangeStance();

				if (!GetACSTransformationVampiress().HasTag('ACS_Werewolf_Stationary_Transition')
				)
				{
					ACSTransformVampiressMovementAdjustLeft();
				}

				GetACSTransformationVampiress().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationVampiress().GetHeadingVector()));

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationVampiress().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationVampiress().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftY') > 0.1 && theInput.GetActionValue('GI_AxisLeftX') > 0.1 )
			{
				VampiressRestoreRotation();

				VampiressChangeStance();

				if (!GetACSTransformationVampiress().HasTag('ACS_Werewolf_Stationary_Transition')
				)
				{
					ACSTransformVampiressMovementAdjustForwardRight();
				}

				GetACSTransformationVampiress().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationVampiress().GetHeadingVector()));

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationVampiress().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationVampiress().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftY') > 0.1 && theInput.GetActionValue('GI_AxisLeftX') < -0.1 )
			{
				VampiressRestoreRotation();

				VampiressChangeStance();

				if (!GetACSTransformationVampiress().HasTag('ACS_Werewolf_Stationary_Transition')
				)
				{
					ACSTransformVampiressMovementAdjustForwardLeft();
				}

				GetACSTransformationVampiress().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationVampiress().GetHeadingVector()));

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationVampiress().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationVampiress().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftY') < -0.1 && theInput.GetActionValue('GI_AxisLeftX') > 0.1 )
			{
				VampiressRestoreRotation();

				VampiressChangeStance();

				if (!GetACSTransformationVampiress().HasTag('ACS_Werewolf_Stationary_Transition')
				)
				{
					ACSTransformVampiressMovementAdjustBackwardRight();
				}

				GetACSTransformationVampiress().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationVampiress().GetHeadingVector()));

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationVampiress().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationVampiress().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftX') < -0.1 && theInput.GetActionValue('GI_AxisLeftY') < -0.1 )
			{
				VampiressRestoreRotation();

				VampiressChangeStance();

				if (!GetACSTransformationVampiress().HasTag('ACS_Werewolf_Stationary_Transition')
				)
				{
					ACSTransformVampiressMovementAdjustBackwardLeft();
				}

				GetACSTransformationVampiress().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationVampiress().GetHeadingVector()));

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationVampiress().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationVampiress().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	public timer function Transformation_Werewolf_Fear(deltaTime : float , id : int)
	{
		if (
		FactsQuerySum("acs_transformation_activated") > 0
		)
		{
			if (GetACSTransformationVampireMonster().HasTag('ACS_Transformation_Vampire_Monster_Camo_Active'))
			{
				theGame.GetBehTreeReactionManager().CreateReactionEventIfPossible( thePlayer, 'CastSignAction', -1, 1.5f, -1.f, -1, true );

				return;
			}
			
			theGame.GetBehTreeReactionManager().CreateReactionEventIfPossible( thePlayer, 'CastSignAction', -1, 20.0f, -1.f, -1, true );
		}
	}

	public timer function Fleder_Glide_Fear(deltaTime : float , id : int)
	{
		theGame.GetBehTreeReactionManager().CreateReactionEventIfPossible( thePlayer, 'CastSignAction', -1, 10.f, -1.f, -1, true );
	}

	function ACS_Transformation_Create_Savelock()
	{
		theGame.CreateNoSaveLock( "ACS_Transformation_Active", ACS_Transformation_Savelock_ID, false, false );
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	public timer function DisableWerewolfStart(deltaTime : float , id : int)
	{
		DisableWerewolf_Actual();
	}

	function DisableWerewolf()
	{
		if ( theGame.IsDialogOrCutscenePlaying() 
		|| thePlayer.IsInNonGameplayCutscene() 
		|| thePlayer.IsInGameplayScene() 
		|| theGame.IsCurrentlyPlayingNonGameplayScene()
		)
		{
			DisableWerewolf_Actual();
		}
		else
		{
			if (!GetACSTransformationWerewolf().HasTag('ACS_Werewolf_Disable_Anim_Played'))
			{
				GetACSTransformationWerewolf().DestroyEffect('morph_fx');
				GetACSTransformationWerewolf().PlayEffectSingle('morph_fx');

				GetACSTransformationWerewolf().DestroyEffect('special_force_l');
				GetACSTransformationWerewolf().PlayEffectSingle('special_force_l');

				GetACSTransformationWerewolf().DestroyEffect('special_force_r');
				GetACSTransformationWerewolf().PlayEffectSingle('special_force_r');

				GetACSTransformationWerewolf().DestroyEffect('attack_special');
				GetACSTransformationWerewolf().PlayEffectSingle('attack_special');

				ACSTransformWerewolfPlayAnim('monster_werewolf_die02', 0.25f, 0.25f);

				GetACSTransformationWerewolf().AddTag('ACS_Werewolf_Disable_Anim_Played');
			}

			RemoveTimer('DisableWerewolfStart');
			AddTimer('DisableWerewolfStart', 0.5, false);
		}
	}

	function DisableWerewolf_Actual()
	{
		var playerAnimcomp					 : CAnimatedComponent;

		var playerPos, newPlayerPos			: Vector;

		playerAnimcomp = (CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent');

		if (
		FactsQuerySum("acs_transformation_activated") > 0
		&& FactsQuerySum("acs_wolven_curse_activated") > 0
		)
		{
			FactsRemove("block_geralts_battlecries");

			GetTransformationCamera().Stop();

			GetTransformationCamera().Destroy();

			theGame.ReleaseNoSaveLock( ACS_Transformation_Savelock_ID );

			RemoveTimer('Transformation_Werewolf_Fear');

			RemoveTimer('WerewolfBerserkModeDeactivate');

			RemoveTimer('ShrinkTransformationWolfTimer');

			RemoveTimer('GrowTransformationWolfTimer');

			ResetTransformationWolfSize();
			
			ACSWerewolfRemoveMoveTimers();

			thePlayer.BreakAttachment();

			FactsRemove("acs_transformation_activated");

			FactsRemove("acs_wolven_curse_activated");
			
			thePlayer.PlayEffectSingle('smoke_explosion');
			thePlayer.StopEffect('smoke_explosion');

			thePlayer.PlayEffectSingle('teleport');
			thePlayer.StopEffect('teleport');

			thePlayer.RemoveBuffImmunity_AllNegative('ACS_Transformation_Immunity_Negative'); 
			thePlayer.RemoveBuffImmunity_AllCritical('ACS_Transformation_Immunity_Critical'); 

			thePlayer.SetVisibility(true);

			thePlayer.EnableCollisions(true);

			thePlayer.SetCanPlayHitAnim(true); 

			thePlayer.EnableCharacterCollisions(true);

			playerAnimcomp.UnfreezePose();

			//thePlayer.SetAnimationSpeedMultiplier( 1  );

			GetACSTransformationWerewolf().Teleport(thePlayer.GetWorldPosition() + Vector(0,0,-200));

			GetACSTransformationWerewolf().DestroyAfter(0.125);

			FactsRemove("ACS_Transformation_Attached");

			thePlayer.UnblockAction(EIAB_CallHorse,				'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_DrawWeapon, 			'ACS_Transformation'); 
			thePlayer.UnblockAction(EIAB_FastTravel, 			'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_InteractionAction, 	'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_Crossbow,				'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_UsableItem,			'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_ThrowBomb,				'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_Parry,					'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_MeditationWaiting,		'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_OpenMeditation,		'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_RadialMenu,			'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_Jump,					'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_QuickSlots, 			'ACS_Transformation');

			playerPos = ACSPlayerFixZAxis(thePlayer.GetWorldPosition());

			if( !theGame.GetWorld().NavigationFindSafeSpot( playerPos, 0.3, 0.3 , newPlayerPos ) )
			{
				theGame.GetWorld().NavigationFindSafeSpot( playerPos, 0.3, 4 , newPlayerPos );
				playerPos = newPlayerPos;
			}

			thePlayer.TeleportWithRotation(ACSPlayerFixZAxis(playerPos), thePlayer.GetWorldRotation());
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	public timer function DisableVampiressStart(deltaTime : float , id : int)
	{
		DisableVampiress_Actual();
	}

	function DisableVampiress()
	{
		GetACSTransformationVampiress().DestroyEffect('shadowdash');

		GetACSTransformationVampiress().StopAllEffects();

		if (!GetACSTransformationVampiress().HasTag('ACS_Transformation_Bruxa'))
		{
			GetACSTransformationVampiress().PlayEffectSingle('teleport_out_djinn');
			GetACSTransformationVampiress().StopEffect('teleport_out_djinn');

			GetACSTransformationVampiress().PlayEffectSingle('teleport_out');
			GetACSTransformationVampiress().StopEffect('teleport_out');
		}
		else
		{
			GetACSTransformationVampiress().PlayEffectSingle('shadowdash');
			GetACSTransformationVampiress().StopEffect('shadowdash');
		}

		if ( theGame.IsDialogOrCutscenePlaying() 
		|| thePlayer.IsInNonGameplayCutscene() 
		|| thePlayer.IsInGameplayScene() 
		|| theGame.IsCurrentlyPlayingNonGameplayScene()
		)
		{
			DisableVampiress_Actual();
		}
		else
		{
			if (!GetACSTransformationVampiress().HasTag('ACS_Vampiress_Disable_Anim_Played'))
			{
				if (!GetACSTransformationVampiress().HasTag('ACS_Transformation_Bruxa'))
				{
					if (RandF() < 0.5)
					{
						ACSTransformVampiressPlayAnim('woman_sorceress_teleport_lp', 0.25f, 0.25f);
					}
					else
					{
						ACSTransformVampiressPlayAnim('woman_sorceress_teleport_rp', 0.25f, 0.25f);
					}
				}
				else
				{
					ACSTransformVampiressPlayAnim('bruxa_jump_up_start', 0.25f, 0.25f);
				}
				
				GetACSTransformationVampiress().AddTag('ACS_Vampiress_Disable_Anim_Played');
			}

			RemoveTimer('DisableVampiressStart');

			if (!GetACSTransformationVampiress().HasTag('ACS_Transformation_Bruxa'))
			{
				AddTimer('DisableVampiressStart', 1, false);
			}
			else
			{
				AddTimer('DisableVampiressStart', 0.5, false);
			}
		}
	}

	function DisableVampiress_Actual()
	{
		var playerAnimcomp					 : CAnimatedComponent;

		var playerPos, newPlayerPos			: Vector;

		playerAnimcomp = (CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent');

		GetACSTransformationVampiress().DestroyEffect('shadowdash');

		thePlayer.DestroyEffect('shadowdash');

		if (
		FactsQuerySum("acs_transformation_activated") > 0
		&& FactsQuerySum("acs_vampireess_transformation_activated") > 0
		)
		{
			if ( ACS_BruxaDashSprintOrW() == 1 
			|| ACS_WraithModeSprintOrW() == 1
			)
			{
				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'Sprint' );
				theInput.RegisterListener( this, 'OnCommSprint', 'Sprint' );
			}
			else
			{
				theInput.UnregisterListener( this, 'Sprint' );
				theInput.RegisterListener( thePlayer.GetInputHandler(), 'OnCommSprint', 'Sprint' );
			}

			FactsRemove("block_geralts_battlecries");

			GetTransformationCamera().Stop();

			GetTransformationCamera().Destroy();

			theGame.ReleaseNoSaveLock( ACS_Transformation_Savelock_ID );

			RemoveTimer('Transformation_Werewolf_Fear');

			ResetTransformationWolfSize();
			
			ACSWerewolfRemoveMoveTimers();

			thePlayer.BreakAttachment();

			FactsRemove("acs_transformation_activated");

			FactsRemove("acs_vampireess_transformation_activated");

			if (!GetACSTransformationVampiress().HasTag('ACS_Transformation_Bruxa'))
			{
				thePlayer.PlayEffectSingle('smoke_explosion');
				thePlayer.StopEffect('smoke_explosion');

				thePlayer.PlayEffectSingle('teleport');
				thePlayer.StopEffect('teleport');
			}

			thePlayer.RemoveBuffImmunity_AllNegative('ACS_Transformation_Immunity_Negative'); 
			thePlayer.RemoveBuffImmunity_AllCritical('ACS_Transformation_Immunity_Critical'); 

			thePlayer.SetVisibility(true);

			thePlayer.EnableCollisions(true);

			thePlayer.SetCanPlayHitAnim(true); 

			thePlayer.EnableCharacterCollisions(true);

			thePlayer.RemoveTag('ACS_Transformation_Bruxa_Cloaked');

			//thePlayer.PlayEffectSingle('shadowdash');

			//thePlayer.StopEffect('shadowdash');

			playerAnimcomp.UnfreezePose();

			//thePlayer.SetAnimationSpeedMultiplier( 1  );

			FactsRemove("ACS_Transformation_Attached");

			thePlayer.UnblockAction(EIAB_CallHorse,				'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_DrawWeapon, 			'ACS_Transformation'); 
			thePlayer.UnblockAction(EIAB_FastTravel, 			'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_InteractionAction, 	'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_Crossbow,				'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_UsableItem,			'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_ThrowBomb,				'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_Parry,					'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_MeditationWaiting,		'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_OpenMeditation,		'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_RadialMenu,			'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_Jump,					'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_QuickSlots, 			'ACS_Transformation');

			playerPos = ACSPlayerFixZAxis(thePlayer.GetWorldPosition());

			if( !theGame.GetWorld().NavigationFindSafeSpot( playerPos, 0.3, 0.3 , newPlayerPos ) )
			{
				theGame.GetWorld().NavigationFindSafeSpot( playerPos, 0.3, 4 , newPlayerPos );
				playerPos = newPlayerPos;
			}

			thePlayer.TeleportWithRotation(ACSPlayerFixZAxis(playerPos), thePlayer.GetWorldRotation());

			GetACSTransformationVampiress().Teleport(thePlayer.GetWorldPosition() + Vector(0,0,-200));

			GetACSTransformationVampiress().DestroyAfter(0.0125);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	public timer function DisableRedMiasmalStart(deltaTime : float , id : int)
	{
		DisableRedMiasmal_Actual();
	}

	function DisableRedMiasmal()
	{
		if ( theGame.IsDialogOrCutscenePlaying() 
		|| thePlayer.IsInNonGameplayCutscene() 
		|| thePlayer.IsInGameplayScene() 
		|| theGame.IsCurrentlyPlayingNonGameplayScene()
		)
		{
			DisableRedMiasmal_Actual();
		}
		else
		{
			ACSTransformRedMiasmalPlayAnim('monster_lessun_despawn', 0.25f, 0.25f);

			GetACSTransformationRedMiasmal().PlayEffectSingle('death');
			GetACSTransformationRedMiasmal().StopEffect('death');

			GetACSTransformationRedMiasmal().PlayEffectSingle('evil_disappear');
			GetACSTransformationRedMiasmal().StopEffect('evil_disappear');

			RemoveTimer('DisableRedMiasmalStart');

			AddTimer('DisableRedMiasmalStart', 1.5, false);
		}
	}

	function DisableRedMiasmal_Actual()
	{
		var playerAnimcomp					 : CAnimatedComponent;

		var playerPos, newPlayerPos			: Vector;

		playerAnimcomp = (CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent');

		if (
		FactsQuerySum("acs_transformation_activated") > 0
		&& FactsQuerySum("acs_red_miasmal_curse_activated") > 0
		)
		{
			FactsRemove("block_geralts_battlecries");

			ACSTransformationRedMiasmalRemoveMoveTimers();

			GetTransformationCamera().Stop();

			GetTransformationCamera().Destroy();

			theGame.ReleaseNoSaveLock( ACS_Transformation_Savelock_ID );

			thePlayer.BreakAttachment();

			FactsRemove("acs_transformation_activated");

			FactsRemove("acs_red_miasmal_curse_activated");
			
			thePlayer.PlayEffectSingle('smoke_explosion');
			thePlayer.StopEffect('smoke_explosion');

			thePlayer.PlayEffectSingle('teleport');
			thePlayer.StopEffect('teleport');

			thePlayer.RemoveBuffImmunity_AllNegative('ACS_Transformation_Immunity_Negative'); 
			thePlayer.RemoveBuffImmunity_AllCritical('ACS_Transformation_Immunity_Critical'); 

			thePlayer.SetVisibility(true);

			thePlayer.EnableCollisions(true);

			thePlayer.SetCanPlayHitAnim(true); 

			thePlayer.EnableCharacterCollisions(true);

			playerAnimcomp.UnfreezePose();

			//thePlayer.SetAnimationSpeedMultiplier( 1  );

			GetACSTransformationRedMiasmal().Teleport(thePlayer.GetWorldPosition() + Vector(0,0,-200));

			GetACSTransformationRedMiasmal().DestroyAfter(0.125);

			FactsRemove("ACS_Transformation_Attached");

			thePlayer.UnblockAction(EIAB_CallHorse,				'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_DrawWeapon, 			'ACS_Transformation'); 
			thePlayer.UnblockAction(EIAB_FastTravel, 			'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_InteractionAction, 	'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_Crossbow,				'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_UsableItem,			'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_ThrowBomb,				'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_Parry,					'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_MeditationWaiting,		'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_OpenMeditation,		'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_RadialMenu,			'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_Jump,					'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_QuickSlots, 			'ACS_Transformation');

			playerPos = ACSPlayerFixZAxis(thePlayer.GetWorldPosition());

			if( !theGame.GetWorld().NavigationFindSafeSpot( playerPos, 0.3, 0.3 , newPlayerPos ) )
			{
				theGame.GetWorld().NavigationFindSafeSpot( playerPos, 0.3, 4 , newPlayerPos );
				playerPos = newPlayerPos;
			}

			thePlayer.TeleportWithRotation(ACSPlayerFixZAxis(playerPos), thePlayer.GetWorldRotation());
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	public timer function DisableSharleyStart(deltaTime : float , id : int)
	{
		DisableSharley_Actual();
	}

	function DisableSharley()
	{
		if ( theGame.IsDialogOrCutscenePlaying() 
		|| thePlayer.IsInNonGameplayCutscene() 
		|| thePlayer.IsInGameplayScene() 
		|| theGame.IsCurrentlyPlayingNonGameplayScene()
		)
		{
			DisableSharley_Actual();
		}
		else
		{
			ACSTransformSharleyPlayAnim('attack_special_003_digging_start', 0.25f, 0.25f);

			GetACSTransformationSharley().PlayEffectSingle('spawn_drop');
			GetACSTransformationSharley().StopEffect('spawn_drop');

			GetACSTransformationSharley().PlayEffectSingle('smoke_throw_screen');
			GetACSTransformationSharley().StopEffect('smoke_throw_screen');

			GetACSTransformationSharley().PlayEffectSingle('tremor_start_2');
			GetACSTransformationSharley().StopEffect('tremor_start_2');


			RemoveTimer('DisableSharleyStart');

			AddTimer('DisableSharleyStart', 1.5, false);
		}
	}

	function DisableSharley_Actual()
	{
		var playerAnimcomp					 : CAnimatedComponent;

		var playerPos, newPlayerPos			: Vector;

		playerAnimcomp = (CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent');

		if (
		FactsQuerySum("acs_transformation_activated") > 0
		&& FactsQuerySum("acs_sharley_curse_activated") > 0
		)
		{
			FactsRemove("block_geralts_battlecries");

			ACSTransformationSharleyRemoveMoveTimers();

			GetTransformationCamera().Stop();

			GetTransformationCamera().Destroy();

			theGame.ReleaseNoSaveLock( ACS_Transformation_Savelock_ID );

			thePlayer.BreakAttachment();

			FactsRemove("acs_transformation_activated");

			FactsRemove("acs_sharley_curse_activated");
			
			thePlayer.PlayEffectSingle('smoke_explosion');
			thePlayer.StopEffect('smoke_explosion');

			thePlayer.PlayEffectSingle('teleport');
			thePlayer.StopEffect('teleport');

			thePlayer.RemoveBuffImmunity_AllNegative('ACS_Transformation_Immunity_Negative'); 
			thePlayer.RemoveBuffImmunity_AllCritical('ACS_Transformation_Immunity_Critical'); 

			thePlayer.SetVisibility(true);

			thePlayer.EnableCollisions(true);

			thePlayer.SetCanPlayHitAnim(true); 

			thePlayer.EnableCharacterCollisions(true);

			playerAnimcomp.UnfreezePose();

			//thePlayer.SetAnimationSpeedMultiplier( 1  );

			GetACSTransformationSharley().Teleport(thePlayer.GetWorldPosition() + Vector(0,0,-200));

			GetACSTransformationSharley().DestroyAfter(0.125);

			FactsRemove("ACS_Transformation_Attached");

			thePlayer.UnblockAction(EIAB_CallHorse,				'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_DrawWeapon, 			'ACS_Transformation'); 
			thePlayer.UnblockAction(EIAB_FastTravel, 			'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_InteractionAction, 	'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_Crossbow,				'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_UsableItem,			'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_ThrowBomb,				'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_Parry,					'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_MeditationWaiting,		'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_OpenMeditation,		'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_RadialMenu,			'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_Jump,					'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_QuickSlots, 			'ACS_Transformation');

			playerPos = ACSPlayerFixZAxis(thePlayer.GetWorldPosition());

			if( !theGame.GetWorld().NavigationFindSafeSpot( playerPos, 0.3, 0.3 , newPlayerPos ) )
			{
				theGame.GetWorld().NavigationFindSafeSpot( playerPos, 0.3, 4 , newPlayerPos );
				playerPos = newPlayerPos;
			}

			thePlayer.TeleportWithRotation(ACSPlayerFixZAxis(playerPos), thePlayer.GetWorldRotation());
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	public timer function DisableBlackWolfStart(deltaTime : float , id : int)
	{
		DisableBlackWolf_Actual();
	}

	function DisableBlackWolf()
	{
		if ( theGame.IsDialogOrCutscenePlaying() 
		|| thePlayer.IsInNonGameplayCutscene() 
		|| thePlayer.IsInGameplayScene() 
		|| theGame.IsCurrentlyPlayingNonGameplayScene()
		)
		{
			DisableBlackWolf_Actual();
		}
		else
		{
			if (theInput.GetActionValue('GI_AxisLeftX') != 0 || theInput.GetActionValue('GI_AxisLeftY') != 0 )
			{
				ACSTransformBlackWolfPlayAnim('barghest_attack_jumping_through_faster', 0.125f, 0.125f);

				GetACSTransformationBlackWolf().PlayEffectSingle('fire_breath');

				RemoveTimer('DisableBlackWolfStart');

				AddTimer('DisableBlackWolfStart', 0.75, false);
			}
			else
			{
				GetWitcherPlayer().SoundEvent("animals_wolf_howl");
				GetWitcherPlayer().SoundEvent("animals_wolf_howl");
				GetWitcherPlayer().SoundEvent("animals_wolf_howl");
				GetWitcherPlayer().SoundEvent("animals_wolf_howl");
				GetWitcherPlayer().SoundEvent("animals_wolf_howl");
				
				GetWitcherPlayer().SoundEvent("monster_wild_dog_howl");
				GetWitcherPlayer().SoundEvent("monster_wild_dog_howl");
				GetWitcherPlayer().SoundEvent("monster_wild_dog_howl");
				GetWitcherPlayer().SoundEvent("monster_wild_dog_howl");
				GetWitcherPlayer().SoundEvent("monster_wild_dog_howl");

				ACSTransformBlackWolfPlayAnim('wolf_howling_loop', 0.25f, 0.25f);

				GetACSTransformationBlackWolf().PlayEffectSingle('fire_breath');

				RemoveTimer('DisableBlackWolfStart');

				AddTimer('DisableBlackWolfStart', 1.5, false);
			}
		}
	}

	function DisableBlackWolf_Actual()
	{
		var playerAnimcomp					 : CAnimatedComponent;

		var playerPos, newPlayerPos			: Vector;

		playerAnimcomp = (CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent');

		if (
		FactsQuerySum("acs_transformation_activated") > 0
		&& FactsQuerySum("acs_black_wolf_curse_activated") > 0
		)
		{
			FactsRemove("block_geralts_battlecries");

			//ACSTransformationSharleyRemoveMoveTimers();

			GetTransformationCamera().Stop();

			GetTransformationCamera().Destroy();

			theGame.ReleaseNoSaveLock( ACS_Transformation_Savelock_ID );

			thePlayer.BreakAttachment();

			FactsRemove("acs_transformation_activated");

			FactsRemove("acs_black_wolf_curse_activated");
			
			thePlayer.PlayEffectSingle('smoke_explosion');
			thePlayer.StopEffect('smoke_explosion');

			thePlayer.PlayEffectSingle('teleport');
			thePlayer.StopEffect('teleport');

			thePlayer.RemoveBuffImmunity_AllNegative('ACS_Transformation_Immunity_Negative'); 
			thePlayer.RemoveBuffImmunity_AllCritical('ACS_Transformation_Immunity_Critical'); 

			thePlayer.SetVisibility(true);

			thePlayer.EnableCollisions(true);

			thePlayer.SetCanPlayHitAnim(true); 

			thePlayer.EnableCharacterCollisions(true);

			playerAnimcomp.UnfreezePose();

			//thePlayer.SetAnimationSpeedMultiplier( 1  );

			GetACSTransformationBlackWolf().Teleport(thePlayer.GetWorldPosition() + Vector(0,0,-200));

			GetACSTransformationBlackWolf().DestroyAfter(0.125);

			FactsRemove("ACS_Transformation_Attached");

			thePlayer.UnblockAction(EIAB_CallHorse,				'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_DrawWeapon, 			'ACS_Transformation'); 
			thePlayer.UnblockAction(EIAB_FastTravel, 			'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_InteractionAction, 	'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_Crossbow,				'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_UsableItem,			'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_ThrowBomb,				'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_Parry,					'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_MeditationWaiting,		'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_OpenMeditation,		'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_RadialMenu,			'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_Jump,					'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_QuickSlots, 			'ACS_Transformation');

			playerPos = ACSPlayerFixZAxis(thePlayer.GetWorldPosition());

			if( !theGame.GetWorld().NavigationFindSafeSpot( playerPos, 0.3, 0.3 , newPlayerPos ) )
			{
				theGame.GetWorld().NavigationFindSafeSpot( playerPos, 0.3, 4 , newPlayerPos );
				playerPos = newPlayerPos;
			}

			thePlayer.TeleportWithRotation(ACSPlayerFixZAxis(playerPos), thePlayer.GetWorldRotation());
		}
	}








	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function TransformationVampireMonsterLightAttackDamageActual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flight_Mode'))
		{
			attackRange = 4;

			attackAngle = 360;
		}
		else if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Ground_Mode'))
		{
			attackRange = 1.75;

			attackAngle = 70;
		}

		actors.Clear();

		actors = GetACSTransformationVampireMonster().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationVampireMonster().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors);

		actors.Remove( GetACSTransformationVampireMonster() );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationVampireMonster()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud') 
				|| actortarget.HasTag('ACS_Transformation_Vampire_Monster_Camera_Dummy') 
				|| actortarget.HasTag('ACS_Transformation_Vampire_Monster') 
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_TransformationVampireMonster_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_TransformationVampireMonster_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_TransformationVampireMonster_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					if ( actortarget.GetStat( BCS_Vitality ) >= maxTargetVitality * 0.25 )
					{
						damageMax = actortarget.GetStat( BCS_Vitality ) * 0.25; 

						damageMin = actortarget.GetStat( BCS_Vitality ) * 0.125; 
					}
					else if ( actortarget.GetStat( BCS_Vitality ) < maxTargetVitality * 0.25 )
					{
						damageMax = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.25; 

						damageMin = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.125; 
					}
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.125; 

							damageMin = actortarget.GetStat( BCS_Essence ) * 0.0625; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 

							damageMin = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.0625; 
						}
					}
					else
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.25; 

							damageMin = actortarget.GetStat( BCS_Essence ) * 0.125; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.25; 

							damageMin = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 
						}
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
					dmg.AddEffectInfo( EET_Stagger, 0.1 );
				}
				else
				{
					if( RandF() < 0.25 ) 
					{
						movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
						dmg.AddEffectInfo( EET_Stagger, 0.1 );
					}
				}

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');		

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(50 + damageMax,50 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(50 + damageMax,50 + damageMin) );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
				
				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_large");

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_small");

				GetWitcherPlayer().GainStat(BCS_Vitality, damageMax );
	
				theGame.GetMonsterParamsForActor(actortarget, mc, tmpName, tmpBool, tmpBool, tmpBool);

				RemoveAllCoveredBlood();

				if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), actortarget.GetWorldPosition() ) <= 5 * 5 
				&& RandF() < 0.75
				)
				{
					if( ((CNewNPC)actortarget).GetBloodType() == BT_Red) 
					{
						if (actortarget.HasAbility('mon_lessog_base')
						|| actortarget.HasAbility('mon_sprigan_base')
						)
						{						
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test_black');}
						} 
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Green) 
					{
						if (actortarget.HasAbility('mon_kikimore_base')
						|| actortarget.HasAbility('mon_black_spider_base')
						|| actortarget.HasAbility('mon_black_spider_ep2_base')
						)
						{						
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test_black');}
						} 
						else 
						{
							if (!thePlayer.IsEffectActive('covered_blood_green_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_green_ACS');}

							if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test_green', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test_green');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Yellow) 
					{
						if (actortarget.HasAbility('mon_archespor_base'))
						{
							if (!thePlayer.IsEffectActive('covered_blood_yellow_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_yellow_ACS');}

							if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test_yellow', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test_yellow');}
						} 
						else 
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Black) 
					{
						if ( mc == MC_Vampire ) 
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test');}
						}
						else if ( mc == MC_Magicals ) 
						{
							if (actortarget.HasAbility('mon_golem_base')
							|| actortarget.HasAbility('mon_djinn')
							|| actortarget.HasAbility('mon_gargoyle')
							)
							{
								if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

								if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test_black');}
							}
							else
							{
								if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

								if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test');}
							}
						}
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test_black');}
						}
					}
					else
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

						if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test');}
					}

					RemoveTimer('ACS_RemoveCoveredBlood');
					AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
				}
			}
		}
	}

	function TransformationVampireMonsterLightAttackDamageActualLeft()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;
		var targetNum					: int;

		if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flight_Mode'))
		{
			attackRange = 4;

			attackAngle = 360;
		}
		else if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Ground_Mode'))
		{
			attackRange = 1.75;

			attackAngle = 70;
		}

		targetNum = 20;

		actors.Clear();

		actors = GetACSTransformationVampireMonster().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationVampireMonster().GetHeadingVector()), attackAngle, targetNum, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		actors.Remove( GetACSTransformationVampireMonster() );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationVampireMonster()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				|| actortarget.HasTag('ACS_Transformation_Vampire_Monster_Camera_Dummy') 
				|| actortarget.HasTag('ACS_Transformation_Vampire_Monster') 
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_TransformationVampireMonster_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_TransformationVampireMonster_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_TransformationVampireMonster_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					if ( actortarget.GetStat( BCS_Vitality ) >= maxTargetVitality * 0.25 )
					{
						damageMax = actortarget.GetStat( BCS_Vitality ) * 0.25; 

						damageMin = actortarget.GetStat( BCS_Vitality ) * 0.125; 
					}
					else if ( actortarget.GetStat( BCS_Vitality ) < maxTargetVitality * 0.25 )
					{
						damageMax = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.25; 

						damageMin = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.125; 
					}
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.125; 

							damageMin = actortarget.GetStat( BCS_Essence ) * 0.0625; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 

							damageMin = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.0625; 
						}
					}
					else
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.5 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.25; 

							damageMin = actortarget.GetStat( BCS_Essence ) * 0.125; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.5 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.25; 

							damageMin = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 
						}
					}
				}
				
				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
					dmg.AddEffectInfo( EET_Stagger, 0.1 );
				}
				else
				{
					if( RandF() < 0.25 ) 
					{
						movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
						dmg.AddEffectInfo( EET_Stagger, 0.1 );
					}
				}

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');		

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(50 + damageMax,50 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(50 + damageMax,50 + damageMin) );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;

				GetWitcherPlayer().GainStat(BCS_Vitality, damageMax );

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_large");

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_small");

				theGame.GetMonsterParamsForActor(actortarget, mc, tmpName, tmpBool, tmpBool, tmpBool);

				RemoveAllCoveredBlood();

				if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), actortarget.GetWorldPosition() ) <= 5 * 5 
				&& RandF() < 0.75
				)
				{
					if( ((CNewNPC)actortarget).GetBloodType() == BT_Red) 
					{
						if (actortarget.HasAbility('mon_lessog_base')
						|| actortarget.HasAbility('mon_sprigan_base')
						)
						{						
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test_black');}
						} 
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Green) 
					{
						if (actortarget.HasAbility('mon_kikimore_base')
						|| actortarget.HasAbility('mon_black_spider_base')
						|| actortarget.HasAbility('mon_black_spider_ep2_base')
						)
						{						
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test_black');}
						} 
						else 
						{
							if (!thePlayer.IsEffectActive('covered_blood_green_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_green_ACS');}

							if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test_green', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test_green');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Yellow) 
					{
						if (actortarget.HasAbility('mon_archespor_base'))
						{
							if (!thePlayer.IsEffectActive('covered_blood_yellow_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_yellow_ACS');}

							if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test_yellow', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test_yellow');}
						} 
						else 
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Black) 
					{
						if ( mc == MC_Vampire ) 
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test');}
						}
						else if ( mc == MC_Magicals ) 
						{
							if (actortarget.HasAbility('mon_golem_base')
							|| actortarget.HasAbility('mon_djinn')
							|| actortarget.HasAbility('mon_gargoyle')
							)
							{
								if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

								if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test_black');}
							}
							else
							{
								if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

								if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test');}
							}
						}
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test_black');}
						}
					}
					else
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

						if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test');}
					}

					RemoveTimer('ACS_RemoveCoveredBlood');
					AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
				}
			}
		}
	}

	function TransformationVampireMonsterLightAttackDamageActualRight()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;
		var targetNum					: int;

		if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flight_Mode'))
		{
			attackRange = 4;

			attackAngle = 360;
		}
		else if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Ground_Mode'))
		{
			attackRange = 1.75;

			attackAngle = 70;
		}

		targetNum = 20;

		actors.Clear();

		actors = GetACSTransformationVampireMonster().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationVampireMonster().GetHeadingVector()), attackAngle, targetNum, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors);

		actors.Remove( GetACSTransformationVampireMonster() );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationVampireMonster()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				|| actortarget.HasTag('ACS_Transformation_Vampire_Monster_Camera_Dummy') 
				|| actortarget.HasTag('ACS_Transformation_Vampire_Monster') 
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_TransformationVampireMonster_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_TransformationVampireMonster_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_TransformationVampireMonster_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					if ( actortarget.GetStat( BCS_Vitality ) >= maxTargetVitality * 0.25 )
					{
						damageMax = actortarget.GetStat( BCS_Vitality ) * 0.25; 

						damageMin = actortarget.GetStat( BCS_Vitality ) * 0.125; 
					}
					else if ( actortarget.GetStat( BCS_Vitality ) < maxTargetVitality * 0.25 )
					{
						damageMax = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.25; 

						damageMin = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.125; 
					}
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.125; 

							damageMin = actortarget.GetStat( BCS_Essence ) * 0.0625; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 

							damageMin = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.0625; 
						}
					}
					else
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.5 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.25; 

							damageMin = actortarget.GetStat( BCS_Essence ) * 0.125; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.5 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.25; 

							damageMin = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 
						}
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
					dmg.AddEffectInfo( EET_Stagger, 0.1 );
				}
				else
				{
					if( RandF() < 0.25 ) 
					{
						movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
						dmg.AddEffectInfo( EET_Stagger, 0.1 );
					}
				}

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');		

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(50 + damageMax,50 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(50 + damageMax,50 + damageMin) );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;

				GetWitcherPlayer().GainStat(BCS_Vitality, damageMax );

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_large");

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_small");

				theGame.GetMonsterParamsForActor(actortarget, mc, tmpName, tmpBool, tmpBool, tmpBool);

				RemoveAllCoveredBlood();

				if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), actortarget.GetWorldPosition() ) <= 5 * 5 
				&& RandF() < 0.75
				)
				{
					if( ((CNewNPC)actortarget).GetBloodType() == BT_Red) 
					{
						if (actortarget.HasAbility('mon_lessog_base')
						|| actortarget.HasAbility('mon_sprigan_base')
						)
						{						
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test_black');}
						} 
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Green) 
					{
						if (actortarget.HasAbility('mon_kikimore_base')
						|| actortarget.HasAbility('mon_black_spider_base')
						|| actortarget.HasAbility('mon_black_spider_ep2_base')
						)
						{						
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test_black');}
						} 
						else 
						{
							if (!thePlayer.IsEffectActive('covered_blood_green_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_green_ACS');}

							if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test_green', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test_green');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Yellow) 
					{
						if (actortarget.HasAbility('mon_archespor_base'))
						{
							if (!thePlayer.IsEffectActive('covered_blood_yellow_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_yellow_ACS');}

							if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test_yellow', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test_yellow');}
						} 
						else 
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Black) 
					{
						if ( mc == MC_Vampire ) 
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test');}
						}
						else if ( mc == MC_Magicals ) 
						{
							if (actortarget.HasAbility('mon_golem_base')
							|| actortarget.HasAbility('mon_djinn')
							|| actortarget.HasAbility('mon_gargoyle')
							)
							{
								if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

								if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test_black');}
							}
							else
							{
								if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

								if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test');}
							}
						}
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test_black');}
						}
					}
					else
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

						if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test');}
					}

					RemoveTimer('ACS_RemoveCoveredBlood');
					AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
				}
			}
		}
	}

	public timer function TransformationVampireMonsterLightAttackDamage(deltaTime : float , id : int)
	{
		if (!GetACSTransformationVampireMonster().GetVisibility())
		{
			GetACSTransformationVampireMonster().SetVisibility(true);
		}

		if (GetACSTransformationVampireMonster().HasTag('ACS_Transformation_Vampire_Monster_Blood_Armor'))
		{
			GetACSTransformationVampireMonster().DestroyEffect('shadowdash_end');
			GetACSTransformationVampireMonster().PlayEffectSingle('shadowdash_end');
		}
		else
		{
			GetACSTransformationVampireMonster().DestroyEffect('shadowdash_start');
			GetACSTransformationVampireMonster().PlayEffectSingle('shadowdash_start');
		}

		if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flight_Mode'))
		{
			GetACSTransformationVampireMonster().DestroyEffect('lightning');
			GetACSTransformationVampireMonster().PlayEffectSingle('lightning');

			GetACSTransformationVampireMonster().DestroyEffect('start_effect');
			GetACSTransformationVampireMonster().PlayEffectSingle('start_effect');

			GetACSTransformationVampireMonster().DestroyEffect('wing_trail');
			GetACSTransformationVampireMonster().PlayEffectSingle('wing_trail');
			GetACSTransformationVampireMonster().StopEffect('wing_trail');
		}

		TransformationVampireMonsterLightAttackDamageActual();
	}

	public timer function TransformationVampireMonsterLightAttackDamageLeft(deltaTime : float , id : int)
	{
		if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flight_Mode'))
		{
			GetACSTransformationVampireMonster().DestroyEffect('lightning');
			GetACSTransformationVampireMonster().PlayEffectSingle('lightning');

			GetACSTransformationVampireMonster().DestroyEffect('start_effect');
			GetACSTransformationVampireMonster().PlayEffectSingle('start_effect');

			GetACSTransformationVampireMonster().DestroyEffect('wing_trail');
			GetACSTransformationVampireMonster().PlayEffectSingle('wing_trail');
			GetACSTransformationVampireMonster().StopEffect('wing_trail');
		}

		TransformationVampireMonsterLightAttackDamageActualLeft();
	}

	public timer function TransformationVampireMonsterLightAttackDamageLeft_add1(deltaTime : float , id : int)
	{
		if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flight_Mode'))
		{
			GetACSTransformationVampireMonster().DestroyEffect('lightning');
			GetACSTransformationVampireMonster().PlayEffectSingle('lightning');

			GetACSTransformationVampireMonster().DestroyEffect('start_effect');
			GetACSTransformationVampireMonster().PlayEffectSingle('start_effect');

			GetACSTransformationVampireMonster().DestroyEffect('wing_trail');
			GetACSTransformationVampireMonster().PlayEffectSingle('wing_trail');
			GetACSTransformationVampireMonster().StopEffect('wing_trail');
		}

		TransformationVampireMonsterLightAttackDamageActualLeft();
	}

	public timer function TransformationVampireMonsterLightAttackDamageLeft_add2(deltaTime : float , id : int)
	{
		TransformationVampireMonsterLightAttackDamageActualLeft();
	}

	public timer function TransformationVampireMonsterLightAttackDamageLeft_add3(deltaTime : float , id : int)
	{
		TransformationVampireMonsterLightAttackDamageActualLeft();
	}

	public timer function TransformationVampireMonsterLightAttackDamageLeft_add4(deltaTime : float , id : int)
	{
		TransformationVampireMonsterLightAttackDamageActualLeft();
	}

	public timer function TransformationVampireMonsterLightAttackDamageRight(deltaTime : float , id : int)
	{
		if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flight_Mode'))
		{
			GetACSTransformationVampireMonster().DestroyEffect('lightning');
			GetACSTransformationVampireMonster().PlayEffectSingle('lightning');

			GetACSTransformationVampireMonster().DestroyEffect('start_effect');
			GetACSTransformationVampireMonster().PlayEffectSingle('start_effect');

			GetACSTransformationVampireMonster().DestroyEffect('wing_trail');
			GetACSTransformationVampireMonster().PlayEffectSingle('wing_trail');
			GetACSTransformationVampireMonster().StopEffect('wing_trail');
		}

		TransformationVampireMonsterLightAttackDamageActualRight();
	}

	public timer function TransformationVampireMonsterLightAttackDamageRight_add1(deltaTime : float , id : int)
	{
		TransformationVampireMonsterLightAttackDamageActualRight();
	}

	public timer function TransformationVampireMonsterLightAttackDamageRight_add2(deltaTime : float , id : int)
	{
		TransformationVampireMonsterLightAttackDamageActualRight();
	}

	public timer function TransformationVampireMonsterLightAttackDamageRight_add3(deltaTime : float , id : int)
	{
		TransformationVampireMonsterLightAttackDamageActualRight();
	}

	public timer function TransformationVampireMonsterLightAttackDamageRight_add4(deltaTime : float , id : int)
	{
		TransformationVampireMonsterLightAttackDamageActualRight();
	}

	function TransformationVampireMonsterHeavyAttackDamageActual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		attackRange = 3;

		attackAngle = 360;

		actors.Clear();

		actors = GetACSTransformationVampireMonster().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationVampireMonster().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );
		actors.Remove( GetACSTransformationVampireMonster() );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationVampireMonster()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				|| actortarget.HasTag('ACS_Transformation_Vampire_Monster_Camera_Dummy') 
				|| actortarget.HasTag('ACS_Transformation_Vampire_Monster') 
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_TransformationVampireMonster_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_TransformationVampireMonster_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_TransformationVampireMonster_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					if ( actortarget.GetStat( BCS_Vitality ) >= maxTargetVitality * 0.25 )
					{
						damageMax = actortarget.GetStat( BCS_Vitality ) * 0.25; 
					}
					else if ( actortarget.GetStat( BCS_Vitality ) < maxTargetVitality * 0.25 )
					{
						damageMax = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.25; 
					}
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.125; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 
						}
					}
					else
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.25; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.25; 
						}
					}
				}

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_large");

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_small");

				dmg.SetHitReactionType( EHRT_Heavy, true);

				dmg.AddEffectInfo( EET_Knockdown, 1 );

				dmg.AddEffectInfo( EET_Bleeding, 3 );

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, 100 + damageMax );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, 100 + damageMax );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	function TransformationVampireMonsterHeavyAttackDamageMeleeActual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		attackRange = 3;

		attackAngle = 90;

		actors.Clear();

		actors = GetACSTransformationVampireMonster().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationVampireMonster().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );
		actors.Remove( GetACSTransformationVampireMonster() );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationVampireMonster()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				|| actortarget.HasTag('ACS_Transformation_Vampire_Monster_Camera_Dummy') 
				|| actortarget.HasTag('ACS_Transformation_Vampire_Monster') 
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_TransformationVampireMonster_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_TransformationVampireMonster_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_TransformationVampireMonster_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					if ( actortarget.GetStat( BCS_Vitality ) >= maxTargetVitality * 0.25 )
					{
						damageMax = actortarget.GetStat( BCS_Vitality ) * 0.25; 
					}
					else if ( actortarget.GetStat( BCS_Vitality ) < maxTargetVitality * 0.25 )
					{
						damageMax = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.25; 
					}
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.125; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 
						}
					}
					else
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.25; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.25; 
						}
					}
				}

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_large");

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_small");

				dmg.SetHitReactionType( EHRT_Heavy, true);

				dmg.AddEffectInfo( EET_Knockdown, 1 );

				dmg.AddEffectInfo( EET_Bleeding, 3 );

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, 100 + damageMax );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, 100 + damageMax );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	function TransformationVampireMonsterHeavyAttackDamageBlastActual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		attackRange = 5;

		attackAngle = 360;

		actors.Clear();

		actors = GetACSTransformationVampireMonster().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationVampireMonster().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );
		actors.Remove( GetACSTransformationVampireMonster() );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationVampireMonster()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				|| actortarget.HasTag('ACS_Transformation_Vampire_Monster_Camera_Dummy') 
				|| actortarget.HasTag('ACS_Transformation_Vampire_Monster') 
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_TransformationVampireMonster_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_TransformationVampireMonster_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_TransformationVampireMonster_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					if ( actortarget.GetStat( BCS_Vitality ) >= maxTargetVitality * 0.25 )
					{
						damageMax = actortarget.GetStat( BCS_Vitality ) * 0.125; 
					}
					else if ( actortarget.GetStat( BCS_Vitality ) < maxTargetVitality * 0.25 )
					{
						damageMax = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.125; 
					}
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.06125; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.06125; 
						}
					}
					else
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.125; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 
						}
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				dmg.SetSuppressHitSounds(true);

				dmg.AddEffectInfo( EET_Knockdown, 2 );

				dmg.AddEffectInfo( EET_Bleeding, 3 );

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, 50 + damageMax );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, 50 + damageMax );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	function TransformationVampireMonsterHeavyAttackDamageTrapActual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;
		var trap_ent					: W3TransformationVampireMonsterTrap;

		attackRange = 4;

		attackAngle = 360;

		actors.Clear();

		actors = GetACSTransformationVampireMonster().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationVampireMonster().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );
		actors.Remove( GetACSTransformationVampireMonster() );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationVampireMonster()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				|| actortarget.HasTag('ACS_Transformation_Vampire_Monster_Camera_Dummy') 
				|| actortarget.HasTag('ACS_Transformation_Vampire_Monster') 
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_TransformationVampireMonster_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_TransformationVampireMonster_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_TransformationVampireMonster_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					if ( actortarget.GetStat( BCS_Vitality ) >= maxTargetVitality * 0.25 )
					{
						damageMax = actortarget.GetStat( BCS_Vitality ) * 0.25; 
					}
					else if ( actortarget.GetStat( BCS_Vitality ) < maxTargetVitality * 0.25 )
					{
						damageMax = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.25; 
					}
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.125; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 
						}
					}
					else
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.25; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.25; 
						}
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				dmg.AddEffectInfo( EET_Stagger, 3 );

				dmg.AddEffectInfo( EET_Bleeding, 3 );

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');		

				trap_ent = (W3TransformationVampireMonsterTrap)theGame.CreateEntity( (CEntityTemplate)LoadResource( 

				"dlc\dlc_acs\data\entities\other\vampire_monster_trap.w2ent"

				, true ), ACSFixZAxis(actortarget.GetWorldPosition()), EulerAngles(0,0,0) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, 100 + damageMax );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, 100 + damageMax );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	

				GetWitcherPlayer().GainStat(BCS_Vitality, damageMax );

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_large");

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_small");

				theGame.GetMonsterParamsForActor(actortarget, mc, tmpName, tmpBool, tmpBool, tmpBool);

				RemoveAllCoveredBlood();

				if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), actortarget.GetWorldPosition() ) <= 5 * 5 
				&& RandF() < 0.75
				)
				{
					if( ((CNewNPC)actortarget).GetBloodType() == BT_Red) 
					{
						if (actortarget.HasAbility('mon_lessog_base')
						|| actortarget.HasAbility('mon_sprigan_base')
						)
						{						
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test_black');}
						} 
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Green) 
					{
						if (actortarget.HasAbility('mon_kikimore_base')
						|| actortarget.HasAbility('mon_black_spider_base')
						|| actortarget.HasAbility('mon_black_spider_ep2_base')
						)
						{						
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test_black');}
						} 
						else 
						{
							if (!thePlayer.IsEffectActive('covered_blood_green_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_green_ACS');}

							if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test_green', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test_green');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Yellow) 
					{
						if (actortarget.HasAbility('mon_archespor_base'))
						{
							if (!thePlayer.IsEffectActive('covered_blood_yellow_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_yellow_ACS');}

							if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test_yellow', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test_yellow');}
						} 
						else 
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test');}
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Black) 
					{
						if ( mc == MC_Vampire ) 
						{
							if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

							if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test');}
						}
						else if ( mc == MC_Magicals ) 
						{
							if (actortarget.HasAbility('mon_golem_base')
							|| actortarget.HasAbility('mon_djinn')
							|| actortarget.HasAbility('mon_gargoyle')
							)
							{
								if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

								if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test_black');}
							}
							else
							{
								if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

								if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test');}
							}
						}
						else
						{
							if (!thePlayer.IsEffectActive('covered_blood_black_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_black_ACS');}

							if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test_black', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test_black');}
						}
					}
					else
					{
						if (!thePlayer.IsEffectActive('covered_blood_red_ACS', false)){thePlayer.PlayEffectSingle('covered_blood_red_ACS');}

						if(!GetACSTransformationVampireMonster().IsEffectActive('blood_effect_claws_test', false)){GetACSTransformationVampireMonster().PlayEffectSingle('blood_effect_claws_test');}
					}

					RemoveTimer('ACS_RemoveCoveredBlood');
					AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
				}
			}
		}
	}

	public timer function TransformationVampireMonsterHeavyAttackDamageTrap(deltaTime : float , id : int)
	{
		if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flight_Mode'))
		{
			GetACSTransformationVampireMonster().DestroyEffect('lightning');
			GetACSTransformationVampireMonster().PlayEffectSingle('lightning');

			GetACSTransformationVampireMonster().DestroyEffect('start_effect');
			GetACSTransformationVampireMonster().PlayEffectSingle('start_effect');

			GetACSTransformationVampireMonster().DestroyEffect('wing_trail');
			GetACSTransformationVampireMonster().PlayEffectSingle('wing_trail');
			GetACSTransformationVampireMonster().StopEffect('wing_trail');

			GetACSTransformationVampireMonster().DestroyEffect('shadowdash_body_blood');
			GetACSTransformationVampireMonster().PlayEffectSingle('shadowdash_body_blood');
			GetACSTransformationVampireMonster().StopEffect('shadowdash_body_blood');
		}

		TransformationVampireMonsterHeavyAttackDamageTrapActual();
	}

	public timer function TransformationVampireMonsterHeavyAttackDamageBlast(deltaTime : float , id : int)
	{
		if (!GetACSTransformationVampireMonster().GetVisibility())
		{
			GetACSTransformationVampireMonster().SetVisibility(true);

			if (GetACSTransformationVampireMonster().HasTag('ACS_Transformation_Vampire_Monster_Blood_Armor'))
			{
				GetACSTransformationVampireMonster().DestroyEffect('shadowdash_end');
				GetACSTransformationVampireMonster().PlayEffectSingle('shadowdash_end');
			}
			else
			{
				GetACSTransformationVampireMonster().DestroyEffect('shadowdash_start');
				GetACSTransformationVampireMonster().PlayEffectSingle('shadowdash_start');
			}
		}

		TransformationVampireMonsterHeavyAttackDamageBlastActual();
	}

	public timer function TransformationVampireMonsterHeavyAttackDamageBlast_add1(deltaTime : float , id : int)
	{
		if (!GetACSTransformationVampireMonster().GetVisibility())
		{
			GetACSTransformationVampireMonster().SetVisibility(true);

			if (GetACSTransformationVampireMonster().HasTag('ACS_Transformation_Vampire_Monster_Blood_Armor'))
			{
				GetACSTransformationVampireMonster().DestroyEffect('shadowdash_end');
				GetACSTransformationVampireMonster().PlayEffectSingle('shadowdash_end');
			}
			else
			{
				GetACSTransformationVampireMonster().DestroyEffect('shadowdash_start');
				GetACSTransformationVampireMonster().PlayEffectSingle('shadowdash_start');
			}
		}

		TransformationVampireMonsterHeavyAttackDamageBlastActual();
	}

	public timer function TransformationVampireMonsterHeavyAttackDamage(deltaTime : float , id : int)
	{
		if (!GetACSTransformationVampireMonster().GetVisibility())
		{
			GetACSTransformationVampireMonster().SetVisibility(true);

			if (GetACSTransformationVampireMonster().HasTag('ACS_Transformation_Vampire_Monster_Blood_Armor'))
			{
				GetACSTransformationVampireMonster().DestroyEffect('shadowdash_end');
				GetACSTransformationVampireMonster().PlayEffectSingle('shadowdash_end');
			}
			else
			{
				GetACSTransformationVampireMonster().DestroyEffect('shadowdash_start');
				GetACSTransformationVampireMonster().PlayEffectSingle('shadowdash_start');
			}
		}

		TransformationVampireMonsterHeavyAttackDamageActual();
	}

	public timer function TransformationVampireMonsterHeavyAttackDamageMelee(deltaTime : float , id : int)
	{
		if (!GetACSTransformationVampireMonster().GetVisibility())
		{
			GetACSTransformationVampireMonster().SetVisibility(true);
		}

		TransformationVampireMonsterHeavyAttackDamageMeleeActual();
	}

	public timer function TransformationVampireMonsterHeavyAttackDamage_add1(deltaTime : float , id : int)
	{
		if (!GetACSTransformationVampireMonster().GetVisibility())
		{
			GetACSTransformationVampireMonster().SetVisibility(true);

			if (GetACSTransformationVampireMonster().HasTag('ACS_Transformation_Vampire_Monster_Blood_Armor'))
			{
				GetACSTransformationVampireMonster().DestroyEffect('shadowdash_end');
				GetACSTransformationVampireMonster().PlayEffectSingle('shadowdash_end');
			}
			else
			{
				GetACSTransformationVampireMonster().DestroyEffect('shadowdash_start');
				GetACSTransformationVampireMonster().PlayEffectSingle('shadowdash_start');
			}
		}

		TransformationVampireMonsterHeavyAttackDamageActual();
	}

	public timer function TransformationVampireMonsterHeavyAttackDamage_add2(deltaTime : float , id : int)
	{
		if (!GetACSTransformationVampireMonster().GetVisibility())
		{
			GetACSTransformationVampireMonster().SetVisibility(true);

			if (GetACSTransformationVampireMonster().HasTag('ACS_Transformation_Vampire_Monster_Blood_Armor'))
			{
				GetACSTransformationVampireMonster().DestroyEffect('shadowdash_end');
				GetACSTransformationVampireMonster().PlayEffectSingle('shadowdash_end');
			}
			else
			{
				GetACSTransformationVampireMonster().DestroyEffect('shadowdash_start');
				GetACSTransformationVampireMonster().PlayEffectSingle('shadowdash_start');
			}
		}

		TransformationVampireMonsterHeavyAttackDamageActual();
	}

	public timer function TransformationVampireMonsterHeavyAttackDamage_add3(deltaTime : float , id : int)
	{
		if (!GetACSTransformationVampireMonster().GetVisibility())
		{
			GetACSTransformationVampireMonster().SetVisibility(true);

			if (GetACSTransformationVampireMonster().HasTag('ACS_Transformation_Vampire_Monster_Blood_Armor'))
			{
				GetACSTransformationVampireMonster().DestroyEffect('shadowdash_end');
				GetACSTransformationVampireMonster().PlayEffectSingle('shadowdash_end');
			}
			else
			{
				GetACSTransformationVampireMonster().DestroyEffect('shadowdash_start');
				GetACSTransformationVampireMonster().PlayEffectSingle('shadowdash_start');
			}
		}
		
		TransformationVampireMonsterHeavyAttackDamageActual();
	}

	public timer function TransformationVampireMonsterHeavyAttackDamage_add4(deltaTime : float , id : int)
	{
		if (!GetACSTransformationVampireMonster().GetVisibility())
		{
			GetACSTransformationVampireMonster().SetVisibility(true);

			if (GetACSTransformationVampireMonster().HasTag('ACS_Transformation_Vampire_Monster_Blood_Armor'))
			{
				GetACSTransformationVampireMonster().DestroyEffect('shadowdash_end');
				GetACSTransformationVampireMonster().PlayEffectSingle('shadowdash_end');
			}
			else
			{
				GetACSTransformationVampireMonster().DestroyEffect('shadowdash_start');
				GetACSTransformationVampireMonster().PlayEffectSingle('shadowdash_start');
			}
		}

		TransformationVampireMonsterHeavyAttackDamageActual();
	}

	function TransformationVampireMonsterSpecialLightAttackDamageActual()
	{
		GetACSVampireMonsterSwarmProjDestroyAll();
		GetVampireMonsterClass().ACS_VampireMonsterBatProjectile_Engage();
	}

	public timer function TransformationVampireMonsterSpecialLightAttackDamage(deltaTime : float , id : int)
	{
		GetACSTransformationVampireMonster().DestroyEffect('swarm_light');

		GetACSTransformationVampireMonster().DestroyEffect('trap_light');

		GetACSTransformationVampireMonster().PlayEffectSingle('swarm_light');

		GetACSTransformationVampireMonster().PlayEffectSingle('trap_light');

		GetACSTransformationVampireMonsterSwarm1().BreakAttachment();

		GetACSTransformationVampireMonsterSwarm1().RemoveTag('ACS_Transformation_Vampire_Monster_Swarm_1');

		GetACSTransformationVampireMonsterSwarm2().BreakAttachment();

		GetACSTransformationVampireMonsterSwarm2().RemoveTag('ACS_Transformation_Vampire_Monster_Swarm_2');

		GetACSTransformationVampireMonsterSwarm3().BreakAttachment();

		GetACSTransformationVampireMonsterSwarm3().RemoveTag('ACS_Transformation_Vampire_Monster_Swarm_3');

		TransformationVampireMonsterSpecialLightAttackDamageActual();
	}

	function TransformationVampireMonsterAbductionActual()
	{
		var actortarget								: CActor;
		var params 									: SCustomEffectParams;
		var ent_1, ent_2, ent_3						: CEntity;

		actortarget = (CActor)(thePlayer.GetTarget());

		if( 
		actortarget.GetAttitude(thePlayer) == AIA_Hostile 
		&& actortarget.IsAlive() 
		&& VecDistanceSquared2D( thePlayer.GetWorldPosition(), actortarget.GetWorldPosition() ) <= 5 * 5 
		&& !actortarget.HasTag('ACS_Transformation_Vampire_Abduction_Victim')
		&& !actortarget.HasTag('ACS_Transformation_Vampire_Monster_Camera_Dummy')
		&& !actortarget.HasTag('ACS_Transformation_Vampire_Monster')
		&& !actortarget.HasTag('ACS_Tentacle_1')
		&& !actortarget.HasTag('ACS_Tentacle_2')
		&& !actortarget.HasTag('ACS_Tentacle_3')
		&& !actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
		&& !actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
		&& !actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
		&& !actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
		&& !actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
		&& !actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
		&& !actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar')
		&& !actortarget.HasTag('ACS_Chaos_Cloud')
		&& !actortarget.HasTag('smokeman')
		&& !actortarget.HasTag('acs_snow_entity')
		)
		{
			//RandRangeF(360,1)

			//actortarget.CreateAttachment( GetACSTransformationVampireMonsterCameraDummy(), 'fx_point', Vector( 0, -2, -4 ), EulerAngles(RandRangeF(45,-45),-90,RandRangeF(45,-45)) );

			actortarget.CreateAttachment( thePlayer, , Vector( 0, 2.5, -2.5 ), EulerAngles(RandRangeF(45,-45), RandRangeF(45,-45) ,RandRangeF(45,-45)) );
		
			GetACSTransformationVampireMonster().AddTag('ACS_Transformation_Vampire_Has_Abduction_Victim');
			
			actortarget.AddTag('ACS_Transformation_Vampire_Abduction_Victim');

			actortarget.AddEffectDefault( EET_Confusion, thePlayer, 'ACS_Abduction_Confusion' );

			ent_1 = theGame.CreateEntity( (CEntityTemplate)LoadResource( 

			"dlc\dlc_acs\data\entities\other\fx_dummy_entity.w2ent"
				
			, true ), actortarget.GetWorldPosition(), actortarget.GetWorldRotation() );

			ent_1.CreateAttachment( actortarget, , Vector( 0, 0, 0.5 ), GetACSTransformationVampireMonster().GetWorldRotation() );

			ent_1.PlayEffect('shadowdash_body_blood_construct');

			ent_1.PlayEffect('shadowdash_construct');

			ent_1.AddTag('ACS_Transformation_Vampire_Mosnter_Abduction_FX_1');


			/*
			ent_2 = theGame.CreateEntity( (CEntityTemplate)LoadResource( 

			"dlc\dlc_acs\data\entities\other\fx_dummy_entity.w2ent"
				
			, true ), actortarget.GetWorldPosition(), actortarget.GetWorldRotation() );

			ent_2.CreateAttachment( actortarget, , Vector( 0.5, 0, -0.5 ), GetACSTransformationVampireMonster().GetWorldRotation() );

			ent_2.PlayEffect('shadowdash_body_blood_construct');

			ent_2.PlayEffect('shadowdash_construct');

			ent_2.AddTag('ACS_Transformation_Vampire_Mosnter_Abduction_FX_2');



			ent_3 = theGame.CreateEntity( (CEntityTemplate)LoadResource( 

			"dlc\dlc_acs\data\entities\other\fx_dummy_entity.w2ent"
				
			, true ), actortarget.GetWorldPosition(), actortarget.GetWorldRotation() );

			ent_3.CreateAttachment( actortarget, , Vector( -0.5, 0, -0.5 ), GetACSTransformationVampireMonster().GetWorldRotation() );

			ent_3.PlayEffect('shadowdash_body_blood_construct');

			ent_3.PlayEffect('shadowdash_construct');

			ent_3.AddTag('ACS_Transformation_Vampire_Mosnter_Abduction_FX_3');
			*/

		}
	}

	public timer function TransformationVampireMonsterAbduction(deltaTime : float , id : int)
	{
		GetACSTransformationVampireMonster().DestroyEffect('start_effect');
		GetACSTransformationVampireMonster().PlayEffectSingle('start_effect');

		GetACSTransformationVampireMonster().DestroyEffect('wing_trail');
		GetACSTransformationVampireMonster().PlayEffectSingle('wing_trail');
		GetACSTransformationVampireMonster().StopEffect('wing_trail');

		GetACSTransformationVampireMonster().DestroyEffect('suck_out');
		GetACSTransformationVampireMonster().PlayEffectSingle('suck_out');
		GetACSTransformationVampireMonster().StopEffect('suck_out');

		TransformationVampireMonsterLightAttackDamageActual();
	}

	function TransformationVampireMonsterAbductionEnd()
	{
		GetACSTransformationVampireMonsterAbductionVictim().BreakAttachment();

		GetACSTransformationVampireMonsterAbductionVictimFX_1().PlayEffect('shadowdash_body_blood_construct');

		GetACSTransformationVampireMonsterAbductionVictimFX_1().StopEffect('shadowdash_construct');

		GetACSTransformationVampireMonsterAbductionVictimFX_1().DestroyAfter(3);

		GetACSTransformationVampireMonsterAbductionVictimFX_1().RemoveTag('ACS_Transformation_Vampire_Mosnter_Abduction_FX_1');

		GetACSTransformationVampireMonsterAbductionVictimFX_2().PlayEffect('shadowdash_body_blood_construct');

		GetACSTransformationVampireMonsterAbductionVictimFX_2().StopEffect('shadowdash_construct');

		GetACSTransformationVampireMonsterAbductionVictimFX_2().DestroyAfter(3);

		GetACSTransformationVampireMonsterAbductionVictimFX_2().RemoveTag('ACS_Transformation_Vampire_Mosnter_Abduction_FX_2');

		GetACSTransformationVampireMonsterAbductionVictimFX_3().PlayEffect('shadowdash_body_blood_construct');

		GetACSTransformationVampireMonsterAbductionVictimFX_3().StopEffect('shadowdash_construct');

		GetACSTransformationVampireMonsterAbductionVictimFX_3().DestroyAfter(3);

		GetACSTransformationVampireMonsterAbductionVictimFX_3().RemoveTag('ACS_Transformation_Vampire_Mosnter_Abduction_FX_3');

		GetACSTransformationVampireMonsterAbductionVictim().RemoveBuff(EET_Confusion, true, 'ACS_Transformation_Vampire_Mosnter_Abduction');

		GetACSTransformationVampireMonsterAbductionVictim().TeleportWithRotation(GetACSTransformationVampireMonsterAbductionVictim().GetWorldPosition(), EulerAngles(0, 0, 0));

		GetACSTransformationVampireMonsterAbductionVictim().RemoveTag('ACS_Transformation_Vampire_Abduction_Victim');

		GetACSTransformationVampireMonster().RemoveTag('ACS_Transformation_Vampire_Has_Abduction_Victim');
	}

	public timer function TransformationVampireMonsterAbductionAttempt2(deltaTime : float , id : int)
	{
		GetACSTransformationVampireMonster().DestroyEffect('start_effect');
		GetACSTransformationVampireMonster().PlayEffectSingle('start_effect');

		GetACSTransformationVampireMonster().DestroyEffect('wing_trail');
		GetACSTransformationVampireMonster().PlayEffectSingle('wing_trail');
		GetACSTransformationVampireMonster().StopEffect('wing_trail');

		if (!GetACSTransformationVampireMonster().HasTag('ACS_Transformation_Vampire_Has_Abduction_Victim'))
		{
			TransformationVampireMonsterAbductionActual();
		}
		else
		{
			TransformationVampireMonsterAbductionEnd();
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	private var transformation_vampire_monster_light_attack_index_1																				: int;
	default transformation_vampire_monster_light_attack_index_1 																				= -1;

	private var previous_transformation_vampire_monster_light_attack_index_1																	: int;
	default previous_transformation_vampire_monster_light_attack_index_1																		= -1;

	private var transformation_vampire_monster_light_attack_index_2																				: int;
	default transformation_vampire_monster_light_attack_index_2 																				= -1;

	private var previous_transformation_vampire_monster_light_attack_index_2																	: int;
	default previous_transformation_vampire_monster_light_attack_index_2																		= -1;

	private var transformation_vampire_monster_light_attack_index_3																				: int;
	default transformation_vampire_monster_light_attack_index_3 																				= -1;

	private var previous_transformation_vampire_monster_light_attack_index_3																	: int;
	default previous_transformation_vampire_monster_light_attack_index_3																		= -1;

	private var transformation_vampire_monster_dash_attack_index_1																				: int;
	default transformation_vampire_monster_dash_attack_index_1 																					= -1;

	private var previous_transformation_vampire_monster_dash_attack_index_1																		: int;
	default previous_transformation_vampire_monster_dash_attack_index_1																			= -1;

	private var transformation_vampire_monster_dash_attack_index_2																				: int;
	default transformation_vampire_monster_dash_attack_index_2 																					= -1;

	private var previous_transformation_vampire_monster_dash_attack_index_2																		: int;
	default previous_transformation_vampire_monster_dash_attack_index_2																			= -1;

	private var transformation_vampire_monster_attack_process																					: bool;

	default transformation_vampire_monster_attack_process 																						= false;

	private var transformation_vampire_monster_dive_process																						: bool;

	default transformation_vampire_monster_dive_process 																						= false;
	
	private var transformation_vampire_monster_swarm_process																						: bool;

	default transformation_vampire_monster_swarm_process 																						= false;

	function SetTransformationVampireMonsterAttackProcess( flag : bool )
	{
		transformation_vampire_monster_attack_process = flag;
	}

	function GetTransformationVampireMonsterAttackProcess() : bool 
	{
		return transformation_vampire_monster_attack_process;
	}
	
	timer function TransformationVampireMonsterAttackProcess_Restore(deltaTime : float , id : int)
	{
		SetTransformationVampireMonsterAttackProcess(false);
	}


	function SetTransformationVampireMonsterDiveProcess( flag : bool )
	{
		transformation_vampire_monster_dive_process = flag;
	}

	function GetTransformationVampireMonsterDiveProcess() : bool 
	{
		return transformation_vampire_monster_dive_process;
	}
	
	timer function TransformationVampireMonsterDiveProcess_Restore(deltaTime : float , id : int)
	{
		SetTransformationVampireMonsterDiveProcess(false);
	}

	function SetTransformationVampireMonsterSwarmProcess( flag : bool )
	{
		transformation_vampire_monster_swarm_process = flag;
	}

	function GetTransformationVampireMonsterSwarmProcess() : bool 
	{
		return transformation_vampire_monster_swarm_process;
	}
	
	timer function TransformationVampireMonsterSwarmProcess_Restore(deltaTime : float , id : int)
	{
		SetTransformationVampireMonsterSwarmProcess(false);

		RemoveTimer('TransformationVampireMonsterSwarmAdditionalEffects');
	}

	function ACS_Transformation_Vampire_Monster_Light_Attacks_Ground()
	{
		if (ACS_can_perform_transformation_light_attack())
		{
			ACS_refresh_transformation_light_attack_cooldown();

			ACSVampireMonsterRemoveMoveTimers();

			thePlayer.RemoveTag('ACS_Transformation_Vampire_Monster_Is_Moving');

			if (thePlayer.IsInCombat())
			{
				ACSTransformationVampireMonsterMovementAdjustRotateTowardsEnemy();
			}
			else
			{
				ACSTransformationVampireMonsterMovementAdjustForward();
			}

			if (theInput.GetActionValue('GI_AxisLeftY') == 0
			&& theInput.GetActionValue('GI_AxisLeftX') == 0
			)
			{
				if (theInput.GetActionValue('SwordSheathe') > 0.5 || theInput.GetActionValue('LockAndGuard') > 0.5 )
				{
					thePlayer.DrainVitality( thePlayer.GetStat( BCS_Vitality ) * 0.12 );

					transformation_vampire_monster_light_attack_index_3 = RandDifferent(this.previous_transformation_vampire_monster_light_attack_index_3 , 2);

					switch (transformation_vampire_monster_light_attack_index_3) 
					{	
						case 1:
						ACSTransformVampireMonsterPlayAnim( 'dettlaff_weak_attack_righthand', 0.25f, 0.325f);

						GetACSTransformationVampireMonster().DestroyEffect('dash_right');
						GetACSTransformationVampireMonster().PlayEffectSingle('dash_right');
						GetACSTransformationVampireMonster().StopEffect('dash_right');

						AddTimer('TransformationVampireMonsterHeavyAttackDamageMelee', 1.034914, false);
						break;

						default:
						ACSTransformVampireMonsterPlayAnim( 'dettlaff_weak_attack_lefthand', 0.25f, 0.325f);

						GetACSTransformationVampireMonster().DestroyEffect('dash_left');
						GetACSTransformationVampireMonster().PlayEffectSingle('dash_left');
						GetACSTransformationVampireMonster().StopEffect('dash_left');

						AddTimer('TransformationVampireMonsterHeavyAttackDamageMelee', 1.153984, false);
						break;
					}
			
					this.previous_transformation_vampire_monster_light_attack_index_3 = transformation_vampire_monster_light_attack_index_3;
				}
				else
				{
					transformation_vampire_monster_light_attack_index_1 = RandDifferent(this.previous_transformation_vampire_monster_light_attack_index_1 , 6);

					switch (transformation_vampire_monster_light_attack_index_1) 
					{	
						case 5:
						ACSTransformVampireMonsterPlayAnim( 'dettlaff_construct_attack_left_across', 0.25f, 0.325f);
						AddTimer('TransformationVampireMonsterLightAttackDamageLeft', 0.438091, false);
						break;

						case 4:
						ACSTransformVampireMonsterPlayAnim( 'dettlaff_construct_attack_right_across', 0.25f, 0.325f);
						AddTimer('TransformationVampireMonsterLightAttackDamageRight', 0.4252425, false);
						break;

						case 3:
						ACSTransformVampireMonsterPlayAnim( 'dettlaff_construct_attack_left_down', 0.25f, 0.325f);
						AddTimer('TransformationVampireMonsterLightAttackDamageLeft', 0.4330832, false);
						break;	
						
						case 2:
						ACSTransformVampireMonsterPlayAnim( 'dettlaff_construct_attack_right_down', 0.25f, 0.325f);
						AddTimer('TransformationVampireMonsterLightAttackDamageRight', 0.4594638, false);
						break;
						
						case 1:
						ACSTransformVampireMonsterPlayAnim( 'dettlaff_construct_attack_left_up', 0.25f, 0.325f);
						AddTimer('TransformationVampireMonsterLightAttackDamageLeft', 0.4311978, false);
						break;
						
						default:
						ACSTransformVampireMonsterPlayAnim( 'dettlaff_construct_attack_right_up', 0.25f, 0.325f);
						AddTimer('TransformationVampireMonsterLightAttackDamageRight', 0.4307282, false);
						break;
					}
			
					this.previous_transformation_vampire_monster_light_attack_index_1 = transformation_vampire_monster_light_attack_index_1;
				}
			}
			else
			{
				transformation_vampire_monster_light_attack_index_2 = RandDifferent(this.previous_transformation_vampire_monster_light_attack_index_2 , 4);

				switch (transformation_vampire_monster_light_attack_index_2) 
				{	
					case 3:
					ACSTransformVampireMonsterPlayAnim( 'dettlaff_construct_combo_attack_04', 0.25f, 0.325f);
					AddTimer('TransformationVampireMonsterLightAttackDamageLeft', 0.5465022, false);
					AddTimer('TransformationVampireMonsterLightAttackDamageRight', 1.364534, false);
					break;	
					
					case 2:
					ACSTransformVampireMonsterPlayAnim( 'dettlaff_construct_combo_attack_03', 0.25f, 0.325f);
					AddTimer('TransformationVampireMonsterLightAttackDamageLeft', 0.4215655, false);
					AddTimer('TransformationVampireMonsterLightAttackDamageRight', 0.8714923, false);
					AddTimer('TransformationVampireMonsterLightAttackDamageLeft_add1', 1.867513, false);
					break;
					
					case 1:
					ACSTransformVampireMonsterPlayAnim( 'dettlaff_construct_combo_attack_02', 0.25f, 0.325f);
					AddTimer('TransformationVampireMonsterLightAttackDamageLeft', 0.4359827, false);
					AddTimer('TransformationVampireMonsterLightAttackDamageRight', 0.9386005, false);
					AddTimer('TransformationVampireMonsterLightAttackDamageLeft_add1', 1.772946, false);
					break;
					
					default:
					ACSTransformVampireMonsterPlayAnim( 'dettlaff_construct_combo_attack_01', 0.25f, 0.325f);
					AddTimer('TransformationVampireMonsterLightAttackDamageLeft', 0.4625351, false);
					AddTimer('TransformationVampireMonsterLightAttackDamageRight', 0.9997081, false);
					AddTimer('TransformationVampireMonsterLightAttackDamageLeft_add1', 1.604525, false);
					break;
				}
		
				this.previous_transformation_vampire_monster_light_attack_index_2 = transformation_vampire_monster_light_attack_index_2;
			}

			ACS_StaminaDrainForced(5);
		}
	}

	function ACS_Transformation_Vampire_Monster_Light_Attacks_Air()
	{
		if(theInput.GetActionValue('Sprint'))
		{
			return;
		}

		if (GetTransformationVampireMonsterDiveProcess())
		{
			return;
		}

		if (ACS_can_perform_transformation_light_attack())
		{
			ACS_refresh_transformation_light_attack_cooldown();

			ACSVampireMonsterRemoveMoveTimers();

			RemoveTimer('TransformationVampireMonsterAttackProcess_Restore');

			SetTransformationVampireMonsterAttackProcess(true);

			thePlayer.RemoveTag('ACS_Transformation_Vampire_Monster_Is_Moving');

			GetACSTransformationVampireMonster().DestroyEffect('start_effect');
			GetACSTransformationVampireMonster().PlayEffectSingle('start_effect');

			GetACSTransformationVampireMonster().DestroyEffect('wing_trail');
			GetACSTransformationVampireMonster().PlayEffectSingle('wing_trail');
			GetACSTransformationVampireMonster().StopEffect('wing_trail');

			if (theInput.GetActionValue('SwordSheathe') > 0.5 || theInput.GetActionValue('LockAndGuard') > 0.5 )
			{
				thePlayer.DrainVitality( thePlayer.GetStat( BCS_Vitality ) * 0.12 );

				ACSTransformVampireMonsterPlayAnim( 'dettlaff_fly_trap_attack_ACS', 0.25f, 0.325f);

				AddTimer('TransformationVampireMonsterAttackProcess_Restore', 2.966667, false);

				AddTimer('TransformationVampireMonsterAbduction', 0.6922792, false);

				AddTimer('TransformationVampireMonsterAbductionAttempt2', 1.583373, false);

			}
			else
			{
				ACSTransformVampireMonsterPlayAnim( 'dettlaff_fly_attack_split_a_ACS', 0.25f, 0.325f);

				AddTimer('TransformationVampireMonsterAttackProcess_Restore', 3.366667, false);

				AddTimer('TransformationVampireMonsterLightAttackDamage', 1.990793, false);
				AddTimer('TransformationVampireMonsterLightAttackDamageLeft', 2.583373, false);
			}

			ACS_StaminaDrainForced(5);
		}
	}

	function ACS_Transformation_Vampire_Monster_Special_Light_Attack_Ground()
	{
		var ent                   : CEntity;

		if (ACS_can_perform_transformation_special_attack())
		{
			ACS_refresh_transformation_special_attack_cooldown();

			thePlayer.DrainVitality( thePlayer.GetStat( BCS_Vitality ) * 0.12 );

			ACSVampireMonsterRemoveMoveTimers();

			thePlayer.RemoveTag('ACS_Transformation_Vampire_Monster_Is_Moving');

			ACSTransformVampireMonsterPlayAnim( 'dettlaff_fly_phase2_start', 0.125f, 0.325f);

			GetACSWatcher().AddTimer('ACS_Transformation_Vampire_Monster_Delay_Cancel_Anim_Ground', 1, false);

			ent = theGame.CreateEntity( (CEntityTemplate)LoadResource( 

				"dlc\dlc_acs\data\fx\red_bruxa_scream_attack.w2ent"

			, true ), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );

			ent.AddTag('ACS_Transformation_Vampire_Monster_Scream');

			ent.CreateAttachment( GetACSTransformationVampireMonster(), , Vector( 0, 0.5, 0.5 ), EulerAngles(20,0,0) );

			ent.PlayEffectSingle('cone');

			//ent.StopEffect('cone');

			ent.PlayEffectSingle('fx_push');

			//ent.StopEffect('fx_push');

			ent.StopAllEffectsAfter(1);

			ent.DestroyAfter(2);

			AddTimer('TransformationVampireMonsterHeavyAttackDamageBlast', 0.1, false);

			ACS_StaminaDrainForced(5);
		}
	}

	timer function Vampire_Monster_Bat_Swarm_Restore(deltaTime : float , id : int)
	{
		AddTimer('Vampire_Monster_Bat_Swarm', 0.5, true);

		//GetWitcherPlayer().SoundEvent("q704_bats");
		//GetWitcherPlayer().SoundEvent("q704_bats");
	}

	timer function TransformationVampireMonsterSwarmAdditionalEffects(deltaTime : float , id : int)
	{
		if (GetTransformationVampireMonsterSwarmProcess())
		{
			GetACSTransformationVampireMonster().StopEffect('swarm_gathers');
			GetACSTransformationVampireMonster().PlayEffectSingle('swarm_gathers');
		}
	}

	function ACS_Transformation_Vampire_Monster_Special_Light_Attack_Air()
	{
		var swarmattackent_1, swarmattackent_2, swarmattackent_3																: CEntity;

		if(theInput.GetActionValue('Sprint'))
		{
			return;
		}

		if (GetTransformationVampireMonsterDiveProcess())
		{
			return;
		}

		if (ACS_can_perform_transformation_special_attack())
		{
			ACS_refresh_transformation_special_attack_cooldown();

			thePlayer.DrainVitality( thePlayer.GetStat( BCS_Vitality ) * 0.12 );

			ACSVampireMonsterRemoveMoveTimers();

			RemoveTimer('TransformationVampireMonsterAttackProcess_Restore');

			RemoveTimer('TransformationVampireMonsterSwarmProcess_Restore');

			SetTransformationVampireMonsterAttackProcess(true);

			SetTransformationVampireMonsterSwarmProcess(true);

			GetACSTransformationVampireMonster().DestroyEffect('swarm_light');

			GetACSTransformationVampireMonster().DestroyEffect('trap_light');

			GetACSTransformationVampireMonster().PlayEffectSingle('swarm_light');

			GetACSTransformationVampireMonster().PlayEffectSingle('trap_light');

			RemoveTimer('Vampire_Monster_Bat_Swarm');

			RemoveTimer('Vampire_Monster_Bats_Gatling');

			//GetWitcherPlayer().SoundEvent("q704_bats_stop");
			//GetWitcherPlayer().SoundEvent("q704_bats_stop");

			AddTimer('TransformationVampireMonsterSwarmAdditionalEffects', 1, true);

			AddTimer('Vampire_Monster_Bat_Swarm_Restore', 6.366666, false);

			AddTimer('TransformationVampireMonsterAttackProcess_Restore', 6.366666, false);

			AddTimer('TransformationVampireMonsterSwarmProcess_Restore', 4.5, false);

			thePlayer.RemoveTag('ACS_Transformation_Vampire_Monster_Is_Moving');

			ACSTransformVampireMonsterPlayAnim( 'dettlaff_fly_swarm_attack_ACS', 0.125f, 0.325f);

			swarmattackent_1 = theGame.CreateEntity( (CEntityTemplate)LoadResource( 
			"dlc\bob\data\fx\monsters\dettlaff\dettlaff_swarm_attack.w2ent"
			, true ), GetACSTransformationVampireMonster().GetWorldPosition(), GetACSTransformationVampireMonster().GetWorldRotation() );
		
			swarmattackent_1.CreateAttachment( GetACSTransformationVampireMonster(), , Vector( 0, 0, 0 ), EulerAngles(-10,0,0) );

			swarmattackent_1.PlayEffectSingle('swarm_attack');

			swarmattackent_1.DestroyAfter(15);

			swarmattackent_1.AddTag('ACS_Transformation_Vampire_Monster_Swarm_1');

			swarmattackent_2 = theGame.CreateEntity( (CEntityTemplate)LoadResource( 
				"dlc\bob\data\fx\monsters\dettlaff\dettlaff_swarm_attack.w2ent"
				, true ), GetACSTransformationVampireMonster().GetWorldPosition(), GetACSTransformationVampireMonster().GetWorldRotation() );
			
			swarmattackent_2.CreateAttachment( GetACSTransformationVampireMonster(), , Vector( 9, 0, 0 ), EulerAngles(-10,45,0) );

			swarmattackent_2.PlayEffectSingle('swarm_attack');

			swarmattackent_2.DestroyAfter(15);

			swarmattackent_2.AddTag('ACS_Transformation_Vampire_Monster_Swarm_2');

			swarmattackent_3 = theGame.CreateEntity( (CEntityTemplate)LoadResource( 
				"dlc\bob\data\fx\monsters\dettlaff\dettlaff_swarm_attack.w2ent"
				, true ), GetACSTransformationVampireMonster().GetWorldPosition(), GetACSTransformationVampireMonster().GetWorldRotation() );
			
			swarmattackent_3.CreateAttachment( GetACSTransformationVampireMonster(), , Vector( -9, 0, 0 ), EulerAngles(-10,-45,0) );

			swarmattackent_3.PlayEffectSingle('swarm_attack');

			swarmattackent_3.DestroyAfter(15);

			swarmattackent_3.AddTag('ACS_Transformation_Vampire_Monster_Swarm_3');

			AddTimer('TransformationVampireMonsterSpecialLightAttackDamage', 4.5, false);

			ACS_StaminaDrainForced(5);
		}
	}

	timer function TransformationVampireMonsterSpecialLightAttackGatlingDelay(deltaTime : float , id : int)
	{
		GetACSTransformationVampireMonster().DestroyEffect('swarm_gathers');

		GetACSTransformationVampireMonster().DestroyEffect('swarm_light');

		GetACSTransformationVampireMonster().DestroyEffect('trap_light');

		GetACSTransformationVampireMonster().PlayEffectSingle('swarm_gathers');

		GetACSTransformationVampireMonster().PlayEffectSingle('swarm_light');

		GetACSTransformationVampireMonster().PlayEffectSingle('trap_light');

		RemoveTimer('Vampire_Monster_Bats_Gatling');

		GetWitcherPlayer().SoundEvent("q704_bats");

		AddTimer('Vampire_Monster_Bats_Gatling', 0.3, true);
	}
	
	function ACS_Transformation_Vampire_Monster_Special_Light_Attack_Air_Gatling()
	{
		if(theInput.GetActionValue('Sprint'))
		{
			return;
		}

		if (GetTransformationVampireMonsterDiveProcess())
		{
			return;
		}

		if (ACS_can_perform_transformation_special_attack())
		{
			ACS_refresh_transformation_special_attack_cooldown();

			ACSVampireMonsterRemoveMoveTimers();

			RemoveTimer('TransformationVampireMonsterAttackProcess_Restore');

			SetTransformationVampireMonsterAttackProcess(true);

			GetACSTransformationVampireMonster().DestroyEffect('swarm_gathers');

			GetACSTransformationVampireMonster().DestroyEffect('swarm_light');

			GetACSTransformationVampireMonster().DestroyEffect('trap_light');

			GetACSTransformationVampireMonster().PlayEffectSingle('swarm_gathers');

			GetACSTransformationVampireMonster().PlayEffectSingle('swarm_light');

			GetACSTransformationVampireMonster().PlayEffectSingle('trap_light');

			RemoveTimer('Vampire_Monster_Bats_Gatling');

			AddTimer('TransformationVampireMonsterAttackProcess_Restore', 6.366666, false);

			thePlayer.RemoveTag('ACS_Transformation_Vampire_Monster_Is_Moving');

			ACSTransformVampireMonsterPlayAnim( 'dettlaff_fly_swarm_attack_ACS', 0.125f, 0.325f);

			AddTimer('TransformationVampireMonsterSpecialLightAttackGatlingDelay', 4.5, false);

			ACS_StaminaDrainForced(5);
		}
	}

	function ACS_Transformation_Vampire_Monster_Heavy_Attacks_Ground()
	{
		var targetDistance																						: float;

		targetDistance = VecDistanceSquared2D( GetACSTransformationVampireMonster().GetWorldPosition(), ((CActor)(thePlayer.GetTarget())).GetWorldPosition() );

		if (ACS_can_perform_transformation_heavy_attack())
		{
			ACS_refresh_transformation_heavy_attack_cooldown();

			thePlayer.DrainVitality( thePlayer.GetStat( BCS_Vitality ) * 0.12 );

			ACSVampireMonsterRemoveMoveTimers();

			RemoveTimer('TransformationVampireMonsterHeavyAttackDamage');

			thePlayer.RemoveTag('ACS_Transformation_Vampire_Monster_Is_Moving');

			if (thePlayer.IsInCombat())
			{
				ACSTransformationVampireMonsterMovementAdjustRotateTowardsEnemy();
			}
			else
			{
				ACSTransformationVampireMonsterMovementAdjustForward();
			}

			GetACSTransformationVampireMonster().DestroyEffect('trap_attack_smoke');
			GetACSTransformationVampireMonster().PlayEffectSingle('trap_attack_smoke');

			GetACSTransformationVampireMonsterCameraDummy().DestroyEffect('shadowdash_construct');
			GetACSTransformationVampireMonsterCameraDummy().PlayEffectSingle('shadowdash_construct');

			GetACSTransformationVampireMonster().SetVisibility(false);

			GetACSWatcher().RemoveTimer('Vampire_Monster_Reveal_Delay');

			thePlayer.SoundEvent("monster_dettlaff_monster_construct_whoosh_claws_large");

			thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");

			if (targetDistance < 10 * 10)
			{
				GetACSWatcher().AddTimer('Vampire_Monster_Reveal_Delay', 0.5, false);

				transformation_vampire_monster_dash_attack_index_1 = RandDifferent(this.previous_transformation_vampire_monster_dash_attack_index_1 , 7);

				switch (transformation_vampire_monster_dash_attack_index_1) 
				{
					case 6:
					ACSTransformVampireMonsterPlayAnim( 'dettlaff_construct_dash_close_short_ACS', 0.25f, 0.325f);
					AddTimer('TransformationVampireMonsterSpecialAttackSlide', 0.125, false);
					AddTimer('TransformationVampireMonsterHeavyAttackDamage', 0.5250833, false);
					break;

					case 5:
					ACSTransformVampireMonsterPlayAnim( 'dettlaff_construct_dash_close_short_ACS', 0.25f, 0.325f);
					AddTimer('TransformationVampireMonsterSpecialAttackSlide', 0.125, false);
					AddTimer('TransformationVampireMonsterHeavyAttackDamage', 0.5250833, false);
					break;

					case 4:
					ACSTransformVampireMonsterPlayAnim( 'dettlaff_construct_dash_close_uppercut_short_ACS', 0.25f, 0.325f);
					AddTimer('TransformationVampireMonsterSpecialAttackSlide', 0.125, false);
					AddTimer('TransformationVampireMonsterHeavyAttackDamage', 0.4352688, false);
					break;

					case 3:
					ACSTransformVampireMonsterPlayAnim( 'dettlaff_construct_dash_medium_short_ACS', 0.25f, 0.325f);
					AddTimer('TransformationVampireMonsterSpecialAttackSlide', 0.125, false);
					AddTimer('TransformationVampireMonsterHeavyAttackDamage', 0.4401732, false);
					break;

					case 2:
					ACSTransformVampireMonsterPlayAnim( 'dettlaff_construct_dash_long_short_ACS', 0.25f, 0.325f);
					AddTimer('TransformationVampireMonsterSpecialAttackSlide', 0.125, false);
					AddTimer('TransformationVampireMonsterHeavyAttackDamage', 0.465683, false);
					break;

					case 1:
					ACSTransformVampireMonsterPlayAnim( 'dettlaff_construct_dash_close_ACS', 0.25f, 0.325f);
					AddTimer('TransformationVampireMonsterSpecialAttackSlide', 0.125, false);
					AddTimer('TransformationVampireMonsterHeavyAttackDamage', 0.4081833, false);
					break;
					
					default:
					ACSTransformVampireMonsterPlayAnim( 'dettlaff_construct_dash_close_uppercut_ACS', 0.25f, 0.325f);
					AddTimer('TransformationVampireMonsterSpecialAttackSlide', 0.125, false);
					AddTimer('TransformationVampireMonsterHeavyAttackDamage', 0.2904581, false);
					break;
				}
		
				this.previous_transformation_vampire_monster_dash_attack_index_1 = transformation_vampire_monster_dash_attack_index_1;
			}
			else if (targetDistance >= 10 * 10)
			{
				GetACSWatcher().AddTimer('Vampire_Monster_Reveal_Delay', 0.75, false);

				transformation_vampire_monster_dash_attack_index_2 = RandDifferent(this.previous_transformation_vampire_monster_dash_attack_index_2 , 2);	

				switch (transformation_vampire_monster_dash_attack_index_2) 
				{
					case 1:
					ACSTransformVampireMonsterPlayAnim( 'dettlaff_construct_dash_medium_ACS', 0.25f, 0.325f);
					AddTimer('TransformationVampireMonsterSpecialAttackSlide', 0.125, false);
					AddTimer('TransformationVampireMonsterHeavyAttackDamage', 1.522741, false);
					break;

					default:
					ACSTransformVampireMonsterPlayAnim( 'dettlaff_construct_dash_long_ACS', 0.25f, 0.325f);
					AddTimer('TransformationVampireMonsterSpecialAttackSlide', 0.125, false);
					AddTimer('TransformationVampireMonsterHeavyAttackDamage', 1.559151, false);
					break;
				}
		
				this.previous_transformation_vampire_monster_dash_attack_index_2 = transformation_vampire_monster_dash_attack_index_2;
			}

			ACS_StaminaDrainForced(5);
		}
	}

	public timer function TransformationVampireMonsterSpecialAttackSlide(deltaTime : float , id : int)
	{
		ACSTransformationVampireMonsterMovementAdjustRotateTowardsEnemyAndSlide();
	}
	
	function ACSTransformationVampireMonsterMovementAdjustRotateTowardsEnemyAndSlide()
	{
		var distTransformationVampireMonsterJump							: float;

		movementAdjustorVampireMonster = GetACSTransformationVampireMonster().GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampireMonster = movementAdjustorVampireMonster.GetRequest( 'ACS_Transformation_TransformationVampireMonster_Rotate');
		movementAdjustorVampireMonster.CancelByName( 'ACS_Transformation_TransformationVampireMonster_Rotate' );
		movementAdjustorVampireMonster.CancelAll();

		ticketVampireMonster = movementAdjustorVampireMonster.CreateNewRequest( 'ACS_Transformation_TransformationVampireMonster_Rotate' );
		movementAdjustorVampireMonster.AdjustmentDuration( ticketVampireMonster, 0.25 );
		movementAdjustorVampireMonster.MaxRotationAdjustmentSpeed( ticketVampireMonster, 500000 );
		movementAdjustorVampireMonster.AdjustLocationVertically( ticketVampireMonster, true );
		movementAdjustorVampireMonster.ScaleAnimationLocationVertically( ticketVampireMonster, true );

		if (thePlayer.IsInCombat())
		{
			if (thePlayer.GetTarget())
			{
				movementAdjustorVampireMonster.RotateTowards( ticketVampireMonster, ((CActor)(thePlayer.GetTarget())) );

				distTransformationVampireMonsterJump = (((CMovingPhysicalAgentComponent)((CActor)(thePlayer.GetTarget())).GetMovingAgentComponent()).GetCapsuleRadius() 
				+ ((CMovingPhysicalAgentComponent)GetACSTransformationVampireMonster().GetMovingAgentComponent()).GetCapsuleRadius());

				movementAdjustorVampireMonster.RotateTowards( ticketVampireMonster, ((CActor)(thePlayer.GetTarget())) );

				movementAdjustorVampireMonster.SlideTowards( ticketVampireMonster, ((CActor)(thePlayer.GetTarget())), distTransformationVampireMonsterJump, distTransformationVampireMonsterJump );
			}
			else
			{
				movementAdjustorVampireMonster.RotateTo( ticketVampireMonster, VecHeading( theCamera.GetCameraDirection() ) );
			}
		}
		else
		{
			movementAdjustorVampireMonster.RotateTo( ticketVampireMonster, VecHeading( theCamera.GetCameraDirection() ) );
		}
	}

	function ACS_Transformation_Vampire_Monster_Heavy_Attack_Air()
	{
		var vampRot, adjustedRot 		: EulerAngles;

		if(theInput.GetActionValue('Sprint'))
		{
			return;
		}

		if (GetTransformationVampireMonsterDiveProcess())
		{
			return;
		}

		if (theInput.GetActionValue('SwordSheathe') > 0.5 || theInput.GetActionValue('LockAndGuard') > 0.5 )
		{
			if (!GetACSTransformationVampireMonster().IsOnGround())
			{
				return;
			}

			if (ACS_can_perform_transformation_heavy_attack())
			{
				ACS_refresh_transformation_heavy_attack_cooldown();

				thePlayer.DrainVitality( thePlayer.GetStat( BCS_Vitality ) * 0.12 );

				ACSVampireMonsterRemoveMoveTimers();

				SetTransformationVampireMonsterAttackProcess(true);

				vampRot = GetACSTransformationVampireMonster().GetWorldRotation();

				adjustedRot = EulerAngles(0,0,0);

				adjustedRot.Yaw = vampRot.Yaw;

				thePlayer.RemoveTag('ACS_Transformation_Vampire_Monster_Is_Moving');

				GetACSTransformationVampireMonster().DestroyEffect('start_effect');
				GetACSTransformationVampireMonster().PlayEffectSingle('start_effect');

				GetACSTransformationVampireMonster().DestroyEffect('wing_trail');
				GetACSTransformationVampireMonster().PlayEffectSingle('wing_trail');
				GetACSTransformationVampireMonster().StopEffect('wing_trail');

				GetACSTransformationVampireMonster().DestroyEffect('dive_smoke');
				GetACSTransformationVampireMonster().PlayEffectSingle('dive_smoke');
				GetACSTransformationVampireMonster().StopEffect('dive_smoke');

				SetTransformationVampireMonsterDiveProcess(true);

				if (transformationCamera.cameraRot.Roll>=0)
				{
					transformationCamera.cameraRot.Roll = 0;
				}
				else if (transformationCamera.cameraRot.Roll<=0)
				{
					transformationCamera.cameraRot.Roll = 0;
				}

				TransformationVampireMonsterAbductionEnd();

				GetACSTransformationVampireMonster().TeleportWithRotation(ACSFixZAxis(GetACSTransformationVampireMonster().GetWorldPosition()), adjustedRot);

				ACSTransformVampireMonsterPlayAnim( 'dettlaff_diving', 0.25f, 0.325f);

				AddTimer('TransformationVampireMonsterAttackProcess_Restore', 6.733333, false);

				AddTimer('TransformationVampireMonsterDiveProcess_Restore', 6.733333, false);

				AddTimer('TransformationVampireMonsterHeavyAttackDamageTrap', 0.8386028, false);

				AddTimer('TransformationVampireMonsterHeavyAttackDamageBlast', 0.8386028, false);

				AddTimer('TransformationVampireMonsterHeavyAttackDamageBlast_add1', 5.344299, false);
			}
		}
		else
		{
			if (ACS_can_perform_transformation_heavy_attack())
			{
				ACS_refresh_transformation_heavy_attack_cooldown();

				ACSVampireMonsterRemoveMoveTimers();

				SetTransformationVampireMonsterAttackProcess(true);

				vampRot = GetACSTransformationVampireMonster().GetWorldRotation();

				adjustedRot = EulerAngles(0,0,0);

				adjustedRot.Yaw = vampRot.Yaw;

				thePlayer.RemoveTag('ACS_Transformation_Vampire_Monster_Is_Moving');

				GetACSTransformationVampireMonster().DestroyEffect('start_effect');
				GetACSTransformationVampireMonster().PlayEffectSingle('start_effect');

				GetACSTransformationVampireMonster().DestroyEffect('wing_trail');
				GetACSTransformationVampireMonster().PlayEffectSingle('wing_trail');
				GetACSTransformationVampireMonster().StopEffect('wing_trail');

				GetACSTransformationVampireMonster().DestroyEffect('shadowdash_body_blood');
				GetACSTransformationVampireMonster().PlayEffectSingle('shadowdash_body_blood');
				GetACSTransformationVampireMonster().StopEffect('shadowdash_body_blood');

				AddTimer('TransformationVampireMonsterAttackProcess_Restore', 2.966667, false);

				ACSTransformVampireMonsterPlayAnim( 'dettlaff_fly_trap_attack_ACS', 0.25f, 0.325f);

				AddTimer('TransformationVampireMonsterHeavyAttackDamageTrap', 0.6922792, false);

				AddTimer('TransformationVampireMonsterLightAttackDamageLeft', 1.583373, false);
			}
		}

		ACS_StaminaDrainForced(5);
	}

	function ACS_Transformation_Vampire_Monster_Teleport_Dodge()
	{
		var evadeTargetPos, victimPos 	: Vector;
		var dist 						: float;
		var evadeTarget					: CActor;

		if(ACS_can_transformation_dodge())
		{
			ACS_refresh_transformation_dodge_cooldown();

			thePlayer.DrainVitality( thePlayer.GetStat( BCS_Vitality ) * 0.12 );

			thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_large");

			thePlayer.SoundEvent("monster_dettlaff_monster_movement_whoosh_large");

			thePlayer.SoundEvent("monster_dettlaff_monster_construct_whoosh_claws_large");

			thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");

			GetACSTransformationVampireMonster().DestroyEffect('shadowdash_body_blood');
			GetACSTransformationVampireMonster().PlayEffectSingle('shadowdash_body_blood');

			GetACSTransformationVampireMonster().SetVisibility(false);

			if ( thePlayer.IsHardLockEnabled() )
			{
				evadeTarget = (CActor)( thePlayer.GetDisplayTarget() );
			}
			else
			{
				evadeTarget = thePlayer.moveTarget;		
			}

			dist = (((CMovingPhysicalAgentComponent)actor.GetMovingAgentComponent()).GetCapsuleRadius() 
			+ ((CMovingPhysicalAgentComponent)thePlayer.GetMovingAgentComponent()).GetCapsuleRadius()) * 1.25;

			evadeTargetPos = evadeTarget.GetWorldPosition();

			thePlayer.SoundEvent("magic_geralt_ghost_possession");

			movementAdjustorVampireMonster = GetACSTransformationVampireMonster().GetMovingAgentComponent().GetMovementAdjustor();

			ticketVampireMonster = movementAdjustorVampireMonster.GetRequest( 'ACS_Transformation_Vampire_Monster_Rotate');
			movementAdjustorVampireMonster.CancelByName( 'ACS_Transformation_Vampire_Monster_Rotate' );
			movementAdjustorVampireMonster.CancelAll();

			ticketVampireMonster = movementAdjustorVampireMonster.CreateNewRequest( 'ACS_Transformation_Vampire_Monster_Rotate' );
			movementAdjustorVampireMonster.MaxRotationAdjustmentSpeed( ticketVampireMonster, 500000 );
			movementAdjustorVampireMonster.AdjustLocationVertically( ticketVampireMonster, true );
			movementAdjustorVampireMonster.ScaleAnimationLocationVertically( ticketVampireMonster, true );

			victimPos = evadeTargetPos + VecFromHeading( AngleNormalize180( thePlayer.GetHeading() - dist ) ) * 7;

			if( !theGame.GetWorld().NavigationFindSafeSpot( victimPos, 0.3, 0.3 , newVictimPos) )
			{
				theGame.GetWorld().NavigationFindSafeSpot( victimPos, 0.3, 10 , newVictimPos );

				victimPos = newVictimPos;
			}

			movementAdjustorVampireMonster.AdjustmentDuration( ticket, 0.06125 );
				
			movementAdjustorVampireMonster.RotateTowards( ticketVampireMonster, evadeTarget );

			victimPos.Z += 10;

			movementAdjustorVampireMonster.SlideTo( ticketVampireMonster, victimPos );

			RemoveTimer('Vampire_Monster_Teleport_Position_Adjust');
			AddTimer('Vampire_Monster_Teleport_Position_Adjust', 0.125, false);

			RemoveTimer('Vampire_Monster_Visibility_Restore');
			AddTimer('Vampire_Monster_Visibility_Restore', 0.5, false);
		}
	}

	public timer function Vampire_Monster_Teleport_Position_Adjust ( dt : float, id : int) 
	{
		ACSTransformationVampireMonsterMovementAdjustSlideToGround();
	}

	function ACSTransformationVampireMonsterMovementAdjustSlideToGround()
	{
		var targetactor 									: CActor;

		movementAdjustorVampireMonster = GetACSTransformationVampireMonster().GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampireMonster = movementAdjustorVampireMonster.GetRequest( 'ACS_Transformation_Vampire_Monster_Rotate');
		movementAdjustorVampireMonster.CancelByName( 'ACS_Transformation_Vampire_Monster_Rotate' );
		movementAdjustorVampireMonster.CancelAll();

		ticketVampireMonster = movementAdjustorVampireMonster.CreateNewRequest( 'ACS_Transformation_Vampire_Monster_Rotate' );
		movementAdjustorVampireMonster.AdjustmentDuration( ticketVampireMonster, 0.00001 );
		movementAdjustorVampireMonster.MaxRotationAdjustmentSpeed( ticketVampireMonster, 500000 );

		if ( thePlayer.IsHardLockEnabled() && thePlayer.GetTarget() )
		{
			targetactor = (CActor)( thePlayer.GetDisplayTarget() );	
		}
		else
		{
			thePlayer.FindMoveTarget();
			targetactor = (CActor)( thePlayer.moveTarget );		
		}

		if (targetactor)
		{
			movementAdjustorVampireMonster.RotateTowards( ticketVampireMonster, targetactor );
		}
		else
		{
			movementAdjustorVampireMonster.RotateTo( ticketVampireMonster, VecHeading( theCamera.GetCameraDirection() ) );
		}

		movementAdjustorVampireMonster.SlideTo( ticketVampireMonster, ( ACSPlayerFixZAxis(GetACSTransformationVampireMonster().GetWorldPosition() + GetACSTransformationVampireMonster().GetWorldForward()) ));
	}

	public timer function Vampire_Monster_Visibility_Restore ( dt : float, id : int) 
	{ 
		if (!GetACSTransformationVampireMonster().GetVisibility())
		{
			GetACSTransformationVampireMonster().SetVisibility(true);
		}

		GetACSTransformationVampireMonster().DestroyEffect('shadowdash_body_blood');
		GetACSTransformationVampireMonster().PlayEffectSingle('shadowdash_body_blood');

		thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_large");

		thePlayer.SoundEvent("monster_dettlaff_monster_movement_whoosh_large");

		thePlayer.SoundEvent("monster_dettlaff_monster_construct_whoosh_claws_large");

		if (!GetACSTransformationVampireMonster().HasTag('ACS_Transformation_Vampire_Monster_Blood_Armor'))
		{
			GetACSTransformationVampireMonster().DestroyEffect('body_blood_drip');
			GetACSTransformationVampireMonster().PlayEffectSingle('body_blood_drip');
			GetACSTransformationVampireMonster().StopEffect('body_blood_drip');

			GetACSTransformationVampireMonster().DestroyEffect('start_effect');
			GetACSTransformationVampireMonster().PlayEffectSingle('start_effect');

			GetACSTransformationVampireMonster().DestroyEffect('comming_out');
			GetACSTransformationVampireMonster().PlayEffectSingle('comming_out');
			GetACSTransformationVampireMonster().StopEffect('comming_out');

			GetACSTransformationVampireMonster().DestroyEffect('shadowdash_start');
			GetACSTransformationVampireMonster().PlayEffectSingle('shadowdash_start');
		}
		else
		{
			GetACSTransformationVampireMonster().DestroyEffect('body_blood_drip');
			GetACSTransformationVampireMonster().PlayEffectSingle('body_blood_drip');
			GetACSTransformationVampireMonster().StopEffect('body_blood_drip');

			GetACSTransformationVampireMonster().DestroyEffect('start_effect');
			GetACSTransformationVampireMonster().PlayEffectSingle('start_effect');

			GetACSTransformationVampireMonster().DestroyEffect('comming_out');
			GetACSTransformationVampireMonster().PlayEffectSingle('comming_out');
			GetACSTransformationVampireMonster().StopEffect('comming_out');
		}

		AddTimer('VampiressRepelDamage', 0.125, false);
	} 

	public timer function ACS_Transformation_Vampire_Monster_Delay_Cancel_Anim ( dt : float, id : int) 
	{
		GetACSTransformationVampireMonster().DestroyEffect('start_effect');
		GetACSTransformationVampireMonster().PlayEffectSingle('start_effect');

		GetACSTransformationVampireMonster().DestroyEffect('recovery_slow');
		GetACSTransformationVampireMonster().PlayEffectSingle('recovery_slow');

		ACSTransformVampireMonsterPlayAnim('dettlaff_construct_resurrection_ACS', 0.5f, 0.5f);
	}

	public timer function ACS_Transformation_Vampire_Monster_Delay_Cancel_Anim_Ground ( dt : float, id : int) 
	{
		GetACSTransformationVampireMonster().DestroyEffect('start_effect');
		GetACSTransformationVampireMonster().PlayEffectSingle('start_effect');

		ACSTransformVampireMonsterPlayAnim('dettlaff_construct_resurrection_ACS', 0.5f, 0.5f);
	}

	public timer function ACS_Transformation_Vampire_Monster_Delay_Flight_Controls ( dt : float, id : int) 
	{ 
		GetACSTransformationVampireMonster().AddTag('ACS_Transformation_Vampire_Monster_Flight_Controls_Active');
	}

	public timer function DisableTransformationVampireMonsterStart(deltaTime : float , id : int)
	{
		DisableTransformationVampireMonster_Actual();
	}

	function ACSVampireMonsterRemoveMoveTimers()
	{
		GetACSTransformationVampireMonsterScreamEnt().StopAllEffects();

		GetACSTransformationVampireMonsterScreamEnt().RemoveTag('ACS_Transformation_Vampire_Monster_Scream');

		GetACSTransformationVampireMonster().DestroyEffect('disappear_');

		GetACSTransformationVampireMonster().DestroyEffect('recovery_slow');

		GetACSTransformationVampireMonster().RemoveTag('ACS_Transformation_Vampire_Monster_Camo_Active');

		GetACSTransformationVampireMonster().EnableCharacterCollisions(true);

		if (!GetACSTransformationVampireMonster().GetVisibility())
		{
			GetACSTransformationVampireMonster().SetVisibility(true);
		}

		GetACSTransformationVampireMonsterSwarm1().Destroy();

		GetACSTransformationVampireMonsterSwarm2().Destroy();

		GetACSTransformationVampireMonsterSwarm3().Destroy();

		RemoveTimer('ACS_Transformation_Vampire_Monster_Delay_Cancel_Anim');

		RemoveTimer('ACS_Transformation_Vampire_Monster_Delay_Cancel_Anim_Ground');

		RemoveTimer('TransformationVampireMonsterLDashEnd');

		RemoveTimer('TransformationVampireMonsterRDashEnd');

		RemoveTimer('VampireMonsterReturnCollision');

		RemoveTimer('TransformationVampireMonsterLightAttackDamage');

		RemoveTimer('TransformationVampireMonsterLightAttackDamageLeft');

		RemoveTimer('TransformationVampireMonsterLightAttackDamageRight');

		RemoveTimer('TransformationVampireMonsterLightAttackDamageLeft_add1');

		RemoveTimer('TransformationVampireMonsterLightAttackDamageLeft_add2');

		RemoveTimer('TransformationVampireMonsterLightAttackDamageLeft_add3');

		RemoveTimer('TransformationVampireMonsterLightAttackDamageLeft_add4');

		RemoveTimer('TransformationVampireMonsterLightAttackDamageRight_add1');

		RemoveTimer('TransformationVampireMonsterLightAttackDamageRight_add2');

		RemoveTimer('TransformationVampireMonsterLightAttackDamageRight_add3');

		RemoveTimer('TransformationVampireMonsterLightAttackDamageRight_add4');

		RemoveTimer('TransformationVampireMonsterSpecialAttackSlide');

		RemoveTimer('TransformationVampireMonsterSpecialLightAttackDamage');

		RemoveTimer('TransformationVampireMonsterSpecialLightAttackGatlingDelay');

		RemoveTimer('TransformationVampireMonsterAbduction');

		RemoveTimer('TransformationVampireMonsterAbductionAttempt2');

		RemoveTimer('TransformationVampireMonsterHeavyAttackDamageMelee');

		RemoveTimer('TransformationVampireMonsterHeavyAttackDamageBlast');

		RemoveTimer('TransformationVampireMonsterHeavyAttackDamageBlast_add1');

		RemoveTimer('TransformationVampireMonsterHeavyAttackDamageTrap');
	}

	function ACSVampireMonsterRemoveAttackTimers()
	{
		GetACSTransformationVampireMonsterScreamEnt().StopAllEffects();

		GetACSTransformationVampireMonsterScreamEnt().RemoveTag('ACS_Transformation_Vampire_Monster_Scream');

		GetACSTransformationVampireMonster().DestroyEffect('disappear_');

		GetACSTransformationVampireMonster().RemoveTag('ACS_Transformation_Vampire_Monster_Camo_Active');

		GetACSTransformationVampireMonster().EnableCharacterCollisions(true);

		if (!GetACSTransformationVampireMonster().GetVisibility())
		{
			GetACSTransformationVampireMonster().SetVisibility(true);
		}

		GetACSTransformationVampireMonsterSwarm1().Destroy();

		GetACSTransformationVampireMonsterSwarm2().Destroy();

		GetACSTransformationVampireMonsterSwarm3().Destroy();

		RemoveTimer('ACS_Transformation_Vampire_Monster_Delay_Cancel_Anim');

		RemoveTimer('ACS_Transformation_Vampire_Monster_Delay_Cancel_Anim_Ground');

		RemoveTimer('TransformationVampireMonsterLDashEnd');

		RemoveTimer('TransformationVampireMonsterRDashEnd');

		RemoveTimer('VampireMonsterReturnCollision');

		RemoveTimer('TransformationVampireMonsterLightAttackDamage');

		RemoveTimer('TransformationVampireMonsterLightAttackDamageLeft');

		RemoveTimer('TransformationVampireMonsterLightAttackDamageRight');

		RemoveTimer('TransformationVampireMonsterLightAttackDamageLeft_add1');

		RemoveTimer('TransformationVampireMonsterLightAttackDamageLeft_add2');

		RemoveTimer('TransformationVampireMonsterLightAttackDamageLeft_add3');

		RemoveTimer('TransformationVampireMonsterLightAttackDamageLeft_add4');

		RemoveTimer('TransformationVampireMonsterLightAttackDamageRight_add1');

		RemoveTimer('TransformationVampireMonsterLightAttackDamageRight_add2');

		RemoveTimer('TransformationVampireMonsterLightAttackDamageRight_add3');

		RemoveTimer('TransformationVampireMonsterLightAttackDamageRight_add4');

		RemoveTimer('TransformationVampireMonsterSpecialAttackSlide');

		RemoveTimer('TransformationVampireMonsterSpecialLightAttackDamage');

		RemoveTimer('TransformationVampireMonsterSpecialLightAttackGatlingDelay');

		RemoveTimer('TransformationVampireMonsterAbduction');

		RemoveTimer('TransformationVampireMonsterAbductionAttempt2');

		RemoveTimer('TransformationVampireMonsterHeavyAttackDamageMelee');

		RemoveTimer('TransformationVampireMonsterHeavyAttackDamageBlast');

		RemoveTimer('TransformationVampireMonsterHeavyAttackDamageBlast_add1');

		RemoveTimer('TransformationVampireMonsterHeavyAttackDamageTrap');
	}

	function ACSTransformationVampireMonsterMovementAdjustForward()
	{
		movementAdjustorVampireMonster = GetACSTransformationVampireMonster().GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampireMonster = movementAdjustorVampireMonster.GetRequest( 'ACS_Transformation_VampireMonster_Rotate');
		movementAdjustorVampireMonster.CancelByName( 'ACS_Transformation_VampireMonster_Rotate' );
		movementAdjustorVampireMonster.CancelAll();

		ticketVampireMonster = movementAdjustorVampireMonster.CreateNewRequest( 'ACS_Transformation_VampireMonster_Rotate' );
		movementAdjustorVampireMonster.AdjustmentDuration( ticketVampireMonster, 0.5 );
		movementAdjustorVampireMonster.MaxRotationAdjustmentSpeed( ticketVampireMonster, 500000 );

		movementAdjustorVampireMonster.RotateTo( ticketVampireMonster, VecHeading( theCamera.GetCameraDirection() ) );

		movementAdjustorVampireMonsterWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampireMonsterWitcher = movementAdjustorVampireMonsterWitcher.GetRequest( 'ACS_Transformation_VampireMonster_Witcher_Rotate');
		movementAdjustorVampireMonsterWitcher.CancelByName( 'ACS_Transformation_VampireMonster_Witcher_Rotate' );
		movementAdjustorVampireMonsterWitcher.CancelAll();

		ticketVampireMonsterWitcher = movementAdjustorVampireMonsterWitcher.CreateNewRequest( 'ACS_Transformation_VampireMonster_Witcher_Rotate' );
		movementAdjustorVampireMonsterWitcher.AdjustmentDuration( ticketVampireMonsterWitcher, 0.5 );
		movementAdjustorVampireMonsterWitcher.MaxRotationAdjustmentSpeed( ticketVampireMonsterWitcher, 500000 );

		movementAdjustorVampireMonsterWitcher.RotateTo( ticketVampireMonsterWitcher, VecHeading( theCamera.GetCameraDirection() ) );
	}

	function ACSTransformationVampireMonsterMovementAdjustBackward()
	{
		movementAdjustorVampireMonster = GetACSTransformationVampireMonster().GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampireMonster = movementAdjustorVampireMonster.GetRequest( 'ACS_Transformation_VampireMonster_Rotate');
		movementAdjustorVampireMonster.CancelByName( 'ACS_Transformation_VampireMonster_Rotate' );
		movementAdjustorVampireMonster.CancelAll();

		ticketVampireMonster = movementAdjustorVampireMonster.CreateNewRequest( 'ACS_Transformation_VampireMonster_Rotate' );
		movementAdjustorVampireMonster.AdjustmentDuration( ticketVampireMonster, 0.5 );
		movementAdjustorVampireMonster.MaxRotationAdjustmentSpeed( ticketVampireMonster, 500000 );

		movementAdjustorVampireMonster.RotateTo( ticketVampireMonster, VecHeading( theCamera.GetCameraDirection() * -5 ) );

		movementAdjustorVampireMonsterWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampireMonsterWitcher = movementAdjustorVampireMonsterWitcher.GetRequest( 'ACS_Transformation_VampireMonster_Witcher_Rotate');
		movementAdjustorVampireMonsterWitcher.CancelByName( 'ACS_Transformation_VampireMonster_Witcher_Rotate' );
		movementAdjustorVampireMonsterWitcher.CancelAll();

		ticketVampireMonsterWitcher = movementAdjustorVampireMonsterWitcher.CreateNewRequest( 'ACS_Transformation_VampireMonster_Witcher_Rotate' );
		movementAdjustorVampireMonsterWitcher.AdjustmentDuration( ticketVampireMonsterWitcher, 0.5 );
		movementAdjustorVampireMonsterWitcher.MaxRotationAdjustmentSpeed( ticketVampireMonsterWitcher, 500000 );

		movementAdjustorVampireMonsterWitcher.RotateTo( ticketVampireMonsterWitcher, VecHeading( theCamera.GetCameraDirection() * -5 ) );
	}

	function ACSTransformationVampireMonsterMovementAdjustRight()
	{
		movementAdjustorVampireMonster = GetACSTransformationVampireMonster().GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampireMonster = movementAdjustorVampireMonster.GetRequest( 'ACS_Transformation_VampireMonster_Rotate');
		movementAdjustorVampireMonster.CancelByName( 'ACS_Transformation_VampireMonster_Rotate' );
		movementAdjustorVampireMonster.CancelAll();

		ticketVampireMonster = movementAdjustorVampireMonster.CreateNewRequest( 'ACS_Transformation_VampireMonster_Rotate' );
		movementAdjustorVampireMonster.AdjustmentDuration( ticketVampireMonster, 0.5 );
		movementAdjustorVampireMonster.MaxRotationAdjustmentSpeed( ticketVampireMonster, 500000 );

		movementAdjustorVampireMonster.RotateTo( ticketVampireMonster, VecHeading( theCamera.GetCameraDirection() + theCamera.GetCameraRight() * 5 ) );




		movementAdjustorVampireMonsterWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampireMonsterWitcher = movementAdjustorVampireMonsterWitcher.GetRequest( 'ACS_Transformation_VampireMonster_Witcher_Rotate');
		movementAdjustorVampireMonsterWitcher.CancelByName( 'ACS_Transformation_VampireMonster_Witcher_Rotate' );
		movementAdjustorVampireMonsterWitcher.CancelAll();

		ticketVampireMonsterWitcher = movementAdjustorVampireMonsterWitcher.CreateNewRequest( 'ACS_Transformation_VampireMonster_Witcher_Rotate' );
		movementAdjustorVampireMonsterWitcher.AdjustmentDuration( ticketVampireMonsterWitcher, 0.5 );
		movementAdjustorVampireMonsterWitcher.MaxRotationAdjustmentSpeed( ticketVampireMonsterWitcher, 500000 );

		movementAdjustorVampireMonsterWitcher.RotateTo( ticketVampireMonsterWitcher, VecHeading( theCamera.GetCameraDirection() + theCamera.GetCameraRight() * 5 ) );
	}

	function ACSTransformationVampireMonsterMovementAdjustLeft()
	{
		movementAdjustorVampireMonster = GetACSTransformationVampireMonster().GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampireMonster = movementAdjustorVampireMonster.GetRequest( 'ACS_Transformation_VampireMonster_Rotate');
		movementAdjustorVampireMonster.CancelByName( 'ACS_Transformation_VampireMonster_Rotate' );
		movementAdjustorVampireMonster.CancelAll();

		ticketVampireMonster = movementAdjustorVampireMonster.CreateNewRequest( 'ACS_Transformation_VampireMonster_Rotate' );
		movementAdjustorVampireMonster.AdjustmentDuration( ticketVampireMonster, 0.5 );
		movementAdjustorVampireMonster.MaxRotationAdjustmentSpeed( ticketVampireMonster, 500000 );

		movementAdjustorVampireMonster.RotateTo( ticketVampireMonster, VecHeading( theCamera.GetCameraDirection() + theCamera.GetCameraRight() * -5 ) );



		movementAdjustorVampireMonsterWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampireMonsterWitcher = movementAdjustorVampireMonsterWitcher.GetRequest( 'ACS_Transformation_VampireMonster_Witcher_Rotate');
		movementAdjustorVampireMonsterWitcher.CancelByName( 'ACS_Transformation_VampireMonster_Witcher_Rotate' );
		movementAdjustorVampireMonsterWitcher.CancelAll();

		ticketVampireMonsterWitcher = movementAdjustorVampireMonsterWitcher.CreateNewRequest( 'ACS_Transformation_VampireMonster_Witcher_Rotate' );
		movementAdjustorVampireMonsterWitcher.AdjustmentDuration( ticketVampireMonsterWitcher, 0.5 );
		movementAdjustorVampireMonsterWitcher.MaxRotationAdjustmentSpeed( ticketVampireMonsterWitcher, 500000 );

		movementAdjustorVampireMonsterWitcher.RotateTo( ticketVampireMonsterWitcher, VecHeading( theCamera.GetCameraDirection() + theCamera.GetCameraRight() * -5 ) );
	}

	function ACSTransformationVampireMonsterMovementAdjustForwardRight()
	{
		movementAdjustorVampireMonster = GetACSTransformationVampireMonster().GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampireMonster = movementAdjustorVampireMonster.GetRequest( 'ACS_Transformation_VampireMonster_Rotate');
		movementAdjustorVampireMonster.CancelByName( 'ACS_Transformation_VampireMonster_Rotate' );
		movementAdjustorVampireMonster.CancelAll();

		ticketVampireMonster = movementAdjustorVampireMonster.CreateNewRequest( 'ACS_Transformation_VampireMonster_Rotate' );
		movementAdjustorVampireMonster.AdjustmentDuration( ticketVampireMonster, 1 );
		movementAdjustorVampireMonster.MaxRotationAdjustmentSpeed( ticketVampireMonster, 500000 );

		//movementAdjustorVampireMonster.RotateTo( ticketVampireMonster, VecHeading( (theCamera.GetCameraDirection() * 5)  + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * 5) ) );

		movementAdjustorVampireMonster.RotateTo( ticketVampireMonster, VecHeading( (theCamera.GetCameraDirection() * 5) + (theCamera.GetCameraRight() * 5) ) );



		movementAdjustorVampireMonsterWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampireMonsterWitcher = movementAdjustorVampireMonsterWitcher.GetRequest( 'ACS_Transformation_VampireMonster_Witcher_Rotate');
		movementAdjustorVampireMonsterWitcher.CancelByName( 'ACS_Transformation_VampireMonster_Witcher_Rotate' );
		movementAdjustorVampireMonsterWitcher.CancelAll();

		ticketVampireMonsterWitcher = movementAdjustorVampireMonsterWitcher.CreateNewRequest( 'ACS_Transformation_VampireMonster_Witcher_Rotate' );
		movementAdjustorVampireMonsterWitcher.AdjustmentDuration( ticketVampireMonsterWitcher, 1 );
		movementAdjustorVampireMonsterWitcher.MaxRotationAdjustmentSpeed( ticketVampireMonsterWitcher, 500000 );

		//movementAdjustorVampireMonsterWitcher.RotateTo( ticketVampireMonsterWitcher, VecHeading( (theCamera.GetCameraDirection() * 5)  + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * 5) ) );

		movementAdjustorVampireMonsterWitcher.RotateTo( ticketVampireMonsterWitcher, VecHeading( (theCamera.GetCameraDirection() * 5)  + (theCamera.GetCameraRight() * 5) ) );
	}

	function ACSTransformationVampireMonsterMovementAdjustForwardLeft()
	{
		movementAdjustorVampireMonster = GetACSTransformationVampireMonster().GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampireMonster = movementAdjustorVampireMonster.GetRequest( 'ACS_Transformation_VampireMonster_Rotate');
		movementAdjustorVampireMonster.CancelByName( 'ACS_Transformation_VampireMonster_Rotate' );
		movementAdjustorVampireMonster.CancelAll();

		ticketVampireMonster = movementAdjustorVampireMonster.CreateNewRequest( 'ACS_Transformation_VampireMonster_Rotate' );
		movementAdjustorVampireMonster.AdjustmentDuration( ticketVampireMonster, 1 );
		movementAdjustorVampireMonster.MaxRotationAdjustmentSpeed( ticketVampireMonster, 500000 );

		//movementAdjustorVampireMonster.RotateTo( ticketVampireMonster, VecHeading( (theCamera.GetCameraDirection() * 5)  + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * -5) ) );

		movementAdjustorVampireMonster.RotateTo( ticketVampireMonster, VecHeading( (theCamera.GetCameraDirection() * 5) + (theCamera.GetCameraRight() * -5) ) );



		movementAdjustorVampireMonsterWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampireMonsterWitcher = movementAdjustorVampireMonsterWitcher.GetRequest( 'ACS_Transformation_VampireMonster_Witcher_Rotate');
		movementAdjustorVampireMonsterWitcher.CancelByName( 'ACS_Transformation_VampireMonster_Witcher_Rotate' );
		movementAdjustorVampireMonsterWitcher.CancelAll();

		ticketVampireMonsterWitcher = movementAdjustorVampireMonsterWitcher.CreateNewRequest( 'ACS_Transformation_VampireMonster_Witcher_Rotate' );
		movementAdjustorVampireMonsterWitcher.AdjustmentDuration( ticketVampireMonsterWitcher, 1 );
		movementAdjustorVampireMonsterWitcher.MaxRotationAdjustmentSpeed( ticketVampireMonsterWitcher, 500000 );

		//movementAdjustorVampireMonsterWitcher.RotateTo( ticketVampireMonsterWitcher, VecHeading( (theCamera.GetCameraDirection() * 5) + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * -5) ) );

		movementAdjustorVampireMonsterWitcher.RotateTo( ticketVampireMonsterWitcher, VecHeading( (theCamera.GetCameraDirection() * 5) + (theCamera.GetCameraRight() * -5) ) );
	}

	function ACSTransformationVampireMonsterMovementAdjustBackwardRight()
	{
		movementAdjustorVampireMonster = GetACSTransformationVampireMonster().GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampireMonster = movementAdjustorVampireMonster.GetRequest( 'ACS_Transformation_VampireMonster_Rotate');
		movementAdjustorVampireMonster.CancelByName( 'ACS_Transformation_VampireMonster_Rotate' );
		movementAdjustorVampireMonster.CancelAll();

		ticketVampireMonster = movementAdjustorVampireMonster.CreateNewRequest( 'ACS_Transformation_VampireMonster_Rotate' );
		movementAdjustorVampireMonster.AdjustmentDuration( ticketVampireMonster, 1 );
		movementAdjustorVampireMonster.MaxRotationAdjustmentSpeed( ticketVampireMonster, 500000 );

		//movementAdjustorVampireMonster.RotateTo( ticketVampireMonster, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraForward() * -5) + (theCamera.GetCameraRight() * 5) ) );

		movementAdjustorVampireMonster.RotateTo( ticketVampireMonster, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraRight() * 5) ) );



		movementAdjustorVampireMonsterWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampireMonsterWitcher = movementAdjustorVampireMonsterWitcher.GetRequest( 'ACS_Transformation_VampireMonster_Witcher_Rotate');
		movementAdjustorVampireMonsterWitcher.CancelByName( 'ACS_Transformation_VampireMonster_Witcher_Rotate' );
		movementAdjustorVampireMonsterWitcher.CancelAll();

		ticketVampireMonsterWitcher = movementAdjustorVampireMonsterWitcher.CreateNewRequest( 'ACS_Transformation_VampireMonster_Witcher_Rotate' );
		movementAdjustorVampireMonsterWitcher.AdjustmentDuration( ticketVampireMonsterWitcher, 1 );
		movementAdjustorVampireMonsterWitcher.MaxRotationAdjustmentSpeed( ticketVampireMonsterWitcher, 500000 );

		//movementAdjustorVampireMonsterWitcher.RotateTo( ticketVampireMonsterWitcher, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraForward() * -5) + (theCamera.GetCameraRight() * 5) ) );

		movementAdjustorVampireMonsterWitcher.RotateTo( ticketVampireMonsterWitcher, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraRight() * 5) ) );
	}

	function ACSTransformationVampireMonsterMovementAdjustBackwardLeft()
	{
		movementAdjustorVampireMonster = GetACSTransformationVampireMonster().GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampireMonster = movementAdjustorVampireMonster.GetRequest( 'ACS_Transformation_VampireMonster_Rotate');
		movementAdjustorVampireMonster.CancelByName( 'ACS_Transformation_VampireMonster_Rotate' );
		movementAdjustorVampireMonster.CancelAll();

		ticketVampireMonster = movementAdjustorVampireMonster.CreateNewRequest( 'ACS_Transformation_VampireMonster_Rotate' );
		movementAdjustorVampireMonster.AdjustmentDuration( ticketVampireMonster, 1 );
		movementAdjustorVampireMonster.MaxRotationAdjustmentSpeed( ticketVampireMonster, 500000 );

		//movementAdjustorVampireMonster.RotateTo( ticketVampireMonster, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraForward() * -5) + (theCamera.GetCameraRight() * -5) ) );

		movementAdjustorVampireMonster.RotateTo( ticketVampireMonster, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraRight() * -5) ) );



		movementAdjustorVampireMonsterWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampireMonsterWitcher = movementAdjustorVampireMonsterWitcher.GetRequest( 'ACS_Transformation_VampireMonster_Witcher_Rotate');
		movementAdjustorVampireMonsterWitcher.CancelByName( 'ACS_Transformation_VampireMonster_Witcher_Rotate' );
		movementAdjustorVampireMonsterWitcher.CancelAll();

		ticketVampireMonsterWitcher = movementAdjustorVampireMonsterWitcher.CreateNewRequest( 'ACS_Transformation_VampireMonster_Witcher_Rotate' );
		movementAdjustorVampireMonsterWitcher.AdjustmentDuration( ticketVampireMonsterWitcher, 1 );
		movementAdjustorVampireMonsterWitcher.MaxRotationAdjustmentSpeed( ticketVampireMonsterWitcher, 500000 );

		//movementAdjustorVampireMonsterWitcher.RotateTo( ticketVampireMonsterWitcher, VecHeading( theCamera.GetCameraDirection()  + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * -5) ) );

		movementAdjustorVampireMonsterWitcher.RotateTo( ticketVampireMonsterWitcher, VecHeading( theCamera.GetCameraDirection() + (theCamera.GetCameraRight() * -5) ) );
	}

	function ACSTransformationVampireMonsterMovementAdjustRotateTowardsEnemy()
	{
		movementAdjustorVampireMonster = GetACSTransformationVampireMonster().GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampireMonster = movementAdjustorVampireMonster.GetRequest( 'ACS_Transformation_VampireMonster_Rotate');
		movementAdjustorVampireMonster.CancelByName( 'ACS_Transformation_VampireMonster_Rotate' );
		movementAdjustorVampireMonster.CancelAll();

		ticketVampireMonster = movementAdjustorVampireMonster.CreateNewRequest( 'ACS_Transformation_VampireMonster_Rotate' );
		movementAdjustorVampireMonster.AdjustmentDuration( ticketVampireMonster, 0.25 );
		movementAdjustorVampireMonster.MaxRotationAdjustmentSpeed( ticketVampireMonster, 500000 );

		if (thePlayer.GetTarget())
		{
			movementAdjustorVampireMonster.RotateTowards( ticketVampireMonster, thePlayer.GetTarget() );
		}
		else
		{
			movementAdjustorVampireMonster.RotateTo( ticketVampireMonster, VecHeading( theCamera.GetCameraDirection() ) );
		}
	}

	public timer function Vampire_Monster_Remove_Stationary_Tag ( dt : float, id : int) 
	{ 
		GetACSTransformationVampireMonster().RemoveTag('ACS_Vampire_Monster_Stationary_Transition');
	}

	function TransformationVampireMonsterRestoreRotation()
	{
		if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Stopped_Moving'))
		{
			RemoveTimer('Vampire_Monster_Remove_Stationary_Tag');
			AddTimer('Vampire_Monster_Remove_Stationary_Tag', 1, false);

			GetACSTransformationVampireMonster().RemoveTag('ACS_Vampire_Monster_Stopped_Moving');
		}
	}

	function TransformationVampireMonsterChangeStance()
	{
		if (GetACSTransformationVampireMonster().HasTag('ACS_Directional_Change_Anim'))
		{
			RemoveChangeStanceTimers();
			AddTimer('Transformation_Vampire_Monster_Change_Stance_Forward', 0.25f, false);

			//ACSTransformVampiressPlayAnim('monster_werewolf_run_f', 0.5f, 0.5f);

			GetACSTransformationVampireMonster().RemoveTag('ACS_Directional_Change_Anim');
		}
	}

	public timer function Vampire_Monster_Bat_Swarm ( dt : float, id : int) 
	{
		ACS_Bats_Summon();
	}

	timer function Vampire_Monster_Reveal_Delay ( dt : float, id : int) 
	{
		if (!GetACSTransformationVampireMonster().GetVisibility())
		{
			GetACSTransformationVampireMonster().SetVisibility(true);
		}

		GetACSTransformationVampireMonsterCameraDummy().StopEffect('shadowdash_construct');

		thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_large");

		thePlayer.SoundEvent("monster_dettlaff_monster_movement_whoosh_large");

		thePlayer.SoundEvent("monster_dettlaff_monster_construct_whoosh_claws_large");

		if (GetACSTransformationVampireMonster().HasTag('ACS_Transformation_Vampire_Monster_Blood_Armor'))
		{
			GetACSTransformationVampireMonster().DestroyEffect('shadowdash_end');
			GetACSTransformationVampireMonster().PlayEffectSingle('shadowdash_end');
		}
		else
		{
			GetACSTransformationVampireMonster().DestroyEffect('shadowdash_start');
			GetACSTransformationVampireMonster().PlayEffectSingle('shadowdash_start');
		}
	}

	function ACS_Transformation_Vampire_Monster_Move_Controls()
	{
		var dmg 						: W3DamageAction;
		var vampRot, adjustedRot 		: EulerAngles;

		if (thePlayer.IsInCombat())
		{
			if (thePlayer.GetStat(BCS_Toxicity) < thePlayer.GetStatMax(BCS_Toxicity))
			{
				thePlayer.GainStat(BCS_Toxicity, (thePlayer.GetStatMax(BCS_Toxicity) - thePlayer.GetStat(BCS_Toxicity)) * 0.00006125);
			}
			
			thePlayer.DrainVitality(thePlayer.GetStat(BCS_Vitality) * 0.000030625);
		}
		else
		{
			if (thePlayer.GetStat(BCS_Toxicity) < thePlayer.GetStatMax(BCS_Toxicity))
			{
				thePlayer.GainStat(BCS_Toxicity, (thePlayer.GetStatMax(BCS_Toxicity) - thePlayer.GetStat(BCS_Toxicity)) * 0.000030625);
			}
			
			thePlayer.DrainVitality(thePlayer.GetStat(BCS_Vitality) * 0.0000153125);
		}

		GetACSTransformationVampireMonster().GetMovingAgentComponent().EnableCombatMode( true );

		GetACSTransformationVampireMonster().GetMovingAgentComponent().SetVirtualRadius( 'CombatCharacterRadius' );

		((CNewNPC)GetACSTransformationVampireMonster()).SetBehaviorVariable( 'additiveTauntOn', 1, true );

		if (thePlayer.IsInCombat())
		{
			if (thePlayer.GetTarget())
			{
				((CNewNPC)GetACSTransformationVampireMonster()).SetBehaviorVectorVariable( 'lookAtTarget', ((CActor)(thePlayer.GetTarget())).GetWorldPosition() );
			}
			else
			{
				((CNewNPC)GetACSTransformationVampireMonster()).SetBehaviorVectorVariable( 'lookAtTarget', GetACSLookatEntity().GetWorldPosition() );
			}

			((CNewNPC)GetACSTransformationVampireMonster()).SetBehaviorVariable( 'lookatOn', 1, true );
		}
		else
		{
			((CNewNPC)GetACSTransformationVampireMonster()).SetBehaviorVectorVariable( 'lookAtTarget', GetACSLookatEntity().GetWorldPosition() );

			((CNewNPC)GetACSTransformationVampireMonster()).SetBehaviorVariable( 'lookatOn', 1, true );
		}

		if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Ground_Mode'))
		{
			if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flight_Mode_Controls_Active'))
			{
				RemoveTimer('Vampire_Monster_Bat_Swarm');

				RemoveTimer('Vampire_Monster_Bats_Gatling');

				//GetWitcherPlayer().SoundEvent("q704_bats_stop");
				//GetWitcherPlayer().SoundEvent("q704_bats_stop");

				RemoveTimer('Vampire_Monster_Bat_Swarm_Restore');

				RemoveTimer('VampFlightControls');

				TransformationVampireMonsterAbductionEnd();

				GetACSTransformationVampireMonster().RemoveTag('ACS_Vampire_Monster_Flight_Mode_Controls_Active');
			}

			if (GetACSTransformationVampireMonster().HasTag('ACS_Transformation_Vampire_Monster_Flight_Controls_Active'))
			{
				GetACSTransformationVampireMonster().RemoveTag('ACS_Transformation_Vampire_Monster_Flight_Controls_Active');
			}

			if (GetACSTransformationVampireMonster().GetMovingAgentComponent().GetRelativeMoveSpeed() <= 0.1 )
			{
				if
				(
					theInput.GetLastActivationTime( 'GI_AxisLeftX' ) > 1.25f 
					|| theInput.GetLastActivationTime( 'GI_AxisLeftY' ) > 1.25f 
				)	
				{
					GetACSTransformationVampireMonster().RemoveTag('ACS_Vampire_Monster_Stationary_Transition');
				}
				else
				{
					RemoveTimer('Vampire_Monster_Remove_Stationary_Tag');

					if (!GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Stopped_Moving'))
					{
						GetACSTransformationVampireMonster().AddTag('ACS_Vampire_Monster_Stationary_Transition');

						GetACSTransformationVampireMonster().AddTag('ACS_Vampire_Monster_Stopped_Moving');
					}
				}
			}

			if (thePlayer.IsDodgeTimerRunning()
			|| thePlayer.IsCurrentlyDodging() )
			{
				return;
			}

			if (theInput.GetActionValue('GI_AxisLeftX') == 0 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
			{
				GetACSTransformationVampireMonster().GetMovingAgentComponent().ForceSetRelativeMoveSpeed( 0 );
				GetACSTransformationVampireMonster().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed( 0 );
				GetACSTransformationVampireMonster().SetAnimationTimeMultiplier(1.0);
			}
			else
			{
				if (theInput.GetActionValue('GI_AxisLeftY') > 0.1 && theInput.GetActionValue('GI_AxisLeftX') == 0 )
				{
					TransformationVampireMonsterRestoreRotation();

					TransformationVampireMonsterChangeStance();

					GetACSTransformationVampireMonster().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationVampireMonster().GetHeadingVector()));

					if (!GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Stationary_Transition')
					)
					{
						ACSTransformationVampireMonsterMovementAdjustForward();
					}

					if (
					theInput.IsActionPressed('Sprint') && !GetACSTransformationVampireMonster().HasTag('ACS_Transformation_Vampire_Monster_Camo_Active')
					)
					{
						GetACSTransformationVampireMonster().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 

						GetVampireMonsterClass().ACS_VampireMonsterFastWalkSwitch_Engage();
					}
					else
					{
						GetACSTransformationVampireMonster().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 

						GetVampireMonsterClass().ACS_VampireMonsterSlowWalkSwitch_Engage();
					}
				}
				else if (theInput.GetActionValue('GI_AxisLeftY') < -0.1 && theInput.GetActionValue('GI_AxisLeftX') == 0 )
				{
					TransformationVampireMonsterRestoreRotation();

					if (!GetACSTransformationVampireMonster().HasTag('ACS_Vampiress_Stationary_Transition')
					)
					{
						GetACSTransformationVampireMonster().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationVampireMonster().GetHeadingVector()));
						
						ACSTransformationVampireMonsterMovementAdjustBackward();

					}

					TransformationVampireMonsterChangeStance();

					GetACSTransformationVampireMonster().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationVampireMonster().GetHeadingVector()));

					if (
					theInput.IsActionPressed('Sprint') && !GetACSTransformationVampireMonster().HasTag('ACS_Transformation_Vampire_Monster_Camo_Active')
					)
					{
						GetACSTransformationVampireMonster().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 

						GetVampireMonsterClass().ACS_VampireMonsterFastWalkSwitch_Engage();
					}
					else
					{
						GetACSTransformationVampireMonster().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 

						GetVampireMonsterClass().ACS_VampireMonsterSlowWalkSwitch_Engage();
					}
	
				}
				else if (theInput.GetActionValue('GI_AxisLeftX') > 0.1 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
				{
					VampiressRestoreRotation();

					TransformationVampireMonsterChangeStance();

					if (!GetACSTransformationVampireMonster().HasTag('ACS_Werewolf_Stationary_Transition')
					)
					{
						ACSTransformationVampireMonsterMovementAdjustRight();
					}

					GetACSTransformationVampireMonster().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationVampireMonster().GetHeadingVector()));

					if (
					theInput.IsActionPressed('Sprint') && !GetACSTransformationVampireMonster().HasTag('ACS_Transformation_Vampire_Monster_Camo_Active')
					)
					{
						GetACSTransformationVampireMonster().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 

						GetVampireMonsterClass().ACS_VampireMonsterFastWalkSwitch_Engage();
					}
					else
					{
						GetACSTransformationVampireMonster().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 

						GetVampireMonsterClass().ACS_VampireMonsterSlowWalkSwitch_Engage();
					}
				}
				else if (theInput.GetActionValue('GI_AxisLeftX') < -0.1 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
				{
					VampiressRestoreRotation();

					TransformationVampireMonsterChangeStance();

					if (!GetACSTransformationVampireMonster().HasTag('ACS_Werewolf_Stationary_Transition')
					)
					{
						ACSTransformationVampireMonsterMovementAdjustLeft();
					}

					GetACSTransformationVampireMonster().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationVampireMonster().GetHeadingVector()));

					if (
					theInput.IsActionPressed('Sprint') && !GetACSTransformationVampireMonster().HasTag('ACS_Transformation_Vampire_Monster_Camo_Active')
					)
					{
						GetACSTransformationVampireMonster().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 

						GetVampireMonsterClass().ACS_VampireMonsterFastWalkSwitch_Engage();
					}
					else
					{
						GetACSTransformationVampireMonster().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 

						GetVampireMonsterClass().ACS_VampireMonsterSlowWalkSwitch_Engage();
					}
				}
				else if (theInput.GetActionValue('GI_AxisLeftY') > 0.1 && theInput.GetActionValue('GI_AxisLeftX') > 0.1 )
				{
					VampiressRestoreRotation();

					TransformationVampireMonsterChangeStance();

					if (!GetACSTransformationVampireMonster().HasTag('ACS_Werewolf_Stationary_Transition')
					)
					{
						ACSTransformationVampireMonsterMovementAdjustForwardRight();
					}

					GetACSTransformationVampireMonster().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationVampireMonster().GetHeadingVector()));

					if (
					theInput.IsActionPressed('Sprint') && !GetACSTransformationVampireMonster().HasTag('ACS_Transformation_Vampire_Monster_Camo_Active')
					)
					{
						GetACSTransformationVampireMonster().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 

						GetVampireMonsterClass().ACS_VampireMonsterFastWalkSwitch_Engage();
					}
					else
					{
						GetACSTransformationVampireMonster().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 

						GetVampireMonsterClass().ACS_VampireMonsterSlowWalkSwitch_Engage();
					}
				}
				else if (theInput.GetActionValue('GI_AxisLeftY') > 0.1 && theInput.GetActionValue('GI_AxisLeftX') < -0.1 )
				{
					VampiressRestoreRotation();

					TransformationVampireMonsterChangeStance();

					if (!GetACSTransformationVampireMonster().HasTag('ACS_Werewolf_Stationary_Transition')
					)
					{
						ACSTransformationVampireMonsterMovementAdjustForwardLeft();
					}

					GetACSTransformationVampireMonster().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationVampireMonster().GetHeadingVector()));

					if (
					theInput.IsActionPressed('Sprint') && !GetACSTransformationVampireMonster().HasTag('ACS_Transformation_Vampire_Monster_Camo_Active')
					)
					{
						GetACSTransformationVampireMonster().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 

						GetVampireMonsterClass().ACS_VampireMonsterFastWalkSwitch_Engage();
					}
					else
					{
						GetACSTransformationVampireMonster().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 

						GetVampireMonsterClass().ACS_VampireMonsterSlowWalkSwitch_Engage();
					}
				}
				else if (theInput.GetActionValue('GI_AxisLeftY') < -0.1 && theInput.GetActionValue('GI_AxisLeftX') > 0.1 )
				{
					VampiressRestoreRotation();

					TransformationVampireMonsterChangeStance();

					if (!GetACSTransformationVampireMonster().HasTag('ACS_Werewolf_Stationary_Transition')
					)
					{
						ACSTransformationVampireMonsterMovementAdjustBackwardRight();
					}

					GetACSTransformationVampireMonster().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationVampireMonster().GetHeadingVector()));

					if (
					theInput.IsActionPressed('Sprint') && !GetACSTransformationVampireMonster().HasTag('ACS_Transformation_Vampire_Monster_Camo_Active')
					)
					{
						GetACSTransformationVampireMonster().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 

						GetVampireMonsterClass().ACS_VampireMonsterFastWalkSwitch_Engage();
					}
					else
					{
						GetACSTransformationVampireMonster().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 

						GetVampireMonsterClass().ACS_VampireMonsterSlowWalkSwitch_Engage();
					}
				}
				else if (theInput.GetActionValue('GI_AxisLeftX') < -0.1 && theInput.GetActionValue('GI_AxisLeftY') < -0.1 )
				{
					VampiressRestoreRotation();

					TransformationVampireMonsterChangeStance();

					if (!GetACSTransformationVampireMonster().HasTag('ACS_Werewolf_Stationary_Transition')
					)
					{
						ACSTransformationVampireMonsterMovementAdjustBackwardLeft();
					}

					GetACSTransformationVampireMonster().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationVampireMonster().GetHeadingVector()));

					if (
					theInput.IsActionPressed('Sprint') && !GetACSTransformationVampireMonster().HasTag('ACS_Transformation_Vampire_Monster_Camo_Active')
					)
					{
						GetACSTransformationVampireMonster().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 

						GetVampireMonsterClass().ACS_VampireMonsterFastWalkSwitch_Engage();
					}
					else
					{
						GetACSTransformationVampireMonster().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 

						GetVampireMonsterClass().ACS_VampireMonsterSlowWalkSwitch_Engage();
					}
				}
			}
		}
		else if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flight_Mode'))
		{
			if(!GetACSTransformationVampireMonsterAbductionVictim().IsAlive() 
			|| GetACSTransformationVampireMonsterAbductionVictim().HasBuff(EET_Ragdoll)
			|| GetACSTransformationVampireMonsterAbductionVictim().IsRagdolled()
			|| thePlayer.IsInInterior()
			)
			{
				GetACSTransformationVampireMonsterAbductionVictim().BreakAttachment();

				GetACSTransformationVampireMonsterAbductionVictimFX_1().PlayEffect('shadowdash_body_blood_construct');

				GetACSTransformationVampireMonsterAbductionVictimFX_1().StopEffect('shadowdash_construct');

				GetACSTransformationVampireMonsterAbductionVictimFX_1().DestroyAfter(3);

				GetACSTransformationVampireMonsterAbductionVictimFX_1().RemoveTag('ACS_Transformation_Vampire_Mosnter_Abduction_FX_1');

				GetACSTransformationVampireMonsterAbductionVictimFX_2().PlayEffect('shadowdash_body_blood_construct');

				GetACSTransformationVampireMonsterAbductionVictimFX_2().StopEffect('shadowdash_construct');

				GetACSTransformationVampireMonsterAbductionVictimFX_2().DestroyAfter(3);

				GetACSTransformationVampireMonsterAbductionVictimFX_2().RemoveTag('ACS_Transformation_Vampire_Mosnter_Abduction_FX_2');

				GetACSTransformationVampireMonsterAbductionVictimFX_3().PlayEffect('shadowdash_body_blood_construct');

				GetACSTransformationVampireMonsterAbductionVictimFX_3().StopEffect('shadowdash_construct');

				GetACSTransformationVampireMonsterAbductionVictimFX_3().DestroyAfter(3);

				GetACSTransformationVampireMonsterAbductionVictimFX_3().RemoveTag('ACS_Transformation_Vampire_Mosnter_Abduction_FX_3');

				GetACSTransformationVampireMonsterAbductionVictim().RemoveBuff(EET_Confusion, true, 'ACS_Transformation_Vampire_Mosnter_Abduction');

				if(GetACSTransformationVampireMonsterAbductionVictim().HasBuff(EET_Ragdoll)
				|| GetACSTransformationVampireMonsterAbductionVictim().IsRagdolled())
				{
					if (!GetACSTransformationVampireMonsterAbductionVictim().HasTag('ACS_Ragdolled_Beyond_Repair'))
					{
						dmg =  new W3DamageAction in this;

						dmg.Initialize(GetWitcherPlayer(), GetACSTransformationVampireMonsterAbductionVictim(), GetWitcherPlayer(), GetWitcherPlayer().GetName(), EHRT_None, CPS_Undefined, false, false, true, false);

						dmg.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, 9999 );

						dmg.SetHitAnimationPlayType(EAHA_ForceNo);

						dmg.SetSuppressHitSounds(false);

						dmg.SetForceExplosionDismemberment();
						
						theGame.damageMgr.ProcessAction( dmg );
						
						delete dmg;

						GetACSTransformationVampireMonsterAbductionVictim().AddTag('ACS_Ragdolled_Beyond_Repair');
					}
				}

				GetACSTransformationVampireMonsterAbductionVictim().TeleportWithRotation(GetACSTransformationVampireMonsterAbductionVictim().GetWorldPosition(), EulerAngles(0, 0, 0));

				GetACSTransformationVampireMonsterAbductionVictim().RemoveTag('ACS_Transformation_Vampire_Abduction_Victim');

				GetACSTransformationVampireMonster().RemoveTag('ACS_Transformation_Vampire_Has_Abduction_Victim');
			}

			if (GetACSTransformationVampireMonster().HasTag('ACS_Transformation_Vampire_Monster_Flight_Controls_Active'))
			{
				vampRot = GetACSTransformationVampireMonster().GetWorldRotation();

				adjustedRot = EulerAngles(0,0,0);

				adjustedRot.Yaw = vampRot.Yaw;

				thePlayer.TeleportWithRotation(GetACSTransformationVampireMonsterCameraDummy().GetWorldPosition() + Vector(0,0,-1), adjustedRot);

				if (!GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flight_Mode_Controls_Active'))
				{
					AddTimer('Vampire_Monster_Bat_Swarm', 0.5, true);

					//GetWitcherPlayer().SoundEvent("q704_bats");
					//GetWitcherPlayer().SoundEvent("q704_bats");

					//AddTimer('VampFlightControls', 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, true);

					GetACSTransformationVampireMonster().AddTag('ACS_Vampire_Monster_Flight_Mode_Controls_Active');
				}

				VampFlightControlsRunning();
			}
		}
	}

	private timer function TransformationVampireMonsterRDashEnd( deltaTime : float , id : int)
	{
		ACSTransformVampireMonsterPlayAnim('dettlaff_fly_dash_r_ACS', 0.25f, 0.25f);
	}

	private timer function TransformationVampireMonsterLDashEnd( deltaTime : float , id : int)
	{
		ACSTransformVampireMonsterPlayAnim('dettlaff_fly_dash_l_ACS', 0.25f, 0.25f);
	}

	private timer function VampFlightControls( deltaTime : float , id : int)
	{
		VampFlightControlsRunning();
	}

	private timer function VampFlightControlsOld( deltaTime : float , id : int)
	{
		var multiplier, z, pitchZ 				 : float;
		var targetYaw 							 : float;
		var weaponEntity 						 : CEntity;
		var to_destroy							 : array< CEntity >;
		var i									 : int;
		var animatedComponent 					 : CAnimatedComponent;
		var settings						 	 : SAnimatedComponentSlotAnimationSettings;
		var actors 						 		 : array<CActor>;
		var vampPos 					 		 : Vector;
		var vampRot, playerRot, newRot 			 : EulerAngles;
		var destVampireMonsterFlight		 	 : Vector;
		var progres 							: float;

		if (GetTransformationVampireMonsterDiveProcess())
		{
			return;
		}

		vampPos = GetACSTransformationVampireMonster().GetWorldPosition();
		vampRot = GetACSTransformationVampireMonster().GetWorldRotation();

		GetACSTransformationVampireMonster().SetAnimationTimeMultiplier(1);

		movementAdjustorVampireMonsterWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampireMonsterWitcher = movementAdjustorVampireMonsterWitcher.GetRequest( 'ACS_Transformation_VampireMonster_Witcher_Rotate');
		movementAdjustorVampireMonsterWitcher.CancelByName( 'ACS_Transformation_VampireMonster_Witcher_Rotate' );
		movementAdjustorVampireMonsterWitcher.CancelAll();

		ticketVampireMonsterWitcher = movementAdjustorVampireMonsterWitcher.CreateNewRequest( 'ACS_Transformation_VampireMonster_Witcher_Rotate' );
		movementAdjustorVampireMonsterWitcher.AdjustmentDuration( ticketVampireMonsterWitcher, 5.f );
		movementAdjustorVampireMonsterWitcher.MaxRotationAdjustmentSpeed( ticketVampireMonsterWitcher, 5 );




		movementAdjustorVampireMonster = GetACSTransformationVampireMonster().GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampireMonster = movementAdjustorVampireMonster.GetRequest( 'ACS_Transformation_VampireMonster_Rotate');
		movementAdjustorVampireMonster.CancelByName( 'ACS_Transformation_VampireMonster_Rotate' );
		movementAdjustorVampireMonster.CancelAll();

		ticketVampireMonster = movementAdjustorVampireMonster.CreateNewRequest( 'ACS_Transformation_VampireMonster_Rotate' );
		movementAdjustorVampireMonster.AdjustmentDuration( ticketVampireMonster, 0.5f );
		movementAdjustorVampireMonster.MaxRotationAdjustmentSpeed( ticketVampireMonster, 50000000 );

		if (GetTransformationVampireMonsterAttackProcess())
		{
			multiplier = 0.25;
		}
		else
		{
			if(theInput.GetActionValue('Sprint'))
			{
				multiplier = 1;
			}
			else
			{
				if(theInput.GetActionValue('SwordSheathe'))
				{
					multiplier = 0.25;
				}
				else
				{
					multiplier = 0.5;
				}
			}
		}
	
		if(theInput.GetActionValue('GI_AxisLeftY') > 0)
		{
			if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flying_Back'))
			{
				GetACSTransformationVampireMonster().RemoveTag('ACS_Vampire_Monster_Flying_Back');
			}

			vampRot.Pitch -= 0.125;

			if(vampRot.Pitch < -50)
			{
				vampRot.Pitch = -50;

				if (!GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flying_Straight') && !GetTransformationVampireMonsterAttackProcess())
				{
					if(ACS_can_transformation_dodge())
					{
						ACS_refresh_transformation_dodge_cooldown();

						RemoveTimer('TransformationVampireMonsterLDashEnd');
						RemoveTimer('TransformationVampireMonsterRDashEnd');

						ACSTransformVampireMonsterPlayAnim('dettlaff_flying_up_ACS', 0.5f, 0.875f);

						GetACSTransformationVampireMonster().AddTag('ACS_Vampire_Monster_Flying_Straight');
					}
				}
			}
			else
			{
				if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flying_Straight'))
				{
					GetACSTransformationVampireMonster().RemoveTag('ACS_Vampire_Monster_Flying_Straight');
				}
			}
		
			if(multiplier >= 1.0)
			{
				multiplier = 2.0;

				if (!thePlayer.IsInCombat())
				{
					GetACSTransformationVampireMonster().SetAnimationTimeMultiplier(1.5);
				}
			}
		}

		if(theInput.GetActionValue('GI_AxisLeftY') < 0)
		{
			if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flying_Straight'))
			{
				GetACSTransformationVampireMonster().RemoveTag('ACS_Vampire_Monster_Flying_Straight');
			}

			vampRot.Pitch += 0.125;

			if(vampRot.Pitch > 30)
			{
				if (!GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flying_Back') && !GetTransformationVampireMonsterAttackProcess())
				{
					if(ACS_can_transformation_dodge())
					{
						ACS_refresh_transformation_dodge_cooldown();

						RemoveTimer('TransformationVampireMonsterLDashEnd');
						RemoveTimer('TransformationVampireMonsterRDashEnd');

						ACSTransformVampireMonsterPlayAnim('dettlaff_flying_up_ACS', 0.5f, 0.875f);

						GetACSTransformationVampireMonster().AddTag('ACS_Vampire_Monster_Flying_Back');
					}
				}

				vampRot.Pitch = 30;
			}
			else
			{
				if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flying_Back'))
				{
					GetACSTransformationVampireMonster().RemoveTag('ACS_Vampire_Monster_Flying_Back');
				}
			}
		
			if(multiplier >= 1.0)
			{
				if (!thePlayer.IsInCombat())
				{
					GetACSTransformationVampireMonster().SetAnimationTimeMultiplier(1.5);
				}
			}
		}

		if(theInput.GetActionValue('GI_AxisLeftX') > 0)
		{
			if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flying_Left'))
			{
				GetACSTransformationVampireMonster().RemoveTag('ACS_Vampire_Monster_Flying_Left');
			}

			if (!GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flying_Right') && !GetTransformationVampireMonsterAttackProcess())
			{
				if(ACS_can_transformation_dodge())
				{
					ACS_refresh_transformation_dodge_cooldown();

					RemoveTimer('TransformationVampireMonsterLDashEnd');
					RemoveTimer('TransformationVampireMonsterRDashEnd');

					if(theInput.GetActionValue('Sprint'))
					{
						GetACSTransformationVampireMonster().DestroyEffect('dash_appear');
						GetACSTransformationVampireMonster().PlayEffectSingle('dash_appear');
						GetACSTransformationVampireMonster().StopEffect('dash_appear');

						GetACSTransformationVampireMonster().DestroyEffect('third_teleport_out');
						GetACSTransformationVampireMonster().PlayEffectSingle('third_teleport_out');
						GetACSTransformationVampireMonster().StopEffect('third_teleport_out');
					}

					ACSTransformVampireMonsterPlayAnim('dettlaff_fly_dash_l_end_ACS', 0.25f, 0.25f);

					AddTimer('TransformationVampireMonsterRDashEnd', 2, false);

					GetACSTransformationVampireMonster().AddTag('ACS_Vampire_Monster_Flying_Right');

				}
			}

			vampRot.Roll += 0.25;

			transformationCamera.cameraRot.Roll += 0.25;

			if(vampRot.Roll > 30)
			{
				vampRot.Roll = 30;
			}

			if(transformationCamera.cameraRot.Roll > 20)
			{
				transformationCamera.cameraRot.Roll = 20;
			}
		
			if(multiplier >= 1.0)
			{
				//GetACSTransformationVampireMonster().SetAnimationTimeMultiplier(1.5);
			}
		}

		if(theInput.GetActionValue('GI_AxisLeftX') < 0)
		{
			if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flying_Right'))
			{
				GetACSTransformationVampireMonster().RemoveTag('ACS_Vampire_Monster_Flying_Right');
			}

			if (!GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flying_Left') && !GetTransformationVampireMonsterAttackProcess())
			{
				if(ACS_can_transformation_dodge())
				{
					ACS_refresh_transformation_dodge_cooldown();

					RemoveTimer('TransformationVampireMonsterLDashEnd');
					RemoveTimer('TransformationVampireMonsterRDashEnd');

					if(theInput.GetActionValue('Sprint'))
					{
						GetACSTransformationVampireMonster().DestroyEffect('dash_appear');
						GetACSTransformationVampireMonster().PlayEffectSingle('dash_appear');
						GetACSTransformationVampireMonster().StopEffect('dash_appear');

						GetACSTransformationVampireMonster().DestroyEffect('third_teleport_out');
						GetACSTransformationVampireMonster().PlayEffectSingle('third_teleport_out');
						GetACSTransformationVampireMonster().StopEffect('third_teleport_out');
					}

					ACSTransformVampireMonsterPlayAnim('dettlaff_fly_dash_r_end_ACS', 0.25f, 0.25f);

					AddTimer('TransformationVampireMonsterLDashEnd', 2, false);

					GetACSTransformationVampireMonster().AddTag('ACS_Vampire_Monster_Flying_Left');
				}
			}

			vampRot.Roll -= 0.25;

			transformationCamera.cameraRot.Roll -= 0.25;

			if(vampRot.Roll < -30)
			{
				vampRot.Roll = -30;
			}

			if(transformationCamera.cameraRot.Roll < -20)
			{
				transformationCamera.cameraRot.Roll = -20;
			}

			if(multiplier >= 1.0)
			{
				//GetACSTransformationVampireMonster().SetAnimationTimeMultiplier(1.5);
			}
		}
	
		if(theInput.GetActionValue('GI_AxisLeftX') == 0)
		{
			if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flying_Left'))
			{
				GetACSTransformationVampireMonster().RemoveTag('ACS_Vampire_Monster_Flying_Left');
			}

			if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flying_Right'))
			{
				GetACSTransformationVampireMonster().RemoveTag('ACS_Vampire_Monster_Flying_Right');
			}

			RemoveTimer('TransformationVampireMonsterLDashEnd');
			RemoveTimer('TransformationVampireMonsterRDashEnd');

			if(vampRot.Roll < 0)
			{
				vampRot.Roll += 0.25;
			}
			
			if(vampRot.Roll > 0)
			{
				vampRot.Roll -= 0.25;
			}

			if(transformationCamera.cameraRot.Roll < 0)
			{
				transformationCamera.cameraRot.Roll += 0.25;
			}
			else if(transformationCamera.cameraRot.Roll > 0)
			{
				transformationCamera.cameraRot.Roll -= 0.25;
			}
		}
		
		if (theInput.GetActionValue('GI_AxisLeftY') == 0)
		{
			if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flying_Straight'))
			{
				GetACSTransformationVampireMonster().RemoveTag('ACS_Vampire_Monster_Flying_Straight');
			}

			if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flying_Back'))
			{
				GetACSTransformationVampireMonster().RemoveTag('ACS_Vampire_Monster_Flying_Back');
			}

			if(vampRot.Pitch < 0)
			{
				vampRot.Pitch += 0.125;
			}
			else if(vampRot.Pitch > 0)
			{
				vampRot.Pitch -= 0.125;
			}
		}

		vampPos += 0.5*VecConeRand(transformationCamera.getHeading(), 0.001,theInput.GetActionValue('GI_AxisLeftY')*multiplier, theInput.GetActionValue('GI_AxisLeftY')*multiplier);	
	
		//vampPos -= 0.5*VecConeRand(transformationCamera.getHeading()+90, 0.001, theInput.GetActionValue('GI_AxisLeftX')*multiplier, theInput.GetActionValue('GI_AxisLeftX')*multiplier);	

		vampPos -= 0.5*VecConeRand(transformationCamera.getHeading()+90, 5, theInput.GetActionValue('GI_AxisLeftX') * 0.25 , theInput.GetActionValue('GI_AxisLeftX') * 0.25 );	
	
		if (thePlayer.IsInCombat())
		{
			vampPos.Z += 0.3*(theInput.GetActionValue('Dodge'))*(multiplier);

			vampPos.Z += 0.3*(theInput.GetActionValue('Roll'))*(multiplier);
		}
		else
		{
			vampPos.Z += 0.3*(theInput.GetActionValue('Jump'))*(multiplier);
		}

		vampPos.Z -= 0.3*theInput.GetActionValue('SwordSheathe')*(multiplier);
		
	
		theGame.GetWorld().NavigationComputeZ( vampPos, vampPos.Z - 128, vampPos.Z + 128, z );

		if(z > vampPos.Z)
		{
			vampPos.Z = z;
		}

		/*
	
		if (vampPos.Z < theGame.GetWorld().GetWaterLevel(vampPos, true))
		{
			vampPos.Z = theGame.GetWorld().GetWaterLevel(vampPos, true);
		}		

		*/
	
		pitchZ = transformationCamera.getPitch();
	
		if(theInput.GetActionValue('GI_AxisLeftY') > 0)
		{
			//vampPos.Z += pitchZ/130*multiplier;
			vampPos.Z += pitchZ/230*multiplier;
		}

		if(theInput.GetActionValue('GI_AxisLeftY') < 0)
		{
			//vampPos.Z -= pitchZ/130*multiplier;
			vampPos.Z -= pitchZ/230*multiplier;
		}
	
		//targetYaw = transformationCamera.getHeading();
		//vampRot.Yaw = AngleApproach( targetYaw, vampRot.Yaw, 10 );


		movementAdjustorVampireMonsterWitcher.RotateTo( ticketVampireMonsterWitcher, transformationCamera.getHeading() );	

		playerRot = theCamera.GetCameraRotation();

		//vampRot.Yaw = playerRot.Yaw;

		//targetYaw = theCamera.GetCameraHeading();

		//vampRot.Yaw = AngleApproach( targetYaw, playerRot.Yaw, 5 );

		vampRot.Yaw = playerRot.Yaw;
	
		//GetACSTransformationVampireMonster().TeleportWithRotation(vampPos, vampRot);

		//vamp1.TeleportWithRotation(vampPos, vampRot);
		//vamp2.TeleportWithRotation(vampPos, vampRot);
	
		//theGame.GetGuiManager().ShowNotification(GetTransformationCamera());

		GetACSTransformationVampireMonster().TeleportWithRotation( vampPos, vampRot );
	}

	function VampFlightControlsRunning()
	{
		var multiplier, z, pitchZ 				 : float;
		var targetYaw 							 : float;
		var weaponEntity 						 : CEntity;
		var to_destroy							 : array< CEntity >;
		var i									 : int;
		var animatedComponent 					 : CAnimatedComponent;
		var settings						 	 : SAnimatedComponentSlotAnimationSettings;
		var actors 						 		 : array<CActor>;
		var vampPos 					 		 : Vector;
		var vampRot, playerRot, newRot 			 : EulerAngles;
		var destVampireMonsterFlight		 	 : Vector;
		var progres 							: float;

		if (GetTransformationVampireMonsterDiveProcess())
		{
			return;
		}

		if (GetACSTransformationVampireMonster().HasTag('ACS_Transformation_Vampire_Monster_Disable_Anim_Played'))
		{
			return;
		}

		vampPos = GetACSTransformationVampireMonster().GetWorldPosition();
		vampRot = GetACSTransformationVampireMonster().GetWorldRotation();

		GetACSTransformationVampireMonster().SetAnimationTimeMultiplier(1);

		movementAdjustorVampireMonsterWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampireMonsterWitcher = movementAdjustorVampireMonsterWitcher.GetRequest( 'ACS_Transformation_VampireMonster_Witcher_Rotate');
		movementAdjustorVampireMonsterWitcher.CancelByName( 'ACS_Transformation_VampireMonster_Witcher_Rotate' );
		movementAdjustorVampireMonsterWitcher.CancelAll();

		ticketVampireMonsterWitcher = movementAdjustorVampireMonsterWitcher.CreateNewRequest( 'ACS_Transformation_VampireMonster_Witcher_Rotate' );
		movementAdjustorVampireMonsterWitcher.AdjustmentDuration( ticketVampireMonsterWitcher, 5.f );
		movementAdjustorVampireMonsterWitcher.MaxRotationAdjustmentSpeed( ticketVampireMonsterWitcher, 5 );




		movementAdjustorVampireMonster = GetACSTransformationVampireMonster().GetMovingAgentComponent().GetMovementAdjustor();

		ticketVampireMonster = movementAdjustorVampireMonster.GetRequest( 'ACS_Transformation_VampireMonster_Rotate');
		movementAdjustorVampireMonster.CancelByName( 'ACS_Transformation_VampireMonster_Rotate' );
		movementAdjustorVampireMonster.CancelAll();

		ticketVampireMonster = movementAdjustorVampireMonster.CreateNewRequest( 'ACS_Transformation_VampireMonster_Rotate' );
		movementAdjustorVampireMonster.AdjustmentDuration( ticketVampireMonster, 0.5f );
		movementAdjustorVampireMonster.MaxRotationAdjustmentSpeed( ticketVampireMonster, 50000000 );

		if (GetACSTransformationVampireMonster().HasTag('ACS_Transformation_Vampire_Has_Abduction_Victim'))
		{
			GetACSTransformationVampireMonsterAbductionVictim().AddEffectDefault( EET_Confusion, thePlayer, 'ACS_Abduction_Confusion' );

			multiplier = 0.125;
		}
		else
		{
			if (GetTransformationVampireMonsterAttackProcess())
			{
				multiplier = 0.25;
			}
			else
			{
				if(theInput.GetActionValue('Sprint') && !GetACSTransformationVampireMonster().HasTag('ACS_Transformation_Vampire_Monster_Camo_Active'))
				{
					multiplier = 1;
				}
				else
				{
					if(theInput.GetActionValue('SwordSheathe'))
					{
						multiplier = 0.25;
					}
					else
					{
						multiplier = 0.5;
					}
				}
			}
		}
	
		if(theInput.GetActionValue('GI_AxisLeftY') > 0)
		{
			if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flying_Back'))
			{
				GetACSTransformationVampireMonster().RemoveTag('ACS_Vampire_Monster_Flying_Back');
			}

			vampRot.Pitch -= 0.125;

			if(vampRot.Pitch < -50)
			{
				vampRot.Pitch = -50;

				if (!GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flying_Straight') && !GetTransformationVampireMonsterAttackProcess())
				{
					if(ACS_can_transformation_dodge())
					{
						ACS_refresh_transformation_dodge_cooldown();

						RemoveTimer('TransformationVampireMonsterLDashEnd');
						RemoveTimer('TransformationVampireMonsterRDashEnd');

						ACSTransformVampireMonsterPlayAnim('dettlaff_flying_up_ACS', 0.5f, 0.875f);

						GetACSTransformationVampireMonster().AddTag('ACS_Vampire_Monster_Flying_Straight');
					}
				}
			}
			else
			{
				if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flying_Straight'))
				{
					GetACSTransformationVampireMonster().RemoveTag('ACS_Vampire_Monster_Flying_Straight');
				}
			}
		
			if(multiplier >= 1.0)
			{
				multiplier = 2.0;

				if (!thePlayer.IsInCombat())
				{
					GetACSTransformationVampireMonster().SetAnimationTimeMultiplier(1.5);
				}
			}
		}

		if(theInput.GetActionValue('GI_AxisLeftY') < 0)
		{
			if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flying_Straight'))
			{
				GetACSTransformationVampireMonster().RemoveTag('ACS_Vampire_Monster_Flying_Straight');
			}

			vampRot.Pitch += 0.125;

			if(vampRot.Pitch > 30)
			{
				if (!GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flying_Back') && !GetTransformationVampireMonsterAttackProcess())
				{
					if(ACS_can_transformation_dodge())
					{
						ACS_refresh_transformation_dodge_cooldown();

						RemoveTimer('TransformationVampireMonsterLDashEnd');
						RemoveTimer('TransformationVampireMonsterRDashEnd');

						ACSTransformVampireMonsterPlayAnim('dettlaff_flying_up_ACS', 0.5f, 0.875f);

						GetACSTransformationVampireMonster().AddTag('ACS_Vampire_Monster_Flying_Back');
					}
				}

				vampRot.Pitch = 30;
			}
			else
			{
				if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flying_Back'))
				{
					GetACSTransformationVampireMonster().RemoveTag('ACS_Vampire_Monster_Flying_Back');
				}
			}
		
			if(multiplier >= 1.0)
			{
				if (!thePlayer.IsInCombat())
				{
					GetACSTransformationVampireMonster().SetAnimationTimeMultiplier(1.5);
				}
			}
		}

		if(theInput.GetActionValue('GI_AxisLeftX') > 0)
		{
			if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flying_Left'))
			{
				GetACSTransformationVampireMonster().RemoveTag('ACS_Vampire_Monster_Flying_Left');
			}

			if (!GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flying_Right') && !GetTransformationVampireMonsterAttackProcess())
			{
				if(ACS_can_transformation_dodge())
				{
					ACS_refresh_transformation_dodge_cooldown();

					RemoveTimer('TransformationVampireMonsterLDashEnd');
					RemoveTimer('TransformationVampireMonsterRDashEnd');

					if(theInput.GetActionValue('Sprint'))
					{
						GetACSTransformationVampireMonster().DestroyEffect('dash_appear');
						GetACSTransformationVampireMonster().PlayEffectSingle('dash_appear');
						GetACSTransformationVampireMonster().StopEffect('dash_appear');

						GetACSTransformationVampireMonster().DestroyEffect('third_teleport_out');
						GetACSTransformationVampireMonster().PlayEffectSingle('third_teleport_out');
						GetACSTransformationVampireMonster().StopEffect('third_teleport_out');
					}

					ACSTransformVampireMonsterPlayAnim('dettlaff_fly_dash_l_end_ACS', 0.25f, 0.25f);

					AddTimer('TransformationVampireMonsterRDashEnd', 2, false);

					GetACSTransformationVampireMonster().AddTag('ACS_Vampire_Monster_Flying_Right');

				}
			}

			vampRot.Roll += 0.25;

			transformationCamera.cameraRot.Roll += 0.5;

			if(vampRot.Roll > 30)
			{
				vampRot.Roll = 30;
			}

			if(transformationCamera.cameraRot.Roll > 20)
			{
				transformationCamera.cameraRot.Roll = 20;
			}
		
			if(multiplier >= 1.0)
			{
				//GetACSTransformationVampireMonster().SetAnimationTimeMultiplier(1.5);
			}
		}

		if(theInput.GetActionValue('GI_AxisLeftX') < 0)
		{
			if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flying_Right'))
			{
				GetACSTransformationVampireMonster().RemoveTag('ACS_Vampire_Monster_Flying_Right');
			}

			if (!GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flying_Left') && !GetTransformationVampireMonsterAttackProcess())
			{
				if(ACS_can_transformation_dodge())
				{
					ACS_refresh_transformation_dodge_cooldown();

					RemoveTimer('TransformationVampireMonsterLDashEnd');
					RemoveTimer('TransformationVampireMonsterRDashEnd');

					if(theInput.GetActionValue('Sprint'))
					{
						GetACSTransformationVampireMonster().DestroyEffect('dash_appear');
						GetACSTransformationVampireMonster().PlayEffectSingle('dash_appear');
						GetACSTransformationVampireMonster().StopEffect('dash_appear');

						GetACSTransformationVampireMonster().DestroyEffect('third_teleport_out');
						GetACSTransformationVampireMonster().PlayEffectSingle('third_teleport_out');
						GetACSTransformationVampireMonster().StopEffect('third_teleport_out');
					}

					ACSTransformVampireMonsterPlayAnim('dettlaff_fly_dash_r_end_ACS', 0.25f, 0.25f);

					AddTimer('TransformationVampireMonsterLDashEnd', 2, false);

					GetACSTransformationVampireMonster().AddTag('ACS_Vampire_Monster_Flying_Left');
				}
			}

			vampRot.Roll -= 0.25;

			transformationCamera.cameraRot.Roll -= 0.5;

			if(vampRot.Roll < -30)
			{
				vampRot.Roll = -30;
			}

			if(transformationCamera.cameraRot.Roll < -20)
			{
				transformationCamera.cameraRot.Roll = -20;
			}

			if(multiplier >= 1.0)
			{
				//GetACSTransformationVampireMonster().SetAnimationTimeMultiplier(1.5);
			}
		}
	
		if(theInput.GetActionValue('GI_AxisLeftX') == 0)
		{
			if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flying_Left'))
			{
				GetACSTransformationVampireMonster().RemoveTag('ACS_Vampire_Monster_Flying_Left');
			}

			if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flying_Right'))
			{
				GetACSTransformationVampireMonster().RemoveTag('ACS_Vampire_Monster_Flying_Right');
			}

			RemoveTimer('TransformationVampireMonsterLDashEnd');
			RemoveTimer('TransformationVampireMonsterRDashEnd');

			if(vampRot.Roll < 0)
			{
				vampRot.Roll += 0.25;
			}
			
			if(vampRot.Roll > 0)
			{
				vampRot.Roll -= 0.25;
			}

			if(transformationCamera.cameraRot.Roll < 0)
			{
				transformationCamera.cameraRot.Roll += 0.5;
			}
			else if(transformationCamera.cameraRot.Roll > 0)
			{
				transformationCamera.cameraRot.Roll -= 0.5;
			}
		}
		
		if (theInput.GetActionValue('GI_AxisLeftY') == 0)
		{
			if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flying_Straight'))
			{
				GetACSTransformationVampireMonster().RemoveTag('ACS_Vampire_Monster_Flying_Straight');
			}

			if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flying_Back'))
			{
				GetACSTransformationVampireMonster().RemoveTag('ACS_Vampire_Monster_Flying_Back');
			}

			if(vampRot.Pitch < 0)
			{
				vampRot.Pitch += 0.125;
			}
			else if(vampRot.Pitch > 0)
			{
				vampRot.Pitch -= 0.125;
			}
		}

		vampPos += 0.5*VecConeRand(transformationCamera.getHeading(), 0.001,theInput.GetActionValue('GI_AxisLeftY')*multiplier, theInput.GetActionValue('GI_AxisLeftY')*multiplier);	
	
		//vampPos -= 0.5*VecConeRand(transformationCamera.getHeading()+90, 0.001, theInput.GetActionValue('GI_AxisLeftX')*multiplier, theInput.GetActionValue('GI_AxisLeftX')*multiplier);	

		if (GetACSTransformationVampireMonster().HasTag('ACS_Transformation_Vampire_Has_Abduction_Victim'))
		{
			vampPos -= 0.5*VecConeRand(transformationCamera.getHeading()+90, 5, theInput.GetActionValue('GI_AxisLeftX') * 0.125 , theInput.GetActionValue('GI_AxisLeftX') * 0.125 );	
		}
		else
		{
			vampPos -= 0.5*VecConeRand(transformationCamera.getHeading()+90, 5, theInput.GetActionValue('GI_AxisLeftX') * 0.25 , theInput.GetActionValue('GI_AxisLeftX') * 0.25 );	
		}
	
		if (thePlayer.IsInCombat())
		{
			if (GetACSTransformationVampireMonster().HasTag('ACS_Transformation_Vampire_Has_Abduction_Victim'))
			{
				vampPos.Z += 0.5*(theInput.GetActionValue('Dodge'))*(0.125);

				vampPos.Z += 0.5*(theInput.GetActionValue('Roll'))*(0.125);
			}
			else
			{
				vampPos.Z += 0.5*(theInput.GetActionValue('Dodge'))*(0.25);

				vampPos.Z += 0.5*(theInput.GetActionValue('Roll'))*(0.25);
			}
		}
		else
		{
			if (GetACSTransformationVampireMonster().HasTag('ACS_Transformation_Vampire_Has_Abduction_Victim'))
			{
				vampPos.Z += 0.5*(theInput.GetActionValue('Jump'))*(0.125);
			}
			else
			{
				vampPos.Z += 0.5*(theInput.GetActionValue('Jump'))*(0.25);
			}
		}

		vampPos.Z -= 0.5*theInput.GetActionValue('SwordSheathe')*(0.25);
		
	
		theGame.GetWorld().NavigationComputeZ( vampPos, vampPos.Z - 128, vampPos.Z + 128, z );

		if(z > vampPos.Z)
		{
			vampPos.Z = z;
		}

		/*
	
		if (vampPos.Z < theGame.GetWorld().GetWaterLevel(vampPos, true))
		{
			vampPos.Z = theGame.GetWorld().GetWaterLevel(vampPos, true);
		}		

		*/
	
		pitchZ = transformationCamera.getPitch();
	
		if(theInput.GetActionValue('GI_AxisLeftY') > 0)
		{
			//vampPos.Z += pitchZ/130*multiplier;
			vampPos.Z += pitchZ/230*multiplier;
		}

		if(theInput.GetActionValue('GI_AxisLeftY') < 0)
		{
			//vampPos.Z -= pitchZ/130*multiplier;
			vampPos.Z -= pitchZ/230*multiplier;
		}
	
		//targetYaw = transformationCamera.getHeading();
		//vampRot.Yaw = AngleApproach( targetYaw, vampRot.Yaw, 10 );


		movementAdjustorVampireMonsterWitcher.RotateTo( ticketVampireMonsterWitcher, transformationCamera.getHeading() );	

		playerRot = theCamera.GetCameraRotation();

		//vampRot.Yaw = playerRot.Yaw;

		//targetYaw = theCamera.GetCameraHeading();

		//vampRot.Yaw = AngleApproach( targetYaw, playerRot.Yaw, 5 );

		vampRot.Yaw = playerRot.Yaw;
	
		//GetACSTransformationVampireMonster().TeleportWithRotation(vampPos, vampRot);

		//vamp1.TeleportWithRotation(vampPos, vampRot);
		//vamp2.TeleportWithRotation(vampPos, vampRot);
	
		//theGame.GetGuiManager().ShowNotification(GetTransformationCamera());

		GetACSTransformationVampireMonster().TeleportWithRotation( vampPos, vampRot );
	}

	function DisableTransformationVampireMonster()
	{
		var vampRot, adjustedRot 					: EulerAngles;

		if ( theGame.IsDialogOrCutscenePlaying() 
		|| thePlayer.IsInNonGameplayCutscene() 
		|| thePlayer.IsInGameplayScene() 
		|| theGame.IsCurrentlyPlayingNonGameplayScene()
		)
		{
			DisableTransformationVampireMonster_Actual_No_Teleport();
		}
		else
		{
			if (!GetACSTransformationVampireMonster().HasTag('ACS_Transformation_Vampire_Monster_Disable_Anim_Played'))
			{
				SetTransformationVampireMonsterDiveProcess(false);

				SetTransformationVampireMonsterAttackProcess(false);

				GetACSTransformationVampireMonster().DestroyEffect('disappear_');

				GetACSTransformationVampireMonster().StopEffect('avatar_death_swollen_no_decal');
				GetACSTransformationVampireMonster().PlayEffectSingle('avatar_death_swollen_no_decal');

				if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Ground_Mode'))
				{
					ACSTransformVampireMonsterPlayAnim('dettlaff_fly_phase2_start', 0.5f, 0.25f);
				}
				else if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flight_Mode'))
				{
					GetACSTransformationVampireMonster().DestroyEffect('start_effect');
					GetACSTransformationVampireMonster().PlayEffectSingle('start_effect');

					GetACSTransformationVampireMonster().DestroyEffect('dive_smoke');
					GetACSTransformationVampireMonster().PlayEffectSingle('dive_smoke');
					GetACSTransformationVampireMonster().StopEffect('dive_smoke');
					
					ACSTransformVampireMonsterPlayAnim('dettlaff_diving', 0.5f, 0.25f);
				}

				if (transformationCamera.cameraRot.Roll>=0)
				{
					transformationCamera.cameraRot.Roll = 0;
				}
				else if (transformationCamera.cameraRot.Roll<=0)
				{
					transformationCamera.cameraRot.Roll = 0;
				}

				vampRot = GetACSTransformationVampireMonster().GetWorldRotation();

				adjustedRot = EulerAngles(0,0,0);

				adjustedRot.Yaw = vampRot.Yaw;

				GetACSTransformationVampireMonster().TeleportWithRotation(ACSFixZAxis(GetACSTransformationVampireMonster().GetWorldPosition()), adjustedRot);

				thePlayer.TeleportWithRotation(ACSFixZAxis(GetACSTransformationVampireMonster().GetWorldPosition()), adjustedRot);
				
				RemoveTimer('Vampire_Monster_Bat_Swarm');

				RemoveTimer('Vampire_Monster_Bats_Gatling');

				//GetWitcherPlayer().SoundEvent("q704_bats_stop");
				//GetWitcherPlayer().SoundEvent("q704_bats_stop");

				RemoveTimer('Vampire_Monster_Bat_Swarm_Restore');

				RemoveTimer('VampFlightControls');

				GetACSTransformationVampireMonster().AddTag('ACS_Transformation_Vampire_Monster_Disable_Anim_Played');
			}

			RemoveTimer('TransformationVampireMonsterLDashEnd');
			RemoveTimer('TransformationVampireMonsterRDashEnd');

			RemoveTimer('DisableTransformationVampireMonsterStart');

			if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Ground_Mode'))
			{
				AddTimer('DisableTransformationVampireMonsterStart', 1.5, false);
			}
			else if (GetACSTransformationVampireMonster().HasTag('ACS_Vampire_Monster_Flight_Mode'))
			{
				AddTimer('DisableTransformationVampireMonsterStart', 3, false);
			}
		}
	}

	function DisableTransformationVampireMonster_Actual()
	{
		var playerAnimcomp						: CAnimatedComponent;
		var playerPos, newPlayerPos				: Vector;
		var playerRot, adjustedRot 				: EulerAngles;

		playerAnimcomp = (CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent');

		if (
		FactsQuerySum("acs_transformation_activated") > 0
		&& FactsQuerySum("acs_vampire_monster_transformation_activated") > 0
		)
		{
			//Deactivate_Painting_Env();

			SetTransformationVampireMonsterDiveProcess(false);

			SetTransformationVampireMonsterAttackProcess(false);

			TransformationVampireMonsterAbductionEnd();

			GetACSTransformationVampireMonster().DestroyEffect('disappear_');

			RemoveTimer('TransformationVampireMonsterLDashEnd');
			RemoveTimer('TransformationVampireMonsterRDashEnd');

			ACS_VampireBatsSpawnEffect(GetACSTransformationVampireMonster().GetWorldPosition());

			if ( ACS_BruxaDashSprintOrW() == 1 
			|| ACS_WraithModeSprintOrW() == 1
			)
			{
				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'Sprint' );
				theInput.RegisterListener( this, 'OnCommSprint', 'Sprint' );
			}
			else
			{
				theInput.UnregisterListener( this, 'Sprint' );
				theInput.RegisterListener( thePlayer.GetInputHandler(), 'OnCommSprint', 'Sprint' );
			}

			RemoveTimer('Vampire_Monster_Bat_Swarm');

			//GetWitcherPlayer().SoundEvent("q704_bats_stop");
			//GetWitcherPlayer().SoundEvent("q704_bats_stop");

			RemoveTimer('Vampire_Monster_Bat_Swarm_Restore');

			RemoveTimer('Vampire_Monster_Bats_Gatling');

			RemoveTimer('VampFlightControls');
			
			FactsRemove("block_geralts_battlecries");

			GetTransformationCamera().Stop();

			GetTransformationCamera().Destroy();

			GetACSTransformationVampireMonsterCameraDummy().Destroy();

			theGame.ReleaseNoSaveLock( ACS_Transformation_Savelock_ID );

			RemoveTimer('Transformation_Werewolf_Fear');

			thePlayer.BreakAttachment();

			FactsRemove("acs_transformation_activated");

			FactsRemove("acs_vampire_monster_transformation_activated");
			
			thePlayer.PlayEffectSingle('smoke_explosion');
			thePlayer.StopEffect('smoke_explosion');

			thePlayer.PlayEffectSingle('teleport');
			thePlayer.StopEffect('teleport');

			thePlayer.RemoveBuffImmunity_AllNegative('ACS_Transformation_Immunity_Negative'); 
			thePlayer.RemoveBuffImmunity_AllCritical('ACS_Transformation_Immunity_Critical'); 

			thePlayer.SetVisibility(true);

			thePlayer.EnableCollisions(true);

			thePlayer.SetCanPlayHitAnim(true); 

			thePlayer.EnableCharacterCollisions(true);

			playerAnimcomp.UnfreezePose();

			//thePlayer.SetAnimationSpeedMultiplier( 1  );

			GetACSTransformationVampireMonster().Teleport(thePlayer.GetWorldPosition() + Vector(0,0,-200));

			GetACSTransformationVampireMonster().DestroyAfter(0.125);

			FactsRemove("ACS_Transformation_Attached");

			thePlayer.UnblockAction(EIAB_CallHorse,				'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_DrawWeapon, 			'ACS_Transformation'); 
			thePlayer.UnblockAction(EIAB_FastTravel, 			'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_InteractionAction, 	'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_Crossbow,				'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_UsableItem,			'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_ThrowBomb,				'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_Parry,					'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_MeditationWaiting,		'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_OpenMeditation,		'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_RadialMenu,			'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_Jump,					'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_QuickSlots, 			'ACS_Transformation');

			playerPos = ACSPlayerFixZAxis(thePlayer.GetWorldPosition());

			if( !theGame.GetWorld().NavigationFindSafeSpot( playerPos, 0.3, 0.3 , newPlayerPos ) )
			{
				theGame.GetWorld().NavigationFindSafeSpot( playerPos, 0.3, 4 , newPlayerPos );
				playerPos = newPlayerPos;
			}

			playerRot = thePlayer.GetWorldRotation();

			adjustedRot = EulerAngles(0,0,0);

			adjustedRot.Yaw = playerRot.Yaw;

			thePlayer.TeleportWithRotation(ACSPlayerFixZAxis(playerPos), adjustedRot);
		}
	}

	function DisableTransformationVampireMonster_Actual_No_Teleport()
	{
		var playerAnimcomp						: CAnimatedComponent;
		var playerPos, newPlayerPos				: Vector;
		var playerRot, adjustedRot 				: EulerAngles;

		playerAnimcomp = (CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent');

		if (
		FactsQuerySum("acs_transformation_activated") > 0
		&& FactsQuerySum("acs_vampire_monster_transformation_activated") > 0
		)
		{
			//Deactivate_Painting_Env();

			SetTransformationVampireMonsterDiveProcess(false);

			SetTransformationVampireMonsterAttackProcess(false);

			TransformationVampireMonsterAbductionEnd();

			GetACSTransformationVampireMonster().DestroyEffect('disappear_');

			RemoveTimer('TransformationVampireMonsterLDashEnd');
			RemoveTimer('TransformationVampireMonsterRDashEnd');

			ACS_VampireBatsSpawnEffect(GetACSTransformationVampireMonster().GetWorldPosition());

			if ( ACS_BruxaDashSprintOrW() == 1 
			|| ACS_WraithModeSprintOrW() == 1
			)
			{
				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'Sprint' );
				theInput.RegisterListener( this, 'OnCommSprint', 'Sprint' );
			}
			else
			{
				theInput.UnregisterListener( this, 'Sprint' );
				theInput.RegisterListener( thePlayer.GetInputHandler(), 'OnCommSprint', 'Sprint' );
			}

			RemoveTimer('Vampire_Monster_Bat_Swarm');

			//GetWitcherPlayer().SoundEvent("q704_bats_stop");
			//GetWitcherPlayer().SoundEvent("q704_bats_stop");

			RemoveTimer('Vampire_Monster_Bat_Swarm_Restore');

			RemoveTimer('Vampire_Monster_Bats_Gatling');

			RemoveTimer('VampFlightControls');
			
			FactsRemove("block_geralts_battlecries");

			GetTransformationCamera().Stop();

			GetTransformationCamera().Destroy();

			GetACSTransformationVampireMonsterCameraDummy().Destroy();

			theGame.ReleaseNoSaveLock( ACS_Transformation_Savelock_ID );

			RemoveTimer('Transformation_Werewolf_Fear');

			thePlayer.BreakAttachment();

			FactsRemove("acs_transformation_activated");

			FactsRemove("acs_vampire_monster_transformation_activated");
			
			thePlayer.PlayEffectSingle('smoke_explosion');
			thePlayer.StopEffect('smoke_explosion');

			thePlayer.PlayEffectSingle('teleport');
			thePlayer.StopEffect('teleport');

			thePlayer.RemoveBuffImmunity_AllNegative('ACS_Transformation_Immunity_Negative'); 
			thePlayer.RemoveBuffImmunity_AllCritical('ACS_Transformation_Immunity_Critical'); 

			thePlayer.SetVisibility(true);

			thePlayer.EnableCollisions(true);

			thePlayer.SetCanPlayHitAnim(true); 

			thePlayer.EnableCharacterCollisions(true);

			playerAnimcomp.UnfreezePose();

			//thePlayer.SetAnimationSpeedMultiplier( 1  );

			GetACSTransformationVampireMonster().Teleport(thePlayer.GetWorldPosition() + Vector(0,0,-200));

			GetACSTransformationVampireMonster().DestroyAfter(0.125);

			FactsRemove("ACS_Transformation_Attached");

			thePlayer.UnblockAction(EIAB_CallHorse,				'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_DrawWeapon, 			'ACS_Transformation'); 
			thePlayer.UnblockAction(EIAB_FastTravel, 			'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_InteractionAction, 	'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_Crossbow,				'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_UsableItem,			'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_ThrowBomb,				'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_Parry,					'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_MeditationWaiting,		'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_OpenMeditation,		'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_RadialMenu,			'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_Jump,					'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_QuickSlots, 			'ACS_Transformation');

			playerPos = thePlayer.GetWorldPosition();

			playerRot = thePlayer.GetWorldRotation();

			adjustedRot = EulerAngles(0,0,0);

			adjustedRot.Yaw = playerRot.Yaw;

			thePlayer.TeleportWithRotation(playerPos, adjustedRot);
		}
	}

	public timer function ACS_Fall_Up_Timer ( dt : float, id : int){ ACS_Fall_Up(); } 

	function ACS_Fall_Up()
	{
		var actor							: CActor; 
		var enemyAnimatedComponent 			: CAnimatedComponent;
		var actors		    				: array<CActor>;
		var i								: int;
		var npc								: CNewNPC;

		actors.Clear();

		actors = thePlayer.GetNPCsAndPlayersInRange( 999, 999, , FLAG_OnlyAliveActors + FLAG_ExcludePlayer);

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				npc = (CNewNPC)actors[i];

				actor = actors[i];

				enemyAnimatedComponent = (CAnimatedComponent)actor.GetComponentByClassName( 'CAnimatedComponent' );		
				
				enemyAnimatedComponent.PlaySlotAnimationAsync( 'fall_up_idle_ACS', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.875f));
			}
		}
	}

	var vACS_Spawn_Transformation_Werewolf: cACS_Spawn_Transformation_Werewolf;

	function Spawn_Transformation_Werewolf()
	{
		vACS_Spawn_Transformation_Werewolf = new cACS_Spawn_Transformation_Werewolf in this;
				
		vACS_Spawn_Transformation_Werewolf.Spawn_Transformation_Werewolf_Engage();
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////

	var vACS_Spawn_Transformation_Red_Miasmal: cACS_Spawn_Transformation_Red_Miasmal;

	function GetTransformationRedMiasmalClass() : cACS_Spawn_Transformation_Red_Miasmal
	{
		vACS_Spawn_Transformation_Red_Miasmal = new cACS_Spawn_Transformation_Red_Miasmal in this;

		return vACS_Spawn_Transformation_Red_Miasmal;
	}

	function Spawn_Transformation_Red_Miasmal()
	{		
		GetTransformationRedMiasmalClass().Spawn_Transformation_Red_Miasmal_Engage();
	}

	function ACS_RedMiasmalBehSwitch()
	{	
		GetTransformationRedMiasmalClass().ACS_RedMiasmalBehSwitch_Engage();
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////

	var vACS_Spawn_Transformation_Sharley: cACS_Spawn_Transformation_Sharley;

	function GetTransformationSharleyClass() : cACS_Spawn_Transformation_Sharley
	{
		vACS_Spawn_Transformation_Sharley = new cACS_Spawn_Transformation_Sharley in this;

		return vACS_Spawn_Transformation_Sharley;
	}

	function Spawn_Transformation_Sharley()
	{		
		GetTransformationSharleyClass().Spawn_Transformation_Sharley_Engage();
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////

	var vACS_Spawn_Transformation_Black_Wolf: cACS_Spawn_Transformation_Black_Wolf;

	function GetTransformationBlackWolfClass() : cACS_Spawn_Transformation_Black_Wolf
	{
		vACS_Spawn_Transformation_Black_Wolf = new cACS_Spawn_Transformation_Black_Wolf in this;

		return vACS_Spawn_Transformation_Black_Wolf;
	}

	function Spawn_Transformation_Black_Wolf()
	{		
		GetTransformationBlackWolfClass().Spawn_Transformation_Black_Wolf_Engage();
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////

	var vACS_Transformation_Vampire_Monster: cACS_Transformation_Vampire_Monster;

	function GetVampireMonsterClass() : cACS_Transformation_Vampire_Monster
	{
		vACS_Transformation_Vampire_Monster = new cACS_Transformation_Vampire_Monster in this;

		return vACS_Transformation_Vampire_Monster;
	}

	function Spawn_Transformation_Vampire_Monster()
	{	
		theInput.UnregisterListener( thePlayer.GetInputHandler(), 'Sprint' );
		theInput.RegisterListener( this, 'OnCommSprint', 'Sprint' );

		GetVampireMonsterClass().Spawn_Transformation_Vampire_Monster_Engage();
	}

	function ACS_VampireMonsterBehSwitch()
	{	
		if(theInput.GetActionValue('Sprint'))
		{
			return;
		}

		if (GetTransformationVampireMonsterDiveProcess())
		{
			return;
		}

		if (!GetACSTransformationVampireMonster().IsOnGround())
		{
			return;
		}

		if (transformationCamera.cameraRot.Roll>=0)
		{
			transformationCamera.cameraRot.Roll = 0;
		}
		else if (transformationCamera.cameraRot.Roll<=0)
		{
			transformationCamera.cameraRot.Roll = 0;
		}

		GetVampireMonsterClass().ACS_VampireMonsterBehSwitch_Engage();
	}

	function ACS_VampireMonsterArmorSwitch()
	{
		if (!GetACSTransformationVampireMonster().HasTag('ACS_Transformation_Vampire_Monster_Blood_Armor'))
		{
			//GetACSTransformationVampireMonster().DestroyEffect('shadowdash_body_blood');
			//GetACSTransformationVampireMonster().PlayEffectSingle('shadowdash_body_blood');
			//GetACSTransformationVampireMonster().StopEffect('shadowdash_body_blood');

			GetACSTransformationVampireMonster().DestroyEffect('body_blood_drip');
			GetACSTransformationVampireMonster().PlayEffectSingle('body_blood_drip');
			GetACSTransformationVampireMonster().StopEffect('body_blood_drip');

			GetACSTransformationVampireMonster().DestroyEffect('start_effect');
			GetACSTransformationVampireMonster().PlayEffectSingle('start_effect');

			GetACSTransformationVampireMonster().DestroyEffect('comming_out');
			GetACSTransformationVampireMonster().PlayEffectSingle('comming_out');
			GetACSTransformationVampireMonster().StopEffect('comming_out');

			GetACSTransformationVampireMonster().DestroyEffect('shadowdash_end');
			GetACSTransformationVampireMonster().PlayEffectSingle('shadowdash_end');
			GetACSTransformationVampireMonster().StopEffect('shadowdash_end');

			thePlayer.SoundEvent("monster_dettlaff_monster_vein_dies");

			thePlayer.SoundEvent("monster_dettlaff_monster_vein_hit_blood");

			GetACSTransformationVampireMonster().AddTag('ACS_Transformation_Vampire_Monster_Blood_Armor');
		}
		else
		{
			GetACSTransformationVampireMonster().DestroyEffect('body_blood_drip');
			GetACSTransformationVampireMonster().PlayEffectSingle('body_blood_drip');
			GetACSTransformationVampireMonster().StopEffect('body_blood_drip');

			GetACSTransformationVampireMonster().DestroyEffect('start_effect');
			GetACSTransformationVampireMonster().PlayEffectSingle('start_effect');

			GetACSTransformationVampireMonster().DestroyEffect('comming_out');
			GetACSTransformationVampireMonster().PlayEffectSingle('comming_out');
			GetACSTransformationVampireMonster().StopEffect('comming_out');

			GetACSTransformationVampireMonster().DestroyEffect('avatar_death_swollen_no_decal');
			GetACSTransformationVampireMonster().PlayEffectSingle('avatar_death_swollen_no_decal');
			GetACSTransformationVampireMonster().StopEffect('avatar_death_swollen_no_decal');

			thePlayer.SoundEvent("monster_dettlaff_monster_vein_dies");

			thePlayer.SoundEvent("monster_dettlaff_monster_vein_hit_blood");

			GetACSTransformationVampireMonster().RemoveTag('ACS_Transformation_Vampire_Monster_Blood_Armor');
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////

	var vACS_Vampiress: cACS_Transformation_Vampiress;

	function GetVampiressClass() : cACS_Transformation_Vampiress
	{
		vACS_Vampiress = new cACS_Transformation_Vampiress in this;

		return vACS_Vampiress;
	}

	function Spawn_Transformation_Vampiress()
	{
		theInput.UnregisterListener( thePlayer.GetInputHandler(), 'Sprint' );
		theInput.RegisterListener( this, 'OnCommSprint', 'Sprint' );
				
		GetVampiressClass().Spawn_Transformation_Vampiress_Engage();
	}

	function Spawn_Transformation_Bruxa()
	{
		theInput.UnregisterListener( thePlayer.GetInputHandler(), 'Sprint' );
		theInput.RegisterListener( this, 'OnCommSprint', 'Sprint' );
				
		GetVampiressClass().Spawn_Transformation_Bruxa_Engage();
	}

	function ACS_VampiressBehSwitch()
	{	
		GetVampiressClass().ACS_VampiressBehSwitch_Engage();
	}

	function ACS_ChaosMeteorStorm()
	{	
		GetVampiressClass().Chaos_Meteorite_Storm_Engage();
	}

	function ACS_ChaosMeteorSingleSummon()
	{	
		GetVampiressClass().Chaos_Meteorite_Single_Summon_Engage();
	}

	function ACS_ChaosMeteorSingleFire()
	{
		GetVampiressClass().Chaos_Meteorite_Single_Fire_Engage();
	}

	function ACS_ChaosMagmaSummon()
	{	
		GetVampiressClass().Chaos_Magma_Summon_Engage();
	}

	function ACS_ChaosMagmaLine()
	{
		GetVampiressClass().Chaos_Magma_Line_Engage();
	}

	function ACS_ChaosTornado()
	{
		GetVampiressClass().Chaos_Tornado_Engage();
	}

	function ACS_ChaosLightning()
	{
		GetVampiressClass().Chaos_Lightning_Targeted_Engage();
	}

	function ACS_ChaosCloud()
	{
		GetVampiressClass().Chaos_Cloud_Summon_Engage();
	}

	function ACS_ChaosWoodProj()
	{
		GetVampiressClass().Chaos_Wood_Projectile_Engage();
	}

	function ACS_ChaosRootProjectile()
	{
		GetVampiressClass().Chaos_Root_Projectile_Engage();
	}

	function ACS_ChaosIceExplosion()
	{
		GetVampiressClass().Chaos_Ice_Explosion_Engage();
	}

	function ACS_ChaosSnowballSingleSummon()
	{	
		GetVampiressClass().Chaos_Snowball_Single_Summon_Engage();
	}

	function ACS_ChaosSnowball()
	{
		GetVampiressClass().Chaos_Snowball_Engage();
	}

	function ACS_ChaosVacuumOrb()
	{
		GetVampiressClass().Chaos_Vacuum_Orb_Engage();
	}

	function ACS_ChaosOrb()
	{
		GetVampiressClass().Chaos_Orb_Small_Engage();
	}

	function Chaos_Arena_Engage()
	{
		GetVampiressClass().Chaos_Arena_Engage();
	}

	function Chaos_Drain_Engage()
	{
		GetVampiressClass().Chaos_Drain_Engage();
	}

	public timer function ACS_Vampiress_Hand_Fx_Delay ( dt : float, id : int)
	{ 
		GetACSTransformationVampiress().StopEffect('hand_fx');

		GetACSTransformationVampiress().PlayEffectSingle('hand_fx');

		GetACSTransformationVampiress().StopEffect('hand_fx_l');

		GetACSTransformationVampiress().PlayEffectSingle('hand_fx_l');

		GetACSTransformationVampiress().PlayEffectSingle('teleport_out' );

		GetACSTransformationVampiress().StopEffect('teleport_out');

		GetACSTransformationVampiress().PlayEffectSingle('igni_reaction_djinn' );
	} 



	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	var vACS_Transformation_Toad: cACS_Transformation_Toad;

	function GetTransformationToadClass() : cACS_Transformation_Toad
	{
		vACS_Transformation_Toad = new cACS_Transformation_Toad in this;

		return vACS_Transformation_Toad;
	}

	function Spawn_Transformation_Toad()
	{
		theInput.UnregisterListener( thePlayer.GetInputHandler(), 'Sprint' );
		theInput.RegisterListener( this, 'OnCommSprint', 'Sprint' );
				
		GetTransformationToadClass().Spawn_Transformation_Toad_Engage();
	}

	public timer function DisableToadStart(deltaTime : float , id : int)
	{
		DisableTransformationToad_Actual();
	}

	function DisableTransformationToad()
	{
		GetACSTransformationToad().StopAllEffects();

		if ( theGame.IsDialogOrCutscenePlaying() 
		|| thePlayer.IsInNonGameplayCutscene() 
		|| thePlayer.IsInGameplayScene() 
		|| theGame.IsCurrentlyPlayingNonGameplayScene()
		)
		{
			DisableTransformationToad_Actual();
		}
		else
		{
			if (!GetACSTransformationToad().HasTag('ACS_Toad_Disable_Anim_Played'))
			{
				GetACSTransformationToad().PlayEffectSingle('jump');
				GetACSTransformationToad().StopEffect('jump');

				GetACSTransformationToad().PlayEffectSingle('screen_slime');
				GetACSTransformationToad().StopEffect('screen_slime');

				GetACSTransformationToad().PlayEffectSingle('landing');
				GetACSTransformationToad().StopEffect('landing');

				ACSTransformToadPlayAnim('monster_toad_taunt_01', 0.25f, 0.25f);
				
				GetACSTransformationToad().AddTag('ACS_Toad_Disable_Anim_Played');
			}

			RemoveTimer('DisableToadStart');

			AddTimer('DisableToadStart', 2, false);
		}
	}

	function DisableTransformationToad_Actual()
	{
		var playerAnimcomp					 : CAnimatedComponent;

		var playerPos, newPlayerPos			: Vector;

		playerAnimcomp = (CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent');

		if (
		FactsQuerySum("acs_transformation_activated") > 0
		&& FactsQuerySum("acs_toad_transformation_activated") > 0
		)
		{
			if ( ACS_BruxaDashSprintOrW() == 1 
			|| ACS_WraithModeSprintOrW() == 1
			)
			{
				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'Sprint' );
				theInput.RegisterListener( this, 'OnCommSprint', 'Sprint' );
			}
			else
			{
				theInput.UnregisterListener( this, 'Sprint' );
				theInput.RegisterListener( thePlayer.GetInputHandler(), 'OnCommSprint', 'Sprint' );
			}

			FactsRemove("block_geralts_battlecries");

			GetTransformationCamera().Stop();

			GetTransformationCamera().Destroy();

			theGame.ReleaseNoSaveLock( ACS_Transformation_Savelock_ID );

			RemoveTimer('Transformation_Werewolf_Fear');

			thePlayer.BreakAttachment();

			FactsRemove("acs_transformation_activated");

			FactsRemove("acs_toad_transformation_activated");

			thePlayer.RemoveBuffImmunity_AllNegative('ACS_Transformation_Immunity_Negative'); 
			thePlayer.RemoveBuffImmunity_AllCritical('ACS_Transformation_Immunity_Critical'); 

			thePlayer.SetVisibility(true);

			thePlayer.EnableCollisions(true);

			thePlayer.SetCanPlayHitAnim(true); 

			thePlayer.EnableCharacterCollisions(true);

			GetWitcherPlayer().PlayEffectSingle('smoke_explosion');
			GetWitcherPlayer().StopEffect('smoke_explosion');

			GetWitcherPlayer().PlayEffectSingle('teleport');
			GetWitcherPlayer().StopEffect('teleport');

			playerAnimcomp.UnfreezePose();

			//thePlayer.SetAnimationSpeedMultiplier( 1  );

			FactsRemove("ACS_Transformation_Attached");

			thePlayer.UnblockAction(EIAB_CallHorse,				'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_DrawWeapon, 			'ACS_Transformation'); 
			thePlayer.UnblockAction(EIAB_FastTravel, 			'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_InteractionAction, 	'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_Crossbow,				'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_UsableItem,			'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_ThrowBomb,				'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_Parry,					'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_MeditationWaiting,		'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_OpenMeditation,		'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_RadialMenu,			'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_Jump,					'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_QuickSlots, 			'ACS_Transformation');

			playerPos = ACSPlayerFixZAxis(thePlayer.GetWorldPosition());

			if( !theGame.GetWorld().NavigationFindSafeSpot( playerPos, 0.3, 0.3 , newPlayerPos ) )
			{
				theGame.GetWorld().NavigationFindSafeSpot( playerPos, 0.3, 4 , newPlayerPos );
				playerPos = newPlayerPos;
			}

			thePlayer.TeleportWithRotation(ACSPlayerFixZAxis(playerPos), thePlayer.GetWorldRotation());

			GetACSTransformationToad().Teleport(thePlayer.GetWorldPosition() + Vector(0,0,-200));

			GetACSTransformationToad().DestroyAfter(0.0125);
		}
	}

	public timer function Transformation_Toad_Remove_Stationary_Tag ( dt : float, id : int) 
	{ 
		GetACSTransformationToad().RemoveTag('ACS_Transformation_Toad_Stationary_Transition');
	}

	function TransformationToadRestoreRotation()
	{
		if (GetACSTransformationToad().HasTag('ACS_Transformation_Toad_Stopped_Moving'))
		{
			RemoveTimer('Transformation_Toad_Remove_Stationary_Tag');
			AddTimer('Transformation_Toad_Remove_Stationary_Tag', 1, false);

			GetACSTransformationToad().RemoveTag('ACS_Transformation_Toad_Stopped_Moving');
		}
	}

	function ToadChangeStance()
	{
		if (GetACSTransformationToad().HasTag('ACS_Directional_Change_Anim'))
		{
			RemoveChangeStanceTimers();
			AddTimer('Toad_Change_Stance_Forward', 0.25f, false);

			//ACSTransformVampiressPlayAnim('monster_werewolf_run_f', 0.5f, 0.5f);

			GetACSTransformationToad().RemoveTag('ACS_Directional_Change_Anim');
		}
	}

	function ACSTransformToadMovementAdjustForward()
	{
		movementAdjustorToad = GetACSTransformationToad().GetMovingAgentComponent().GetMovementAdjustor();

		ticketToad = movementAdjustorToad.GetRequest( 'ACS_Transformation_Toad_Rotate');
		movementAdjustorToad.CancelByName( 'ACS_Transformation_Toad_Rotate' );
		movementAdjustorToad.CancelAll();

		ticketToad = movementAdjustorToad.CreateNewRequest( 'ACS_Transformation_Toad_Rotate' );
		movementAdjustorToad.AdjustmentDuration( ticketToad, 0.5 );
		movementAdjustorToad.MaxRotationAdjustmentSpeed( ticketToad, 500000 );

		movementAdjustorToad.RotateTo( ticketToad, VecHeading( theCamera.GetCameraDirection() ) );

		movementAdjustorToadWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketToadWitcher = movementAdjustorToadWitcher.GetRequest( 'ACS_Transformation_Toad_Witcher_Rotate');
		movementAdjustorToadWitcher.CancelByName( 'ACS_Transformation_Toad_Witcher_Rotate' );
		movementAdjustorToadWitcher.CancelAll();

		ticketToadWitcher = movementAdjustorToadWitcher.CreateNewRequest( 'ACS_Transformation_Toad_Witcher_Rotate' );
		movementAdjustorToadWitcher.AdjustmentDuration( ticketToadWitcher, 0.5 );
		movementAdjustorToadWitcher.MaxRotationAdjustmentSpeed( ticketToadWitcher, 500000 );

		movementAdjustorToadWitcher.RotateTo( ticketToadWitcher, VecHeading( theCamera.GetCameraDirection() ) );
	}

	function ACSTransformToadMovementAdjustBackward()
	{
		movementAdjustorToad = GetACSTransformationToad().GetMovingAgentComponent().GetMovementAdjustor();

		ticketToad = movementAdjustorToad.GetRequest( 'ACS_Transformation_Toad_Rotate');
		movementAdjustorToad.CancelByName( 'ACS_Transformation_Toad_Rotate' );
		movementAdjustorToad.CancelAll();

		ticketToad = movementAdjustorToad.CreateNewRequest( 'ACS_Transformation_Toad_Rotate' );
		movementAdjustorToad.AdjustmentDuration( ticketToad, 0.5 );
		movementAdjustorToad.MaxRotationAdjustmentSpeed( ticketToad, 500000 );

		movementAdjustorToad.RotateTo( ticketToad, VecHeading( theCamera.GetCameraDirection() * -5 ) );

		movementAdjustorToadWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketToadWitcher = movementAdjustorToadWitcher.GetRequest( 'ACS_Transformation_Toad_Witcher_Rotate');
		movementAdjustorToadWitcher.CancelByName( 'ACS_Transformation_Toad_Witcher_Rotate' );
		movementAdjustorToadWitcher.CancelAll();

		ticketToadWitcher = movementAdjustorToadWitcher.CreateNewRequest( 'ACS_Transformation_Toad_Witcher_Rotate' );
		movementAdjustorToadWitcher.AdjustmentDuration( ticketToadWitcher, 0.5 );
		movementAdjustorToadWitcher.MaxRotationAdjustmentSpeed( ticketToadWitcher, 500000 );

		movementAdjustorToadWitcher.RotateTo( ticketToadWitcher, VecHeading( theCamera.GetCameraDirection() * -5 ) );
	}

	function ACSTransformToadMovementAdjustRight()
	{
		movementAdjustorToad = GetACSTransformationToad().GetMovingAgentComponent().GetMovementAdjustor();

		ticketToad = movementAdjustorToad.GetRequest( 'ACS_Transformation_Toad_Rotate');
		movementAdjustorToad.CancelByName( 'ACS_Transformation_Toad_Rotate' );
		movementAdjustorToad.CancelAll();

		ticketToad = movementAdjustorToad.CreateNewRequest( 'ACS_Transformation_Toad_Rotate' );
		movementAdjustorToad.AdjustmentDuration( ticketToad, 0.5 );
		movementAdjustorToad.MaxRotationAdjustmentSpeed( ticketToad, 500000 );

		movementAdjustorToad.RotateTo( ticketToad, VecHeading( theCamera.GetCameraDirection() + theCamera.GetCameraRight() * 5 ) );




		movementAdjustorToadWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketToadWitcher = movementAdjustorToadWitcher.GetRequest( 'ACS_Transformation_Toad_Witcher_Rotate');
		movementAdjustorToadWitcher.CancelByName( 'ACS_Transformation_Toad_Witcher_Rotate' );
		movementAdjustorToadWitcher.CancelAll();

		ticketToadWitcher = movementAdjustorToadWitcher.CreateNewRequest( 'ACS_Transformation_Toad_Witcher_Rotate' );
		movementAdjustorToadWitcher.AdjustmentDuration( ticketToadWitcher, 0.5 );
		movementAdjustorToadWitcher.MaxRotationAdjustmentSpeed( ticketToadWitcher, 500000 );

		movementAdjustorToadWitcher.RotateTo( ticketToadWitcher, VecHeading( theCamera.GetCameraDirection() + theCamera.GetCameraRight() * 5 ) );
	}

	function ACSTransformToadMovementAdjustLeft()
	{
		movementAdjustorToad = GetACSTransformationToad().GetMovingAgentComponent().GetMovementAdjustor();

		ticketToad = movementAdjustorToad.GetRequest( 'ACS_Transformation_Toad_Rotate');
		movementAdjustorToad.CancelByName( 'ACS_Transformation_Toad_Rotate' );
		movementAdjustorToad.CancelAll();

		ticketToad = movementAdjustorToad.CreateNewRequest( 'ACS_Transformation_Toad_Rotate' );
		movementAdjustorToad.AdjustmentDuration( ticketToad, 0.5 );
		movementAdjustorToad.MaxRotationAdjustmentSpeed( ticketToad, 500000 );

		movementAdjustorToad.RotateTo( ticketToad, VecHeading( theCamera.GetCameraDirection() + theCamera.GetCameraRight() * -5 ) );



		movementAdjustorToadWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketToadWitcher = movementAdjustorToadWitcher.GetRequest( 'ACS_Transformation_Toad_Witcher_Rotate');
		movementAdjustorToadWitcher.CancelByName( 'ACS_Transformation_Toad_Witcher_Rotate' );
		movementAdjustorToadWitcher.CancelAll();

		ticketToadWitcher = movementAdjustorToadWitcher.CreateNewRequest( 'ACS_Transformation_Toad_Witcher_Rotate' );
		movementAdjustorToadWitcher.AdjustmentDuration( ticketToadWitcher, 0.5 );
		movementAdjustorToadWitcher.MaxRotationAdjustmentSpeed( ticketToadWitcher, 500000 );

		movementAdjustorToadWitcher.RotateTo( ticketToadWitcher, VecHeading( theCamera.GetCameraDirection() + theCamera.GetCameraRight() * -5 ) );
	}

	function ACSTransformToadMovementAdjustForwardRight()
	{
		movementAdjustorToad = GetACSTransformationToad().GetMovingAgentComponent().GetMovementAdjustor();

		ticketToad = movementAdjustorToad.GetRequest( 'ACS_Transformation_Toad_Rotate');
		movementAdjustorToad.CancelByName( 'ACS_Transformation_Toad_Rotate' );
		movementAdjustorToad.CancelAll();

		ticketToad = movementAdjustorToad.CreateNewRequest( 'ACS_Transformation_Toad_Rotate' );
		movementAdjustorToad.AdjustmentDuration( ticketToad, 1 );
		movementAdjustorToad.MaxRotationAdjustmentSpeed( ticketToad, 500000 );

		//movementAdjustorToad.RotateTo( ticketToad, VecHeading( (theCamera.GetCameraDirection() * 5)  + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * 5) ) );

		movementAdjustorToad.RotateTo( ticketToad, VecHeading( (theCamera.GetCameraDirection() * 5) + (theCamera.GetCameraRight() * 5) ) );



		movementAdjustorToadWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketToadWitcher = movementAdjustorToadWitcher.GetRequest( 'ACS_Transformation_Toad_Witcher_Rotate');
		movementAdjustorToadWitcher.CancelByName( 'ACS_Transformation_Toad_Witcher_Rotate' );
		movementAdjustorToadWitcher.CancelAll();

		ticketToadWitcher = movementAdjustorToadWitcher.CreateNewRequest( 'ACS_Transformation_Toad_Witcher_Rotate' );
		movementAdjustorToadWitcher.AdjustmentDuration( ticketToadWitcher, 1 );
		movementAdjustorToadWitcher.MaxRotationAdjustmentSpeed( ticketToadWitcher, 500000 );

		//movementAdjustorToadWitcher.RotateTo( ticketToadWitcher, VecHeading( (theCamera.GetCameraDirection() * 5)  + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * 5) ) );

		movementAdjustorToadWitcher.RotateTo( ticketToadWitcher, VecHeading( (theCamera.GetCameraDirection() * 5)  + (theCamera.GetCameraRight() * 5) ) );
	}

	function ACSTransformToadMovementAdjustForwardLeft()
	{
		movementAdjustorToad = GetACSTransformationToad().GetMovingAgentComponent().GetMovementAdjustor();

		ticketToad = movementAdjustorToad.GetRequest( 'ACS_Transformation_Toad_Rotate');
		movementAdjustorToad.CancelByName( 'ACS_Transformation_Toad_Rotate' );
		movementAdjustorToad.CancelAll();

		ticketToad = movementAdjustorToad.CreateNewRequest( 'ACS_Transformation_Toad_Rotate' );
		movementAdjustorToad.AdjustmentDuration( ticketToad, 1 );
		movementAdjustorToad.MaxRotationAdjustmentSpeed( ticketToad, 500000 );

		//movementAdjustorToad.RotateTo( ticketToad, VecHeading( (theCamera.GetCameraDirection() * 5)  + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * -5) ) );

		movementAdjustorToad.RotateTo( ticketToad, VecHeading( (theCamera.GetCameraDirection() * 5) + (theCamera.GetCameraRight() * -5) ) );



		movementAdjustorToadWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketToadWitcher = movementAdjustorToadWitcher.GetRequest( 'ACS_Transformation_Toad_Witcher_Rotate');
		movementAdjustorToadWitcher.CancelByName( 'ACS_Transformation_Toad_Witcher_Rotate' );
		movementAdjustorToadWitcher.CancelAll();

		ticketToadWitcher = movementAdjustorToadWitcher.CreateNewRequest( 'ACS_Transformation_Toad_Witcher_Rotate' );
		movementAdjustorToadWitcher.AdjustmentDuration( ticketToadWitcher, 1 );
		movementAdjustorToadWitcher.MaxRotationAdjustmentSpeed( ticketToadWitcher, 500000 );

		//movementAdjustorToadWitcher.RotateTo( ticketToadWitcher, VecHeading( (theCamera.GetCameraDirection() * 5) + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * -5) ) );

		movementAdjustorToadWitcher.RotateTo( ticketToadWitcher, VecHeading( (theCamera.GetCameraDirection() * 5) + (theCamera.GetCameraRight() * -5) ) );
	}

	function ACSTransformToadMovementAdjustBackwardRight()
	{
		movementAdjustorToad = GetACSTransformationToad().GetMovingAgentComponent().GetMovementAdjustor();

		ticketToad = movementAdjustorToad.GetRequest( 'ACS_Transformation_Toad_Rotate');
		movementAdjustorToad.CancelByName( 'ACS_Transformation_Toad_Rotate' );
		movementAdjustorToad.CancelAll();

		ticketToad = movementAdjustorToad.CreateNewRequest( 'ACS_Transformation_Toad_Rotate' );
		movementAdjustorToad.AdjustmentDuration( ticketToad, 1 );
		movementAdjustorToad.MaxRotationAdjustmentSpeed( ticketToad, 500000 );

		//movementAdjustorToad.RotateTo( ticketToad, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraForward() * -5) + (theCamera.GetCameraRight() * 5) ) );

		movementAdjustorToad.RotateTo( ticketToad, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraRight() * 5) ) );



		movementAdjustorToadWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketToadWitcher = movementAdjustorToadWitcher.GetRequest( 'ACS_Transformation_Toad_Witcher_Rotate');
		movementAdjustorToadWitcher.CancelByName( 'ACS_Transformation_Toad_Witcher_Rotate' );
		movementAdjustorToadWitcher.CancelAll();

		ticketToadWitcher = movementAdjustorToadWitcher.CreateNewRequest( 'ACS_Transformation_Toad_Witcher_Rotate' );
		movementAdjustorToadWitcher.AdjustmentDuration( ticketToadWitcher, 1 );
		movementAdjustorToadWitcher.MaxRotationAdjustmentSpeed( ticketToadWitcher, 500000 );

		//movementAdjustorToadWitcher.RotateTo( ticketToadWitcher, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraForward() * -5) + (theCamera.GetCameraRight() * 5) ) );

		movementAdjustorToadWitcher.RotateTo( ticketToadWitcher, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraRight() * 5) ) );
	}

	function ACSTransformToadMovementAdjustBackwardLeft()
	{
		movementAdjustorToad = GetACSTransformationToad().GetMovingAgentComponent().GetMovementAdjustor();

		ticketToad = movementAdjustorToad.GetRequest( 'ACS_Transformation_Toad_Rotate');
		movementAdjustorToad.CancelByName( 'ACS_Transformation_Toad_Rotate' );
		movementAdjustorToad.CancelAll();

		ticketToad = movementAdjustorToad.CreateNewRequest( 'ACS_Transformation_Toad_Rotate' );
		movementAdjustorToad.AdjustmentDuration( ticketToad, 1 );
		movementAdjustorToad.MaxRotationAdjustmentSpeed( ticketToad, 500000 );

		//movementAdjustorToad.RotateTo( ticketToad, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraForward() * -5) + (theCamera.GetCameraRight() * -5) ) );

		movementAdjustorToad.RotateTo( ticketToad, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraRight() * -5) ) );



		movementAdjustorToadWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketToadWitcher = movementAdjustorToadWitcher.GetRequest( 'ACS_Transformation_Toad_Witcher_Rotate');
		movementAdjustorToadWitcher.CancelByName( 'ACS_Transformation_Toad_Witcher_Rotate' );
		movementAdjustorToadWitcher.CancelAll();

		ticketToadWitcher = movementAdjustorToadWitcher.CreateNewRequest( 'ACS_Transformation_Toad_Witcher_Rotate' );
		movementAdjustorToadWitcher.AdjustmentDuration( ticketToadWitcher, 1 );
		movementAdjustorToadWitcher.MaxRotationAdjustmentSpeed( ticketToadWitcher, 500000 );

		//movementAdjustorToadWitcher.RotateTo( ticketToadWitcher, VecHeading( theCamera.GetCameraDirection()  + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * -5) ) );

		movementAdjustorToadWitcher.RotateTo( ticketToadWitcher, VecHeading( theCamera.GetCameraDirection() + (theCamera.GetCameraRight() * -5) ) );
	}

	function ACSTransformToadMovementAdjustRotateTowardsEnemy()
	{
		movementAdjustorToad = GetACSTransformationToad().GetMovingAgentComponent().GetMovementAdjustor();

		ticketToad = movementAdjustorToad.GetRequest( 'ACS_Transformation_Toad_Rotate');
		movementAdjustorToad.CancelByName( 'ACS_Transformation_Toad_Rotate' );
		movementAdjustorToad.CancelAll();

		ticketToad = movementAdjustorToad.CreateNewRequest( 'ACS_Transformation_Toad_Rotate' );
		movementAdjustorToad.AdjustmentDuration( ticketToad, 0.5 );
		movementAdjustorToad.MaxRotationAdjustmentSpeed( ticketToad, 500000 );

		if (thePlayer.GetTarget())
		{
			movementAdjustorToad.RotateTowards( ticketToad, thePlayer.GetTarget() );
		}
		else
		{
			movementAdjustorToad.RotateTo( ticketToad, VecHeading( theCamera.GetCameraDirection() ) );
		}
	}

	function ACSTransformToadMovementAdjustRotateTowardsEnemyOffsetRight()
	{
		movementAdjustorToad = GetACSTransformationToad().GetMovingAgentComponent().GetMovementAdjustor();

		ticketToad = movementAdjustorToad.GetRequest( 'ACS_Transformation_Toad_Rotate');
		movementAdjustorToad.CancelByName( 'ACS_Transformation_Toad_Rotate' );
		movementAdjustorToad.CancelAll();

		ticketToad = movementAdjustorToad.CreateNewRequest( 'ACS_Transformation_Toad_Rotate' );
		movementAdjustorToad.AdjustmentDuration( ticketToad, 1 );
		movementAdjustorToad.MaxRotationAdjustmentSpeed( ticketToad, 500000 );

		if (thePlayer.GetTarget())
		{
			movementAdjustorToad.RotateTowards( ticketToad, thePlayer.GetTarget(), 78.75 );
		}
		else
		{
			movementAdjustorToad.RotateTo( ticketToad, VecHeading( theCamera.GetCameraDirection() ) );
		}
	}

	function ACSTransformToadMovementAdjustRotateTowardsEnemyOffsetLeft()
	{
		movementAdjustorToad = GetACSTransformationToad().GetMovingAgentComponent().GetMovementAdjustor();

		ticketToad = movementAdjustorToad.GetRequest( 'ACS_Transformation_Toad_Rotate');
		movementAdjustorToad.CancelByName( 'ACS_Transformation_Toad_Rotate' );
		movementAdjustorToad.CancelAll();

		ticketToad = movementAdjustorToad.CreateNewRequest( 'ACS_Transformation_Toad_Rotate' );
		movementAdjustorToad.AdjustmentDuration( ticketToad, 1 );
		movementAdjustorToad.MaxRotationAdjustmentSpeed( ticketToad, 500000 );

		if (thePlayer.GetTarget())
		{
			movementAdjustorToad.RotateTowards( ticketToad, thePlayer.GetTarget(), -78.75 );
		}
		else
		{
			movementAdjustorToad.RotateTo( ticketToad, VecHeading( theCamera.GetCameraDirection() ) );
		}
	}

	function ACSTransformToadMovementAdjustNormalDash()
	{
		movementAdjustorToad = GetACSTransformationToad().GetMovingAgentComponent().GetMovementAdjustor();

		ticketToad = movementAdjustorToad.GetRequest( 'ACS_Transformation_Toad_Rotate');
		movementAdjustorToad.CancelByName( 'ACS_Transformation_Toad_Rotate' );
		movementAdjustorToad.CancelAll();

		ticketToad = movementAdjustorToad.CreateNewRequest( 'ACS_Transformation_Toad_Rotate' );
		movementAdjustorToad.AdjustmentDuration( ticketToad, 0.25 );
		movementAdjustorToad.MaxRotationAdjustmentSpeed( ticketToad, 500000 );

		movementAdjustorToad.RotateTo( ticketToad, VecHeading(GetACSTransformationToad().GetHeadingVector()) );

		//movementAdjustorToad.SlideTo( ticketToad, ( ACSPlayerFixZAxis(GetACSTransformationToad().GetWorldPosition() + GetACSTransformationToad().GetWorldForward() * 7.5 ) ) );

		//GetACSTransformationToad().SetAnimationSpeedMultiplier( 1.125  );

		//AddTimer('ACS_Vampiress_Reset_Animation_Speed', 0.25, false);

		if (theInput.GetActionValue('GI_AxisLeftY') == 0
		&& theInput.GetActionValue('GI_AxisLeftX') == 0
		)
		{
			ACSTransformToadPlayAnim( 'monster_toad_jump_up', 0.25f, 0.325f);
		}
		else
		{
			ACSTransformToadPlayAnim( 'monster_toad_jump_forward', 0.25f, 0.325f);
		}

		AddTimer('ToadJumpAttackDamage', 1.125, false);
	}

	function ACS_Transformation_Toad_Move_Controls()
	{
		if (thePlayer.IsInCombat())
		{
			if (thePlayer.GetStat(BCS_Toxicity) < thePlayer.GetStatMax(BCS_Toxicity))
			{
				thePlayer.GainStat(BCS_Toxicity, (thePlayer.GetStatMax(BCS_Toxicity) - thePlayer.GetStat(BCS_Toxicity)) * 0.00006125);
			}
			
			thePlayer.DrainVitality(thePlayer.GetStat(BCS_Vitality) * 0.000030625);
		}
		else
		{
			if (thePlayer.GetStat(BCS_Toxicity) < thePlayer.GetStatMax(BCS_Toxicity))
			{
				thePlayer.GainStat(BCS_Toxicity, (thePlayer.GetStatMax(BCS_Toxicity) - thePlayer.GetStat(BCS_Toxicity)) * 0.000030625);
			}
			
			thePlayer.DrainVitality(thePlayer.GetStat(BCS_Vitality) * 0.0000153125);
		}

		GetACSTransformationToad().GetMovingAgentComponent().EnableCombatMode( true );

		GetACSTransformationToad().GetMovingAgentComponent().SetVirtualRadius( 'CombatCharacterRadius' );

		((CNewNPC)GetACSTransformationToad()).SetBehaviorVariable( 'additiveTauntOn', 1, true );

		if (thePlayer.IsInCombat())
		{
			if (thePlayer.GetTarget())
			{
				((CNewNPC)GetACSTransformationToad()).SetBehaviorVectorVariable( 'lookAtTarget', ((CActor)(thePlayer.GetTarget())).GetWorldPosition() );
			}
			else
			{
				((CNewNPC)GetACSTransformationToad()).SetBehaviorVectorVariable( 'lookAtTarget', GetACSLookatEntity().GetWorldPosition() );
			}

			((CNewNPC)GetACSTransformationToad()).SetBehaviorVariable( 'lookatOn', 1, true );
		}
		else
		{
			((CNewNPC)GetACSTransformationToad()).SetBehaviorVectorVariable( 'lookAtTarget', GetACSLookatEntity().GetWorldPosition() );

			((CNewNPC)GetACSTransformationToad()).SetBehaviorVariable( 'lookatOn', 1, true );
		}

		if (GetACSTransformationToad().GetMovingAgentComponent().GetRelativeMoveSpeed() <= 0.1 )
		{
			if
			(
				theInput.GetLastActivationTime( 'GI_AxisLeftX' ) > 1.25f 
				|| theInput.GetLastActivationTime( 'GI_AxisLeftY' ) > 1.25f 
			)	
			{
				GetACSTransformationToad().RemoveTag('ACS_Transformation_Toad_Stationary_Transition');
			}
			else
			{
				RemoveTimer('Transformation_Toad_Remove_Stationary_Tag');

				if (!GetACSTransformationToad().HasTag('ACS_Transformation_Toad_Stopped_Moving'))
				{
					GetACSTransformationToad().AddTag('ACS_Transformation_Toad_Stationary_Transition');

					GetACSTransformationToad().AddTag('ACS_Transformation_Toad_Stopped_Moving');
				}
			}
		}

		if (thePlayer.IsDodgeTimerRunning()
		|| thePlayer.IsCurrentlyDodging() 
		|| GetACSTransformationToad().HasTag('ACS_Transformation_Toad_Is_Attacking')
		)
		{
			GetACSTransformationToad().GetMovingAgentComponent().ForceSetRelativeMoveSpeed( 0 );
			GetACSTransformationToad().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed( 0 );
			return;
		}

		if (theInput.GetActionValue('GI_AxisLeftX') == 0 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
		{
			GetACSTransformationToad().GetMovingAgentComponent().ForceSetRelativeMoveSpeed( 0 );
			GetACSTransformationToad().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed( 0 );
		}
		else
		{
			if (theInput.GetActionValue('GI_AxisLeftY') > 0.1 && theInput.GetActionValue('GI_AxisLeftX') == 0 )
			{
				TransformationToadRestoreRotation();

				GetACSTransformationToad().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationToad().GetHeadingVector()));

				if (!GetACSTransformationToad().HasTag('ACS_Transformation_Toad_Stationary_Transition')
				)
				{
					ACSTransformToadMovementAdjustForward();
				}

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationToad().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationToad().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftY') < -0.1 && theInput.GetActionValue('GI_AxisLeftX') == 0 )
			{
				TransformationToadRestoreRotation();

				if (!GetACSTransformationToad().HasTag('ACS_Transformation_Toad_Stationary_Transition')
				)
				{
					GetACSTransformationToad().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationToad().GetHeadingVector()));
						
					ACSTransformToadMovementAdjustBackward();
				}

				ToadChangeStance();

				GetACSTransformationToad().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationToad().GetHeadingVector()));

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationToad().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationToad().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftX') > 0.1 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
			{
				TransformationToadRestoreRotation();

				ToadChangeStance();

				if (!GetACSTransformationToad().HasTag('ACS_Transformation_Toad_Stationary_Transition')
				)
				{
					ACSTransformToadMovementAdjustRight();
				}

				GetACSTransformationToad().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationToad().GetHeadingVector()));

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationToad().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationToad().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftX') < -0.1 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
			{
				TransformationToadRestoreRotation();

				ToadChangeStance();

				if (!GetACSTransformationToad().HasTag('ACS_Transformation_Toad_Stationary_Transition')
				)
				{
					ACSTransformToadMovementAdjustLeft();
				}

				GetACSTransformationToad().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationToad().GetHeadingVector()));

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationToad().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationToad().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftY') > 0.1 && theInput.GetActionValue('GI_AxisLeftX') > 0.1 )
			{
				TransformationToadRestoreRotation();

				ToadChangeStance();

				if (!GetACSTransformationToad().HasTag('ACS_Transformation_Toad_Stationary_Transition')
				)
				{
					ACSTransformToadMovementAdjustForwardRight();
				}

				GetACSTransformationToad().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationToad().GetHeadingVector()));

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationToad().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationToad().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftY') > 0.1 && theInput.GetActionValue('GI_AxisLeftX') < -0.1 )
			{
				TransformationToadRestoreRotation();

				ToadChangeStance();

				if (!GetACSTransformationToad().HasTag('ACS_Transformation_Toad_Stationary_Transition')
				)
				{
					ACSTransformToadMovementAdjustForwardLeft();
				}

				GetACSTransformationToad().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationToad().GetHeadingVector()));

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationToad().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationToad().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftY') < -0.1 && theInput.GetActionValue('GI_AxisLeftX') > 0.1 )
			{
				TransformationToadRestoreRotation();

				ToadChangeStance();

				if (!GetACSTransformationToad().HasTag('ACS_Transformation_Toad_Stationary_Transition')
				)
				{
					ACSTransformToadMovementAdjustBackwardRight();
				}

				GetACSTransformationToad().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationToad().GetHeadingVector()));

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationToad().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationToad().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftX') < -0.1 && theInput.GetActionValue('GI_AxisLeftY') < -0.1 )
			{
				TransformationToadRestoreRotation();

				ToadChangeStance();

				if (!GetACSTransformationToad().HasTag('ACS_Transformation_Toad_Stationary_Transition')
				)
				{
					ACSTransformToadMovementAdjustBackwardLeft();
				}

				GetACSTransformationToad().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationToad().GetHeadingVector()));

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationToad().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationToad().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
		}
	}

	private var toad_light_attack_index_1																									: int;
	default toad_light_attack_index_1 																										= -1;

	private var previous_toad_light_attack_index_1																							: int;
	default previous_toad_light_attack_index_1 																								= -1;

	private var toad_heavy_attack_index_1																									: int;
	default toad_heavy_attack_index_1 																										= -1;

	private var previous_toad_heavy_attack_index_1																							: int;
	default previous_toad_heavy_attack_index_1 																								= -1;

	function ACS_IsDisplayTargetInFrontOfToad() : bool
	{
		var attackRange, attackAngle 	: float;

		attackRange = 50;

		attackAngle = 60;

		actors.Clear();

		actors = GetACSTransformationToad().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationToad().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == ((CActor)(thePlayer.GetDisplayTarget()))
				)
				{
					return true;
				}
			}
		}

		return false;
	}
	
	function ACS_IsDisplayTargetToTheRightOfToad() : bool
	{
		var attackRange, attackAngle 	: float;

		attackRange = 50;

		attackAngle = 60;

		actors.Clear();

		actors = GetACSTransformationToad().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationToad().GetHeadingVector() + GetACSTransformationToad().GetWorldRight() * 3), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == ((CActor)(thePlayer.GetDisplayTarget()))
				)
				{
					return true;
				}
			}
		}

		return false;
	}

	function ACS_IsDisplayTargetToTheLeftOfToad() : bool
	{
		var attackRange, attackAngle 	: float;

		attackRange = 50;

		attackAngle = 60;

		actors.Clear();

		actors = GetACSTransformationToad().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationToad().GetHeadingVector() + GetACSTransformationToad().GetWorldRight() * -3), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == ((CActor)(thePlayer.GetDisplayTarget()))
				)
				{
					return true;
				}
			}
		}

		return false;
	}

	public timer function ToadRemoveAttackTag(deltaTime : float , id : int)
	{
		GetACSTransformationToad().RemoveTag('ACS_Transformation_Toad_Is_Attacking');
	}

	function ACS_Transformation_Toad_Light_Attacks()
	{
		var targetDistance																						: float;

		targetDistance = VecDistanceSquared2D( GetACSTransformationToad().GetWorldPosition(), (thePlayer.GetTarget()).GetWorldPosition() );

		if (ACS_can_perform_transformation_light_attack())
		{
			ACS_refresh_transformation_light_attack_cooldown();

			ACSTransformationToadRemoveMoveTimers();

			GetACSTransformationToad().AddTag('ACS_Transformation_Toad_Is_Attacking');

			AddTimer('ToadRemoveAttackTag', 1.5, false);

			if (thePlayer.IsInCombat())
			{
				if (theInput.GetActionValue('GI_AxisLeftY') == 0
				&& theInput.GetActionValue('GI_AxisLeftX') == 0
				)
				{
					toad_light_attack_index_1 = RandDifferent(this.previous_toad_light_attack_index_1 , 2);

					switch (toad_light_attack_index_1) 
					{	
						case 1:
						ACSTransformToadMovementAdjustRotateTowardsEnemyOffsetRight();
						ACSTransformToadPlayAnim( 'monster_toad_counter_attack_right', 0.25f, 0.325f);
						AddTimer('ToadLightAttackDamageOffsetRight', 1.125, false);
						break;
						
						default:
						ACSTransformToadMovementAdjustRotateTowardsEnemyOffsetLeft();
						ACSTransformToadPlayAnim( 'monster_toad_counter_attack_left', 0.25f, 0.325f);
						AddTimer('ToadLightAttackDamageOffsetLeft', 1.125, false);
						break;
					}
			
					this.previous_toad_light_attack_index_1 = toad_light_attack_index_1;
				}
				else
				{
					if (thePlayer.GetDisplayTarget())
					{
						if (ACS_IsDisplayTargetInFrontOfToad())
						{
							if (targetDistance <= 6 * 6)
							{
								ACSTransformToadPlayAnim( 'monster_toad_attack_tongue', 0.25f, 0.325f);

								AddTimer('ToadLightAttackTongueDamageShort', 1.125, false);
							}
							else
							{
								ACSTransformToadPlayAnim( 'monster_toad_attack_tongue_10m', 0.25f, 0.325f);

								AddTimer('ToadLightAttackTongueDamageLong', 1.25, false);
							}
						}
						else
						{
							if (ACS_IsDisplayTargetToTheRightOfToad())
							{
								ACSTransformToadPlayAnim( 'monster_toad_walk_turn_right', 0.25f, 0.325f);
							}
							else if (ACS_IsDisplayTargetToTheLeftOfToad())
							{
								ACSTransformToadPlayAnim( 'monster_toad_walk_turn_left', 0.25f, 0.325f);
							}
							else
							{
								if (RandF() < 0.5)
								{
									ACSTransformToadPlayAnim( 'monster_toad_turn_45_left', 0.25f, 0.325f);
								}
								else
								{
									ACSTransformToadPlayAnim( 'monster_toad_turn_45_right', 0.25f, 0.325f);
								}
							}
							
							ACSTransformToadMovementAdjustRotateTowardsEnemy();
						}
					}
					else
					{
						toad_light_attack_index_1 = RandDifferent(this.previous_toad_light_attack_index_1 , 2);

						switch (toad_light_attack_index_1) 
						{	
							case 1:
							ACSTransformToadMovementAdjustRotateTowardsEnemyOffsetRight();
							ACSTransformToadPlayAnim( 'monster_toad_counter_attack_right', 0.25f, 0.325f);
							AddTimer('ToadLightAttackDamageOffsetRight', 1.125, false);
							break;
							
							default:
							ACSTransformToadMovementAdjustRotateTowardsEnemyOffsetLeft();
							ACSTransformToadPlayAnim( 'monster_toad_counter_attack_left', 0.25f, 0.325f);
							AddTimer('ToadLightAttackDamageOffsetLeft', 1.125, false);
							break;
						}
				
						this.previous_toad_light_attack_index_1 = toad_light_attack_index_1;
					}
				}
			}
			else
			{
				if (theInput.GetActionValue('GI_AxisLeftY') == 0
				&& theInput.GetActionValue('GI_AxisLeftX') == 0
				)
				{
					toad_light_attack_index_1 = RandDifferent(this.previous_toad_light_attack_index_1 , 2);

					switch (toad_light_attack_index_1) 
					{	
						case 1:
						ACSTransformToadPlayAnim( 'monster_toad_counter_attack_right', 0.25f, 0.325f);
						AddTimer('ToadLightAttackDamageOffsetRight', 1.125, false);
						break;
						
						default:
						ACSTransformToadPlayAnim( 'monster_toad_counter_attack_left', 0.25f, 0.325f);
						AddTimer('ToadLightAttackDamageOffsetLeft', 1.125, false);
						break;
					}
			
					this.previous_toad_light_attack_index_1 = toad_light_attack_index_1;
				}
				else
				{
					toad_light_attack_index_1 = RandDifferent(this.previous_toad_light_attack_index_1 , 2);

					switch (toad_light_attack_index_1) 
					{	
						case 1:
						ACSTransformToadPlayAnim( 'monster_toad_attack_tongue_10m', 0.25f, 0.325f);
						AddTimer('ToadLightAttackTongueDamageLong', 1.25, false);
						break;
						
						default:
						ACSTransformToadPlayAnim( 'monster_toad_attack_tongue', 0.25f, 0.325f);
						AddTimer('ToadLightAttackTongueDamageShort', 1.125, false);
						break;
					}
			
					this.previous_toad_light_attack_index_1 = toad_light_attack_index_1;
				}
			}
			
			ACS_StaminaDrainForced(5);
		}
	}

	function ACS_Transformation_Toad_Heavy_Attacks()
	{
		var targetDistance																						: float;

		targetDistance = VecDistanceSquared2D( GetACSTransformationToad().GetWorldPosition(), (thePlayer.GetTarget()).GetWorldPosition() );

		if (ACS_can_perform_transformation_heavy_attack())
		{
			ACS_refresh_transformation_heavy_attack_cooldown();

			ACSTransformationToadRemoveMoveTimers();

			GetACSTransformationToad().AddTag('ACS_Transformation_Toad_Is_Attacking');

			AddTimer('ToadRemoveAttackTag', 1.5, false);

			if (thePlayer.IsInCombat())
			{
				if (thePlayer.GetDisplayTarget())
				{
					if (ACS_IsDisplayTargetInFrontOfToad())
					{
						if (targetDistance <= 6 * 6)
						{
							ACSTransformToadPlayAnim( 'monster_toad_attack_vomit', 0.25f, 0.325f);

							AddTimer('ToadHeavyAttackDamage', 1.125, false);
						}
						else
						{
							toad_heavy_attack_index_1 = RandDifferent(this.previous_toad_heavy_attack_index_1 , 3);

							switch (toad_heavy_attack_index_1) 
							{	
								case 2:
								ACSTransformToadPlayAnim( 'monster_toad_attack_spit_03', 0.25f, 0.325f);
								//AddTimer('ToadLightAttackTongueDamageLong', 1.25, false);
								break;

								case 1:
								ACSTransformToadPlayAnim( 'monster_toad_attack_spit_02', 0.25f, 0.325f);
								//AddTimer('ToadLightAttackTongueDamageLong', 1.25, false);
								break;
								
								default:
								ACSTransformToadPlayAnim( 'monster_toad_attack_spit_01', 0.25f, 0.325f);
								//AddTimer('ToadLightAttackTongueDamageShort', 1.125, false);
								break;
							}
					
							this.previous_toad_heavy_attack_index_1 = toad_heavy_attack_index_1;

							AddTimer('ToadHeavyAttackProjectileDelay', 0.5, false);
						}
					}
					else
					{
						if (ACS_IsDisplayTargetToTheRightOfToad())
						{
							ACSTransformToadPlayAnim( 'monster_toad_walk_turn_right', 0.25f, 0.325f);
						}
						else if (ACS_IsDisplayTargetToTheLeftOfToad())
						{
							ACSTransformToadPlayAnim( 'monster_toad_walk_turn_left', 0.25f, 0.325f);
						}
						else
						{
							if (RandF() < 0.5)
							{
								ACSTransformToadPlayAnim( 'monster_toad_turn_45_left', 0.25f, 0.325f);
							}
							else
							{
								ACSTransformToadPlayAnim( 'monster_toad_turn_45_right', 0.25f, 0.325f);
							}
						}

						ACSTransformToadMovementAdjustRotateTowardsEnemy();
					}
				}
				else
				{
					if (RandF() < 0.5)
					{
						ACSTransformToadPlayAnim( 'monster_toad_attack_vomit', 0.25f, 0.325f);

						AddTimer('ToadHeavyAttackDamage', 1.125, false);
					}
					else
					{
						toad_heavy_attack_index_1 = RandDifferent(this.previous_toad_heavy_attack_index_1 , 3);

						switch (toad_heavy_attack_index_1) 
						{	
							case 2:
							ACSTransformToadPlayAnim( 'monster_toad_attack_spit_03', 0.25f, 0.325f);
							//AddTimer('ToadLightAttackTongueDamageLong', 1.25, false);
							break;

							case 1:
							ACSTransformToadPlayAnim( 'monster_toad_attack_spit_02', 0.25f, 0.325f);
							//AddTimer('ToadLightAttackTongueDamageLong', 1.25, false);
							break;
							
							default:
							ACSTransformToadPlayAnim( 'monster_toad_attack_spit_01', 0.25f, 0.325f);
							//AddTimer('ToadLightAttackTongueDamageShort', 1.125, false);
							break;
						}
				
						this.previous_toad_heavy_attack_index_1 = toad_heavy_attack_index_1;

						AddTimer('ToadHeavyAttackProjectileDelay', 0.5, false);
					}
				}
			}
			else
			{
				if (RandF() < 0.5)
				{
					ACSTransformToadPlayAnim( 'monster_toad_attack_vomit', 0.25f, 0.325f);

					AddTimer('ToadHeavyAttackDamage', 1.125, false);
				}
				else
				{
					toad_heavy_attack_index_1 = RandDifferent(this.previous_toad_heavy_attack_index_1 , 3);

					switch (toad_heavy_attack_index_1) 
					{	
						case 2:
						ACSTransformToadPlayAnim( 'monster_toad_attack_spit_03', 0.25f, 0.325f);
						//AddTimer('ToadLightAttackTongueDamageLong', 1.25, false);
						break;

						case 1:
						ACSTransformToadPlayAnim( 'monster_toad_attack_spit_02', 0.25f, 0.325f);
						//AddTimer('ToadLightAttackTongueDamageLong', 1.25, false);
						break;
						
						default:
						ACSTransformToadPlayAnim( 'monster_toad_attack_spit_01', 0.25f, 0.325f);
						//AddTimer('ToadLightAttackTongueDamageShort', 1.125, false);
						break;
					}
			
					this.previous_toad_heavy_attack_index_1 = toad_heavy_attack_index_1;

					AddTimer('ToadHeavyAttackProjectileDelay', 0.5, false);
				}
			}
			
			ACS_StaminaDrainForced(5);
		}
	}

	function ACS_Transformation_Toad_Special_Attack()
	{
		if (ACS_can_perform_transformation_special_attack())
		{
			ACS_refresh_transformation_special_attack_cooldown();

			ACSTransformationToadRemoveMoveTimers();

			GetACSTransformationToad().AddTag('ACS_Transformation_Toad_Is_Attacking');

			AddTimer('ToadRemoveAttackTag', 1.5, false);

			movementAdjustorToad = GetACSTransformationToad().GetMovingAgentComponent().GetMovementAdjustor();

			ticketToad = movementAdjustorToad.GetRequest( 'ACS_Transformation_Toad_Rotate');
			movementAdjustorToad.CancelByName( 'ACS_Transformation_Toad_Rotate' );
			movementAdjustorToad.CancelAll();

			if (thePlayer.IsInCombat())
			{
				if (thePlayer.GetDisplayTarget())
				{
					if (ACS_IsDisplayTargetInFrontOfToad())
					{
						ACSTransformToadPlayAnim('monster_toad_attack_tumors', 0.25f, 0.25f);
						AddTimer('ToadMortarProjectileDelay', 1.565451, false );
						AddTimer('ToadMortarProjectileDelay1', 1.884014, false );
						AddTimer('ToadMortarProjectileDelay2', 2.2409, false );
						AddTimer('ToadMortarProjectileDelay3', 2.5906, false );
					}
					else
					{
						if (ACS_IsDisplayTargetToTheRightOfToad())
						{
							ACSTransformToadPlayAnim( 'monster_toad_walk_turn_right', 0.25f, 0.325f);
						}
						else if (ACS_IsDisplayTargetToTheLeftOfToad())
						{
							ACSTransformToadPlayAnim( 'monster_toad_walk_turn_left', 0.25f, 0.325f);
						}
						else
						{
							if (RandF() < 0.5)
							{
								ACSTransformToadPlayAnim( 'monster_toad_turn_45_left', 0.25f, 0.325f);
							}
							else
							{
								ACSTransformToadPlayAnim( 'monster_toad_turn_45_right', 0.25f, 0.325f);
							}
						}

						ACSTransformToadMovementAdjustRotateTowardsEnemy();
					}
				}
				else
				{
					ACSTransformToadPlayAnim('monster_toad_attack_tumors', 0.25f, 0.25f);
					AddTimer('ToadMortarProjectileDelay', 1.565451, false );
					AddTimer('ToadMortarProjectileDelay1', 1.884014, false );
					AddTimer('ToadMortarProjectileDelay2', 2.2409, false );
					AddTimer('ToadMortarProjectileDelay3', 2.5906, false );
				}
			}
			else
			{
				ACSTransformToadPlayAnim('monster_toad_attack_tumors', 0.25f, 0.25f);
				AddTimer('ToadMortarProjectileDelay', 1.565451, false );
				AddTimer('ToadMortarProjectileDelay1', 1.884014, false );
				AddTimer('ToadMortarProjectileDelay2', 2.2409, false );
				AddTimer('ToadMortarProjectileDelay3', 2.5906, false );
			}
			
			ACS_StaminaDrainForced(5);
		}
	}
	
	function ToadJumpAttackDamageActual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		attackRange = 5;

		attackAngle = 360;

		actors.Clear();

		actors = GetACSTransformationToad().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationToad().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationToad()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Toad_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Toad_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Toad_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					damageMax = maxTargetVitality * 0.125; 

					damageMin = maxTargetVitality * 0.06125; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						damageMax = maxTargetEssence * 0.06125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
					else
					{
						damageMax = maxTargetEssence * 0.125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
				}

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				thePlayer.SoundEvent("cmb_play_dismemberment_gore");

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddEffectInfo( EET_Poison, 3 );

				dmg.AddEffectInfo( EET_Knockdown, 1 );
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	public timer function ToadJumpAttackDamage(deltaTime : float , id : int)
	{
		ToadJumpAttackDamageActual();
	}

	function ToadLightAttackDamageActual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		attackRange = 3;

		attackAngle = 60;

		actors.Clear();

		actors = GetACSTransformationToad().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationToad().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationToad()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Toad_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Toad_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Toad_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					damageMax = maxTargetVitality * 0.125; 

					damageMin = maxTargetVitality * 0.06125; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						damageMax = maxTargetEssence * 0.06125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
					else
					{
						damageMax = maxTargetEssence * 0.125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
				}

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				thePlayer.SoundEvent("cmb_play_dismemberment_gore");

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');		

				actortarget.PlayEffectSingle('critical_poison');
				actortarget.StopEffect('critical_poison');	
				

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddEffectInfo( EET_Poison, 3 );

				dmg.AddEffectInfo( EET_Stagger, 3 );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	public timer function ToadLightAttackDamage(deltaTime : float , id : int)
	{
		ToadLightAttackDamageActual();
	}

	function ToadLightAttackDamageOffsetRightActual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		attackRange = 4;

		attackAngle = 60;

		actors.Clear();

		actors = GetACSTransformationToad().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationToad().GetHeadingVector() + GetACSTransformationToad().GetWorldRight() * 3), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationToad()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Toad_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Toad_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Toad_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					damageMax = maxTargetVitality * 0.125; 

					damageMin = maxTargetVitality * 0.06125; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						damageMax = maxTargetEssence * 0.0625; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
					else
					{
						damageMax = maxTargetEssence * 0.125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
				}

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				thePlayer.SoundEvent("cmb_play_dismemberment_gore");

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddEffectInfo( EET_Poison, 3 );

				dmg.AddEffectInfo( EET_Stagger, 3 );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	public timer function ToadLightAttackDamageOffsetRight(deltaTime : float , id : int)
	{
		ToadLightAttackDamageOffsetRightActual();
	}

	function ToadLightAttackDamageOffsetLeftActual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		attackRange = 4;

		attackAngle = 60;

		actors.Clear();

		actors = GetACSTransformationToad().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationToad().GetHeadingVector() + GetACSTransformationToad().GetWorldRight() * - 3), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationToad()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Toad_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Toad_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Toad_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					damageMax = maxTargetVitality * 0.125; 

					damageMin = maxTargetVitality * 0.06125; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						damageMax = maxTargetEssence * 0.06125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
					else
					{
						damageMax = maxTargetEssence * 0.125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
				}

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				thePlayer.SoundEvent("cmb_play_dismemberment_gore");

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddEffectInfo( EET_Poison, 3 );

				dmg.AddEffectInfo( EET_Stagger, 3 );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	public timer function ToadLightAttackDamageOffsetLeft(deltaTime : float , id : int)
	{
		ToadLightAttackDamageOffsetLeftActual();
	}

	function ToadLightAttackTongueDamageShortActual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		attackRange = 6.5;

		attackAngle = 180;

		actors.Clear();

		actors = GetACSTransformationToad().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationToad().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationToad()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Werewolf_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.2 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				dmg.AddEffectInfo(EET_Poison, 3);

				dmg.AddEffectInfo(EET_Knockdown, 1);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					if ( actortarget.GetStat( BCS_Vitality ) >= maxTargetVitality * 0.25 )
					{
						damageMax = actortarget.GetStat( BCS_Vitality ) * 0.25; 

						damageMin = actortarget.GetStat( BCS_Vitality ) * 0.125; 
					}
					else if ( actortarget.GetStat( BCS_Vitality ) < maxTargetVitality * 0.25 )
					{
						damageMax = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.25; 

						damageMin = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.125; 
					}
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.125; 

							damageMin = actortarget.GetStat( BCS_Essence ) * 0.0625; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 

							damageMin = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.0625; 
						}
					}
					else
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.25; 

							damageMin = actortarget.GetStat( BCS_Essence ) * 0.125; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.25; 

							damageMin = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 
						}
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
					dmg.AddEffectInfo( EET_Stagger, 0.1 );
				}
				else
				{
					if( RandF() < 0.25 ) 
					{
						movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
						dmg.AddEffectInfo( EET_Stagger, 0.1 );
					}
				}

				thePlayer.SoundEvent("cmb_play_dismemberment_gore");

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(50 + damageMax,50 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(50 + damageMax,50 + damageMin) );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	function ToadLightAttackTongueDamageLongActual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		attackRange = 11;

		attackAngle = 45;

		actors.Clear();

		actors = GetACSTransformationToad().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationToad().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationToad()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Werewolf_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Light, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				dmg.AddEffectInfo(EET_Poison, 3);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					if ( actortarget.GetStat( BCS_Vitality ) >= maxTargetVitality * 0.25 )
					{
						damageMax = actortarget.GetStat( BCS_Vitality ) * 0.25; 

						damageMin = actortarget.GetStat( BCS_Vitality ) * 0.125; 
					}
					else if ( actortarget.GetStat( BCS_Vitality ) < maxTargetVitality * 0.25 )
					{
						damageMax = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.25; 

						damageMin = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.125; 
					}
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.125; 

							damageMin = actortarget.GetStat( BCS_Essence ) * 0.0625; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 

							damageMin = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.0625; 
						}
					}
					else
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.25; 

							damageMin = actortarget.GetStat( BCS_Essence ) * 0.125; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.25; 

							damageMin = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 
						}
					}
				}

				dmg.SetHitReactionType( EHRT_Light, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
					dmg.AddEffectInfo( EET_Stagger, 0.1 );
				}
				else
				{
					if( RandF() < 0.25 ) 
					{
						movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
						dmg.AddEffectInfo( EET_Stagger, 0.1 );
					}
				}

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.2 );

				thePlayer.SoundEvent("cmb_play_dismemberment_gore");

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(50 + damageMax,50 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(50 + damageMax,50 + damageMin) );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	public timer function ToadLightAttackTongueDamageShort(deltaTime : float , id : int)
	{
		ToadLightAttackTongueDamageShortActual();
	}

	public timer function ToadLightAttackTongueDamageLong(deltaTime : float , id : int)
	{
		ToadLightAttackTongueDamageLongActual();
	}

	function ToadHeavyAttackDamageActual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		attackRange = 6.5;

		attackAngle = 60;

		actors.Clear();

		actors = GetACSTransformationToad().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationToad().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationToad()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Toad_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Toad_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Toad_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					damageMax = maxTargetVitality * 0.25; 

					damageMin = maxTargetVitality * 0.125; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						damageMax = maxTargetEssence * 0.125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
					else
					{
						damageMax = maxTargetEssence * 0.25; 
					
						damageMin = maxTargetEssence * 0.125; 
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
				}

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				//thePlayer.SoundEvent("cmb_play_dismemberment_gore");

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(1 + damageMax,1 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(1 + damageMax,1 + damageMin) );

				dmg.AddEffectInfo( EET_Poison, 10 );
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	public timer function ToadHeavyAttackDamage(deltaTime : float , id : int)
	{
		ToadHeavyAttackDamageActual();
	}

	public timer function ToadHeavyAttackProjectileDelay(deltaTime : float , id : int)
	{
		GetTransformationToadClass().Transformation_Toad_Single_Projectile_Engage();
	}
	public timer function ToadMortarProjectileDelay(deltaTime : float , id : int)
	{
		GetTransformationToadClass().Transformation_Toad_Mortar_Projectile1_Engage();
	}

	public timer function ToadMortarProjectileDelay1(deltaTime : float , id : int)
	{
		GetTransformationToadClass().Transformation_Toad_Mortar_Projectile2_Engage();
	}

	public timer function ToadMortarProjectileDelay2(deltaTime : float , id : int)
	{
		GetTransformationToadClass().Transformation_Toad_Mortar_Projectile3_Engage();
	}

	public timer function ToadMortarProjectileDelay3(deltaTime : float , id : int)
	{
		GetTransformationToadClass().Transformation_Toad_Mortar_Projectile4_Engage();
	}

	function ACS_Transformation_Toad_Leap()
	{
		if( BruxaDashCallTime + DOUBLE_TAP_WINDOW >= theGame.GetEngineTimeAsSeconds() )
		{
			BruxaDashDoubleTap = true;
		}
		else
		{
			BruxaDashDoubleTap = false;	
		}
		
		if( BruxaDashDoubleTap )
		{
			if (ACS_can_transformation_dodge())
			{
				ACS_refresh_transformation_dodge_cooldown();

				ACSTransformationToadRemoveMoveTimers();

				GetACSTransformationToad().AddTag('ACS_Transformation_Toad_Is_Attacking');

				AddTimer('ToadRemoveAttackTag', 1.5, false);

				transformation_toad_dodge_timer_actual();

				ACSTransformToadMovementAdjustNormalDash();

				if (thePlayer.IsInCombat())
				{
					ACS_StaminaDrainForced(5);
				}
			}
		}

		BruxaDashCallTime = theGame.GetEngineTimeAsSeconds();
	}

	function transformation_toad_dodge_timer_actual() 
	{
		RemoveTimer('ACS_transformation_toad_dodge_timer_end');

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 

		thePlayer.SetIsCurrentlyDodging(true);
	
		AddTimer('ACS_transformation_toad_dodge_timer_end', 0.875  , false);
	}
	
	function transformation_toad_dodge_timer_end_actual() 
	{ 
		thePlayer.SetImmortalityMode( AIM_None, AIC_Combat ); 

		thePlayer.SetIsCurrentlyDodging(false);
	}

	public timer function ACS_transformation_toad_dodge_timer_end ( dt : float, id : int) 
	{ 
		transformation_toad_dodge_timer_end_actual();
	} 

	public timer function ACS_Transformation_Toad_Reset_Animation_Speed ( dt : float, id : int) 
	{ 
		GetACSTransformationToad().ClearAnimationSpeedMultipliers();
	}

	function ACSTransformationToadRemoveMoveTimers()
	{
		GetACSTransformationToad().EnableCharacterCollisions(true);

		GetACSTransformationToad().ClearAnimationSpeedMultipliers();

		RemoveTimer('ACS_Transformation_Toad_Reset_Animation_Speed');

		RemoveTimer('ToadLightAttackTongueDamageShort');

		RemoveTimer('ToadLightAttackTongueDamageLong');

		RemoveTimer('ToadJumpAttackDamage');

		RemoveTimer('ToadLightAttackDamage');

		RemoveTimer('ToadLightAttackDamageOffsetLeft');

		RemoveTimer('ToadLightAttackDamageOffsetRight');

		RemoveTimer('ToadHeavyAttackDamage');

		RemoveTimer('ToadHeavyAttackProjectileDelay');

		RemoveTimer('ToadMortarProjectileDelay');

		RemoveTimer('ToadMortarProjectileDelay1');

		RemoveTimer('ToadMortarProjectileDelay2');

		RemoveTimer('ToadMortarProjectileDelay3');

		RemoveTimer('ToadRemoveAttackTag');

		//((CAnimatedComponent)((CNewNPC)GetACSTransformationVampiress()).GetComponentByClassName( 'CAnimatedComponent' )).RaiseBehaviorForceEvent('Taunt');
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	public timer function Transformation_Red_Miasmal_Remove_Stationary_Tag ( dt : float, id : int) 
	{ 
		GetACSTransformationRedMiasmal().RemoveTag('ACS_Transformation_Red_Miasmal_Stationary_Transition');
	}

	function TransformationRedMiasmalRestoreRotation()
	{
		if (GetACSTransformationRedMiasmal().HasTag('ACS_Transformation_Red_Miasmal_Stopped_Moving'))
		{
			RemoveTimer('Transformation_Red_Miasmal_Remove_Stationary_Tag');
			AddTimer('Transformation_Red_Miasmal_Remove_Stationary_Tag', 1, false);

			GetACSTransformationRedMiasmal().RemoveTag('ACS_Transformation_Red_Miasmal_Stopped_Moving');
		}
	}

	function RedMiasmalChangeStance()
	{
		if (GetACSTransformationRedMiasmal().HasTag('ACS_Directional_Change_Anim'))
		{
			RemoveChangeStanceTimers();
			AddTimer('Red_Miasmal_Change_Stance_Forward', 0.25f, false);

			GetACSTransformationRedMiasmal().RemoveTag('ACS_Directional_Change_Anim');
		}
	}

	function ACSTransformRedMiasmalMovementAdjustForward()
	{
		movementAdjustorRedMiasmal = GetACSTransformationRedMiasmal().GetMovingAgentComponent().GetMovementAdjustor();

		ticketRedMiasmal = movementAdjustorRedMiasmal.GetRequest( 'ACS_Transformation_Red_Miasmal_Rotate');
		movementAdjustorRedMiasmal.CancelByName( 'ACS_Transformation_Red_Miasmal_Rotate' );
		movementAdjustorRedMiasmal.CancelAll();

		ticketRedMiasmal = movementAdjustorRedMiasmal.CreateNewRequest( 'ACS_Transformation_Red_Miasmal_Rotate' );
		movementAdjustorRedMiasmal.AdjustmentDuration( ticketRedMiasmal, 0.5 );
		movementAdjustorRedMiasmal.MaxRotationAdjustmentSpeed( ticketRedMiasmal, 500000 );

		movementAdjustorRedMiasmal.RotateTo( ticketRedMiasmal, VecHeading( theCamera.GetCameraDirection() ) );

		movementAdjustorRedMiasmalWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketRedMiasmalWitcher = movementAdjustorRedMiasmalWitcher.GetRequest( 'ACS_Transformation_Red_Miasmal_Witcher_Rotate');
		movementAdjustorRedMiasmalWitcher.CancelByName( 'ACS_Transformation_Red_Miasmal_Witcher_Rotate' );
		movementAdjustorRedMiasmalWitcher.CancelAll();

		ticketRedMiasmalWitcher = movementAdjustorRedMiasmalWitcher.CreateNewRequest( 'ACS_Transformation_Red_Miasmal_Witcher_Rotate' );
		movementAdjustorRedMiasmalWitcher.AdjustmentDuration( ticketRedMiasmalWitcher, 0.5 );
		movementAdjustorRedMiasmalWitcher.MaxRotationAdjustmentSpeed( ticketRedMiasmalWitcher, 500000 );

		movementAdjustorRedMiasmalWitcher.RotateTo( ticketRedMiasmalWitcher, VecHeading( theCamera.GetCameraDirection() ) );
	}

	function ACSTransformRedMiasmalMovementAdjustBackward()
	{
		movementAdjustorRedMiasmal = GetACSTransformationRedMiasmal().GetMovingAgentComponent().GetMovementAdjustor();

		ticketRedMiasmal = movementAdjustorRedMiasmal.GetRequest( 'ACS_Transformation_Red_Miasmal_Rotate');
		movementAdjustorRedMiasmal.CancelByName( 'ACS_Transformation_Red_Miasmal_Rotate' );
		movementAdjustorRedMiasmal.CancelAll();

		ticketRedMiasmal = movementAdjustorRedMiasmal.CreateNewRequest( 'ACS_Transformation_Red_Miasmal_Rotate' );
		movementAdjustorRedMiasmal.AdjustmentDuration( ticketRedMiasmal, 0.5 );
		movementAdjustorRedMiasmal.MaxRotationAdjustmentSpeed( ticketRedMiasmal, 500000 );

		movementAdjustorRedMiasmal.RotateTo( ticketRedMiasmal, VecHeading( theCamera.GetCameraDirection() * -5 ) );

		movementAdjustorRedMiasmalWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketRedMiasmalWitcher = movementAdjustorRedMiasmalWitcher.GetRequest( 'ACS_Transformation_Red_Miasmal_Witcher_Rotate');
		movementAdjustorRedMiasmalWitcher.CancelByName( 'ACS_Transformation_Red_Miasmal_Witcher_Rotate' );
		movementAdjustorRedMiasmalWitcher.CancelAll();

		ticketRedMiasmalWitcher = movementAdjustorRedMiasmalWitcher.CreateNewRequest( 'ACS_Transformation_Red_Miasmal_Witcher_Rotate' );
		movementAdjustorRedMiasmalWitcher.AdjustmentDuration( ticketRedMiasmalWitcher, 0.5 );
		movementAdjustorRedMiasmalWitcher.MaxRotationAdjustmentSpeed( ticketRedMiasmalWitcher, 500000 );

		movementAdjustorRedMiasmalWitcher.RotateTo( ticketRedMiasmalWitcher, VecHeading( theCamera.GetCameraDirection() * -5 ) );
	}

	function ACSTransformRedMiasmalMovementAdjustRight()
	{
		movementAdjustorRedMiasmal = GetACSTransformationRedMiasmal().GetMovingAgentComponent().GetMovementAdjustor();

		ticketRedMiasmal = movementAdjustorRedMiasmal.GetRequest( 'ACS_Transformation_Red_Miasmal_Rotate');
		movementAdjustorRedMiasmal.CancelByName( 'ACS_Transformation_Red_Miasmal_Rotate' );
		movementAdjustorRedMiasmal.CancelAll();

		ticketRedMiasmal = movementAdjustorRedMiasmal.CreateNewRequest( 'ACS_Transformation_Red_Miasmal_Rotate' );
		movementAdjustorRedMiasmal.AdjustmentDuration( ticketRedMiasmal, 0.5 );
		movementAdjustorRedMiasmal.MaxRotationAdjustmentSpeed( ticketRedMiasmal, 500000 );

		movementAdjustorRedMiasmal.RotateTo( ticketRedMiasmal, VecHeading( theCamera.GetCameraDirection() + theCamera.GetCameraRight() * 5 ) );




		movementAdjustorRedMiasmalWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketRedMiasmalWitcher = movementAdjustorRedMiasmalWitcher.GetRequest( 'ACS_Transformation_Red_Miasmal_Witcher_Rotate');
		movementAdjustorRedMiasmalWitcher.CancelByName( 'ACS_Transformation_Red_Miasmal_Witcher_Rotate' );
		movementAdjustorRedMiasmalWitcher.CancelAll();

		ticketRedMiasmalWitcher = movementAdjustorRedMiasmalWitcher.CreateNewRequest( 'ACS_Transformation_Red_Miasmal_Witcher_Rotate' );
		movementAdjustorRedMiasmalWitcher.AdjustmentDuration( ticketRedMiasmalWitcher, 0.5 );
		movementAdjustorRedMiasmalWitcher.MaxRotationAdjustmentSpeed( ticketRedMiasmalWitcher, 500000 );

		movementAdjustorRedMiasmalWitcher.RotateTo( ticketRedMiasmalWitcher, VecHeading( theCamera.GetCameraDirection() + theCamera.GetCameraRight() * 5 ) );
	}

	function ACSTransformRedMiasmalMovementAdjustLeft()
	{
		movementAdjustorRedMiasmal = GetACSTransformationRedMiasmal().GetMovingAgentComponent().GetMovementAdjustor();

		ticketRedMiasmal = movementAdjustorRedMiasmal.GetRequest( 'ACS_Transformation_Red_Miasmal_Rotate');
		movementAdjustorRedMiasmal.CancelByName( 'ACS_Transformation_Red_Miasmal_Rotate' );
		movementAdjustorRedMiasmal.CancelAll();

		ticketRedMiasmal = movementAdjustorRedMiasmal.CreateNewRequest( 'ACS_Transformation_Red_Miasmal_Rotate' );
		movementAdjustorRedMiasmal.AdjustmentDuration( ticketRedMiasmal, 0.5 );
		movementAdjustorRedMiasmal.MaxRotationAdjustmentSpeed( ticketRedMiasmal, 500000 );

		movementAdjustorRedMiasmal.RotateTo( ticketRedMiasmal, VecHeading( theCamera.GetCameraDirection() + theCamera.GetCameraRight() * -5 ) );



		movementAdjustorRedMiasmalWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketRedMiasmalWitcher = movementAdjustorRedMiasmalWitcher.GetRequest( 'ACS_Transformation_Red_Miasmal_Witcher_Rotate');
		movementAdjustorRedMiasmalWitcher.CancelByName( 'ACS_Transformation_Red_Miasmal_Witcher_Rotate' );
		movementAdjustorRedMiasmalWitcher.CancelAll();

		ticketRedMiasmalWitcher = movementAdjustorRedMiasmalWitcher.CreateNewRequest( 'ACS_Transformation_Red_Miasmal_Witcher_Rotate' );
		movementAdjustorRedMiasmalWitcher.AdjustmentDuration( ticketRedMiasmalWitcher, 0.5 );
		movementAdjustorRedMiasmalWitcher.MaxRotationAdjustmentSpeed( ticketRedMiasmalWitcher, 500000 );

		movementAdjustorRedMiasmalWitcher.RotateTo( ticketRedMiasmalWitcher, VecHeading( theCamera.GetCameraDirection() + theCamera.GetCameraRight() * -5 ) );
	}

	function ACSTransformRedMiasmalMovementAdjustForwardRight()
	{
		movementAdjustorRedMiasmal = GetACSTransformationRedMiasmal().GetMovingAgentComponent().GetMovementAdjustor();

		ticketRedMiasmal = movementAdjustorRedMiasmal.GetRequest( 'ACS_Transformation_Red_Miasmal_Rotate');
		movementAdjustorRedMiasmal.CancelByName( 'ACS_Transformation_Red_Miasmal_Rotate' );
		movementAdjustorRedMiasmal.CancelAll();

		ticketRedMiasmal = movementAdjustorRedMiasmal.CreateNewRequest( 'ACS_Transformation_Red_Miasmal_Rotate' );
		movementAdjustorRedMiasmal.AdjustmentDuration( ticketRedMiasmal, 1 );
		movementAdjustorRedMiasmal.MaxRotationAdjustmentSpeed( ticketRedMiasmal, 500000 );

		//movementAdjustorRedMiasmal.RotateTo( ticketRedMiasmal, VecHeading( (theCamera.GetCameraDirection() * 5)  + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * 5) ) );

		movementAdjustorRedMiasmal.RotateTo( ticketRedMiasmal, VecHeading( (theCamera.GetCameraDirection() * 5) + (theCamera.GetCameraRight() * 5) ) );



		movementAdjustorRedMiasmalWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketRedMiasmalWitcher = movementAdjustorRedMiasmalWitcher.GetRequest( 'ACS_Transformation_Red_Miasmal_Witcher_Rotate');
		movementAdjustorRedMiasmalWitcher.CancelByName( 'ACS_Transformation_Red_Miasmal_Witcher_Rotate' );
		movementAdjustorRedMiasmalWitcher.CancelAll();

		ticketRedMiasmalWitcher = movementAdjustorRedMiasmalWitcher.CreateNewRequest( 'ACS_Transformation_Red_Miasmal_Witcher_Rotate' );
		movementAdjustorRedMiasmalWitcher.AdjustmentDuration( ticketRedMiasmalWitcher, 1 );
		movementAdjustorRedMiasmalWitcher.MaxRotationAdjustmentSpeed( ticketRedMiasmalWitcher, 500000 );

		//movementAdjustorRedMiasmalWitcher.RotateTo( ticketRedMiasmalWitcher, VecHeading( (theCamera.GetCameraDirection() * 5)  + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * 5) ) );

		movementAdjustorRedMiasmalWitcher.RotateTo( ticketRedMiasmalWitcher, VecHeading( (theCamera.GetCameraDirection() * 5)  + (theCamera.GetCameraRight() * 5) ) );
	}

	function ACSTransformRedMiasmalMovementAdjustForwardLeft()
	{
		movementAdjustorRedMiasmal = GetACSTransformationRedMiasmal().GetMovingAgentComponent().GetMovementAdjustor();

		ticketRedMiasmal = movementAdjustorRedMiasmal.GetRequest( 'ACS_Transformation_Red_Miasmal_Rotate');
		movementAdjustorRedMiasmal.CancelByName( 'ACS_Transformation_Red_Miasmal_Rotate' );
		movementAdjustorRedMiasmal.CancelAll();

		ticketRedMiasmal = movementAdjustorRedMiasmal.CreateNewRequest( 'ACS_Transformation_Red_Miasmal_Rotate' );
		movementAdjustorRedMiasmal.AdjustmentDuration( ticketRedMiasmal, 1 );
		movementAdjustorRedMiasmal.MaxRotationAdjustmentSpeed( ticketRedMiasmal, 500000 );

		//movementAdjustorRedMiasmal.RotateTo( ticketRedMiasmal, VecHeading( (theCamera.GetCameraDirection() * 5)  + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * -5) ) );

		movementAdjustorRedMiasmal.RotateTo( ticketRedMiasmal, VecHeading( (theCamera.GetCameraDirection() * 5) + (theCamera.GetCameraRight() * -5) ) );



		movementAdjustorRedMiasmalWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketRedMiasmalWitcher = movementAdjustorRedMiasmalWitcher.GetRequest( 'ACS_Transformation_Red_Miasmal_Witcher_Rotate');
		movementAdjustorRedMiasmalWitcher.CancelByName( 'ACS_Transformation_Red_Miasmal_Witcher_Rotate' );
		movementAdjustorRedMiasmalWitcher.CancelAll();

		ticketRedMiasmalWitcher = movementAdjustorRedMiasmalWitcher.CreateNewRequest( 'ACS_Transformation_Red_Miasmal_Witcher_Rotate' );
		movementAdjustorRedMiasmalWitcher.AdjustmentDuration( ticketRedMiasmalWitcher, 1 );
		movementAdjustorRedMiasmalWitcher.MaxRotationAdjustmentSpeed( ticketRedMiasmalWitcher, 500000 );

		//movementAdjustorRedMiasmalWitcher.RotateTo( ticketRedMiasmalWitcher, VecHeading( (theCamera.GetCameraDirection() * 5) + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * -5) ) );

		movementAdjustorRedMiasmalWitcher.RotateTo( ticketRedMiasmalWitcher, VecHeading( (theCamera.GetCameraDirection() * 5) + (theCamera.GetCameraRight() * -5) ) );
	}

	function ACSTransformRedMiasmalMovementAdjustBackwardRight()
	{
		movementAdjustorRedMiasmal = GetACSTransformationRedMiasmal().GetMovingAgentComponent().GetMovementAdjustor();

		ticketRedMiasmal = movementAdjustorRedMiasmal.GetRequest( 'ACS_Transformation_Red_Miasmal_Rotate');
		movementAdjustorRedMiasmal.CancelByName( 'ACS_Transformation_Red_Miasmal_Rotate' );
		movementAdjustorRedMiasmal.CancelAll();

		ticketRedMiasmal = movementAdjustorRedMiasmal.CreateNewRequest( 'ACS_Transformation_Red_Miasmal_Rotate' );
		movementAdjustorRedMiasmal.AdjustmentDuration( ticketRedMiasmal, 1 );
		movementAdjustorRedMiasmal.MaxRotationAdjustmentSpeed( ticketRedMiasmal, 500000 );

		//movementAdjustorRedMiasmal.RotateTo( ticketRedMiasmal, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraForward() * -5) + (theCamera.GetCameraRight() * 5) ) );

		movementAdjustorRedMiasmal.RotateTo( ticketRedMiasmal, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraRight() * 5) ) );



		movementAdjustorRedMiasmalWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketRedMiasmalWitcher = movementAdjustorRedMiasmalWitcher.GetRequest( 'ACS_Transformation_Red_Miasmal_Witcher_Rotate');
		movementAdjustorRedMiasmalWitcher.CancelByName( 'ACS_Transformation_Red_Miasmal_Witcher_Rotate' );
		movementAdjustorRedMiasmalWitcher.CancelAll();

		ticketRedMiasmalWitcher = movementAdjustorRedMiasmalWitcher.CreateNewRequest( 'ACS_Transformation_Red_Miasmal_Witcher_Rotate' );
		movementAdjustorRedMiasmalWitcher.AdjustmentDuration( ticketRedMiasmalWitcher, 1 );
		movementAdjustorRedMiasmalWitcher.MaxRotationAdjustmentSpeed( ticketRedMiasmalWitcher, 500000 );

		//movementAdjustorRedMiasmalWitcher.RotateTo( ticketRedMiasmalWitcher, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraForward() * -5) + (theCamera.GetCameraRight() * 5) ) );

		movementAdjustorRedMiasmalWitcher.RotateTo( ticketRedMiasmalWitcher, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraRight() * 5) ) );
	}

	function ACSTransformRedMiasmalMovementAdjustBackwardLeft()
	{
		movementAdjustorRedMiasmal = GetACSTransformationRedMiasmal().GetMovingAgentComponent().GetMovementAdjustor();

		ticketRedMiasmal = movementAdjustorRedMiasmal.GetRequest( 'ACS_Transformation_Red_Miasmal_Rotate');
		movementAdjustorRedMiasmal.CancelByName( 'ACS_Transformation_Red_Miasmal_Rotate' );
		movementAdjustorRedMiasmal.CancelAll();

		ticketRedMiasmal = movementAdjustorRedMiasmal.CreateNewRequest( 'ACS_Transformation_Red_Miasmal_Rotate' );
		movementAdjustorRedMiasmal.AdjustmentDuration( ticketRedMiasmal, 1 );
		movementAdjustorRedMiasmal.MaxRotationAdjustmentSpeed( ticketRedMiasmal, 500000 );

		//movementAdjustorRedMiasmal.RotateTo( ticketRedMiasmal, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraForward() * -5) + (theCamera.GetCameraRight() * -5) ) );

		movementAdjustorRedMiasmal.RotateTo( ticketRedMiasmal, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraRight() * -5) ) );



		movementAdjustorRedMiasmalWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketRedMiasmalWitcher = movementAdjustorRedMiasmalWitcher.GetRequest( 'ACS_Transformation_Red_Miasmal_Witcher_Rotate');
		movementAdjustorRedMiasmalWitcher.CancelByName( 'ACS_Transformation_Red_Miasmal_Witcher_Rotate' );
		movementAdjustorRedMiasmalWitcher.CancelAll();

		ticketRedMiasmalWitcher = movementAdjustorRedMiasmalWitcher.CreateNewRequest( 'ACS_Transformation_Red_Miasmal_Witcher_Rotate' );
		movementAdjustorRedMiasmalWitcher.AdjustmentDuration( ticketRedMiasmalWitcher, 1 );
		movementAdjustorRedMiasmalWitcher.MaxRotationAdjustmentSpeed( ticketRedMiasmalWitcher, 500000 );

		//movementAdjustorRedMiasmalWitcher.RotateTo( ticketRedMiasmalWitcher, VecHeading( theCamera.GetCameraDirection()  + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * -5) ) );

		movementAdjustorRedMiasmalWitcher.RotateTo( ticketRedMiasmalWitcher, VecHeading( theCamera.GetCameraDirection() + (theCamera.GetCameraRight() * -5) ) );
	}

	function ACSTransformRedMiasmalMovementAdjustRotateTowardsEnemy()
	{
		movementAdjustorRedMiasmal = GetACSTransformationRedMiasmal().GetMovingAgentComponent().GetMovementAdjustor();

		ticketRedMiasmal = movementAdjustorRedMiasmal.GetRequest( 'ACS_Transformation_Red_Miasmal_Rotate');
		movementAdjustorRedMiasmal.CancelByName( 'ACS_Transformation_Red_Miasmal_Rotate' );
		movementAdjustorRedMiasmal.CancelAll();

		ticketRedMiasmal = movementAdjustorRedMiasmal.CreateNewRequest( 'ACS_Transformation_Red_Miasmal_Rotate' );
		movementAdjustorRedMiasmal.AdjustmentDuration( ticketRedMiasmal, 0.5 );
		movementAdjustorRedMiasmal.MaxRotationAdjustmentSpeed( ticketRedMiasmal, 500000 );

		if (thePlayer.GetTarget())
		{
			movementAdjustorRedMiasmal.RotateTowards( ticketRedMiasmal, thePlayer.GetTarget() );
		}
		else
		{
			movementAdjustorRedMiasmal.RotateTo( ticketRedMiasmal, VecHeading( theCamera.GetCameraDirection() ) );
		}
	}

	function ACS_Transformation_Red_Miasmal_Move_Controls()
	{
		if (thePlayer.IsInCombat())
		{
			if (thePlayer.GetStat(BCS_Toxicity) < thePlayer.GetStatMax(BCS_Toxicity))
			{
				thePlayer.GainStat(BCS_Toxicity, (thePlayer.GetStatMax(BCS_Toxicity) - thePlayer.GetStat(BCS_Toxicity)) * 0.00006125);
			}
			
			thePlayer.DrainVitality(thePlayer.GetStat(BCS_Vitality) * 0.000030625);
		}
		else
		{
			if (thePlayer.GetStat(BCS_Toxicity) < thePlayer.GetStatMax(BCS_Toxicity))
			{
				thePlayer.GainStat(BCS_Toxicity, (thePlayer.GetStatMax(BCS_Toxicity) - thePlayer.GetStat(BCS_Toxicity)) * 0.000030625);
			}
			
			thePlayer.DrainVitality(thePlayer.GetStat(BCS_Vitality) * 0.0000153125);
		}

		GetACSTransformationRedMiasmal().GetMovingAgentComponent().EnableCombatMode( true );

		GetACSTransformationRedMiasmal().GetMovingAgentComponent().SetVirtualRadius( 'CombatCharacterRadius' );

		((CNewNPC)GetACSTransformationRedMiasmal()).SetBehaviorVariable( 'additiveTauntOn', 1, true );

		if (thePlayer.IsInCombat())
		{
			if (thePlayer.GetTarget())
			{
				((CNewNPC)GetACSTransformationRedMiasmal()).SetBehaviorVectorVariable( 'lookAtTarget', ((CActor)(thePlayer.GetTarget())).GetWorldPosition() );
			}
			else
			{
				((CNewNPC)GetACSTransformationRedMiasmal()).SetBehaviorVectorVariable( 'lookAtTarget', GetACSLookatEntity().GetWorldPosition() );
			}

			((CNewNPC)GetACSTransformationRedMiasmal()).SetBehaviorVariable( 'lookatOn', 1, true );
		}
		else
		{
			((CNewNPC)GetACSTransformationRedMiasmal()).SetBehaviorVectorVariable( 'lookAtTarget', GetACSLookatEntity().GetWorldPosition() );

			((CNewNPC)GetACSTransformationRedMiasmal()).SetBehaviorVariable( 'lookatOn', 1, true );
		}

		if (GetACSTransformationRedMiasmal().GetMovingAgentComponent().GetRelativeMoveSpeed() <= 0.1 )
		{
			if
			(
				theInput.GetLastActivationTime( 'GI_AxisLeftX' ) > 1.25f 
				|| theInput.GetLastActivationTime( 'GI_AxisLeftY' ) > 1.25f 
			)	
			{
				GetACSTransformationRedMiasmal().RemoveTag('ACS_Transformation_Red_Miasmal_Stationary_Transition');
			}
			else
			{
				RemoveTimer('Transformation_Red_Miasmal_Remove_Stationary_Tag');

				if (!GetACSTransformationRedMiasmal().HasTag('ACS_Transformation_Red_Miasmal_Stopped_Moving'))
				{
					GetACSTransformationRedMiasmal().AddTag('ACS_Transformation_Red_Miasmal_Stationary_Transition');

					GetACSTransformationRedMiasmal().AddTag('ACS_Transformation_Red_Miasmal_Stopped_Moving');
				}
			}
		}

		if (thePlayer.IsDodgeTimerRunning()
		|| thePlayer.IsCurrentlyDodging() 
		)
		{
			GetACSTransformationRedMiasmal().GetMovingAgentComponent().ForceSetRelativeMoveSpeed( 0 );
			GetACSTransformationRedMiasmal().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed( 0 );
			return;
		}

		if (theInput.GetActionValue('GI_AxisLeftX') == 0 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
		{
			GetACSTransformationRedMiasmal().GetMovingAgentComponent().ForceSetRelativeMoveSpeed( 0 );
			GetACSTransformationRedMiasmal().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed( 0 );
		}
		else
		{
			if (theInput.GetActionValue('GI_AxisLeftY') > 0.1 && theInput.GetActionValue('GI_AxisLeftX') == 0 )
			{
				TransformationRedMiasmalRestoreRotation();

				GetACSTransformationRedMiasmal().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationRedMiasmal().GetHeadingVector()));

				if (!GetACSTransformationRedMiasmal().HasTag('ACS_Transformation_Red_Miasmal_Stationary_Transition')
				)
				{
					ACSTransformRedMiasmalMovementAdjustForward();
				}

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationRedMiasmal().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationRedMiasmal().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftY') < -0.1 && theInput.GetActionValue('GI_AxisLeftX') == 0 )
			{
				TransformationRedMiasmalRestoreRotation();

				if (!GetACSTransformationRedMiasmal().HasTag('ACS_Transformation_Red_Miasmal_Stationary_Transition')
				)
				{
					GetACSTransformationRedMiasmal().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationRedMiasmal().GetHeadingVector()));
						
					ACSTransformRedMiasmalMovementAdjustBackward();
				}

				RedMiasmalChangeStance();

				GetACSTransformationRedMiasmal().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationRedMiasmal().GetHeadingVector()));

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationRedMiasmal().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationRedMiasmal().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftX') > 0.1 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
			{
				TransformationRedMiasmalRestoreRotation();

				RedMiasmalChangeStance();

				if (!GetACSTransformationRedMiasmal().HasTag('ACS_Transformation_Red_Miasmal_Stationary_Transition')
				)
				{
					ACSTransformRedMiasmalMovementAdjustRight();
				}

				GetACSTransformationRedMiasmal().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationRedMiasmal().GetHeadingVector()));

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationRedMiasmal().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationRedMiasmal().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftX') < -0.1 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
			{
				TransformationRedMiasmalRestoreRotation();

				RedMiasmalChangeStance();

				if (!GetACSTransformationRedMiasmal().HasTag('ACS_Transformation_Red_Miasmal_Stationary_Transition')
				)
				{
					ACSTransformRedMiasmalMovementAdjustLeft();
				}

				GetACSTransformationRedMiasmal().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationRedMiasmal().GetHeadingVector()));

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationRedMiasmal().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationRedMiasmal().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftY') > 0.1 && theInput.GetActionValue('GI_AxisLeftX') > 0.1 )
			{
				TransformationRedMiasmalRestoreRotation();

				RedMiasmalChangeStance();

				if (!GetACSTransformationRedMiasmal().HasTag('ACS_Transformation_Red_Miasmal_Stationary_Transition')
				)
				{
					ACSTransformRedMiasmalMovementAdjustForwardRight();
				}

				GetACSTransformationRedMiasmal().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationRedMiasmal().GetHeadingVector()));

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationRedMiasmal().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationRedMiasmal().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftY') > 0.1 && theInput.GetActionValue('GI_AxisLeftX') < -0.1 )
			{
				TransformationRedMiasmalRestoreRotation();

				RedMiasmalChangeStance();

				if (!GetACSTransformationRedMiasmal().HasTag('ACS_Transformation_Red_Miasmal_Stationary_Transition')
				)
				{
					ACSTransformRedMiasmalMovementAdjustForwardLeft();
				}

				GetACSTransformationRedMiasmal().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationRedMiasmal().GetHeadingVector()));

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationRedMiasmal().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationRedMiasmal().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftY') < -0.1 && theInput.GetActionValue('GI_AxisLeftX') > 0.1 )
			{
				TransformationRedMiasmalRestoreRotation();

				RedMiasmalChangeStance();

				if (!GetACSTransformationRedMiasmal().HasTag('ACS_Transformation_Red_Miasmal_Stationary_Transition')
				)
				{
					ACSTransformRedMiasmalMovementAdjustBackwardRight();
				}

				GetACSTransformationRedMiasmal().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationRedMiasmal().GetHeadingVector()));

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationRedMiasmal().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationRedMiasmal().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftX') < -0.1 && theInput.GetActionValue('GI_AxisLeftY') < -0.1 )
			{
				TransformationRedMiasmalRestoreRotation();

				RedMiasmalChangeStance();

				if (!GetACSTransformationRedMiasmal().HasTag('ACS_Transformation_Red_Miasmal_Stationary_Transition')
				)
				{
					ACSTransformRedMiasmalMovementAdjustBackwardLeft();
				}

				GetACSTransformationRedMiasmal().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationRedMiasmal().GetHeadingVector()));

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationRedMiasmal().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationRedMiasmal().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
		}
	}

	private var red_miasmal_light_attack_index_1																									: int;
	default red_miasmal_light_attack_index_1 																										= -1;

	private var previous_red_miasmal_light_attack_index_1																							: int;
	default previous_red_miasmal_light_attack_index_1 																								= -1;

	private var red_miasmal_heavy_attack_index_1																									: int;
	default red_miasmal_heavy_attack_index_1 																										= -1;

	private var previous_red_miasmal_heavy_attack_index_1																							: int;
	default previous_red_miasmal_heavy_attack_index_1 																								= -1;

	private var red_miasmal_special_attack_index_1																									: int;
	default red_miasmal_special_attack_index_1 																										= -1;

	private var previous_red_miasmal_special_attack_index_1																							: int;
	default previous_red_miasmal_special_attack_index_1 																							= -1;


	function ACS_Transformation_Red_Miasmal_Light_Attacks()
	{
		if (ACS_can_perform_transformation_light_attack())
		{
			ACS_refresh_transformation_light_attack_cooldown();

			ACSTransformationRedMiasmalRemoveMoveTimers();

			if (thePlayer.IsInCombat())
			{
				ACSTransformRedMiasmalMovementAdjustRotateTowardsEnemy();
			}

			red_miasmal_light_attack_index_1 = RandDifferent(this.previous_red_miasmal_light_attack_index_1 , 7);

			switch (red_miasmal_light_attack_index_1) 
			{	
				case 6:
				ACSTransformRedMiasmalPlayAnim( 'giant_combat_attack_f_4', 0.25f, 0.325f);

				AddTimer('RedMiasmalTentacleDelay_L', 0.5, false);

				AddTimer('RedMiasmalTentacleDelay_L_2', 1.25, false);

				AddTimer('RedMiasmalLightAttackDamageWide', 0.875, false);

				AddTimer('RedMiasmalLightAttackDamageWide_2', 1.25, false);
				break;


				case 5:
				ACSTransformRedMiasmalPlayAnim( 'giant_combat_attack_f_3', 0.25f, 0.325f);

				AddTimer('RedMiasmalTentacleDelay_R', 0.5, false);

				AddTimer('RedMiasmalLightAttackDamageWide', 0.875, false);
				break;


				case 4:
				ACSTransformRedMiasmalPlayAnim( 'giant_combat_attack_f_2', 0.25f, 0.325f);

				AddTimer('RedMiasmalTentacleDelay_R', 0.5, false);

				AddTimer('RedMiasmalLightAttackDamageWide', 0.875, false);
				break;


				case 3:
				ACSTransformRedMiasmalPlayAnim( 'giant_combat_attack_f_1', 0.25f, 0.325f);

				AddTimer('RedMiasmalTentacleDelay_L', 0.5, false);

				AddTimer('RedMiasmalLightAttackDamageWide', 0.875, false);
				break;


				case 2:
				ACSTransformRedMiasmalPlayAnim( 'monster_lessun_attack_right_swing', 0.25f, 0.325f);

				AddTimer('RedMiasmalTentacleDelay_R', 0.5, false);

				AddTimer('RedMiasmalLightAttackDamageWide', 0.875, false);
				break;

				case 1:
				ACSTransformRedMiasmalPlayAnim( 'monster_lessun_attack_left_swing', 0.25f, 0.325f);

				AddTimer('RedMiasmalTentacleDelay_L', 0.5, false);

				AddTimer('RedMiasmalLightAttackDamageWide', 0.875, false);
				break;
				
				default:
				ACSTransformRedMiasmalPlayAnim( 'monster_lessun_attack_center', 0.25f, 0.325f);

				AddTimer('RedMiasmalTentacleDelay_L', 0.5, false);

				AddTimer('RedMiasmalLightAttackDamage', 0.875, false);
				break;
			}
	
			this.previous_red_miasmal_light_attack_index_1 = red_miasmal_light_attack_index_1;
			
			ACS_StaminaDrainForced(5);
		}
	}

	function ACS_Transformation_Red_Miasmal_Heavy_Attacks()
	{
		if (ACS_can_perform_transformation_heavy_attack())
		{
			ACS_refresh_transformation_heavy_attack_cooldown();

			ACSTransformationRedMiasmalRemoveMoveTimers();

			if (thePlayer.IsInCombat())
			{
				ACSTransformRedMiasmalMovementAdjustRotateTowardsEnemy();
			}
	
			red_miasmal_heavy_attack_index_1 = RandDifferent(this.previous_red_miasmal_heavy_attack_index_1 , 2);

			switch (red_miasmal_heavy_attack_index_1) 
			{	
				case 1:
				ACSTransformRedMiasmalPlayAnim( 'giant_combat_attack_ground_2', 0.25f, 0.325f);
				AddTimer('RedMiasmalHeavyAttackDamage360', 2, false);
				AddTimer('RedMiasmalRootsDelay', 2, false);
				break;

				default:
				ACSTransformRedMiasmalPlayAnim( 'giant_combat_attack_ground_1', 0.25f, 0.325f);
				AddTimer('RedMiasmalHeavyAttackDamage360', 2, false);
				AddTimer('RedMiasmalRootsDelay', 2, false);
				break;
			}
	
			this.previous_red_miasmal_heavy_attack_index_1 = red_miasmal_heavy_attack_index_1;
		
			ACS_StaminaDrainForced(5);
		}
	}

	function ACS_Transformation_Red_Miasmal_Special_Attack_Pressed()
	{
		if (ACS_can_perform_transformation_special_attack())
		{
			ACS_refresh_transformation_special_attack_cooldown();

			ACSTransformationRedMiasmalRemoveMoveTimers();

			if (thePlayer.IsInCombat())
			{
				ACSTransformRedMiasmalMovementAdjustRotateTowardsEnemy();
			}

			GetACSTransformationRedMiasmal().AddTag('ACS_Transformation_Red_Miasmal_Rooted');

			ACSTransformRedMiasmalPlayAnim( 'monster_lessun_attack_root_start', 0.25f, 0.25f);

			AddTimer('Red_Miasmal_Tentacles_Start', 1.5, false);

			ACS_StaminaDrainForced(5);
		}
	}

	function ACS_Transformation_Red_Miasmal_Special_Attack_Released()
	{
		RemoveTimer('Red_Miasmal_Tentacles_Start');

		RemoveTimer('Red_Miasmal_Tentacles_Loop');

		GetACSTransformationRedMiasmal().StopEffect('hand_fx');

		GetACSTransformationRedMiasmal().StopEffect('hand_fx_root');

		GetACSTransformationRedMiasmal().StopEffect('hand_fx2_l');

		GetACSTransformationRedMiasmal().StopEffect('hand_fx2_r');

		ACSTransformRedMiasmalPlayAnim( 'monster_lessun_attack_root_end', 0.25f, 0.25f);

		GetACSTransformationRedMiasmal().RemoveTag('ACS_Transformation_Red_Miasmal_Rooted');
	}

	public timer function Red_Miasmal_Tentacles_Start ( dt : float, id : int) 
	{ 
		RedMiasmalTentacles();

		ACSTransformRedMiasmalPlayAnim( 'monster_lessun_attack_root_loop', 0.1f, 0.1f);

		theGame.GetSurfacePostFX().AddSurfacePostFXGroup( TraceFloor( GetACSTransformationRedMiasmal().GetWorldPosition() ),  0.3,  5,  2 ,  1,  1 );

		RemoveTimer('Red_Miasmal_Tentacles_Loop');
		AddTimer('Red_Miasmal_Tentacles_Loop', 1.5, true);
	}

	public timer function Red_Miasmal_Tentacles_Loop ( dt : float, id : int) 
	{ 
		RedMiasmalTentacles();
		
		GetACSTransformationRedMiasmal().StopEffect('hand_fx');
		GetACSTransformationRedMiasmal().PlayEffectSingle('hand_fx');

		GetACSTransformationRedMiasmal().StopEffect('hand_fx_root');
		GetACSTransformationRedMiasmal().PlayEffectSingle('hand_fx_root');

		GetACSTransformationRedMiasmal().StopEffect('hand_fx2_l');
		GetACSTransformationRedMiasmal().PlayEffectSingle('hand_fx2_l');

		GetACSTransformationRedMiasmal().StopEffect('hand_fx2_r');
		GetACSTransformationRedMiasmal().PlayEffectSingle('hand_fx2_r');

		theGame.GetSurfacePostFX().AddSurfacePostFXGroup( TraceFloor( GetACSTransformationRedMiasmal().GetWorldPosition() ),  0.3,  5,  2 ,  1,  1 );

		ACSTransformRedMiasmalPlayAnim( 'monster_lessun_attack_root_loop', 0.1f, 0.1f);
	}

	function RedMiasmalTentacles()
	{
		var actor							: CActor; 
		var actors		    				: array<CActor>;
		var i								: int;
		var npc								: CNewNPC;

		actors.Clear();

		actors = thePlayer.GetNPCsAndPlayersInRange( 25, 2, , FLAG_Attitude_Hostile + FLAG_ExcludePlayer + FLAG_OnlyAliveActors);

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				npc = (CNewNPC)actors[i];

				actor = actors[i];

				ACS_Red_Miasmal_Ability_Spawn_Big(actor.PredictWorldPosition(0.7));
			}
		}
	}

	public timer function ACS_Transformation_Red_Miasmal_Reset_Animation_Speed ( dt : float, id : int) 
	{ 
		GetACSTransformationRedMiasmal().ClearAnimationSpeedMultipliers();
	}

	function RedMiasmalLightAttackDamageActual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		attackRange = 4;

		attackAngle = 60;

		actors.Clear();

		actors = GetACSTransformationRedMiasmal().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationRedMiasmal().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationRedMiasmal()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Red_Miasmal_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Red_Miasmal_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Red_Miasmal_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					damageMax = maxTargetVitality * 0.25; 

					damageMin = maxTargetVitality * 0.125; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						damageMax = maxTargetEssence * 0.125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
					else
					{
						damageMax = maxTargetEssence * 0.25; 
					
						damageMin = maxTargetEssence * 0.125; 
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
				}

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				thePlayer.SoundEvent("cmb_play_dismemberment_gore");

				thePlayer.SoundEvent("monster_dettlaff_monster_vein_hit_blood");

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');		

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddEffectInfo( EET_Poison, 3 );

				dmg.AddEffectInfo( EET_Bleeding, 3 );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	public timer function RedMiasmalLightAttackDamage(deltaTime : float , id : int)
	{
		RedMiasmalLightAttackDamageActual();
	}

	function RedMiasmalLightAttackDamageWideActual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		attackRange = 4;

		attackAngle = 180;

		actors.Clear();

		actors = GetACSTransformationRedMiasmal().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationRedMiasmal().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationRedMiasmal()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Red_Miasmal_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Red_Miasmal_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Red_Miasmal_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					damageMax = maxTargetVitality * 0.25; 

					damageMin = maxTargetVitality * 0.125; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						damageMax = maxTargetEssence * 0.125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
					else
					{
						damageMax = maxTargetEssence * 0.25; 
					
						damageMin = maxTargetEssence * 0.125; 
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
				}

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				thePlayer.SoundEvent("cmb_play_dismemberment_gore");

				thePlayer.SoundEvent("monster_dettlaff_monster_vein_hit_blood");

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');		

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddEffectInfo( EET_Poison, 3 );

				dmg.AddEffectInfo( EET_Bleeding, 3 );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	public timer function RedMiasmalLightAttackDamageWide(deltaTime : float , id : int)
	{
		RedMiasmalLightAttackDamageWideActual();
	}

	public timer function RedMiasmalLightAttackDamageWide_2(deltaTime : float , id : int)
	{
		RedMiasmalLightAttackDamageWideActual();
	}

	function RedMiasmalLightAttackDamage360Actual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		attackRange = 3.5;

		attackAngle = 360;

		actors.Clear();

		actors = GetACSTransformationRedMiasmal().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationRedMiasmal().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationRedMiasmal()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Red_Miasmal_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Red_Miasmal_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Red_Miasmal_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					damageMax = maxTargetVitality * 0.25; 

					damageMin = maxTargetVitality * 0.125; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						damageMax = maxTargetEssence * 0.125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
					else
					{
						damageMax = maxTargetEssence * 0.25; 
					
						damageMin = maxTargetEssence * 0.125; 
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
				}

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				thePlayer.SoundEvent("cmb_play_dismemberment_gore");

				thePlayer.SoundEvent("monster_dettlaff_monster_vein_hit_blood");

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');		

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddEffectInfo( EET_Poison, 3 );

				dmg.AddEffectInfo( EET_Bleeding, 3 );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	public timer function RedMiasmalLightAttackDamage360(deltaTime : float , id : int)
	{
		RedMiasmalLightAttackDamage360Actual();
	}

	function RedMiasmalHeavyAttackDamage360Actual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		attackRange = 5;

		attackAngle = 360;

		actors.Clear();

		actors = GetACSTransformationRedMiasmal().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationRedMiasmal().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationRedMiasmal()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Red_Miasmal_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Red_Miasmal_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Red_Miasmal_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					damageMax = maxTargetVitality * 0.25; 

					damageMin = maxTargetVitality * 0.125; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						damageMax = maxTargetEssence * 0.125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
					else
					{
						damageMax = maxTargetEssence * 0.25; 
					
						damageMin = maxTargetEssence * 0.125; 
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
				}

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				thePlayer.SoundEvent("cmb_play_dismemberment_gore");

				thePlayer.SoundEvent("monster_dettlaff_monster_vein_hit_blood");

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');		

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddEffectInfo( EET_Poison, 3 );

				dmg.AddEffectInfo( EET_Bleeding, 3 );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	public timer function RedMiasmalHeavyAttackDamage360(deltaTime : float , id : int)
	{
		RedMiasmalHeavyAttackDamage360Actual();
	}

	public timer function RedMiasmalTentacleDelay_L(deltaTime : float , id : int)
	{
		GetACSTransformationRedMiasmal().StopEffect('hand_fx2_l');
		GetACSTransformationRedMiasmal().PlayEffectSingle('hand_fx2_l');
	}

	public timer function RedMiasmalTentacleDelay_L_2(deltaTime : float , id : int)
	{
		GetACSTransformationRedMiasmal().StopEffect('hand_fx2_l');
		GetACSTransformationRedMiasmal().PlayEffectSingle('hand_fx2_l');
	}

	public timer function RedMiasmalTentacleDelay_R(deltaTime : float , id : int)
	{
		GetACSTransformationRedMiasmal().StopEffect('hand_fx2_r');
		GetACSTransformationRedMiasmal().PlayEffectSingle('hand_fx2_r');
	}

	public timer function RedMiasmalTentacleDelay_R_2(deltaTime : float , id : int)
	{
		GetACSTransformationRedMiasmal().StopEffect('hand_fx2_r');
		GetACSTransformationRedMiasmal().PlayEffectSingle('hand_fx2_r');
	}

	public timer function RedMiasmalRootsDelay(deltaTime : float , id : int)
	{
		GetACSTransformationRedMiasmal().StopEffect('teleport_roots_1');
		GetACSTransformationRedMiasmal().PlayEffectSingle('teleport_roots_1');

		GetACSTransformationRedMiasmal().StopEffect('hand_fx2_r');
		GetACSTransformationRedMiasmal().PlayEffectSingle('hand_fx2_r');

		GetACSTransformationRedMiasmal().StopEffect('hand_fx2_l');
		GetACSTransformationRedMiasmal().PlayEffectSingle('hand_fx2_l');
	}

	function ACS_Transformation_Red_Miasmal_Dodge()
	{
		if (ACS_can_transformation_dodge() && thePlayer.GetStat(BCS_Stamina) >= thePlayer.GetStatMax( BCS_Stamina) * 0.05)
		{
			ACS_refresh_transformation_dodge_cooldown();

			ACSTransformationRedMiasmalRemoveMoveTimers();

			red_miasmal_dodge_timer_actual();

			if (thePlayer.IsInCombat())
			{
				ACSTransformRedMiasmalMovementAdjustRotateTowardsEnemy();
			}

			GetACSTransformationRedMiasmal().DestroyEffect('evil_appear' );
			GetACSTransformationRedMiasmal().DestroyEffect('evil_disappear' );

			GetACSTransformationRedMiasmal().DestroyEffect('disappear' );
			GetACSTransformationRedMiasmal().DestroyEffect('spawn_disappear' );

			GetACSTransformationRedMiasmal().DestroyEffect('him_smoke_disappear' );
			GetACSTransformationRedMiasmal().DestroyEffect('him_smoke_disappear_red' );

			GetACSTransformationRedMiasmal().StopEffect('teleport_roots_1');
			GetACSTransformationRedMiasmal().PlayEffectSingle('teleport_roots_1');

			ACSTransformRedMiasmalPlayAnim('monster_lessun_despawn', 0.25f, 0.325f);

			RemoveTimer('Transformation_Red_Miasmal_Teleport');

			AddTimer('Transformation_Red_Miasmal_Teleport', 1.5, false);

			ACS_StaminaDrainForced(5);
		}
		else
		{
			thePlayer.SoundEvent("gui_no_stamina");
		}
	}

	function Transformation_Red_Miasmal_Teleport_Actual()
	{
		var evadeTargetPos, victimPos 	: Vector;
		var dist 						: float;
		var evadeTarget					: CActor;

		if ( thePlayer.IsHardLockEnabled() )
		{
			evadeTarget = (CActor)( thePlayer.GetDisplayTarget() );
		}
		else
		{
			evadeTarget = thePlayer.moveTarget;		
		}

		dist = (((CMovingPhysicalAgentComponent)actor.GetMovingAgentComponent()).GetCapsuleRadius() 
		+ ((CMovingPhysicalAgentComponent)thePlayer.GetMovingAgentComponent()).GetCapsuleRadius()) * 1.25;

		evadeTargetPos = evadeTarget.GetWorldPosition();

		movementAdjustorRedMiasmal = GetACSTransformationRedMiasmal().GetMovingAgentComponent().GetMovementAdjustor();

		ticketRedMiasmal = movementAdjustorRedMiasmal.GetRequest( 'ACS_Transformation_Vampiress_Rotate');
		movementAdjustorRedMiasmal.CancelByName( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorRedMiasmal.CancelAll();

		ticketRedMiasmal = movementAdjustorRedMiasmal.CreateNewRequest( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorRedMiasmal.MaxRotationAdjustmentSpeed( ticketRedMiasmal, 500000 );
		movementAdjustorRedMiasmal.AdjustLocationVertically( ticketRedMiasmal, true );
		movementAdjustorRedMiasmal.ScaleAnimationLocationVertically( ticketRedMiasmal, true );

		victimPos = evadeTargetPos + VecFromHeading( AngleNormalize180( thePlayer.GetHeading() - dist ) ) * 7;

		if( !theGame.GetWorld().NavigationFindSafeSpot( victimPos, 0.3, 0.3 , newVictimPos) )
		{
			theGame.GetWorld().NavigationFindSafeSpot( victimPos, 0.3, 10 , newVictimPos );

			victimPos = newVictimPos;
		}

		movementAdjustorRedMiasmal.AdjustmentDuration( ticket, 0.06125 );
			
		movementAdjustorRedMiasmal.RotateTowards( ticketRedMiasmal, evadeTarget );

		victimPos.Z += 10;

		movementAdjustorRedMiasmal.SlideTo( ticketRedMiasmal, victimPos );

		RemoveTimer('Red_Miasmal_Teleport_Position_Adjust');
		AddTimer('Red_Miasmal_Teleport_Position_Adjust', 0.125, false);

		RemoveTimer('Red_Miasmal_Visibility_Restore');
		AddTimer('Red_Miasmal_Visibility_Restore', 0.5, false);
	}

	public timer function Red_Miasmal_Teleport_Position_Adjust ( dt : float, id : int) 
	{
		ACSTransformRedMiasmalMovementAdjustSlideToGround();
	}

	function ACSTransformRedMiasmalMovementAdjustSlideToGround()
	{
		var targetactor 									: CActor;

		movementAdjustorRedMiasmal = GetACSTransformationVampiress().GetMovingAgentComponent().GetMovementAdjustor();

		ticketRedMiasmal = movementAdjustorRedMiasmal.GetRequest( 'ACS_Transformation_Red_Miasmal_Rotate');
		movementAdjustorRedMiasmal.CancelByName( 'ACS_Transformation_Red_Miasmal_Rotate' );
		movementAdjustorRedMiasmal.CancelAll();

		ticketRedMiasmal = movementAdjustorVampiress.CreateNewRequest( 'ACS_Transformation_Vampiress_Rotate' );
		movementAdjustorRedMiasmal.AdjustmentDuration( ticketRedMiasmal, 0.00001 );
		movementAdjustorRedMiasmal.MaxRotationAdjustmentSpeed( ticketRedMiasmal, 500000 );

		if ( thePlayer.IsHardLockEnabled() && thePlayer.GetTarget() )
		{
			targetactor = (CActor)( thePlayer.GetDisplayTarget() );	
		}
		else
		{
			thePlayer.FindMoveTarget();
			targetactor = (CActor)( thePlayer.moveTarget );		
		}

		if (targetactor)
		{
			movementAdjustorRedMiasmal.RotateTowards( ticketRedMiasmal, targetactor );
		}
		else
		{
			movementAdjustorRedMiasmal.RotateTo( ticketRedMiasmal, VecHeading( theCamera.GetCameraDirection() ) );
		}

		movementAdjustorRedMiasmal.SlideTo( ticketRedMiasmal, ( ACSPlayerFixZAxis(GetACSTransformationRedMiasmal().GetWorldPosition() + GetACSTransformationRedMiasmal().GetWorldForward()) ));
	}

	public timer function Red_Miasmal_Visibility_Restore ( dt : float, id : int) 
	{ 
		ACSTransformRedMiasmalPlayAnim('monster_lessun_Spawn', 0.25f, 0.325f);

		GetACSTransformationRedMiasmal().DestroyEffect('evil_appear' );
		GetACSTransformationRedMiasmal().DestroyEffect('evil_disappear' );

		GetACSTransformationRedMiasmal().DestroyEffect('disappear' );
		GetACSTransformationRedMiasmal().DestroyEffect('spawn_disappear' );

		GetACSTransformationRedMiasmal().DestroyEffect('him_smoke_disappear' );
		GetACSTransformationRedMiasmal().DestroyEffect('him_smoke_disappear_red' );

		GetACSTransformationRedMiasmal().PlayEffectSingle('him_smoke_red' );

		GetACSTransformationRedMiasmal().PlayEffectSingle('evil_appear' );

		GetACSTransformationRedMiasmal().StopEffect('teleport_roots_2');
		GetACSTransformationRedMiasmal().PlayEffectSingle('teleport_roots_2');

		RedMiasmalLightAttackDamage360Actual();

		ACSTransformRedMiasmalPlayAnim('monster_lessun_Spawn', 0.25f, 0.325f);
	} 

	public timer function Transformation_Red_Miasmal_Teleport ( dt : float, id : int) 
	{ 
		Transformation_Red_Miasmal_Teleport_Actual();
	} 

	function red_miasmal_dodge_timer_actual() 
	{
		RemoveTimer('ACS_red_miasmal_dodge_timer_end');

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 

		thePlayer.SetIsCurrentlyDodging(true);
	
		AddTimer('ACS_red_miasmal_dodge_timer_end', 0.875  , false);
	}
	
	function red_miasmal_dodge_timer_end_actual() 
	{ 
		thePlayer.SetImmortalityMode( AIM_None, AIC_Combat ); 

		thePlayer.SetIsCurrentlyDodging(false);
	}

	public timer function ACS_red_miasmal_dodge_timer_end ( dt : float, id : int) 
	{ 
		red_miasmal_dodge_timer_end_actual();
	} 
	
	function ACSTransformationRedMiasmalRemoveMoveTimers()
	{
		GetACSTransformationRedMiasmal().EnableCharacterCollisions(true);

		GetACSTransformationRedMiasmal().ClearAnimationSpeedMultipliers();

		RemoveTimer('Red_Miasmal_Tentacles_Start');

		RemoveTimer('Red_Miasmal_Tentacles_Loop');

		RemoveTimer('RedMiasmalLightAttackDamage');

		RemoveTimer('RedMiasmalLightAttackDamageWide');

		RemoveTimer('RedMiasmalLightAttackDamageWide_2');

		RemoveTimer('RedMiasmalLightAttackDamage360');

		RemoveTimer('RedMiasmalTentacleDelay_L');

		RemoveTimer('RedMiasmalTentacleDelay_R');

		RemoveTimer('RedMiasmalTentacleDelay_L_2');

		RemoveTimer('RedMiasmalTentacleDelay_R_2');

		RemoveTimer('RedMiasmalRootsDelay');

		RemoveTimer('RedMiasmalHeavyAttackDamage360');

		GetACSTransformationRedMiasmal().StopEffect('hand_fx');

		GetACSTransformationRedMiasmal().StopEffect('hand_fx_root');

		GetACSTransformationRedMiasmal().StopEffect('hand_fx2_r');

		GetACSTransformationRedMiasmal().StopEffect('hand_fx2_l');

		GetACSTransformationRedMiasmal().RemoveTag('ACS_Transformation_Red_Miasmal_Rooted');

	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	public timer function Transformation_Sharley_Remove_Stationary_Tag ( dt : float, id : int) 
	{ 
		GetACSTransformationSharley().RemoveTag('ACS_Transformation_Sharley_Stationary_Transition');
	}

	function TransformationSharleyRestoreRotation()
	{
		if (GetACSTransformationSharley().HasTag('ACS_Transformation_Sharley_Stopped_Moving'))
		{
			RemoveTimer('Transformation_Sharley_Remove_Stationary_Tag');
			AddTimer('Transformation_Sharley_Remove_Stationary_Tag', 1, false);

			GetACSTransformationSharley().RemoveTag('ACS_Transformation_Sharley_Stopped_Moving');
		}
	}

	function SharleyChangeStance()
	{
		if (GetACSTransformationSharley().HasTag('ACS_Directional_Change_Anim'))
		{
			RemoveChangeStanceTimers();
			AddTimer('Sharley_Change_Stance_Forward', 0.25f, false);

			GetACSTransformationSharley().RemoveTag('ACS_Directional_Change_Anim');
		}
	}

	function ACSTransformSharleyMovementAdjustForward()
	{
		movementAdjustorSharley = GetACSTransformationSharley().GetMovingAgentComponent().GetMovementAdjustor();

		ticketSharley = movementAdjustorSharley.GetRequest( 'ACS_Transformation_Sharley_Rotate');
		movementAdjustorSharley.CancelByName( 'ACS_Transformation_Sharley_Rotate' );
		movementAdjustorSharley.CancelAll();

		ticketSharley = movementAdjustorSharley.CreateNewRequest( 'ACS_Transformation_Sharley_Rotate' );
		movementAdjustorSharley.AdjustmentDuration( ticketSharley, 0.5 );
		movementAdjustorSharley.MaxRotationAdjustmentSpeed( ticketSharley, 500000 );

		movementAdjustorSharley.RotateTo( ticketSharley, VecHeading( theCamera.GetCameraDirection() ) );

		movementAdjustorSharleyWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketSharleyWitcher = movementAdjustorSharleyWitcher.GetRequest( 'ACS_Transformation_Sharley_Witcher_Rotate');
		movementAdjustorSharleyWitcher.CancelByName( 'ACS_Transformation_Sharley_Witcher_Rotate' );
		movementAdjustorSharleyWitcher.CancelAll();

		ticketSharleyWitcher = movementAdjustorSharleyWitcher.CreateNewRequest( 'ACS_Transformation_Sharley_Witcher_Rotate' );
		movementAdjustorSharleyWitcher.AdjustmentDuration( ticketSharleyWitcher, 0.5 );
		movementAdjustorSharleyWitcher.MaxRotationAdjustmentSpeed( ticketSharleyWitcher, 500000 );

		movementAdjustorSharleyWitcher.RotateTo( ticketSharleyWitcher, VecHeading( theCamera.GetCameraDirection() ) );
	}

	function ACSTransformSharleyMovementAdjustBackward()
	{
		movementAdjustorSharley = GetACSTransformationSharley().GetMovingAgentComponent().GetMovementAdjustor();

		ticketSharley = movementAdjustorSharley.GetRequest( 'ACS_Transformation_Sharley_Rotate');
		movementAdjustorSharley.CancelByName( 'ACS_Transformation_Sharley_Rotate' );
		movementAdjustorSharley.CancelAll();

		ticketSharley = movementAdjustorSharley.CreateNewRequest( 'ACS_Transformation_Sharley_Rotate' );
		movementAdjustorSharley.AdjustmentDuration( ticketSharley, 0.5 );
		movementAdjustorSharley.MaxRotationAdjustmentSpeed( ticketSharley, 500000 );

		movementAdjustorSharley.RotateTo( ticketSharley, VecHeading( theCamera.GetCameraDirection() * -5 ) );

		movementAdjustorSharleyWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketSharleyWitcher = movementAdjustorSharleyWitcher.GetRequest( 'ACS_Transformation_Sharley_Witcher_Rotate');
		movementAdjustorSharleyWitcher.CancelByName( 'ACS_Transformation_Sharley_Witcher_Rotate' );
		movementAdjustorSharleyWitcher.CancelAll();

		ticketSharleyWitcher = movementAdjustorSharleyWitcher.CreateNewRequest( 'ACS_Transformation_Sharley_Witcher_Rotate' );
		movementAdjustorSharleyWitcher.AdjustmentDuration( ticketSharleyWitcher, 0.5 );
		movementAdjustorSharleyWitcher.MaxRotationAdjustmentSpeed( ticketSharleyWitcher, 500000 );

		movementAdjustorSharleyWitcher.RotateTo( ticketSharleyWitcher, VecHeading( theCamera.GetCameraDirection() * -5 ) );
	}

	function ACSTransformSharleyMovementAdjustRight()
	{
		movementAdjustorSharley = GetACSTransformationSharley().GetMovingAgentComponent().GetMovementAdjustor();

		ticketSharley = movementAdjustorSharley.GetRequest( 'ACS_Transformation_Sharley_Rotate');
		movementAdjustorSharley.CancelByName( 'ACS_Transformation_Sharley_Rotate' );
		movementAdjustorSharley.CancelAll();

		ticketSharley = movementAdjustorSharley.CreateNewRequest( 'ACS_Transformation_Sharley_Rotate' );
		movementAdjustorSharley.AdjustmentDuration( ticketSharley, 0.5 );
		movementAdjustorSharley.MaxRotationAdjustmentSpeed( ticketSharley, 500000 );

		movementAdjustorSharley.RotateTo( ticketSharley, VecHeading( theCamera.GetCameraDirection() + theCamera.GetCameraRight() * 5 ) );




		movementAdjustorSharleyWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketSharleyWitcher = movementAdjustorSharleyWitcher.GetRequest( 'ACS_Transformation_Sharley_Witcher_Rotate');
		movementAdjustorSharleyWitcher.CancelByName( 'ACS_Transformation_Sharley_Witcher_Rotate' );
		movementAdjustorSharleyWitcher.CancelAll();

		ticketSharleyWitcher = movementAdjustorSharleyWitcher.CreateNewRequest( 'ACS_Transformation_Sharley_Witcher_Rotate' );
		movementAdjustorSharleyWitcher.AdjustmentDuration( ticketSharleyWitcher, 0.5 );
		movementAdjustorSharleyWitcher.MaxRotationAdjustmentSpeed( ticketSharleyWitcher, 500000 );

		movementAdjustorSharleyWitcher.RotateTo( ticketSharleyWitcher, VecHeading( theCamera.GetCameraDirection() + theCamera.GetCameraRight() * 5 ) );
	}

	function ACSTransformSharleyMovementAdjustLeft()
	{
		movementAdjustorSharley = GetACSTransformationSharley().GetMovingAgentComponent().GetMovementAdjustor();

		ticketSharley = movementAdjustorSharley.GetRequest( 'ACS_Transformation_Sharley_Rotate');
		movementAdjustorSharley.CancelByName( 'ACS_Transformation_Sharley_Rotate' );
		movementAdjustorSharley.CancelAll();

		ticketSharley = movementAdjustorSharley.CreateNewRequest( 'ACS_Transformation_Sharley_Rotate' );
		movementAdjustorSharley.AdjustmentDuration( ticketSharley, 0.5 );
		movementAdjustorSharley.MaxRotationAdjustmentSpeed( ticketSharley, 500000 );

		movementAdjustorSharley.RotateTo( ticketSharley, VecHeading( theCamera.GetCameraDirection() + theCamera.GetCameraRight() * -5 ) );



		movementAdjustorSharleyWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketSharleyWitcher = movementAdjustorSharleyWitcher.GetRequest( 'ACS_Transformation_Sharley_Witcher_Rotate');
		movementAdjustorSharleyWitcher.CancelByName( 'ACS_Transformation_Sharley_Witcher_Rotate' );
		movementAdjustorSharleyWitcher.CancelAll();

		ticketSharleyWitcher = movementAdjustorSharleyWitcher.CreateNewRequest( 'ACS_Transformation_Sharley_Witcher_Rotate' );
		movementAdjustorSharleyWitcher.AdjustmentDuration( ticketSharleyWitcher, 0.5 );
		movementAdjustorSharleyWitcher.MaxRotationAdjustmentSpeed( ticketSharleyWitcher, 500000 );

		movementAdjustorSharleyWitcher.RotateTo( ticketSharleyWitcher, VecHeading( theCamera.GetCameraDirection() + theCamera.GetCameraRight() * -5 ) );
	}

	function ACSTransformSharleyMovementAdjustForwardRight()
	{
		movementAdjustorSharley = GetACSTransformationSharley().GetMovingAgentComponent().GetMovementAdjustor();

		ticketSharley = movementAdjustorSharley.GetRequest( 'ACS_Transformation_Sharley_Rotate');
		movementAdjustorSharley.CancelByName( 'ACS_Transformation_Sharley_Rotate' );
		movementAdjustorSharley.CancelAll();

		ticketSharley = movementAdjustorSharley.CreateNewRequest( 'ACS_Transformation_Sharley_Rotate' );
		movementAdjustorSharley.AdjustmentDuration( ticketSharley, 1 );
		movementAdjustorSharley.MaxRotationAdjustmentSpeed( ticketSharley, 500000 );

		//movementAdjustorSharley.RotateTo( ticketSharley, VecHeading( (theCamera.GetCameraDirection() * 5)  + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * 5) ) );

		movementAdjustorSharley.RotateTo( ticketSharley, VecHeading( (theCamera.GetCameraDirection() * 5) + (theCamera.GetCameraRight() * 5) ) );



		movementAdjustorSharleyWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketSharleyWitcher = movementAdjustorSharleyWitcher.GetRequest( 'ACS_Transformation_Sharley_Witcher_Rotate');
		movementAdjustorSharleyWitcher.CancelByName( 'ACS_Transformation_Sharley_Witcher_Rotate' );
		movementAdjustorSharleyWitcher.CancelAll();

		ticketSharleyWitcher = movementAdjustorSharleyWitcher.CreateNewRequest( 'ACS_Transformation_Sharley_Witcher_Rotate' );
		movementAdjustorSharleyWitcher.AdjustmentDuration( ticketSharleyWitcher, 1 );
		movementAdjustorSharleyWitcher.MaxRotationAdjustmentSpeed( ticketSharleyWitcher, 500000 );

		//movementAdjustorSharleyWitcher.RotateTo( ticketSharleyWitcher, VecHeading( (theCamera.GetCameraDirection() * 5)  + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * 5) ) );

		movementAdjustorSharleyWitcher.RotateTo( ticketSharleyWitcher, VecHeading( (theCamera.GetCameraDirection() * 5)  + (theCamera.GetCameraRight() * 5) ) );
	}

	function ACSTransformSharleyMovementAdjustForwardLeft()
	{
		movementAdjustorSharley = GetACSTransformationSharley().GetMovingAgentComponent().GetMovementAdjustor();

		ticketSharley = movementAdjustorSharley.GetRequest( 'ACS_Transformation_Sharley_Rotate');
		movementAdjustorSharley.CancelByName( 'ACS_Transformation_Sharley_Rotate' );
		movementAdjustorSharley.CancelAll();

		ticketSharley = movementAdjustorSharley.CreateNewRequest( 'ACS_Transformation_Sharley_Rotate' );
		movementAdjustorSharley.AdjustmentDuration( ticketSharley, 1 );
		movementAdjustorSharley.MaxRotationAdjustmentSpeed( ticketSharley, 500000 );

		//movementAdjustorSharley.RotateTo( ticketSharley, VecHeading( (theCamera.GetCameraDirection() * 5)  + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * -5) ) );

		movementAdjustorSharley.RotateTo( ticketSharley, VecHeading( (theCamera.GetCameraDirection() * 5) + (theCamera.GetCameraRight() * -5) ) );



		movementAdjustorSharleyWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketSharleyWitcher = movementAdjustorSharleyWitcher.GetRequest( 'ACS_Transformation_Sharley_Witcher_Rotate');
		movementAdjustorSharleyWitcher.CancelByName( 'ACS_Transformation_Sharley_Witcher_Rotate' );
		movementAdjustorSharleyWitcher.CancelAll();

		ticketSharleyWitcher = movementAdjustorSharleyWitcher.CreateNewRequest( 'ACS_Transformation_Sharley_Witcher_Rotate' );
		movementAdjustorSharleyWitcher.AdjustmentDuration( ticketSharleyWitcher, 1 );
		movementAdjustorSharleyWitcher.MaxRotationAdjustmentSpeed( ticketSharleyWitcher, 500000 );

		//movementAdjustorSharleyWitcher.RotateTo( ticketSharleyWitcher, VecHeading( (theCamera.GetCameraDirection() * 5) + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * -5) ) );

		movementAdjustorSharleyWitcher.RotateTo( ticketSharleyWitcher, VecHeading( (theCamera.GetCameraDirection() * 5) + (theCamera.GetCameraRight() * -5) ) );
	}

	function ACSTransformSharleyMovementAdjustBackwardRight()
	{
		movementAdjustorSharley = GetACSTransformationSharley().GetMovingAgentComponent().GetMovementAdjustor();

		ticketSharley = movementAdjustorSharley.GetRequest( 'ACS_Transformation_Sharley_Rotate');
		movementAdjustorSharley.CancelByName( 'ACS_Transformation_Sharley_Rotate' );
		movementAdjustorSharley.CancelAll();

		ticketSharley = movementAdjustorSharley.CreateNewRequest( 'ACS_Transformation_Sharley_Rotate' );
		movementAdjustorSharley.AdjustmentDuration( ticketSharley, 1 );
		movementAdjustorSharley.MaxRotationAdjustmentSpeed( ticketSharley, 500000 );

		//movementAdjustorSharley.RotateTo( ticketSharley, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraForward() * -5) + (theCamera.GetCameraRight() * 5) ) );

		movementAdjustorSharley.RotateTo( ticketSharley, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraRight() * 5) ) );



		movementAdjustorSharleyWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketSharleyWitcher = movementAdjustorSharleyWitcher.GetRequest( 'ACS_Transformation_Sharley_Witcher_Rotate');
		movementAdjustorSharleyWitcher.CancelByName( 'ACS_Transformation_Sharley_Witcher_Rotate' );
		movementAdjustorSharleyWitcher.CancelAll();

		ticketSharleyWitcher = movementAdjustorSharleyWitcher.CreateNewRequest( 'ACS_Transformation_Sharley_Witcher_Rotate' );
		movementAdjustorSharleyWitcher.AdjustmentDuration( ticketSharleyWitcher, 1 );
		movementAdjustorSharleyWitcher.MaxRotationAdjustmentSpeed( ticketSharleyWitcher, 500000 );

		//movementAdjustorSharleyWitcher.RotateTo( ticketSharleyWitcher, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraForward() * -5) + (theCamera.GetCameraRight() * 5) ) );

		movementAdjustorSharleyWitcher.RotateTo( ticketSharleyWitcher, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraRight() * 5) ) );
	}

	function ACSTransformSharleyMovementAdjustBackwardLeft()
	{
		movementAdjustorSharley = GetACSTransformationSharley().GetMovingAgentComponent().GetMovementAdjustor();

		ticketSharley = movementAdjustorSharley.GetRequest( 'ACS_Transformation_Sharley_Rotate');
		movementAdjustorSharley.CancelByName( 'ACS_Transformation_Sharley_Rotate' );
		movementAdjustorSharley.CancelAll();

		ticketSharley = movementAdjustorSharley.CreateNewRequest( 'ACS_Transformation_Sharley_Rotate' );
		movementAdjustorSharley.AdjustmentDuration( ticketSharley, 1 );
		movementAdjustorSharley.MaxRotationAdjustmentSpeed( ticketSharley, 500000 );

		//movementAdjustorSharley.RotateTo( ticketSharley, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraForward() * -5) + (theCamera.GetCameraRight() * -5) ) );

		movementAdjustorSharley.RotateTo( ticketSharley, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraRight() * -5) ) );



		movementAdjustorSharleyWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketSharleyWitcher = movementAdjustorSharleyWitcher.GetRequest( 'ACS_Transformation_Sharley_Witcher_Rotate');
		movementAdjustorSharleyWitcher.CancelByName( 'ACS_Transformation_Sharley_Witcher_Rotate' );
		movementAdjustorSharleyWitcher.CancelAll();

		ticketSharleyWitcher = movementAdjustorSharleyWitcher.CreateNewRequest( 'ACS_Transformation_Sharley_Witcher_Rotate' );
		movementAdjustorSharleyWitcher.AdjustmentDuration( ticketSharleyWitcher, 1 );
		movementAdjustorSharleyWitcher.MaxRotationAdjustmentSpeed( ticketSharleyWitcher, 500000 );

		//movementAdjustorSharleyWitcher.RotateTo( ticketSharleyWitcher, VecHeading( theCamera.GetCameraDirection()  + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * -5) ) );

		movementAdjustorSharleyWitcher.RotateTo( ticketSharleyWitcher, VecHeading( theCamera.GetCameraDirection() + (theCamera.GetCameraRight() * -5) ) );
	}

	function ACSTransformSharleyMovementAdjustRotateTowardsEnemy()
	{
		movementAdjustorSharley = GetACSTransformationSharley().GetMovingAgentComponent().GetMovementAdjustor();

		ticketSharley = movementAdjustorSharley.GetRequest( 'ACS_Transformation_Sharley_Rotate');
		movementAdjustorSharley.CancelByName( 'ACS_Transformation_Sharley_Rotate' );
		movementAdjustorSharley.CancelAll();

		ticketSharley = movementAdjustorSharley.CreateNewRequest( 'ACS_Transformation_Sharley_Rotate' );
		movementAdjustorSharley.AdjustmentDuration( ticketSharley, 0.5 );
		movementAdjustorSharley.MaxRotationAdjustmentSpeed( ticketSharley, 500000 );

		if (thePlayer.GetTarget())
		{
			movementAdjustorSharley.RotateTowards( ticketSharley, thePlayer.GetTarget() );
		}
		else
		{
			movementAdjustorSharley.RotateTo( ticketSharley, VecHeading( theCamera.GetCameraDirection() ) );
		}
	}

	private var SharleyRollCallTime																											: float;
	private var SharleyRollDoubleTap 																										: bool;

	function SharleyRollInit()
	{
		if( SharleyRollCallTime + DOUBLE_TAP_WINDOW >= theGame.GetEngineTimeAsSeconds() )
		{
			SharleyRollDoubleTap = true;
		}
		else
		{
			SharleyRollDoubleTap = false;	
		}
		
		if( SharleyRollDoubleTap )
		{
			GetACSTransformationSharley().AddTag('ACS_Sharley_Roll_Init');
		}
		else 
		{	
			
		}

		SharleyRollCallTime = theGame.GetEngineTimeAsSeconds();
	}

	var last_transformation_roll_damage_time : float;

	function ACS_can_apply_roll_damage(): bool 
	{
		return theGame.GetEngineTimeAsSeconds() - last_transformation_roll_damage_time > 0.25;
	}

	function ACS_refresh_roll_damage_cooldown() 
	{
		last_transformation_roll_damage_time = theGame.GetEngineTimeAsSeconds();
	}

	function SharleyRollDamage()
	{
		var actor							: CActor; 
		var actors		    				: array<CActor>;
		var enemyAnimatedComponent 			: CAnimatedComponent;
		var i								: int;
		var npc								: CNewNPC;
		var dmg								: W3DamageAction;
		var projDMG							: float;

		if (ACS_can_apply_roll_damage())
		{
			ACS_refresh_roll_damage_cooldown();

			actors.Clear();

			actors = thePlayer.GetNPCsAndPlayersInRange( 2, 50, , FLAG_Attitude_Hostile + FLAG_ExcludePlayer + FLAG_OnlyAliveActors);

			if( actors.Size() > 0 )
			{
				for( i = 0; i < actors.Size(); i += 1 )
				{
					npc = (CNewNPC)actors[i];

					actor = actors[i];

					if (npc != GetACSTransformationSharley()
					&& actor != GetACSTransformationSharley())
					{
						dmg =  new W3DamageAction in this;

						dmg.Initialize(GetWitcherPlayer(), actor, GetWitcherPlayer(), GetWitcherPlayer().GetName(), EHRT_None, CPS_Undefined, false, false, true, false);

						if (actor.UsesVitality()) 
						{ 
							if ( actor.GetStat( BCS_Vitality ) >= actor.GetStatMax( BCS_Vitality ) * 0.25 )
							{
								projDMG = actor.GetStat( BCS_Vitality ) * 0.06125; 
							}
							else if ( actor.GetStat( BCS_Vitality ) < actor.GetStatMax( BCS_Vitality ) * 0.25 )
							{
								projDMG = ( actor.GetStatMax( BCS_Vitality ) - actor.GetStat( BCS_Vitality ) ) * 0.06125; 
							}
						} 
						else if (actor.UsesEssence()) 
						{ 
							if (((CMovingPhysicalAgentComponent)(actor.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
							|| actor.GetRadius() >= 0.7
							)
							{
								if ( actor.GetStat( BCS_Essence ) >= actor.GetStatMax( BCS_Essence ) * 0.25 )
								{
									projDMG = actor.GetStat( BCS_Essence ) * 0.030625; 
								}
								else if ( actor.GetStat( BCS_Essence ) < actor.GetStatMax( BCS_Essence ) * 0.25 )
								{
									projDMG = ( actor.GetStatMax( BCS_Essence ) - actor.GetStat( BCS_Essence ) ) * 0.030625; 
								}
							}
							else
							{
								if ( actor.GetStat( BCS_Essence ) >= actor.GetStatMax( BCS_Essence ) * 0.25 )
								{
									projDMG = actor.GetStat( BCS_Essence ) * 0.06125; 
								}
								else if ( actor.GetStat( BCS_Essence ) < actor.GetStatMax( BCS_Essence ) * 0.25 )
								{
									projDMG = ( actor.GetStatMax( BCS_Essence ) - actor.GetStat( BCS_Essence ) ) * 0.06125; 
								}
							}
						}

						dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, projDMG );

						dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, projDMG );

						dmg.SetHitAnimationPlayType(EAHA_ForceYes);

						thePlayer.SoundEvent("sharley_roll_hit_add");

						dmg.AddEffectInfo(EET_HeavyKnockdown, 0.5);

						dmg.SetForceExplosionDismemberment();
						
						theGame.damageMgr.ProcessAction( dmg );
						
						delete dmg;
					}
				}
			}
		}
	}

	private var sharley_light_attack_index_1																									: int;
	default sharley_light_attack_index_1 																										= -1;

	private var previous_sharley_light_attack_index_1																							: int;
	default previous_sharley_light_attack_index_1 																								= -1;


	private var sharley_light_attack_index_2																									: int;
	default sharley_light_attack_index_2 																										= -1;

	private var previous_sharley_light_attack_index_2																							: int;
	default previous_sharley_light_attack_index_2 																								= -1;

	private var sharley_heavy_attack_index_1																									: int;
	default sharley_heavy_attack_index_1 																										= -1;

	private var previous_sharley_heavy_attack_index_1																							: int;
	default previous_sharley_heavy_attack_index_1 																								= -1;

	private var sharley_special_attack_index_1																									: int;
	default sharley_special_attack_index_1 																										= -1;

	private var previous_sharley_special_attack_index_1																							: int;
	default previous_sharley_special_attack_index_1 																							= -1;

	function SharleyLightAttackDamageActual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		attackRange = 3;

		attackAngle = 90;

		actors.Clear();

		actors = GetACSTransformationSharley().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationSharley().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationSharley()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Sharley_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Sharley_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Sharley_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					damageMax = maxTargetVitality * 0.125; 

					damageMin = maxTargetVitality * 0.06125; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						damageMax = maxTargetEssence * 0.06125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
					else
					{
						damageMax = maxTargetEssence * 0.125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
				}

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				thePlayer.SoundEvent("cmb_play_dismemberment_gore");

				thePlayer.SoundEvent("monster_dettlaff_monster_vein_hit_blood");

				thePlayer.SoundEvent("sharley_roll_hit_add");

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');		

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddEffectInfo( EET_Stagger, 1 );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	public timer function SharleyLightAttackDamage(deltaTime : float , id : int)
	{
		SharleyLightAttackDamageActual();
	}

	function SharleyLightAttackDamage360Actual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		attackRange = 3;

		attackAngle = 360;

		actors.Clear();

		actors = GetACSTransformationSharley().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationSharley().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationSharley()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Sharley_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Sharley_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Sharley_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					damageMax = maxTargetVitality * 0.125; 

					damageMin = maxTargetVitality * 0.06125; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						damageMax = maxTargetEssence * 0.06125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
					else
					{
						damageMax = maxTargetEssence * 0.125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
				}

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				thePlayer.SoundEvent("cmb_play_dismemberment_gore");

				thePlayer.SoundEvent("monster_dettlaff_monster_vein_hit_blood");

				thePlayer.SoundEvent("sharley_roll_hit_add");

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');		

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddEffectInfo( EET_Stagger, 1 );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	public timer function SharleyLightAttackDamage360(deltaTime : float , id : int)
	{
		SharleyLightAttackDamage360Actual();
	}

	function SharleyHeavyAttackDamageActual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		attackRange = 4;

		attackAngle = 90;

		actors.Clear();

		actors = GetACSTransformationSharley().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationSharley().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationSharley()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Sharley_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Sharley_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Sharley_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					damageMax = maxTargetVitality * 0.25; 

					damageMin = maxTargetVitality * 0.125; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						damageMax = maxTargetEssence * 0.125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
					else
					{
						damageMax = maxTargetEssence * 0.25; 
					
						damageMin = maxTargetEssence * 0.125; 
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
				}

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				thePlayer.SoundEvent("cmb_play_dismemberment_gore");

				thePlayer.SoundEvent("monster_dettlaff_monster_vein_hit_blood");

				thePlayer.SoundEvent("sharley_roll_hit_add");

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');		

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddEffectInfo( EET_Stagger, 3 );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	public timer function SharleyHeavyAttackDamage(deltaTime : float , id : int)
	{
		SharleyHeavyAttackDamageActual();
	}

	function SharleyHeavyAttackDamage360Actual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		attackRange = 5;

		attackAngle = 360;

		actors.Clear();

		actors = GetACSTransformationSharley().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationSharley().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationSharley()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Sharley_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Sharley_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Sharley_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					damageMax = maxTargetVitality * 0.25; 

					damageMin = maxTargetVitality * 0.125; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						damageMax = maxTargetEssence * 0.125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
					else
					{
						damageMax = maxTargetEssence * 0.25; 
					
						damageMin = maxTargetEssence * 0.125; 
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
				}

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				thePlayer.SoundEvent("cmb_play_dismemberment_gore");

				thePlayer.SoundEvent("monster_dettlaff_monster_vein_hit_blood");

				thePlayer.SoundEvent("sharley_roll_hit_add");

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');		

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddEffectInfo( EET_Stagger, 3 );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	public timer function SharleyHeavyAttackDamage360(deltaTime : float , id : int)
	{
		SharleyHeavyAttackDamage360Actual();

		GetACSTransformationSharley().PlayEffectSingle('spawn_drop');
		GetACSTransformationSharley().StopEffect('spawn_drop');

		GetACSTransformationSharley().PlayEffectSingle('smoke_throw_screen');
		GetACSTransformationSharley().StopEffect('smoke_throw_screen');

		GetACSTransformationSharley().PlayEffectSingle('tremor_start_2');
		GetACSTransformationSharley().StopEffect('tremor_start_2');
	}

	public timer function SharleyHeavyAttackDamageShockwave(deltaTime : float , id : int)
	{
		GetTransformationSharleyClass().Sharley_Shockwave_Engage();

		GetACSTransformationSharley().PlayEffectSingle('spawn_drop');
		GetACSTransformationSharley().StopEffect('spawn_drop');

		GetACSTransformationSharley().PlayEffectSingle('smoke_throw_screen');
		GetACSTransformationSharley().StopEffect('smoke_throw_screen');

		GetACSTransformationSharley().PlayEffectSingle('tremor_start_2');
		GetACSTransformationSharley().StopEffect('tremor_start_2');

		GetACSTransformationSharley().SoundEvent("monster_sharley_movement_roll_hits_wall");
	}

	function SharleyReflectDamage()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		attackRange = 2.5;

		attackAngle = 360;

		actors.Clear();

		actors = GetACSTransformationSharley().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationSharley().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationSharley()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Sharley_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Sharley_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Sharley_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Reflect, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					damageMax = maxTargetVitality * 0.06125; 

					damageMin = maxTargetVitality * 0.06125; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						damageMax = maxTargetEssence * 0.06125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
					else
					{
						damageMax = maxTargetEssence * 0.06125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
				}

				thePlayer.SoundEvent("cmb_play_parry");

				GetACSTransformationSharley().SoundEvent("monster_sharley_combat_defense_hit");

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(1 + damageMax,100 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(1 + damageMax,100 + damageMin) );
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	function ACS_Transformation_Sharley_Light_Attacks()
	{
		if (GetACSTransformationSharley().HasTag('ACS_Sharley_Is_Spinning'))
		{
			return;
		}

		if (GetACSTransformationSharley().HasTag('ACS_Sharley_Roll_Init'))
		{
			ACSTransformationSharleyRemoveMoveTimers();

			if (thePlayer.IsInCombat())
			{
				ACSTransformSharleyMovementAdjustRotateTowardsEnemy();
			}
			else
			{
				ACSTransformSharleyMovementAdjustForward();
			}

			ACSTransformSharleyPlayAnim( 'roll_out_smash_attack', 0.25f, 0.325f);

			AddTimer('SharleyLightAttackDamage360', 0.55f, false);

			AddTimer('SharleyHeavyAttackDamage360', 1.05f, false);

			AddTimer('SharleyHeavyAttackDamageShockwave', 1.55f, false);

			GetACSTransformationSharley().RemoveTag('ACS_Sharley_Roll_Init');

			return;
		}

		if (ACS_can_perform_transformation_light_attack())
		{
			ACS_refresh_transformation_light_attack_cooldown();

			ACSTransformationSharleyRemoveMoveTimers();

			if (thePlayer.IsInCombat())
			{
				ACSTransformSharleyMovementAdjustRotateTowardsEnemy();
			}

			if
			(
				theInput.GetActionValue('LockAndGuard') > 0.7f 
				|| theInput.GetActionValue('Guard') > 0.7f 
			)	
			{
				sharley_light_attack_index_1 = RandDifferent(this.previous_sharley_light_attack_index_1 , 2);

				switch (sharley_light_attack_index_1) 
				{	
					case 1:
					ACSTransformSharleyPlayAnim( 'attack_004_shoulder_left', 0.25f, 0.325f);

					AddTimer('SharleyLightAttackDamage', 0.5f, false);
					break;

					default:
					ACSTransformSharleyPlayAnim( 'attack_004_shoulder', 0.25f, 0.325f);

					AddTimer('SharleyLightAttackDamage', 0.5f, false);
					break;
				}
		
				this.previous_sharley_light_attack_index_1 = sharley_light_attack_index_1;
			}
			else
			{
				sharley_light_attack_index_2 = RandDifferent(this.previous_sharley_light_attack_index_2 , 5);

				switch (sharley_light_attack_index_2) 
				{	
					case 4:
					ACSTransformSharleyPlayAnim( 'attack_sand_wall', 0.25f, 0.325f);

					AddTimer('SharleyLightAttackDamage', 0.65f, false);
					break;

					case 3:
					ACSTransformSharleyPlayAnim( 'attack_002_r', 0.25f, 0.325f);

					AddTimer('SharleyLightAttackDamage', 0.5f, false);
					break;

					case 2:
					ACSTransformSharleyPlayAnim( 'attack_002_l', 0.25f, 0.325f);

					AddTimer('SharleyLightAttackDamage', 0.5f, false);
					break;

					case 1:
					ACSTransformSharleyPlayAnim( 'attack_001_r0', 0.25f, 0.325f);

					AddTimer('SharleyLightAttackDamage', 0.65f, false);
					break;
					
					default:
					ACSTransformSharleyPlayAnim( 'attack_001_l0', 0.25f, 0.325f);

					AddTimer('SharleyLightAttackDamage', 0.58f, false);
					break;
				}
		
				this.previous_sharley_light_attack_index_2 = sharley_light_attack_index_2;
			}
			
			ACS_StaminaDrainForced(5);
		}
	}

	function ACS_Transformation_Sharley_Heavy_Attacks()
	{
		if (GetACSTransformationSharley().HasTag('ACS_Sharley_Is_Spinning'))
		{
			return;
		}

		if (GetACSTransformationSharley().HasTag('ACS_Sharley_Roll_Init'))
		{
			ACSTransformationSharleyRemoveMoveTimers();

			if (thePlayer.IsInCombat())
			{
				ACSTransformSharleyMovementAdjustRotateTowardsEnemy();
			}
			else
			{
				ACSTransformSharleyMovementAdjustForward();
			}

			ACSTransformSharleyPlayAnim( 'roll_out_smash_attack', 0.25f, 0.325f);

			AddTimer('SharleyLightAttackDamage360', 0.55f, false);

			AddTimer('SharleyHeavyAttackDamage360', 1.05f, false);

			AddTimer('SharleyHeavyAttackDamageShockwave', 1.55f, false);

			GetACSTransformationSharley().RemoveTag('ACS_Sharley_Roll_Init');

			return;
		}

		if (ACS_can_perform_transformation_heavy_attack())
		{
			ACS_refresh_transformation_heavy_attack_cooldown();

			ACSTransformationSharleyRemoveMoveTimers();

			if (thePlayer.IsInCombat())
			{
				ACSTransformSharleyMovementAdjustRotateTowardsEnemy();
			}
	
			sharley_heavy_attack_index_1 = RandDifferent(this.previous_sharley_heavy_attack_index_1 , 3);

			switch (sharley_heavy_attack_index_1) 
			{	
				case 2:
				ACSTransformSharleyPlayAnim( 'attack_strong_001_r', 0.25f, 0.325f);
				AddTimer('SharleyHeavyAttackDamageShockwave', 1.58, false);
				break;

				case 1:
				ACSTransformSharleyPlayAnim( 'attack_strong_001_l', 0.25f, 0.325f);
				AddTimer('SharleyHeavyAttackDamageShockwave', 1.58f, false);
				break;

				default:
				ACSTransformSharleyPlayAnim( 'block_counterattack', 0.25f, 0.325f);
				AddTimer('SharleyHeavyAttackDamageShockwave', 1.27, false);
				break;
			}
	
			this.previous_sharley_heavy_attack_index_1 = sharley_heavy_attack_index_1;
		
			ACS_StaminaDrainForced(5);
		}
	}

	timer function sharley_special_attack_delay ( dt : float, id : int) 
	{
		((CAnimatedComponent)((CNewNPC)GetACSTransformationSharley()).GetComponentByClassName( 'CAnimatedComponent' )).RaiseBehaviorForceEvent('3StateAttack');
	} 

	timer function sharley_special_attack_aoe ( dt : float, id : int) 
	{
		var actor							: CActor; 
		var actors		    				: array<CActor>;
		var enemyAnimatedComponent 			: CAnimatedComponent;
		var i								: int;
		var npc								: CNewNPC;
		var dmg								: W3DamageAction;
		var projDMG							: float;

		if (ACS_can_perform_transformation_light_attack())
		{
			ACS_refresh_transformation_light_attack_cooldown();

			actors.Clear();

			actors = thePlayer.GetNPCsAndPlayersInRange( 5, 50, , FLAG_Attitude_Hostile + FLAG_ExcludePlayer + FLAG_OnlyAliveActors);

			if( actors.Size() > 0 )
			{
				for( i = 0; i < actors.Size(); i += 1 )
				{
					npc = (CNewNPC)actors[i];

					actor = actors[i];

					if (npc != GetACSTransformationSharley()
					&& actor != GetACSTransformationSharley())
					{
						dmg =  new W3DamageAction in this;

						dmg.Initialize(GetWitcherPlayer(), actor, GetWitcherPlayer(), GetWitcherPlayer().GetName(), EHRT_None, CPS_Undefined, false, false, true, false);

						if (actor.UsesVitality()) 
						{ 
							if ( actor.GetStat( BCS_Vitality ) >= actor.GetStatMax( BCS_Vitality ) * 0.25 )
							{
								projDMG = actor.GetStat( BCS_Vitality ) * 0.125; 
							}
							else if ( actor.GetStat( BCS_Vitality ) < actor.GetStatMax( BCS_Vitality ) * 0.25 )
							{
								projDMG = ( actor.GetStatMax( BCS_Vitality ) - actor.GetStat( BCS_Vitality ) ) * 0.125; 
							}
						} 
						else if (actor.UsesEssence()) 
						{ 
							if (((CMovingPhysicalAgentComponent)(actor.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
							|| actor.GetRadius() >= 0.7
							)
							{
								if ( actor.GetStat( BCS_Essence ) >= actor.GetStatMax( BCS_Essence ) * 0.25 )
								{
									projDMG = actor.GetStat( BCS_Essence ) * 0.06125; 
								}
								else if ( actor.GetStat( BCS_Essence ) < actor.GetStatMax( BCS_Essence ) * 0.25 )
								{
									projDMG = ( actor.GetStatMax( BCS_Essence ) - actor.GetStat( BCS_Essence ) ) * 0.06125; 
								}
							}
							else
							{
								if ( actor.GetStat( BCS_Essence ) >= actor.GetStatMax( BCS_Essence ) * 0.25 )
								{
									projDMG = actor.GetStat( BCS_Essence ) * 0.125; 
								}
								else if ( actor.GetStat( BCS_Essence ) < actor.GetStatMax( BCS_Essence ) * 0.25 )
								{
									projDMG = ( actor.GetStatMax( BCS_Essence ) - actor.GetStat( BCS_Essence ) ) * 0.125; 
								}
							}
						}

						dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, projDMG );

						dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, projDMG );

						thePlayer.SoundEvent("sharley_roll_hit_add");

						dmg.SetHitAnimationPlayType(EAHA_ForceYes);

						dmg.AddEffectInfo(EET_HeavyKnockdown, 0.5);

						dmg.SetForceExplosionDismemberment();
						
						theGame.damageMgr.ProcessAction( dmg );
						
						delete dmg;
					}
				}
			}
		}
	}

	function ACS_Transformation_Sharley_Special_Attack_Pressed()
	{
		if (GetACSTransformationSharley().HasTag('ACS_Sharley_Is_Spinning'))
		{
			return;
		}

		if (GetACSTransformationSharley().HasTag('ACS_Sharley_Roll_Init'))
		{
			ACSTransformationSharleyRemoveMoveTimers();

			if (thePlayer.IsInCombat())
			{
				ACSTransformSharleyMovementAdjustRotateTowardsEnemy();
			}
			else
			{
				ACSTransformSharleyMovementAdjustForward();
			}

			ACSTransformSharleyPlayAnim( 'roll_out_smash_attack', 0.25f, 0.325f);

			AddTimer('SharleyLightAttackDamage360', 0.55f, false);

			AddTimer('SharleyHeavyAttackDamage360', 1.05f, false);

			AddTimer('SharleyHeavyAttackDamageShockwave', 1.55f, false);

			GetACSTransformationSharley().RemoveTag('ACS_Sharley_Roll_Init');

			return;
		}

		if (ACS_can_perform_transformation_special_attack())
		{
			ACS_refresh_transformation_special_attack_cooldown();

			ACSTransformationSharleyRemoveMoveTimers();

			if (thePlayer.IsInCombat())
			{
				ACSTransformSharleyMovementAdjustRotateTowardsEnemy();
			}

			if
			(
				theInput.GetActionValue('GI_AxisLeftX') != 0
				|| theInput.GetActionValue( 'GI_AxisLeftY' ) != 0 
			)	
			{
				sharley_special_attack_index_1 = RandDifferent(this.previous_sharley_special_attack_index_1 , 2);

				switch (sharley_special_attack_index_1) 
				{	
					case 1:
					ACSTransformSharleyPlayAnim( 'attack_003_short', 0.25f, 0.325f);
					AddTimer('SharleyLightAttackDamage360', 0.52f, false);
					AddTimer('SharleyHeavyAttackDamage360', 1.52f, false);
					AddTimer('SharleyHeavyAttackDamageShockwave', 2.52f, false);
					break;

					default:
					ACSTransformSharleyPlayAnim( 'attack_special_001', 0.25f, 0.325f);
					AddTimer('SharleyLightAttackDamage360', 0.59f, false);
					AddTimer('SharleyHeavyAttackDamage360', 1.59f, false);
					AddTimer('SharleyHeavyAttackDamageShockwave', 2.59f, false);
					break;
				}
		
				this.previous_sharley_special_attack_index_1 = sharley_special_attack_index_1;
			}
			else
			{
				ACSTransformSharleyPlayAnim( '', 0, 0);

				RemoveTimer('sharley_special_attack_delay');
				AddTimer('sharley_special_attack_delay', 0.0625, false);

				AddTimer('sharley_special_attack_aoe', 0.5, true);

				GetACSTransformationSharley().AddTag('ACS_Sharley_Is_Spinning');
			}

			ACS_StaminaDrainForced(5);
		}
	}

	function ACS_Transformation_Sharley_Special_Attack_Released()
	{
		if (GetACSTransformationSharley().HasTag('ACS_Sharley_Roll_Init'))
		{
			return;
		}

		if (GetACSTransformationSharley().HasTag('ACS_Sharley_Is_Spinning'))
		{
			if (((CNewNPC)GetACSTransformationSharley()).GetBehaviorVariable( 'TauntType' ) == 0)
			{
				((CNewNPC)GetACSTransformationSharley()).SetBehaviorVariable( 'TauntType', 1 , true );
			}
			else
			{
				((CNewNPC)GetACSTransformationSharley()).SetBehaviorVariable( 'TauntType', 0 , true );
			}

			RemoveTimer('sharley_special_attack_delay');

			RemoveTimer('sharley_special_attack_aoe' );

			((CAnimatedComponent)((CNewNPC)GetACSTransformationSharley()).GetComponentByClassName( 'CAnimatedComponent' )).RaiseBehaviorForceEvent('Taunt');

			ACSTransformSharleyPlayAnim('roll_back_from_idle_to_idle', 0.25f, 0.325f);

			RemoveTimer('SharleyLightAttackDamage360');
			AddTimer('SharleyLightAttackDamage360', 0.55f, false);

			GetACSTransformationSharley().RemoveTag('ACS_Sharley_Is_Spinning');
		}
	}

	function ACS_Transformation_Sharley_Dodge()
	{
		if (GetACSTransformationSharley().HasTag('ACS_Sharley_Roll_Init'))
		{
			return;
		}

		if (GetACSTransformationSharley().HasTag('ACS_Sharley_Is_Spinning'))
		{
			return;
		}

		if (ACS_can_transformation_dodge())
		{
			ACS_refresh_transformation_dodge_cooldown();

			ACSTransformationSharleyRemoveMoveTimers();

			sharley_dodge_timer_actual();

			if (thePlayer.IsInCombat())
			{
				ACSTransformSharleyMovementAdjustRotateTowardsEnemy();
			}
			else
			{
				ACSTransformSharleyMovementAdjustForward();
			}

			if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
			{
				ACSTransformSharleyPlayAnim('attack_dash_forward_block', 0.25f, 0.325f);
			}
			else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5)
			{
				ACSTransformSharleyPlayAnim('roll_back_from_idle_to_idle', 0.25f, 0.875f);
			}
			else if (theInput.GetActionValue('GI_AxisLeftX') > 0.5)
			{
				ACSTransformSharleyPlayAnim('roll_side_r180', 0.25f, 0.325f);
			}
			else if (theInput.GetActionValue('GI_AxisLeftX') < -0.5)
			{
				ACSTransformSharleyPlayAnim('roll_side_l180', 0.25f, 0.325f);
			}
			else
			{
				ACSTransformSharleyPlayAnim('roll_back_from_idle_to_idle', 0.25f, 0.325f);
			}

			AddTimer('SharleyLightAttackDamage360', 0.55f, false);

			ACS_StaminaDrainForced(5);
		}
	}

	function sharley_dodge_timer_actual() 
	{
		RemoveTimer('ACS_sharley_dodge_timer_end');

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 

		thePlayer.SetIsCurrentlyDodging(true);
	
		AddTimer('ACS_sharley_dodge_timer_end', 0.875  , false);
	}
	
	function sharley_dodge_timer_end_actual() 
	{ 
		thePlayer.SetImmortalityMode( AIM_None, AIC_Combat ); 

		thePlayer.SetIsCurrentlyDodging(false);
	}

	public timer function ACS_sharley_dodge_timer_end ( dt : float, id : int) 
	{ 
		sharley_dodge_timer_end_actual();
	} 

	function ACS_Transformation_Sharley_Move_Controls()
	{
		if (!GetACSTransformationSharley().IsEffectActive('saliva'))
		{
			GetACSTransformationSharley().PlayEffectSingle('saliva');
		}

		if (thePlayer.IsInCombat())
		{
			if (thePlayer.GetStat(BCS_Toxicity) < thePlayer.GetStatMax(BCS_Toxicity))
			{
				thePlayer.GainStat(BCS_Toxicity, (thePlayer.GetStatMax(BCS_Toxicity) - thePlayer.GetStat(BCS_Toxicity)) * 0.00006125);
			}
			
			thePlayer.DrainVitality(thePlayer.GetStat(BCS_Vitality) * 0.000030625);
		}
		else
		{
			if (thePlayer.GetStat(BCS_Toxicity) < thePlayer.GetStatMax(BCS_Toxicity))
			{
				thePlayer.GainStat(BCS_Toxicity, (thePlayer.GetStatMax(BCS_Toxicity) - thePlayer.GetStat(BCS_Toxicity)) * 0.000030625);
			}
			
			thePlayer.DrainVitality(thePlayer.GetStat(BCS_Vitality) * 0.0000153125);
		}

		GetACSTransformationSharley().GetMovingAgentComponent().EnableCombatMode( true );

		GetACSTransformationSharley().GetMovingAgentComponent().SetVirtualRadius( 'CombatCharacterRadius' );

		((CNewNPC)GetACSTransformationSharley()).SetBehaviorVariable( 'additiveTauntOn', 1, true );

		if (thePlayer.IsInCombat())
		{
			if (thePlayer.GetTarget())
			{
				((CNewNPC)GetACSTransformationSharley()).SetBehaviorVectorVariable( 'lookAtTarget', ((CActor)(thePlayer.GetTarget())).GetWorldPosition() );
			}
			else
			{
				((CNewNPC)GetACSTransformationSharley()).SetBehaviorVectorVariable( 'lookAtTarget', GetACSLookatEntity().GetWorldPosition() );
			}

			((CNewNPC)GetACSTransformationSharley()).SetBehaviorVariable( 'lookatOn', 1, true );
		}
		else
		{
			((CNewNPC)GetACSTransformationSharley()).SetBehaviorVectorVariable( 'lookAtTarget', GetACSLookatEntity().GetWorldPosition() );

			((CNewNPC)GetACSTransformationSharley()).SetBehaviorVariable( 'lookatOn', 1, true );
		}

		if (GetACSTransformationSharley().GetMovingAgentComponent().GetRelativeMoveSpeed() <= 0.1 )
		{
			if
			(
				theInput.GetLastActivationTime( 'GI_AxisLeftX' ) > 1.25f 
				|| theInput.GetLastActivationTime( 'GI_AxisLeftY' ) > 1.25f 
			)	
			{
				GetACSTransformationSharley().RemoveTag('ACS_Transformation_Sharley_Stationary_Transition');
			}
			else
			{
				RemoveTimer('Transformation_Sharley_Remove_Stationary_Tag');

				if (!GetACSTransformationSharley().HasTag('ACS_Transformation_Sharley_Stopped_Moving'))
				{
					GetACSTransformationSharley().AddTag('ACS_Transformation_Sharley_Stationary_Transition');

					GetACSTransformationSharley().AddTag('ACS_Transformation_Sharley_Stopped_Moving');
				}
			}
		}

		if (thePlayer.IsDodgeTimerRunning()
		|| thePlayer.IsCurrentlyDodging() 
		)
		{
			GetACSTransformationSharley().GetMovingAgentComponent().ForceSetRelativeMoveSpeed( 0 );
			GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed( 0 );
			return;
		}

		if (theInput.GetActionValue('GI_AxisLeftX') == 0 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
		{
			GetACSTransformationSharley().GetMovingAgentComponent().ForceSetRelativeMoveSpeed( 0 );
			GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed( 0 );
		}
		else
		{
			if (theInput.GetActionValue('GI_AxisLeftY') > 0.1 && theInput.GetActionValue('GI_AxisLeftX') == 0 )
			{
				TransformationSharleyRestoreRotation();

				GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationSharley().GetHeadingVector()));

				if (!GetACSTransformationSharley().HasTag('ACS_Transformation_Sharley_Stationary_Transition')
				)
				{
					ACSTransformSharleyMovementAdjustForward();
				}

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					if (GetACSTransformationSharley().HasTag('ACS_Sharley_Roll_Init'))
					{
						GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(3);

						SharleyRollDamage();
					}
					else
					{
						GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2);
					}
				}
				else
				{
					GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftY') < -0.1 && theInput.GetActionValue('GI_AxisLeftX') == 0 )
			{
				TransformationSharleyRestoreRotation();

				if (!GetACSTransformationSharley().HasTag('ACS_Transformation_Sharley_Stationary_Transition')
				)
				{
					GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationSharley().GetHeadingVector()));
						
					ACSTransformSharleyMovementAdjustBackward();
				}

				SharleyChangeStance();

				GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationSharley().GetHeadingVector()));

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					if (GetACSTransformationSharley().HasTag('ACS_Sharley_Roll_Init'))
					{
						GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(3);

						SharleyRollDamage();
					}
					else
					{
						GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2);
					}
				}
				else
				{
					GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftX') > 0.1 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
			{
				TransformationSharleyRestoreRotation();

				SharleyChangeStance();

				if (!GetACSTransformationSharley().HasTag('ACS_Transformation_Sharley_Stationary_Transition')
				)
				{
					ACSTransformSharleyMovementAdjustRight();
				}

				GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationSharley().GetHeadingVector()));

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					if (GetACSTransformationSharley().HasTag('ACS_Sharley_Roll_Init'))
					{
						GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(3);

						SharleyRollDamage();
					}
					else
					{
						GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2);
					} 
				}
				else
				{
					GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftX') < -0.1 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
			{
				TransformationSharleyRestoreRotation();

				SharleyChangeStance();

				if (!GetACSTransformationSharley().HasTag('ACS_Transformation_Sharley_Stationary_Transition')
				)
				{
					ACSTransformSharleyMovementAdjustLeft();
				}

				GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationSharley().GetHeadingVector()));

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					if (GetACSTransformationSharley().HasTag('ACS_Sharley_Roll_Init'))
					{
						GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(3);

						SharleyRollDamage();
					}
					else
					{
						GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2);
					} 
				}
				else
				{
					GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftY') > 0.1 && theInput.GetActionValue('GI_AxisLeftX') > 0.1 )
			{
				TransformationSharleyRestoreRotation();

				SharleyChangeStance();

				if (!GetACSTransformationSharley().HasTag('ACS_Transformation_Sharley_Stationary_Transition')
				)
				{
					ACSTransformSharleyMovementAdjustForwardRight();
				}

				GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationSharley().GetHeadingVector()));

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					if (GetACSTransformationSharley().HasTag('ACS_Sharley_Roll_Init'))
					{
						GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(3);

						SharleyRollDamage();
					}
					else
					{
						GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2);
					} 
				}
				else
				{
					GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftY') > 0.1 && theInput.GetActionValue('GI_AxisLeftX') < -0.1 )
			{
				TransformationSharleyRestoreRotation();

				SharleyChangeStance();

				if (!GetACSTransformationSharley().HasTag('ACS_Transformation_Sharley_Stationary_Transition')
				)
				{
					ACSTransformSharleyMovementAdjustForwardLeft();
				}

				GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationSharley().GetHeadingVector()));

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					if (GetACSTransformationSharley().HasTag('ACS_Sharley_Roll_Init'))
					{
						GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(3);

						SharleyRollDamage();
					}
					else
					{
						GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2);
					} 
				}
				else
				{
					GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftY') < -0.1 && theInput.GetActionValue('GI_AxisLeftX') > 0.1 )
			{
				TransformationSharleyRestoreRotation();

				SharleyChangeStance();

				if (!GetACSTransformationSharley().HasTag('ACS_Transformation_Sharley_Stationary_Transition')
				)
				{
					ACSTransformSharleyMovementAdjustBackwardRight();
				}

				GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationSharley().GetHeadingVector()));

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					if (GetACSTransformationSharley().HasTag('ACS_Sharley_Roll_Init'))
					{
						GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(3);

						SharleyRollDamage();
					}
					else
					{
						GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2);
					} 
				}
				else
				{
					GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftX') < -0.1 && theInput.GetActionValue('GI_AxisLeftY') < -0.1 )
			{
				TransformationSharleyRestoreRotation();

				SharleyChangeStance();

				if (!GetACSTransformationSharley().HasTag('ACS_Transformation_Sharley_Stationary_Transition')
				)
				{
					ACSTransformSharleyMovementAdjustBackwardLeft();
				}

				GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationSharley().GetHeadingVector()));

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					if (GetACSTransformationSharley().HasTag('ACS_Sharley_Roll_Init'))
					{
						GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(3);

						SharleyRollDamage();
					}
					else
					{
						GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2);
					} 
				}
				else
				{
					GetACSTransformationSharley().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
		}
	}

	function ACSTransformationSharleyRemoveMoveTimers()
	{
		GetACSTransformationSharley().EnableCharacterCollisions(true);

		GetACSTransformationSharley().ClearAnimationSpeedMultipliers();

		RemoveTimer('SharleyLightAttackDamage');

		RemoveTimer('SharleyLightAttackDamage360');

		RemoveTimer('SharleyHeavyAttackDamage');

		RemoveTimer('SharleyHeavyAttackDamage360');

		RemoveTimer('SharleyHeavyAttackDamageShockwave');

		RemoveTimer('sharley_special_attack_delay');

		if (((CNewNPC)GetACSTransformationSharley()).GetBehaviorVariable( 'TauntType' ) == 0)
		{
			((CNewNPC)GetACSTransformationSharley()).SetBehaviorVariable( 'TauntType', 1 , true );
		}
		else
		{
			((CNewNPC)GetACSTransformationSharley()).SetBehaviorVariable( 'TauntType', 0 , true );
		}

		((CAnimatedComponent)((CNewNPC)GetACSTransformationSharley()).GetComponentByClassName( 'CAnimatedComponent' )).RaiseBehaviorForceEvent('Taunt');

	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	public timer function Transformation_Black_Wolf_Remove_Stationary_Tag ( dt : float, id : int) 
	{ 
		GetACSTransformationBlackWolf().RemoveTag('ACS_Transformation_Black_Wolf_Stationary_Transition');
	}

	function TransformationBlackWolfRestoreRotation()
	{
		if (GetACSTransformationBlackWolf().HasTag('ACS_Transformation_Black_Wolf_Stopped_Moving'))
		{
			RemoveTimer('Transformation_Black_Wolf_Remove_Stationary_Tag');
			AddTimer('Transformation_Black_Wolf_Remove_Stationary_Tag', 1, false);

			GetACSTransformationBlackWolf().RemoveTag('ACS_Transformation_Black_Wolf_Stopped_Moving');
		}
	}

	function BlackWolfChangeStance()
	{
		if (GetACSTransformationBlackWolf().HasTag('ACS_Directional_Change_Anim'))
		{
			RemoveChangeStanceTimers();
			AddTimer('Black_Wolf_Change_Stance_Forward', 0.25f, false);

			GetACSTransformationBlackWolf().RemoveTag('ACS_Directional_Change_Anim');
		}
	}

	function ACSTransformBlackWolfMovementAdjustForward()
	{
		movementAdjustorBlackWolf = GetACSTransformationBlackWolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketBlackWolf = movementAdjustorBlackWolf.GetRequest( 'ACS_Transformation_Black_Wolf_Rotate');
		movementAdjustorBlackWolf.CancelByName( 'ACS_Transformation_Black_Wolf_Rotate' );
		movementAdjustorBlackWolf.CancelAll();

		ticketBlackWolf = movementAdjustorBlackWolf.CreateNewRequest( 'ACS_Transformation_Black_Wolf_Rotate' );
		movementAdjustorBlackWolf.AdjustmentDuration( ticketBlackWolf, 0.5 );
		movementAdjustorBlackWolf.MaxRotationAdjustmentSpeed( ticketBlackWolf, 500000 );

		movementAdjustorBlackWolf.RotateTo( ticketBlackWolf, VecHeading( theCamera.GetCameraDirection() ) );

		movementAdjustorBlackWolfWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketBlackWolfWitcher = movementAdjustorBlackWolfWitcher.GetRequest( 'ACS_Transformation_Black_Wolf_Witcher_Rotate');
		movementAdjustorBlackWolfWitcher.CancelByName( 'ACS_Transformation_Black_Wolf_Witcher_Rotate' );
		movementAdjustorBlackWolfWitcher.CancelAll();

		ticketBlackWolfWitcher = movementAdjustorBlackWolfWitcher.CreateNewRequest( 'ACS_Transformation_Black_Wolf_Witcher_Rotate' );
		movementAdjustorBlackWolfWitcher.AdjustmentDuration( ticketBlackWolfWitcher, 0.5 );
		movementAdjustorBlackWolfWitcher.MaxRotationAdjustmentSpeed( ticketBlackWolfWitcher, 500000 );

		movementAdjustorBlackWolfWitcher.RotateTo( ticketBlackWolfWitcher, VecHeading( theCamera.GetCameraDirection() ) );
	}

	function ACSTransformBlackWolfMovementAdjustBackward()
	{
		movementAdjustorBlackWolf = GetACSTransformationBlackWolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketBlackWolf = movementAdjustorBlackWolf.GetRequest( 'ACS_Transformation_Black_Wolf_Rotate');
		movementAdjustorBlackWolf.CancelByName( 'ACS_Transformation_Black_Wolf_Rotate' );
		movementAdjustorBlackWolf.CancelAll();

		ticketBlackWolf = movementAdjustorBlackWolf.CreateNewRequest( 'ACS_Transformation_Black_Wolf_Rotate' );
		movementAdjustorBlackWolf.AdjustmentDuration( ticketBlackWolf, 0.5 );
		movementAdjustorBlackWolf.MaxRotationAdjustmentSpeed( ticketBlackWolf, 500000 );

		movementAdjustorBlackWolf.RotateTo( ticketBlackWolf, VecHeading( theCamera.GetCameraDirection() * -5 ) );

		movementAdjustorBlackWolfWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketBlackWolfWitcher = movementAdjustorBlackWolfWitcher.GetRequest( 'ACS_Transformation_Black_Wolf_Witcher_Rotate');
		movementAdjustorBlackWolfWitcher.CancelByName( 'ACS_Transformation_Black_Wolf_Witcher_Rotate' );
		movementAdjustorBlackWolfWitcher.CancelAll();

		ticketBlackWolfWitcher = movementAdjustorBlackWolfWitcher.CreateNewRequest( 'ACS_Transformation_Black_Wolf_Witcher_Rotate' );
		movementAdjustorBlackWolfWitcher.AdjustmentDuration( ticketBlackWolfWitcher, 0.5 );
		movementAdjustorBlackWolfWitcher.MaxRotationAdjustmentSpeed( ticketBlackWolfWitcher, 500000 );

		movementAdjustorBlackWolfWitcher.RotateTo( ticketBlackWolfWitcher, VecHeading( theCamera.GetCameraDirection() * -5 ) );
	}

	function ACSTransformBlackWolfMovementAdjustRight()
	{
		movementAdjustorBlackWolf = GetACSTransformationBlackWolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketBlackWolf = movementAdjustorBlackWolf.GetRequest( 'ACS_Transformation_Black_Wolf_Rotate');
		movementAdjustorBlackWolf.CancelByName( 'ACS_Transformation_Black_Wolf_Rotate' );
		movementAdjustorBlackWolf.CancelAll();

		ticketBlackWolf = movementAdjustorBlackWolf.CreateNewRequest( 'ACS_Transformation_Black_Wolf_Rotate' );
		movementAdjustorBlackWolf.AdjustmentDuration( ticketBlackWolf, 0.5 );
		movementAdjustorBlackWolf.MaxRotationAdjustmentSpeed( ticketBlackWolf, 500000 );

		movementAdjustorBlackWolf.RotateTo( ticketBlackWolf, VecHeading( theCamera.GetCameraDirection() + theCamera.GetCameraRight() * 5 ) );




		movementAdjustorBlackWolfWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketBlackWolfWitcher = movementAdjustorBlackWolfWitcher.GetRequest( 'ACS_Transformation_Black_Wolf_Witcher_Rotate');
		movementAdjustorBlackWolfWitcher.CancelByName( 'ACS_Transformation_Black_Wolf_Witcher_Rotate' );
		movementAdjustorBlackWolfWitcher.CancelAll();

		ticketBlackWolfWitcher = movementAdjustorBlackWolfWitcher.CreateNewRequest( 'ACS_Transformation_Black_Wolf_Witcher_Rotate' );
		movementAdjustorBlackWolfWitcher.AdjustmentDuration( ticketBlackWolfWitcher, 0.5 );
		movementAdjustorBlackWolfWitcher.MaxRotationAdjustmentSpeed( ticketBlackWolfWitcher, 500000 );

		movementAdjustorBlackWolfWitcher.RotateTo( ticketBlackWolfWitcher, VecHeading( theCamera.GetCameraDirection() + theCamera.GetCameraRight() * 5 ) );
	}

	function ACSTransformBlackWolfMovementAdjustLeft()
	{
		movementAdjustorBlackWolf = GetACSTransformationBlackWolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketBlackWolf = movementAdjustorBlackWolf.GetRequest( 'ACS_Transformation_Black_Wolf_Rotate');
		movementAdjustorBlackWolf.CancelByName( 'ACS_Transformation_Black_Wolf_Rotate' );
		movementAdjustorBlackWolf.CancelAll();

		ticketBlackWolf = movementAdjustorBlackWolf.CreateNewRequest( 'ACS_Transformation_Black_Wolf_Rotate' );
		movementAdjustorBlackWolf.AdjustmentDuration( ticketBlackWolf, 0.5 );
		movementAdjustorBlackWolf.MaxRotationAdjustmentSpeed( ticketBlackWolf, 500000 );

		movementAdjustorBlackWolf.RotateTo( ticketBlackWolf, VecHeading( theCamera.GetCameraDirection() + theCamera.GetCameraRight() * -5 ) );



		movementAdjustorBlackWolfWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketBlackWolfWitcher = movementAdjustorBlackWolfWitcher.GetRequest( 'ACS_Transformation_Black_Wolf_Witcher_Rotate');
		movementAdjustorBlackWolfWitcher.CancelByName( 'ACS_Transformation_Black_Wolf_Witcher_Rotate' );
		movementAdjustorBlackWolfWitcher.CancelAll();

		ticketBlackWolfWitcher = movementAdjustorBlackWolfWitcher.CreateNewRequest( 'ACS_Transformation_Black_Wolf_Witcher_Rotate' );
		movementAdjustorBlackWolfWitcher.AdjustmentDuration( ticketBlackWolfWitcher, 0.5 );
		movementAdjustorBlackWolfWitcher.MaxRotationAdjustmentSpeed( ticketBlackWolfWitcher, 500000 );

		movementAdjustorBlackWolfWitcher.RotateTo( ticketBlackWolfWitcher, VecHeading( theCamera.GetCameraDirection() + theCamera.GetCameraRight() * -5 ) );
	}

	function ACSTransformBlackWolfMovementAdjustForwardRight()
	{
		movementAdjustorBlackWolf = GetACSTransformationBlackWolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketBlackWolf = movementAdjustorBlackWolf.GetRequest( 'ACS_Transformation_Black_Wolf_Rotate');
		movementAdjustorBlackWolf.CancelByName( 'ACS_Transformation_Black_Wolf_Rotate' );
		movementAdjustorBlackWolf.CancelAll();

		ticketBlackWolf = movementAdjustorBlackWolf.CreateNewRequest( 'ACS_Transformation_Black_Wolf_Rotate' );
		movementAdjustorBlackWolf.AdjustmentDuration( ticketBlackWolf, 1 );
		movementAdjustorBlackWolf.MaxRotationAdjustmentSpeed( ticketBlackWolf, 500000 );

		//movementAdjustorBlackWolf.RotateTo( ticketBlackWolf, VecHeading( (theCamera.GetCameraDirection() * 5)  + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * 5) ) );

		movementAdjustorBlackWolf.RotateTo( ticketBlackWolf, VecHeading( (theCamera.GetCameraDirection() * 5) + (theCamera.GetCameraRight() * 5) ) );



		movementAdjustorBlackWolfWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketBlackWolfWitcher = movementAdjustorBlackWolfWitcher.GetRequest( 'ACS_Transformation_Black_Wolf_Witcher_Rotate');
		movementAdjustorBlackWolfWitcher.CancelByName( 'ACS_Transformation_Black_Wolf_Witcher_Rotate' );
		movementAdjustorBlackWolfWitcher.CancelAll();

		ticketBlackWolfWitcher = movementAdjustorBlackWolfWitcher.CreateNewRequest( 'ACS_Transformation_Black_Wolf_Witcher_Rotate' );
		movementAdjustorBlackWolfWitcher.AdjustmentDuration( ticketBlackWolfWitcher, 1 );
		movementAdjustorBlackWolfWitcher.MaxRotationAdjustmentSpeed( ticketBlackWolfWitcher, 500000 );

		//movementAdjustorBlackWolfWitcher.RotateTo( ticketBlackWolfWitcher, VecHeading( (theCamera.GetCameraDirection() * 5)  + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * 5) ) );

		movementAdjustorBlackWolfWitcher.RotateTo( ticketBlackWolfWitcher, VecHeading( (theCamera.GetCameraDirection() * 5)  + (theCamera.GetCameraRight() * 5) ) );
	}

	function ACSTransformBlackWolfMovementAdjustForwardLeft()
	{
		movementAdjustorBlackWolf = GetACSTransformationBlackWolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketBlackWolf = movementAdjustorBlackWolf.GetRequest( 'ACS_Transformation_Black_Wolf_Rotate');
		movementAdjustorBlackWolf.CancelByName( 'ACS_Transformation_Black_Wolf_Rotate' );
		movementAdjustorBlackWolf.CancelAll();

		ticketBlackWolf = movementAdjustorBlackWolf.CreateNewRequest( 'ACS_Transformation_Black_Wolf_Rotate' );
		movementAdjustorBlackWolf.AdjustmentDuration( ticketBlackWolf, 1 );
		movementAdjustorBlackWolf.MaxRotationAdjustmentSpeed( ticketBlackWolf, 500000 );

		//movementAdjustorBlackWolf.RotateTo( ticketBlackWolf, VecHeading( (theCamera.GetCameraDirection() * 5)  + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * -5) ) );

		movementAdjustorBlackWolf.RotateTo( ticketBlackWolf, VecHeading( (theCamera.GetCameraDirection() * 5) + (theCamera.GetCameraRight() * -5) ) );



		movementAdjustorBlackWolfWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketBlackWolfWitcher = movementAdjustorBlackWolfWitcher.GetRequest( 'ACS_Transformation_Black_Wolf_Witcher_Rotate');
		movementAdjustorBlackWolfWitcher.CancelByName( 'ACS_Transformation_Black_Wolf_Witcher_Rotate' );
		movementAdjustorBlackWolfWitcher.CancelAll();

		ticketBlackWolfWitcher = movementAdjustorBlackWolfWitcher.CreateNewRequest( 'ACS_Transformation_Black_Wolf_Witcher_Rotate' );
		movementAdjustorBlackWolfWitcher.AdjustmentDuration( ticketBlackWolfWitcher, 1 );
		movementAdjustorBlackWolfWitcher.MaxRotationAdjustmentSpeed( ticketBlackWolfWitcher, 500000 );

		//movementAdjustorBlackWolfWitcher.RotateTo( ticketBlackWolfWitcher, VecHeading( (theCamera.GetCameraDirection() * 5) + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * -5) ) );

		movementAdjustorBlackWolfWitcher.RotateTo( ticketBlackWolfWitcher, VecHeading( (theCamera.GetCameraDirection() * 5) + (theCamera.GetCameraRight() * -5) ) );
	}

	function ACSTransformBlackWolfMovementAdjustBackwardRight()
	{
		movementAdjustorBlackWolf = GetACSTransformationBlackWolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketBlackWolf = movementAdjustorBlackWolf.GetRequest( 'ACS_Transformation_Black_Wolf_Rotate');
		movementAdjustorBlackWolf.CancelByName( 'ACS_Transformation_Black_Wolf_Rotate' );
		movementAdjustorBlackWolf.CancelAll();

		ticketBlackWolf = movementAdjustorBlackWolf.CreateNewRequest( 'ACS_Transformation_Black_Wolf_Rotate' );
		movementAdjustorBlackWolf.AdjustmentDuration( ticketBlackWolf, 1 );
		movementAdjustorBlackWolf.MaxRotationAdjustmentSpeed( ticketBlackWolf, 500000 );

		//movementAdjustorBlackWolf.RotateTo( ticketBlackWolf, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraForward() * -5) + (theCamera.GetCameraRight() * 5) ) );

		movementAdjustorBlackWolf.RotateTo( ticketBlackWolf, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraRight() * 5) ) );



		movementAdjustorBlackWolfWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketBlackWolfWitcher = movementAdjustorBlackWolfWitcher.GetRequest( 'ACS_Transformation_Black_Wolf_Witcher_Rotate');
		movementAdjustorBlackWolfWitcher.CancelByName( 'ACS_Transformation_Black_Wolf_Witcher_Rotate' );
		movementAdjustorBlackWolfWitcher.CancelAll();

		ticketBlackWolfWitcher = movementAdjustorBlackWolfWitcher.CreateNewRequest( 'ACS_Transformation_Black_Wolf_Witcher_Rotate' );
		movementAdjustorBlackWolfWitcher.AdjustmentDuration( ticketBlackWolfWitcher, 1 );
		movementAdjustorBlackWolfWitcher.MaxRotationAdjustmentSpeed( ticketBlackWolfWitcher, 500000 );

		//movementAdjustorBlackWolfWitcher.RotateTo( ticketBlackWolfWitcher, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraForward() * -5) + (theCamera.GetCameraRight() * 5) ) );

		movementAdjustorBlackWolfWitcher.RotateTo( ticketBlackWolfWitcher, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraRight() * 5) ) );
	}

	function ACSTransformBlackWolfMovementAdjustBackwardLeft()
	{
		movementAdjustorBlackWolf = GetACSTransformationBlackWolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketBlackWolf = movementAdjustorBlackWolf.GetRequest( 'ACS_Transformation_Black_Wolf_Rotate');
		movementAdjustorBlackWolf.CancelByName( 'ACS_Transformation_Black_Wolf_Rotate' );
		movementAdjustorBlackWolf.CancelAll();

		ticketBlackWolf = movementAdjustorBlackWolf.CreateNewRequest( 'ACS_Transformation_Black_Wolf_Rotate' );
		movementAdjustorBlackWolf.AdjustmentDuration( ticketBlackWolf, 1 );
		movementAdjustorBlackWolf.MaxRotationAdjustmentSpeed( ticketBlackWolf, 500000 );

		//movementAdjustorBlackWolf.RotateTo( ticketBlackWolf, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraForward() * -5) + (theCamera.GetCameraRight() * -5) ) );

		movementAdjustorBlackWolf.RotateTo( ticketBlackWolf, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraRight() * -5) ) );



		movementAdjustorBlackWolfWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketBlackWolfWitcher = movementAdjustorBlackWolfWitcher.GetRequest( 'ACS_Transformation_Black_Wolf_Witcher_Rotate');
		movementAdjustorBlackWolfWitcher.CancelByName( 'ACS_Transformation_Black_Wolf_Witcher_Rotate' );
		movementAdjustorBlackWolfWitcher.CancelAll();

		ticketBlackWolfWitcher = movementAdjustorBlackWolfWitcher.CreateNewRequest( 'ACS_Transformation_Black_Wolf_Witcher_Rotate' );
		movementAdjustorBlackWolfWitcher.AdjustmentDuration( ticketBlackWolfWitcher, 1 );
		movementAdjustorBlackWolfWitcher.MaxRotationAdjustmentSpeed( ticketBlackWolfWitcher, 500000 );

		//movementAdjustorBlackWolfWitcher.RotateTo( ticketBlackWolfWitcher, VecHeading( theCamera.GetCameraDirection()  + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * -5) ) );

		movementAdjustorBlackWolfWitcher.RotateTo( ticketBlackWolfWitcher, VecHeading( theCamera.GetCameraDirection() + (theCamera.GetCameraRight() * -5) ) );
	}

	function ACSTransformBlackWolfMovementAdjustRotateTowardsEnemy()
	{
		movementAdjustorBlackWolf = GetACSTransformationBlackWolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketBlackWolf = movementAdjustorBlackWolf.GetRequest( 'ACS_Transformation_Black_Wolf_Rotate');
		movementAdjustorBlackWolf.CancelByName( 'ACS_Transformation_Black_Wolf_Rotate' );
		movementAdjustorBlackWolf.CancelAll();

		ticketBlackWolf = movementAdjustorBlackWolf.CreateNewRequest( 'ACS_Transformation_Black_Wolf_Rotate' );
		movementAdjustorBlackWolf.AdjustmentDuration( ticketBlackWolf, 0.5 );
		movementAdjustorBlackWolf.MaxRotationAdjustmentSpeed( ticketBlackWolf, 500000 );

		if (thePlayer.GetTarget())
		{
			movementAdjustorBlackWolf.RotateTowards( ticketBlackWolf, thePlayer.GetTarget() );
		}
		else
		{
			movementAdjustorBlackWolf.RotateTo( ticketBlackWolf, VecHeading( theCamera.GetCameraDirection() ) );
		}
	}

	public timer function BlackWolfIdleSuccessDelay ( dt : float, id : int) 
	{ 
		GetACSTransformationBlackWolf().AddTag('ACS_Transformation_Black_Wolf_Idle_Success');
	}

	private var black_wolf_light_attack_index_1																										: int;
	default black_wolf_light_attack_index_1 																										= -1;

	private var previous_black_wolf_light_attack_index_1																							: int;
	default previous_black_wolf_light_attack_index_1 																								= -1;

	private var black_wolf_light_attack_index_2																										: int;
	default black_wolf_light_attack_index_2 																										= -1;

	private var previous_black_wolf_light_attack_index_2																							: int;
	default previous_black_wolf_light_attack_index_2 																								= -1;

	private var black_wolf_heavy_attack_index_1																										: int;
	default black_wolf_heavy_attack_index_1 																										= -1;

	private var previous_black_wolf_heavy_attack_index_1																							: int;
	default previous_black_wolf_heavy_attack_index_1 																								= -1;

	private var black_wolf_idle_action_index_1																										: int;
	default black_wolf_idle_action_index_1 																											= -1;

	private var previous_black_wolf_idle_action_index_1																								: int;
	default previous_black_wolf_idle_action_index_1 																								= -1;

	function ACS_IsDisplayTargetInFrontOfBlackWolf() : bool
	{
		var attackRange, attackAngle 	: float;

		attackRange = 50;

		attackAngle = 45;

		actors.Clear();

		actors = GetACSTransformationBlackWolf().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationBlackWolf().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == ((CActor)(thePlayer.GetDisplayTarget()))
				)
				{
					return true;
				}
			}
		}

		return false;
	}
	
	function ACS_IsDisplayTargetToTheRightOfBlackWolf() : bool
	{
		var attackRange, attackAngle 	: float;

		attackRange = 50;

		attackAngle = 180;

		actors.Clear();

		actors = GetACSTransformationBlackWolf().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationBlackWolf().GetWorldForward() * 10 + GetACSTransformationBlackWolf().GetWorldRight() * 10), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == ((CActor)(thePlayer.GetDisplayTarget()))
				)
				{
					return true;
				}
			}
		}

		return false;
	}

	function ACS_IsDisplayTargetToTheLeftOfBlackWolf() : bool
	{
		var attackRange, attackAngle 	: float;

		attackRange = 50;

		attackAngle = 180;

		actors.Clear();

		actors = GetACSTransformationBlackWolf().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationBlackWolf().GetWorldForward() * 10 + GetACSTransformationBlackWolf().GetWorldRight() * -10), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == ((CActor)(thePlayer.GetDisplayTarget()))
				)
				{
					return true;
				}
			}
		}

		return false;
	}

	function BlackWolfLightAttackDamageActual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		attackRange = 2.25;

		attackAngle = 90;

		actors.Clear();

		actors = GetACSTransformationBlackWolf().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationBlackWolf().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationBlackWolf()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Red_Miasmal_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Red_Miasmal_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Red_Miasmal_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					damageMax = maxTargetVitality * 0.125; 

					damageMin = maxTargetVitality * 0.06125; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						damageMax = maxTargetEssence * 0.06125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
					else
					{
						damageMax = maxTargetEssence * 0.125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
				}

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				thePlayer.SoundEvent("cmb_play_dismemberment_gore");

				thePlayer.SoundEvent("monster_dettlaff_monster_vein_hit_blood");

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');		

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddEffectInfo( EET_Bleeding, 3 );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	public timer function BlackWolfLightAttackDamage(deltaTime : float , id : int)
	{
		BlackWolfLightAttackDamageActual();
	}

	function BlackWolfLightAttackDamageOffsetRightActual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		attackRange = 2.25;

		attackAngle = 270;

		actors.Clear();

		actors = GetACSTransformationBlackWolf().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationBlackWolf().GetHeadingVector() + GetACSTransformationBlackWolf().GetWorldRight() * 10 ), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationBlackWolf()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Red_Miasmal_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Red_Miasmal_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Red_Miasmal_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					damageMax = maxTargetVitality * 0.125; 

					damageMin = maxTargetVitality * 0.06125; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						damageMax = maxTargetEssence * 0.06125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
					else
					{
						damageMax = maxTargetEssence * 0.125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
				}

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				thePlayer.SoundEvent("cmb_play_dismemberment_gore");

				thePlayer.SoundEvent("monster_dettlaff_monster_vein_hit_blood");

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');		

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddEffectInfo( EET_Bleeding, 3 );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	public timer function BlackWolfLightAttackDamageOffsetRight(deltaTime : float , id : int)
	{
		BlackWolfLightAttackDamageOffsetRightActual();
	}

	function BlackWolfLightAttackDamageOffsetLeftActual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		attackRange = 2.25;

		attackAngle = 270;

		actors.Clear();

		actors = GetACSTransformationBlackWolf().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationBlackWolf().GetHeadingVector() + GetACSTransformationBlackWolf().GetWorldRight() * -10 ), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationBlackWolf()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Red_Miasmal_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Red_Miasmal_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Red_Miasmal_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					damageMax = maxTargetVitality * 0.125; 

					damageMin = maxTargetVitality * 0.06125; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						damageMax = maxTargetEssence * 0.06125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
					else
					{
						damageMax = maxTargetEssence * 0.125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
				}

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				thePlayer.SoundEvent("cmb_play_dismemberment_gore");

				thePlayer.SoundEvent("monster_dettlaff_monster_vein_hit_blood");

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');		

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddEffectInfo( EET_Bleeding, 3 );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	public timer function BlackWolfLightAttackDamageOffsetLeft(deltaTime : float , id : int)
	{
		BlackWolfLightAttackDamageOffsetLeftActual();
	}

	function BlackWolfHeavyAttackDamageActual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		attackRange = 3.5;

		attackAngle = 90;

		actors.Clear();

		actors = GetACSTransformationBlackWolf().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationBlackWolf().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationBlackWolf()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Red_Miasmal_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Red_Miasmal_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Red_Miasmal_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					damageMax = maxTargetVitality * 0.25; 

					damageMin = maxTargetVitality * 0.125; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						damageMax = maxTargetEssence * 0.125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
					else
					{
						damageMax = maxTargetEssence * 0.25; 
					
						damageMin = maxTargetEssence * 0.125; 
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
				}

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				thePlayer.SoundEvent("cmb_play_dismemberment_gore");

				thePlayer.SoundEvent("monster_dettlaff_monster_vein_hit_blood");

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');		

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(100 + damageMax,100 + damageMin) );

				if (thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax( BCS_Focus) )
				{
					dmg.AddEffectInfo( EET_Burning, 3 );
				}
				else
				{
					dmg.AddEffectInfo( EET_Bleeding, 3 );
				}

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	function BlackWolfHeavyAttackDamageSecondaryActual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		attackRange = 3.5;

		attackAngle = 90;

		actors.Clear();

		actors = GetACSTransformationBlackWolf().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationBlackWolf().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationBlackWolf()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Red_Miasmal_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Red_Miasmal_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Red_Miasmal_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					damageMax = maxTargetVitality * 0.125; 

					damageMin = maxTargetVitality * 0.06125; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						damageMax = maxTargetEssence * 0.06125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
					else
					{
						damageMax = maxTargetEssence * 0.125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
				}

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				thePlayer.SoundEvent("cmb_play_dismemberment_gore");

				thePlayer.SoundEvent("monster_dettlaff_monster_vein_hit_blood");

				actortarget.PlayEffectSingle('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffectSingle('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffectSingle('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffectSingle('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffectSingle('blood_spill');
				actortarget.StopEffect('blood_spill');		

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddEffectInfo( EET_Knockdown, 0.5 );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	public timer function BlackWolfHeavyAttackDamage(deltaTime : float , id : int)
	{
		BlackWolfHeavyAttackDamageActual();

		if (thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax( BCS_Focus) )
		{
			GetACSTransformationBlackWolf().PlayEffectSingle('fire_breath');
			GetACSTransformationBlackWolf().StopEffect('fire_breath');
		}
	}

	public timer function BlackWolfHeavyAttackDamage_1(deltaTime : float , id : int)
	{
		BlackWolfHeavyAttackDamageSecondaryActual();

		GetACSTransformationBlackWolf().PlayEffectSingle('special_fx');
		GetACSTransformationBlackWolf().StopEffect('special_fx');

		GetACSTransformationBlackWolf().PlayEffectSingle('fx_jump');
		GetACSTransformationBlackWolf().StopEffect('fx_jump');
	}

	function BlackWolfHeavyAttackDamageFireActual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		attackRange = 6;

		attackAngle = 180;

		actors.Clear();

		actors = GetACSTransformationBlackWolf().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationBlackWolf().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationBlackWolf()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Red_Miasmal_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Red_Miasmal_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Red_Miasmal_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					damageMax = maxTargetVitality * 0.25; 

					damageMin = maxTargetVitality * 0.125; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						damageMax = maxTargetEssence * 0.125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
					else
					{
						damageMax = maxTargetEssence * 0.25; 
					
						damageMin = maxTargetEssence * 0.125; 
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
				}

				//thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddEffectInfo( EET_Burning, 5 );

				//dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	function BlackWolfHeavyAttackDamageFireIndependentActual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		attackRange = 4;

		attackAngle = 60;

		actors.Clear();

		actors = GetACSTransformationBlackWolf().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationBlackWolf().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationBlackWolf()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Red_Miasmal_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Red_Miasmal_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Red_Miasmal_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					damageMax = maxTargetVitality * 0.125; 

					damageMin = maxTargetVitality * 0.06125; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						damageMax = maxTargetEssence * 0.06125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
					else
					{
						damageMax = maxTargetEssence * 0.125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
				}

				//thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddEffectInfo( EET_Burning, 1 );

				//dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	public timer function BlackWolfHeavyAttackDamageFire(deltaTime : float , id : int)
	{
		BlackWolfHeavyAttackDamageFireActual();
	}

	function BlackWolfHeavyAttackDamageFire360Actual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		attackRange = 4;

		attackAngle = 360;

		actors.Clear();

		actors = GetACSTransformationBlackWolf().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransformationBlackWolf().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransformationBlackWolf()
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Red_Miasmal_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Red_Miasmal_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Red_Miasmal_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					damageMax = maxTargetVitality * 0.125; 

					damageMin = maxTargetVitality * 0.06125; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						damageMax = maxTargetEssence * 0.06125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
					else
					{
						damageMax = maxTargetEssence * 0.125; 
					
						damageMin = maxTargetEssence * 0.06125; 
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
				}

				//thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddEffectInfo( EET_Burning, 1 );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	public timer function BlackWolfHeavyAttackDamageFire360(deltaTime : float , id : int)
	{
		BlackWolfHeavyAttackDamageFire360Actual();

		GetACSTransformationBlackWolf().PlayEffectSingle('fire_breath');
		GetACSTransformationBlackWolf().StopEffect('fire_breath');
	}

	public timer function BlackWolfHeavyAttackDamageFireIndependent(deltaTime : float , id : int)
	{
		BlackWolfHeavyAttackDamageFireIndependentActual();

		GetACSTransformationBlackWolf().PlayEffectSingle('fire_breath');
		GetACSTransformationBlackWolf().StopEffect('fire_breath');
	}

	function ACS_Transformation_Black_Wolf_Light_Attacks()
	{
		var targetDistance																						: float;

		targetDistance = VecDistanceSquared2D( GetACSTransformationBlackWolf().GetWorldPosition(), (thePlayer.GetTarget()).GetWorldPosition() );

		if (ACS_can_perform_transformation_light_attack())
		{
			ACS_refresh_transformation_light_attack_cooldown();

			ACSTransformationBlackWolfRemoveMoveTimers();

			if (thePlayer.IsInCombat())
			{
				if (theInput.GetActionValue('Sprint') > 0.7f
				)
				{
					if (thePlayer.GetDisplayTarget())
					{
						if (targetDistance <= 2.5 * 2.5)
						{
							if(RandF() < 0.5)
							{
								ACSTransformBlackWolfPlayAnim( 'wolf_attack_run_left', 0.25f, 0.325f);
								AddTimer('BlackWolfLightAttackDamageOffsetRight', 0.3071045f, false);
							}
							else
							{
								ACSTransformBlackWolfPlayAnim( 'wolf_attack_run_right', 0.25f, 0.325f);
								AddTimer('BlackWolfLightAttackDamageOffsetLeft', 0.3071045f, false);
							}

							ACSTransformBlackWolfMovementAdjustRotateTowardsEnemy();
						}
						else
						{
							if (ACS_IsDisplayTargetInFrontOfBlackWolf())
							{
								ACSTransformBlackWolfPlayAnim( 'wolf_attack_run', 0.25f, 0.325f);
								AddTimer('BlackWolfLightAttackDamage', 0.1f, false);
							}
							else
							{
								if (ACS_IsDisplayTargetToTheRightOfBlackWolf())
								{
									ACSTransformBlackWolfPlayAnim( 'wolf_attack_run_left', 0.25f, 0.325f);
									AddTimer('BlackWolfLightAttackDamageOffsetRight', 0.3071045f, false);
								}
								else if (ACS_IsDisplayTargetToTheLeftOfBlackWolf())
								{
									ACSTransformBlackWolfPlayAnim( 'wolf_attack_run_right', 0.25f, 0.325f);
									AddTimer('BlackWolfLightAttackDamageOffsetLeft', 0.3071045f, false);
								}
								else
								{
									if(RandF() < 0.5)
									{
										ACSTransformBlackWolfPlayAnim( 'wolf_attack_run_left', 0.25f, 0.325f);
										AddTimer('BlackWolfLightAttackDamageOffsetRight', 0.3071045f, false);
									}
									else
									{
										ACSTransformBlackWolfPlayAnim( 'wolf_attack_run_right', 0.25f, 0.325f);
										AddTimer('BlackWolfLightAttackDamageOffsetLeft', 0.3071045f, false);
									}
								}
								
								ACSTransformBlackWolfMovementAdjustRotateTowardsEnemy();
							}
						}
					}
					else
					{
						ACSTransformBlackWolfPlayAnim( 'wolf_attack_run', 0.25f, 0.325f);
						AddTimer('BlackWolfLightAttackDamage', 0.1f, false);
					}
				}
				else
				{
					if (thePlayer.GetDisplayTarget())
					{
						if (targetDistance <= 1.5 * 1.5)
						{
							black_wolf_dodge_timer_actual();
							
							ACSTransformBlackWolfPlayAnim( 'wolf_dodge_back', 0.25f, 0.325f);

							if (thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax( BCS_Focus) )
							{
								AddTimer('BlackWolfHeavyAttackDamageFireIndependent', 0.125f, false);

								//GetACSTransformationBlackWolf().PlayEffectSingle('shadows_form');
							}

							ACSTransformBlackWolfMovementAdjustRotateTowardsEnemy();
						}
						else
						{
							if (ACS_IsDisplayTargetInFrontOfBlackWolf())
							{
								black_wolf_light_attack_index_1 = RandDifferent(this.previous_black_wolf_light_attack_index_1 , 2);

								switch (black_wolf_light_attack_index_1) 
								{	
									case 1:
									ACSTransformBlackWolfPlayAnim( 'wolf_attack_bite', 0.25f, 0.325f);
									AddTimer('BlackWolfLightAttackDamage', 0.1f, false);
									break;
									
									default:
									ACSTransformBlackWolfPlayAnim( 'wolf_attack_bite02', 0.25f, 0.325f);
									AddTimer('BlackWolfLightAttackDamage', 0.15f, false);
									break;
								}
						
								this.previous_black_wolf_light_attack_index_1 = black_wolf_light_attack_index_1;

								ACSTransformBlackWolfMovementAdjustRotateTowardsEnemy();
							}
							else
							{
								black_wolf_dodge_timer_actual();
							
								ACSTransformBlackWolfPlayAnim( 'wolf_dodge_back', 0.25f, 0.325f);

								if (thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax( BCS_Focus) )
								{
									AddTimer('BlackWolfHeavyAttackDamageFireIndependent', 0.125f, false);

									//GetACSTransformationBlackWolf().PlayEffectSingle('shadows_form');
								}
							}

							ACSTransformBlackWolfMovementAdjustRotateTowardsEnemy();
						}
					}
				}
			}
			else
			{
				if (theInput.GetActionValue('Sprint') > 0.7f
				)
				{
					ACSTransformBlackWolfPlayAnim( 'wolf_attack_run', 0.25f, 0.325f);
					AddTimer('BlackWolfLightAttackDamage', 0.1f, false);
				}
				else
				{
					black_wolf_light_attack_index_1 = RandDifferent(this.previous_black_wolf_light_attack_index_1 , 2);

					switch (black_wolf_light_attack_index_1) 
					{	
						case 1:
						ACSTransformBlackWolfPlayAnim( 'wolf_attack_bite', 0.25f, 0.325f);
						AddTimer('BlackWolfLightAttackDamage', 0.1f, false);
						break;
						
						default:
						ACSTransformBlackWolfPlayAnim( 'wolf_attack_bite02', 0.25f, 0.325f);
						AddTimer('BlackWolfLightAttackDamage', 0.15f, false);
						break;
					}
			
					this.previous_black_wolf_light_attack_index_1 = black_wolf_light_attack_index_1;
				}
			}
			
			ACS_StaminaDrainForced(5);
		}
	}

	function ACS_Transformation_Black_Wolf_Heavy_Attacks()
	{
		var targetDistance																						: float;

		targetDistance = VecDistanceSquared2D( GetACSTransformationBlackWolf().GetWorldPosition(), (thePlayer.GetTarget()).GetWorldPosition() );

		if (ACS_can_perform_transformation_heavy_attack())
		{
			ACS_refresh_transformation_heavy_attack_cooldown();

			ACSTransformationBlackWolfRemoveMoveTimers();

			if (thePlayer.IsInCombat())
			{
				ACSTransformBlackWolfMovementAdjustRotateTowardsEnemy();

				if (theInput.GetActionValue('Sprint') > 0.7f
				)
				{
					if (thePlayer.GetDisplayTarget())
					{
						if (targetDistance <= 2 * 2)
						{
							black_wolf_dodge_timer_actual();
							
							ACSTransformBlackWolfPlayAnim( 'wolf_dodge_back', 0.25f, 0.325f);

							if (thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax( BCS_Focus) )
							{
								AddTimer('BlackWolfHeavyAttackDamageFireIndependent', 0.125f, false);

								//GetACSTransformationBlackWolf().PlayEffectSingle('shadows_form');
							}
						}
						else
						{
							if (ACS_IsDisplayTargetInFrontOfBlackWolf())
							{
								black_wolf_heavy_attack_index_1 = RandDifferent(this.previous_black_wolf_heavy_attack_index_1 , 3);

								switch (black_wolf_heavy_attack_index_1) 
								{	
									case 2:
									ACSTransformBlackWolfPlayAnim( 'wolf_attack_closer_from_run02', 0.25f, 0.325f);
									AddTimer('BlackWolfHeavyAttackDamage', 0.25f, false);
									AddTimer('BlackWolfHeavyAttackDamage_1', 0.75f, false);
									break;

									case 1:
									ACSTransformBlackWolfPlayAnim( 'wolf_attack_closer_from_run_01', 0.25f, 0.325f);
									AddTimer('BlackWolfHeavyAttackDamage', 0.25f, false);
									AddTimer('BlackWolfHeavyAttackDamage_1', 0.75f, false);
									break;
									
									default:
									ACSTransformBlackWolfPlayAnim( 'wolf_attack_closer_from_run', 0.25f, 0.325f);
									AddTimer('BlackWolfHeavyAttackDamage', 0.25f, false);
									AddTimer('BlackWolfHeavyAttackDamage_1', 0.75f, false);
									break;
								}
						
								this.previous_black_wolf_heavy_attack_index_1 = black_wolf_heavy_attack_index_1;
							}
							else
							{
								black_wolf_dodge_timer_actual();
							
								ACSTransformBlackWolfPlayAnim( 'wolf_dodge_back', 0.25f, 0.325f);

								if (thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax( BCS_Focus) )
								{
									AddTimer('BlackWolfHeavyAttackDamageFireIndependent', 0.125f, false);

									//GetACSTransformationBlackWolf().PlayEffectSingle('shadows_form');
								}
							}
						}
					}
					else
					{
						black_wolf_heavy_attack_index_1 = RandDifferent(this.previous_black_wolf_heavy_attack_index_1 , 3);

						switch (black_wolf_heavy_attack_index_1) 
						{	
							case 2:
							ACSTransformBlackWolfPlayAnim( 'wolf_attack_closer_from_run02', 0.25f, 0.325f);
							AddTimer('BlackWolfHeavyAttackDamage', 0.25f, false);
							AddTimer('BlackWolfHeavyAttackDamage_1', 0.75f, false);
							break;

							case 1:
							ACSTransformBlackWolfPlayAnim( 'wolf_attack_closer_from_run_01', 0.25f, 0.325f);
							AddTimer('BlackWolfHeavyAttackDamage', 0.25f, false);
							AddTimer('BlackWolfHeavyAttackDamage_1', 0.75f, false);
							break;
							
							default:
							ACSTransformBlackWolfPlayAnim( 'wolf_attack_closer_from_run', 0.25f, 0.325f);
							AddTimer('BlackWolfHeavyAttackDamage', 0.25f, false);
							AddTimer('BlackWolfHeavyAttackDamage_1', 0.75f, false);
							break;
						}
				
						this.previous_black_wolf_heavy_attack_index_1 = black_wolf_heavy_attack_index_1;
					}
				}
				else
				{
					if (thePlayer.GetDisplayTarget())
					{
						if (targetDistance <= 2 * 2)
						{
							black_wolf_dodge_timer_actual();
							
							ACSTransformBlackWolfPlayAnim( 'wolf_dodge_back', 0.25f, 0.325f);

							if (thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax( BCS_Focus) )
							{
								AddTimer('BlackWolfHeavyAttackDamageFireIndependent', 0.125f, false);

								//GetACSTransformationBlackWolf().PlayEffectSingle('shadows_form');
							}
						}
						else
						{
							if (ACS_IsDisplayTargetInFrontOfBlackWolf())
							{
								ACSTransformBlackWolfPlayAnim( 'wolf_attack_closer', 0.25f, 0.325f);
								AddTimer('BlackWolfHeavyAttackDamage', 0.7f, false);
								AddTimer('BlackWolfHeavyAttackDamage_1', 1.0f, false);
							}
							else
							{
								black_wolf_dodge_timer_actual();
							
								ACSTransformBlackWolfPlayAnim( 'wolf_dodge_back', 0.25f, 0.325f);

								if (thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax( BCS_Focus) )
								{
									AddTimer('BlackWolfHeavyAttackDamageFireIndependent', 0.125f, false);

									//GetACSTransformationBlackWolf().PlayEffectSingle('shadows_form');
								}
							}
						}
					}
				}
			}
			else
			{
				if (theInput.GetActionValue('Sprint') > 0.7f
				)
				{
					black_wolf_heavy_attack_index_1 = RandDifferent(this.previous_black_wolf_heavy_attack_index_1 , 3);

					switch (black_wolf_heavy_attack_index_1) 
					{	
						case 2:
						ACSTransformBlackWolfPlayAnim( 'wolf_attack_closer_from_run02', 0.25f, 0.325f);
						AddTimer('BlackWolfHeavyAttackDamage', 0.25f, false);
						AddTimer('BlackWolfHeavyAttackDamage_1', 0.75f, false);
						break;

						case 1:
						ACSTransformBlackWolfPlayAnim( 'wolf_attack_closer_from_run_01', 0.25f, 0.325f);
						AddTimer('BlackWolfHeavyAttackDamage', 0.25f, false);
						AddTimer('BlackWolfHeavyAttackDamage_1', 0.75f, false);
						break;
						
						default:
						ACSTransformBlackWolfPlayAnim( 'wolf_attack_closer_from_run', 0.25f, 0.325f);
						AddTimer('BlackWolfHeavyAttackDamage', 0.25f, false);
						AddTimer('BlackWolfHeavyAttackDamage_1', 0.75f, false);
						break;
					}
			
					this.previous_black_wolf_heavy_attack_index_1 = black_wolf_heavy_attack_index_1;
				}
				else
				{
					ACSTransformBlackWolfPlayAnim( 'wolf_attack_closer', 0.25f, 0.325f);
					AddTimer('BlackWolfHeavyAttackDamage', 0.7f, false);
					AddTimer('BlackWolfHeavyAttackDamage_1', 1.0f, false);
				}
			}
			
			ACS_StaminaDrainForced(5);
		}
	}

	function ACS_Transformation_Black_Wolf_Special_Attack()
	{
		if (ACS_can_perform_transformation_special_attack())
		{
			ACS_refresh_transformation_special_attack_cooldown();

			ACSTransformationBlackWolfRemoveMoveTimers();

			movementAdjustorBlackWolf = GetACSTransformationBlackWolf().GetMovingAgentComponent().GetMovementAdjustor();

			ticketBlackWolf = movementAdjustorBlackWolf.GetRequest( 'ACS_Transformation_Black_Wolf_Rotate');
			movementAdjustorBlackWolf.CancelByName( 'ACS_Transformation_Black_Wolf_Rotate' );
			movementAdjustorBlackWolf.CancelAll();

			if (thePlayer.IsInCombat())
			{
				if (thePlayer.GetDisplayTarget())
				{
					if (ACS_IsDisplayTargetInFrontOfBlackWolf())
					{
						if
						(
							theInput.GetActionValue('GI_AxisLeftX') != 0
							|| theInput.GetActionValue( 'GI_AxisLeftY' ) != 0 
						)	
						{
							black_wolf_dodge_timer_actual();

							GetACSTransformationBlackWolf().PlayEffectSingle('shadows_form');

							ACSTransformBlackWolfPlayAnim( 'barghest_attack_jumping_through_faster', 0.25f, 0.325f);

							AddTimer('BlackWolfHeavyAttackDamageFire360', 0.5188322f, false);
						}
						else
						{
							ACSTransformBlackWolfPlayAnim( 'barghest_attack_spitting_fire', 0.25f, 0.325f);

							AddTimer('BlackWolfHeavyAttackDamageFire', 1.13479f, false);
						}
					}
					else
					{
						black_wolf_dodge_timer_actual();

						ACSTransformBlackWolfPlayAnim( 'wolf_dodge_back', 0.25f, 0.325f);

						if (thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax( BCS_Focus) )
						{
							//GetACSTransformationBlackWolf().PlayEffectSingle('shadows_form');

							//AddTimer('BlackWolfHeavyAttackDamageFireIndependent', 0.5f, false);
						}
						
						ACSTransformBlackWolfMovementAdjustRotateTowardsEnemy();
					}
				}
				else
				{
					if
					(
						theInput.GetActionValue('GI_AxisLeftX') != 0
						|| theInput.GetActionValue( 'GI_AxisLeftY' ) != 0 
					)	
					{
						black_wolf_dodge_timer_actual();

						GetACSTransformationBlackWolf().PlayEffectSingle('shadows_form');

						ACSTransformBlackWolfPlayAnim( 'barghest_attack_jumping_through_faster', 0.25f, 0.325f);

						AddTimer('BlackWolfHeavyAttackDamageFire360', 0.5188322f, false);
					}
					else
					{
						ACSTransformBlackWolfPlayAnim( 'barghest_attack_spitting_fire', 0.25f, 0.325f);

						AddTimer('BlackWolfHeavyAttackDamageFire', 1.13479f, false);
					}
				}
			}
			else
			{
				if
				(
					theInput.GetActionValue('GI_AxisLeftX') != 0
					|| theInput.GetActionValue( 'GI_AxisLeftY' ) != 0 
				)	
				{
					black_wolf_dodge_timer_actual();

					GetACSTransformationBlackWolf().PlayEffectSingle('shadows_form');

					ACSTransformBlackWolfPlayAnim( 'barghest_attack_jumping_through_faster', 0.25f, 0.325f);

					AddTimer('BlackWolfHeavyAttackDamageFire360', 0.5188322f, false);
				}
				else
				{
					ACSTransformBlackWolfPlayAnim( 'barghest_attack_spitting_fire', 0.25f, 0.325f);

					AddTimer('BlackWolfHeavyAttackDamageFire', 1.13479f, false);
				}
			}
			
			ACS_StaminaDrainForced(5);
		}
	}

	function ACS_Transformation_Black_Wolf_Dodge()
	{
		if (ACS_can_transformation_dodge())
		{
			ACS_refresh_transformation_dodge_cooldown();

			ACSTransformationBlackWolfRemoveMoveTimers();

			black_wolf_dodge_timer_actual();

			if (thePlayer.IsInCombat())
			{
				ACSTransformBlackWolfMovementAdjustRotateTowardsEnemy();
			}
			else
			{
				ACSTransformBlackWolfMovementAdjustForward();
			}

			if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
			{
				ACSTransformBlackWolfPlayAnim('wolf_attack_jump_forward', 0.25f, 0.325f);
			}
			else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5)
			{
				ACSTransformBlackWolfPlayAnim('wolf_dodge_back', 0.25f, 0.875f);
			}
			else if (theInput.GetActionValue('GI_AxisLeftX') > 0.5)
			{
				if (RandF() < 0.5)
				{
					ACSTransformBlackWolfPlayAnim('wolf_attack_jump_back_right', 0.25f, 0.325f);
				}
				else
				{
					ACSTransformBlackWolfPlayAnim('wolf_attack_jump_back_right_low', 0.25f, 0.325f);
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftX') < -0.5)
			{
				if (RandF() < 0.5)
				{
					ACSTransformBlackWolfPlayAnim('wolf_attack_jump_back_left', 0.25f, 0.325f);
				}
				else
				{
					ACSTransformBlackWolfPlayAnim('wolf_attack_jump_back_left_low', 0.25f, 0.325f);
				}
			}
			else
			{
				ACSTransformBlackWolfPlayAnim('wolf_dodge_back', 0.25f, 0.325f);
			}

			if (thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax( BCS_Focus) )
			{
				//AddTimer('BlackWolfHeavyAttackDamageFireIndependent', 0.5f, false);

				//GetACSTransformationBlackWolf().PlayEffectSingle('shadows_form');
			}

			ACS_StaminaDrainForced(5);
		}
	}

	function black_wolf_dodge_timer_actual() 
	{
		RemoveTimer('ACS_black_wolf_dodge_timer_end');

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 

		thePlayer.SetIsCurrentlyDodging(true);

		GetACSTransformationBlackWolf().EnableCharacterCollisions(false);

		AddTimer('ACS_black_wolf_dodge_timer_end', 0.875  , false);
	}
	
	function black_wolf_dodge_timer_end_actual() 
	{ 
		thePlayer.SetImmortalityMode( AIM_None, AIC_Combat ); 

		thePlayer.SetIsCurrentlyDodging(false);

		GetACSTransformationBlackWolf().EnableCharacterCollisions(true);

		GetACSTransformationBlackWolf().StopEffect('shadows_form');
	}

	public timer function ACS_black_wolf_dodge_timer_end ( dt : float, id : int) 
	{ 
		black_wolf_dodge_timer_end_actual();
	} 

	function ACS_Transformation_Black_Wolf_Move_Controls()
	{
		var event_names	: array<name>;

		if (thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax( BCS_Focus) )
		{
			if (!GetACSTransformationBlackWolf().IsEffectActive('critical_burning_red'))
			{
				GetACSTransformationBlackWolf().PlayEffectSingle('critical_burning_red');
			}

			if (!GetACSTransformationBlackWolf().IsEffectActive('critical_burning_red_alt'))
			{
				GetACSTransformationBlackWolf().PlayEffectSingle('critical_burning_red_alt');
			}
		}
		else
		{
			if (GetACSTransformationBlackWolf().IsEffectActive('critical_burning_red'))
			{
				GetACSTransformationBlackWolf().StopEffect('critical_burning_red');
			}

			if (GetACSTransformationBlackWolf().IsEffectActive('critical_burning_red_alt'))
			{
				GetACSTransformationBlackWolf().StopEffect('critical_burning_red_alt');
			}
		}

		if (thePlayer.IsInCombat())
		{
			if (thePlayer.GetStat(BCS_Toxicity) < thePlayer.GetStatMax(BCS_Toxicity))
			{
				thePlayer.GainStat(BCS_Toxicity, (thePlayer.GetStatMax(BCS_Toxicity) - thePlayer.GetStat(BCS_Toxicity)) * 0.00006125);
			}
			
			thePlayer.DrainVitality(thePlayer.GetStat(BCS_Vitality) * 0.000030625);
		}
		else
		{
			if (thePlayer.GetStat(BCS_Toxicity) < thePlayer.GetStatMax(BCS_Toxicity))
			{
				thePlayer.GainStat(BCS_Toxicity, (thePlayer.GetStatMax(BCS_Toxicity) - thePlayer.GetStat(BCS_Toxicity)) * 0.000030625);
			}
			
			thePlayer.DrainVitality(thePlayer.GetStat(BCS_Vitality) * 0.0000153125);
		}

		GetACSTransformationBlackWolf().GetMovingAgentComponent().EnableCombatMode( true );

		GetACSTransformationBlackWolf().GetMovingAgentComponent().SetVirtualRadius( 'CombatCharacterRadius' );

		((CNewNPC)GetACSTransformationBlackWolf()).SetBehaviorVariable( 'additiveTauntOn', 1, true );

		if (thePlayer.IsInCombat())
		{
			if (thePlayer.GetTarget())
			{
				((CNewNPC)GetACSTransformationBlackWolf()).SetBehaviorVectorVariable( 'lookAtTarget', ((CActor)(thePlayer.GetTarget())).GetWorldPosition() );
			}
			else
			{
				((CNewNPC)GetACSTransformationBlackWolf()).SetBehaviorVectorVariable( 'lookAtTarget', GetACSLookatEntity().GetWorldPosition() );
			}

			((CNewNPC)GetACSTransformationBlackWolf()).SetBehaviorVariable( 'lookatOn', 1, true );
		}
		else
		{
			((CNewNPC)GetACSTransformationBlackWolf()).SetBehaviorVectorVariable( 'lookAtTarget', GetACSLookatEntity().GetWorldPosition() );

			((CNewNPC)GetACSTransformationBlackWolf()).SetBehaviorVariable( 'lookatOn', 1, true );
		}

		if (GetACSTransformationBlackWolf().GetMovingAgentComponent().GetRelativeMoveSpeed() <= 0.1 )
		{
			if
			(
				theInput.GetLastActivationTime( 'GI_AxisLeftX' ) > 1.25f 
				|| theInput.GetLastActivationTime( 'GI_AxisLeftY' ) > 1.25f 
			)	
			{
				GetACSTransformationBlackWolf().RemoveTag('ACS_Transformation_Black_Wolf_Stationary_Transition');
			}
			else
			{
				RemoveTimer('Transformation_Black_Wolf_Remove_Stationary_Tag');

				if (!GetACSTransformationBlackWolf().HasTag('ACS_Transformation_Black_Wolf_Stopped_Moving'))
				{
					GetACSTransformationBlackWolf().AddTag('ACS_Transformation_Black_Wolf_Stationary_Transition');

					GetACSTransformationBlackWolf().AddTag('ACS_Transformation_Black_Wolf_Stopped_Moving');
				}
			}
		}

		if (thePlayer.IsDodgeTimerRunning()
		|| thePlayer.IsCurrentlyDodging() 
		)
		{
			GetACSTransformationBlackWolf().GetMovingAgentComponent().ForceSetRelativeMoveSpeed( 0 );
			GetACSTransformationBlackWolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed( 0 );
			return;
		}

		if (theInput.GetActionValue('GI_AxisLeftX') == 0 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
		{
			GetACSTransformationBlackWolf().GetMovingAgentComponent().ForceSetRelativeMoveSpeed( 0 );
			GetACSTransformationBlackWolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed( 0 );

			if(!GetWitcherPlayer().IsInCombat())
			{
				if(theGame.IsFocusModeActive())
				{
					if (!GetACSTransformationBlackWolf().HasTag('ACS_Black_Wolf_Is_Idle_OOC'))
					{
						event_names.Clear();

						black_wolf_idle_action_index_1 = RandDifferent(this.previous_black_wolf_idle_action_index_1 , 5);

						switch (black_wolf_idle_action_index_1) 
						{
							case 4:
							event_names.PushBack('Sit');
							break;

							case 3:
							event_names.PushBack('Sleep');
							break;

							case 2:
							event_names.PushBack('Roll');
							break;

							case 1:
							event_names.PushBack('Howl');
							break;
							
							default:
							event_names.PushBack('OnGroundAndClean');
							break;
						}
				
						this.previous_black_wolf_idle_action_index_1 = black_wolf_idle_action_index_1;

						((CAnimatedComponent)((CNewNPC)GetACSTransformationBlackWolf()).GetComponentByClassName( 'CAnimatedComponent' )).RaiseBehaviorForceEvent(event_names[RandRange(event_names.Size())]);
						
						GetACSTransformationBlackWolf().RemoveTag('ACS_Black_Wolf_Is_Idle_IC');

						GetACSTransformationBlackWolf().AddTag('ACS_Black_Wolf_Is_Idle_OOC');
					}
				}
			}
			/*
			else
			{
				if (!GetACSTransformationBlackWolf().HasTag('ACS_Black_Wolf_Is_Idle_IC'))
				{
					((CAnimatedComponent)((CNewNPC)GetACSTransformationBlackWolf()).GetComponentByClassName( 'CAnimatedComponent' )).RaiseBehaviorForceEvent('3StateTaunt');

					GetACSTransformationBlackWolf().RemoveTag('ACS_Black_Wolf_Is_Idle_OOC');

					GetACSTransformationBlackWolf().AddTag('ACS_Black_Wolf_Is_Idle_IC');
				}
			}
			*/
		}
		else
		{
			if (theInput.GetActionValue('GI_AxisLeftX') != 0 || theInput.GetActionValue('GI_AxisLeftY') != 0 )
			{
				if (GetACSTransformationBlackWolf().HasTag('ACS_Black_Wolf_Is_Idle_OOC'))
				{
					//RemoveTimer('BlackWolfIdleSuccessDelay');

					if (!GetACSTransformationBlackWolf().HasTag('ACS_Transformation_Black_Wolf_Spawned'))
					{
						((CAnimatedComponent)((CNewNPC)GetACSTransformationBlackWolf()).GetComponentByClassName( 'CAnimatedComponent' )).RaiseBehaviorForceEvent('ShadowJump');
					}

					GetACSTransformationBlackWolf().RemoveTag('ACS_Transformation_Black_Wolf_Spawned');
					
					GetACSTransformationBlackWolf().RemoveTag('ACS_Black_Wolf_Is_Idle_OOC');
				}

				if (GetACSTransformationBlackWolf().HasTag('ACS_Black_Wolf_Is_Idle_IC'))
				{
					//RemoveTimer('BlackWolfIdleSuccessDelay');

					if (!GetACSTransformationBlackWolf().HasTag('ACS_Transformation_Black_Wolf_Spawned'))
					{
						((CAnimatedComponent)((CNewNPC)GetACSTransformationBlackWolf()).GetComponentByClassName( 'CAnimatedComponent' )).RaiseBehaviorForceEvent('ShadowJump');
					}

					GetACSTransformationBlackWolf().RemoveTag('ACS_Transformation_Black_Wolf_Spawned');
					
					GetACSTransformationBlackWolf().RemoveTag('ACS_Black_Wolf_Is_Idle_IC');
				}
			}

			if (theInput.GetActionValue('GI_AxisLeftY') > 0.1 && theInput.GetActionValue('GI_AxisLeftX') == 0 )
			{
				TransformationBlackWolfRestoreRotation();

				GetACSTransformationBlackWolf().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationBlackWolf().GetHeadingVector()));

				if (!GetACSTransformationBlackWolf().HasTag('ACS_Transformation_Black_Wolf_Stationary_Transition')
				)
				{
					ACSTransformBlackWolfMovementAdjustForward();
				}

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationBlackWolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationBlackWolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftY') < -0.1 && theInput.GetActionValue('GI_AxisLeftX') == 0 )
			{
				TransformationBlackWolfRestoreRotation();

				if (!GetACSTransformationBlackWolf().HasTag('ACS_Transformation_Black_Wolf_Stationary_Transition')
				)
				{
					GetACSTransformationBlackWolf().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationBlackWolf().GetHeadingVector()));
						
					ACSTransformBlackWolfMovementAdjustBackward();
				}

				BlackWolfChangeStance();

				GetACSTransformationBlackWolf().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationBlackWolf().GetHeadingVector()));

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationBlackWolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationBlackWolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftX') > 0.1 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
			{
				TransformationBlackWolfRestoreRotation();

				BlackWolfChangeStance();

				if (!GetACSTransformationBlackWolf().HasTag('ACS_Transformation_Black_Wolf_Stationary_Transition')
				)
				{
					ACSTransformBlackWolfMovementAdjustRight();
				}

				GetACSTransformationBlackWolf().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationBlackWolf().GetHeadingVector()));

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationBlackWolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationBlackWolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftX') < -0.1 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
			{
				TransformationBlackWolfRestoreRotation();

				BlackWolfChangeStance();

				if (!GetACSTransformationBlackWolf().HasTag('ACS_Transformation_Black_Wolf_Stationary_Transition')
				)
				{
					ACSTransformBlackWolfMovementAdjustLeft();
				}

				GetACSTransformationBlackWolf().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationBlackWolf().GetHeadingVector()));

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationBlackWolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationBlackWolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftY') > 0.1 && theInput.GetActionValue('GI_AxisLeftX') > 0.1 )
			{
				TransformationBlackWolfRestoreRotation();

				BlackWolfChangeStance();

				if (!GetACSTransformationBlackWolf().HasTag('ACS_Transformation_Black_Wolf_Stationary_Transition')
				)
				{
					ACSTransformBlackWolfMovementAdjustForwardRight();
				}

				GetACSTransformationBlackWolf().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationBlackWolf().GetHeadingVector()));

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationBlackWolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationBlackWolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftY') > 0.1 && theInput.GetActionValue('GI_AxisLeftX') < -0.1 )
			{
				TransformationBlackWolfRestoreRotation();

				BlackWolfChangeStance();

				if (!GetACSTransformationBlackWolf().HasTag('ACS_Transformation_Black_Wolf_Stationary_Transition')
				)
				{
					ACSTransformBlackWolfMovementAdjustForwardLeft();
				}

				GetACSTransformationBlackWolf().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationBlackWolf().GetHeadingVector()));

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationBlackWolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationBlackWolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftY') < -0.1 && theInput.GetActionValue('GI_AxisLeftX') > 0.1 )
			{
				TransformationBlackWolfRestoreRotation();

				BlackWolfChangeStance();

				if (!GetACSTransformationBlackWolf().HasTag('ACS_Transformation_Black_Wolf_Stationary_Transition')
				)
				{
					ACSTransformBlackWolfMovementAdjustBackwardRight();
				}

				GetACSTransformationBlackWolf().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationBlackWolf().GetHeadingVector()));

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationBlackWolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationBlackWolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftX') < -0.1 && theInput.GetActionValue('GI_AxisLeftY') < -0.1 )
			{
				TransformationBlackWolfRestoreRotation();

				BlackWolfChangeStance();

				if (!GetACSTransformationBlackWolf().HasTag('ACS_Transformation_Black_Wolf_Stationary_Transition')
				)
				{
					ACSTransformBlackWolfMovementAdjustBackwardLeft();
				}

				GetACSTransformationBlackWolf().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(GetACSTransformationBlackWolf().GetHeadingVector()));

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransformationBlackWolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransformationBlackWolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
		}
	}

	function ACSTransformationBlackWolfRemoveMoveTimers()
	{
		GetACSTransformationBlackWolf().EnableCharacterCollisions(true);

		GetACSTransformationBlackWolf().ClearAnimationSpeedMultipliers();

		RemoveTimer('BlackWolfLightAttackDamage');

		RemoveTimer('BlackWolfLightAttackDamageOffsetLeft');

		RemoveTimer('BlackWolfLightAttackDamageOffsetRight');

		RemoveTimer('BlackWolfHeavyAttackDamage');

		RemoveTimer('BlackWolfHeavyAttackDamage_1');
		
		RemoveTimer('BlackWolfHeavyAttackDamageFire');

		RemoveTimer('BlackWolfHeavyAttackDamageFire360');

		RemoveTimer('BlackWolfHeavyAttackDamageFireIndependent');

		RemoveTimer('ACS_black_wolf_dodge_timer_end');

		thePlayer.SetImmortalityMode( AIM_None, AIC_Combat ); 

		thePlayer.SetIsCurrentlyDodging(false);

		GetACSTransformationBlackWolf().StopEffect('shadows_form');

		/*
		if (GetACSTransformationBlackWolf().HasTag('ACS_Black_Wolf_Is_Idle_OOC'))
		{
			((CAnimatedComponent)((CNewNPC)GetACSTransformationBlackWolf()).GetComponentByClassName( 'CAnimatedComponent' )).RaiseBehaviorForceEvent('ShadowJump');

			GetACSTransformationBlackWolf().RemoveTag('ACS_Black_Wolf_Is_Idle_OOC');
		}

		if (thePlayer.IsInCombat())
		{
			if (!GetACSTransformationBlackWolf().HasTag('ACS_Black_Wolf_Is_Idle_IC'))
			{
				((CAnimatedComponent)((CNewNPC)GetACSTransformationBlackWolf()).GetComponentByClassName( 'CAnimatedComponent' )).RaiseBehaviorForceEvent('3StateTaunt');

				GetACSTransformationBlackWolf().AddTag('ACS_Black_Wolf_Is_Idle_IC');
			}
		}
		*/
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	private var kestralCamera 						: ACSKestralCamera;

	public function SetKestralCamera( a : ACSKestralCamera )
	{
		this.kestralCamera = a;
	}

	public function GetKestralCamera() : ACSKestralCamera
	{
		var entity 			 : ACSKestralCamera;
	
		entity = (ACSKestralCamera)theGame.GetEntityByTag( 'ACS_Kestral_Custom_Camera' );

		return entity;

		//return this.transformationCamera;
	}

	public function CreateKestralCamera()
	{
		var cameraTemplate															: CEntityTemplate;
		var cameraEnt																: CEntity;

		CamerasDestroy();

		cameraTemplate = (CEntityTemplate)LoadResource("dlc\dlc_acs\data\entities\other\kestral_camera.w2ent", true);

		cameraEnt = (CStaticCamera)theGame.CreateEntity(cameraTemplate, theCamera.GetCameraPosition(), theCamera.GetCameraRotation());	

		cameraEnt.AddTag('ACS_Kestral_Custom_Camera');
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	private var transformationCamera 						: ACSTransformationCamera;

	public function SetTransformationCamera( a : ACSTransformationCamera )
	{
		this.transformationCamera = a;
	}

	public function GetTransformationCamera() : ACSTransformationCamera
	{
		var entity 			 : ACSTransformationCamera;
	
		entity = (ACSTransformationCamera)theGame.GetEntityByTag( 'ACS_Transformation_Custom_Camera' );

		return entity;

		//return this.transformationCamera;
	}

	function TransformationCustomCamera()
	{
		var template	: CEntityTemplate;
		var ent			: CEntity;

		CamerasDestroy();

		template = (CEntityTemplate)LoadResource("dlc\dlc_acs\data\entities\other\transformation_camera.w2ent", true);

		ent = (CStaticCamera)theGame.CreateEntity(template, theCamera.GetCameraPosition(), theCamera.GetCameraRotation());	

		ent.AddTag('ACS_Transformation_Custom_Camera');
	}

	function ACS_Quen()
	{
		var newQuen						: W3QuenEntity;
		var signOwner					: W3SignOwnerPlayer;

		signOwner = new W3SignOwnerPlayer in this;
		signOwner.Init( GetWitcherPlayer() );
		
		newQuen = (W3QuenEntity)theGame.CreateEntity( GetWitcherPlayer().GetSignTemplate( ST_Quen ), GetWitcherPlayer().GetWorldPosition(), GetWitcherPlayer().GetWorldRotation() );
		newQuen.Init( signOwner, GetWitcherPlayer().GetSignEntity( ST_Quen ), true );
		newQuen.OnStarted();
		newQuen.OnThrowing();
		newQuen.OnEnded();
	}

	function ACS_Igni()
	{
		var newIgni						: W3SignEntity;
		var signOwner					: W3SignOwnerPlayer;

		signOwner = new W3SignOwnerPlayer in this;
		signOwner.Init( GetWitcherPlayer() );
		
		newIgni = (W3SignEntity)theGame.CreateEntity( GetWitcherPlayer().GetSignTemplate( ST_Igni ), GetWitcherPlayer().GetWorldPosition(), VecToRotation(GetWitcherPlayer().GetHeadingVector()) );

		newIgni.Init( signOwner, GetWitcherPlayer().GetSignEntity( ST_Igni ), true );
		newIgni.OnStarted();
		newIgni.OnThrowing();
		newIgni.OnEnded();
		
	}

	function ACS_Aard()
	{
		var newAard						: W3SignEntity;
		var signOwner					: W3SignOwnerPlayer;

		signOwner = new W3SignOwnerPlayer in this;
		signOwner.Init( GetWitcherPlayer() );
		
		newAard = (W3SignEntity)theGame.CreateEntity( GetWitcherPlayer().GetSignTemplate( ST_Aard ), GetWitcherPlayer().GetWorldPosition(), VecToRotation(GetWitcherPlayer().GetHeadingVector()) );
		newAard.SetAlternateCast( S_Magic_s01 );
		newAard.Init( signOwner, GetWitcherPlayer().GetSignEntity( ST_Aard ), true );
		newAard.OnStarted();
		newAard.OnThrowing();
		newAard.OnEnded();
	}

	public timer function RemoveACSSlowmo ( dt : float, id : int)
	{ 
		theGame.RemoveTimeScale( theGame.GetTimescaleSource(ETS_ThrowingAim) );
	} 

	function ACS_SlowMo()
	{
		if (thePlayer.HasBuff(EET_Blizzard))
		{
			return;
		}
		
		theGame.RemoveTimeScale( theGame.GetTimescaleSource(ETS_ThrowingAim) );
		theGame.SetTimeScale( 0.6, theGame.GetTimescaleSource( ETS_ThrowingAim ), theGame.GetTimescalePriority( ETS_ThrowingAim ), false, true );

		RemoveTimer('RemoveACSSlowmo');
		AddTimer('RemoveACSSlowmo', 0.6, false);
	}

	public timer function ACS_Armor_Weapon_Whoosh_Timer ( dt : float, id : int)
	{ 
		thePlayer.SoundEvent( "monster_caretaker_mv_cloth_hard" );

		thePlayer.SoundEvent( "monster_caretaker_cmb_whoosh_heavy2" );
	}

	function ACS_Armor_Weapon_Whoosh()
	{
		RemoveTimer('ACS_Armor_Weapon_Whoosh_Timer');
		AddTimer('ACS_Armor_Weapon_Whoosh_Timer', 0.25, false);
	}


	public timer function Thunder_Sounds(deltaTime : float , id : int)
	{
		thePlayer.SoundEvent( "fx_amb_thunder_close" );
	}

	public timer function SummonedConstruct1TeleportDelay ( dt : float, id : int)
	{
		var playerPos1																								: Vector;

		playerPos1 = theCamera.GetCameraPosition() + theCamera.GetCameraRight() * 2 + VecFromHeading(theCamera.GetCameraHeading()) * 2;

		GetACSSummonedConstruct_1().TeleportWithRotation(ACSPlayerFixZAxis(playerPos1), GetWitcherPlayer().GetWorldRotation());

		//GetACSSummonedConstruct_1().DestroyEffect('shadowdash');
		//GetACSSummonedConstruct_1().PlayEffectSingle('shadowdash');
		//GetACSSummonedConstruct_1().StopEffect('shadowdash');

		GetACSSummonedConstruct_1().RemoveTag('ACS_Summoned_Construct_Teleport_Start');
	}

	public timer function SummonedConstruct2TeleportDelay ( dt : float, id : int)
	{
		var playerPos2																								: Vector;

		playerPos2 = theCamera.GetCameraPosition() + theCamera.GetCameraRight() * -2 + VecFromHeading(theCamera.GetCameraHeading()) * 2;

		GetACSSummonedConstruct_2().TeleportWithRotation(ACSPlayerFixZAxis(playerPos2), GetWitcherPlayer().GetWorldRotation());

		//GetACSSummonedConstruct_2().DestroyEffect('shadowdash');
		//GetACSSummonedConstruct_2().PlayEffectSingle('shadowdash');
		//GetACSSummonedConstruct_2().StopEffect('shadowdash');

		GetACSSummonedConstruct_2().RemoveTag('ACS_Summoned_Construct_Teleport_Start');
	}

	public timer function SummonedConstructDelay ( dt : float, id : int)
	{
		thePlayer.DestroyEffect('dive_shape');
		thePlayer.PlayEffectSingle('dive_shape');
		thePlayer.StopEffect('dive_shape');

		acsspawnconstruct1();
		acsspawnconstruct2();
	}

	function GetACSWatcherPosition() : Vector
	{
		return this.GetWorldPosition();
	}

	public timer function AdditionalSpawnsDelay ( dt : float, id : int)
	{
		if (!thePlayer.IsCiri()
		&& !thePlayer.GetIsHorseRacing())
		{
			if (ACS_AllowSimultaneousEventSpawning_Enabled())
			{
				ACS_Wild_Hunt_Spawn_Controller();

				ACS_Forest_God_Spawn_Controller();

				ACS_NightStalker_Spawn_Controller();

				ACS_Elderblood_Assassin_Spawn_Controller();
			}
			else
			{
				ACS_Wild_Hunt_Spawn_Controller();

				RemoveAdditionalSpawnTimers();

				AddTimer('AdditionalSpawnsDelay_add1', 1, false);

				AddTimer('AdditionalSpawnsDelay_add2', 2, false);

				AddTimer('AdditionalSpawnsDelay_add3', 3, false);
			}
		}
	}

	public timer function AdditionalSpawnsDelay_add1 ( dt : float, id : int)
	{
		if (!thePlayer.IsCiri()
		&& !thePlayer.GetIsHorseRacing())
		{
			if (!GetACSNaglfar() && !ACSForestGodShadow() && !GetACSNightStalker())
			{
				ACS_Forest_God_Spawn_Controller();
			}
		}
	}

	public timer function AdditionalSpawnsDelay_add2 ( dt : float, id : int)
	{
		if (!thePlayer.IsCiri()
		&& !thePlayer.GetIsHorseRacing())
		{
			if (!GetACSNaglfar() && !ACSForestGodShadow() && !GetACSNightStalker())
			{
				ACS_NightStalker_Spawn_Controller();
			}
		}
	}

	public timer function AdditionalSpawnsDelay_add3 ( dt : float, id : int)
	{
		if (!thePlayer.IsCiri()
		&& !thePlayer.GetIsHorseRacing())
		{
			if (!GetACSNaglfar() && !ACSForestGodShadow() && !GetACSNightStalker())
			{
				ACS_Elderblood_Assassin_Spawn_Controller();
			}
		}
	}

	function RemoveAdditionalSpawnTimers()
	{
		RemoveTimer('AdditionalSpawnsDelay_add1');
		RemoveTimer('AdditionalSpawnsDelay_add2');
		RemoveTimer('AdditionalSpawnsDelay_add3');
	}

	public function Wisp_Hit_Counter() : int
	{
		return wispHitCounter;
	}

	function Wisp_Hit_Counter_Increment()
	{
		wispHitCounter += 1;
	}

	function Reset_Wisp_Hit_Counter()
	{
		wispHitCounter -= wispHitCounter;
	}


	private var wolfDoubleTap : bool;
	private var wolfCallTimestamp : float;
	event OnFollowerInteract( action : SInputAction )
	{
		if( IsPressed(action) )
		{
			if( wolfCallTimestamp + DOUBLE_TAP_WINDOW >= theGame.GetEngineTimeAsSeconds() )
				wolfDoubleTap = true;
			else
				wolfDoubleTap = false;
				
			if( wolfDoubleTap )
				DestroyFollower();
			else
				ManageFollower();
				
			wolfCallTimestamp = theGame.GetEngineTimeAsSeconds();
		}
	}



	private saved var hasFollowerWolf : bool;
	private saved var isWolfFollowing : bool;
	private var followerWolf : CACSWolfCompanion;



	public function GetFollower() : CACSWolfCompanion
	{
		return followerWolf;
	}
	
	public function RemoveFollower()
	{
		hasFollowerWolf = false;
		isWolfFollowing = false;
	}
	
	public function SetIsWolfFollowing( b : bool )
	{
		isWolfFollowing = b;
	}
	
	public function DestroyFollower()
	{
		var animatedComponentA								: CAnimatedComponent;

		animatedComponentA = (CAnimatedComponent)(followerWolf).GetComponentByClassName( 'CAnimatedComponent' );	

		if( followerWolf )
		{
			GetACSWolfCompanion().EnableCharacterCollisions(false);

			followerWolf.PlayEffectSingle('fire_breath');

			animatedComponentA.PlaySlotAnimationAsync ( 'barghest_attack_jumping_through_faster', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));

			followerWolf.DestroyAfter(1);

			delete followerWolf;

			hasFollowerWolf = false;
			isWolfFollowing = false;
		}
	}
	
	public function ManageFollower()
	{
		var Z : float;
		var spawnPos : Vector;
		var spawnRot : EulerAngles;
		var wolfTemplate : CEntityTemplate;
		
		if( !followerWolf || !followerWolf.IsAlive() || (!GetWitcherPlayer().WasVisibleInScaledFrame(followerWolf, 1.5f, 1.5f) && VecDistanceSquared(thePlayer.GetWorldPosition(), followerWolf.GetWorldPosition()) > 900) || VecDistanceSquared(thePlayer.GetWorldPosition(), followerWolf.GetWorldPosition()) > 1600 )
		{
			if( followerWolf )
			{
				followerWolf.Destroy();
				delete followerWolf;
				hasFollowerWolf = false;
				isWolfFollowing = false;
			}
			
			spawnRot = thePlayer.GetWorldRotation();
			spawnPos = thePlayer.GetWorldPosition(); Z = spawnPos.Z;
			spawnPos += theCamera.GetCameraDirection() * -6;
			
			if( theGame.GetWorld().NavigationLineTest(thePlayer.GetWorldPosition(), spawnPos, 0.2f) )
				theGame.GetWorld().PhysicsCorrectZ(spawnPos, Z);
				
			spawnPos.Z = Z;

			followerWolf = (CACSWolfCompanion)theGame.CreateEntity((CEntityTemplate)LoadResource("dlc\dlc_acs\data\entities\companions\acs_wolf_companion.w2ent", true), spawnPos, spawnRot);
			
			if( followerWolf )
			{
				hasFollowerWolf = true;
				isWolfFollowing = true;
			}
		}
		else 
		{
			followerWolf.OnCompanionInteraction();
		}
	}


	public function SetupSimpleSyncAnim2( syncAction : name, master, slave : CEntity ) : bool
	{
		var masterDef, slaveDef						: SAnimationSequenceDefinition;
		var masterSequencePart, slaveSequencePart	: SAnimationSequencePartDefinition;
		var syncInstance							: CAnimationManualSlotSyncInstance;
		
		var instanceIndex	: int;
		var sequenceIndex	: int;
		
		var actorMaster, actorSlave : CActor;
		
		var temp : name; 
		var tempF : float;
		var rot : EulerAngles;
		
		var finisherAnim : bool;
		var pos : Vector;
		
		var syncAnimName	: name;
		
		var node, node1 : CNode; 
		var rot0, rot1 : EulerAngles;

		var masterEntity				: CGameplayEntity;
		var slaveEntity					: CGameplayEntity;
		var syncInstances				: array< CAnimationManualSlotSyncInstance >;
		
		syncInstance = theGame.GetSyncAnimManager().CreateNewSyncInstance( instanceIndex );
		
		
		thePlayer.BlockAction(EIAB_Interactions, 'SyncManager' );
		thePlayer.BlockAction(EIAB_FastTravel, 'SyncManager' );
		
		switch( syncAction )
		{
			case 'PetWolf':
			{
				rot = slave.GetWorldRotation();
				
				
				if( VecDistance(master.GetWorldPosition(), slave.GetWorldPosition() + VecConeRand(slave.GetHeading() - 90, 0, 1,1)) < VecDistance(master.GetWorldPosition(), slave.GetWorldPosition() + VecConeRand(slave.GetHeading() + 90, 0, 1,1))  )
				{
					
					masterSequencePart.animation			= 'high_standing_determined_gesture_preparing_horse1b';	
					masterSequencePart.finalPosition		= slave.GetWorldPosition() + VecConeRand(slave.GetHeading() - 90, 0, 0.82,0.82) + VecConeRand(slave.GetHeading(), 0, 0.5,0.5);				
					masterSequencePart.finalHeading			= rot.Yaw + 95;
				}
				else
				{
					
					masterSequencePart.animation			= 'high_standing_determined_gesture_preparing_horse2';	
					masterSequencePart.finalPosition		= slave.GetWorldPosition() + VecConeRand(slave.GetHeading() + 90, 0, 0.82,0.82) + VecConeRand(slave.GetHeading(), 0, 0.3,0.3);				
					masterSequencePart.finalHeading			= rot.Yaw - 90;
				}
				
				masterSequencePart.syncType				= AMST_SyncBeginning;
				masterSequencePart.syncEventName		= 'SyncEvent';
				masterSequencePart.shouldSlide			= true;
				masterSequencePart.shouldRotate			= true;
				masterSequencePart.blendInTime			= 0.5f;
				masterSequencePart.blendOutTime			= 1.2f;
				masterSequencePart.sequenceIndex		= 0;
				
				masterDef.parts.PushBack( masterSequencePart );
				masterDef.entity						= master;
				masterDef.manualSlotName				= 'GAMEPLAY_SLOT';
				masterDef.freezeAtEnd					= false;
				
				
				slaveSequencePart.animation				= 'wolf_howling_loop';			
				slaveSequencePart.syncType				= AMST_SyncBeginning;
				slaveSequencePart.syncEventName			= 'SyncEvent';
				slaveSequencePart.shouldSlide			= false;
				slaveSequencePart.blendInTime			= 0.5f;
				slaveSequencePart.blendOutTime			= 0.5f;
				slaveSequencePart.sequenceIndex			= 0;
				
				slaveDef.parts.PushBack( slaveSequencePart );
				slaveDef.entity							= slave;
				slaveDef.manualSlotName					= 'NPC_ANIM_SLOT';
				slaveDef.freezeAtEnd					= false;
				
				break;
			}	
			
			default : 
			{
				syncInstances.Remove( syncInstance );
				return false;
			}
			
		}
		
		sequenceIndex = syncInstance.RegisterMaster( masterDef );
		if( sequenceIndex == -1 )
		{
			syncInstances.Remove( syncInstance );
			return false;
		}
		
		
		actorMaster = (CActor)master;
		actorSlave = (CActor)slave;
		
		if(actorMaster)
		{
			actorMaster.SignalGameplayEventParamInt( 'SetupSyncInstance', instanceIndex );
			actorMaster.SignalGameplayEventParamInt( 'SetupSequenceIndex', sequenceIndex );
			if ( finisherAnim )
				actorMaster.SignalGameplayEvent( 'PlayFinisherSyncedAnim' );
			else
				actorMaster.SignalGameplayEvent( 'PlaySyncedAnim' );
			
		}
		
		sequenceIndex = syncInstance.RegisterSlave( slaveDef );
		if( sequenceIndex == -1 )
		{
			syncInstances.Remove( syncInstance );
			return false;
		}
		
		
		if(actorSlave)
		{
			if( syncAction == 'Throat' )
				actorSlave.SignalGameplayEventParamCName( 'SetupEndEvent', 'CriticalState' );
				
			actorSlave.SignalGameplayEventParamInt( 'SetupSyncInstance', instanceIndex );
			actorSlave.SignalGameplayEventParamInt( 'SetupSequenceIndex', sequenceIndex );
			if ( finisherAnim )
				actorSlave.SignalGameplayEvent( 'PlayFinisherSyncedAnim' );
			else
				actorSlave.SignalGameplayEvent( 'PlaySyncedAnim' );
		}
		
		
		
		return true;
	}


	public timer function KillCountMenuDisplayDelay ( dt : float, id : int)
	{
		ACS_Kill_Count_Menu();
	}


	var persistent_killcount : int;
	default persistent_killcount  = 0;

	function ACS_Persistent_Killcount()
	{
		FactsAdd("ACS_Persistent_Kill_Count", persistent_killcount + 1, -1);
	}



	public timer function MegaWraithMinionDisppearEffect(deltaTime : float , id : int)
	{
		GetACSMegaWraithDummyDisappearAction();
	}

	var naglfarProgres 										: float;

	function naglfarProgressReset()
	{
		naglfarProgres -= naglfarProgres;
	}

	timer function NaglfarMove ( dt : float, id : int)
	{
		if (GetACSNaglfar() && (GetACSNaglfar().GetWorldPosition() != GetACSNaglfar().GetWorldPosition() + GetACSNaglfar().GetWorldRight() * 100 ))
		{
			GetACSNaglfar().Teleport( LerpV(GetACSNaglfar().GetWorldPosition(), GetACSNaglfar().GetWorldPosition() + GetACSNaglfar().GetWorldRight() * 100 , naglfarProgres) );
			naglfarProgres += 0.00000075/theGame.GetTimeScale();
		
			if(naglfarProgres >= 1)
			{
				RemoveTimer( 'NaglfarMove' );
				
				naglfarProgressReset();
			}
		}
		else
		{
			RemoveTimer( 'NaglfarMove' );

			naglfarProgressReset();
		}
	}

	timer function NaglfarStop ( dt : float, id : int)
	{
		var temp, temp_2													: CEntityTemplate;
		var ent, ent_2														: CEntity;

		//GetACSWatcher().RemoveTimer('NaglfarMove');

		temp_2 = (CEntityTemplate)LoadResource( 

		"dlc\dlc_acs\data\fx\test_rift.w2ent"
			
		, true );

		ent_2 = theGame.CreateEntity( temp_2, GetACSNaglfar().GetWorldPosition() + GetACSNaglfar().GetWorldRight() * 75, GetACSNaglfar().GetWorldRotation() );

		ent_2.PlayEffect('test_rift_2');

		ent_2.DestroyAfter(18);

		GetACSNaglfar().DestroyAfter(17);

		thePlayer.SoundEvent("magic_caranthil_teleport_fx_stop");

		thePlayer.SoundEvent("magic_caranthil_teleport_fx_start");
		
		AddTimer('NaglfarStopSound', 18, false);
	}

	timer function NaglfarStopSound ( dt : float, id : int)
	{
		Deactivate_Naglfar_Env();

		thePlayer.SoundEvent("magic_caranthil_teleport_fx_stop");
	}

	var miniHymSize : float;
	var miniHymSpeed : float;

	default miniHymSize = 1;
	default miniHymSpeed = 1;

	function GetMiniHymSize() : float
	{
		return miniHymSize;
	}

	function GetMiniHymSpeed() : float
	{
		return miniHymSpeed;
	}

	function MiniHymSizeSpeedIncrement()
	{
		miniHymSize += 0.05;

		miniHymSpeed += 0.0125;
	}

	function MiniHymSizeSpeedDecrement()
	{
		if (miniHymSize > 1)
		{
			miniHymSize -= 0.0125;
		}
		else
		{
			miniHymSize = 1;
		}
		
		if (miniHymSpeed > 1.5)
		{
			miniHymSpeed -= 0.06125;
		}
		else
		{
			miniHymSpeed = 1.5;
		}
	}

	function MiniHymSizeSpeedReset()
	{
		miniHymSize = 1;

		miniHymSpeed = 1;
	}

	function MiniHymSizeCheck() : bool
	{
		if (miniHymSize >= 1.5)
		{
			return true;
		}

		return false;
	}


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	public timer function ACS_ShadesDancerWaxing_BladeEffectDelay ( dt : float, id : int)
	{
		GetACS_ShadesDancerWaxing_L_Blade().PlayEffectSingle('runeword_igni');

		GetACS_ShadesDancerWaxing_L_Blade().PlayEffectSingle('runeword1_fire_trail');

		GetACS_ShadesDancerWaxing_L_Blade().PlayEffectSingle('fire_sparks_trail');

		GetACS_ShadesDancerWaxing_L_Blade().PlayEffectSingle('weapon_blood_stage2');

		GetACS_ShadesDancerWaxing_L_Blade().PlayEffectSingle('weapon_blood_stage1');

		GetACS_ShadesDancerWaxing_R_Blade().PlayEffectSingle('runeword_igni');

		GetACS_ShadesDancerWaxing_R_Blade().PlayEffectSingle('runeword1_fire_trail');

		GetACS_ShadesDancerWaxing_R_Blade().PlayEffectSingle('fire_sparks_trail');

		GetACS_ShadesDancerWaxing_R_Blade().PlayEffectSingle('weapon_blood_stage2');

		GetACS_ShadesDancerWaxing_R_Blade().PlayEffectSingle('weapon_blood_stage1');
	}

	public timer function ACS_ShadesDancerWaning_BladeEffectDelay ( dt : float, id : int)
	{
		GetACS_ShadesDancerWaning_L_Blade().PlayEffectSingle('runeword_axii');

		GetACS_ShadesDancerWaning_R_Blade().PlayEffectSingle('runeword_axii');

		GetACS_ShadesDancerWaning_L_Blade().PlayEffectSingle('ice');

		GetACS_ShadesDancerWaning_R_Blade().PlayEffectSingle('ice');
	}

	public timer function ACS_Shades_Kara_Resume_Fight ( dt : float, id : int)
	{
		var animatedComponentA																	: CAnimatedComponent;
	

		animatedComponentA = (CAnimatedComponent)GetACS_ShadesKara().GetComponentByClassName( 'CAnimatedComponent' );

		animatedComponentA.UnfreezePoseFadeOut(1);

		GetACS_ShadesKara().SetVisibility(true);
	}
	

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	public timer function DaoTurretAttachDelay ( dt : float, id : int)
	{
		var attach_vec							: Vector;
		var attach_rot							: EulerAngles;

		attach_rot.Roll = 90;
		attach_rot.Pitch = 0;
		attach_rot.Yaw = 0;
		attach_vec.X = 0.125;
		attach_vec.Y = -0.5;
		attach_vec.Z = 0;

		GetACS_DaoTurret_1().CreateAttachment( GetACS_DaoAnchor(), , attach_vec, attach_rot );


		attach_rot.Roll = 45;
		attach_rot.Pitch = 0;
		attach_rot.Yaw = 0;
		attach_vec.X = 0.25;
		attach_vec.Y = -0.5;
		attach_vec.Z = 0;

		GetACS_DaoTurret_2().CreateAttachment( GetACS_DaoAnchor(), , attach_vec, attach_rot );


		attach_rot.Roll = 135;
		attach_rot.Pitch = 0;
		attach_rot.Yaw = 0;
		attach_vec.X = 0.5;
		attach_vec.Y = -0.5;
		attach_vec.Z = 0;

		GetACS_DaoTurret_3().CreateAttachment( GetACS_DaoAnchor(), , attach_vec, attach_rot );



		((CNewNPC)GetACS_Dao()).SetAttitude((CNewNPC)GetACS_DaoTurret_1(), AIA_Friendly);

		((CNewNPC)GetACS_Dao()).SetAttitude((CNewNPC)GetACS_DaoTurret_2(), AIA_Friendly);

		((CNewNPC)GetACS_Dao()).SetAttitude((CNewNPC)GetACS_DaoTurret_3(), AIA_Friendly);


		((CNewNPC)GetACS_DaoTurret_1()).SetAttitude((CNewNPC)GetACS_Dao(), AIA_Friendly);

		((CNewNPC)GetACS_DaoTurret_2()).SetAttitude((CNewNPC)GetACS_Dao(), AIA_Friendly);

		((CNewNPC)GetACS_DaoTurret_3()).SetAttitude((CNewNPC)GetACS_Dao(), AIA_Friendly);
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Tutorial Delays

	public timer function ACS_Transformation_Tutorial_Delay ( dt : float, id : int)
	{
		if (FactsQuerySum("acs_wolven_curse_activated") > 0
		)
		{
			ACS_TransformationWerewolf_Tutorial();
		}

		if (FactsQuerySum("acs_vampire_monster_transformation_activated") > 0
		)
		{
			ACS_Vampire_Ring_Tutorial();
		}

		if (FactsQuerySum("acs_vampireess_transformation_activated") > 0
		)
		{
			ACS_Vampire_Necklace_Tutorial();
		}

		if (FactsQuerySum("acs_toad_transformation_activated") > 0
		)
		{
			ACS_Toad_Prince_Venom_Tutorial();
		}

		if (FactsQuerySum("acs_red_miasmal_curse_activated") > 0
		)
		{
			ACS_Red_Miasmal_Fragment_Tutorial();
		}

		if (FactsQuerySum("acs_sharley_curse_activated") > 0
		)
		{
			ACS_Sharley_Shard_Tutorial();
		}

		if (FactsQuerySum("acs_black_wolf_curse_activated") > 0)
		{
			
		}





	}

	public timer function ACS_Bruxa_Transformation_Tutorial_Delay ( dt : float, id : int)
	{
		if (FactsQuerySum("acs_vampireess_transformation_activated") > 0
		)
		{
			ACS_Bruxa_Fang_Tutorial();
		}

	}

	public timer function ACS_Wolf_Heart_Tutorial_Delay ( dt : float, id : int)
	{
		ACS_Wolf_Heart_Tutorial();
	}

	public timer function ACS_Pirate_Amulet_Tutorial_Delay ( dt : float, id : int)
	{
		ACS_Pirate_Amulet_Tutorial();
	}

	public timer function ACS_Wisp_Tutorial_Delay ( dt : float, id : int)
	{
		ACS_Wisp_Tutorial();
	}

	public timer function ACS_Kestral_Skull_Tutorial_Delay ( dt : float, id : int)
	{
		ACS_Kestral_Skull_Tutorial();
	}

	public timer function ACS_Phoenix_Ashes_Tutorial_Delay ( dt : float, id : int)
	{
		ACS_Phoenix_Ashes_Tutorial();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function ACS_DestroyAllShields()
	{
		var ents_destroy 				: array<CEntity>;
		var i 							: int;

		theGame.GetEntitiesByTag('ACS_ShieldSpawnerShield',ents_destroy);

		if (ents_destroy.Size() <= 0)
		{
			return;
		}

		if (ents_destroy.Size() > 0)
		{
			for( i=0; i<ents_destroy.Size(); i+=1 )
			{
				if (!CloseToFloor(ents_destroy[i].GetWorldPosition()))
				{
					ents_destroy[i].Destroy();
				}
			}
		}
	}

	function CloseToFloor( currPosition : Vector ) : bool
	{
		var outPosition, outNormal, tempPosition1, tempPosition2 : Vector;
		
		tempPosition1 = currPosition;
		tempPosition1.Z -= 0.5;
		
		tempPosition2 = currPosition;
		tempPosition2.Z += 0.5;
		
		if ( theGame.GetWorld().StaticTrace( tempPosition2, tempPosition1, outPosition, outNormal ) )
		{
			return true;
		}
		
		return false;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////

	public timer function ArmsGlowEffect(deltaTime : float , id : int)
	{
		thePlayer.StopEffect('special_attack_tell_r');
		thePlayer.PlayEffectSingle('special_attack_tell_r');

		thePlayer.StopEffect('special_attack_tell_l');
		thePlayer.PlayEffectSingle('special_attack_tell_l');

		thePlayer.StopEffect('hand_special_fx');
		thePlayer.PlayEffectSingle('hand_special_fx');
	}
}

state ACS_BARADDUR in W3ACSWatcher 
{
	event OnEnterState(previous_state_name: name) 
	{
    	super.OnEnterState(previous_state_name);
	
    	this.ACS_BARADDUR_ENTRY();
	}

	entry function ACS_BARADDUR_ENTRY() 
	{
		ACS_BARADDUR_LATENT();
	}

	latent function ACS_BARADDUR_LATENT()
	{
		while (true) 
		{
			parent.THE_EYE();

      		SleepOneFrame();
    	}
	}
}

statemachine abstract class W3ACSWatcherSecondary extends CEntity
{
	event OnSpawned( spawnData : SEntitySpawnData )
	{
		this.CreateAttachment( thePlayer );	

		this.PushState('ACS_MINASMORGUL');
	}
}

state ACS_MINASMORGUL in W3ACSWatcherSecondary 
{
	event OnEnterState(previous_state_name: name) 
	{
    	super.OnEnterState(previous_state_name);
	
    	this.ACS_MINASMORGUL_ENTRY();
	}

	entry function ACS_MINASMORGUL_ENTRY() 
	{
		ACS_MINASMORGUL_LATENT();
	}

	latent function ACS_MINASMORGUL_LATENT()
	{
		while (true) 
		{
			VersionControlToggle();

			BestiaryDisplayToggle();

			TutorialDisplayToggle();

			CameraLightsControl();

      		SleepOneFrame();
    	}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	latent function VersionControlToggle()
	{
		if ((ACS_VersionControl() == 0 || ACS_VersionControl() > ACS_GetVersion() ) && FactsQuerySum("acs_version_control_toggle") <= 0 )
		{
			FactsAdd("acs_version_control_toggle");
		}
		
		if ( FactsQuerySum("acs_version_control_toggle") > 0 )
		{
			if (ACS_VersionControl() == 0)
			{
				ACS_InitializeSettings();
				ACS_DisplayWelcomeMessage();
			}
			else
			{
				theGame.GetInGameConfigWrapper().SetVarValue('EHmodMain', 'EHmodVersionControl', ACS_GetVersion());
			}

			FactsRemove("acs_version_control_toggle");
		}
	}

	latent function BestiaryDisplayToggle()
	{
		BestiaryDisplayToggleOn();

		BestiaryDisplayToggleOff();
	}

	latent function BestiaryDisplayToggleOn()
	{
		if (ACSAlexanderBestiaryEnabled() && FactsQuerySum("alexander_bestiary_toggle") <= 0 )
		{
			FactsAdd("alexander_bestiary_toggle");
		}

		if (ACSBerstukBestiaryEnabled() && FactsQuerySum("berstuk_bestiary_toggle") <= 0 )
		{
			FactsAdd("berstuk_bestiary_toggle");
		}

		if (ACSBladeOfTheUnseenBestiaryEnabled() && FactsQuerySum("blade_of_the_unseen_bestiary_toggle") <= 0 )
		{
			FactsAdd("blade_of_the_unseen_bestiary_toggle");
		}

		if (ACSBruxaeBestiaryEnabled() && FactsQuerySum("bruxae_bestiary_toggle") <= 0 )
		{
			FactsAdd("bruxae_bestiary_toggle");
		}

		if (ACSDrownersBestiaryEnabled() && FactsQuerySum("drowners_bestiary_toggle") <= 0 )
		{
			FactsAdd("drowners_bestiary_toggle");
		}

		if (ACSFireWyrmBestiaryEnabled() && FactsQuerySum("fire_wyrm_bestiary_toggle") <= 0 )
		{
			FactsAdd("fire_wyrm_bestiary_toggle");
		}

		if (ACSForestGodShadowsBestiaryEnabled() && FactsQuerySum("forest_god_shadows_bestiary_toggle") <= 0 )
		{
			FactsAdd("forest_god_shadows_bestiary_toggle");
		}

		if (ACSGhoulsBestiaryEnabled() && FactsQuerySum("ghouls_bestiary_toggle") <= 0 )
		{
			FactsAdd("ghouls_bestiary_toggle");
		}

		if (ACSSwordsmanBestiaryEnabled() && FactsQuerySum("swordsman_bestiary_toggle") <= 0 )
		{
			FactsAdd("swordsman_bestiary_toggle");
		}
	
		if (ACSIceTitanBestiaryEnabled() && FactsQuerySum("ice_titan_bestiary_toggle") <= 0 )
		{
			FactsAdd("ice_titan_bestiary_toggle");
		}
	
		if (ACSKhagmarBestiaryEnabled() && FactsQuerySum("khagmar_bestiary_toggle") <= 0 )
		{
			FactsAdd("khagmar_bestiary_toggle");
		}
	
		if (ACSKnightmareBestiaryEnabled() && FactsQuerySum("knightmare_bestiary_toggle") <= 0 )
		{
			FactsAdd("knightmare_bestiary_toggle");
		}
	
		if (ACSLoviatarBestiaryEnabled() && FactsQuerySum("loviatar_bestiary_toggle") <= 0 )
		{
			FactsAdd("loviatar_bestiary_toggle");
		}
	
		if (ACSNekkerGuardianBestiaryEnabled() && FactsQuerySum("nekker_guardian_bestiary_toggle") <= 0 )
		{
			FactsAdd("nekker_guardian_bestiary_toggle");
		}
	
		if (ACSNightHunterBestiaryEnabled() && FactsQuerySum("night_hunter_bestiary_toggle") <= 0 )
		{
			FactsAdd("night_hunter_bestiary_toggle");
		}
	
		if (ACSNovigradVampiresBestiaryEnabled() && FactsQuerySum("novigrad_vampires_bestiary_toggle") <= 0 )
		{
			FactsAdd("novigrad_vampires_bestiary_toggle");
		}
	
		if (ACSRogueMagesBestiaryEnabled() && FactsQuerySum("rogue_mages_bestiary_toggle") <= 0 )
		{
			FactsAdd("rogue_mages_bestiary_toggle");
		}
	
		if (ACSVolosBestiaryEnabled() && FactsQuerySum("volos_bestiary_toggle") <= 0 )
		{
			FactsAdd("volos_bestiary_toggle");
		}
	
		if (ACSWildHuntHoundsBestiaryEnabled() && FactsQuerySum("wild_hunt_hounds_bestiary_toggle") <= 0 )
		{
			FactsAdd("wild_hunt_hounds_bestiary_toggle");
		}

		if (ACSVampiresLifestealBestiaryEnabled() && FactsQuerySum("vampires_lifesteal_bestiary_toggle") <= 0 )
		{
			FactsAdd("vampires_lifesteal_bestiary_toggle");
		}
	
		if (ACSWerewolvesBestiaryEnabled() && FactsQuerySum("werewolves_bestiary_toggle") <= 0 )
		{
			FactsAdd("werewolves_bestiary_toggle");
		}
	
		if (ACSWildHuntWarriorsBestiaryEnabled() && FactsQuerySum("wild_hunt_warriors_bestiary_toggle") <= 0 )
		{
			FactsAdd("wild_hunt_warriors_bestiary_toggle");
		}
	
		if (ACSXenoSwarmSoldierBestiaryEnabled() && FactsQuerySum("xeno_swarm_soldiers_bestiary_toggle") <= 0 )
		{
			FactsAdd("xeno_swarm_soldiers_bestiary_toggle");
		}
	
		if (ACSXenoSwarmTyrantBestiaryEnabled() && FactsQuerySum("xeno_swarm_tyrant_bestiary_toggle") <= 0 )
		{
			FactsAdd("xeno_swarm_tyrant_bestiary_toggle");
		}
	
		if (ACSXenoSwarmWorkerBestiaryEnabled() && FactsQuerySum("xeno_swarm_workers_bestiary_toggle") <= 0 )
		{
			FactsAdd("xeno_swarm_workers_bestiary_toggle");
		}
	
		if (ACSFireGargoyleBestiaryEnabled() && FactsQuerySum("fire_gargoyle_bestiary_toggle") <= 0 )
		{
			FactsAdd("fire_gargoyle_bestiary_toggle");
		}
	
		if (ACSLynxAssassinBestiaryEnabled() && FactsQuerySum("lynx_assassin_bestiary_toggle") <= 0 )
		{
			FactsAdd("lynx_assassin_bestiary_toggle");
		}
	
		if (ACSFluffyBestiaryEnabled() && FactsQuerySum("fluffy_bestiary_toggle") <= 0 )
		{
			FactsAdd("fluffy_bestiary_toggle");
		}
	
		if (ACSFogAssassinBestiaryEnabled() && FactsQuerySum("fog_assassin_bestiary_toggle") <= 0 )
		{
			FactsAdd("fog_assassin_bestiary_toggle");
		}
	
		if (ACSCultOfMelusineBestiaryEnabled() && FactsQuerySum("cult_of_melusine_bestiary_toggle") <= 0 )
		{
			FactsAdd("cult_of_melusine_bestiary_toggle");
		}
	
		if (ACSMelusineBestiaryEnabled() && FactsQuerySum("melusine_of_the_storm_bestiary_toggle") <= 0 )
		{
			FactsAdd("melusine_of_the_storm_bestiary_toggle");
		}
	
		if (ACSRioghanBestiaryEnabled() && FactsQuerySum("rioghan_bestiary_toggle") <= 0 )
		{
			FactsAdd("rioghan_bestiary_toggle");
		}
	
		if (ACSDuskwraithBestiaryEnabled() && FactsQuerySum("duskwraith_bestiary_toggle") <= 0 )
		{
			FactsAdd("duskwraith_bestiary_toggle");
		}
	
		if (ACSSvalblodBestiaryEnabled() && FactsQuerySum("svalblod_bestiary_toggle") <= 0 )
		{
			FactsAdd("svalblod_bestiary_toggle");
		}
	
		if (ACSVildkaarlBestiaryEnabled() && FactsQuerySum("vildkaarl_bestiary_toggle") <= 0 )
		{
			FactsAdd("vildkaarl_bestiary_toggle");
		}
	
		if (ACSIncubusBestiaryEnabled() && FactsQuerySum("incubus_bestiary_toggle") <= 0 )
		{
			FactsAdd("incubus_bestiary_toggle");
		}
	
		if (ACSDraugBestiaryEnabled() && FactsQuerySum("draug_bestiary_toggle") <= 0 )
		{
			FactsAdd("draug_bestiary_toggle");
		}
	
		if (ACSDraugirBestiaryEnabled() && FactsQuerySum("draugir_bestiary_toggle") <= 0 )
		{
			FactsAdd("draugir_bestiary_toggle");
		}
	
		if (ACSMegaWraithBestiaryEnabled() && FactsQuerySum("megawraith_bestiary_toggle") <= 0 )
		{
			FactsAdd("megawraith_bestiary_toggle");
		}
	
		if (ACSFireGryphonBestiaryEnabled() && FactsQuerySum("fire_gryphon_bestiary_toggle") <= 0 )
		{
			FactsAdd("fire_gryphon_bestiary_toggle");
		}
	
		if (ACSMulaBestiaryEnabled() && FactsQuerySum("mula_bestiary_toggle") <= 0 )
		{
			FactsAdd("mula_bestiary_toggle");
		}
	
		if (ACSBloodHymBestiaryEnabled() && FactsQuerySum("blood_hym_bestiary_toggle") <= 0 )
		{
			FactsAdd("blood_hym_bestiary_toggle");
		}

		if (ACSBumbakvetchBestiaryEnabled() && FactsQuerySum("bumbakvetch_bestiary_toggle") <= 0 )
		{
			FactsAdd("bumbakvetch_bestiary_toggle");
		}

		if (ACSElderbloodAssassinBestiaryEnabled() && FactsQuerySum("elderblood_assassin_bestiary_toggle") <= 0 )
		{
			FactsAdd("elderblood_assassin_bestiary_toggle");
		}

		if (ACSFrostBoarBestiaryEnabled() && FactsQuerySum("frost_boar_bestiary_toggle") <= 0 )
		{
			FactsAdd("frost_boar_bestiary_toggle");
		}

		if (ACSNimeanPantherBestiaryEnabled() && FactsQuerySum("nimean_panther_bestiary_toggle") <= 0 )
		{
			FactsAdd("nimean_panther_bestiary_toggle");
		}

		if (ACSPixieGuardianBestiaryEnabled() && FactsQuerySum("pixie_guardian_bestiary_toggle") <= 0 )
		{
			FactsAdd("pixie_guardian_bestiary_toggle");
		}

		if (ACSDemonicConstructBestiaryEnabled() && FactsQuerySum("demonic_construct_bestiary_toggle") <= 0 )
		{
			FactsAdd("demonic_construct_bestiary_toggle");
		}

		if (ACSViyBestiaryEnabled() && FactsQuerySum("viy_of_maribor_bestiary_toggle") <= 0 )
		{
			FactsAdd("viy_of_maribor_bestiary_toggle");
		}

		if (ACSPhoocaBestiaryEnabled() && FactsQuerySum("phooca_bestiary_toggle") <= 0 )
		{
			FactsAdd("phooca_bestiary_toggle");
		}

		if (ACSPlumardBestiaryEnabled() && FactsQuerySum("plumard_bestiary_toggle") <= 0 )
		{
			FactsAdd("plumard_bestiary_toggle");
		}

		if (ACSElementalTitansBestiaryEnabled() && FactsQuerySum("elemental_titans_bestiary_toggle") <= 0 )
		{
			FactsAdd("elemental_titans_bestiary_toggle");
		}

		if (ACSGiantTrollsBestiaryEnabled() && FactsQuerySum("giant_trolls_bestiary_toggle") <= 0 )
		{
			FactsAdd("giant_trolls_bestiary_toggle");
		}

		if (ACSTheBeastBestiaryEnabled() && FactsQuerySum("the_beast_bestiary_toggle") <= 0 )
		{
			FactsAdd("the_beast_bestiary_toggle");
		}

		if (ACSDarkKnightBestiaryEnabled() && FactsQuerySum("dark_knight_bestiary_toggle") <= 0 )
		{
			FactsAdd("dark_knight_bestiary_toggle");
		}

		if (ACSVorefBestiaryEnabled() && FactsQuerySum("voref_bestiary_toggle") <= 0 )
		{
			FactsAdd("voref_bestiary_toggle");
		}

		if (ACSMaerolornBestiaryEnabled() && FactsQuerySum("maerolorn_bestiary_toggle") <= 0 )
		{
			FactsAdd("maerolorn_bestiary_toggle");
		}

		if (ACSIfritBestiaryEnabled() && FactsQuerySum("ifrit_bestiary_toggle") <= 0 )
		{
			FactsAdd("ifrit_bestiary_toggle");
		}

		if (ACSIridescentSharleyBestiaryEnabled() && FactsQuerySum("iridescent_sharley_bestiary_toggle") <= 0 )
		{
			FactsAdd("iridescent_sharley_bestiary_toggle");
		}

		if (ACSChironexBestiaryEnabled() && FactsQuerySum("chironex_bestiary_toggle") <= 0 )
		{
			FactsAdd("chironex_bestiary_toggle");
		}

		if (ACSDaoBestiaryEnabled() && FactsQuerySum("acs_dao_bestiary_toggle") <= 0 )
		{
			FactsAdd("acs_dao_bestiary_toggle");
		}

		if (ACSKnockerBestiaryEnabled() && FactsQuerySum("acs_knocker_bestiary_toggle") <= 0 )
		{
			FactsAdd("acs_knocker_bestiary_toggle");
		}

		if (ACSNekuratBestiaryEnabled() && FactsQuerySum("acs_nekurat_bestiary_toggle") <= 0 )
		{
			FactsAdd("acs_nekurat_bestiary_toggle");
		}

		if (ACSVendigoBestiaryEnabled() && FactsQuerySum("acs_vendigo_bestiary_toggle") <= 0 )
		{
			FactsAdd("acs_vendigo_bestiary_toggle");
		}

		if (ACSSwarmMotherBestiaryEnabled() && FactsQuerySum("acs_swarm_mother_bestiary_toggle") <= 0 )
		{
			FactsAdd("acs_swarm_mother_bestiary_toggle");
		}

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		if (ACSEnhancedEnemiesOverviewEnabled() && FactsQuerySum("enhanced_enemies_overview_bestiary_toggle") <= 0 )
		{
			FactsAdd("enhanced_enemies_overview_bestiary_toggle");
		}
	
		if (ACSAdditionalRandomEncountersOverviewEnabled() && FactsQuerySum("additional_random_encounters_bestiary_toggle") <= 0 )
		{
			FactsAdd("additional_random_encounters_bestiary_toggle");
		}
	
		if (ACSAdditionalWorldEncountersOverviewEnabled() && FactsQuerySum("additional_world_encounters_bestiary_toggle") <= 0 )
		{
			FactsAdd("additional_world_encounters_bestiary_toggle");
		}
	
		if (ACSSpecialEncountersOverviewEnabled() && FactsQuerySum("special_encounters_bestiary_toggle") <= 0 )
		{
			FactsAdd("special_encounters_bestiary_toggle");
		}
	}

	latent function BestiaryDisplayToggleOff()
	{
		if ( FactsQuerySum("alexander_bestiary_toggle") > 0 )
		{
			ACS_Alexander_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodAlexanderBestiaryEnabled', "false");
			FactsRemove("alexander_bestiary_toggle");
		}
	
		if ( FactsQuerySum("berstuk_bestiary_toggle") > 0 )
		{
			ACS_Berstuk_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodBerstukBestiaryEnabled', "false");
			FactsRemove("berstuk_bestiary_toggle");
		}
	
		if ( FactsQuerySum("blade_of_the_unseen_bestiary_toggle") > 0 )
		{
			ACS_BladeOfTheUnseenn_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodSpecialEncountersBestiary', 'EHmodBladeOfTheUnseenBestiaryEnabled', "false");
			FactsRemove("blade_of_the_unseen_bestiary_toggle");
		}
	
		if ( FactsQuerySum("bruxae_bestiary_toggle") > 0 )
		{
			ACS_Bruxae_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodBruxaeBestiaryEnabled', "false");
			FactsRemove("bruxae_bestiary_toggle");
		}
	
		if ( FactsQuerySum("drowners_bestiary_toggle") > 0 )
		{
			ACS_Drowners_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodEnhancedEnemiesBestiary', 'EHmodDrownersBestiaryEnabled', "false");
			FactsRemove("drowners_bestiary_toggle");
		}
	
		if ( FactsQuerySum("fire_wyrm_bestiary_toggle") > 0 )
		{
			ACS_FireWyrm_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodFireWyrmBestiaryEnabled', "false");
			FactsRemove("fire_wyrm_bestiary_toggle");
		}
	
		if ( FactsQuerySum("forest_god_shadows_bestiary_toggle") > 0 )
		{
			ACS_ForestGodShadows_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalRandomEncountersBestiary', 'EHmodForestGodShadowsBestiaryEnabled', "false");
			FactsRemove("forest_god_shadows_bestiary_toggle");
		}
	
		if ( FactsQuerySum("ghouls_bestiary_toggle") > 0 )
		{
			ACS_Ghouls_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodEnhancedEnemiesBestiary', 'EHmodGhoulsBestiaryEnabled', "false");
			FactsRemove("ghouls_bestiary_toggle");
		}
	
		if ( FactsQuerySum("swordsman_bestiary_toggle") > 0 )
		{
			ACS_Swordsman_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodEnhancedEnemiesBestiary', 'EHmodSwordsmanBestiaryEnabled', "false");
			FactsRemove("swordsman_bestiary_toggle");
		}
	
		if ( FactsQuerySum("ice_titan_bestiary_toggle") > 0 )
		{
			ACS_IceTitan_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodIceTitanBestiaryEnabled', "false");
			FactsRemove("ice_titan_bestiary_toggle");
		}
	
		if ( FactsQuerySum("khagmar_bestiary_toggle") > 0 )
		{
			ACS_Khagmar_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodSpecialEncountersBestiary', 'EHmodKhagmarBestiaryEnabled', "false");
			FactsRemove("khagmar_bestiary_toggle");
		}
	
		if ( FactsQuerySum("knightmare_bestiary_toggle") > 0 )
		{
			ACS_Knightmare_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodKnightmareBestiaryEnabled', "false");
			FactsRemove("knightmare_bestiary_toggle");
		}
	
		if ( FactsQuerySum("loviatar_bestiary_toggle") > 0 )
		{
			ACS_Loviatar_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodLoviatarBestiaryEnabled', "false");
			FactsRemove("loviatar_bestiary_toggle");
		}
	
		if ( FactsQuerySum("nekker_guardian_bestiary_toggle") > 0 )
		{
			ACS_NekkerGuardian_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodEnhancedEnemiesBestiary', 'EHmodNekkerGuardianBestiaryEnabled', "false");
			FactsRemove("nekker_guardian_bestiary_toggle");
		}
	
		if ( FactsQuerySum("night_hunter_bestiary_toggle") > 0 )
		{
			ACS_NightHunter_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalRandomEncountersBestiary', 'EHmodNightHunterBestiaryEnabled', "false");
			FactsRemove("night_hunter_bestiary_toggle");
		}
	
		if ( FactsQuerySum("novigrad_vampires_bestiary_toggle") > 0 )
		{
			ACS_NovigradVampires_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodEnhancedEnemiesBestiary', 'EHmodNovigradVampiresBestiaryEnabled', "false");
			FactsRemove("novigrad_vampires_bestiary_toggle");
		}
	
		if ( FactsQuerySum("rogue_mages_bestiary_toggle") > 0 )
		{
			ACS_RogueMages_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodRogueMagesBestiaryEnabled', "false");
			FactsRemove("rogue_mages_bestiary_toggle");
		}
	
		if ( FactsQuerySum("volos_bestiary_toggle") > 0 )
		{
			ACS_Volos_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodSpecialEncountersBestiary', 'EHmodVolosBestiaryEnabled', "false");
			FactsRemove("volos_bestiary_toggle");
		}
	
		if ( FactsQuerySum("werewolves_bestiary_toggle") > 0 )
		{
			ACS_Werewolves_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodEnhancedEnemiesBestiary', 'EHmodWerewolvesBestiaryEnabled', "false");
			FactsRemove("werewolves_bestiary_toggle");
		}
	
		if ( FactsQuerySum("wild_hunt_hounds_bestiary_toggle") > 0 )
		{
			ACS_WildHuntHounds_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodEnhancedEnemiesBestiary', 'EHmodWildHuntHoundsBestiaryEnabled', "false");
			FactsRemove("wild_hunt_hounds_bestiary_toggle");
		}

		if ( FactsQuerySum("vampires_lifesteal_bestiary_toggle") > 0 )
		{
			ACS_VampiresLifesteal_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodEnhancedEnemiesBestiary', 'EHmodVampiresLifestealBestiaryEnabled', "false");
			FactsRemove("vampires_lifesteal_bestiary_toggle");
		}
	
		if ( FactsQuerySum("wild_hunt_warriors_bestiary_toggle") > 0 )
		{
			ACS_WildHuntWarriors_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalRandomEncountersBestiary', 'EHmodWildHuntWarriorsBestiaryEnabled', "false");
			FactsRemove("wild_hunt_warriors_bestiary_toggle");
		}
	
		if ( FactsQuerySum("xeno_swarm_soldiers_bestiary_toggle") > 0 )
		{
			ACS_XenoSwarmSoldiers_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodXenoSwarmSoldierBestiaryEnabled', "false");
			FactsRemove("xeno_swarm_soldiers_bestiary_toggle");
		}
	
		if ( FactsQuerySum("xeno_swarm_tyrant_bestiary_toggle") > 0 )
		{
			ACS_XenoSwarmTyrant_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodXenoSwarmTyrantBestiaryEnabled', "false");
			FactsRemove("xeno_swarm_tyrant_bestiary_toggle");
		}
	
		if ( FactsQuerySum("xeno_swarm_workers_bestiary_toggle") > 0 )
		{
			ACS_XenoSwarmWorkers_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodXenoSwarmWorkerBestiaryEnabled', "false");
			FactsRemove("xeno_swarm_workers_bestiary_toggle");
		}
	
		if ( FactsQuerySum("fire_gargoyle_bestiary_toggle") > 0 )
		{
			ACS_FireGargoyle_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodFireGargoyleBestiaryEnabled', "false");
			FactsRemove("fire_gargoyle_bestiary_toggle");
		}
	
		if ( FactsQuerySum("lynx_assassin_bestiary_toggle") > 0 )
		{
			ACS_LynxAssassin_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodLynxAssassinBestiaryEnabled', "false");
			FactsRemove("lynx_assassin_bestiary_toggle");
		}
	
		if ( FactsQuerySum("fluffy_bestiary_toggle") > 0 )
		{
			ACS_Fluffy_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodHellhoundBestiaryEnabled', "false");
			FactsRemove("fluffy_bestiary_toggle");
		}
	
		if ( FactsQuerySum("fog_assassin_bestiary_toggle") > 0 )
		{
			ACS_Fog_Assassin_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodFogAssassinBestiaryEnabled', "false");
			FactsRemove("fog_assassin_bestiary_toggle");
		}
	
		if ( FactsQuerySum("cult_of_melusine_bestiary_toggle") > 0 )
		{
			ACS_Cult_Of_Melusine_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodCultOfMelusineBestiaryEnabled', "false");
			FactsRemove("cult_of_melusine_bestiary_toggle");
		}
	
		if ( FactsQuerySum("melusine_of_the_storm_bestiary_toggle") > 0 )
		{
			ACS_Melusine_Of_The_Storm_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodSpecialEncountersBestiary', 'EHmodMelusineBestiaryEnabled', "false");
			FactsRemove("melusine_of_the_storm_bestiary_toggle");
		}
	
		if ( FactsQuerySum("rioghan_bestiary_toggle") > 0 )
		{
			ACS_Rioghan_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodRioghanBestiaryEnabled', "false");
			FactsRemove("rioghan_bestiary_toggle");
		}
	
		if ( FactsQuerySum("duskwraith_bestiary_toggle") > 0 )
		{
			ACS_Duskwraith_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodDuskwraithBestiaryEnabled', "false");
			FactsRemove("duskwraith_bestiary_toggle");
		}
	
		if ( FactsQuerySum("svalblod_bestiary_toggle") > 0 )
		{
			ACS_Svalblod_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodSvalblodBestiaryEnabled', "false");
			FactsRemove("svalblod_bestiary_toggle");
		}
	
		if ( FactsQuerySum("vildkaarl_bestiary_toggle") > 0 )
		{
			ACS_Vildkaarl_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodVildkaarlBestiaryEnabled', "false");
			FactsRemove("vildkaarl_bestiary_toggle");
		}
	
		if ( FactsQuerySum("incubus_bestiary_toggle") > 0 )
		{
			ACS_Incubus_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodIncubusBestiaryEnabled', "false");
			FactsRemove("incubus_bestiary_toggle");
		}
	
		if ( FactsQuerySum("draug_bestiary_toggle") > 0 )
		{
			ACS_Draug_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodDraugBestiaryEnabled', "false");
			FactsRemove("draug_bestiary_toggle");
		}
	
		if ( FactsQuerySum("draugir_bestiary_toggle") > 0 )
		{
			ACS_Draugir_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodDraugirBestiaryEnabled', "false");
			FactsRemove("draugir_bestiary_toggle");
		}
	
		if ( FactsQuerySum("megawraith_bestiary_toggle") > 0 )
		{
			ACS_MegaWraith_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodMegaWraithBestiaryEnabled', "false");
			FactsRemove("megawraith_bestiary_toggle");
		}
	
		if ( FactsQuerySum("fire_gryphon_bestiary_toggle") > 0 )
		{
			ACS_FireGryphon_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodFireGryphonBestiaryEnabled', "false");
			FactsRemove("fire_gryphon_bestiary_toggle");
		}
	
		if ( FactsQuerySum("mula_bestiary_toggle") > 0 )
		{
			ACS_Mula_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodMulaBestiaryEnabled', "false");
			FactsRemove("mula_bestiary_toggle");
		}
	
		if ( FactsQuerySum("blood_hym_bestiary_toggle") > 0 )
		{
			ACS_Blood_Hym_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodBloodHymBestiaryEnabled', "false");
			FactsRemove("blood_hym_bestiary_toggle");
		}

		if ( FactsQuerySum("bumbakvetch_bestiary_toggle") > 0 )
		{
			ACS_Bumbakvetch_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodBumbakvetchBestiaryEnabled', "false");
			FactsRemove("bumbakvetch_bestiary_toggle");
		}

		if ( FactsQuerySum("elderblood_assassin_bestiary_toggle") > 0 )
		{
			ACS_Elderblood_Assassin_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalRandomEncountersBestiary', 'EHmodElderbloodAssassinBestiaryEnabled', "false");
			FactsRemove("elderblood_assassin_bestiary_toggle");
		}

		if ( FactsQuerySum("frost_boar_bestiary_toggle") > 0 )
		{
			ACS_Frost_Boar_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodFrostBoarBestiaryEnabled', "false");
			FactsRemove("frost_boar_bestiary_toggle");
		}

		if ( FactsQuerySum("nimean_panther_bestiary_toggle") > 0 )
		{
			ACS_Nimean_Panther_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodNimeanPantherBestiaryEnabled', "false");
			FactsRemove("nimean_panther_bestiary_toggle");
		}

		if ( FactsQuerySum("pixie_guardian_bestiary_toggle") > 0 )
		{
			ACS_Pixie_Guardian_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodEnhancedEnemiesBestiary', 'EHmodPixieGuardianBestiaryEnabled', "false");
			FactsRemove("pixie_guardian_bestiary_toggle");
		}

		if ( FactsQuerySum("demonic_construct_bestiary_toggle") > 0 )
		{
			ACS_Demonic_Construct_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodDemonicConstructBestiaryEnabled', "false");
			FactsRemove("demonic_construct_bestiary_toggle");
		}

		if ( FactsQuerySum("viy_of_maribor_bestiary_toggle") > 0 )
		{
			ACS_Viy_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodViyBestiaryEnabled', "false");
			FactsRemove("viy_of_maribor_bestiary_toggle");
		}

		if ( FactsQuerySum("phooca_bestiary_toggle") > 0 )
		{
			ACS_Phooca_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodPhoocaBestiaryEnabled', "false");
			FactsRemove("phooca_bestiary_toggle");
		}

		if ( FactsQuerySum("plumard_bestiary_toggle") > 0 )
		{
			ACS_Plumard_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodPlumardBestiaryEnabled', "false");
			FactsRemove("plumard_bestiary_toggle");
		}

		if ( FactsQuerySum("elemental_titans_bestiary_toggle") > 0 )
		{
			ACS_ElementalTitans_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodElementalTitansBestiaryEnabled', "false");
			FactsRemove("elemental_titans_bestiary_toggle");
		}

		if ( FactsQuerySum("giant_trolls_bestiary_toggle") > 0 )
		{
			ACS_GiantTrolls_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodGiantTrollsBestiaryEnabled', "false");
			FactsRemove("giant_trolls_bestiary_toggle");
		}

		if ( FactsQuerySum("the_beast_bestiary_toggle") > 0 )
		{
			ACS_TheBeast_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodTheBeastBestiaryEnabled', "false");
			FactsRemove("the_beast_bestiary_toggle");
		}

		if ( FactsQuerySum("dark_knight_bestiary_toggle") > 0 )
		{
			ACS_DarkKnight_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodDarkKnightBestiaryEnabled', "false");
			FactsRemove("dark_knight_bestiary_toggle");
		}

		if ( FactsQuerySum("voref_bestiary_toggle") > 0 )
		{
			ACS_Voref_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodVorefBestiaryEnabled', "false");
			FactsRemove("voref_bestiary_toggle");
		}

		if ( FactsQuerySum("maerolorn_bestiary_toggle") > 0 )
		{
			ACS_Maerolorn_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodMaerolornBestiaryEnabled', "false");
			FactsRemove("maerolorn_bestiary_toggle");
		}

		if ( FactsQuerySum("ifrit_bestiary_toggle") > 0 )
		{
			ACS_Ifrit_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodIfritBestiaryEnabled', "false");
			FactsRemove("ifrit_bestiary_toggle");
		}

		if ( FactsQuerySum("iridescent_sharley_bestiary_toggle") > 0 )
		{
			ACS_Iridescent_Sharley_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodIridescentSharleyBestiaryEnabled', "false");
			FactsRemove("iridescent_sharley_bestiary_toggle");
		}

		if ( FactsQuerySum("chironex_bestiary_toggle") > 0 )
		{
			ACS_Chironex_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodChironexBestiaryEnabled', "false");
			FactsRemove("chironex_bestiary_toggle");
		}

		if ( FactsQuerySum("acs_dao_bestiary_toggle") > 0 )
		{
			ACS_Dao_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodDaoBestiaryEnabled', "false");
			FactsRemove("acs_dao_bestiary_toggle");
		}

		if ( FactsQuerySum("acs_knocker_bestiary_toggle") > 0 )
		{
			ACS_Knocker_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodKnockerBestiaryEnabled', "false");
			FactsRemove("acs_knocker_bestiary_toggle");
		}

		if ( FactsQuerySum("acs_nekurat_bestiary_toggle") > 0 )
		{
			ACS_Nekurat_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodNekuratBestiaryEnabled', "false");
			FactsRemove("acs_nekurat_bestiary_toggle");
		}

		if ( FactsQuerySum("acs_vendigo_bestiary_toggle") > 0 )
		{
			ACS_Vendigo_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodVendigoBestiaryEnabled', "false");
			FactsRemove("acs_vendigo_bestiary_toggle");
		}

		if ( FactsQuerySum("acs_swarm_mother_bestiary_toggle") > 0 )
		{
			ACS_Swarm_Mother_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodSwarmMotherBestiaryEnabled', "false");
			FactsRemove("acs_swarm_mother_bestiary_toggle");
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		if ( FactsQuerySum("enhanced_enemies_overview_bestiary_toggle") > 0 )
		{
			ACS_Enhanced_Enemies_Overview();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodEnhancedEnemiesBestiary', 'EHmodEnhancedEnemiesOverviewEnabled', "false");
			FactsRemove("enhanced_enemies_overview_bestiary_toggle");
		}
	
		if ( FactsQuerySum("additional_random_encounters_bestiary_toggle") > 0 )
		{
			ACS_Additional_Random_Encounters_Overview();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalRandomEncountersBestiary', 'EHmodAdditionalRandomEncounterssOverviewEnabled', "false");
			FactsRemove("additional_random_encounters_bestiary_toggle");
		}
	
		if ( FactsQuerySum("additional_world_encounters_bestiary_toggle") > 0 )
		{
			ACS_Additional_World_Encounters_Overview();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalWorldEncountersBestiary', 'EHmodAdditionalWorldEncounterssOverviewEnabled', "false");
			FactsRemove("additional_world_encounters_bestiary_toggle");
		}
	
		if ( FactsQuerySum("special_encounters_bestiary_toggle") > 0 )
		{
			ACS_Additional_Special_Encounters_Overview();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodSpecialEncountersBestiary', 'EHmodSpecialEncounterssOverviewEnabled', "false");
			FactsRemove("special_encounters_bestiary_toggle");
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	latent function TutorialDisplayToggle()
	{
		TutorialDisplayToggleOn();

		TutorialDisplayToggleOff();
	}

	latent function TutorialDisplayToggleOn()
	{
		if (ACSRageTutorialEnabled() && FactsQuerySum("acs_rage_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_rage_tutorial_toggle");
		}
	
		if (ACSDynamicEnemyBehaviorSystemTutorialEnabled() && FactsQuerySum("acs_dynamic_enemy_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_dynamic_enemy_tutorial_toggle");
		}
	
		if (ACSGuardsTutorialEnabled() && FactsQuerySum("acs_guards_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_guards_tutorial_toggle");
		}
	
		if (ACSTransformationWerewolfTutorialEnabled() && FactsQuerySum("acs_transformation_werewolf_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_transformation_werewolf_tutorial_toggle");
		}
	
		if (ACSGlideTutorialEnabled() && FactsQuerySum("acs_glide_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_glide_tutorial_toggle");
		}
	
		if (ACSBruxaDashTutorialEnabled() && FactsQuerySum("acs_bruxa_dash_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_bruxa_dash_tutorial_toggle");
		}
	
		if (ACSWraithModeTutorialEnabled() && FactsQuerySum("acs_wraith_mode_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_wraith_mode_tutorial_toggle");
		}
	
		if (ACSLightsTutorialEnabled() && FactsQuerySum("acs_lights_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_lights_tutorial_toggle");
		}
	
		if (ACSQuickMeditationTutorialEnabled() && FactsQuerySum("acs_quick_meditation_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_quick_meditation_tutorial_toggle");
		}
	
		if (ACSPerfectDodgesCountersTutorialEnabled() && FactsQuerySum("acs_perfect_dodges_counters_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_perfect_dodges_counters_tutorial_toggle");
		}
	
		if (ACSArmorSystemTutorialEnabled() && FactsQuerySum("acs_armor_system_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_armor_system_tutorial_toggle");
		}
	
		if (ACSElementalComboSystemTutorialEnabled() && FactsQuerySum("acs_elemental_combo_system_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_elemental_combo_system_tutorial_toggle");
		}
	
		if (ACSQuestTrackingSwapTutorialEnabled() && FactsQuerySum("acs_quest_tracking_swap_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_quest_tracking_swap_tutorial_toggle");
		}
	
		if (ACSCloakWeaponHideTutorialEnabled() && FactsQuerySum("acs_cloak_weapon_hide_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_cloak_weapon_hide_tutorial_toggle");
		}
	
		if (ACSWitcherSchoolTutorialEnabled() && FactsQuerySum("acs_witcher_school_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_witcher_school_tutorial_toggle");
		}
	
		if (ACSWolfSchoolTutorialEnabled() && FactsQuerySum("acs_wolf_school_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_wolf_school_tutorial_toggle");
		}
	
		if (ACSBearSchoolTutorialEnabled() && FactsQuerySum("acs_bear_school_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_bear_school_tutorial_toggle");
		}
	
		if (ACSCatSchoolTutorialEnabled() && FactsQuerySum("acs_cat_school_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_cat_school_tutorial_toggle");
		}
	
		if (ACSViperSchoolTutorialEnabled() && FactsQuerySum("acs_viper_school_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_viper_school_tutorial_toggle");
		}
	
		if (ACSGriffinSchoolTutorialEnabled() && FactsQuerySum("acs_griffin_school_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_griffin_school_tutorial_toggle");
		}
	
		if (ACSManticoreSchoolTutorialEnabled() && FactsQuerySum("acs_manticore_school_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_manticore_school_tutorial_toggle");
		}
	
		if (ACSForgottenWolfSchoolTutorialEnabled() && FactsQuerySum("acs_forgotten_wolf_school_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_forgotten_wolf_school_tutorial_toggle");
		}
	
		if (ACSZirealTutorialEnabled() && FactsQuerySum("acs_zireal_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_zireal_tutorial_toggle");
		}
	
		if (ACSMaskTutorialEnabled() && FactsQuerySum("acs_mask_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_mask_tutorial_toggle");
		}
	
		if (ACSDurabilityTutorialEnabled() && FactsQuerySum("acs_durability_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_durability_tutorial_toggle");
		}
	
		if (ACSReadingAllItemsTutorialEnabled() && FactsQuerySum("acs_reading_all_items_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_reading_all_items_tutorial_toggle");
		}
	
		if (ACSLightningTutorialEnabled() && FactsQuerySum("acs_lightning_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_lightning_tutorial_toggle");
		}
	
		if (ACSAllBlackTutorialEnabled() && FactsQuerySum("acs_allblack_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_allblack_tutorial_toggle");
		}
	
		if (ACSFinisherTutorialEnabled() && FactsQuerySum("acs_finisher_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_finisher_tutorial_toggle");
		}
	
		if (ACSWispTutorialEnabled() && FactsQuerySum("acs_wisp_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_wisp_tutorial_toggle");
		}
	
		if (ACSWispLevel05TutorialEnabled() && FactsQuerySum("acs_wisp_level_05_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_wisp_level_05_tutorial_toggle");
		}
	
		if (ACSWispLevel10TutorialEnabled() && FactsQuerySum("acs_wisp_level_10_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_wisp_level_10_tutorial_toggle");
		}
	
		if (ACSWispLevel15TutorialEnabled() && FactsQuerySum("acs_wisp_level_15_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_wisp_level_15_tutorial_toggle");
		}
	
		if (ACSWispLevel20TutorialEnabled() && FactsQuerySum("acs_wisp_level_20_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_wisp_level_20_tutorial_toggle");
		}
	
		if (ACSWispLevel25TutorialEnabled() && FactsQuerySum("acs_wisp_level_25_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_wisp_level_25_tutorial_toggle");
		}
	
		if (ACSWolfHeartTutorialEnabled() && FactsQuerySum("acs_wolf_heart_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_wolf_heart_tutorial_toggle");
		}
	
		if (ACSVampireNecklaceTutorialEnabled() && FactsQuerySum("acs_vampire_necklace_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_vampire_necklace_tutorial_toggle");
		}
	
		if (ACSPirateAmuletTutorialEnabled() && FactsQuerySum("acs_pirate_amulet_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_pirate_amulet_tutorial_toggle");
		}
	
		if (ACSHoodAndMaskTutorialEnabled() && FactsQuerySum("acs_hood_and_mask_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_hood_and_mask_tutorial_toggle");
		}
	
		if (ACSParryTutorialEnabled() && FactsQuerySum("acs_parry_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_parry_tutorial_toggle");
		}
	
		if (ACSWeaponArtsTutorialEnabled() && FactsQuerySum("acs_weapon_arts_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_weapon_arts_tutorial_toggle");
		}
	
		if (ACSBruxaFangTutorialEnabled() && FactsQuerySum("acs_bruxa_fang_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_bruxa_fang_tutorial_toggle");
		}
	
		if (ACSVampireRingTutorialEnabled() && FactsQuerySum("acs_vampire_ring_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_vampire_ring_tutorial_toggle");
		}
	
		if (ACSSneakingTutorialEnabled() && FactsQuerySum("acs_sneaking_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_sneaking_tutorial_toggle");
		}

		if (ACSBowOfArtemisTutorialEnabled() && FactsQuerySum("acs_bow_of_artemis_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_bow_of_artemis_tutorial_toggle");
		}

		if (ACSCrossbowOfArtemisTutorialEnabled() && FactsQuerySum("acs_crossbow_of_artemis_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_crossbow_of_artemis_tutorial_toggle");
		}

		if (ACSToadPrinceVenomTutorialEnabled() && FactsQuerySum("acs_toad_prince_venom_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_toad_prince_venom_tutorial_toggle");
		}

		if (ACSHoldToRollTutorialEnabled() && FactsQuerySum("acs_hold_to_roll_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_hold_to_roll_tutorial_toggle");
		}

		if (ACSRedMiasmalFragmentTutorialEnabled() && FactsQuerySum("acs_red_miasmal_fragment_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_red_miasmal_fragment_tutorial_toggle");
		}

		if (ACSNightVisionTutorialEnabled() && FactsQuerySum("acs_night_vision_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_night_vision_tutorial_toggle");
		}

		if (ACSSharleyShardTutorialEnabled() && FactsQuerySum("acs_sharley_shard_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_sharley_shard_tutorial_toggle");
		}

		if (ACSignComboSystemTutorialEnabled() && FactsQuerySum("acs_sign_combo_system_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_sign_combo_system_tutorial_toggle");
		}

		if (ACSKestralSkullTutorialEnabled() && FactsQuerySum("acs_kestral_skull_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_kestral_skull_tutorial_toggle");
		}

		if (ACSPhoenixAshesTutorialEnabled() && FactsQuerySum("acs_phoenix_ashes_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_phoenix_ashes_tutorial_toggle");
		}
	}

	latent function TutorialDisplayToggleOff()
	{
		if ( FactsQuerySum("acs_rage_tutorial_toggle") > 0 )
		{
			ACS_Rage_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodCombatTutorials', 'EHmodRageTutorialEnabled', "false");
			FactsRemove("acs_rage_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_dynamic_enemy_tutorial_toggle") > 0 )
		{
			ACS_Dynamic_Enemy_Behavior_System_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodCombatTutorials', 'EHmodDynamicEnemyBehaviorSystemTutorialEnabled', "false");
			FactsRemove("acs_dynamic_enemy_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_guards_tutorial_toggle") > 0 )
		{
			ACS_Guards_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalFeaturesTutorials', 'EHmodGuardsTutorialEnabled', "false");
			FactsRemove("acs_guards_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_transformation_werewolf_tutorial_toggle") > 0 )
		{
			ACS_TransformationWerewolf_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodItemTutorials', 'EHmodTransformationWerewolfTutorialEnabled', "false");
			FactsRemove("acs_transformation_werewolf_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_glide_tutorial_toggle") > 0 )
		{
			ACS_Glide_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodMovementTutorials', 'EHmodGlideTutorialEnabled', "false");
			FactsRemove("acs_glide_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_bruxa_dash_tutorial_toggle") > 0 )
		{
			ACS_Bruxa_Dash_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodMovementTutorials', 'EHmodBruxaDashTutorialEnabled', "false");
			FactsRemove("acs_bruxa_dash_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_wraith_mode_tutorial_toggle") > 0 )
		{
			ACS_Wraith_Mode_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodMovementTutorials', 'EHmodWraithModeTutorialEnabled', "false");
			FactsRemove("acs_wraith_mode_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_lights_tutorial_toggle") > 0 )
		{
			ACS_Lights_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalFeaturesTutorials', 'EHmodLightsTutorialEnabled', "false");
			FactsRemove("acs_lights_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_quick_meditation_tutorial_toggle") > 0 )
		{
			ACS_QuickMeditation_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalFeaturesTutorials', 'EHmodQuickMeditationTutorialEnabled', "false");
			FactsRemove("acs_quick_meditation_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_perfect_dodges_counters_tutorial_toggle") > 0 )
		{
			ACS_PerfectDodgesCounters_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodCombatTutorials', 'EHmodPerfectDodgesCountersTutorialEnabled', "false");
			FactsRemove("acs_perfect_dodges_counters_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_armor_system_tutorial_toggle") > 0 )
		{
			ACS_ArmorSystem_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodCombatTutorials', 'EHmodArmorSystemTutorialEnabled', "false");
			FactsRemove("acs_armor_system_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_elemental_combo_system_tutorial_toggle") > 0 )
		{
			ACS_ElementalComboSystem_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodCombatTutorials', 'EHmodElementalComboSystemTutorialEnabled', "false");
			FactsRemove("acs_elemental_combo_system_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_quest_tracking_swap_tutorial_toggle") > 0 )
		{
			ACS_QuestTrackingSwap_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalFeaturesTutorials', 'EHmodQuestTrackingSwapTutorialEnabled', "false");
			FactsRemove("acs_quest_tracking_swap_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_cloak_weapon_hide_tutorial_toggle") > 0 )
		{
			ACS_CloakWeaponHide_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalFeaturesTutorials', 'EHmodCloakWeaponHideTutorialEnabled', "false");
			FactsRemove("acs_cloak_weapon_hide_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_witcher_school_tutorial_toggle") > 0 )
		{
			ACS_WitcherSchool_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodWitcherSchoolTutorials', 'EHmodWitcherSchoolTutorialEnabled', "false");
			FactsRemove("acs_witcher_school_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_wolf_school_tutorial_toggle") > 0 )
		{
			ACS_WolfSchool_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodWitcherSchoolTutorials', 'EHmodWolfSchoolTutorialEnabled', "false");
			FactsRemove("acs_wolf_school_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_bear_school_tutorial_toggle") > 0 )
		{
			ACS_BearSchool_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodWitcherSchoolTutorials', 'EHmodBearSchoolTutorialEnabled', "false");
			FactsRemove("acs_bear_school_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_cat_school_tutorial_toggle") > 0 )
		{
			ACS_CatSchool_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodWitcherSchoolTutorials', 'EHmodCatSchoolTutorialEnabled', "false");
			FactsRemove("acs_cat_school_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_viper_school_tutorial_toggle") > 0 )
		{
			ACS_ViperSchool_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodWitcherSchoolTutorials', 'EHmodViperSchoolTutorialEnabled', "false");
			FactsRemove("acs_viper_school_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_griffin_school_tutorial_toggle") > 0 )
		{
			ACS_GriffinSchool_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodWitcherSchoolTutorials', 'EHmodGriffinSchoolTutorialEnabled', "false");
			FactsRemove("acs_griffin_school_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_manticore_school_tutorial_toggle") > 0 )
		{
			ACS_ManticoreSchool_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodWitcherSchoolTutorials', 'EHmodManticoreSchoolTutorialEnabled', "false");
			FactsRemove("acs_manticore_school_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_forgotten_wolf_school_tutorial_toggle") > 0 )
		{
			ACS_ForgottenWolfSchool_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodWitcherSchoolTutorials', 'EHmodForgottenWolfSchoolTutorialEnabled', "false");
			FactsRemove("acs_forgotten_wolf_school_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_zireal_tutorial_toggle") > 0 )
		{
			ACS_Zireal_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodItemTutorials', 'EHmodZirealTutorialEnabled', "false");
			FactsRemove("acs_zireal_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_mask_tutorial_toggle") > 0 )
		{
			ACS_Mask_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalFeaturesTutorials', 'EHmodMaskTutorialEnabled', "false");
			FactsRemove("acs_mask_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_durability_tutorial_toggle") > 0 )
		{
			ACS_Durability_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalFeaturesTutorials', 'EHmodDurabilityTutorialEnabled', "false");
			FactsRemove("acs_durability_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_reading_all_items_tutorial_toggle") > 0 )
		{
			ACS_Reading_All_Items_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalFeaturesTutorials', 'EHmodReadingAllItemsyTutorialEnabled', "false");
			FactsRemove("acs_reading_all_items_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_lightning_tutorial_toggle") > 0 )
		{
			ACS_Lightning_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalFeaturesTutorials', 'EHmodLightningTutorialEnabled', "false");
			FactsRemove("acs_lightning_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_allblack_tutorial_toggle") > 0 )
		{
			ACS_AllBlack_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodItemTutorials', 'EHmodAllBlackTutorialEnabled', "false");
			FactsRemove("acs_allblack_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_finisher_tutorial_toggle") > 0 )
		{
			ACS_Finisher_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodCombatTutorials', 'EHmodFinisherTutorialEnabled', "false");
			FactsRemove("acs_finisher_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_wisp_tutorial_toggle") > 0 )
		{
			ACS_Wisp_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodItemTutorials', 'EHmodWispTutorialEnabled', "false");
			FactsRemove("acs_wisp_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_wisp_level_05_tutorial_toggle") > 0 )
		{
			ACS_Wisp_Level_05_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodItemTutorials', 'EHmodWispLevel05TutorialEnabled', "false");
			FactsRemove("acs_wisp_level_05_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_wisp_level_10_tutorial_toggle") > 0 )
		{
			ACS_Wisp_Level_10_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodItemTutorials', 'EHmodWispLevel10TutorialEnabled', "false");
			FactsRemove("acs_wisp_level_10_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_wisp_level_15_tutorial_toggle") > 0 )
		{
			ACS_Wisp_Level_15_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodItemTutorials', 'EHmodWispLevel15TutorialEnabled', "false");
			FactsRemove("acs_wisp_level_15_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_wisp_level_20_tutorial_toggle") > 0 )
		{
			ACS_Wisp_Level_20_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodItemTutorials', 'EHmodWispLevel20TutorialEnabled', "false");
			FactsRemove("acs_wisp_level_20_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_wisp_level_25_tutorial_toggle") > 0 )
		{
			ACS_Wisp_Level_25_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodItemTutorials', 'EHmodWispLevel25TutorialEnabled', "false");
			FactsRemove("acs_wisp_level_25_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_wolf_heart_tutorial_toggle") > 0 )
		{
			ACS_Wolf_Heart_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodItemTutorials', 'EHmodWolfHeartTutorialEnabled', "false");
			FactsRemove("acs_wolf_heart_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_vampire_necklace_tutorial_toggle") > 0 )
		{
			ACS_Vampire_Necklace_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodItemTutorials', 'EHmodVampireNecklaceTutorialEnabled', "false");
			FactsRemove("acs_vampire_necklace_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_pirate_amulet_tutorial_toggle") > 0 )
		{
			ACS_Pirate_Amulet_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodItemTutorials', 'EHmodPirateAmuletTutorialEnabled', "false");
			FactsRemove("acs_pirate_amulet_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_hood_and_mask_tutorial_toggle") > 0 )
		{
			ACS_Hood_And_Mask_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalFeaturesTutorials', 'EHmodHoodAndMaskTutorialEnabled', "false");
			FactsRemove("acs_hood_and_mask_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_parry_tutorial_toggle") > 0 )
		{
			ACS_Parry_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodCombatTutorials', 'EHmodParryTutorialEnabled', "false");
			FactsRemove("acs_parry_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_weapon_arts_tutorial_toggle") > 0 )
		{
			ACS_Weapon_Arts_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodCombatTutorials', 'EHmodWeaponArtsTutorialEnabled', "false");
			FactsRemove("acs_weapon_arts_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_bruxa_fang_tutorial_toggle") > 0 )
		{
			ACS_Bruxa_Fang_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodItemTutorials', 'EHmodBruxaFangTutorialEnabled', "false");
			FactsRemove("acs_bruxa_fang_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_vampire_ring_tutorial_toggle") > 0 )
		{
			ACS_Vampire_Ring_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodItemTutorials', 'EHmodVampireRingTutorialEnabled', "false");
			FactsRemove("acs_vampire_ring_tutorial_toggle");
		}
	
		if ( FactsQuerySum("acs_sneaking_tutorial_toggle") > 0 )
		{
			ACS_Sneaking_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodCombatTutorials', 'EHmodSneakingTutorialEnabled', "false");
			FactsRemove("acs_sneaking_tutorial_toggle");
		}

		if ( FactsQuerySum("acs_bow_of_artemis_tutorial_toggle") > 0 )
		{
			ACS_Bow_Of_Artemis_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodItemTutorials', 'EHmodBowOfArtemisTutorialEnabled', "false");
			FactsRemove("acs_bow_of_artemis_tutorial_toggle");
		}

		if ( FactsQuerySum("acs_crossbow_of_artemis_tutorial_toggle") > 0 )
		{
			ACS_Crossbow_Of_Artemis_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodItemTutorials', 'EHmodCrossbowOfArtemisTutorialEnabled', "false");
			FactsRemove("acs_crossbow_of_artemis_tutorial_toggle");
		}

		if ( FactsQuerySum("acs_toad_prince_venom_tutorial_toggle") > 0 )
		{
			ACS_Toad_Prince_Venom_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodItemTutorials', 'EHmodToadPrinceVenomTutorialEnabled', "false");
			FactsRemove("acs_toad_prince_venom_tutorial_toggle");
		}

		if ( FactsQuerySum("acs_hold_to_roll_tutorial_toggle") > 0 )
		{
			ACS_Hold_To_Roll_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodMovementTutorials', 'EHmodHoldToRollTutorialEnabled', "false");
			FactsRemove("acs_hold_to_roll_tutorial_toggle");
		}

		if ( FactsQuerySum("acs_red_miasmal_fragment_tutorial_toggle") > 0 )
		{
			ACS_Red_Miasmal_Fragment_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodItemTutorials', 'EHmodRedMiasmalFragmentTutorialEnabled', "false");
			FactsRemove("acs_red_miasmal_fragment_tutorial_toggle");
		}

		if ( FactsQuerySum("acs_night_vision_tutorial_toggle") > 0 )
		{
			ACS_Night_Vision_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodAdditionalFeaturesTutorials', 'EHmodNightVisionTutorialEnabled', "false");
			FactsRemove("acs_night_vision_tutorial_toggle");
		}

		if ( FactsQuerySum("acs_sharley_shard_tutorial_toggle") > 0 )
		{
			ACS_Sharley_Shard_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodItemTutorials', 'EHmodSharleyShardTutorialEnabled', "false");
			FactsRemove("acs_sharley_shard_tutorial_toggle");
		}

		if ( FactsQuerySum("acs_sign_combo_system_tutorial_toggle") > 0 )
		{
			ACS_Sign_Combo_System_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodCombatTutorials', 'EHmodSignComboSystemTutorialEnabled', "false");
			FactsRemove("acs_sign_combo_system_tutorial_toggle");
		}

		if ( FactsQuerySum("acs_kestral_skull_tutorial_toggle") > 0 )
		{
			ACS_Kestral_Skull_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodItemTutorials', 'EHmodKestralSkullTutorialEnabled', "false");
			FactsRemove("acs_kestral_skull_tutorial_toggle");
		}

		if ( FactsQuerySum("acs_phoenix_ashes_tutorial_toggle") > 0 )
		{
			ACS_Phoenix_Ashes_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('EHmodItemTutorials', 'EHmodPhoenixAshesTutorialEnabled', "false");
			FactsRemove("acs_phoenix_ashes_tutorial_toggle");
		}

	}

	latent function CameraLightsControl()
	{
		if (ACS_DisableBigCameraLights_Enabled())
		{
			if (theGame.GetInGameConfigWrapper().GetVarValue('EHmodVisualSettings', 'DisableBigCameraLights' ) != "true" )
			{
				theGame.GetInGameConfigWrapper().SetVarValue('EHmodVisualSettings', 'DisableBigCameraLights', "true");
			}
		}
		else
		{
			if (theGame.GetInGameConfigWrapper().GetVarValue('EHmodVisualSettings', 'DisableBigCameraLights' ) != "false" )
			{
				theGame.GetInGameConfigWrapper().SetVarValue('EHmodVisualSettings', 'DisableBigCameraLights', "false");
			}
		}

		if (ACS_DisableSmallCameraLights_Enabled())
		{
			if (theGame.GetInGameConfigWrapper().GetVarValue('EHmodVisualSettings', 'DisableSmallCameraLights' ) != "true" )
			{
				theGame.GetInGameConfigWrapper().SetVarValue('EHmodVisualSettings', 'DisableSmallCameraLights', "true");
			}
		}
		else
		{
			if (theGame.GetInGameConfigWrapper().GetVarValue('EHmodVisualSettings', 'DisableSmallCameraLights' ) != "false" )
			{
				theGame.GetInGameConfigWrapper().SetVarValue('EHmodVisualSettings', 'DisableSmallCameraLights', "false");
			}
		}

		if (ACS_DisableAllCameraLights_Enabled())
		{
			if (theGame.GetInGameConfigWrapper().GetVarValue('EHmodVisualSettings', 'DisableAllCameraLights' ) != "true" )
			{
				theGame.GetInGameConfigWrapper().SetVarValue('EHmodVisualSettings', 'DisableAllCameraLights', "true");
			}
		}
		else
		{
			if (theGame.GetInGameConfigWrapper().GetVarValue('EHmodVisualSettings', 'DisableAllCameraLights' ) != "false" )
			{
				theGame.GetInGameConfigWrapper().SetVarValue('EHmodVisualSettings', 'DisableAllCameraLights', "false");
			}
		}
	}
}