statemachine class cACS_Giant_Lightning_Strike_Single
{
    function Giant_Lightning_Strike_Single_Engage()
	{
		this.PushState('Giant_Lightning_Strike_Single_Engage');
	}
}

state Giant_Lightning_Strike_Single_Engage in cACS_Giant_Lightning_Strike_Single
{
	private var targetRotationNPC												: EulerAngles;
	private var actor															: CActor;
	private var lightning, lightning_2, markerNPC, vfxEnt						: CEntity;
	private var temp															: CEntityTemplate;
	private var i, count														: int;
	private var actorPos, spawnPos												: Vector;
	private var randAngle, randRange											: float;
	private var world															: CWorld;
	private var entPos															: Vector;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Giant_Lightning_Strike_Single();
	}
	
	entry function Giant_Lightning_Strike_Single()
	{
		GetWitcherPlayer().DrainStamina( ESAT_FixedValue, GetWitcherPlayer().GetStatMax( BCS_Stamina )/2, 1 );

		targetRotationNPC = actor.GetWorldRotation();
		targetRotationNPC.Yaw = RandRangeF(360,1);
		targetRotationNPC.Pitch = RandRangeF(45,-45);
		
		actor = (CActor)( GetWitcherPlayer().GetDisplayTarget() );
		
		if (!actor.HasBuff(EET_HeavyKnockdown)
		&& !actor.HasBuff(EET_Burning) )
		{
			vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_2\mutation_2_critical_force.w2ent", true ), actor.GetWorldPosition(), targetRotationNPC );
			vfxEnt.CreateAttachment( actor, , Vector( 0, 0, 1.5 ) );	
			vfxEnt.PlayEffectSingle('critical_quen');
			vfxEnt.DestroyAfter(2);
							
			lightning = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\gameplay\abilities\giant\giant_lightning_strike.w2ent", true ), actor.GetWorldPosition(), targetRotationNPC );
			lightning.PlayEffectSingle('pre_lightning');
			lightning.PlayEffectSingle('lightning');
			lightning.DestroyAfter(1.5);

			lightning_2 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "fx\quest\sq209\sq209_lightning_scene.w2ent", true ), actor.GetWorldPosition(), targetRotationNPC );
			lightning_2.PlayEffectSingle('lighgtning');
			lightning_2.DestroyAfter(1.5);
		
			actor.AddEffectDefault( EET_HeavyKnockdown, GetWitcherPlayer(), 'console' );

			actor.AddEffectDefault( EET_Burning, GetWitcherPlayer(), 'console' );

			if (actor.IsOnGround())
			{
				temp = (CEntityTemplate)LoadResourceAsync( 

				"dlc\ep1\data\fx\quest\q603\08_demo_dwarf\q603_08_fire_01.w2ent"
					
				, true );

				actorPos = actor.GetWorldPosition();
				
				count = 6;
					
				for( i = 0; i < count; i += 1 )
				{
					randRange = 2.5 + 2.5 * RandF();
					randAngle = 2 * Pi() * RandF();
					
					spawnPos.X = randRange * CosF( randAngle ) + actorPos.X;
					spawnPos.Y = randRange * SinF( randAngle ) + actorPos.Y;
					spawnPos.Z = actorPos.Z;
					
					markerNPC = theGame.CreateEntity( temp, ACSPlayerFixZAxis( spawnPos ), actor.GetWorldRotation() );

					markerNPC.PlayEffectSingle('explosion');
					markerNPC.StopEffect('explosion');

					markerNPC.DestroyAfter(20);
				}

				theGame.GetSurfacePostFX().AddSurfacePostFXGroup( ACSPlayerFixZAxis( actor.GetWorldPosition() ), 0.5f, 1.0f, 1.5f, 2.5f, 1);
			}
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class cACS_Lightning_Strike
{
    function ACS_Lightning_Strike_Engage()
	{
		this.PushState('ACS_Lightning_Strike_Engage');
	}

	function ACS_Lightning_Strike_Mult_Engage()
	{
		this.PushState('ACS_Lightning_Strike_Mult_Engage');
	}
}

state ACS_Lightning_Strike_Engage in cACS_Lightning_Strike
{
	var temp, temp_2, temp_3, temp_4, temp_5									: CEntityTemplate;
	var ent, ent_1, ent_2, ent_3, ent_4, ent_5									: CEntity;
	var i, count, count_2, j, k													: int;
	var playerPos, spawnPos, spawnPos2, posAdjusted, posAdjusted2, entPos		: Vector;
	var randAngle, randRange, randAngle_2, randRange_2, distance				: float;
	var adjustedRot, playerRot2													: EulerAngles;
	var actors    																: array<CActor>;
	var actor    																: CActor;
	var dmg																		: W3DamageAction;
	var world																	: CWorld;
	var damage 																	: float;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		ACS_Lightning_Strike_Entry();
	}
	
	entry function ACS_Lightning_Strike_Entry()
	{
		temp = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\fx\giant_lightning_strike.w2ent"
			
		, true );

		temp_2 = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\fx\custom_lightning.w2ent"
			
		, true );

		temp_3 = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\fx\custom_lightning_lights.w2ent"
			
		, true );

		temp_4 = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\fx\q603_08_fire_01.w2ent"
			
		, true );

		temp_5 = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\fx\acs_guiding_wind.w2ent"
			
		, true );

		playerPos = ACSPlayerFixZAxis(theCamera.GetCameraPosition() + theCamera.GetCameraDirection() * 20);

		adjustedRot = EulerAngles(0,0,0);

		adjustedRot.Yaw = RandRangeF(360,1);
		adjustedRot.Pitch = RandRangeF(22.5,-22.5);

		playerRot2 = EulerAngles(0,0,0);
		playerRot2.Yaw = RandRangeF(360,1);

		ent = theGame.CreateEntity( temp_3, playerPos, EulerAngles(0,0,0) );

		ent.PlayEffectSingle('lights');

		ent.DestroyAfter(1);
		
		count = RandRange(3,1);

		distance = RandRangeF(50,10);
			
		for( i = 0; i < count; i += 1 )
		{
			randRange = distance + distance * RandF();
			randAngle = 2 * Pi() * RandF();
			
			spawnPos.X = randRange * CosF( randAngle ) + playerPos.X;
			spawnPos.Y = randRange * SinF( randAngle ) + playerPos.Y;
			//spawnPos.Z = playerPos.Z;

			posAdjusted = ACSPlayerFixZAxis(spawnPos);

			ent_1 = theGame.CreateEntity( temp, posAdjusted, adjustedRot );

			ent_1.PlayEffectSingle('pre_lightning');
			ent_1.PlayEffectSingle('lightning');

			ent_1.DestroyAfter(10);



			ent_2 = theGame.CreateEntity( temp_2, posAdjusted, playerRot2 );

			ent_2.PlayEffectSingle('lighgtning');

			ent_2.DestroyAfter(10);



			ent_3 = theGame.CreateEntity( temp_2, posAdjusted, adjustedRot );

			ent_3.PlayEffectSingle('lighgtning');

			ent_3.DestroyAfter(10);


			theGame.GetSurfacePostFX().AddSurfacePostFXGroup( posAdjusted, 0.5f, 10.5f, 0.5f, 7.f, 1);


			count_2 = 12;

			for( j = 0; j < count_2; j += 1 )
			{
				randRange_2 = 2 + 2 * RandF();
				randAngle_2 = 2 * Pi() * RandF();
				
				spawnPos2.X = randRange_2 * CosF( randAngle_2 ) + posAdjusted.X;
				spawnPos2.Y = randRange_2 * SinF( randAngle_2 ) + posAdjusted.Y;
				//spawnPos2.Z = posAdjusted.Z;

				posAdjusted2 = ACSPlayerFixZAxis(spawnPos2);

				ent_4 = theGame.CreateEntity( temp_4, posAdjusted2, EulerAngles(0,0,0) );

				if (RandF() < 0.5)
				{
					ent_4.PlayEffectSingle('explosion');
					ent_4.StopEffect('explosion');
				}
				else
				{
					if (RandF() < 0.5)
					{
						ent_4.PlayEffectSingle('explosion_big');
						ent_4.StopEffect('explosion_big');
					}
					else
					{
						ent_4.PlayEffectSingle('explosion_medium');
						ent_4.StopEffect('explosion_medium');
					}
				}

				ent_4.DestroyAfter(20);
			}

			ent_5 = theGame.CreateEntity( temp_5, posAdjusted, adjustedRot );

			((CActor)ent_5).SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
			((CActor)ent_5).SetCanPlayHitAnim(false); 
			((CActor)ent_5).AddBuffImmunity_AllNegative('ACS_Lightning_Rabbit', true); 

			ent_5.DestroyAfter(3);

			actors.Clear();

			actors = ((CActor)ent_5).GetNPCsAndPlayersInRange( 5, 20, , FLAG_OnlyAliveActors);

			for( k = 0; k < actors.Size(); k += 1 )
			{
				actor = actors[k];
				
				if( actors.Size() > 0 )
				{	
					dmg = new W3DamageAction in theGame.damageMgr;

					dmg.Initialize(((CActor)ent_5), actor, ((CActor)ent_5), ((CActor)ent_5).GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
					
					dmg.SetProcessBuffsIfNoDamage(true);

					dmg.SetHitReactionType( EHRT_Heavy, true);

					dmg.AddEffectInfo( EET_Burning, 3 );

					if (((CActor)actor).UsesEssence())
					{
						damage = ((CActor)actor).GetStat( BCS_Essence ) * 0.125;
					}
					else if (((CActor)actor).UsesVitality())
					{
						damage = ((CActor)actor).GetStat( BCS_Vitality ) * 0.125;
					}

					if ( VecDistance2D( ent_5.GetWorldPosition(), actor.GetWorldPosition() ) > 0.5 )
					{
						damage -= damage * VecDistance2D( ent_5.GetWorldPosition(), actor.GetWorldPosition() ) * 0.1;
					}
	
					dmg.AddDamage( theGame.params.DAMAGE_NAME_ELEMENTAL, damage  );
						
					theGame.damageMgr.ProcessAction( dmg );
						
					delete dmg;	
				}
			}
		}

		//GetACSWatcher().RemoveTimer('Thunder_Sounds');
		//GetACSWatcher().AddTimer('Thunder_Sounds', 1, false);

		thePlayer.SoundEvent( "fx_amb_thunder_close" );

		thePlayer.SoundEvent( "qu_nml_103_lightning" );
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state ACS_Lightning_Strike_Mult_Engage in cACS_Lightning_Strike
{
	var temp, temp_2, temp_3, temp_4, temp_5									: CEntityTemplate;
	var ent, ent_1, ent_2, ent_3, ent_4, ent_5									: CEntity;
	var i, count, count_2, j, k													: int;
	var playerPos, spawnPos, spawnPos2, posAdjusted, posAdjusted2, entPos		: Vector;
	var randAngle, randRange, randAngle_2, randRange_2, distance				: float;
	var adjustedRot, playerRot2													: EulerAngles;
	var actors    																: array<CActor>;
	var actor    																: CActor;
	var dmg																		: W3DamageAction;
	var world																	: CWorld;
	var damage 																	: float;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		ACS_Lightning_Strike_Mult_Entry();
	}

	entry function ACS_Lightning_Strike_Mult_Entry()
	{
		temp = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\fx\giant_lightning_strike.w2ent"
			
		, true );

		temp_2 = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\fx\custom_lightning.w2ent"
			
		, true );

		temp_3 = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\fx\custom_lightning_lights.w2ent"
			
		, true );

		temp_4 = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\fx\q603_08_fire_01.w2ent"
			
		, true );

		temp_5 = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\fx\acs_guiding_wind.w2ent"
			
		, true );

		playerPos = theCamera.GetCameraPosition() + theCamera.GetCameraDirection() * 20;

		adjustedRot = EulerAngles(0,0,0);

		adjustedRot.Yaw = RandRangeF(360,1);
		adjustedRot.Pitch = RandRangeF(22.5,-22.5);

		playerRot2 = EulerAngles(0,0,0);
		playerRot2.Yaw = RandRangeF(360,1);

		ent = theGame.CreateEntity( temp_3, playerPos, EulerAngles(0,0,0) );

		ent.PlayEffectSingle('lights');

		ent.DestroyAfter(1);
		
		count = 5;

		distance = RandRangeF(50,10);
			
		for( i = 0; i < count; i += 1 )
		{
			randRange = distance + distance * RandF();
			randAngle = 2 * Pi() * RandF();
			
			spawnPos.X = randRange * CosF( randAngle ) + playerPos.X;
			spawnPos.Y = randRange * SinF( randAngle ) + playerPos.Y;
			//spawnPos.Z = playerPos.Z;

			posAdjusted = ACSPlayerFixZAxis(spawnPos);

			ent_1 = theGame.CreateEntity( temp, posAdjusted, adjustedRot );

			ent_1.PlayEffectSingle('pre_lightning');
			ent_1.PlayEffectSingle('lightning');

			ent_1.DestroyAfter(10);


			ent_2 = theGame.CreateEntity( temp_2, posAdjusted, playerRot2 );

			ent_2.PlayEffectSingle('lighgtning');

			ent_2.DestroyAfter(10);


			ent_3 = theGame.CreateEntity( temp_2, posAdjusted, adjustedRot );

			ent_3.PlayEffectSingle('lighgtning');

			ent_3.DestroyAfter(10);


			theGame.GetSurfacePostFX().AddSurfacePostFXGroup( posAdjusted, 0.5f, 10.5f, 0.5f, 7.f, 1);

			count_2 = 12;

			for( j = 0; j < count_2; j += 1 )
			{
				randRange_2 = 2 + 2 * RandF();
				randAngle_2 = 2 * Pi() * RandF();
				
				spawnPos2.X = randRange_2 * CosF( randAngle_2 ) + posAdjusted.X;
				spawnPos2.Y = randRange_2 * SinF( randAngle_2 ) + posAdjusted.Y;
				spawnPos2.Z = posAdjusted.Z;

				posAdjusted2 = ACSPlayerFixZAxis(spawnPos2);

				ent_4 = theGame.CreateEntity( temp_4, posAdjusted2, EulerAngles(0,0,0) );

				if (RandF() < 0.5)
				{
					ent_4.PlayEffectSingle('explosion');
					ent_4.StopEffect('explosion');
				}
				else
				{
					if (RandF() < 0.5)
					{
						ent_4.PlayEffectSingle('explosion_big');
						ent_4.StopEffect('explosion_big');
					}
					else
					{
						ent_4.PlayEffectSingle('explosion_medium');
						ent_4.StopEffect('explosion_medium');
					}
				}

				ent_4.DestroyAfter(20);
			}


			ent_5 = theGame.CreateEntity( temp_5, posAdjusted, adjustedRot );

			((CActor)ent_5).SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
			((CActor)ent_5).SetCanPlayHitAnim(false); 
			((CActor)ent_5).AddBuffImmunity_AllNegative('ACS_Lightning_Rabbit', true); 

			ent_5.DestroyAfter(3);

			actors.Clear();

			actors = ((CActor)ent_5).GetNPCsAndPlayersInRange( 5, 20, , FLAG_OnlyAliveActors);

			for( k = 0; k < actors.Size(); k += 1 )
			{
				actor = actors[k];
				
				if( actors.Size() > 0 )
				{	
					dmg = new W3DamageAction in theGame.damageMgr;

					dmg.Initialize(((CActor)ent_5), actor, ((CActor)ent_5), ((CActor)ent_5).GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
					
					dmg.SetProcessBuffsIfNoDamage(true);

					dmg.SetHitReactionType( EHRT_Heavy, true);

					dmg.AddEffectInfo( EET_Burning, 3 );

					if (((CActor)actor).UsesEssence())
					{
						damage = ((CActor)actor).GetStat( BCS_Essence ) * 0.125;
					}
					else if (((CActor)actor).UsesVitality())
					{
						damage = ((CActor)actor).GetStat( BCS_Vitality ) * 0.125;
					}

					if ( VecDistance2D( ent_5.GetWorldPosition(), actor.GetWorldPosition() ) > 0.5 )
					{
						damage -= damage * VecDistance2D( ent_5.GetWorldPosition(), actor.GetWorldPosition() ) * 0.1;
					}
	
					dmg.AddDamage( theGame.params.DAMAGE_NAME_ELEMENTAL, damage  );
						
					theGame.damageMgr.ProcessAction( dmg );
						
					delete dmg;	
				}
			}
		}

		//GetACSWatcher().RemoveTimer('Thunder_Sounds');
		//GetACSWatcher().AddTimer('Thunder_Sounds', 1, false);

		thePlayer.SoundEvent( "fx_amb_thunder_close" );

		thePlayer.SoundEvent( "qu_nml_103_lightning" );
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class cACS_Marker
{
    function ACS_Marker_Fire_Engage()
	{
		this.PushState('ACS_Marker_Fire_Engage');
	}

	function ACS_Marker_Lightning_Engage()
	{
		this.PushState('ACS_Marker_Lightning_Engage');
	}

	function ACS_Marker_Smoke_Engage()
	{
		this.PushState('ACS_Marker_Smoke_Engage');
	}
}

state ACS_Marker_Smoke_Engage in cACS_Marker
{
	private var markerNPC, markerNPC_2											: CEntity;
	private var temp															: CEntityTemplate;
	private var i, count														: int;
	private var playerPos, spawnPos												: Vector;
	private var randAngle, randRange											: float;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		ACS_Marker_Smoke_Entry();
	}
	
	entry function ACS_Marker_Smoke_Entry()
	{
		temp = (CEntityTemplate)LoadResourceAsync( 

		"dlc\ep1\data\fx\quest\q604\604_11_cellar\ground_smoke_ent.w2ent"
			
		, true );

		playerPos = GetWitcherPlayer().GetWorldPosition();

		markerNPC = theGame.CreateEntity( temp, ACSPlayerFixZAxis( playerPos ), GetWitcherPlayer().GetWorldRotation() );

		markerNPC.PlayEffectSingle('ground_smoke');
		markerNPC.DestroyAfter(3);

		markerNPC_2 = theGame.CreateEntity( temp, ACSPlayerFixZAxis( playerPos ), GetWitcherPlayer().GetWorldRotation() );

		markerNPC_2.CreateAttachment( GetWitcherPlayer(), , Vector( 0, 0, -1 ) );	

		markerNPC_2.PlayEffectSingle('ground_smoke');
		markerNPC_2.DestroyAfter(3.5);
		
		/*
		count = 3;
			
		for( i = 0; i < count; i += 1 )
		{
			randRange = 1.5 + 1.5 * RandF();
			randAngle = 0.5 * Pi() * RandF();
			
			spawnPos.X = randRange * CosF( randAngle ) + playerPos.X;
			spawnPos.Y = randRange * SinF( randAngle ) + playerPos.Y;
			spawnPos.Z = playerPos.Z;
			
			markerNPC_2 = theGame.CreateEntity( temp, ACSPlayerFixZAxis( spawnPos ), GetWitcherPlayer().GetWorldRotation() );

			markerNPC_2.PlayEffectSingle('ground_smoke');
			markerNPC_2.DestroyAfter(7);
		}
		*/

	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state ACS_Marker_Fire_Engage in cACS_Marker
{
	private var markerNPC, markerNPC_2											: CEntity;
	private var temp															: CEntityTemplate;
	private var i, count														: int;
	private var playerPos, playerPosLower, spawnPos								: Vector;
	private var randAngle, randRange											: float;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		ACS_Marker_Fire_Entry();
	}
	
	entry function ACS_Marker_Fire_Entry()
	{
		playerPosLower = GetWitcherPlayer().GetWorldPosition();
		playerPosLower.Z -= 6;

		markerNPC = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

			//"dlc\bob\data\fx\quest\q701\q701_02_roof_fire.w2ent"

			"dlc\ep1\data\fx\quest\q603\08_demo_dwarf\q603_hut_fire.w2ent"
			
			, true ), playerPosLower, EulerAngles(0,0,0) );

		markerNPC.PlayEffectSingle('fire_01');
		//markerNPC.PlayEffectSingle('fire_02');
		markerNPC.DestroyAfter(5);

		temp = (CEntityTemplate)LoadResourceAsync( 

		"dlc\ep1\data\fx\quest\q603\08_demo_dwarf\q603_08_fire_01.w2ent"
			
		, true );

		playerPos = GetWitcherPlayer().GetWorldPosition();
		
		count = 6;
			
		for( i = 0; i < count; i += 1 )
		{
			randRange = 2.5 + 2.5 * RandF();
			randAngle = 2 * Pi() * RandF();
			
			spawnPos.X = randRange * CosF( randAngle ) + playerPos.X;
			spawnPos.Y = randRange * SinF( randAngle ) + playerPos.Y;
			spawnPos.Z = playerPos.Z;
			
			markerNPC_2 = theGame.CreateEntity( temp, ACSPlayerFixZAxis( spawnPos ), GetWitcherPlayer().GetWorldRotation() );

			markerNPC_2.PlayEffectSingle('explosion');
			markerNPC_2.StopEffect('explosion');
			markerNPC_2.DestroyAfter(20);
		}

		theGame.GetSurfacePostFX().AddSurfacePostFXGroup( ACSPlayerFixZAxis( GetWitcherPlayer().GetWorldPosition() ), 0.5f, 1.0f, 5.5f, 5.f, 1);
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state ACS_Marker_Lightning_Engage in cACS_Marker
{
	private var markerNPC														: CEntity;
	private var temp															: CEntityTemplate;
	private var i, count														: int;
	private var playerPos, spawnPos												: Vector;
	private var randAngle, randRange											: float;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		ACS_Marker_Lightning_Entry();
	}

	entry function ACS_Marker_Lightning_Entry()
	{
		/*
		markerNPC = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
			"dlc\ep1\data\fx\quest\q603\08_demo_dwarf\q603_08_fire_01.w2ent"
			//"dlc\ep1\data\fx\quest\q603\08_demo_dwarf\q603_hut_fire.w2ent"
			, true ), ACSPlayerFixZAxis( GetWitcherPlayer().GetWorldPosition() ), EulerAngles(0,0,0) );
		markerNPC.PlayEffectSingle('explosion');
		//markerNPC.PlayEffectSingle('fire_01');
		markerNPC.StopAllEffectsAfter(3);
		markerNPC.DestroyAfter(3);
		*/

		temp = (CEntityTemplate)LoadResourceAsync( 

		"dlc\ep1\data\fx\quest\q603\08_demo_dwarf\q603_08_fire_01.w2ent"
			
		, true );

		playerPos = GetWitcherPlayer().GetWorldPosition();
		
		count = 6;
			
		for( i = 0; i < count; i += 1 )
		{
			randRange = 2.5 + 2.5 * RandF();
			randAngle = 2 * Pi() * RandF();
			
			spawnPos.X = randRange * CosF( randAngle ) + playerPos.X;
			spawnPos.Y = randRange * SinF( randAngle ) + playerPos.Y;
			spawnPos.Z = playerPos.Z;
			
			markerNPC = theGame.CreateEntity( temp, ACSPlayerFixZAxis( spawnPos ), GetWitcherPlayer().GetWorldRotation() );

			markerNPC.PlayEffectSingle('explosion');
			markerNPC.StopEffect('explosion');
			markerNPC.DestroyAfter(20);
		}

		theGame.GetSurfacePostFX().AddSurfacePostFXGroup( ACSPlayerFixZAxis( GetWitcherPlayer().GetWorldPosition() ), 0.5f, 1.0f, 1.5f, 5.f, 1);
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_Giant_Lightning_Strike_Mult()
{
	var vACS_Giant_Lightning_Strike_Mult : cACS_Giant_Lightning_Strike_Mult;
	vACS_Giant_Lightning_Strike_Mult = new cACS_Giant_Lightning_Strike_Mult in theGame;
			
	vACS_Giant_Lightning_Strike_Mult.Giant_Lightning_Strike_Mult_Engage();
}

statemachine class cACS_Giant_Lightning_Strike_Mult
{
    function Giant_Lightning_Strike_Mult_Engage()
	{
		this.PushState('Giant_Lightning_Strike_Mult_Engage');
	}
}

state Giant_Lightning_Strike_Mult_Engage in cACS_Giant_Lightning_Strike_Mult
{
	private var npc     														: CNewNPC;
	private var actors    														: array<CActor>;
	private var lightning, markerNPC, vfxEnt									: CEntity;
	private var targetRotationNPC												: EulerAngles;
	private var temp															: CEntityTemplate;
	private var i, count														: int;
	private var actorPos, spawnPos												: Vector;
	private var randAngle, randRange											: float;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Giant_Lightning_Strike_Mult();
	}
	
	entry function Giant_Lightning_Strike_Mult()
	{
		//actors = GetActorsInRange(GetWitcherPlayer(), 55, 20);
		actors.Clear();

		actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 55, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

		for( i = 0; i < actors.Size(); i += 1 )
		{
			npc = (CNewNPC)actors[i];
			
			if( actors.Size() > 0 )
			{		
				if( ACS_AttitudeCheck ( npc ) && npc.IsAlive() )
				{
					if( VecDistance2D( npc.GetWorldPosition(), GetWitcherPlayer().GetWorldPosition() ) <= 8 ) 
					{
						if( RandF() < 0.75 ) 
						{
							if (!npc.HasBuff(EET_HeavyKnockdown))
							{
								npc.AddEffectDefault( EET_HeavyKnockdown, npc, 'console' );
							}
								
							if (!npc.HasBuff(EET_Burning))
							{
								npc.AddEffectDefault( EET_Burning, npc, 'console' );
							}

							targetRotationNPC = npc.GetWorldRotation();
							targetRotationNPC.Yaw = RandRangeF(360,1);
							targetRotationNPC.Pitch = RandRangeF(45,-45);

							vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_2\mutation_2_critical_force.w2ent", true ), npc.GetWorldPosition(), targetRotationNPC );
							vfxEnt.CreateAttachment( npc, , Vector( 0, 0, 1.5 ) );	
							vfxEnt.PlayEffectSingle('critical_quen');
							vfxEnt.DestroyAfter(1.5);

							lightning = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\gameplay\abilities\giant\giant_lightning_strike.w2ent", true ), npc.GetWorldPosition(), targetRotationNPC );
							lightning.PlayEffectSingle('pre_lightning');
							lightning.PlayEffectSingle('lightning');
							lightning.DestroyAfter(1.5);
							
							if (npc.IsOnGround())
							{
								temp = (CEntityTemplate)LoadResourceAsync( 

								"dlc\ep1\data\fx\quest\q603\08_demo_dwarf\q603_08_fire_01.w2ent"
									
								, true );

								actorPos = npc.GetWorldPosition();
								
								count = 6;
									
								for( i = 0; i < count; i += 1 )
								{
									randRange = 2.5 + 2.5 * RandF();
									randAngle = 2 * Pi() * RandF();
									
									spawnPos.X = randRange * CosF( randAngle ) + actorPos.X;
									spawnPos.Y = randRange * SinF( randAngle ) + actorPos.Y;
									spawnPos.Z = actorPos.Z;
									
									markerNPC = theGame.CreateEntity( temp, ACSPlayerFixZAxis( spawnPos ), npc.GetWorldRotation() );

									markerNPC.PlayEffectSingle('explosion');
									markerNPC.StopEffect('explosion');
									markerNPC.DestroyAfter(20);
								}

								theGame.GetSurfacePostFX().AddSurfacePostFXGroup( ACSPlayerFixZAxis( npc.GetWorldPosition() ), 0.5f, 1.0f, 1.5f, 5.f, 1);
							}
						}
					}
				}
			}
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_Yrden_Lightning_LVL_1()
{
	var vACS_Yrden_Lightning_LVL_1 : cACS_Yrden_Lightning_LVL_1;
	vACS_Yrden_Lightning_LVL_1 = new cACS_Yrden_Lightning_LVL_1 in theGame;
			
	vACS_Yrden_Lightning_LVL_1.ACS_Yrden_Lightning_LVL_1_Engage();
}

statemachine class cACS_Yrden_Lightning_LVL_1
{
    function ACS_Yrden_Lightning_LVL_1_Engage()
	{
		this.PushState('ACS_Yrden_Lightning_LVL_1_Engage');
	}
}

state ACS_Yrden_Lightning_LVL_1_Engage in cACS_Yrden_Lightning_LVL_1
{
	private var npc     							: CNewNPC;
	private var actors    							: array<CActor>;
	private var i         							: int;
	private var lightning, markerNPC, vfxEnt		: CEntity;
	private var targetRotationNPC					: EulerAngles;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Yrden_Lightning();
	}
	
	entry function Yrden_Lightning()
	{
		//actors = GetActorsInRange(GetWitcherPlayer(), 2.5, 3);

		actors.Clear();

		actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 2.5, 5, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

		for( i = 0; i < actors.Size(); i += 1 )
		{
			npc = (CNewNPC)actors[i];
			
			if( actors.Size() > 0 )
			{									
				targetRotationNPC = npc.GetWorldRotation();
				targetRotationNPC.Yaw = RandRangeF(360,1);
				targetRotationNPC.Pitch = RandRangeF(45,-45);

				vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_2\mutation_2_critical_force.w2ent", true ), npc.GetWorldPosition(), targetRotationNPC );
				vfxEnt.CreateAttachment( npc, , Vector( 0, 0, 1.5 ) );	
				vfxEnt.PlayEffectSingle('critical_quen');
				vfxEnt.DestroyAfter(1.5);

				lightning = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\gameplay\abilities\giant\giant_lightning_strike.w2ent", true ), npc.GetWorldPosition(), targetRotationNPC );
				//lightning.PlayEffectSingle('pre_lightning');
				lightning.PlayEffectSingle('lightning');
				lightning.DestroyAfter(1.5);
							
				if (npc.IsOnGround())
				{
					markerNPC = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "fx\quest\q403\meteorite\q403_marker.w2ent", true ), ACSPlayerFixZAxis( npc.GetWorldPosition() ), EulerAngles(0,0,0) );
					markerNPC.StopAllEffectsAfter(1.5);
					markerNPC.DestroyAfter(1.5);
				}
			}
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_Yrden_Lightning_LVL_2()
{
	var vACS_Yrden_Lightning_LVL_2 : cACS_Yrden_Lightning_LVL_2;
	vACS_Yrden_Lightning_LVL_2 = new cACS_Yrden_Lightning_LVL_2 in theGame;
			
	vACS_Yrden_Lightning_LVL_2.ACS_Yrden_Lightning_LVL_2_Engage();
}

statemachine class cACS_Yrden_Lightning_LVL_2
{
    function ACS_Yrden_Lightning_LVL_2_Engage()
	{
		this.PushState('ACS_Yrden_Lightning_LVL_2_Engage');
	}
}

state ACS_Yrden_Lightning_LVL_2_Engage in cACS_Yrden_Lightning_LVL_2
{
	private var npc     							: CNewNPC;
	private var actors    							: array<CActor>;
	private var i         							: int;
	private var lightning, markerNPC, vfxEnt		: CEntity;
	private var targetRotationNPC					: EulerAngles;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Yrden_Lightning();
	}

	entry function Yrden_Lightning()
	{
		//actors = GetActorsInRange(GetWitcherPlayer(), 5, 20);

		actors.Clear();

		actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

		for( i = 0; i < actors.Size(); i += 1 )
		{
			npc = (CNewNPC)actors[i];
			
			if( actors.Size() > 0 )
			{									
				targetRotationNPC = npc.GetWorldRotation();
				targetRotationNPC.Yaw = RandRangeF(360,1);
				targetRotationNPC.Pitch = RandRangeF(45,-45);

				vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_2\mutation_2_critical_force.w2ent", true ), npc.GetWorldPosition(), targetRotationNPC );
				vfxEnt.CreateAttachment( npc, , Vector( 0, 0, 1.5 ) );	
				vfxEnt.PlayEffectSingle('critical_quen');
				vfxEnt.DestroyAfter(1.5);

				lightning = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\gameplay\abilities\giant\giant_lightning_strike.w2ent", true ), npc.GetWorldPosition(), targetRotationNPC );
				//lightning.PlayEffectSingle('pre_lightning');
				lightning.PlayEffectSingle('lightning');
				lightning.DestroyAfter(1.5);
							
				if (npc.IsOnGround())
				{
					markerNPC = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "fx\quest\q403\meteorite\q403_marker.w2ent", true ), ACSPlayerFixZAxis( npc.GetWorldPosition() ), EulerAngles(0,0,0) );
					markerNPC.StopAllEffectsAfter(1.5);
					markerNPC.DestroyAfter(1.5);
				}
			}
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_Lightning_Area()
{
	var vACS_Lightning_Area : cACS_Lightning_Area;
	vACS_Lightning_Area = new cACS_Lightning_Area in theGame;
			
	vACS_Lightning_Area.ACS_Lightning_Area_Engage();
}

statemachine class cACS_Lightning_Area
{
    function ACS_Lightning_Area_Engage()
	{
		this.PushState('ACS_Lightning_Area_Engage');
	}
}

state ACS_Lightning_Area_Engage in cACS_Lightning_Area
{
	private var lightning1, lightning2 				: CEntity;
	private var targetPositionNPC					: Vector;
	private var targetRotationNPC					: EulerAngles;
	private var actor								: CActor;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Lightning_Area();
	}
	
	entry function Lightning_Area()
	{
		actor = (CActor)( GetWitcherPlayer().GetDisplayTarget() );
		
		lightning1 = (CEntity)theGame.GetEntityByTag( 'lightning_area_1' );
		lightning1.Destroy();
		
		if (actor.IsOnGround())
		{
			lightning2 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\quests\main_quests\quest_files\q704b_fairy_tale\entities\giant\q704_ft_lightning_area.w2ent", true ), ACSPlayerFixZAxis( actor.GetWorldPosition() ), actor.GetWorldRotation() );
			lightning2.PlayEffectSingle('lightning_area');
			lightning2.AddTag('lightning_area_1');
			lightning2.DestroyAfter(5);
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_Rock_Pillar()
{
	var vACS_Rock_Pillar : cACS_Rock_Pillar;
	vACS_Rock_Pillar = new cACS_Rock_Pillar in theGame;
			
	vACS_Rock_Pillar.ACS_Rock_Pillar_Engage();
}

statemachine class cACS_Rock_Pillar
{
    function ACS_Rock_Pillar_Engage()
	{
		this.PushState('ACS_Rock_Pillar_Engage');
	}
}

state ACS_Rock_Pillar_Engage in cACS_Rock_Pillar
{
	private var actor										: CActor;
	private var npc     									: CNewNPC;
	private var actors    									: array<CActor>;
	private var rock_pillar_temp							: CEntityTemplate;
	private var targetRotationActor							: EulerAngles;
	private var markerNPC									: CEntity;
	private var actorPos, spawnPos							: Vector;
	private var randAngle, randRange						: float;
	private var i, PillarCount								: int;	
	private var params 										: SCustomEffectParams;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Rock_Pillar();
	}
	
	entry function Rock_Pillar()
	{
		actor = (CActor)( GetWitcherPlayer().GetDisplayTarget() );

		rock_pillar_temp = (CEntityTemplate)LoadResourceAsync( "gameplay\abilities\elemental\elemental_dao_pillar.w2ent", true );
		actorPos = actor.GetWorldPosition();
			
		PillarCount = 10;

		targetRotationActor = actor.GetWorldRotation();
			
		for( i = 0; i < PillarCount; i += 1 )
		{
			randRange = 5 + 5 * RandF();
			randAngle = 2 * Pi() * RandF();
			
			spawnPos.X = randRange * CosF( randAngle ) + actorPos.X;
			spawnPos.Y = randRange * SinF( randAngle ) + actorPos.Y;
			spawnPos.Z = actorPos.Z;

			targetRotationActor.Yaw = RandRangeF(360,1);
			targetRotationActor.Pitch = RandRangeF(45,-45);
			
			if (actor.IsOnGround())
			{
				markerNPC = (CEntity)theGame.CreateEntity( rock_pillar_temp, ACSPlayerFixZAxis(spawnPos), targetRotationActor );
				markerNPC.PlayEffectSingle('marker_fx');
				markerNPC.PlayEffectSingle('circle_stone');
				markerNPC.DestroyAfter(5);
			}
		}

		if (actor.IsOnGround())
		{
			//actors = GetActorsInRange(actor, 6, 20);

			actors.Clear();

			actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 6, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

			for( i = 0; i < actors.Size(); i += 1 )
			{
				npc = (CNewNPC)actors[i];
				
				if( actors.Size() > 0 )
				{		
					if( ACS_AttitudeCheck ( npc ) && npc.IsAlive() )
					{
						if (!npc.HasBuff(EET_Knockdown))
						{
							params.effectType = EET_Knockdown;
							params.creator = thePlayer;
							params.sourceName = "ACS_Rock_Pillar";
							params.duration = 1;

							npc.AddEffectCustom( params );	
						}
					}
				}
			}
		}

		GetWitcherPlayer().PlayEffectSingle('stomp');
		GetWitcherPlayer().StopEffect('stomp');

		GetWitcherPlayer().PlayEffectSingle('earthquake_fx');
		GetWitcherPlayer().StopEffect('earthquake_fx');
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class cACS_Ice_Spikes
{
    function ACS_Ice_Spikes_Engage()
	{
		this.PushState('ACS_Ice_Spikes_Engage');
	}

	function ACS_Ice_Blast_Engage()
	{
		this.PushState('ACS_Ice_Blast_Engage');
	}

	function ACS_Red_Lightning_Engage()
	{
		this.PushState('ACS_Red_Lightning_Engage');
	}

	function ACS_Red_Lightning_Single_Target_Engage()
	{
		this.PushState('ACS_Red_Lightning_Single_Target_Engage');
	}

	function ACS_Ice_Bats_Engage()
	{
		this.PushState('ACS_Ice_Bats_Engage');
	}
}

state ACS_Ice_Blast_Engage in cACS_Ice_Spikes
{
	var ent         			: CEntity;
	var actor					: CActor;
	var npc     				: CNewNPC;
	var actors    				: array<CActor>;
	var i						: int;	
	var params 					: SCustomEffectParams;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Ice_Blast();
	}
	
	entry function Ice_Blast()
	{
		ent = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\entities\other\fx_ent.w2ent"

		, true ), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );

		ent.CreateAttachment(thePlayer,, Vector( 0, 0, 1 ), EulerAngles(0,0,0) );

		ent.PlayEffect('ice_blast');
		ent.PlayEffect('ice_blast_light');

		ent.DestroyAfter(3);

		actors.Clear();

		actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 6, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

		for( i = 0; i < actors.Size(); i += 1 )
		{
			npc = (CNewNPC)actors[i];
			
			if( actors.Size() > 0 )
			{		
				if (!npc.HasBuff(EET_Frozen))
				{
					params.effectType = EET_Frozen;
					params.creator = thePlayer;
					params.sourceName = "ACS_Ice_Blast";
					params.duration = 1;

					npc.AddEffectCustom( params );	
				}
			}
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state ACS_Ice_Spikes_Engage in cACS_Ice_Spikes
{
	private var actor										: CActor;
	private var npc     									: CNewNPC;
	private var actors    									: array<CActor>;
	private var rock_pillar_temp							: CEntityTemplate;
	private var targetRotationActor							: EulerAngles;
	private var markerNPC									: CEntity;
	private var actorPos, spawnPos							: Vector;
	private var randAngle, randRange						: float;
	private var i, PillarCount								: int;	
	private var params 										: SCustomEffectParams;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Ice_Spikes();
	}
	
	entry function Ice_Spikes()
	{
		actor = GetWitcherPlayer();

		rock_pillar_temp = (CEntityTemplate)LoadResourceAsync( "fx\gameplay\throwing\ice_spikes_large.w2ent", true );
		actorPos = actor.GetWorldPosition();

		theGame.GetSurfacePostFX().AddSurfacePostFXGroup( TraceFloor( actorPos ), 0.5f, 7, 0.5f, 20.f, 0);
			
		PillarCount = 10;

		targetRotationActor = actor.GetWorldRotation();
			
		for( i = 0; i < PillarCount; i += 1 )
		{
			randRange = 2.5 + 2.5 * RandF();
			randAngle = 2 * Pi() * RandF();
			
			spawnPos.X = randRange * CosF( randAngle ) + actorPos.X;
			spawnPos.Y = randRange * SinF( randAngle ) + actorPos.Y;
			spawnPos.Z = actorPos.Z;

			targetRotationActor.Yaw = RandRangeF(360,1);
			targetRotationActor.Pitch = RandRangeF(45,-45);
			
			if (actor.IsOnGround())
			{
				markerNPC = (CEntity)theGame.CreateEntity( rock_pillar_temp, ACSPlayerFixZAxis(spawnPos), targetRotationActor );
				markerNPC.PlayEffectSingle('spikes');
				markerNPC.DestroyAfter(10);
			}
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state ACS_Red_Lightning_Engage in cACS_Ice_Spikes
{
	var temp, temp_2, temp_3, temp_4, temp_5									: CEntityTemplate;
	var ent, ent_1, ent_2, ent_3, ent_4, ent_5									: CEntity;
	var i, count, count_2, j, k													: int;
	var playerPos, spawnPos, spawnPos2, posAdjusted, posAdjusted2, entPos		: Vector;
	var randAngle, randRange, randAngle_2, randRange_2, distance				: float;
	var adjustedRot, playerRot2													: EulerAngles;
	var params 																	: SCustomEffectParams;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Lightning_Strike_Entry();
	}
	
	entry function Lightning_Strike_Entry()
	{
		temp = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\fx\everstorm_lightning_strike.w2ent"
			
		, true );

		temp_2 = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\fx\everstorm_lightning_strike_secondary.w2ent"
			
		, true );

		temp_4 = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\fx\everstorm_ground_fire.w2ent"
			
		, true );

		if (RandF() < 0.75)
		{
			if (thePlayer.GetTarget())
			{
				playerPos = ACSPlayerFixZAxis(((CActor)(thePlayer.GetTarget())).GetWorldPosition());

				if (!((CActor)(thePlayer.GetTarget())).HasBuff(EET_Burning))
				{
					params.effectType = EET_Burning;
					params.creator = thePlayer;
					params.sourceName = "ACS_Red_Lightning";
					params.duration = 1;

					((CActor)(thePlayer.GetTarget())).AddEffectCustom( params );	
				}
			}
			else
			{
				playerPos = ACSPlayerFixZAxis(theCamera.GetCameraPosition() + theCamera.GetCameraDirection() * RandRangeF(20, 10) + theCamera.GetCameraRight() * RandRangeF(10, -10));
			}
		}
		else
		{
			playerPos = ACSPlayerFixZAxis(theCamera.GetCameraPosition() + theCamera.GetCameraDirection() * RandRangeF(20, 10) + theCamera.GetCameraRight() * RandRangeF(10, -10));
		}

		adjustedRot = EulerAngles(0,0,0);

		adjustedRot.Yaw = RandRangeF(360,1);
		adjustedRot.Pitch = RandRangeF(22.5,-22.5);

		playerRot2 = EulerAngles(0,0,0);
		playerRot2.Yaw = RandRangeF(360,1);

			
		posAdjusted = ACSPlayerFixZAxis(playerPos);

		ent_1 = theGame.CreateEntity( temp, posAdjusted, adjustedRot );

		ent_1.PlayEffectSingle('pre_lightning');
		ent_1.PlayEffectSingle('lightning');

		ent_1.DestroyAfter(10);


		ent_2 = theGame.CreateEntity( temp_2, posAdjusted, playerRot2 );

		ent_2.PlayEffectSingle('lighgtning');

		ent_2.DestroyAfter(10);

		theGame.GetSurfacePostFX().AddSurfacePostFXGroup( posAdjusted, 0.5f, 10.5f, 0.5f, 7.f, 1);

		count_2 = 12;

		for( j = 0; j < count_2; j += 1 )
		{
			randRange_2 = 2 + 2 * RandF();
			randAngle_2 = 2 * Pi() * RandF();
			
			spawnPos2.X = randRange_2 * CosF( randAngle_2 ) + posAdjusted.X;
			spawnPos2.Y = randRange_2 * SinF( randAngle_2 ) + posAdjusted.Y;
			//spawnPos2.Z = posAdjusted.Z;

			posAdjusted2 = ACSPlayerFixZAxis(spawnPos2);

			ent_4 = theGame.CreateEntity( temp_4, posAdjusted2, EulerAngles(0,0,0) );

			if (RandF() < 0.5)
			{
				ent_4.PlayEffectSingle('explosion');
				ent_4.StopEffect('explosion');
			}
			else
			{
				if (RandF() < 0.5)
				{
					ent_4.PlayEffectSingle('explosion_big');
					ent_4.StopEffect('explosion_big');
				}
				else
				{
					ent_4.PlayEffectSingle('explosion_medium');
					ent_4.StopEffect('explosion_medium');
				}
			}

			ent_4.DestroyAfter(20);
		}
		
		thePlayer.SoundEvent( "fx_amb_thunder_close" );

		thePlayer.SoundEvent( "qu_nml_103_lightning" );
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state ACS_Red_Lightning_Single_Target_Engage in cACS_Ice_Spikes
{
	var temp, temp_2, temp_3, temp_4, temp_5									: CEntityTemplate;
	var ent, ent_1, ent_2, ent_3, ent_4, ent_5									: CEntity;
	var i, count, count_2, j, k													: int;
	var playerPos, spawnPos, spawnPos2, posAdjusted, posAdjusted2, entPos		: Vector;
	var randAngle, randRange, randAngle_2, randRange_2, distance				: float;
	var adjustedRot, playerRot2													: EulerAngles;
	var params 																	: SCustomEffectParams;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Lightning_Strike_Single_Entry();
	}
	
	entry function Lightning_Strike_Single_Entry()
	{
		temp = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\fx\everstorm_lightning_strike.w2ent"
			
		, true );

		temp_2 = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\fx\everstorm_lightning_strike_secondary.w2ent"
			
		, true );

		temp_4 = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\fx\everstorm_ground_fire.w2ent"
			
		, true );

		if (thePlayer.GetTarget())
		{
			playerPos = ACSPlayerFixZAxis(((CActor)(thePlayer.GetTarget())).GetWorldPosition());

			if (!((CActor)(thePlayer.GetTarget())).HasBuff(EET_Burning))
			{
				params.effectType = EET_Burning;
				params.creator = thePlayer;
				params.sourceName = "ACS_Red_Lightning";
				params.duration = 1;

				((CActor)(thePlayer.GetTarget())).AddEffectCustom( params );	
			}
		}

		adjustedRot = EulerAngles(0,0,0);

		adjustedRot.Yaw = RandRangeF(360,1);
		adjustedRot.Pitch = RandRangeF(22.5,-22.5);

		playerRot2 = EulerAngles(0,0,0);
		playerRot2.Yaw = RandRangeF(360,1);

			
		posAdjusted = ACSPlayerFixZAxis(playerPos);

		ent_1 = theGame.CreateEntity( temp, posAdjusted, adjustedRot );

		ent_1.PlayEffectSingle('pre_lightning');
		ent_1.PlayEffectSingle('lightning');

		ent_1.DestroyAfter(10);


		ent_2 = theGame.CreateEntity( temp_2, posAdjusted, playerRot2 );

		ent_2.PlayEffectSingle('lighgtning');

		ent_2.DestroyAfter(10);

		theGame.GetSurfacePostFX().AddSurfacePostFXGroup( posAdjusted, 0.5f, 10.5f, 0.5f, 7.f, 1);

		count_2 = 12;

		for( j = 0; j < count_2; j += 1 )
		{
			randRange_2 = 2 + 2 * RandF();
			randAngle_2 = 2 * Pi() * RandF();
			
			spawnPos2.X = randRange_2 * CosF( randAngle_2 ) + posAdjusted.X;
			spawnPos2.Y = randRange_2 * SinF( randAngle_2 ) + posAdjusted.Y;
			//spawnPos2.Z = posAdjusted.Z;

			posAdjusted2 = ACSPlayerFixZAxis(spawnPos2);

			ent_4 = theGame.CreateEntity( temp_4, posAdjusted2, EulerAngles(0,0,0) );

			if (RandF() < 0.5)
			{
				ent_4.PlayEffectSingle('explosion');
				ent_4.StopEffect('explosion');
			}
			else
			{
				if (RandF() < 0.5)
				{
					ent_4.PlayEffectSingle('explosion_big');
					ent_4.StopEffect('explosion_big');
				}
				else
				{
					ent_4.PlayEffectSingle('explosion_medium');
					ent_4.StopEffect('explosion_medium');
				}
			}

			ent_4.DestroyAfter(20);
		}
		
		thePlayer.SoundEvent( "fx_amb_thunder_close" );

		thePlayer.SoundEvent( "qu_nml_103_lightning" );
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state ACS_Ice_Bats_Engage in cACS_Ice_Spikes
{
	private var initpos					: Vector;
	private var bat_proj 				: W3BatSwarmAttack;
	private var ice_proj 				: W3ACSIceStaffIceSpike;
	private var actor, pActor       	: CActor;
	private var targetPosition			: Vector;
	private var meshcomp 				: CComponent;
	private var h 						: float;
	private var movementAdjustor		: CMovementAdjustor;
	private var ticket 					: SMovementAdjustmentRequestTicket;
	
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Bats_Fire();
	}
	
	entry function Bats_Fire()
	{
		actor = (CActor)( GetWitcherPlayer().GetDisplayTarget() );

		movementAdjustor = GetWitcherPlayer().GetMovingAgentComponent().GetMovementAdjustor();
		
		ticket = movementAdjustor.GetRequest( 'acs_ice_bats_rotate');
		
		movementAdjustor.CancelByName( 'acs_ice_bats_rotate' );
		
		movementAdjustor.CancelAll();
		
		ticket = movementAdjustor.CreateNewRequest( 'acs_ice_bats_rotate' );
		
		movementAdjustor.AdjustmentDuration( ticket, 0.25 );
		
		movementAdjustor.MaxRotationAdjustmentSpeed( ticket, 50000 );
		
		movementAdjustor.MaxLocationAdjustmentDistance( ticket, true, 0 );
		
		movementAdjustor.MaxLocationAdjustmentSpeed( ticket, 50000 );

		if (!theGame.IsDialogOrCutscenePlaying() 
		&& !GetWitcherPlayer().IsInNonGameplayCutscene() 
		&& !GetWitcherPlayer().IsInGameplayScene()
		&& !GetWitcherPlayer().IsUsingHorse()
		&& !GetWitcherPlayer().IsUsingVehicle()
		)
		{
			if( ACS_AttitudeCheck ( actor ) && GetWitcherPlayer().IsInCombat() && actor.IsAlive() )
			{	
				movementAdjustor.RotateTowards( ticket, actor );
			}
			else
			{
				movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );
			}

			GetACSWatcher().PlayerPlayAnimation( 'taunt_down_001_ACS' );
		}

		BatsProjectile();
		IceProjectile();

		GetWitcherPlayer().SoundEvent("monster_dettlaff_monster_combat_swarm");
		GetWitcherPlayer().SoundEvent("Stop_monster_dettlaff_monster_combat_swarm_delay");
	}
	
	latent function BatsProjectile()
	{	
		if( ACS_AttitudeCheck ( actor ) && GetWitcherPlayer().IsInCombat() && actor.IsAlive() )
		{	
			initpos = GetWitcherPlayer().GetWorldPosition();				
			initpos.Z += 3;
						
			targetPosition = actor.PredictWorldPosition( 0.7 );
			targetPosition.Z += 1.5;
				
			bat_proj = (W3BatSwarmAttack)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\acs_bat_swarm_attack_2.w2ent", true ), initpos, thePlayer.GetWorldRotation() );
			bat_proj.Init(thePlayer);
			bat_proj.PlayEffectSingle( 'trail' );
			bat_proj.PlayEffectSingle( 'venom' );
			bat_proj.AddTag('ACS_Transformation_Vampire_Monster_Swarm_Proj');
			bat_proj.ShootProjectileAtPosition( 0, 20, targetPosition, 500 );
			bat_proj.DestroyAfter(7);
		}		
		else
		{
			initpos = GetWitcherPlayer().GetWorldPosition();				
			initpos.Z += 3;
								
			targetPosition = theCamera.GetCameraPosition() + theCamera.GetCameraDirection() * 10;
			targetPosition.Z += 1;

			bat_proj = (W3BatSwarmAttack)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\acs_bat_swarm_attack_2.w2ent", true ), initpos, thePlayer.GetWorldRotation() );
			bat_proj.Init(thePlayer);
			bat_proj.PlayEffectSingle( 'trail' );
			bat_proj.PlayEffectSingle( 'venom' );
			bat_proj.AddTag('ACS_Transformation_Vampire_Monster_Swarm_Proj');
			bat_proj.ShootProjectileAtPosition( 0, 20, targetPosition, 500 );
			bat_proj.DestroyAfter(7);
		}
	}

	latent function IceProjectile()
	{	
		if( ACS_AttitudeCheck ( actor ) && GetWitcherPlayer().IsInCombat() && actor.IsAlive() )
		{				
			targetPosition = actor.PredictWorldPosition( 0.7 );
			targetPosition.Z += 1.1;
				
			ice_proj = (W3ACSIceStaffIceSpike)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\ice_staff_ice_spike.w2ent", true ), targetPosition, thePlayer.GetWorldRotation() );

			ice_proj.AddTag('ACS_Ice_Staff_Ice_Spike_No_Delay');

		}		
		else
		{
			targetPosition = theCamera.GetCameraPosition() + theCamera.GetCameraDirection() * 10;
			targetPosition.Z += 1;

			ice_proj = (W3ACSIceStaffIceSpike)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\ice_staff_ice_spike.w2ent", true ), targetPosition, thePlayer.GetWorldRotation() );

			ice_proj.AddTag('ACS_Ice_Staff_Ice_Spike_No_Delay');
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_AOE_Ice_Spear_LVL_1()
{
	var vAOE_Ice_Spear_LVL_1 : cAOE_Ice_Spear_LVL_1;
	vAOE_Ice_Spear_LVL_1 = new cAOE_Ice_Spear_LVL_1 in theGame;
			
	vAOE_Ice_Spear_LVL_1.AOE_Ice_Spear_LVL_1_Engage();
}

statemachine class cAOE_Ice_Spear_LVL_1
{
    function AOE_Ice_Spear_LVL_1_Engage()
	{
		this.PushState('AOE_Ice_Spear_LVL_1_Engage');
	}
}

state AOE_Ice_Spear_LVL_1_Engage in cAOE_Ice_Spear_LVL_1
{
	private var actortarget																																					: CActor;
	private var actors    																																					: array<CActor>;
	private var i         																																					: int;
	private var rock_pillar_temp																																			: CEntityTemplate;
	private var proj_1	 																																					: W3ACSIceSpearProjectile;
	private var initpos, targetPositionNPC																																	: Vector;
	private var targetRotationNPC, targetRotationPlayer																														: EulerAngles;
	private var dmg																																							: W3DamageAction;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Ice_Spear();
	}

	entry function Ice_Spear()
	{
		actors.Clear();

		actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 2.5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);
		for( i = 0; i < actors.Size(); i += 1 )
		{
			actortarget = (CActor)actors[i];
				
			initpos = actortarget.GetWorldPosition();			
			initpos.Z += 7;
					
			targetPositionNPC = actortarget.PredictWorldPosition(0.35f);
			targetPositionNPC.Z += 1.1;
					
			proj_1 = (W3ACSIceSpearProjectile)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\wh_icespear.w2ent", true ), initpos );
							
			proj_1.Init(GetWitcherPlayer());
			proj_1.PlayEffectSingle('fire_fx');
			proj_1.PlayEffectSingle('explode');
			proj_1.ShootProjectileAtPosition( 0, 10 + RandRange(10,0), targetPositionNPC, 500 );
			proj_1.DestroyAfter(5);
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_AOE_Ice_Spear_LVL_2()
{
	var vAOE_Ice_Spear_LVL_2 : cAOE_Ice_Spear_LVL_2;
	vAOE_Ice_Spear_LVL_2 = new cAOE_Ice_Spear_LVL_2 in theGame;
			
	vAOE_Ice_Spear_LVL_2.AOE_Ice_Spear_LVL_2_Engage();
}

statemachine class cAOE_Ice_Spear_LVL_2
{
    function AOE_Ice_Spear_LVL_2_Engage()
	{
		this.PushState('AOE_Ice_Spear_LVL_2_Engage');
	}
}

state AOE_Ice_Spear_LVL_2_Engage in cAOE_Ice_Spear_LVL_2
{
	private var actortarget																																					: CActor;
	private var actors    																																					: array<CActor>;
	private var i         																																					: int;
	private var rock_pillar_temp																																			: CEntityTemplate;
	private var proj_1	 																																					: W3ACSIceSpearProjectile;
	private var initpos, targetPositionNPC																																	: Vector;
	private var targetRotationNPC, targetRotationPlayer																														: EulerAngles;
	private var dmg																																							: W3DamageAction;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Ice_Spear();
	}
	
	entry function Ice_Spear()
	{
		actors.Clear();

		actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);
		for( i = 0; i < actors.Size(); i += 1 )
		{
			actortarget = (CActor)actors[i];
				
			initpos = actortarget.GetWorldPosition();			
			initpos.Z += 7;
					
			targetPositionNPC = actortarget.PredictWorldPosition(0.35f);
			targetPositionNPC.Z += 1.1;
					
			proj_1 = (W3ACSIceSpearProjectile)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\wh_icespear.w2ent", true ), initpos );
							
			proj_1.Init(GetWitcherPlayer());
			proj_1.PlayEffectSingle('fire_fx');
			proj_1.PlayEffectSingle('explode');
			proj_1.ShootProjectileAtPosition( 0, 10 + RandRange(10,0), targetPositionNPC, 500 );
			proj_1.DestroyAfter(5);
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_AOE_Freeze_LVL_1()
{
	var vACS_AOE_Freeze_LVL_1 : cACS_AOE_Freeze_LVL_1;
	vACS_AOE_Freeze_LVL_1 = new cACS_AOE_Freeze_LVL_1 in theGame;
			
	vACS_AOE_Freeze_LVL_1.ACS_AOE_Freeze_LVL_1_Engage();
}

statemachine class cACS_AOE_Freeze_LVL_1
{
    function ACS_AOE_Freeze_LVL_1_Engage()
	{
		this.PushState('ACS_AOE_Freeze_LVL_1_Engage');
	}
}

state ACS_AOE_Freeze_LVL_1_Engage in cACS_AOE_Freeze_LVL_1
{
	private var actortarget																																					: CActor;
	private var actors    																																					: array<CActor>;
	private var i         																																					: int;
	private var markerNPC																																					: CEntity;
	private var initpos, targetPositionNPC																																	: Vector;
	private var targetRotationNPC, targetRotationPlayer																														: EulerAngles;
	private var dmg																																							: W3DamageAction;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Freeze();
	}
	
	entry function Freeze()
	{
		actors.Clear();

		actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 2.5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);
		for( i = 0; i < actors.Size(); i += 1 )
		{
			actortarget = (CActor)actors[i];
					
			markerNPC = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "fx\characters\canaris\canaris_groundrift.w2ent", true ), ACSPlayerFixZAxis (actortarget.GetWorldPosition()), actortarget.GetWorldRotation() );
			markerNPC.PlayEffectSingle('ground_fx');
			markerNPC.DestroyAfter(3);
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_AOE_Freeze_LVL_2()
{
	var vACS_AOE_Freeze_LVL_2 : cACS_AOE_Freeze_LVL_2;
	vACS_AOE_Freeze_LVL_2 = new cACS_AOE_Freeze_LVL_2 in theGame;
			
	vACS_AOE_Freeze_LVL_2.ACS_AOE_Freeze_LVL_2_Engage();
}

statemachine class cACS_AOE_Freeze_LVL_2
{
    function ACS_AOE_Freeze_LVL_2_Engage()
	{
		this.PushState('ACS_AOE_Freeze_LVL_2_Engage');
	}
}

state ACS_AOE_Freeze_LVL_2_Engage in cACS_AOE_Freeze_LVL_2
{
	private var actortarget																																					: CActor;
	private var actors    																																					: array<CActor>;
	private var i         																																					: int;
	private var markerNPC																																					: CEntity;
	private var initpos, targetPositionNPC																																	: Vector;
	private var targetRotationNPC, targetRotationPlayer																														: EulerAngles;
	private var dmg																																							: W3DamageAction;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Freeze();
	}
	
	entry function Freeze()
	{
		actors.Clear();

		actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);
		for( i = 0; i < actors.Size(); i += 1 )
		{
			actortarget = (CActor)actors[i];
					
			markerNPC = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "fx\characters\canaris\canaris_groundrift.w2ent", true ), ACSPlayerFixZAxis (actortarget.GetWorldPosition()), actortarget.GetWorldRotation() );
			markerNPC.PlayEffectSingle('ground_fx');
			markerNPC.DestroyAfter(3);
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_AOE_Sandstorm_LVL_1()
{
	var vACS_AOE_Sandstorm_LVL_1 : cACS_AOE_Sandstorm_LVL_1;
	vACS_AOE_Sandstorm_LVL_1 = new cACS_AOE_Sandstorm_LVL_1 in theGame;
			
	vACS_AOE_Sandstorm_LVL_1.ACS_AOE_Sandstorm_LVL_1_Engage();
}

statemachine class cACS_AOE_Sandstorm_LVL_1
{
    function ACS_AOE_Sandstorm_LVL_1_Engage()
	{
		this.PushState('ACS_AOE_Sandstorm_LVL_1_Engage');
	}
}

state ACS_AOE_Sandstorm_LVL_1_Engage in cACS_AOE_Sandstorm_LVL_1
{
	private var actortarget																																					: CActor;
	private var actors    																																					: array<CActor>;
	private var i         																																					: int;
	private var markerNPC																																					: CEntity;
	private var initpos, targetPositionNPC																																	: Vector;
	private var targetRotationNPC, targetRotationPlayer																														: EulerAngles;
	private var dmg																																							: W3DamageAction;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Sandstorm();
	}
	
	entry function Sandstorm()
	{
		actors.Clear();

		actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 2.5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);
		for( i = 0; i < actors.Size(); i += 1 )
		{
			actortarget = (CActor)actors[i];
			
			targetPositionNPC = actortarget.GetWorldPosition();
			targetPositionNPC.Z += 1.5;

			markerNPC = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\ep1\data\gameplay\abilities\mage\sand_gusts.w2ent", true ), targetPositionNPC, actortarget.GetWorldRotation() );
			
			if( RandF() < 0.5 ) 
			{
				markerNPC.PlayEffectSingle('diagonal_up_right');
				markerNPC.PlayEffectSingle('blood_diagonal_up_right');
				markerNPC.PlayEffectSingle('warning_up_right');
			}
			else
			{
				markerNPC.PlayEffectSingle('diagonal_up_left');
				markerNPC.PlayEffectSingle('blood_diagonal_up_left');
				markerNPC.PlayEffectSingle('warning_up_left');
			}
			
			markerNPC.DestroyAfter(3);
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_AOE_Sandstorm_LVL_2()
{
	var vACS_AOE_Sandstorm_LVL_2 : cACS_AOE_Sandstorm_LVL_2;
	vACS_AOE_Sandstorm_LVL_2 = new cACS_AOE_Sandstorm_LVL_2 in theGame;
			
	vACS_AOE_Sandstorm_LVL_2.ACS_AOE_Sandstorm_LVL_2_Engage();
}

statemachine class cACS_AOE_Sandstorm_LVL_2
{
    function ACS_AOE_Sandstorm_LVL_2_Engage()
	{
		this.PushState('ACS_AOE_Sandstorm_LVL_2_Engage');
	}
}

state ACS_AOE_Sandstorm_LVL_2_Engage in cACS_AOE_Sandstorm_LVL_2
{
	private var actortarget																																					: CActor;
	private var actors    																																					: array<CActor>;
	private var i         																																					: int;
	private var markerNPC																																					: CEntity;
	private var initpos, targetPositionNPC																																	: Vector;
	private var targetRotationNPC, targetRotationPlayer																														: EulerAngles;
	private var dmg																																							: W3DamageAction;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Sandstorm();
	}
	
	entry function Sandstorm()
	{
		actors.Clear();

		actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);
		for( i = 0; i < actors.Size(); i += 1 )
		{
			actortarget = (CActor)actors[i];
			
			targetPositionNPC = actortarget.GetWorldPosition();
			targetPositionNPC.Z += 1.5;

			markerNPC = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\ep1\data\gameplay\abilities\mage\sand_gusts.w2ent", true ), targetPositionNPC, actortarget.GetWorldRotation() );
			
			if( RandF() < 0.5 ) 
			{
				markerNPC.PlayEffectSingle('diagonal_up_right');
				markerNPC.PlayEffectSingle('blood_diagonal_up_right');
				markerNPC.PlayEffectSingle('warning_up_right');
			}
			else
			{
				markerNPC.PlayEffectSingle('diagonal_up_left');
				markerNPC.PlayEffectSingle('blood_diagonal_up_left');
				markerNPC.PlayEffectSingle('warning_up_left');
			}
			
			markerNPC.DestroyAfter(3);
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_AOE_Sandpillar_LVL_1()
{
	var vACS_AOE_Sandpillar_LVL_1 : cACS_AOE_Sandpillar_LVL_1;
	vACS_AOE_Sandpillar_LVL_1 = new cACS_AOE_Sandpillar_LVL_1 in theGame;
			
	vACS_AOE_Sandpillar_LVL_1.ACS_AOE_Sandpillar_LVL_1_Engage();
}

statemachine class cACS_AOE_Sandpillar_LVL_1
{
    function ACS_AOE_Sandpillar_LVL_1_Engage()
	{
		this.PushState('ACS_AOE_Sandpillar_LVL_1_Engage');
	}
}

state ACS_AOE_Sandpillar_LVL_1_Engage in cACS_AOE_Sandpillar_LVL_1
{
	private var actortarget																																					: CActor;
	private var actors    																																					: array<CActor>;
	private var i         																																					: int;
	private var markerNPC																																					: CEntity;
	private var initpos, targetPositionNPC																																	: Vector;
	private var targetRotationNPC, targetRotationPlayer																														: EulerAngles;
	private var dmg																																							: W3DamageAction;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Sandpillar();
	}
	
	entry function Sandpillar()
	{
		actors.Clear();

		actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 2.5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);
		for( i = 0; i < actors.Size(); i += 1 )
		{
			actortarget = (CActor)actors[i];
			
			targetPositionNPC = actortarget.GetWorldPosition();
			
			markerNPC = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\ep1\data\gameplay\abilities\mage\sand_gusts.w2ent", true ), targetPositionNPC, actortarget.GetWorldRotation() );
			markerNPC.PlayEffectSingle('up');
			markerNPC.PlayEffectSingle('blood_up');
			markerNPC.PlayEffectSingle('warning_up');
			
			markerNPC.DestroyAfter(3);
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_AOE_Sandpillar_LVL_2()
{
	var vACS_AOE_Sandpillar_LVL_2 : cACS_AOE_Sandpillar_LVL_2;
	vACS_AOE_Sandpillar_LVL_2 = new cACS_AOE_Sandpillar_LVL_2 in theGame;
			
	vACS_AOE_Sandpillar_LVL_2.ACS_AOE_Sandpillar_LVL_2_Engage();
}

statemachine class cACS_AOE_Sandpillar_LVL_2
{
    function ACS_AOE_Sandpillar_LVL_2_Engage()
	{
		this.PushState('ACS_AOE_Sandpillar_LVL_2_Engage');
	}
}

state ACS_AOE_Sandpillar_LVL_2_Engage in cACS_AOE_Sandpillar_LVL_2
{
	private var actortarget																																					: CActor;
	private var actors    																																					: array<CActor>;
	private var i         																																					: int;
	private var markerNPC																																					: CEntity;
	private var initpos, targetPositionNPC																																	: Vector;
	private var targetRotationNPC, targetRotationPlayer																														: EulerAngles;
	private var dmg																																							: W3DamageAction;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Sandpillar();
	}

	entry function Sandpillar()
	{
		actors.Clear();

		actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);
		for( i = 0; i < actors.Size(); i += 1 )
		{
			actortarget = (CActor)actors[i];
			
			targetPositionNPC = actortarget.GetWorldPosition();
			
			markerNPC = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\ep1\data\gameplay\abilities\mage\sand_gusts.w2ent", true ), targetPositionNPC, actortarget.GetWorldRotation() );
			markerNPC.PlayEffectSingle('up');
			markerNPC.PlayEffectSingle('blood_up');
			markerNPC.PlayEffectSingle('warning_up');
			
			markerNPC.DestroyAfter(3);
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_AOE_Waterarc_LVL_1()
{
	var vACS_AOE_Waterarc_LVL_1 : cACS_AOE_Waterarc_LVL_1;
	vACS_AOE_Waterarc_LVL_1 = new cACS_AOE_Waterarc_LVL_1 in theGame;
			
	vACS_AOE_Waterarc_LVL_1.ACS_AOE_Waterarc_LVL_1_Engage();
}

statemachine class cACS_AOE_Waterarc_LVL_1
{
    function ACS_AOE_Waterarc_LVL_1_Engage()
	{
		this.PushState('ACS_AOE_Waterarc_LVL_1_Engage');
	}
}

state ACS_AOE_Waterarc_LVL_1_Engage in cACS_AOE_Waterarc_LVL_1
{
	private var actortarget																																					: CActor;
	private var actors    																																					: array<CActor>;
	private var i         																																					: int;
	private var markerNPC																																					: CEntity;
	private var initpos, targetPositionNPC																																	: Vector;
	private var targetRotationNPC, targetRotationPlayer																														: EulerAngles;
	private var dmg																																							: W3DamageAction;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Waterarc();
	}
	
	entry function Waterarc()
	{
		actors.Clear();

		actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 2.5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);
		for( i = 0; i < actors.Size(); i += 1 )
		{
			actortarget = (CActor)actors[i];
			
			targetPositionNPC = actortarget.GetWorldPosition();
			targetPositionNPC.Z += 1.5;

			markerNPC = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\gameplay\abilities\water_mage\sand_gusts_bob.w2ent", true ), targetPositionNPC, actortarget.GetWorldRotation() );
			
			if( RandF() < 0.5 ) 
			{
				markerNPC.PlayEffectSingle('diagonal_up_right');
				markerNPC.PlayEffectSingle('blood_diagonal_up_right');
				markerNPC.PlayEffectSingle('warning_up_right');
			}
			else
			{
				markerNPC.PlayEffectSingle('diagonal_up_left');
				markerNPC.PlayEffectSingle('blood_diagonal_up_left');
				markerNPC.PlayEffectSingle('warning_up_left');
			}
			
			markerNPC.DestroyAfter(3);
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_AOE_Waterarc_LVL_2()
{
	var vACS_AOE_Waterarc_LVL_2 : cACS_AOE_Waterarc_LVL_2;
	vACS_AOE_Waterarc_LVL_2 = new cACS_AOE_Waterarc_LVL_2 in theGame;
			
	vACS_AOE_Waterarc_LVL_2.ACS_AOE_Waterarc_LVL_2_Engage();
}

statemachine class cACS_AOE_Waterarc_LVL_2
{
    function ACS_AOE_Waterarc_LVL_2_Engage()
	{
		this.PushState('ACS_AOE_Waterarc_LVL_2_Engage');
	}
}

state ACS_AOE_Waterarc_LVL_2_Engage in cACS_AOE_Waterarc_LVL_2
{
	private var actortarget																																					: CActor;
	private var actors    																																					: array<CActor>;
	private var i         																																					: int;
	private var markerNPC																																					: CEntity;
	private var initpos, targetPositionNPC																																	: Vector;
	private var targetRotationNPC, targetRotationPlayer																														: EulerAngles;
	private var dmg																																							: W3DamageAction;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Waterarc();
	}
	
	entry function Waterarc()
	{
		actors.Clear();

		actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);
		for( i = 0; i < actors.Size(); i += 1 )
		{
			actortarget = (CActor)actors[i];
			
			targetPositionNPC = actortarget.GetWorldPosition();
			targetPositionNPC.Z += 1.5;

			markerNPC = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\gameplay\abilities\water_mage\sand_gusts_bob.w2ent", true ), targetPositionNPC, actortarget.GetWorldRotation() );
			
			if( RandF() < 0.5 ) 
			{
				markerNPC.PlayEffectSingle('diagonal_up_right');
				markerNPC.PlayEffectSingle('blood_diagonal_up_right');
				markerNPC.PlayEffectSingle('warning_up_right');
			}
			else
			{
				markerNPC.PlayEffectSingle('diagonal_up_left');
				markerNPC.PlayEffectSingle('blood_diagonal_up_left');
				markerNPC.PlayEffectSingle('warning_up_left');
			}
			
			markerNPC.DestroyAfter(3);
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_AOE_Waterpillar_LVL_1()
{
	var vACS_AOE_Waterpillar_LVL_1 : cACS_AOE_Waterpillar_LVL_1;
	vACS_AOE_Waterpillar_LVL_1 = new cACS_AOE_Waterpillar_LVL_1 in theGame;
			
	vACS_AOE_Waterpillar_LVL_1.ACS_AOE_Waterpillar_LVL_1_Engage();
}

statemachine class cACS_AOE_Waterpillar_LVL_1
{
    function ACS_AOE_Waterpillar_LVL_1_Engage()
	{
		this.PushState('ACS_AOE_Waterpillar_LVL_1_Engage');
	}
}

state ACS_AOE_Waterpillar_LVL_1_Engage in cACS_AOE_Waterpillar_LVL_1
{
	private var actortarget																																					: CActor;
	private var actors    																																					: array<CActor>;
	private var i         																																					: int;
	private var markerNPC																																					: CEntity;
	private var initpos, targetPositionNPC																																	: Vector;
	private var targetRotationNPC, targetRotationPlayer																														: EulerAngles;
	private var dmg																																							: W3DamageAction;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Waterpillar();
	}
	
	entry function Waterpillar()
	{
		actors.Clear();

		actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 2.5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);
		for( i = 0; i < actors.Size(); i += 1 )
		{
			actortarget = (CActor)actors[i];
			
			targetPositionNPC = actortarget.GetWorldPosition();
			
			markerNPC = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\gameplay\abilities\water_mage\sand_gusts_bob.w2ent", true ), targetPositionNPC, actortarget.GetWorldRotation() );
			markerNPC.PlayEffectSingle('up');
			markerNPC.PlayEffectSingle('blood_up');
			markerNPC.PlayEffectSingle('warning_up');

			if( RandF() < 0.5 ) 
			{
				markerNPC.PlayEffectSingle('diagonal_up_right');
				markerNPC.PlayEffectSingle('blood_diagonal_up_right');
				markerNPC.PlayEffectSingle('warning_up_right');
			}
			else
			{
				markerNPC.PlayEffectSingle('diagonal_up_left');
				markerNPC.PlayEffectSingle('blood_diagonal_up_left');
				markerNPC.PlayEffectSingle('warning_up_left');
			}
			
			markerNPC.DestroyAfter(3);
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_AOE_Waterpillar_LVL_2()
{
	var vACS_AOE_Waterpillar_LVL_2 : cACS_AOE_Waterpillar_LVL_2;
	vACS_AOE_Waterpillar_LVL_2 = new cACS_AOE_Waterpillar_LVL_2 in theGame;
			
	vACS_AOE_Waterpillar_LVL_2.ACS_AOE_Waterpillar_LVL_2_Engage();
}

statemachine class cACS_AOE_Waterpillar_LVL_2
{
    function ACS_AOE_Waterpillar_LVL_2_Engage()
	{
		this.PushState('ACS_AOE_Waterpillar_LVL_2_Engage');
	}
}

state ACS_AOE_Waterpillar_LVL_2_Engage in cACS_AOE_Waterpillar_LVL_2
{
	private var actortarget																																					: CActor;
	private var actors    																																					: array<CActor>;
	private var i         																																					: int;
	private var markerNPC																																					: CEntity;
	private var initpos, targetPositionNPC																																	: Vector;
	private var targetRotationNPC, targetRotationPlayer																														: EulerAngles;
	private var dmg																																							: W3DamageAction;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Waterpillar();
	}
	
	entry function Waterpillar()
	{
		actors.Clear();

		actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);
		for( i = 0; i < actors.Size(); i += 1 )
		{
			actortarget = (CActor)actors[i];
			
			targetPositionNPC = actortarget.GetWorldPosition();
			
			markerNPC = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\gameplay\abilities\water_mage\sand_gusts_bob.w2ent", true ), targetPositionNPC, actortarget.GetWorldRotation() );
			markerNPC.PlayEffectSingle('up');
			markerNPC.PlayEffectSingle('blood_up');
			markerNPC.PlayEffectSingle('warning_up');

			if( RandF() < 0.5 ) 
			{
				markerNPC.PlayEffectSingle('diagonal_up_right');
				markerNPC.PlayEffectSingle('blood_diagonal_up_right');
				markerNPC.PlayEffectSingle('warning_up_right');
			}
			else
			{
				markerNPC.PlayEffectSingle('diagonal_up_left');
				markerNPC.PlayEffectSingle('blood_diagonal_up_left');
				markerNPC.PlayEffectSingle('warning_up_left');
			}
			
			markerNPC.DestroyAfter(3);
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_AOE_Bloodarc_LVL_1()
{
	var vACS_AOE_Bloodarc_LVL_1 : cACS_AOE_Bloodarc_LVL_1;
	vACS_AOE_Bloodarc_LVL_1 = new cACS_AOE_Bloodarc_LVL_1 in theGame;
			
	vACS_AOE_Bloodarc_LVL_1.ACS_AOE_Bloodarc_LVL_1_Engage();
}

statemachine class cACS_AOE_Bloodarc_LVL_1
{
    function ACS_AOE_Bloodarc_LVL_1_Engage()
	{
		this.PushState('ACS_AOE_Bloodarc_LVL_1_Engage');
	}
}

state ACS_AOE_Bloodarc_LVL_1_Engage in cACS_AOE_Bloodarc_LVL_1
{
	private var actortarget																																					: CActor;
	private var actors    																																					: array<CActor>;
	private var i         																																					: int;
	private var markerNPC																																					: CEntity;
	private var initpos, targetPositionNPC																																	: Vector;
	private var targetRotationNPC, targetRotationPlayer																														: EulerAngles;
	private var dmg																																							: W3DamageAction;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Bloodarc();
	}
	
	entry function Bloodarc()
	{
		actors.Clear();

		actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 2.5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);
		for( i = 0; i < actors.Size(); i += 1 )
		{
			actortarget = (CActor)actors[i];
			
			targetPositionNPC = actortarget.GetWorldPosition();
			targetPositionNPC.Z -= 0.5;

			markerNPC = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\gameplay\abilities\water_mage\sand_gusts_bob.w2ent", true ), targetPositionNPC, actortarget.GetWorldRotation() );
			
			markerNPC.PlayEffectSingle('blood_diagonal_up_right');

			markerNPC.PlayEffectSingle('blood_diagonal_up_left');

			markerNPC.PlayEffectSingle('blood_up');

			markerNPC.PlayEffectSingle('blood_diagonal_up_right');

			markerNPC.PlayEffectSingle('blood_diagonal_up_left');

			markerNPC.PlayEffectSingle('blood_up');

			markerNPC.PlayEffectSingle('blood_diagonal_up_right');

			markerNPC.PlayEffectSingle('blood_diagonal_up_left');

			markerNPC.PlayEffectSingle('blood_up');

			markerNPC.PlayEffectSingle('blood_diagonal_up_right');

			markerNPC.PlayEffectSingle('blood_diagonal_up_left');

			markerNPC.PlayEffectSingle('blood_up');

			markerNPC.PlayEffectSingle('blood_diagonal_up_right');

			markerNPC.PlayEffectSingle('blood_diagonal_up_left');

			markerNPC.PlayEffectSingle('blood_up');
			
			markerNPC.DestroyAfter(3);
		}

		GetWitcherPlayer().SoundEvent("cmb_play_dismemberment_gore");

		GetWitcherPlayer().SoundEvent("monster_dettlaff_monster_vein_hit_blood");

		GetWitcherPlayer().SoundEvent("monster_dettlaff_monster_combat_geralt_deathblow_01");

		GetWitcherPlayer().SoundEvent("monster_dettlaff_monster_combat_geralt_deathblow_02");
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_AOE_Bloodarc_LVL_2()
{
	var vACS_AOE_Bloodarc_LVL_2 : cACS_AOE_Bloodarc_LVL_2;
	vACS_AOE_Bloodarc_LVL_2 = new cACS_AOE_Bloodarc_LVL_2 in theGame;
			
	vACS_AOE_Bloodarc_LVL_2.ACS_AOE_Bloodarc_LVL_2_Engage();
}

statemachine class cACS_AOE_Bloodarc_LVL_2
{
    function ACS_AOE_Bloodarc_LVL_2_Engage()
	{
		this.PushState('ACS_AOE_Bloodarc_LVL_2_Engage');
	}
}

state ACS_AOE_Bloodarc_LVL_2_Engage in cACS_AOE_Bloodarc_LVL_2
{
	private var actortarget																																					: CActor;
	private var actors    																																					: array<CActor>;
	private var i         																																					: int;
	private var markerNPC																																					: CEntity;
	private var initpos, targetPositionNPC																																	: Vector;
	private var targetRotationNPC, targetRotationPlayer																														: EulerAngles;
	private var dmg																																							: W3DamageAction;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Bloodarc();
	}

	entry function Bloodarc()
	{
		actors.Clear();

		actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);
		for( i = 0; i < actors.Size(); i += 1 )
		{
			actortarget = (CActor)actors[i];
			
			targetPositionNPC = actortarget.GetWorldPosition();
			targetPositionNPC.Z -= 0.5;

			markerNPC = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\gameplay\abilities\water_mage\sand_gusts_bob.w2ent", true ), targetPositionNPC, actortarget.GetWorldRotation() );
			
			markerNPC.PlayEffectSingle('blood_diagonal_up_right');

			markerNPC.PlayEffectSingle('blood_diagonal_up_left');

			markerNPC.PlayEffectSingle('blood_up');

			markerNPC.PlayEffectSingle('blood_diagonal_up_right');

			markerNPC.PlayEffectSingle('blood_diagonal_up_left');

			markerNPC.PlayEffectSingle('blood_up');

			markerNPC.PlayEffectSingle('blood_diagonal_up_right');

			markerNPC.PlayEffectSingle('blood_diagonal_up_left');

			markerNPC.PlayEffectSingle('blood_up');

			markerNPC.PlayEffectSingle('blood_diagonal_up_right');

			markerNPC.PlayEffectSingle('blood_diagonal_up_left');

			markerNPC.PlayEffectSingle('blood_up');

			markerNPC.PlayEffectSingle('blood_diagonal_up_right');

			markerNPC.PlayEffectSingle('blood_diagonal_up_left');

			markerNPC.PlayEffectSingle('blood_up');
			
			markerNPC.DestroyAfter(3);
		}

		GetWitcherPlayer().SoundEvent("cmb_play_dismemberment_gore");

		GetWitcherPlayer().SoundEvent("monster_dettlaff_monster_vein_hit_blood");

		GetWitcherPlayer().SoundEvent("monster_dettlaff_monster_combat_geralt_deathblow_01");

		GetWitcherPlayer().SoundEvent("monster_dettlaff_monster_combat_geralt_deathblow_02");
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_AOE_Igni_Blast_LVL_1()
{
	var vACS_AOE_Igni_Blast_LVL_1 : cACS_AOE_Igni_Blast_LVL_1;
	vACS_AOE_Igni_Blast_LVL_1 = new cACS_AOE_Igni_Blast_LVL_1 in theGame;
			
	vACS_AOE_Igni_Blast_LVL_1.ACS_AOE_Igni_Blast_LVL_1_Engage();
}

statemachine class cACS_AOE_Igni_Blast_LVL_1
{
    function ACS_AOE_Igni_Blast_LVL_1_Engage()
	{
		this.PushState('ACS_AOE_Igni_Blast_LVL_1_Engage');
	}
}

state ACS_AOE_Igni_Blast_LVL_1_Engage in cACS_AOE_Igni_Blast_LVL_1
{
	private var actortarget																																					: CActor;
	private var actors    																																					: array<CActor>;
	private var i         																																					: int;
	private var markerNPC																																					: CEntity;
	private var initpos, targetPositionNPC																																	: Vector;
	private var targetRotationNPC, targetRotationPlayer																														: EulerAngles;
	private var dmg																																							: W3DamageAction;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Igni_Blast();
	}

	entry function Igni_Blast()
	{
		actors.Clear();

		actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 2.5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);
		for( i = 0; i < actors.Size(); i += 1 )
		{	
			actortarget = (CActor)actors[i];
		
			markerNPC = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_2\mutation_2_critical_force.w2ent", true ), actortarget.GetWorldPosition(), actortarget.GetWorldRotation() );
			markerNPC.CreateAttachment( actortarget, , Vector( 0, 0, 1.5 ) );	
			markerNPC.PlayEffectSingle('critical_igni');
			markerNPC.DestroyAfter(1.5);
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_AOE_Igni_Blast_LVL_2()
{
	var vACS_AOE_Igni_Blast_LVL_2 : cACS_AOE_Igni_Blast_LVL_2;
	vACS_AOE_Igni_Blast_LVL_2 = new cACS_AOE_Igni_Blast_LVL_2 in theGame;
			
	vACS_AOE_Igni_Blast_LVL_2.ACS_AOE_Igni_Blast_LVL_2_Engage();
}

statemachine class cACS_AOE_Igni_Blast_LVL_2
{
    function ACS_AOE_Igni_Blast_LVL_2_Engage()
	{
		this.PushState('ACS_AOE_Igni_Blast_LVL_2_Engage');
	}
}

state ACS_AOE_Igni_Blast_LVL_2_Engage in cACS_AOE_Igni_Blast_LVL_2
{
	private var actortarget																																					: CActor;
	private var actors    																																					: array<CActor>;
	private var i         																																					: int;
	private var markerNPC																																					: CEntity;
	private var initpos, targetPositionNPC																																	: Vector;
	private var targetRotationNPC, targetRotationPlayer																														: EulerAngles;
	private var dmg																																							: W3DamageAction;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Igni_Blast();
	}
	
	entry function Igni_Blast()
	{
		actors.Clear();

		actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);
		for( i = 0; i < actors.Size(); i += 1 )
		{	
			actortarget = (CActor)actors[i];
		
			markerNPC = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_2\mutation_2_critical_force.w2ent", true ), actortarget.GetWorldPosition(), actortarget.GetWorldRotation() );
			markerNPC.CreateAttachment( actortarget, , Vector( 0, 0, 1.5 ) );	
			markerNPC.PlayEffectSingle('critical_igni');
			markerNPC.DestroyAfter(1.5);
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_AOE_Magic_Missiles_LVL_1()
{
	var vACS_AOE_Magic_Missiles_LVL_1 : cACS_AOE_Magic_Missiles_LVL_1;
	vACS_AOE_Magic_Missiles_LVL_1 = new cACS_AOE_Magic_Missiles_LVL_1 in theGame;
			
	vACS_AOE_Magic_Missiles_LVL_1.ACS_AOE_Magic_Missiles_LVL_1_Engage();
}

statemachine class cACS_AOE_Magic_Missiles_LVL_1
{
    function ACS_AOE_Magic_Missiles_LVL_1_Engage()
	{
		this.PushState('ACS_AOE_Magic_Missiles_LVL_1_Engage');
	}
}

state ACS_AOE_Magic_Missiles_LVL_1_Engage in cACS_AOE_Magic_Missiles_LVL_1
{
	private var actortarget																																					: CActor;
	private var actors    																																					: array<CActor>;
	private var i         																																					: int;
	private var proj_1																																						: W3ACSIceSpearProjectile;
	private var initpos, targetPositionNPC																																	: Vector;
	private var targetRotationNPC, targetRotationPlayer																														: EulerAngles;
	private var dmg																																							: W3DamageAction;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Magic_Missiles();
	}

	entry function Magic_Missiles()
	{
		actors.Clear();

		actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 2.5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);
		for( i = 0; i < actors.Size(); i += 1 )
		{
			actortarget = (CActor)actors[i];
					
			initpos = actortarget.GetWorldPosition();			
			initpos.Z += 10;
					
			targetPositionNPC = actortarget.PredictWorldPosition(0.35f);
			targetPositionNPC.Z += 1.1;
					
			proj_1 = (W3ACSIceSpearProjectile)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\soceress_arcane_missile.w2ent", true ), initpos );
							
			proj_1.Init(GetWitcherPlayer());
			proj_1.PlayEffectSingle('fire_fx');
			proj_1.PlayEffectSingle('explode_copy');
			proj_1.PlayEffectSingle('explode');
			proj_1.ShootProjectileAtPosition( 0, 10 + RandRange(10,0), targetPositionNPC, 500 );
			proj_1.DestroyAfter(5);
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_AOE_Magic_Missiles_LVL_2()
{
	var vACS_AOE_Magic_Missiles_LVL_2 : cACS_AOE_Magic_Missiles_LVL_2;
	vACS_AOE_Magic_Missiles_LVL_2 = new cACS_AOE_Magic_Missiles_LVL_2 in theGame;
			
	vACS_AOE_Magic_Missiles_LVL_2.ACS_AOE_Magic_Missiles_LVL_2_Engage();
}

statemachine class cACS_AOE_Magic_Missiles_LVL_2
{
    function ACS_AOE_Magic_Missiles_LVL_2_Engage()
	{
		this.PushState('ACS_AOE_Magic_Missiles_LVL_2_Engage');
	}
}

state ACS_AOE_Magic_Missiles_LVL_2_Engage in cACS_AOE_Magic_Missiles_LVL_2
{
	private var actortarget																																					: CActor;
	private var actors    																																					: array<CActor>;
	private var i         																																					: int;
	private var proj_1																																						: W3ACSIceSpearProjectile;
	private var initpos, targetPositionNPC																																	: Vector;
	private var targetRotationNPC, targetRotationPlayer																														: EulerAngles;
	private var dmg																																							: W3DamageAction;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Magic_Missiles();
	}
	
	entry function Magic_Missiles()
	{
		actors.Clear();

		actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);
		for( i = 0; i < actors.Size(); i += 1 )
		{
			actortarget = (CActor)actors[i];
					
			initpos = actortarget.GetWorldPosition();			
			initpos.Z += 10;
					
			targetPositionNPC = actortarget.PredictWorldPosition(0.35f);
			targetPositionNPC.Z += 1.1;
					
			proj_1 = (W3ACSIceSpearProjectile)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\soceress_arcane_missile.w2ent", true ), initpos );
							
			proj_1.Init(GetWitcherPlayer());
			proj_1.PlayEffectSingle('fire_fx');
			proj_1.PlayEffectSingle('explode_copy');
			proj_1.PlayEffectSingle('explode');
			proj_1.ShootProjectileAtPosition( 0, 10 + RandRange(10,0), targetPositionNPC, 500 );
			proj_1.DestroyAfter(5);
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_Rend_Projectile_Switch( noStamina : bool )
{
	var maxAdrenaline								: float;
	var curAdrenaline								: float;

	GetACSWatcher().RemoveTimer('RendProjectileSwitchDelay');

	if (noStamina)
	{
		GetACSWatcher().RemoveTimer('RendProjectileStaminaMonitor');
	}

	if( !GetWitcherPlayer().CanUseSkill(S_Sword_s02))
	{
		return;
	}

	if (ACS_GetItem_Leviathan())
	{
		if (noStamina)
		{
			ACS_Eredin_Frost_Projectile();
		}
		else
		{
			GetACSWatcher().ACS_Leviathan_Projectile();
		}
		
	}
	else
	{
		if (ACS_Armor_Check())
		{
			ACS_Armor_Rend_Projectile();
		}
		else
		{
			maxAdrenaline = GetWitcherPlayer().GetStatMax(BCS_Focus);
			
			curAdrenaline = GetWitcherPlayer().GetStat(BCS_Focus);

			if ( ACS_Settings_Main_Bool('EHmodCombatMainSettings','EHmodElementalRend', true) )
			{
				if (curAdrenaline >= maxAdrenaline * 2/3)
				{
					if( GetWitcherPlayer().GetEquippedSign() == ST_Igni && GetWitcherPlayer().HasTag('acs_igni_secondary_sword_equipped') && GetWitcherPlayer().CanUseSkill(S_Sword_s02))
					{
						ACS_Ifrit_Fire_Projectile();
					}
					else if( GetWitcherPlayer().GetEquippedSign() == ST_Axii && GetWitcherPlayer().HasTag('acs_axii_secondary_sword_equipped') && GetWitcherPlayer().CanUseSkill(S_Sword_s02))
					{
						ACS_Eredin_Frost_Projectile();
					}
					else if( GetWitcherPlayer().GetEquippedSign() == ST_Aard && GetWitcherPlayer().HasTag('acs_aard_secondary_sword_equipped') && GetWitcherPlayer().CanUseSkill(S_Sword_s02))
					{
						ACS_Golem_Stone_Projectile();
					}
					else if( GetWitcherPlayer().GetEquippedSign() == ST_Quen && GetWitcherPlayer().HasTag('acs_quen_secondary_sword_equipped') && GetWitcherPlayer().CanUseSkill(S_Sword_s02))
					{
						ACS_Root_Projectile();
					}
					else if( GetWitcherPlayer().GetEquippedSign() == ST_Yrden && GetWitcherPlayer().HasTag('acs_yrden_secondary_sword_equipped') && GetWitcherPlayer().CanUseSkill(S_Sword_s02))
					{
						ACS_Giant_Shockwave_Mult();
					}
				}
			}
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


statemachine class cACS_Throw_Leviathan
{
    function ACS_Throw_Leviathan_Engage()
	{
		this.PushState('ACS_Throw_Leviathan_Engage');
	}
}

state ACS_Throw_Leviathan_Engage in cACS_Throw_Leviathan
{
	private var proj_1								: W3ACSLeviathanProjectile;
	private var initpos, newpos, targetPosition		: Vector;
	private var actor								: CActor;
	private var movementAdjustor1					: CMovementAdjustor;
	private var ticket1								: SMovementAdjustmentRequestTicket;
	private var sword_id 							: SItemUniqueId;
	private var knife_temp, blade_temp				: CEntityTemplate;
	private var knife 								: CEntity;

	event OnEnterState(prevStateName : name)
	{
		Throw_Leviathan_Entry();
	}

	entry function Throw_Leviathan_Entry()
	{
		GetACSWatcher().ACS_Leviathan_Create_Savelock();

		ACS_GetItem_Leviathan().PlayEffect('radial_copy');
		ACS_GetItem_Leviathan().PlayEffect('fire_sparks_trail');

		thePlayer.inv.GetItemEquippedOnSlot(EES_SteelSword, sword_id);

		if( !thePlayer.inv.ItemHasTag( sword_id, 'ACS_Designated_Leviathan' ))
		{
			thePlayer.inv.AddItemTag( sword_id, 'ACS_Designated_Leviathan' );
		}

		knife_temp = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\other\acs_knife_loot_old.w2ent", true );

		knife = (CEntity)theGame.CreateEntity( knife_temp, thePlayer.GetWorldPosition() + Vector(0,0,-200) );

		knife.AddTag('ACS_Leviathan_Temporary_Storage_Unit');

		thePlayer.inv.GiveItemTo( ((W3AnimatedContainer)(knife)).GetInventory(), sword_id, 1, false, true, false);
		
		GetACSLeviathan().Destroy();
		
		blade_temp = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\acs_leviathan_projectile.w2ent", true );

		initpos = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetHeadingVector();	
		initpos.Z += 1.1;

		proj_1 = (W3ACSLeviathanProjectile)theGame.CreateEntity( blade_temp, initpos );

		proj_1.AddTag('ACS_Leviathan_Projectile');

		if(GetWitcherPlayer().GetSpecialAttackTimeRatio() > 0.5)
		{
			proj_1.AddTag('ACS_Leviathan_Projectile_Guarantee_Freeze');
		}
								
		proj_1.Init(thePlayer);

		actor = ((CActor)( thePlayer.GetDisplayTarget() ));

		if( ACS_AttitudeCheck ( actor ) && GetWitcherPlayer().IsInCombat() && actor.IsAlive() )
		{
			if ( actor.GetBoneIndex('torso') != -1 )
			{
				targetPosition = actor.GetBoneWorldPosition('torso');
			}
			else
			{
				if ( actor.GetBoneIndex('head') != -1 )
				{
					targetPosition = actor.GetBoneWorldPosition('head');
					targetPosition.Z += RandRangeF(0,-1);
					targetPosition.X += RandRangeF(0.5,-0.5);
				}
				else
				{
					if ( actor.GetBoneIndex('k_head_g') != -1 )
					{
						targetPosition = actor.GetBoneWorldPosition('k_head_g');
						targetPosition.Z += RandRangeF(0,-1);
						targetPosition.X += RandRangeF(0.5,-0.5);
					}
					else
					{
						targetPosition = actor.GetWorldPosition();
						targetPosition.Z += 1.5;
					}
				}
			}
			
		}
		else
		{
			targetPosition = theCamera.GetCameraPosition() + theCamera.GetCameraDirection() * 30;

			//targetPosition.Z += 1.25;
		}

		proj_1.ShootProjectileAtPosition( 0, 30, targetPosition, 500 );

		movementAdjustor1 = GetWitcherPlayer().GetMovingAgentComponent().GetMovementAdjustor();
		movementAdjustor1.CancelByName( 'ACS_Leviathan_Throw_Movement_Adjust' );
		ticket1 = movementAdjustor1.CreateNewRequest( 'ACS_Leviathan_Throw_Movement_Adjust' );
		movementAdjustor1.AdjustmentDuration( ticket1, 0.25 );
			
		if (!GetWitcherPlayer().IsUsingHorse() && !GetWitcherPlayer().IsUsingVehicle()) 
		{
			movementAdjustor1.RotateTowards( ticket1, GetACSLeviathan() );
		}  

		if (FactsQuerySum("ACS_Leviathan_Axe_Thrown") <= 0)
		{
			FactsAdd("ACS_Leviathan_Axe_Thrown", 1, -1);
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_Armor_Rend_Projectile()
{
	var vACS_Armor_Rend_Projectile : cACS_Armor_Rend_Projectile;
	vACS_Armor_Rend_Projectile = new cACS_Armor_Rend_Projectile in theGame;
			
	vACS_Armor_Rend_Projectile.ACS_Armor_Rend_Projectile_Engage();
}

statemachine class cACS_Armor_Rend_Projectile
{
    function ACS_Armor_Rend_Projectile_Engage()
	{
		this.PushState('ACS_Armor_Rend_Projectile_Engage');
	}
}

state ACS_Armor_Rend_Projectile_Engage in cACS_Armor_Rend_Projectile
{
	private var proj_1, proj_2, proj_3, proj_4, proj_5																																		: W3ACSEredinFrostLine;
	private var proj_6, proj_7, proj_8, proj_9, proj_10																																		: W3ACSFireLine;
	
	private var targetPosition_1, targetPosition_2, targetPosition_3, targetPosition_4, targetPosition_5, position																			: Vector;
	private var actors																																			   							: array<CActor>;
	private var i         																																									: int;
	private var actortarget					       																																			: CActor;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		ACS_Armor_Rend_Projectile();
	}
	
	entry function ACS_Armor_Rend_Projectile()
	{
		//position = GetWitcherPlayer().GetWorldPosition() + (GetWitcherPlayer().GetWorldForward() * 2) + GetWitcherPlayer().GetHeadingVector() * 1.7;
		position = GetWitcherPlayer().GetWorldPosition() + (GetWitcherPlayer().GetWorldForward() * 1.1) + GetWitcherPlayer().GetHeadingVector() * 1.1;
		
		targetPosition_1 = position + GetWitcherPlayer().GetHeadingVector() * 30;
		
		targetPosition_2 = position + (GetWitcherPlayer().GetWorldRight() * -6.5) + GetWitcherPlayer().GetHeadingVector() * 30;
		
		targetPosition_3 = position + (GetWitcherPlayer().GetWorldRight() * 6.5) + GetWitcherPlayer().GetHeadingVector() * 30;
		
		targetPosition_4 = position + (GetWitcherPlayer().GetWorldRight() * -13) + GetWitcherPlayer().GetHeadingVector() * 30;
		
		targetPosition_5 = position + (GetWitcherPlayer().GetWorldRight() * 13) + GetWitcherPlayer().GetHeadingVector() * 30;
		
		if (!GetWitcherPlayer().HasTag('acs_armor_rend_proj_begin') 
		&& !GetWitcherPlayer().HasTag('acs_armor_rend_proj_1st') 
		&& !GetWitcherPlayer().HasTag('acs_armor_rend_proj_2nd'))
		{	
			if(
			GetWitcherPlayer().GetEquippedSign() == ST_Quen 
			|| GetWitcherPlayer().GetEquippedSign() == ST_Axii
			)
			{
				proj_1 = (W3ACSEredinFrostLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\acs_armor_ice_line_proj.w2ent", true ), position );
				proj_1.Init(GetWitcherPlayer());
				proj_1.PlayEffectSingle('fire_line');
				proj_1.ShootProjectileAtPosition(0,	20, targetPosition_1, 30 );
				proj_1.DestroyAfter(5);
			}
			else if( GetWitcherPlayer().GetEquippedSign() == ST_Igni 
			|| GetWitcherPlayer().GetEquippedSign() == ST_Yrden
			|| GetWitcherPlayer().GetEquippedSign() == ST_Aard
			)
			{
				proj_6 = (W3ACSFireLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\acs_armor_fire_line_proj.w2ent", true ), position );
				proj_6.Init(GetWitcherPlayer());
				proj_6.PlayEffectSingle('fire_line');
				proj_6.ShootProjectileAtPosition(0,	20, targetPosition_1, 30 );
				proj_6.DestroyAfter(5);
			}
			
			GetWitcherPlayer().AddTag('acs_armor_rend_proj_begin');
			GetWitcherPlayer().AddTag('acs_armor_rend_proj_1st');
		}
		else if (GetWitcherPlayer().HasTag('acs_armor_rend_proj_begin') 
		&& GetWitcherPlayer().HasTag('acs_armor_rend_proj_1st'))
		{
			if(
			GetWitcherPlayer().GetEquippedSign() == ST_Quen 
			|| GetWitcherPlayer().GetEquippedSign() == ST_Axii
			)
			{
				proj_1 = (W3ACSEredinFrostLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\acs_armor_ice_line_proj.w2ent", true ), position );
				proj_1.Init(GetWitcherPlayer());
				proj_1.PlayEffectSingle('fire_line');
				proj_1.ShootProjectileAtPosition(0,	20, targetPosition_1, 30 );
				proj_1.DestroyAfter(5);
				
				proj_2 = (W3ACSEredinFrostLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\acs_armor_ice_line_proj.w2ent", true ), position );
				proj_2.Init(GetWitcherPlayer());
				proj_2.PlayEffectSingle('fire_line');
				proj_2.ShootProjectileAtPosition(0,	20, targetPosition_2, 30 );
				proj_2.DestroyAfter(5);		
				
				proj_3 = (W3ACSEredinFrostLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\acs_armor_ice_line_proj.w2ent", true ), position );
				proj_3.Init(GetWitcherPlayer());
				proj_3.PlayEffectSingle('fire_line');
				proj_3.ShootProjectileAtPosition(0,	20, targetPosition_3, 30 );
				proj_3.DestroyAfter(5);
			}
			else if( GetWitcherPlayer().GetEquippedSign() == ST_Igni 
			|| GetWitcherPlayer().GetEquippedSign() == ST_Yrden
			|| GetWitcherPlayer().GetEquippedSign() == ST_Aard
			)
			{
				proj_6 = (W3ACSFireLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\acs_armor_fire_line_proj.w2ent", true ), position );
				proj_6.Init(GetWitcherPlayer());
				proj_6.PlayEffectSingle('fire_line');
				proj_6.ShootProjectileAtPosition(0,	20, targetPosition_1, 30 );
				proj_6.DestroyAfter(5);
				
				proj_7 = (W3ACSFireLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\acs_armor_fire_line_proj.w2ent", true ), position );
				proj_7.Init(GetWitcherPlayer());
				proj_7.PlayEffectSingle('fire_line');
				proj_7.ShootProjectileAtPosition(0,	20, targetPosition_2, 30 );
				proj_7.DestroyAfter(5);		
				
				proj_8 = (W3ACSFireLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\acs_armor_fire_line_proj.w2ent", true ), position );
				proj_8.Init(GetWitcherPlayer());
				proj_8.PlayEffectSingle('fire_line');
				proj_8.ShootProjectileAtPosition(0,	20, targetPosition_3, 30 );
				proj_8.DestroyAfter(5);
			}
			
			GetWitcherPlayer().RemoveTag('acs_armor_rend_proj_1st');
			GetWitcherPlayer().AddTag('acs_armor_rend_proj_2nd');
		}
		else if (GetWitcherPlayer().HasTag('acs_armor_rend_proj_begin') 
		&& GetWitcherPlayer().HasTag('acs_armor_rend_proj_2nd'))
		{
			if(
			GetWitcherPlayer().GetEquippedSign() == ST_Quen 
			|| GetWitcherPlayer().GetEquippedSign() == ST_Axii
			)
			{
				proj_1 = (W3ACSEredinFrostLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\acs_armor_ice_line_proj.w2ent", true ), position );
				proj_1.Init(GetWitcherPlayer());
				proj_1.PlayEffectSingle('fire_line');
				proj_1.ShootProjectileAtPosition(0,	20, targetPosition_1, 30 );
				proj_1.DestroyAfter(5);
				
				proj_2 = (W3ACSEredinFrostLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\acs_armor_ice_line_proj.w2ent", true ), position );
				proj_2.Init(GetWitcherPlayer());
				proj_2.PlayEffectSingle('fire_line');
				proj_2.ShootProjectileAtPosition(0,	20, targetPosition_2, 30 );
				proj_2.DestroyAfter(5);		
				
				proj_3 = (W3ACSEredinFrostLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\acs_armor_ice_line_proj.w2ent", true ), position );
				proj_3.Init(GetWitcherPlayer());
				proj_3.PlayEffectSingle('fire_line');
				proj_3.ShootProjectileAtPosition(0,	20, targetPosition_3, 30 );
				proj_3.DestroyAfter(5);
				
				proj_4 = (W3ACSEredinFrostLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\acs_armor_ice_line_proj.w2ent", true ), position );
				proj_4.Init(GetWitcherPlayer());
				proj_4.PlayEffectSingle('fire_line');
				proj_4.ShootProjectileAtPosition(0,	20, targetPosition_4, 30 );
				proj_4.DestroyAfter(5);
				
				proj_5 = (W3ACSEredinFrostLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\acs_armor_ice_line_proj.w2ent", true ), position );
				proj_5.Init(GetWitcherPlayer());
				proj_5.PlayEffectSingle('fire_line');
				proj_5.ShootProjectileAtPosition(0,	20, targetPosition_5, 30 );
				proj_5.DestroyAfter(5);
			}
			else if( GetWitcherPlayer().GetEquippedSign() == ST_Igni 
			|| GetWitcherPlayer().GetEquippedSign() == ST_Yrden
			|| GetWitcherPlayer().GetEquippedSign() == ST_Aard
			)
			{ 
				proj_6 = (W3ACSFireLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\acs_armor_fire_line_proj.w2ent", true ), position );
				proj_6.Init(GetWitcherPlayer());
				proj_6.PlayEffectSingle('fire_line');
				proj_6.ShootProjectileAtPosition(0,	20, targetPosition_1, 30 );
				proj_6.DestroyAfter(5);
				
				proj_7 = (W3ACSFireLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\acs_armor_fire_line_proj.w2ent", true ), position );
				proj_7.Init(GetWitcherPlayer());
				proj_7.PlayEffectSingle('fire_line');
				proj_7.ShootProjectileAtPosition(0,	20, targetPosition_2, 30 );
				proj_7.DestroyAfter(5);		
				
				proj_8 = (W3ACSFireLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\acs_armor_fire_line_proj.w2ent", true ), position );
				proj_8.Init(GetWitcherPlayer());
				proj_8.PlayEffectSingle('fire_line');
				proj_8.ShootProjectileAtPosition(0,	20, targetPosition_3, 30 );
				proj_8.DestroyAfter(5);
				
				proj_9 = (W3ACSFireLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\acs_armor_fire_line_proj.w2ent", true ), position );
				proj_9.Init(GetWitcherPlayer());
				proj_9.PlayEffectSingle('fire_line');
				proj_9.ShootProjectileAtPosition(0,	20, targetPosition_4, 30 );
				proj_9.DestroyAfter(5);
				
				proj_10 = (W3ACSFireLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\acs_armor_fire_line_proj.w2ent", true ), position );
				proj_10.Init(GetWitcherPlayer());
				proj_10.PlayEffectSingle('fire_line');
				proj_10.ShootProjectileAtPosition(0,	20, targetPosition_5, 30 );
				proj_10.DestroyAfter(5);
			}
			
			GetWitcherPlayer().RemoveTag('acs_armor_rend_proj_begin');
			GetWitcherPlayer().RemoveTag('acs_armor_rend_proj_1st');
			GetWitcherPlayer().RemoveTag('acs_armor_rend_proj_2nd');
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_Eredin_Frost_Projectile()
{
	var vACS_Eredin_Frost_Projectile : cACS_Eredin_Frost_Projectile;
	vACS_Eredin_Frost_Projectile = new cACS_Eredin_Frost_Projectile in theGame;
			
	vACS_Eredin_Frost_Projectile.ACS_Eredin_Frost_Projectile_Engage();
}

statemachine class cACS_Eredin_Frost_Projectile
{
    function ACS_Eredin_Frost_Projectile_Engage()
	{
		this.PushState('ACS_Eredin_Frost_Projectile_Engage');
	}
}

state ACS_Eredin_Frost_Projectile_Engage in cACS_Eredin_Frost_Projectile
{
	private var proj_1, proj_2, proj_3, proj_4, proj_5																																		: W3ACSEredinFrostLine;
	private var targetPosition_1, targetPosition_2, targetPosition_3, targetPosition_4, targetPosition_5, position																			: Vector;
	private var actors																																			   							: array<CActor>;
	private var i         																																									: int;
	private var actortarget					       																																			: CActor;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Eredin_Frost_Projectile();
	}
	
	entry function Eredin_Frost_Projectile()
	{
		//position = GetWitcherPlayer().GetWorldPosition() + (GetWitcherPlayer().GetWorldForward() * 2) + GetWitcherPlayer().GetHeadingVector() * 1.7;
		position = GetWitcherPlayer().GetWorldPosition() + (GetWitcherPlayer().GetWorldForward() * 1.1) + GetWitcherPlayer().GetHeadingVector() * 1.1;
		
		targetPosition_1 = position + GetWitcherPlayer().GetHeadingVector() * 30;
		
		targetPosition_2 = position + (GetWitcherPlayer().GetWorldRight() * -6.5) + GetWitcherPlayer().GetHeadingVector() * 30;
		
		targetPosition_3 = position + (GetWitcherPlayer().GetWorldRight() * 6.5) + GetWitcherPlayer().GetHeadingVector() * 30;
		
		targetPosition_4 = position + (GetWitcherPlayer().GetWorldRight() * -13) + GetWitcherPlayer().GetHeadingVector() * 30;
		
		targetPosition_5 = position + (GetWitcherPlayer().GetWorldRight() * 13) + GetWitcherPlayer().GetHeadingVector() * 30;
		
		if (!GetWitcherPlayer().HasTag('eredin_frost_proj_begin') && !GetWitcherPlayer().HasTag('eredin_frost_proj_1st') && !GetWitcherPlayer().HasTag('eredin_frost_proj_2nd'))
		{
			actors.Clear();

			actors = GetWitcherPlayer().GetNPCsAndPlayersInCone(30, VecHeading(GetWitcherPlayer().GetHeadingVector()), 20, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors  );
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];
				
				if( actors.Size() > 0 )
				{
					if( !actortarget.IsImmuneToBuff( EET_SlowdownFrost ) && !actortarget.HasBuff( EET_SlowdownFrost ) ) 
					{ 
						actortarget.AddEffectDefault( EET_SlowdownFrost, GetWitcherPlayer(), 'acs_weapon_effects' ); 
					}
					
					if( RandF() < 0.10 ) 
					{ 
						if( !actortarget.IsImmuneToBuff( EET_Frozen ) && !actortarget.HasBuff( EET_Frozen ) ) 
						{ 
							actortarget.AddEffectDefault( EET_Frozen, GetWitcherPlayer(), 'acs_weapon_effects' ); 
						}
					}
				}
			}		
			
			proj_1 = (W3ACSEredinFrostLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\eredin_frost_proj.w2ent", true ), position );
			proj_1.Init(GetWitcherPlayer());
			proj_1.PlayEffectSingle('fire_line');
			proj_1.ShootProjectileAtPosition(0,	20, targetPosition_1, 30 );
			proj_1.DestroyAfter(5);
			
			GetWitcherPlayer().AddTag('eredin_frost_proj_begin');
			GetWitcherPlayer().AddTag('eredin_frost_proj_1st');
		}
		else if (GetWitcherPlayer().HasTag('eredin_frost_proj_begin') && GetWitcherPlayer().HasTag('eredin_frost_proj_1st'))
		{
			actors.Clear();

			actors = GetWitcherPlayer().GetNPCsAndPlayersInCone(30, VecHeading(GetWitcherPlayer().GetHeadingVector()), 40, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors  );
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];
				
				if( actors.Size() > 0 )
				{
					if( !actortarget.IsImmuneToBuff( EET_SlowdownFrost ) && !actortarget.HasBuff( EET_SlowdownFrost ) ) 
					{ 
						actortarget.AddEffectDefault( EET_SlowdownFrost, GetWitcherPlayer(), 'acs_weapon_effects' ); 
					}
					
					if( RandF() < 0.25 ) 
					{ 
						if( !actortarget.IsImmuneToBuff( EET_Frozen ) && !actortarget.HasBuff( EET_Frozen ) ) 
						{ 
							actortarget.AddEffectDefault( EET_Frozen, GetWitcherPlayer(), 'acs_weapon_effects' ); 
						}
					}
				}
			}	
			
			proj_1 = (W3ACSEredinFrostLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\eredin_frost_proj.w2ent", true ), position );
			proj_1.Init(GetWitcherPlayer());
			proj_1.PlayEffectSingle('fire_line');
			proj_1.ShootProjectileAtPosition(0,	20, targetPosition_1, 30 );
			proj_1.DestroyAfter(5);
			
			proj_2 = (W3ACSEredinFrostLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\eredin_frost_proj.w2ent", true ), position );
			proj_2.Init(GetWitcherPlayer());
			proj_2.PlayEffectSingle('fire_line');
			proj_2.ShootProjectileAtPosition(0,	20, targetPosition_2, 30 );
			proj_2.DestroyAfter(5);		
			
			proj_3 = (W3ACSEredinFrostLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\eredin_frost_proj.w2ent", true ), position );
			proj_3.Init(GetWitcherPlayer());
			proj_3.PlayEffectSingle('fire_line');
			proj_3.ShootProjectileAtPosition(0,	20, targetPosition_3, 30 );
			proj_3.DestroyAfter(5);
			
			GetWitcherPlayer().RemoveTag('eredin_frost_proj_1st');
			GetWitcherPlayer().AddTag('eredin_frost_proj_2nd');
		}
		else if (GetWitcherPlayer().HasTag('eredin_frost_proj_begin') && GetWitcherPlayer().HasTag('eredin_frost_proj_2nd'))
		{
			actors.Clear();

			actors = GetWitcherPlayer().GetNPCsAndPlayersInCone(30, VecHeading(GetWitcherPlayer().GetHeadingVector()), 60, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors  );
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];
				
				if( actors.Size() > 0 )
				{
					if( !actortarget.IsImmuneToBuff( EET_SlowdownFrost ) && !actortarget.HasBuff( EET_SlowdownFrost ) ) 
					{ 
						actortarget.AddEffectDefault( EET_SlowdownFrost, GetWitcherPlayer(), 'acs_weapon_effects' ); 
					}
					
					if( RandF() < 0.75 ) 
					{ 
						if( !actortarget.IsImmuneToBuff( EET_Frozen ) && !actortarget.HasBuff( EET_Frozen ) ) 
						{ 
							actortarget.AddEffectDefault( EET_Frozen, GetWitcherPlayer(), 'acs_weapon_effects' ); 
						}
					}
				}
			}	
			
			proj_1 = (W3ACSEredinFrostLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\eredin_frost_proj.w2ent", true ), position );
			proj_1.Init(GetWitcherPlayer());
			proj_1.PlayEffectSingle('fire_line');
			proj_1.ShootProjectileAtPosition(0,	20, targetPosition_1, 30 );
			proj_1.DestroyAfter(5);
			
			proj_2 = (W3ACSEredinFrostLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\eredin_frost_proj.w2ent", true ), position );
			proj_2.Init(GetWitcherPlayer());
			proj_2.PlayEffectSingle('fire_line');
			proj_2.ShootProjectileAtPosition(0,	20, targetPosition_2, 30 );
			proj_2.DestroyAfter(5);		
			
			proj_3 = (W3ACSEredinFrostLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\eredin_frost_proj.w2ent", true ), position );
			proj_3.Init(GetWitcherPlayer());
			proj_3.PlayEffectSingle('fire_line');
			proj_3.ShootProjectileAtPosition(0,	20, targetPosition_3, 30 );
			proj_3.DestroyAfter(5);
			
			proj_4 = (W3ACSEredinFrostLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\eredin_frost_proj.w2ent", true ), position );
			proj_4.Init(GetWitcherPlayer());
			proj_4.PlayEffectSingle('fire_line');
			proj_4.ShootProjectileAtPosition(0,	20, targetPosition_4, 30 );
			proj_4.DestroyAfter(5);
			
			proj_5 = (W3ACSEredinFrostLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\eredin_frost_proj.w2ent", true ), position );
			proj_5.Init(GetWitcherPlayer());
			proj_5.PlayEffectSingle('fire_line');
			proj_5.ShootProjectileAtPosition(0,	20, targetPosition_5, 30 );
			proj_5.DestroyAfter(5);
			
			GetWitcherPlayer().RemoveTag('eredin_frost_proj_begin');
			GetWitcherPlayer().RemoveTag('eredin_frost_proj_1st');
			GetWitcherPlayer().RemoveTag('eredin_frost_proj_2nd');
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_Ifrit_Fire_Projectile()
{
	var vACS_Ifrit_Fire_Projectile : cACS_Ifrit_Fire_Projectile;
	vACS_Ifrit_Fire_Projectile = new cACS_Ifrit_Fire_Projectile in theGame;
			
	vACS_Ifrit_Fire_Projectile.ACS_Ifrit_Fire_Projectile_Engage();
}

statemachine class cACS_Ifrit_Fire_Projectile
{
    function ACS_Ifrit_Fire_Projectile_Engage()
	{
		this.PushState('ACS_Ifrit_Fire_Projectile_Engage');
	}
}

state ACS_Ifrit_Fire_Projectile_Engage in cACS_Ifrit_Fire_Projectile
{
	private var proj_1, proj_2, proj_3, proj_4, proj_5																																		: W3ACSFireLine;
	private var targetPosition_1, targetPosition_2, targetPosition_3, targetPosition_4, targetPosition_5, position																			: Vector;
	private var actors																																			   							: array<CActor>;
	private var i         																																									: int;
	private var actortarget					       																																			: CActor;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Ifrit_Fire_Projectile();
	}

	entry function Ifrit_Fire_Projectile()
	{
		if ( !theSound.SoundIsBankLoaded("monster_golem_ifryt.bnk") )
		{
			theSound.SoundLoadBank( "monster_golem_ifryt.bnk", false );
		}
		
		GetWitcherPlayer().SoundEvent("monster_golem_dao_cmb_swoosh_light");

		//position = GetWitcherPlayer().GetWorldPosition() + (GetWitcherPlayer().GetWorldForward() * 2) + GetWitcherPlayer().GetHeadingVector() * 1.7;
		position = GetWitcherPlayer().GetWorldPosition() + (GetWitcherPlayer().GetWorldForward() * 1.5) + GetWitcherPlayer().GetHeadingVector() * 1.1;
		
		targetPosition_1 = position + GetWitcherPlayer().GetHeadingVector() * 30;
		
		targetPosition_2 = position + (GetWitcherPlayer().GetWorldRight() * -6.5) + GetWitcherPlayer().GetHeadingVector() * 30;
		
		targetPosition_3 = position + (GetWitcherPlayer().GetWorldRight() * 6.5) + GetWitcherPlayer().GetHeadingVector() * 30;
		
		targetPosition_4 = position + (GetWitcherPlayer().GetWorldRight() * -13) + GetWitcherPlayer().GetHeadingVector() * 30;
		
		targetPosition_5 = position + (GetWitcherPlayer().GetWorldRight() * 13) + GetWitcherPlayer().GetHeadingVector() * 30;
		
		if (!GetWitcherPlayer().HasTag('ifrit_fire_proj_begin') && !GetWitcherPlayer().HasTag('ifrit_fire_proj_1st') && !GetWitcherPlayer().HasTag('ifrit_fire_proj_2nd'))
		{	
			proj_1 = (W3ACSFireLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\elemental_ifryt_proj.w2ent", true ), position );
			proj_1.Init(GetWitcherPlayer());
			proj_1.PlayEffectSingle('fire_line');
			proj_1.ShootProjectileAtPosition(0,	20, targetPosition_1, 30 );
			proj_1.DestroyAfter(5);
			
			GetWitcherPlayer().AddTag('ifrit_fire_proj_begin');
			GetWitcherPlayer().AddTag('ifrit_fire_proj_1st');
		}
		else if (GetWitcherPlayer().HasTag('ifrit_fire_proj_begin') && GetWitcherPlayer().HasTag('ifrit_fire_proj_1st'))
		{
			proj_1 = (W3ACSFireLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\elemental_ifryt_proj.w2ent", true ), position );
			proj_1.Init(GetWitcherPlayer());
			proj_1.PlayEffectSingle('fire_line');
			proj_1.ShootProjectileAtPosition(0,	20, targetPosition_1, 30 );
			proj_1.DestroyAfter(5);
			
			proj_2 = (W3ACSFireLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\elemental_ifryt_proj.w2ent", true ), position );
			proj_2.Init(GetWitcherPlayer());
			proj_2.PlayEffectSingle('fire_line');
			proj_2.ShootProjectileAtPosition(0,	20, targetPosition_2, 30 );
			proj_2.DestroyAfter(5);		
			
			proj_3 = (W3ACSFireLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\elemental_ifryt_proj.w2ent", true ), position );
			proj_3.Init(GetWitcherPlayer());
			proj_3.PlayEffectSingle('fire_line');
			proj_3.ShootProjectileAtPosition(0,	20, targetPosition_3, 30 );
			proj_3.DestroyAfter(5);
			
			GetWitcherPlayer().RemoveTag('ifrit_fire_proj_1st');
			GetWitcherPlayer().AddTag('ifrit_fire_proj_2nd');
		}
		else if (GetWitcherPlayer().HasTag('ifrit_fire_proj_begin') && GetWitcherPlayer().HasTag('ifrit_fire_proj_2nd'))
		{	
			proj_1 = (W3ACSFireLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\elemental_ifryt_proj.w2ent", true ), position );
			proj_1.Init(GetWitcherPlayer());
			proj_1.PlayEffectSingle('fire_line');
			proj_1.ShootProjectileAtPosition(0,	20, targetPosition_1, 30 );
			proj_1.DestroyAfter(5);
			
			proj_2 = (W3ACSFireLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\elemental_ifryt_proj.w2ent", true ), position );
			proj_2.Init(GetWitcherPlayer());
			proj_2.PlayEffectSingle('fire_line');
			proj_2.ShootProjectileAtPosition(0,	20, targetPosition_2, 30 );
			proj_2.DestroyAfter(5);		
			
			proj_3 = (W3ACSFireLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\elemental_ifryt_proj.w2ent", true ), position );
			proj_3.Init(GetWitcherPlayer());
			proj_3.PlayEffectSingle('fire_line');
			proj_3.ShootProjectileAtPosition(0,	20, targetPosition_3, 30 );
			proj_3.DestroyAfter(5);
			
			proj_4 = (W3ACSFireLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\elemental_ifryt_proj.w2ent", true ), position );
			proj_4.Init(GetWitcherPlayer());
			proj_4.PlayEffectSingle('fire_line');
			proj_4.ShootProjectileAtPosition(0,	20, targetPosition_4, 30 );
			proj_4.DestroyAfter(5);
			
			proj_5 = (W3ACSFireLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\elemental_ifryt_proj.w2ent", true ), position );
			proj_5.Init(GetWitcherPlayer());
			proj_5.PlayEffectSingle('fire_line');
			proj_5.ShootProjectileAtPosition(0,	20, targetPosition_5, 30 );
			proj_5.DestroyAfter(5);
			
			GetWitcherPlayer().RemoveTag('ifrit_fire_proj_begin');
			GetWitcherPlayer().RemoveTag('ifrit_fire_proj_1st');
			GetWitcherPlayer().RemoveTag('ifrit_fire_proj_2nd');
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_Golem_Stone_Projectile()
{
	var vACS_Golem_Stone_Projectile : cACS_Golem_Stone_Projectile;
	vACS_Golem_Stone_Projectile = new cACS_Golem_Stone_Projectile in theGame;
			
	vACS_Golem_Stone_Projectile.ACS_Golem_Stone_Projectile_Engage();
}

statemachine class cACS_Golem_Stone_Projectile
{
    function ACS_Golem_Stone_Projectile_Engage()
	{
		this.PushState('ACS_Golem_Stone_Projectile_Engage');
	}
}

state ACS_Golem_Stone_Projectile_Engage in cACS_Golem_Stone_Projectile
{
	private var proj_1, proj_2, proj_3, proj_4, proj_5																																		: W3ACSRockLine;
	private var targetPosition_1, targetPosition_2, targetPosition_3, targetPosition_4, targetPosition_5, position																			: Vector;
	private var actors																																			   							: array<CActor>;
	private var i         																																									: int;
	private var actortarget					       																																			: CActor;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Golem_Stone_Projectile();
	}

	entry function Golem_Stone_Projectile()
	{
		if ( !theSound.SoundIsBankLoaded("monster_golem_dao.bnk") )
		{
			theSound.SoundLoadBank( "monster_golem_dao.bnk", false );
		}
		
		GetWitcherPlayer().SoundEvent("monster_golem_dao_cmb_swoosh_light");

		position = GetWitcherPlayer().GetWorldPosition() + (GetWitcherPlayer().GetWorldForward() * 2.2) + GetWitcherPlayer().GetHeadingVector() * 1.7;
		
		targetPosition_1 = position + GetWitcherPlayer().GetHeadingVector() * 30;
		
		targetPosition_2 = position + (GetWitcherPlayer().GetWorldRight() * -6.5) + GetWitcherPlayer().GetHeadingVector() * 30;
		
		targetPosition_3 = position + (GetWitcherPlayer().GetWorldRight() * 6.5) + GetWitcherPlayer().GetHeadingVector() * 30;
		
		targetPosition_4 = position + (GetWitcherPlayer().GetWorldRight() * -13) + GetWitcherPlayer().GetHeadingVector() * 30;
		
		targetPosition_5 = position + (GetWitcherPlayer().GetWorldRight() * 13) + GetWitcherPlayer().GetHeadingVector() * 30;
		
		if (!GetWitcherPlayer().HasTag('golem_stone_proj_begin') && !GetWitcherPlayer().HasTag('golem_stone_proj_1st') && !GetWitcherPlayer().HasTag('golem_stone_proj_2nd'))
		{
			actors.Clear();

			actors = GetWitcherPlayer().GetNPCsAndPlayersInCone(30, VecHeading(GetWitcherPlayer().GetHeadingVector()), 20, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors  );
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];
				
				if( actors.Size() > 0 )
				{
					if( !actortarget.IsImmuneToBuff( EET_Stagger ) && !actortarget.HasBuff( EET_Stagger ) ) 
					{ 
						actortarget.AddEffectDefault( EET_Stagger, GetWitcherPlayer(), 'acs_weapon_effects' ); 
					}
				}
			}	
			
			proj_1 = (W3ACSRockLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\elemental_dao_proj.w2ent", true ), position );
			proj_1.Init(GetWitcherPlayer());
			proj_1.PlayEffectSingle('fire_line');
			proj_1.ShootProjectileAtPosition(0,	20, targetPosition_1, 30 );
			proj_1.DestroyAfter(5);
			
			GetWitcherPlayer().AddTag('golem_stone_proj_begin');
			GetWitcherPlayer().AddTag('golem_stone_proj_1st');
		}
		else if (GetWitcherPlayer().HasTag('golem_stone_proj_begin') && GetWitcherPlayer().HasTag('golem_stone_proj_1st'))
		{
			actors.Clear();

			actors = GetWitcherPlayer().GetNPCsAndPlayersInCone(30, VecHeading(GetWitcherPlayer().GetHeadingVector()), 40, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors  );
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];
				
				if( actors.Size() > 0 )
				{
					if( !actortarget.IsImmuneToBuff( EET_Stagger ) && !actortarget.HasBuff( EET_Stagger ) ) 
					{ 
						actortarget.AddEffectDefault( EET_Stagger, GetWitcherPlayer(), 'acs_weapon_effects' ); 
					}
				}
			}	
			
			proj_1 = (W3ACSRockLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\elemental_dao_proj.w2ent", true ), position );
			proj_1.Init(GetWitcherPlayer());
			proj_1.PlayEffectSingle('fire_line');
			proj_1.ShootProjectileAtPosition(0,	20, targetPosition_1, 30 );
			proj_1.DestroyAfter(5);
			
			proj_2 = (W3ACSRockLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\elemental_dao_proj.w2ent", true ), position );
			proj_2.Init(GetWitcherPlayer());
			proj_2.PlayEffectSingle('fire_line');
			proj_2.ShootProjectileAtPosition(0,	20, targetPosition_2, 30 );
			proj_2.DestroyAfter(5);		
			
			proj_3 = (W3ACSRockLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\elemental_dao_proj.w2ent", true ), position );
			proj_3.Init(GetWitcherPlayer());
			proj_3.PlayEffectSingle('fire_line');
			proj_3.ShootProjectileAtPosition(0,	20, targetPosition_3, 30 );
			proj_3.DestroyAfter(5);
			
			GetWitcherPlayer().RemoveTag('golem_stone_proj_1st');
			GetWitcherPlayer().AddTag('golem_stone_proj_2nd');
		}
		else if (GetWitcherPlayer().HasTag('golem_stone_proj_begin') && GetWitcherPlayer().HasTag('golem_stone_proj_2nd'))
		{
			actors.Clear();

			actors = GetWitcherPlayer().GetNPCsAndPlayersInCone(30, VecHeading(GetWitcherPlayer().GetHeadingVector()), 80, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors  );
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];
				
				if( actors.Size() > 0 )
				{
					if( !actortarget.IsImmuneToBuff( EET_Stagger ) && !actortarget.HasBuff( EET_Stagger ) ) 
					{ 
						actortarget.AddEffectDefault( EET_Stagger, GetWitcherPlayer(), 'acs_weapon_effects' ); 
					}
				}
			}	
			
			proj_1 = (W3ACSRockLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\elemental_dao_proj.w2ent", true ), position );
			proj_1.Init(GetWitcherPlayer());
			proj_1.PlayEffectSingle('fire_line');
			proj_1.ShootProjectileAtPosition(0,	20, targetPosition_1, 30 );
			proj_1.DestroyAfter(5);
			
			proj_2 = (W3ACSRockLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\elemental_dao_proj.w2ent", true ), position );
			proj_2.Init(GetWitcherPlayer());
			proj_2.PlayEffectSingle('fire_line');
			proj_2.ShootProjectileAtPosition(0,	20, targetPosition_2, 30 );
			proj_2.DestroyAfter(5);		
			
			proj_3 = (W3ACSRockLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\elemental_dao_proj.w2ent", true ), position );
			proj_3.Init(GetWitcherPlayer());
			proj_3.PlayEffectSingle('fire_line');
			proj_3.ShootProjectileAtPosition(0,	20, targetPosition_3, 30 );
			proj_3.DestroyAfter(5);
			
			proj_4 = (W3ACSRockLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\elemental_dao_proj.w2ent", true ), position );
			proj_4.Init(GetWitcherPlayer());
			proj_4.PlayEffectSingle('fire_line');
			proj_4.ShootProjectileAtPosition(0,	20, targetPosition_4, 30 );
			proj_4.DestroyAfter(5);
			
			proj_5 = (W3ACSRockLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\elemental_dao_proj.w2ent", true ), position );
			proj_5.Init(GetWitcherPlayer());
			proj_5.PlayEffectSingle('fire_line');
			proj_5.ShootProjectileAtPosition(0,	20, targetPosition_5, 30 );
			proj_5.DestroyAfter(5);
			
			GetWitcherPlayer().RemoveTag('golem_stone_proj_begin');
			GetWitcherPlayer().RemoveTag('golem_stone_proj_1st');
			GetWitcherPlayer().RemoveTag('golem_stone_proj_2nd');
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_Root_Projectile()
{
	var vACS_Root_Projectile : cACS_Root_Projectile;
	vACS_Root_Projectile = new cACS_Root_Projectile in theGame;
			
	vACS_Root_Projectile.ACS_Root_Projectile_Engage();
}

statemachine class cACS_Root_Projectile
{
    function ACS_Root_Projectile_Engage()
	{
		this.PushState('ACS_Root_Projectile_Engage');
	}
}

state ACS_Root_Projectile_Engage in cACS_Root_Projectile
{
	private var proj_1, proj_2, proj_3, proj_4, proj_5 																														: W3ACSRootAttack;
	private var position_1, position_2, position_3, position_4, position_5																									: Vector;
	
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Root_Projectile();
	}
	
	entry function Root_Projectile()
	{
		position_1 = GetWitcherPlayer().GetTarget().GetWorldPosition();
		position_1 = ACSPlayerFixZAxis(position_1);
		
		position_2 = GetWitcherPlayer().GetTarget().GetWorldPosition() + GetWitcherPlayer().GetTarget().GetWorldRight() * 2.5;
		position_2 = ACSPlayerFixZAxis(position_2);
		
		position_3 = GetWitcherPlayer().GetTarget().GetWorldPosition() + GetWitcherPlayer().GetTarget().GetWorldRight() * -2.5;
		position_3 = ACSPlayerFixZAxis(position_3);
		
		position_4 = GetWitcherPlayer().GetTarget().GetWorldPosition() + GetWitcherPlayer().GetTarget().GetWorldRight() * 5.5;
		position_4 = ACSPlayerFixZAxis(position_4);
		
		position_5 = GetWitcherPlayer().GetTarget().GetWorldPosition() + GetWitcherPlayer().GetTarget().GetWorldRight() * -5.5;
		position_5 = ACSPlayerFixZAxis(position_5);
		
		if (!GetWitcherPlayer().HasTag('root_proj_begin') && !GetWitcherPlayer().HasTag('root_proj_1st') && !GetWitcherPlayer().HasTag('root_proj_2nd'))
		{
			proj_1 = (W3ACSRootAttack)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\sprigan_root_attack.w2ent", true ), ACSPlayerFixZAxis(position_1) );
			proj_1.DestroyAfter(5);		
			
			GetWitcherPlayer().AddTag('root_proj_begin');
			GetWitcherPlayer().AddTag('root_proj_1st');
		}
		else if (GetWitcherPlayer().HasTag('root_proj_begin') && GetWitcherPlayer().HasTag('root_proj_1st'))
		{
			proj_1 = (W3ACSRootAttack)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\sprigan_root_attack.w2ent", true ), ACSPlayerFixZAxis(position_1) );
			proj_1.DestroyAfter(5);	
			
			proj_2 = (W3ACSRootAttack)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\sprigan_root_attack.w2ent", true ), ACSPlayerFixZAxis(position_2) );
			proj_2.DestroyAfter(5);	
			
			proj_3 = (W3ACSRootAttack)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\sprigan_root_attack.w2ent", true ), ACSPlayerFixZAxis(position_3) );
			proj_3.DestroyAfter(5);	
			
			GetWitcherPlayer().RemoveTag('root_proj_1st');
			GetWitcherPlayer().AddTag('root_proj_2nd');
		}
		else if (GetWitcherPlayer().HasTag('root_proj_begin') && GetWitcherPlayer().HasTag('root_proj_2nd'))
		{
			proj_1 = (W3ACSRootAttack)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\sprigan_root_attack.w2ent", true ), ACSPlayerFixZAxis(position_1) );
			proj_1.DestroyAfter(5);	
			
			proj_2 = (W3ACSRootAttack)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\sprigan_root_attack.w2ent", true ), ACSPlayerFixZAxis(position_2) );
			proj_2.DestroyAfter(5);	
			
			proj_3 = (W3ACSRootAttack)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\sprigan_root_attack.w2ent", true ), ACSPlayerFixZAxis(position_3) );
			proj_3.DestroyAfter(5);	
			
			proj_4 = (W3ACSRootAttack)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\sprigan_root_attack.w2ent", true ), ACSPlayerFixZAxis(position_4) );
			proj_4.DestroyAfter(5);	
			
			proj_5 = (W3ACSRootAttack)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\sprigan_root_attack.w2ent", true ), ACSPlayerFixZAxis(position_5) );
			proj_5.DestroyAfter(5);	
			
			GetWitcherPlayer().RemoveTag('root_proj_begin');
			GetWitcherPlayer().RemoveTag('root_proj_1st');
			GetWitcherPlayer().RemoveTag('root_proj_2nd');
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_Giant_Shockwave_Mult()
{
	var vACS_Giant_Shockwave_Mult : cACS_Giant_Shockwave_Mult;
	vACS_Giant_Shockwave_Mult = new cACS_Giant_Shockwave_Mult in theGame;
			
	vACS_Giant_Shockwave_Mult.ACS_Giant_Shockwave_Mult_Engage();
}

statemachine class cACS_Giant_Shockwave_Mult
{
    function ACS_Giant_Shockwave_Mult_Engage()
	{
		this.PushState('ACS_Giant_Shockwave_Mult_Engage');
	}
}

state ACS_Giant_Shockwave_Mult_Engage in cACS_Giant_Shockwave_Mult
{
	private var proj_1 																																: W3ACSGiantShockwave;
	private var proj_2, proj_3, proj_4, proj_5																										: W3ACSSharleyShockwave;
	private var targetPosition_1, targetPosition_2, targetPosition_3, targetPosition_4, targetPosition_5, position									: Vector;
	private var actors																																: array<CActor>;
	private var i         																															: int;
	private var actortarget					       																									: CActor;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Giant_Shockwave();
	}

	entry function Giant_Shockwave()
	{
		if ( !theSound.SoundIsBankLoaded("monster_golem_dao.bnk") )
		{
			theSound.SoundLoadBank( "monster_golem_dao.bnk", false );
		}
		
		GetWitcherPlayer().SoundEvent("monster_golem_dao_cmb_swoosh_light");

		position = GetWitcherPlayer().GetWorldPosition() + (GetWitcherPlayer().GetWorldForward() * 1.1) + GetWitcherPlayer().GetHeadingVector() * 1.1;
		
		targetPosition_1 = position + GetWitcherPlayer().GetHeadingVector() * 30;
		
		targetPosition_2 = position + (GetWitcherPlayer().GetWorldRight() * -6.5) + GetWitcherPlayer().GetHeadingVector() * 30;
		
		targetPosition_3 = position + (GetWitcherPlayer().GetWorldRight() * 6.5) + GetWitcherPlayer().GetHeadingVector() * 30;
		
		targetPosition_4 = position + (GetWitcherPlayer().GetWorldRight() * -13) + GetWitcherPlayer().GetHeadingVector() * 30;
		
		targetPosition_5 = position + (GetWitcherPlayer().GetWorldRight() * 13) + GetWitcherPlayer().GetHeadingVector() * 30;
		
		if (!GetWitcherPlayer().HasTag('giant_shockwave_proj_begin') && !GetWitcherPlayer().HasTag('giant_shockwave_proj_1st') && !GetWitcherPlayer().HasTag('giant_shockwave_proj_2nd'))
		{
			actors.Clear();

			actors = GetWitcherPlayer().GetNPCsAndPlayersInCone(30, VecHeading(GetWitcherPlayer().GetHeadingVector()), 20, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors  );
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];
				
				if( actors.Size() > 0 )
				{
					if( !actortarget.IsImmuneToBuff( EET_HeavyKnockdown ) && !actortarget.HasBuff( EET_HeavyKnockdown ) ) 
					{ 
						actortarget.AddEffectDefault( EET_HeavyKnockdown, GetWitcherPlayer(), 'acs_weapon_effects' ); 
					}
				}
			}	
			
			proj_1 = (W3ACSGiantShockwave)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\giant_shockwave_proj.w2ent", true ), position );
			proj_1.Init(GetWitcherPlayer());
			proj_1.PlayEffectSingle('fire_line');
			proj_1.ShootProjectileAtPosition(0,	20, targetPosition_1, 30 );
			proj_1.DestroyAfter(2.5);
			
			GetWitcherPlayer().AddTag('giant_shockwave_proj_begin');
			GetWitcherPlayer().AddTag('giant_shockwave_proj_1st');

			actors.Clear();

			actors = GetActorsInRange(GetWitcherPlayer(), 10, 10, 'ACS_Stabbed', true);
		
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actors[i].BreakAttachment();
				actors[i].RemoveTag('ACS_Stabbed');
			}
		}
		else if (GetWitcherPlayer().HasTag('giant_shockwave_proj_begin') && GetWitcherPlayer().HasTag('giant_shockwave_proj_1st'))
		{
			actors.Clear();

			actors = GetWitcherPlayer().GetNPCsAndPlayersInCone(30, VecHeading(GetWitcherPlayer().GetHeadingVector()), 40, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors  );
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];
				
				if( actors.Size() > 0 )
				{
					if( !actortarget.IsImmuneToBuff( EET_HeavyKnockdown ) && !actortarget.HasBuff( EET_HeavyKnockdown ) ) 
					{ 
						actortarget.AddEffectDefault( EET_HeavyKnockdown, GetWitcherPlayer(), 'acs_weapon_effects' ); 
					}
				}
			}	
			
			proj_1 = (W3ACSGiantShockwave)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\giant_shockwave_proj.w2ent", true ), position );
			proj_1.Init(GetWitcherPlayer());
			proj_1.PlayEffectSingle('fire_line');
			proj_1.ShootProjectileAtPosition(0,	20, targetPosition_1, 30 );
			proj_1.DestroyAfter(2.5);
			
			proj_2 = (W3ACSSharleyShockwave)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\sharley_shockwave_proj.w2ent", true ), position );
			proj_2.Init(GetWitcherPlayer());
			proj_2.PlayEffectSingle('fire_line');
			proj_2.ShootProjectileAtPosition(0,	20, targetPosition_2, 30 );
			proj_2.DestroyAfter(2.5);		
			
			proj_3 = (W3ACSSharleyShockwave)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\sharley_shockwave_proj.w2ent", true ), position );
			proj_3.Init(GetWitcherPlayer());
			proj_3.PlayEffectSingle('fire_line');
			proj_3.ShootProjectileAtPosition(0,	20, targetPosition_3, 30 );
			proj_3.DestroyAfter(2.5);
			
			GetWitcherPlayer().RemoveTag('giant_shockwave_proj_1st');
			GetWitcherPlayer().AddTag('giant_shockwave_proj_2nd');

			actors.Clear();

			actors = GetActorsInRange(GetWitcherPlayer(), 10, 10, 'ACS_Stabbed', true);
		
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actors[i].BreakAttachment();
				actors[i].RemoveTag('ACS_Stabbed');
			}
		}
		else if (GetWitcherPlayer().HasTag('giant_shockwave_proj_begin') && GetWitcherPlayer().HasTag('giant_shockwave_proj_2nd'))
		{
			actors.Clear();

			actors = GetWitcherPlayer().GetNPCsAndPlayersInCone(30, VecHeading(GetWitcherPlayer().GetHeadingVector()), 80, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors  );
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];
				
				if( actors.Size() > 0 )
				{
					if( !actortarget.IsImmuneToBuff( EET_HeavyKnockdown ) && !actortarget.HasBuff( EET_HeavyKnockdown ) ) 
					{ 
						actortarget.AddEffectDefault( EET_HeavyKnockdown, GetWitcherPlayer(), 'acs_weapon_effects' ); 
					}
				}
			}	
			
			proj_1 = (W3ACSGiantShockwave)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\giant_shockwave_proj.w2ent", true ), position );
			proj_1.Init(GetWitcherPlayer());
			proj_1.PlayEffectSingle('fire_line');
			proj_1.ShootProjectileAtPosition(0,	20, targetPosition_1, 30 );
			proj_1.DestroyAfter(2.5);
			
			proj_2 = (W3ACSSharleyShockwave)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\sharley_shockwave_proj.w2ent", true ), position );
			proj_2.Init(GetWitcherPlayer());
			proj_2.PlayEffectSingle('fire_line');
			proj_2.ShootProjectileAtPosition(0,	20, targetPosition_2, 30 );
			proj_2.DestroyAfter(2.5);		
			
			proj_3 = (W3ACSSharleyShockwave)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\sharley_shockwave_proj.w2ent", true ), position );
			proj_3.Init(GetWitcherPlayer());
			proj_3.PlayEffectSingle('fire_line');
			proj_3.ShootProjectileAtPosition(0,	20, targetPosition_3, 30 );
			proj_3.DestroyAfter(2.5);
			
			proj_4 = (W3ACSSharleyShockwave)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\sharley_shockwave_proj.w2ent", true ), position );
			proj_4.Init(GetWitcherPlayer());
			proj_4.PlayEffectSingle('fire_line');
			proj_4.ShootProjectileAtPosition(0,	20, targetPosition_4, 30 );
			proj_4.DestroyAfter(2.5);
			
			proj_5 = (W3ACSSharleyShockwave)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\sharley_shockwave_proj.w2ent", true ), position );
			proj_5.Init(GetWitcherPlayer());
			proj_5.PlayEffectSingle('fire_line');
			proj_5.ShootProjectileAtPosition(0,	20, targetPosition_5, 30 );
			proj_5.DestroyAfter(2.5);
			
			GetWitcherPlayer().RemoveTag('giant_shockwave_proj_begin');
			GetWitcherPlayer().RemoveTag('giant_shockwave_proj_1st');
			GetWitcherPlayer().RemoveTag('giant_shockwave_proj_2nd');

			actors.Clear();

			actors = GetActorsInRange(GetWitcherPlayer(), 10, 10, 'ACS_Stabbed', true);
		
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actors[i].BreakAttachment();
				actors[i].RemoveTag('ACS_Stabbed');
			}
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}


function ACS_Giant_Shockwave()
{
	var vACS_Giant_Shockwave : cACS_Giant_Shockwave;
	vACS_Giant_Shockwave = new cACS_Giant_Shockwave in theGame;
			
	vACS_Giant_Shockwave.ACS_Giant_Shockwave_Engage();
}

statemachine class cACS_Giant_Shockwave
{
    function ACS_Giant_Shockwave_Engage()
	{
		this.PushState('ACS_Giant_Shockwave_Engage');
	}
}

state ACS_Giant_Shockwave_Engage in cACS_Giant_Shockwave
{
	private var proj_1																					: W3ACSSharleyShockwave;
	private var targetPosition_1, position																: Vector;
	private var actors																					: array<CActor>;
	private var i         																				: int;
	private var actortarget					       														: CActor;
	private var dmg																						: W3DamageAction;
	private var maxTargetVitality, maxTargetEssence, damageMax											: float;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Giant_Shockwave();
	}
	
	entry function Giant_Shockwave()
	{
		if ( !theSound.SoundIsBankLoaded("monster_golem_dao.bnk") )
		{
			theSound.SoundLoadBank( "monster_golem_dao.bnk", false );
		}
		
		GetWitcherPlayer().SoundEvent("monster_golem_dao_cmb_swoosh_light");

		position = GetWitcherPlayer().GetWorldPosition() + (GetWitcherPlayer().GetWorldForward() * 1.1) + GetWitcherPlayer().GetHeadingVector() * 1.1;
		
		targetPosition_1 = position + GetWitcherPlayer().GetHeadingVector() * 30;

		actors.Clear();

		actors = GetWitcherPlayer().GetNPCsAndPlayersInCone(5, VecHeading(GetWitcherPlayer().GetHeadingVector()), 60, 20, , FLAG_Attitude_Hostile + FLAG_OnlyAliveActors );
			
		for( i = 0; i < actors.Size(); i += 1 )
		{
			actortarget = (CActor)actors[i];
			
			if (actortarget.UsesVitality()) 
			{ 
				maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

				damageMax = maxTargetVitality * 0.05; 
			} 
			else if (actortarget.UsesEssence()) 
			{ 
				maxTargetEssence = actortarget.GetStatMax( BCS_Essence );
				
				damageMax = maxTargetEssence * 0.05; 
			} 

			dmg = new W3DamageAction in theGame.damageMgr;
			
			dmg.Initialize(GetWitcherPlayer(), actortarget, GetWitcherPlayer(), GetWitcherPlayer().GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
			
			dmg.SetProcessBuffsIfNoDamage(true);

			dmg.SetForceExplosionDismemberment();
			
			dmg.SetHitReactionType( EHRT_Heavy, true);
			
			dmg.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, damageMax );

			if( !actortarget.IsImmuneToBuff( EET_HeavyKnockdown ) && !actortarget.HasBuff( EET_HeavyKnockdown ) ) 
			{ 
				dmg.AddEffectInfo( EET_HeavyKnockdown, 0.1 );
			}
				
			theGame.damageMgr.ProcessAction( dmg );
				
			delete dmg;	
		}
			
		proj_1 = (W3ACSSharleyShockwave)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
			//"dlc\dlc_acs\data\entities\projectiles\giant_shockwave_proj.w2ent"

			"dlc\dlc_acs\data\entities\projectiles\sharley_shockwave_proj.w2ent"
			
			, true ), position );
		proj_1.Init(GetWitcherPlayer());
		proj_1.PlayEffectSingle('fire_line');
		proj_1.ShootProjectileAtPosition(0,	20, targetPosition_1, 30 );
		proj_1.DestroyAfter(2.5);
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_Spawn_Shades()
{
	var vACS_Spawn_Shades : cACS_Spawn_Shades;
	vACS_Spawn_Shades = new cACS_Spawn_Shades in theGame;
			
	vACS_Spawn_Shades.ACS_Spawn_Shades_Engage();
}

statemachine class cACS_Spawn_Shades
{
    function ACS_Spawn_Shades_Engage()
	{
		this.PushState('ACS_Spawn_Shades_Engage');
	}
}

state ACS_Spawn_Shades_Engage in cACS_Spawn_Shades
{
	private var shadeTemplate													: CEntityTemplate;
	private var shadeEntity														: CEntity;
	private var i, shadesCount													: int;
	private var playerPos, spawnPos												: Vector;
	private var randAngle, randRange, curPlayerVitality, maxPlayerVitality		: float;
	private var playerVitality 													: EBaseCharacterStats;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Spawn_Shades();
	}
	
	entry function Spawn_Shades()
	{
		GetWitcherPlayer().StopEffect('summon');
		GetWitcherPlayer().PlayEffectSingle('summon');

		shadeTemplate = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\monsters\q604_shade.w2ent", true );
		playerPos = GetWitcherPlayer().GetWorldPosition();
		
		playerVitality = BCS_Vitality;
		curPlayerVitality = GetWitcherPlayer().GetStat( BCS_Vitality );
		maxPlayerVitality = GetWitcherPlayer().GetStatMax( BCS_Vitality );
		
		if ( GetWitcherPlayer().GetLevel() <= 10 )
		{
			if ( curPlayerVitality <= maxPlayerVitality/2 )
			{
				shadesCount = 2;
			}
			else
			{
				shadesCount = 1;
			}
		}
		else if ( GetWitcherPlayer().GetLevel() > 10 && GetWitcherPlayer().GetLevel() <= 15 )
		{
			if ( curPlayerVitality <= maxPlayerVitality/2 )
			{
				shadesCount = 5;
			}
			else
			{
				shadesCount = 2;
			}
		}
		else if ( GetWitcherPlayer().GetLevel() > 15 && GetWitcherPlayer().GetLevel() <= 20 )
		{
			if ( curPlayerVitality <= maxPlayerVitality/2 )
			{
				shadesCount = 7;
			}
			else
			{
				shadesCount = 3;
			}
		}
		else if ( GetWitcherPlayer().GetLevel() > 20 && GetWitcherPlayer().GetLevel() <= 25 )
		{
			if ( curPlayerVitality <= maxPlayerVitality/2 )
			{
				shadesCount = 10;
			}
			else
			{
				shadesCount = 5;
			}
		}
		else if ( GetWitcherPlayer().GetLevel() > 25 )
		{
			if ( curPlayerVitality <= maxPlayerVitality/2 )
			{
				shadesCount = 15;
			}
			else
			{
				shadesCount = 7;
			}
		}
			
		for( i = 0; i < shadesCount; i += 1 )
		{
			randRange = 2.5 + 2.5 * RandF();
			randAngle = 2 * Pi() * RandF();
			
			spawnPos.X = randRange * CosF( randAngle ) + playerPos.X;
			spawnPos.Y = randRange * SinF( randAngle ) + playerPos.Y;
			spawnPos.Z = playerPos.Z;
			
			shadeEntity = theGame.CreateEntity( shadeTemplate, spawnPos, GetWitcherPlayer().GetWorldRotation() );
			shadeEntity.AddTag( 'ACS_caretaker_shade' );
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class cACS_Beam_Attack
{
    function ACS_Beam_Attack_Engage()
	{
		this.PushState('ACS_Beam_Attack_Engage');
	}
}

state ACS_Beam_Attack_Engage in cACS_Beam_Attack
{
	private var beam_anchor1																																		: CEntity;
	private var actortarget, actor, pActor																															: CActor;
	private var anchor_temp_1, anchor_temp_2																														: CEntityTemplate;
	private var dmg																																					: W3DamageAction;
	private var movementAdjustor1																																	: CMovementAdjustor;
	private var ticket1																																				: SMovementAdjustmentRequestTicket;
	private var i																																					: int;
	private var actors																																				: array<CActor>;
	private var curTargetVitality, curTargetEssence, maxTargetVitality, maxTargetEssence, missingTargetVitality, missingTargetEssence, damage						: float;
	private var targetVitality, targetEssence 																														: EBaseCharacterStats;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Beam_Attack();
	}
	
	entry function Beam_Attack()
	{	
		GetWitcherPlayer().StopEffect('lightning_djinn');
		
		GetWitcherPlayer().PlayEffectSingle('hit_lightning');
		GetWitcherPlayer().StopEffect('hit_lightning');
		
		pActor = GetWitcherPlayer();
		
		actor = (CActor)( GetWitcherPlayer().GetDisplayTarget() );
		
		anchor_temp_1 = (CEntityTemplate)LoadResourceAsync( "dlc\ep1\data\fx\glyphword\glyphword_6\glyphword_6.w2ent", true);
		
		anchor_temp_2 = (CEntityTemplate)LoadResourceAsync( "dlc\ep1\data\fx\runeword\runeword_1\runeword_1_aard.w2ent", true);
		
		targetVitality = BCS_Vitality;
		
		targetEssence = BCS_Essence;
		
		missingTargetVitality = actor.GetStatMax( BCS_Vitality ) - actor.GetStat( BCS_Vitality );
		
		missingTargetEssence = actor.GetStatMax( BCS_Essence ) - actor.GetStat( BCS_Essence );

		curTargetVitality = actor.GetStat( BCS_Vitality );

		curTargetEssence = actor.GetStat( BCS_Essence );
		
		maxTargetVitality = actor.GetStatMax( BCS_Vitality );
		
		maxTargetEssence = actor.GetStatMax( BCS_Essence );
		
		if (actor.UsesEssence())
		{
			if ( curTargetEssence <= maxTargetEssence * 0.01 )
			{
				damage = maxTargetEssence;
			}
			else
			{
				damage = 1 + curTargetEssence * 0.000625;
			}
		}
		else if (actor.UsesVitality())
		{
			if ( curTargetVitality <= maxTargetVitality * 0.01 )
			{
				damage = maxTargetVitality;
			}
			else
			{
				damage = 1 + curTargetVitality * 0.000625;
			}
		}
		
		if (GetWitcherPlayer().IsOnGround())
		{
			if( VecDistance2D( actor.GetWorldPosition(), GetWitcherPlayer().GetWorldPosition() ) <= 3.5 ) 
			{
				while (
				(theInput.GetActionValue('ThrowItem') > 0.5f || theInput.GetActionValue('ThrowItemHold') > 0.5f)
				&& GetWitcherPlayer().GetStat(BCS_Stamina) > 0
				) 
				{
					thePlayer.DrainStamina( ESAT_FixedValue, thePlayer.GetStatMax( BCS_Stamina ) * 0.005, 0.1 );

					if ((theInput.GetActionValue('ThrowItem') < -0.5f || theInput.GetActionValue('ThrowItemHold') < -0.5f))
					{
						break;
					}

					actors.Clear();

					actors = GetWitcherPlayer().GetNPCsAndPlayersInCone( 3.5, VecHeading(GetWitcherPlayer().GetHeadingVector()), 20, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors  );
					for( i = 0; i < actors.Size(); i += 1 )
					{
						actortarget = (CActor)actors[i];
						
						GetWitcherPlayer().GetRootAnimatedComponent().PlaySlotAnimationAsync ( 'utility_dodge_attack_ACS', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.15f, 1.0f));
							
						beam_anchor1 = theGame.CreateEntity(anchor_temp_1, actortarget.GetWorldPosition());
						beam_anchor1.CreateAttachment( actortarget, , Vector( 0, 0, 1.5 ) );	
						beam_anchor1.AddTag('beam_anchor');
						beam_anchor1.DestroyAfter(1.5);
							
						//GetWitcherPlayer().PlayEffectSingle('shout', beam_anchor1);
						//GetWitcherPlayer().StopEffect('shout');
						
						GetWitcherPlayer().PlayEffectSingle('toad_vomit', beam_anchor1);
						GetWitcherPlayer().StopEffect('toad_vomit');
							
						if (ACS_can_perform_beam_attack())
						{
							ACS_refresh_beam_attack_cooldown();

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(GetWitcherPlayer(), actortarget, GetWitcherPlayer(), GetWitcherPlayer().GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);

							dmg.AddDamage( theGame.params.DAMAGE_NAME_POISON, damage );

							dmg.AddEffectInfo( EET_Immobilized, 2 );
							dmg.AddEffectInfo( EET_Poison, 3 );
								
							theGame.damageMgr.ProcessAction( dmg );
													
							delete dmg;	
						}

						if (ACS_Armor_Equipped_Check())
						{
							if (thePlayer.GetStat(BCS_Vitality) < thePlayer.GetStatMax(BCS_Vitality))
							{
								thePlayer.GainStat(BCS_Vitality, thePlayer.GetStatMax(BCS_Vitality) * 0.00025);
							}
						}
					}

					SleepOneFrame();			
				}
			}
			else if( VecDistance2D( actor.GetWorldPosition(), GetWitcherPlayer().GetWorldPosition() ) > 3.5)
			{
				while (
				(theInput.GetActionValue('ThrowItem') > 0.5f || theInput.GetActionValue('ThrowItemHold') > 0.5f)
				&& GetWitcherPlayer().GetStat(BCS_Stamina) > 0
				) 
				{	
					thePlayer.DrainStamina( ESAT_FixedValue, thePlayer.GetStatMax( BCS_Stamina ) * 0.005, 0.1 );

					if ((theInput.GetActionValue('ThrowItem') < -0.5f || theInput.GetActionValue('ThrowItemHold') < -0.5f))
					{
						break;
					}

					GetWitcherPlayer().StopEffect('lightning_djinn');
					GetWitcherPlayer().StopEffect('lightning_djinn');
					
					movementAdjustor1 = GetWitcherPlayer().GetMovingAgentComponent().GetMovementAdjustor();
					movementAdjustor1.CancelByName( 'turn' );
					ticket1 = movementAdjustor1.CreateNewRequest( 'turn' );
					movementAdjustor1.AdjustmentDuration( ticket1, 0.1 );
						
					if (!GetWitcherPlayer().IsUsingHorse() && !GetWitcherPlayer().IsUsingVehicle()) {movementAdjustor1.RotateTowards( ticket1, actor );}  
				
					GetWitcherPlayer().GetRootAnimatedComponent().PlaySlotAnimationAsync ( 'locomotion_walkstart_forward_dettlaff_ACS', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.15f, 1.0f));

					actors.Clear();

					actors = GetWitcherPlayer().GetNPCsAndPlayersInCone( VecDistance2D( actor.GetWorldPosition(), GetWitcherPlayer().GetWorldPosition() ) , VecHeading(GetWitcherPlayer().GetHeadingVector()), 10, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors  );
					for( i = 0; i < actors.Size(); i += 1 )
					{
						actortarget = (CActor)actors[i];

						if (ACS_can_perform_beam_attack())
						{
							ACS_refresh_beam_attack_cooldown();

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(GetWitcherPlayer(), actortarget, GetWitcherPlayer(), GetWitcherPlayer().GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);

							dmg.AddDamage( theGame.params.DAMAGE_NAME_FIRE, damage );

							if( RandF() < 0.25 ) 
							{
								dmg.AddEffectInfo( EET_HeavyKnockdown, 0.5 );
								dmg.AddEffectInfo( EET_Burning, 0.1 );
							}

							theGame.damageMgr.ProcessAction( dmg );
													
							delete dmg;	
						}

						if (ACS_Armor_Equipped_Check())
						{
							if (thePlayer.GetStat(BCS_Vitality) < thePlayer.GetStatMax(BCS_Vitality))
							{
								thePlayer.GainStat(BCS_Vitality, thePlayer.GetStatMax(BCS_Vitality) * 0.00025);
							}
						}
					}
					
					beam_anchor1 = theGame.CreateEntity(anchor_temp_2, actor.GetWorldPosition());
					beam_anchor1.CreateAttachment( actor, , Vector( 0, 0, 1 ) );	
					beam_anchor1.AddTag('beam_anchor');
					beam_anchor1.DestroyAfter(1.5);
				
					GetWitcherPlayer().StopEffect('lightning_djinn');
					GetWitcherPlayer().StopEffect('lightning_djinn');
					GetWitcherPlayer().PlayEffectSingle('lightning_djinn', beam_anchor1);
					GetWitcherPlayer().StopEffect('lightning_djinn');
					GetWitcherPlayer().StopEffect('lightning_djinn');
								
					if (ACS_can_perform_beam_attack())
					{
						ACS_refresh_beam_attack_cooldown();

						dmg = new W3DamageAction in theGame.damageMgr;
						dmg.Initialize(GetWitcherPlayer(), actortarget, GetWitcherPlayer(), GetWitcherPlayer().GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
						dmg.SetProcessBuffsIfNoDamage(true);

						dmg.AddDamage( theGame.params.DAMAGE_NAME_FIRE, damage );

						if( RandF() < 0.25 ) 
						{
							dmg.AddEffectInfo( EET_HeavyKnockdown, 0.5 );
							dmg.AddEffectInfo( EET_Burning, 0.1 );
						}

						theGame.damageMgr.ProcessAction( dmg );
												
						delete dmg;	
					}
					
					SleepOneFrame();	
					
					GetWitcherPlayer().StopEffect('lightning_djinn');
				}
			}
			else
			{
				if (thePlayer.HasTag('ACS_IsSwordWalking')){thePlayer.RemoveTag('ACS_IsSwordWalking');}
				GetWitcherPlayer().RaiseEvent( 'CombatTaunt' );
			}
			
			GetWitcherPlayer().StopEffect('lightning_djinn');
		}
		else
		{
			GetWitcherPlayer().StopEffect('lightning_djinn');
			
			GetWitcherPlayer().PlayEffectSingle('djinn_default');
			GetWitcherPlayer().StopEffect('djinn_default');
			
			if( VecDistance2D( actor.GetWorldPosition(), GetWitcherPlayer().GetWorldPosition() ) <= 100 ) 
			{
				while (
				(theInput.GetActionValue('ThrowItem') > 0.5f || theInput.GetActionValue('ThrowItemHold') > 0.5f)
				&& GetWitcherPlayer().GetStat(BCS_Stamina) > 0
				) 
				{	
					thePlayer.DrainStamina( ESAT_FixedValue, thePlayer.GetStatMax( BCS_Stamina ) * 0.005, 0.1 );

					if ((theInput.GetActionValue('ThrowItem') < -0.5f || theInput.GetActionValue('ThrowItemHold') < -0.5f))
					{
						break;
					}

					//actors = GetActorsInRange(GetWitcherPlayer(), 20, 5);

					actors.Clear();

					actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 20, 5, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					for( i = 0; i < actors.Size(); i += 1 )
					{
						if 
						( 
						actors[i] == GetWitcherPlayer() 
						|| actors[i].HasTag('smokeman') 
						|| ((CNewNPC)(actors[i])).IsHorse() 
						|| actors[i].HasTag('ACS_Rat_Mage_Rat')
						|| actors[i].HasTag('ACS_Plumard')
						|| actors[i].HasTag('ACS_Tentacle_1') 
						|| actors[i].HasTag('ACS_Tentacle_2') 
						|| actors[i].HasTag('ACS_Tentacle_3') 
						|| actors[i].HasTag('ACS_Necrofiend_Tentacle_1') 
						|| actors[i].HasTag('ACS_Necrofiend_Tentacle_2') 
						|| actors[i].HasTag('ACS_Necrofiend_Tentacle_3') 
						|| actors[i].HasTag('ACS_Necrofiend_Tentacle_6')
						|| actors[i].HasTag('ACS_Necrofiend_Tentacle_5')
						|| actors[i].HasTag('ACS_Necrofiend_Tentacle_4') 
						|| actors[i].HasTag('ACS_Svalblod_Bossbar') 
						|| actors[i].HasTag('ACS_Melusine_Bossbar') 
						|| actors[i].HasTag('ACS_Vampire_Monster_Boss_Bar') 
						|| actors[i].HasAbility('animal_rat_base')
						)
						continue;

						actortarget = (CActor)actors[i];
						
						if( actors.Size() > 0 )
						{		
							if( ACS_AttitudeCheck ( actortarget ) && actortarget.IsAlive() )
							{
								beam_anchor1 = theGame.CreateEntity(anchor_temp_2, actortarget.GetWorldPosition());
								beam_anchor1.CreateAttachment( actortarget, , Vector( 0, 0, 1 ) );	
								beam_anchor1.AddTag('beam_anchor');
								beam_anchor1.DestroyAfter(0.1);
								
								GetWitcherPlayer().StopEffect('lightning_djinn');
								GetWitcherPlayer().StopEffect('lightning_djinn');
								GetWitcherPlayer().PlayEffectSingle('lightning_djinn', beam_anchor1);
								GetWitcherPlayer().StopEffect('lightning_djinn');
								GetWitcherPlayer().StopEffect('lightning_djinn');
								
								if (ACS_can_perform_beam_attack())
								{
									ACS_refresh_beam_attack_cooldown();

									dmg = new W3DamageAction in theGame.damageMgr;
									dmg.Initialize(GetWitcherPlayer(), actortarget, GetWitcherPlayer(), GetWitcherPlayer().GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
									dmg.SetProcessBuffsIfNoDamage(true);

									dmg.AddDamage( theGame.params.DAMAGE_NAME_FIRE, damage );

									if( RandF() < 0.25 ) 
									{
										dmg.AddEffectInfo( EET_HeavyKnockdown, 0.5 );
										dmg.AddEffectInfo( EET_Burning, 0.1 );
									}

									theGame.damageMgr.ProcessAction( dmg );
															
									delete dmg;	
								}

								if (ACS_Armor_Equipped_Check())
								{
									if (thePlayer.GetStat(BCS_Vitality) < thePlayer.GetStatMax(BCS_Vitality))
									{
										thePlayer.GainStat(BCS_Vitality, thePlayer.GetStatMax(BCS_Vitality) * 0.00025);
									}
								}
							}
						}
					}
					
					SleepOneFrame();
				}

				GetWitcherPlayer().StopEffect('lightning_djinn');
			}
			else
			{
				if (thePlayer.HasTag('ACS_IsSwordWalking')){thePlayer.RemoveTag('ACS_IsSwordWalking');}
				
				GetWitcherPlayer().RaiseEvent( 'CombatTaunt' );
			}
			
			GetWitcherPlayer().StopEffect('lightning_djinn');
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class cACS_Detonation_Weapon_Effects_Switch
{
    function ACS_Detonation_Weapon_Effects_Switch_Engage()
	{
		GetWitcherPlayer().PlayBattleCry( 'BattleCryAttack', 1, true, false );	
		this.PushState('ACS_Detonation_Weapon_Effects_Switch_Engage');
	}
}

state ACS_Detonation_Weapon_Effects_Switch_Engage in cACS_Detonation_Weapon_Effects_Switch
{
	private var weaponEntity, vfxEnt, vfxEnt_2, vfxEnt3		: CEntity;
	private var weaponSlotMatrix 							: Matrix;
	private var fxPos 										: Vector;
	private var fxRot 										: EulerAngles;
	private var targets 									: array<CGameplayEntity>;
	private var dist, ang									: float;
	private var pos, targetPos								: Vector;
	private var targetRot 									: EulerAngles;
	private var i											: int;
	private var npc 										: CNewNPC;
	
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Detonation_Weapon_Effects_Switch();
	}
	
	/*
	entry function Detonation_Weapon_Effects_Switch()
	{	
		weaponEntity = GetWitcherPlayer().GetInventory().GetItemEntityUnsafe(GetWitcherPlayer().GetInventory().GetItemFromSlot('r_weapon'));
		weaponEntity.CalcEntitySlotMatrix('blood_fx_point', weaponSlotMatrix);
		
		fxPos = MatrixGetTranslation(weaponSlotMatrix);
		fxRot = weaponEntity.GetWorldRotation();
		
		if ( GetWitcherPlayer().HasTag('acs_aard_sword_equipped') )
		{
			vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "fx\monsters\arachas\arachas_poison_cloud.w2ent", true ), fxPos, GetWitcherPlayer().GetWorldRotation() );
			vfxEnt.PlayEffectSingle('poison_cloud');
			vfxEnt.DestroyAfter(2.5);
		}
		else if ( GetWitcherPlayer().HasTag('acs_aard_secondary_sword_equipped') )
		{
			vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_2\mutation_2_explode.w2ent", true ), fxPos, fxRot );
			vfxEnt.PlayEffectSingle('mutation_2_igni');
			vfxEnt.DestroyAfter(1.5);
		}
		else if ( GetWitcherPlayer().HasTag('acs_axii_secondary_sword_equipped') )
		{
			vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_2\mutation_2_explode.w2ent", true ), fxPos, fxRot );
			vfxEnt.PlayEffectSingle('mutation_2_aard_b');
			vfxEnt.DestroyAfter(1.5);
		}
		else if ( GetWitcherPlayer().HasTag('acs_igni_secondary_sword_equipped') )
		{
			vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\ep1\data\fx\glyphword\glyphword_20\glyphword_20_explode.w2ent", true ), fxPos, fxRot );
			vfxEnt.PlayEffectSingle('explode');
			vfxEnt.DestroyAfter(2.5);
		}
	}
	*/

	entry function Detonation_Weapon_Effects_Switch()
	{
		if (!thePlayer.IsPerformingFinisher())
		{
			if ( thePlayer.IsWeaponHeld( 'fist' ) )
			{
				dist = 1.125;
				ang = 30;

				if ( thePlayer.HasTag('acs_vampire_claws_equipped') )
				{
					dist += 0.125;
					ang += 30;

					if ( thePlayer.HasBuff(EET_BlackBlood))
					{
						dist += 1.75;
						ang += 30;
					}

					if ( thePlayer.HasBuff(EET_Mutagen22) || ACS_Armor_Equipped_Check())
					{
						dist += 2.75;
						ang += 60;
					}
				}
			}
			else
			{
				if ( 
				thePlayer.HasTag('acs_igni_sword_equipped_TAG') 
				|| thePlayer.HasTag('acs_igni_sword_equipped') 
				)
				{
					dist = 1.5;
					ang =	70;

					if(  thePlayer.IsDoingSpecialAttack( false ) )
					{
						ang +=	315;
					}

					if( thePlayer.HasAbility('Runeword 2 _Stats', true) )
					{
						if(  thePlayer.IsDoingSpecialAttack( false ) )
						{
							dist += 1.1;
						}
						else if(  thePlayer.IsDoingSpecialAttack( true ) )
						{
							dist += 1.9;
						}
					}
				}
				else if ( thePlayer.HasTag('acs_igni_secondary_sword_equipped_TAG') 
				|| thePlayer.HasTag('acs_igni_secondary_sword_equipped') 
				)
				{
					dist = 1.5;
					ang =	70;

					if(  thePlayer.IsDoingSpecialAttack( false ) )
					{
						ang +=	315;
					}

					if( thePlayer.HasAbility('Runeword 2 _Stats', true) )
					{
						if(  thePlayer.IsDoingSpecialAttack( false ) )
						{
							dist += 1.1;
						}
						else if(  thePlayer.IsDoingSpecialAttack( true ) )
						{
							dist += 1.9;
						}
					}
				}
				else if ( thePlayer.HasTag('acs_axii_sword_equipped') )
				{
					dist = 1.6;
					ang =	70;	

					if (thePlayer.HasTag('ACS_Sparagmos_Active'))
					{
						dist += 10;
						ang +=	30;
					}
				}
				else if ( thePlayer.HasTag('acs_axii_secondary_sword_equipped') )
				{
					if ( 
					ACS_GetWeaponMode() == 0
					|| ACS_GetWeaponMode() == 1
					|| ACS_GetWeaponMode() == 2
					)
					{
						dist = 2.25;
						ang =	70;
					}
					else if ( ACS_GetWeaponMode() == 3 )
					{ 
						dist = 1.75;
						ang =	70;
					}
				}
				else if ( thePlayer.HasTag('acs_aard_sword_equipped') )
				{
					if (thePlayer.HasTag('ACS_Chain_Weapon_Expand')) 
					{
						dist = 7.5;
						ang =	90;	
					}
					else
					{
						dist = 2;
						ang =	75;	
					}
				}
				else if ( thePlayer.HasTag('acs_aard_secondary_sword_equipped') )
				{
					dist = 2;
					ang = 70;
				}
				else if ( thePlayer.HasTag('acs_yrden_sword_equipped') )
				{
					if ( ACS_GetWeaponMode() == 0 )
					{
						if (ACS_Settings_Main_Int('EHmodArmigerModeSettings','EHmodArmigerModeWeaponType', 0) == 0)
						{
							dist = 2.5;
							ang = 70;
						}
						else 
						{
							dist = 2;
							ang = 70;
						}
					}
					else if ( ACS_GetWeaponMode() == 1 )
					{
						if (ACS_Settings_Main_Int('EHmodFocusModeSettings','EHmodFocusModeWeaponType', 0) == 0)
						{
							dist = 2.5;
							ang = 70;
						}
						else 
						{
							dist = 2;
							ang = 70;
						}
					}
					else if ( ACS_GetWeaponMode() == 2 )
					{
						if (ACS_Settings_Main_Int('EHmodHybridModeSettings','EHmodHybridModeWeaponType', 0) == 0)
						{
							dist = 2.5;
							ang = 70;
						}
						else 
						{
							dist = 2;
							ang = 70;
						}
					}
					else if ( ACS_GetWeaponMode() == 3 )
					{
						dist = 2.5;
						ang = 70;
					}
				}
				else if ( thePlayer.HasTag('acs_yrden_secondary_sword_equipped') )
				{
					dist = 3.5;
					ang =	180;
				}
				else if ( thePlayer.HasTag('acs_quen_sword_equipped') )
				{
					dist = 1.6;
					ang =	70;

					if (thePlayer.HasTag('ACS_Shadow_Dash_Empowered'))
					{
						ang +=	320;
					}
				}
				else if ( thePlayer.HasTag('acs_quen_secondary_sword_equipped') )
				{
					if (thePlayer.HasTag('ACS_Storm_Spear_Active'))
					{
						dist = 10;
						ang =	30;
					}
					else
					{
						dist = 2.25;
						ang =	70;
					}
				}
				else 
				{
					dist = 1.25;
					ang = 30;
				}

				if (ACS_Armor_Equipped_Check())
				{
					if( thePlayer.HasAbility('Runeword 2 _Stats', true) )
					{
						if( !thePlayer.IsDoingSpecialAttack( false )
						&& !thePlayer.IsDoingSpecialAttack( true ) )
						{
							dist += 1.5;
						}
					}
					else
					{
						dist += 1.5;
					}
				}
			}

			if ( thePlayer.GetTarget() == ACSGetCActor('ACS_Big_Boi') )
			{
				dist += 0.75;
				ang += 15;

				if (((CNewNPC)thePlayer.GetTarget()).IsFlying())
				{
					dist += 1.25;
					ang += 15;
				}
			}

			if (ACS_Settings_Main_Float('EHmodVisualSettings','EHmodPlayerScale', 1) > 1)
			{
				dist += ACS_Settings_Main_Float('EHmodVisualSettings','EHmodPlayerScale', 1) * 0.75;
			}
			else if (ACS_Settings_Main_Float('EHmodVisualSettings','EHmodPlayerScale', 1) < 1)
			{
				dist -= ACS_Settings_Main_Float('EHmodVisualSettings','EHmodPlayerScale', 1) * 0.5;
			}

			if( thePlayer.HasAbility('Runeword 2 _Stats', true) 
			&& !thePlayer.HasTag('acs_igni_sword_equipped') 
			&& !thePlayer.HasTag('acs_igni_secondary_sword_equipped') 
			&& !ACS_Armor_Equipped_Check())
			{
				dist += 1;
			}

			if (thePlayer.IsUsingHorse()) 
			{
				dist += 1.5;

				ang += 270;
			}

			if (thePlayer.HasTag('ACS_In_Ciri_Special_Attack'))
			{
				dist += 1.5;

				ang += 315;
			}

			if (thePlayer.HasTag('ACS_In_Dance_Of_Wrath'))
			{
				dist += 1.5;

				ang += 315;
			}

			if (ACS_Bear_School_Check())
			{
				dist += 0.5;
				ang +=	15;

				if (thePlayer.HasTag('ACS_Bear_Special_Attack'))
				{
					dist += 1.5;
				}
			}

			if (ACS_Griffin_School_Check()
			&& thePlayer.HasTag('ACS_Griffin_Special_Attack'))
			{
				dist += 2;
				ang +=	15;
			}

			if (ACS_Manticore_School_Check())
			{
				dist += 0.5;

				if (thePlayer.HasTag('ACS_Manticore_Special_Attack'))
				{
					dist += 1.5;
				}
			}

			if (ACS_Viper_School_Check())
			{
				if (thePlayer.HasTag('ACS_Viper_Special_Attack'))
				{
					dist += 1.5;
				}
			}
		}
		else 
		{
			dist = 1.125;
			ang = 30;
		}

		targets.Clear();

		FindGameplayEntitiesInCone( targets, GetWitcherPlayer().GetWorldPosition(), VecHeading( GetWitcherPlayer().GetWorldForward() ), ang, dist, 999,,FLAG_ExcludePlayer + FLAG_OnlyAliveActors );
		pos = GetWitcherPlayer().GetWorldPosition();
		pos.Z += 0.8;
		for( i = targets.Size()-1; i >= 0; i -= 1 ) 
		{	
			npc = (CNewNPC)targets[i];

			targetPos = npc.GetWorldPosition();
			targetPos.Z += 1.5;

			targetRot = npc.GetWorldRotation();
			targetRot.Yaw = RandRangeF(360,1);
			targetRot.Pitch = RandRangeF(45,-45);

			if 
			( 
			npc == GetWitcherPlayer() 
			|| npc.HasTag('smokeman') 
			|| npc.IsHorse() 
			|| npc.HasTag('ACS_Rat_Mage_Rat')
			|| npc.HasTag('ACS_Plumard')
			|| npc.HasTag('ACS_Tentacle_1') 
			|| npc.HasTag('ACS_Tentacle_2') 
			|| npc.HasTag('ACS_Tentacle_3') 
			|| npc.HasTag('ACS_Necrofiend_Tentacle_1') 
			|| npc.HasTag('ACS_Necrofiend_Tentacle_2') 
			|| npc.HasTag('ACS_Necrofiend_Tentacle_3') 
			|| npc.HasTag('ACS_Necrofiend_Tentacle_6')
			|| npc.HasTag('ACS_Necrofiend_Tentacle_5')
			|| npc.HasTag('ACS_Necrofiend_Tentacle_4') 
			|| npc.HasTag('ACS_Svalblod_Bossbar') 
			|| npc.HasTag('ACS_Melusine_Bossbar') 
			|| npc.HasTag('ACS_Vampire_Monster_Boss_Bar') 
			|| npc.HasAbility('animal_rat_base')
			)
				continue;

			if( targets.Size() > 0 )
			{				
				if( ACS_AttitudeCheck ( (CActor)targets[i] ) && npc.IsAlive() )
				{
					if ( GetWitcherPlayer().HasTag('acs_aard_sword_equipped') )
					{
						vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_1\mutation_1_hit.w2ent", true ), fxPos, fxRot );
						vfxEnt.PlayEffectSingle('mutation_1_hit_aard');
						vfxEnt.DestroyAfter(1.5);
					}
					else if ( GetWitcherPlayer().HasTag('acs_aard_secondary_sword_equipped') )
					{
						vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_1\mutation_1_hit.w2ent", true ), fxPos, fxRot );
						vfxEnt.PlayEffectSingle('mutation_1_hit_aard');
						vfxEnt.DestroyAfter(1.5);
					}
					else if ( GetWitcherPlayer().HasTag('acs_quen_sword_equipped') )
					{
						vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_2\mutation_2_explode.w2ent", true ), targetPos, targetRot );
						vfxEnt.PlayEffectSingle('mutation_2_quen');
						vfxEnt.DestroyAfter(1.5);
					}
					else if ( GetWitcherPlayer().HasTag('acs_quen_secondary_sword_equipped') )
					{
						vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_2\mutation_2_explode.w2ent", true ), targetPos, targetRot );
						vfxEnt.PlayEffectSingle('mutation_2_quen');
						vfxEnt.DestroyAfter(1.5);
					}
					else if ( GetWitcherPlayer().HasTag('acs_axii_sword_equipped') )
					{
						vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_2\mutation_2_explode.w2ent", true ), targetPos, targetRot );
						vfxEnt.PlayEffectSingle('mutation_2_aard_b');
						vfxEnt.DestroyAfter(1.5);
					}
					else if ( GetWitcherPlayer().HasTag('acs_axii_secondary_sword_equipped') )
					{
						vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_2\mutation_2_explode.w2ent", true ), targetPos, targetRot );
						vfxEnt.PlayEffectSingle('mutation_2_aard_b');
						vfxEnt.DestroyAfter(1.5);
					}
					else if ( GetWitcherPlayer().HasTag('acs_yrden_sword_equipped') )
					{
						vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_2\mutation_2_explode.w2ent", true ), targetPos, targetRot );
						vfxEnt.PlayEffectSingle('mutation_2_yrden');
						vfxEnt.DestroyAfter(1.5);
					}
					else if ( GetWitcherPlayer().HasTag('acs_yrden_secondary_sword_equipped') )
					{
						vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_2\mutation_2_explode.w2ent", true ), targetPos, targetRot );
						vfxEnt.PlayEffectSingle('mutation_2_yrden');
						vfxEnt.DestroyAfter(1.5);
					}
					else if ( GetWitcherPlayer().HasTag('acs_igni_secondary_sword_equipped_TAG') )
					{
						vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_2\mutation_2_explode.w2ent", true ), targetPos, targetRot );
						vfxEnt.PlayEffectSingle('mutation_2_igni');
						vfxEnt.DestroyAfter(1.5);

						vfxEnt_2 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\ep1\data\fx\glyphword\glyphword_20\glyphword_20_explode.w2ent", true ), targetPos, targetRot );
						vfxEnt_2.PlayEffectSingle('explode');
						vfxEnt_2.DestroyAfter(2.5);
					}
				}
			}
		}	
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class cACS_Passive_Weapon_Effects_Switch
{
    function ACS_Passive_Weapon_Effects_Switch_Engage()
	{
		this.PushState('ACS_Passive_Weapon_Effects_Switch_Engage');
	}
}

state ACS_Passive_Weapon_Effects_Switch_Engage in cACS_Passive_Weapon_Effects_Switch
{
	private var weaponEntity, vfxEnt, vfxEnt2, vfxEnt3, vfxEnt4			: CEntity;
	private var weaponSlotMatrix 										: Matrix;
	private var fxPos 													: Vector;
	private var fxRot 													: EulerAngles;
	private var targets 												: array<CGameplayEntity>;
	private var dist, ang												: float;
	private var pos, targetPos											: Vector;
	private var targetRot 												: EulerAngles;
	private var i														: int;
	private var npc     												: CNewNPC;
	private var maxAdrenaline											: float;
	private var curAdrenaline											: float;
	
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Passive_Weapon_Effects_Switch();
	}

	entry function Passive_Weapon_Effects_Switch()
	{
		maxAdrenaline = GetWitcherPlayer().GetStatMax(BCS_Focus);
		
		curAdrenaline = GetWitcherPlayer().GetStat(BCS_Focus);

		targets.Clear();

		if (!thePlayer.IsPerformingFinisher())
		{
			if ( thePlayer.IsWeaponHeld( 'fist' ) )
			{
				dist = 1.125;
				ang = 30;

				if ( thePlayer.HasTag('acs_vampire_claws_equipped') )
				{
					dist += 0.125;
					ang += 30;

					if ( thePlayer.HasBuff(EET_BlackBlood))
					{
						dist += 1.75;
						ang += 30;
					}

					if ( thePlayer.HasBuff(EET_Mutagen22) || ACS_Armor_Equipped_Check())
					{
						dist += 2.75;
						ang += 60;
					}
				}
			}
			else
			{
				if ( 
				thePlayer.HasTag('acs_igni_sword_equipped_TAG') 
				|| thePlayer.HasTag('acs_igni_sword_equipped') 
				)
				{
					dist = 1.5;
					ang =	70;

					if(  thePlayer.IsDoingSpecialAttack( false ) )
					{
						ang +=	315;
					}

					if( thePlayer.HasAbility('Runeword 2 _Stats', true) )
					{
						if(  thePlayer.IsDoingSpecialAttack( false ) )
						{
							dist += 1.1;
						}
						else if(  thePlayer.IsDoingSpecialAttack( true ) )
						{
							dist += 1.9;
						}
					}
				}
				else if ( thePlayer.HasTag('acs_igni_secondary_sword_equipped_TAG') 
				|| thePlayer.HasTag('acs_igni_secondary_sword_equipped') 
				)
				{
					dist = 1.5;
					ang =	70;

					if(  thePlayer.IsDoingSpecialAttack( false ) )
					{
						ang +=	315;
					}

					if( thePlayer.HasAbility('Runeword 2 _Stats', true) )
					{
						if(  thePlayer.IsDoingSpecialAttack( false ) )
						{
							dist += 1.1;
						}
						else if(  thePlayer.IsDoingSpecialAttack( true ) )
						{
							dist += 1.9;
						}
					}
				}
				else if ( thePlayer.HasTag('acs_axii_sword_equipped') )
				{
					dist = 1.6;
					ang =	70;	

					if (thePlayer.HasTag('ACS_Sparagmos_Active'))
					{
						dist += 10;
						ang +=	30;
					}
				}
				else if ( thePlayer.HasTag('acs_axii_secondary_sword_equipped') )
				{
					if ( 
					ACS_GetWeaponMode() == 0
					|| ACS_GetWeaponMode() == 1
					|| ACS_GetWeaponMode() == 2
					)
					{
						dist = 2.25;
						ang =	70;
					}
					else if ( ACS_GetWeaponMode() == 3 )
					{ 
						dist = 1.75;
						ang =	70;
					}
				}
				else if ( thePlayer.HasTag('acs_aard_sword_equipped') )
				{
					if (thePlayer.HasTag('ACS_Chain_Weapon_Expand')) 
					{
						dist = 7.5;
						ang =	90;	
					}
					else
					{
						dist = 2;
						ang =	75;	
					}
				}
				else if ( thePlayer.HasTag('acs_aard_secondary_sword_equipped') )
				{
					dist = 2;
					ang = 70;
				}
				else if ( thePlayer.HasTag('acs_yrden_sword_equipped') )
				{
					if ( ACS_GetWeaponMode() == 0 )
					{
						if (ACS_Settings_Main_Int('EHmodArmigerModeSettings','EHmodArmigerModeWeaponType', 0) == 0)
						{
							dist = 2.5;
							ang = 70;
						}
						else 
						{
							dist = 2;
							ang = 70;
						}
					}
					else if ( ACS_GetWeaponMode() == 1 )
					{
						if (ACS_Settings_Main_Int('EHmodFocusModeSettings','EHmodFocusModeWeaponType', 0) == 0)
						{
							dist = 2.5;
							ang = 70;
						}
						else 
						{
							dist = 2;
							ang = 70;
						}
					}
					else if ( ACS_GetWeaponMode() == 2 )
					{
						if (ACS_Settings_Main_Int('EHmodHybridModeSettings','EHmodHybridModeWeaponType', 0) == 0)
						{
							dist = 2.5;
							ang = 70;
						}
						else 
						{
							dist = 2;
							ang = 70;
						}
					}
					else if ( ACS_GetWeaponMode() == 3 )
					{
						dist = 2.5;
						ang = 70;
					}
				}
				else if ( thePlayer.HasTag('acs_yrden_secondary_sword_equipped') )
				{
					dist = 3.5;
					ang =	180;
				}
				else if ( thePlayer.HasTag('acs_quen_sword_equipped') )
				{
					dist = 1.6;
					ang =	70;

					if (thePlayer.HasTag('ACS_Shadow_Dash_Empowered'))
					{
						ang +=	320;
					}
				}
				else if ( thePlayer.HasTag('acs_quen_secondary_sword_equipped') )
				{
					if (thePlayer.HasTag('ACS_Storm_Spear_Active'))
					{
						dist = 10;
						ang =	30;
					}
					else
					{
						dist = 2.25;
						ang =	70;
					}
				}
				else 
				{
					dist = 1.25;
					ang = 30;
				}

				if (ACS_Armor_Equipped_Check())
				{
					if( thePlayer.HasAbility('Runeword 2 _Stats', true) )
					{
						if( !thePlayer.IsDoingSpecialAttack( false )
						&& !thePlayer.IsDoingSpecialAttack( true ) )
						{
							dist += 1.5;
						}
					}
					else
					{
						dist += 1.5;
					}
				}
			}

			if ( thePlayer.GetTarget() == ACSGetCActor('ACS_Big_Boi') )
			{
				dist += 0.75;
				ang += 15;

				if (((CNewNPC)thePlayer.GetTarget()).IsFlying())
				{
					dist += 1.25;
					ang += 15;
				}
			}

			if (ACS_Settings_Main_Float('EHmodVisualSettings','EHmodPlayerScale', 1) > 1)
			{
				dist += ACS_Settings_Main_Float('EHmodVisualSettings','EHmodPlayerScale', 1) * 0.75;
			}
			else if (ACS_Settings_Main_Float('EHmodVisualSettings','EHmodPlayerScale', 1) < 1)
			{
				dist -= ACS_Settings_Main_Float('EHmodVisualSettings','EHmodPlayerScale', 1) * 0.5;
			}

			if( thePlayer.HasAbility('Runeword 2 _Stats', true) 
			&& !thePlayer.HasTag('acs_igni_sword_equipped') 
			&& !thePlayer.HasTag('acs_igni_secondary_sword_equipped') 
			&& !ACS_Armor_Equipped_Check())
			{
				dist += 1;
			}

			if (thePlayer.IsUsingHorse()) 
			{
				dist += 1.5;

				ang += 270;
			}

			if (thePlayer.HasTag('ACS_In_Ciri_Special_Attack'))
			{
				dist += 1.5;

				ang += 315;
			}

			if (thePlayer.HasTag('ACS_In_Dance_Of_Wrath'))
			{
				dist += 1.5;

				ang += 315;
			}

			if (ACS_Bear_School_Check())
			{
				dist += 0.5;
				ang +=	15;

				if (thePlayer.HasTag('ACS_Bear_Special_Attack'))
				{
					dist += 1.5;
				}
			}

			if (ACS_Griffin_School_Check()
			&& thePlayer.HasTag('ACS_Griffin_Special_Attack'))
			{
				dist += 2;
				ang +=	15;
			}

			if (ACS_Manticore_School_Check())
			{
				dist += 0.5;

				if (thePlayer.HasTag('ACS_Manticore_Special_Attack'))
				{
					dist += 1.5;
				}
			}

			if (ACS_Viper_School_Check())
			{
				if (thePlayer.HasTag('ACS_Viper_Special_Attack'))
				{
					dist += 1.5;
				}
			}
		}
		else 
		{
			dist = 1.125;
			ang = 30;
		}

		FindGameplayEntitiesInCone( targets, GetWitcherPlayer().GetWorldPosition(), VecHeading( GetWitcherPlayer().GetWorldForward() ), ang, dist, 999,,FLAG_ExcludePlayer + FLAG_OnlyAliveActors );
		pos = GetWitcherPlayer().GetWorldPosition();
		pos.Z += 0.8;
		for( i = targets.Size()-1; i >= 0; i -= 1 ) 
		{	
			npc = (CNewNPC)targets[i];

			targetPos = npc.GetWorldPosition();
			targetPos.Z += 1.5;

			targetRot = npc.GetWorldRotation();
			targetRot.Yaw += RandRangeF(360,1);
			targetRot.Pitch += RandRangeF(360,1);
			targetRot.Roll += RandRangeF(360,1);

			if 
			( 
			npc == GetWitcherPlayer() 
			|| npc.HasTag('smokeman') 
			|| npc.IsHorse() 
			|| npc.HasTag('ACS_Rat_Mage_Rat')
			|| npc.HasTag('ACS_Plumard')
			|| npc.HasTag('ACS_Tentacle_1') 
			|| npc.HasTag('ACS_Tentacle_2') 
			|| npc.HasTag('ACS_Tentacle_3') 
			|| npc.HasTag('ACS_Necrofiend_Tentacle_1') 
			|| npc.HasTag('ACS_Necrofiend_Tentacle_2') 
			|| npc.HasTag('ACS_Necrofiend_Tentacle_3') 
			|| npc.HasTag('ACS_Necrofiend_Tentacle_6')
			|| npc.HasTag('ACS_Necrofiend_Tentacle_5')
			|| npc.HasTag('ACS_Necrofiend_Tentacle_4') 
			|| npc.HasTag('ACS_Svalblod_Bossbar') 
			|| npc.HasTag('ACS_Melusine_Bossbar') 
			|| npc.HasTag('ACS_Vampire_Monster_Boss_Bar') 
			|| npc.HasAbility('animal_rat_base')
			)
				continue;

			if( targets.Size() > 0 )
			{				
				if( ACS_AttitudeCheck ( (CActor)targets[i] ) && npc.IsAlive() )
				{
					if( ACS_Settings_Main_Bool('EHmodCombatMainSettings','EHmodOnHitEffects', false) )
					{
						if ( ACS_GetWeaponMode() == 0 )
						{
							if ( !GetWitcherPlayer().IsWeaponHeld( 'fist' ) )
							{
								if (GetWitcherPlayer().GetEquippedSign() == ST_Igni)
								{
									if ( GetWitcherPlayer().HasTag('acs_yrden_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_axii_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_quen_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_igni_sword_equipped_TAG')
									)
									{
										vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_1\mutation_1_hit.w2ent", true ), targetPos, targetRot );
										vfxEnt.PlayEffectSingle('mutation_1_hit_igni');
										vfxEnt.DestroyAfter(1.5);
									}
									else if ( GetWitcherPlayer().HasTag('acs_aard_secondary_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_yrden_secondary_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_axii_secondary_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_quen_secondary_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_igni_secondary_sword_equipped_TAG')
									)
									{
										vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_2\mutation_2_critical_force.w2ent", true ), targetPos, targetRot );
										vfxEnt.PlayEffectSingle('critical_igni');
										vfxEnt.DestroyAfter(1.5);
									}
									else if (GetWitcherPlayer().HasTag('acs_aard_sword_equipped'))
									{
										if( ((CNewNPC)npc).GetBloodType() == BT_Red) 
										{
											vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\blood_fx.w2ent", true ), targetPos, targetRot );
											vfxEnt.PlayEffectSingle('blood_explode_red');
											vfxEnt.DestroyAfter(1.5);
										}
									}
								}
								else if (GetWitcherPlayer().GetEquippedSign() == ST_Quen)
								{
									if ( GetWitcherPlayer().HasTag('acs_yrden_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_axii_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_quen_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_igni_sword_equipped_TAG')
									)
									{
										vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_1\mutation_1_hit.w2ent", true ), targetPos, targetRot );
										vfxEnt.PlayEffectSingle('mutation_1_hit_quen');
										vfxEnt.DestroyAfter(1.5);
									}
									else if ( GetWitcherPlayer().HasTag('acs_aard_secondary_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_yrden_secondary_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_axii_secondary_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_quen_secondary_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_igni_secondary_sword_equipped_TAG')
									)
									{
										vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_1\mutation_1_hit.w2ent", true ), targetPos, targetRot );
										vfxEnt.PlayEffectSingle('mutation_1_hit_quen');
										vfxEnt.DestroyAfter(1.5);
									}
									else if (GetWitcherPlayer().HasTag('acs_aard_sword_equipped'))
									{
										if( ((CNewNPC)npc).GetBloodType() == BT_Red) 
										{
											vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\blood_fx.w2ent", true ), targetPos, targetRot );
											vfxEnt.PlayEffectSingle('blood_explode_red');
											vfxEnt.DestroyAfter(1.5);
										}
									}
								}
								else if (GetWitcherPlayer().GetEquippedSign() == ST_Aard)
								{
									if ( GetWitcherPlayer().HasTag('acs_yrden_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_axii_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_quen_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_igni_sword_equipped_TAG')
									)
									{
										vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_1\mutation_1_hit.w2ent", true ), targetPos, targetRot );
										vfxEnt.PlayEffectSingle('mutation_1_hit_aard');
										vfxEnt.DestroyAfter(1.5);
									}
									else if ( GetWitcherPlayer().HasTag('acs_aard_secondary_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_yrden_secondary_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_axii_secondary_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_quen_secondary_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_igni_secondary_sword_equipped_TAG')
									)
									{
										vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_1\mutation_1_hit.w2ent", true ), targetPos, targetRot );
										vfxEnt.PlayEffectSingle('mutation_1_hit_aard');
										vfxEnt.DestroyAfter(1.5);
									}
									else if (GetWitcherPlayer().HasTag('acs_aard_sword_equipped'))
									{
										if( ((CNewNPC)npc).GetBloodType() == BT_Red) 
										{
											vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\blood_fx.w2ent", true ), targetPos, targetRot );
											vfxEnt.PlayEffectSingle('blood_explode_red');
											vfxEnt.DestroyAfter(1.5);
										}
									}
								}
								else if (GetWitcherPlayer().GetEquippedSign() == ST_Axii)
								{
									if ( GetWitcherPlayer().HasTag('acs_yrden_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_axii_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_quen_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_igni_sword_equipped_TAG')
									)
									{
										vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_2\mutation_2_critical_force.w2ent", true ), targetPos, targetRot );
										vfxEnt.PlayEffectSingle('critical_aard');
										vfxEnt.DestroyAfter(1.5);
									}
									else if ( GetWitcherPlayer().HasTag('acs_aard_secondary_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_yrden_secondary_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_axii_secondary_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_quen_secondary_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_igni_secondary_sword_equipped_TAG')
									)
									{
										vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_2\mutation_2_critical_force.w2ent", true ), targetPos, targetRot );
										vfxEnt.PlayEffectSingle('critical_aard');
										vfxEnt.DestroyAfter(1.5);
									}
									else if (GetWitcherPlayer().HasTag('acs_aard_sword_equipped'))
									{
										if( ((CNewNPC)npc).GetBloodType() == BT_Red) 
										{
											vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\blood_fx.w2ent", true ), targetPos, targetRot );
											vfxEnt.PlayEffectSingle('blood_explode_red');
											vfxEnt.DestroyAfter(1.5);
										}
									}
								}
								else if (GetWitcherPlayer().GetEquippedSign() == ST_Yrden)
								{
									if ( GetWitcherPlayer().HasTag('acs_yrden_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_axii_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_quen_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_igni_sword_equipped_TAG')
									)
									{
										vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_2\mutation_2_critical_force.w2ent", true ), targetPos, targetRot );
										vfxEnt.PlayEffectSingle('critical_yrden');
										vfxEnt.DestroyAfter(1.5);
									}
									else if ( GetWitcherPlayer().HasTag('acs_aard_secondary_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_yrden_secondary_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_axii_secondary_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_quen_secondary_sword_equipped')
									|| GetWitcherPlayer().HasTag('acs_igni_secondary_sword_equipped_TAG')
									)
									{
										vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_2\mutation_2_explode.w2ent", true ), targetPos, targetRot );
										vfxEnt.PlayEffectSingle('mutation_2_yrden');
										vfxEnt.DestroyAfter(1.5);
									}
									else if (GetWitcherPlayer().HasTag('acs_aard_sword_equipped'))
									{
										if( ((CNewNPC)npc).GetBloodType() == BT_Red) 
										{
											vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\blood_fx.w2ent", true ), targetPos, targetRot );
											vfxEnt.PlayEffectSingle('blood_explode_red');
											vfxEnt.DestroyAfter(1.5);
										}
									}
								}
							}
							else if ( GetWitcherPlayer().IsWeaponHeld( 'fist' ) && GetWitcherPlayer().HasTag('acs_vampire_claws_equipped') )
							{
								if( ((CNewNPC)npc).GetBloodType() == BT_Red) 
								{
									vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\blood_fx.w2ent", true ), targetPos, targetRot );
									vfxEnt.PlayEffectSingle('hit_red');
									vfxEnt.PlayEffectSingle('hit_refraction_red');
									vfxEnt.PlayEffectSingle('crawl_blood_red');
									vfxEnt.DestroyAfter(1.5);
								}

								/*
								vfxEnt3 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\blood_fx.w2ent", true ), targetPos, targetRot );
								vfxEnt3.PlayEffectSingle('blood_explode_red');
								vfxEnt3.DestroyAfter(1.5);
								*/

								if (GetWitcherPlayer().HasBuff(EET_BlackBlood))
								{
									targetPos.Z += RandRangeF( 0.5, -0.4 );
								
									targetPos.Y += RandRangeF( 0.4, -0.4 );
									
									targetRot.Roll = RandRange( 360, 0 );

									vfxEnt4 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\acs_sword_slashes.w2ent", true ), targetPos, targetRot );

									vfxEnt4.PlayEffectSingle('sword_slash_red_medium');

									vfxEnt4.DestroyAfter(1);
								}
							}	
						}
						else
						{
							if (GetWitcherPlayer().IsAnyWeaponHeld()
							&& !GetWitcherPlayer().IsWeaponHeld( 'fist' )
							)
							{
								if (
								npc.HasBuff(EET_Burning)
								|| npc.HasBuff(EET_Confusion)
								|| npc.HasBuff(EET_Stagger)
								|| npc.HasBuff(EET_Paralyzed)
								|| npc.HasBuff(EET_Slowdown)
								)
								{
									if ( GetWitcherPlayer().HasTag('acs_aard_sword_equipped') )
									{
										acs_aard_blade_trail();
									}
									else if ( GetWitcherPlayer().HasTag('acs_aard_secondary_sword_equipped') )
									{
										acs_aard_secondary_sword_trail();
									}
									else if ( GetWitcherPlayer().HasTag('acs_yrden_sword_equipped') )
									{
										acs_yrden_sword_trail();
									}
									else if ( GetWitcherPlayer().HasTag('acs_yrden_secondary_sword_equipped') )
									{
										acs_yrden_secondary_sword_trail();
									}
									else if ( GetWitcherPlayer().HasTag('acs_axii_sword_equipped') )
									{
										acs_axii_sword_trail();
									}
									else if ( GetWitcherPlayer().HasTag('acs_axii_secondary_sword_equipped') )
									{
										acs_axii_secondary_sword_trail();
									}
									else if ( GetWitcherPlayer().HasTag('acs_quen_sword_equipped') )
									{
										//acs_quen_sword_glow();
										acs_quen_sword_trail();
									}
									else if ( GetWitcherPlayer().HasTag('acs_quen_secondary_sword_equipped') )
									{
										acs_quen_secondary_sword_trail();
									}
								}

								if ( GetWitcherPlayer().GetEquippedSign() == ST_Igni )
								{
									if( curAdrenaline >= maxAdrenaline/3
									&& curAdrenaline < maxAdrenaline * 2/3)
									{
										if ( RandF() < 0.0625 ) 
										{
											if( !npc.IsImmuneToBuff( EET_Burning ) && !npc.HasBuff( EET_Burning ) ) 
											{ 
												if ( GetWitcherPlayer().HasTag('acs_aard_sword_equipped') )
												{
													acs_aard_blade_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_aard_secondary_sword_equipped') )
												{
													acs_aard_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_yrden_sword_equipped') )
												{
													acs_yrden_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_yrden_secondary_sword_equipped') )
												{
													acs_yrden_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_axii_sword_equipped') )
												{
													acs_axii_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_axii_secondary_sword_equipped') )
												{
													acs_axii_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_quen_sword_equipped') )
												{
													//acs_quen_sword_glow();
													acs_quen_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_quen_secondary_sword_equipped') )
												{
													acs_quen_secondary_sword_trail();
												}
													
												vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_1\mutation_1_hit.w2ent", true ), targetPos, targetRot );
												vfxEnt.PlayEffectSingle('mutation_1_hit_igni');
												vfxEnt.DestroyAfter(1.5);	
												npc.AddEffectDefault( EET_Burning, GetWitcherPlayer(), 'acs_weapon_passive_effects' ); 							
											}
										}
									}
									else if( curAdrenaline >= maxAdrenaline * 2/3
									&& curAdrenaline < maxAdrenaline)
									{
										if ( RandF() < 0.125 ) 
										{
											if( !npc.IsImmuneToBuff( EET_Burning ) && !npc.HasBuff( EET_Burning ) ) 
											{ 
												if ( GetWitcherPlayer().HasTag('acs_aard_sword_equipped') )
												{
													acs_aard_blade_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_aard_secondary_sword_equipped') )
												{
													acs_aard_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_yrden_sword_equipped') )
												{
													acs_yrden_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_yrden_secondary_sword_equipped') )
												{
													acs_yrden_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_axii_sword_equipped') )
												{
													acs_axii_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_axii_secondary_sword_equipped') )
												{
													acs_axii_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_quen_sword_equipped') )
												{
													//acs_quen_sword_glow();
													acs_quen_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_quen_secondary_sword_equipped') )
												{
													acs_quen_secondary_sword_trail();
												}

												vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_1\mutation_1_hit.w2ent", true ), targetPos, targetRot );
												vfxEnt.PlayEffectSingle('mutation_1_hit_igni');
												vfxEnt.DestroyAfter(1.5);	
												npc.AddEffectDefault( EET_Burning, GetWitcherPlayer(), 'acs_weapon_passive_effects' ); 							
											}
										}
									}
									else if( curAdrenaline == maxAdrenaline ) 
									{
										if ( RandF() < 0.25 ) 
										{
											if( !npc.IsImmuneToBuff( EET_Burning ) && !npc.HasBuff( EET_Burning ) ) 
											{ 
												if ( GetWitcherPlayer().HasTag('acs_aard_sword_equipped') )
												{
													acs_aard_blade_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_aard_secondary_sword_equipped') )
												{
													acs_aard_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_yrden_sword_equipped') )
												{
													acs_yrden_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_yrden_secondary_sword_equipped') )
												{
													acs_yrden_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_axii_sword_equipped') )
												{
													acs_axii_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_axii_secondary_sword_equipped') )
												{
													acs_axii_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_quen_sword_equipped') )
												{
													//acs_quen_sword_glow();
													acs_quen_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_quen_secondary_sword_equipped') )
												{
													acs_quen_secondary_sword_trail();
												}

												vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_1\mutation_1_hit.w2ent", true ), targetPos, targetRot );
												vfxEnt.PlayEffectSingle('mutation_1_hit_igni');
												vfxEnt.DestroyAfter(1.5);	
												npc.AddEffectDefault( EET_Burning, GetWitcherPlayer(), 'acs_weapon_passive_effects' ); 							
											}
										}
									}
								}
								else if ( GetWitcherPlayer().GetEquippedSign() == ST_Axii )
								{
									if( curAdrenaline >= maxAdrenaline/3
									&& curAdrenaline < maxAdrenaline * 2/3)
									{
										if ( RandF() < 0.0625 ) 
										{
											if( !npc.IsImmuneToBuff( EET_Confusion ) && !npc.HasBuff( EET_Confusion ) ) 
											{ 
												if ( GetWitcherPlayer().HasTag('acs_aard_sword_equipped') )
												{
													acs_aard_blade_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_aard_secondary_sword_equipped') )
												{
													acs_aard_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_yrden_sword_equipped') )
												{
													acs_yrden_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_yrden_secondary_sword_equipped') )
												{
													acs_yrden_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_axii_sword_equipped') )
												{
													acs_axii_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_axii_secondary_sword_equipped') )
												{
													acs_axii_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_quen_sword_equipped') )
												{
													//acs_quen_sword_glow();
													acs_quen_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_quen_secondary_sword_equipped') )
												{
													acs_quen_secondary_sword_trail();
												}
													
												vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_2\mutation_2_critical_force.w2ent", true ), targetPos, targetRot );
												vfxEnt.PlayEffectSingle('critical_aard');
												vfxEnt.DestroyAfter(1.5);
												npc.AddEffectDefault( EET_Confusion, GetWitcherPlayer(), 'acs_weapon_passive_effects' ); 							
											}
										}
									}
									else if( curAdrenaline >= maxAdrenaline * 2/3
									&& curAdrenaline < maxAdrenaline)
									{
										if( RandF() < 0.125 ) 
										{
											if( !npc.IsImmuneToBuff( EET_Confusion ) && !npc.HasBuff( EET_Confusion ) ) 
											{ 
												if ( GetWitcherPlayer().HasTag('acs_aard_sword_equipped') )
												{
													acs_aard_blade_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_aard_secondary_sword_equipped') )
												{
													acs_aard_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_yrden_sword_equipped') )
												{
													acs_yrden_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_yrden_secondary_sword_equipped') )
												{
													acs_yrden_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_axii_sword_equipped') )
												{
													acs_axii_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_axii_secondary_sword_equipped') )
												{
													acs_axii_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_quen_sword_equipped') )
												{
													//acs_quen_sword_glow();
													acs_quen_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_quen_secondary_sword_equipped') )
												{
													acs_quen_secondary_sword_trail();
												}
													
												vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_2\mutation_2_critical_force.w2ent", true ), targetPos, targetRot );
												vfxEnt.PlayEffectSingle('critical_aard');
												vfxEnt.DestroyAfter(1.5);
												npc.AddEffectDefault( EET_Confusion, GetWitcherPlayer(), 'acs_weapon_passive_effects' ); 							
											}
										}
									}
									else if( curAdrenaline == maxAdrenaline ) 
									{
										if( RandF() < 0.25 ) 
										{
											if( !npc.IsImmuneToBuff( EET_Confusion ) && !npc.HasBuff( EET_Confusion ) ) 
											{ 
												if ( GetWitcherPlayer().HasTag('acs_aard_sword_equipped') )
												{
													acs_aard_blade_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_aard_secondary_sword_equipped') )
												{
													acs_aard_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_yrden_sword_equipped') )
												{
													acs_yrden_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_yrden_secondary_sword_equipped') )
												{
													acs_yrden_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_axii_sword_equipped') )
												{
													acs_axii_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_axii_secondary_sword_equipped') )
												{
													acs_axii_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_quen_sword_equipped') )
												{
													//acs_quen_sword_glow();
													acs_quen_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_quen_secondary_sword_equipped') )
												{
													acs_quen_secondary_sword_trail();
												}
													
												vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_2\mutation_2_critical_force.w2ent", true ), targetPos, targetRot );
												vfxEnt.PlayEffectSingle('critical_aard');
												vfxEnt.DestroyAfter(1.5);
												npc.AddEffectDefault( EET_Confusion, GetWitcherPlayer(), 'acs_weapon_passive_effects' ); 							
											}
										}
									}
								}
								else if ( GetWitcherPlayer().GetEquippedSign() == ST_Aard )
								{
									if( curAdrenaline >= maxAdrenaline/3
									&& curAdrenaline < maxAdrenaline * 2/3)
									{
										if( RandF() < 0.0625 ) 
										{
											if( !npc.IsImmuneToBuff( EET_Stagger ) && !npc.HasBuff( EET_Stagger ) ) 
											{ 
												if ( GetWitcherPlayer().HasTag('acs_aard_sword_equipped') )
												{
													acs_aard_blade_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_aard_secondary_sword_equipped') )
												{
													acs_aard_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_yrden_sword_equipped') )
												{
													acs_yrden_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_yrden_secondary_sword_equipped') )
												{
													acs_yrden_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_axii_sword_equipped') )
												{
													acs_axii_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_axii_secondary_sword_equipped') )
												{
													acs_axii_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_quen_sword_equipped') )
												{
													//acs_quen_sword_glow();
													acs_quen_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_quen_secondary_sword_equipped') )
												{
													acs_quen_secondary_sword_trail();
												}
													
												vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_1\mutation_1_hit.w2ent", true ), targetPos, targetRot );
												vfxEnt.PlayEffectSingle('mutation_1_hit_aard');
												vfxEnt.DestroyAfter(1.5);
												npc.AddEffectDefault( EET_Stagger, GetWitcherPlayer(), 'acs_weapon_passive_effects' ); 							
											}
										}
									}
									else if( curAdrenaline >= maxAdrenaline * 2/3
									&& curAdrenaline < maxAdrenaline)
									{
										if( RandF() < 0.125 ) 
										{
											if( !npc.IsImmuneToBuff( EET_Stagger ) && !npc.HasBuff( EET_Stagger ) ) 
											{ 
												if ( GetWitcherPlayer().HasTag('acs_aard_sword_equipped') )
												{
													acs_aard_blade_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_aard_secondary_sword_equipped') )
												{
													acs_aard_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_yrden_sword_equipped') )
												{
													acs_yrden_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_yrden_secondary_sword_equipped') )
												{
													acs_yrden_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_axii_sword_equipped') )
												{
													acs_axii_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_axii_secondary_sword_equipped') )
												{
													acs_axii_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_quen_sword_equipped') )
												{
													//acs_quen_sword_glow();
													acs_quen_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_quen_secondary_sword_equipped') )
												{
													acs_quen_secondary_sword_trail();
												}
													
												vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_1\mutation_1_hit.w2ent", true ), targetPos, targetRot );
												vfxEnt.PlayEffectSingle('mutation_1_hit_aard');
												vfxEnt.DestroyAfter(1.5);
												npc.AddEffectDefault( EET_Stagger, GetWitcherPlayer(), 'acs_weapon_passive_effects' ); 							
											}
										}
									}
									else if( curAdrenaline == maxAdrenaline ) 
									{
										if( RandF() < 0.25 ) 
										{
											if( !npc.IsImmuneToBuff( EET_Stagger ) && !npc.HasBuff( EET_Stagger ) ) 
											{ 
												if ( GetWitcherPlayer().HasTag('acs_aard_sword_equipped') )
												{
													acs_aard_blade_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_aard_secondary_sword_equipped') )
												{
													acs_aard_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_yrden_sword_equipped') )
												{
													acs_yrden_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_yrden_secondary_sword_equipped') )
												{
													acs_yrden_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_axii_sword_equipped') )
												{
													acs_axii_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_axii_secondary_sword_equipped') )
												{
													acs_axii_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_quen_sword_equipped') )
												{
													//acs_quen_sword_glow();
													acs_quen_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_quen_secondary_sword_equipped') )
												{
													acs_quen_secondary_sword_trail();
												}
													
												vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_1\mutation_1_hit.w2ent", true ), targetPos, targetRot );
												vfxEnt.PlayEffectSingle('mutation_1_hit_aard');
												vfxEnt.DestroyAfter(1.5);
												npc.AddEffectDefault( EET_Stagger, GetWitcherPlayer(), 'acs_weapon_passive_effects' ); 							
											}
										}
									}
								}
								else if ( GetWitcherPlayer().GetEquippedSign() == ST_Quen )
								{
									if( curAdrenaline >= maxAdrenaline/3
									&& curAdrenaline < maxAdrenaline * 2/3)
									{
										if( RandF() < 0.0625 ) 
										{
											if( !npc.IsImmuneToBuff( EET_Paralyzed ) && !npc.HasBuff( EET_Paralyzed ) ) 
											{ 
												if ( GetWitcherPlayer().HasTag('acs_aard_sword_equipped') )
												{
													acs_aard_blade_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_aard_secondary_sword_equipped') )
												{
													acs_aard_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_yrden_sword_equipped') )
												{
													acs_yrden_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_yrden_secondary_sword_equipped') )
												{
													acs_yrden_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_axii_sword_equipped') )
												{
													acs_axii_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_axii_secondary_sword_equipped') )
												{
													acs_axii_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_quen_sword_equipped') )
												{
													//acs_quen_sword_glow();
													acs_quen_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_quen_secondary_sword_equipped') )
												{
													acs_quen_secondary_sword_trail();
												}
													
												vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_1\mutation_1_hit.w2ent", true ), targetPos, targetRot );
												vfxEnt.PlayEffectSingle('mutation_1_hit_quen');
												vfxEnt.DestroyAfter(1.5);
												npc.AddEffectDefault( EET_Paralyzed, GetWitcherPlayer(), 'acs_weapon_passive_effects' ); 							
											}
										}
									}
									else if( curAdrenaline >= maxAdrenaline * 2/3
									&& curAdrenaline < maxAdrenaline)
									{
										if( RandF() < 0.125 ) 
										{
											if( !npc.IsImmuneToBuff( EET_Paralyzed ) && !npc.HasBuff( EET_Paralyzed ) ) 
											{ 
												if ( GetWitcherPlayer().HasTag('acs_aard_sword_equipped') )
												{
													acs_aard_blade_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_aard_secondary_sword_equipped') )
												{
													acs_aard_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_yrden_sword_equipped') )
												{
													acs_yrden_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_yrden_secondary_sword_equipped') )
												{
													acs_yrden_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_axii_sword_equipped') )
												{
													acs_axii_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_axii_secondary_sword_equipped') )
												{
													acs_axii_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_quen_sword_equipped') )
												{
													//acs_quen_sword_glow();
													acs_quen_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_quen_secondary_sword_equipped') )
												{
													acs_quen_secondary_sword_trail();
												}
													
												vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_1\mutation_1_hit.w2ent", true ), targetPos, targetRot );
												vfxEnt.PlayEffectSingle('mutation_1_hit_quen');
												vfxEnt.DestroyAfter(1.5);
												npc.AddEffectDefault( EET_Paralyzed, GetWitcherPlayer(), 'acs_weapon_passive_effects' ); 							
											}
										}
									}
									else if( curAdrenaline == maxAdrenaline ) 
									{
										if( RandF() < 0.25 ) 
										{
											if( !npc.IsImmuneToBuff( EET_Paralyzed ) && !npc.HasBuff( EET_Paralyzed ) ) 
											{ 
												if ( GetWitcherPlayer().HasTag('acs_aard_sword_equipped') )
												{
													acs_aard_blade_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_aard_secondary_sword_equipped') )
												{
													acs_aard_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_yrden_sword_equipped') )
												{
													acs_yrden_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_yrden_secondary_sword_equipped') )
												{
													acs_yrden_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_axii_sword_equipped') )
												{
													acs_axii_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_axii_secondary_sword_equipped') )
												{
													acs_axii_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_quen_sword_equipped') )
												{
													//acs_quen_sword_glow();
													acs_quen_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_quen_secondary_sword_equipped') )
												{
													acs_quen_secondary_sword_trail();
												}
													
												vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_1\mutation_1_hit.w2ent", true ), targetPos, targetRot );
												vfxEnt.PlayEffectSingle('mutation_1_hit_quen');
												vfxEnt.DestroyAfter(1.5);
												npc.AddEffectDefault( EET_Paralyzed, GetWitcherPlayer(), 'acs_weapon_passive_effects' ); 							
											}
										}
									}
								}
								else if ( GetWitcherPlayer().GetEquippedSign() == ST_Yrden )
								{
									if( curAdrenaline >= maxAdrenaline/3
									&& curAdrenaline < maxAdrenaline * 2/3)
									{
										if( RandF() < 0.0625 ) 
										{
											if( !npc.IsImmuneToBuff( EET_Slowdown ) && !npc.HasBuff( EET_Slowdown ) ) 
											{ 
												if ( GetWitcherPlayer().HasTag('acs_aard_sword_equipped') )
												{
													acs_aard_blade_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_aard_secondary_sword_equipped') )
												{
													acs_aard_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_yrden_sword_equipped') )
												{
													acs_yrden_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_yrden_secondary_sword_equipped') )
												{
													acs_yrden_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_axii_sword_equipped') )
												{
													acs_axii_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_axii_secondary_sword_equipped') )
												{
													acs_axii_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_quen_sword_equipped') )
												{
													//acs_quen_sword_glow();
													acs_quen_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_quen_secondary_sword_equipped') )
												{
													acs_quen_secondary_sword_trail();
												}
													
												vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_2\mutation_2_critical_force.w2ent", true ), targetPos, targetRot );
												vfxEnt.PlayEffectSingle('critical_yrden');
												vfxEnt.DestroyAfter(1.5);
												npc.AddEffectDefault( EET_Slowdown, GetWitcherPlayer(), 'acs_weapon_passive_effects' ); 							
											}
										}
									}
									else if( curAdrenaline >= maxAdrenaline * 2/3
									&& curAdrenaline < maxAdrenaline)
									{
										if( RandF() < 0.125 ) 
										{
											if( !npc.IsImmuneToBuff( EET_Slowdown ) && !npc.HasBuff( EET_Slowdown ) ) 
											{ 
												if ( GetWitcherPlayer().HasTag('acs_aard_sword_equipped') )
												{
													acs_aard_blade_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_aard_secondary_sword_equipped') )
												{
													acs_aard_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_yrden_sword_equipped') )
												{
													acs_yrden_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_yrden_secondary_sword_equipped') )
												{
													acs_yrden_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_axii_sword_equipped') )
												{
													acs_axii_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_axii_secondary_sword_equipped') )
												{
													acs_axii_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_quen_sword_equipped') )
												{
													//acs_quen_sword_glow();
													acs_quen_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_quen_secondary_sword_equipped') )
												{
													acs_quen_secondary_sword_trail();
												}
													
												vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_2\mutation_2_critical_force.w2ent", true ), targetPos, targetRot );
												vfxEnt.PlayEffectSingle('critical_yrden');
												vfxEnt.DestroyAfter(1.5);
												npc.AddEffectDefault( EET_Slowdown, GetWitcherPlayer(), 'acs_weapon_passive_effects' ); 							
											}
										}
									}
									else if( curAdrenaline == maxAdrenaline ) 
									{
										if( RandF() < 0.25 ) 
										{
											if( !npc.IsImmuneToBuff( EET_Slowdown ) && !npc.HasBuff( EET_Slowdown ) ) 
											{ 
												if ( GetWitcherPlayer().HasTag('acs_aard_sword_equipped') )
												{
													acs_aard_blade_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_aard_secondary_sword_equipped') )
												{
													acs_aard_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_yrden_sword_equipped') )
												{
													acs_yrden_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_yrden_secondary_sword_equipped') )
												{
													acs_yrden_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_axii_sword_equipped') )
												{
													acs_axii_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_axii_secondary_sword_equipped') )
												{
													acs_axii_secondary_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_quen_sword_equipped') )
												{
													//acs_quen_sword_glow();
													acs_quen_sword_trail();
												}
												else if ( GetWitcherPlayer().HasTag('acs_quen_secondary_sword_equipped') )
												{
													acs_quen_secondary_sword_trail();
												}
													
												vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_2\mutation_2_critical_force.w2ent", true ), targetPos, targetRot );
												vfxEnt.PlayEffectSingle('critical_yrden');
												vfxEnt.DestroyAfter(1.5);
												npc.AddEffectDefault( EET_Slowdown, GetWitcherPlayer(), 'acs_weapon_passive_effects' ); 							
											}
										}
									}
								}
							}
							else
							{
								if ( GetWitcherPlayer().HasTag('acs_vampire_claws_equipped') )
								{
									if( ((CNewNPC)npc).GetBloodType() == BT_Red) 
									{
										vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\blood_fx.w2ent", true ), targetPos, targetRot );
										vfxEnt.PlayEffectSingle('hit_red');
										vfxEnt.PlayEffectSingle('hit_refraction_red');
										vfxEnt.PlayEffectSingle('crawl_blood_red');
										vfxEnt.DestroyAfter(1.5);
									}

									/*
									vfxEnt3 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\blood_fx.w2ent", true ), targetPos, targetRot );
									vfxEnt3.PlayEffectSingle('blood_explode_red');
									vfxEnt3.DestroyAfter(1.5);
									*/

									if (GetWitcherPlayer().HasBuff(EET_BlackBlood))
									{
										targetPos.Z += RandRangeF( 0.5, -0.4 );
									
										targetPos.Y += RandRangeF( 0.4, -0.4 );
										
										targetRot.Roll = RandRange( 360, 0 );

										vfxEnt4 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\acs_sword_slashes.w2ent", true ), targetPos, targetRot );

										vfxEnt4.PlayEffectSingle('sword_slash_red_medium');

										vfxEnt4.DestroyAfter(1);
									}
								}
							}
						}
					}
					else
					{
						if ( GetWitcherPlayer().HasTag('acs_vampire_claws_equipped') )
						{
							if( ((CNewNPC)npc).GetBloodType() == BT_Red) 
							{
								vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\blood_fx.w2ent", true ), targetPos, targetRot );
								vfxEnt.PlayEffectSingle('hit_red');
								vfxEnt.PlayEffectSingle('hit_refraction_red');
								vfxEnt.PlayEffectSingle('crawl_blood_red');
								vfxEnt.DestroyAfter(1.5);
							}

							/*
							vfxEnt3 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\blood_fx.w2ent", true ), targetPos, targetRot );
							vfxEnt3.PlayEffectSingle('blood_explode_red');
							vfxEnt3.DestroyAfter(1.5);
							*/

							if (GetWitcherPlayer().HasBuff(EET_BlackBlood))
							{
								targetPos.Z += RandRangeF( 0.5, -0.4 );
							
								targetPos.Y += RandRangeF( 0.4, -0.4 );
								
								targetRot.Roll = RandRange( 360, 0 );

								vfxEnt4 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\acs_sword_slashes.w2ent", true ), targetPos, targetRot );

								vfxEnt4.PlayEffectSingle('sword_slash_red_medium');

								vfxEnt4.DestroyAfter(1);
							}
						}
					}
				}
			}
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class cACS_Blood_Spatter_Switch
{
    function ACS_Blood_Spatter_Switch_Engage()
	{
		this.PushState('ACS_Blood_Spatter_Switch_Engage');
	}

	 function ACS_Blood_Spatter_Switch_Full_Engage()
	{
		this.PushState('ACS_Blood_Spatter_Switch_Full_Engage');
	}
}

state ACS_Blood_Spatter_Switch_Engage in cACS_Blood_Spatter_Switch
{
	private var weaponEntity, vfxEnt, vfxEnt2, vfxEnt3, vfxEnt4			: CEntity;
	private var temp													: CEntityTemplate;
	private var targets 												: array<CGameplayEntity>;
	private var dist, ang												: float;
	private var pos, targetPos											: Vector;
	private var targetRot 												: EulerAngles;
	private var i														: int;
	private var npc     												: CNewNPC;
	private var tmpBool 												: bool;
	private var mc 														: EMonsterCategory;
	private var tmpName 												: name;
	private var eff_names												: array< name >;
	
	
	event OnEnterState(prevStateName : name)
	{
		Blood_Spatter_Switch_Entry();
	}
	
	entry function Blood_Spatter_Switch_Entry()
	{
		if (!thePlayer.IsPerformingFinisher())
		{
			if ( thePlayer.IsWeaponHeld( 'fist' ) )
			{
				dist = 1.125;
				ang = 30;

				if ( thePlayer.HasTag('acs_vampire_claws_equipped') )
				{
					dist += 0.125;
					ang += 30;

					if ( thePlayer.HasBuff(EET_BlackBlood))
					{
						dist += 1.75;
						ang += 30;
					}

					if ( thePlayer.HasBuff(EET_Mutagen22) || ACS_Armor_Equipped_Check())
					{
						dist += 2.75;
						ang += 60;
					}
				}
			}
			else
			{
				if ( 
				thePlayer.HasTag('acs_igni_sword_equipped_TAG') 
				|| thePlayer.HasTag('acs_igni_sword_equipped') 
				)
				{
					dist = 1.5;
					ang =	70;

					if(  thePlayer.IsDoingSpecialAttack( false ) )
					{
						ang +=	315;
					}

					if( thePlayer.HasAbility('Runeword 2 _Stats', true) )
					{
						if(  thePlayer.IsDoingSpecialAttack( false ) )
						{
							dist += 1.1;
						}
						else if(  thePlayer.IsDoingSpecialAttack( true ) )
						{
							dist += 1.9;
						}
					}
				}
				else if ( thePlayer.HasTag('acs_igni_secondary_sword_equipped_TAG') 
				|| thePlayer.HasTag('acs_igni_secondary_sword_equipped') 
				)
				{
					dist = 1.5;
					ang =	70;

					if(  thePlayer.IsDoingSpecialAttack( false ) )
					{
						ang +=	315;
					}

					if( thePlayer.HasAbility('Runeword 2 _Stats', true) )
					{
						if(  thePlayer.IsDoingSpecialAttack( false ) )
						{
							dist += 1.1;
						}
						else if(  thePlayer.IsDoingSpecialAttack( true ) )
						{
							dist += 1.9;
						}
					}
				}
				else if ( thePlayer.HasTag('acs_axii_sword_equipped') )
				{
					dist = 1.6;
					ang =	70;	

					if (thePlayer.HasTag('ACS_Sparagmos_Active'))
					{
						dist += 10;
						ang +=	30;
					}
				}
				else if ( thePlayer.HasTag('acs_axii_secondary_sword_equipped') )
				{
					if ( 
					ACS_GetWeaponMode() == 0
					|| ACS_GetWeaponMode() == 1
					|| ACS_GetWeaponMode() == 2
					)
					{
						dist = 2.25;
						ang =	70;
					}
					else if ( ACS_GetWeaponMode() == 3 )
					{ 
						dist = 1.75;
						ang =	70;
					}
				}
				else if ( thePlayer.HasTag('acs_aard_sword_equipped') )
				{
					if (thePlayer.HasTag('ACS_Chain_Weapon_Expand')) 
					{
						dist = 7.5;
						ang =	90;	
					}
					else
					{
						dist = 2;
						ang =	75;	
					}
				}
				else if ( thePlayer.HasTag('acs_aard_secondary_sword_equipped') )
				{
					dist = 2;
					ang = 70;
				}
				else if ( thePlayer.HasTag('acs_yrden_sword_equipped') )
				{
					if ( ACS_GetWeaponMode() == 0 )
					{
						if (ACS_Settings_Main_Int('EHmodArmigerModeSettings','EHmodArmigerModeWeaponType', 0) == 0)
						{
							dist = 2.5;
							ang = 70;
						}
						else 
						{
							dist = 2;
							ang = 70;
						}
					}
					else if ( ACS_GetWeaponMode() == 1 )
					{
						if (ACS_Settings_Main_Int('EHmodFocusModeSettings','EHmodFocusModeWeaponType', 0) == 0)
						{
							dist = 2.5;
							ang = 70;
						}
						else 
						{
							dist = 2;
							ang = 70;
						}
					}
					else if ( ACS_GetWeaponMode() == 2 )
					{
						if (ACS_Settings_Main_Int('EHmodHybridModeSettings','EHmodHybridModeWeaponType', 0) == 0)
						{
							dist = 2.5;
							ang = 70;
						}
						else 
						{
							dist = 2;
							ang = 70;
						}
					}
					else if ( ACS_GetWeaponMode() == 3 )
					{
						dist = 2.5;
						ang = 70;
					}
				}
				else if ( thePlayer.HasTag('acs_yrden_secondary_sword_equipped') )
				{
					dist = 3.5;
					ang =	180;
				}
				else if ( thePlayer.HasTag('acs_quen_sword_equipped') )
				{
					dist = 1.6;
					ang =	70;

					if (thePlayer.HasTag('ACS_Shadow_Dash_Empowered'))
					{
						ang +=	320;
					}
				}
				else if ( thePlayer.HasTag('acs_quen_secondary_sword_equipped') )
				{
					if (thePlayer.HasTag('ACS_Storm_Spear_Active'))
					{
						dist = 10;
						ang =	30;
					}
					else
					{
						dist = 2.25;
						ang =	70;
					}
				}
				else 
				{
					dist = 1.25;
					ang = 30;
				}

				if (ACS_Armor_Equipped_Check())
				{
					if( thePlayer.HasAbility('Runeword 2 _Stats', true) )
					{
						if( !thePlayer.IsDoingSpecialAttack( false )
						&& !thePlayer.IsDoingSpecialAttack( true ) )
						{
							dist += 1.5;
						}
					}
					else
					{
						dist += 1.5;
					}
				}
			}

			if ( thePlayer.GetTarget() == ACSGetCActor('ACS_Big_Boi') )
			{
				dist += 0.75;
				ang += 15;

				if (((CNewNPC)thePlayer.GetTarget()).IsFlying())
				{
					dist += 1.25;
					ang += 15;
				}
			}

			if (ACS_Settings_Main_Float('EHmodVisualSettings','EHmodPlayerScale', 1) > 1)
			{
				dist += ACS_Settings_Main_Float('EHmodVisualSettings','EHmodPlayerScale', 1) * 0.75;
			}
			else if (ACS_Settings_Main_Float('EHmodVisualSettings','EHmodPlayerScale', 1) < 1)
			{
				dist -= ACS_Settings_Main_Float('EHmodVisualSettings','EHmodPlayerScale', 1) * 0.5;
			}

			if( thePlayer.HasAbility('Runeword 2 _Stats', true) 
			&& !thePlayer.HasTag('acs_igni_sword_equipped') 
			&& !thePlayer.HasTag('acs_igni_secondary_sword_equipped') 
			&& !ACS_Armor_Equipped_Check())
			{
				dist += 1;
			}

			if (thePlayer.IsUsingHorse()) 
			{
				dist += 1.5;

				ang += 270;
			}

			if (thePlayer.HasTag('ACS_In_Ciri_Special_Attack'))
			{
				dist += 1.5;

				ang += 315;
			}

			if (thePlayer.HasTag('ACS_In_Dance_Of_Wrath'))
			{
				dist += 1.5;

				ang += 315;
			}

			if (ACS_Bear_School_Check())
			{
				dist += 0.5;
				ang +=	15;

				if (thePlayer.HasTag('ACS_Bear_Special_Attack'))
				{
					dist += 1.5;
				}
			}

			if (ACS_Griffin_School_Check()
			&& thePlayer.HasTag('ACS_Griffin_Special_Attack'))
			{
				dist += 2;
				ang +=	15;
			}

			if (ACS_Manticore_School_Check())
			{
				dist += 0.5;

				if (thePlayer.HasTag('ACS_Manticore_Special_Attack'))
				{
					dist += 1.5;
				}
			}

			if (ACS_Viper_School_Check())
			{
				if (thePlayer.HasTag('ACS_Viper_Special_Attack'))
				{
					dist += 1.5;
				}
			}
		}
		else 
		{
			dist = 1.125;
			ang = 30;
		}

		targets.Clear();

		FindGameplayEntitiesInCone( targets, GetWitcherPlayer().GetWorldPosition(), VecHeading( GetWitcherPlayer().GetWorldForward() ), ang, dist, 999,,FLAG_ExcludePlayer + FLAG_OnlyAliveActors );
		pos = GetWitcherPlayer().GetWorldPosition();
		pos.Z += 0.8;
		for( i = targets.Size()-1; i >= 0; i -= 1 ) 
		{	
			npc = (CNewNPC)targets[i];

			targetPos = npc.GetWorldPosition();
			targetPos.Z += 1.5;

			targetRot = npc.GetWorldRotation();
			targetRot.Yaw += RandRangeF(360,1);
			targetRot.Pitch += RandRangeF(360,1);
			targetRot.Roll += RandRangeF( 360, 1 );

			if 
			( 
			npc == GetWitcherPlayer() 
			|| npc.HasTag('smokeman') 
			|| npc.IsHorse() 
			|| npc.HasTag('ACS_Rat_Mage_Rat')
			|| npc.HasTag('ACS_Plumard')
			|| npc.HasTag('ACS_Tentacle_1') 
			|| npc.HasTag('ACS_Tentacle_2') 
			|| npc.HasTag('ACS_Tentacle_3') 
			|| npc.HasTag('ACS_Necrofiend_Tentacle_1') 
			|| npc.HasTag('ACS_Necrofiend_Tentacle_2') 
			|| npc.HasTag('ACS_Necrofiend_Tentacle_3') 
			|| npc.HasTag('ACS_Necrofiend_Tentacle_6')
			|| npc.HasTag('ACS_Necrofiend_Tentacle_5')
			|| npc.HasTag('ACS_Necrofiend_Tentacle_4') 
			|| npc.HasTag('ACS_Svalblod_Bossbar') 
			|| npc.HasTag('ACS_Melusine_Bossbar') 
			|| npc.HasTag('ACS_Vampire_Monster_Boss_Bar') 
			|| npc.HasAbility('animal_rat_base')
			)
				continue;

			if( targets.Size() > 0 )
			{				
				if( ACS_AttitudeCheck ( (CActor)targets[i] ) 
				&& npc.IsAlive() 
				)
				{	
					if ( ACS_Armor_Equipped_Check()
					&& GetWitcherPlayer().IsAnyWeaponHeld()
					&& !GetWitcherPlayer().IsWeaponHeld( 'fist' ))
					{
						//targetPos.Z += RandRangeF( 0.5, -0.4 );
						
						//targetPos.Y += RandRangeF( 0.4, -0.4 );

						vfxEnt4 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
							
						"dlc\dlc_acs\data\entities\lillith_magic\chaos_red_slashes.w2ent"
						
						, true ), targetPos, targetRot );

						eff_names.Clear();

						eff_names.PushBack('diagonal_up_right');
						eff_names.PushBack('diagonal_down_right');
						eff_names.PushBack('right');
						eff_names.PushBack('diagonal_up_left');
						eff_names.PushBack('diagonal_down_left');
						eff_names.PushBack('left');
						eff_names.PushBack('up');
						eff_names.PushBack('down');

						vfxEnt4.PlayEffectSingle(eff_names[RandRange(eff_names.Size())]);

						vfxEnt4.DestroyAfter(1);

						if ((GetWitcherPlayer().HasTag('acs_igni_sword_equipped')
						|| GetWitcherPlayer().HasTag('acs_igni_secondary_sword_equipped'))
						&& thePlayer.GetStat(BCS_Focus) >= thePlayer.GetStatMax( BCS_Focus ) * 0.9875
						&& thePlayer.GetStat(BCS_Stamina) == thePlayer.GetStatMax(BCS_Stamina)
						)
						{
							vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\bob\data\fx\gameplay\mutation\mutation_1\mutation_1_hit.w2ent", true ), targetPos, targetRot );
							vfxEnt.PlayEffectSingle('mutation_1_hit_igni');
							vfxEnt.DestroyAfter(1.5);
						}	
					}

					//if( RandF() < 0.5)
					{
						temp = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\blood_fx.w2ent", true );

						vfxEnt = theGame.CreateEntity( temp, targetPos, targetRot );
						vfxEnt.DestroyAfter(1.5);

						theGame.GetMonsterParamsForActor(npc, mc, tmpName, tmpBool, tmpBool, tmpBool);

						if( ((CNewNPC)npc).GetBloodType() == BT_Red) 
						{
							if (npc.HasAbility('mon_lessog_base')
							|| npc.HasAbility('mon_sprigan_base')
							)
							{						
								vfxEnt.PlayEffectSingle('blood_spatter_black');
							} 
							else
							{
								vfxEnt.PlayEffectSingle('blood_spatter_red');
							}
						}
						else if( ((CNewNPC)npc).GetBloodType() == BT_Green) 
						{
							if (npc.HasAbility('mon_kikimore_base')
							|| npc.HasAbility('mon_black_spider_base')
							|| npc.HasAbility('mon_black_spider_ep2_base')
							|| npc.HasTag('ACS_Ungoliant')
							)
							{						
								vfxEnt.PlayEffectSingle('blood_spatter_black');
							} 
							else 
							{
								vfxEnt.PlayEffectSingle('blood_spatter_green');
							}
						}
						else if( ((CNewNPC)npc).GetBloodType() == BT_Yellow) 
						{
							if (npc.HasAbility('mon_archespor_base'))
							{
								vfxEnt.PlayEffectSingle('blood_spatter_yellow');
							} 
							else 
							{
								vfxEnt.PlayEffectSingle('blood_spatter_red');
							}
						}
						else if( ((CNewNPC)npc).GetBloodType() == BT_Black) 
						{
							if ( mc == MC_Vampire ) 
							{
								vfxEnt.PlayEffectSingle('blood_spatter_red');
							}
							else if ( mc == MC_Magicals ) 
							{
								if (npc.HasAbility('mon_golem_base')
								|| npc.HasAbility('mon_djinn')
								|| npc.HasAbility('mon_gargoyle')
								)
								{
									vfxEnt.PlayEffectSingle('blood_spatter_black');
								}
								else
								{
									vfxEnt.PlayEffectSingle('blood_spatter_red');
								}
							}
							else
							{
								vfxEnt.PlayEffectSingle('blood_spatter_black');
							}
						}
						else
						{
							vfxEnt.PlayEffectSingle('blood_spatter_red');
						}
					}
				}
			}
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state ACS_Blood_Spatter_Switch_Full_Engage in cACS_Blood_Spatter_Switch
{
	private var weaponEntity, vfxEnt, vfxEnt2, vfxEnt3, vfxEnt4			: CEntity;
	private var temp													: CEntityTemplate;
	private var targets 												: array<CGameplayEntity>;
	private var dist, ang												: float;
	private var pos, targetPos											: Vector;
	private var targetRot 												: EulerAngles;
	private var i														: int;
	private var npc     												: CNewNPC;
	private var tmpBool 												: bool;
	private var mc 														: EMonsterCategory;
	private var tmpName 												: name;
	
	event OnEnterState(prevStateName : name)
	{
		Blood_Spatter_Switch_Full_Entry();
	}

	entry function Blood_Spatter_Switch_Full_Entry()
	{
		targets.Clear();

		FindGameplayEntitiesInCone( targets, GetWitcherPlayer().GetWorldPosition(), VecHeading( GetWitcherPlayer().GetWorldForward() ), 360, 2, 999,,FLAG_ExcludePlayer + FLAG_OnlyAliveActors );
		pos = GetWitcherPlayer().GetWorldPosition();
		pos.Z += 0.8;
		for( i = targets.Size()-1; i >= 0; i -= 1 ) 
		{	
			npc = (CNewNPC)targets[i];

			targetPos = npc.GetWorldPosition();
			targetPos.Z += 1.5;

			targetRot = npc.GetWorldRotation();
			targetRot.Yaw += RandRangeF(360,1);
			targetRot.Pitch += RandRangeF(360,1);
			targetRot.Roll += RandRangeF(360,1);

			if 
			( 
			npc == GetWitcherPlayer() 
			|| npc.HasTag('smokeman') 
			|| npc.IsHorse() 
			|| npc.HasTag('ACS_Rat_Mage_Rat')
			|| npc.HasTag('ACS_Plumard')
			|| npc.HasTag('ACS_Tentacle_1') 
			|| npc.HasTag('ACS_Tentacle_2') 
			|| npc.HasTag('ACS_Tentacle_3') 
			|| npc.HasTag('ACS_Necrofiend_Tentacle_1') 
			|| npc.HasTag('ACS_Necrofiend_Tentacle_2') 
			|| npc.HasTag('ACS_Necrofiend_Tentacle_3') 
			|| npc.HasTag('ACS_Necrofiend_Tentacle_6')
			|| npc.HasTag('ACS_Necrofiend_Tentacle_5')
			|| npc.HasTag('ACS_Necrofiend_Tentacle_4') 
			|| npc.HasTag('ACS_Svalblod_Bossbar') 
			|| npc.HasTag('ACS_Melusine_Bossbar') 
			|| npc.HasTag('ACS_Vampire_Monster_Boss_Bar') 
			|| npc.HasAbility('animal_rat_base')
			)
				continue;

			if( targets.Size() > 0 )			
			{
				temp = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\blood_fx.w2ent", true );

				vfxEnt = theGame.CreateEntity( temp, targetPos, targetRot );
				vfxEnt.DestroyAfter(1.5);

				theGame.GetMonsterParamsForActor(npc, mc, tmpName, tmpBool, tmpBool, tmpBool);

				if( ((CNewNPC)npc).GetBloodType() == BT_Red) 
				{
					if (npc.HasAbility('mon_lessog_base')
					|| npc.HasAbility('mon_sprigan_base')
					)
					{						
						vfxEnt.PlayEffectSingle('blood_spatter_black');
					} 
					else
					{
						vfxEnt.PlayEffectSingle('blood_spatter_red');
					}
				}
				else if( ((CNewNPC)npc).GetBloodType() == BT_Green) 
				{
					if (npc.HasAbility('mon_kikimore_base')
					|| npc.HasAbility('mon_black_spider_base')
					|| npc.HasAbility('mon_black_spider_ep2_base')
					|| npc.HasTag('ACS_Ungoliant')
					)
					{						
						vfxEnt.PlayEffectSingle('blood_spatter_black');
					} 
					else 
					{
						vfxEnt.PlayEffectSingle('blood_spatter_green');
					}
				}
				else if( ((CNewNPC)npc).GetBloodType() == BT_Yellow) 
				{
					if (npc.HasAbility('mon_archespor_base'))
					{
						vfxEnt.PlayEffectSingle('blood_spatter_yellow');
					} 
					else 
					{
						vfxEnt.PlayEffectSingle('blood_spatter_red');
					}
				}
				else if( ((CNewNPC)npc).GetBloodType() == BT_Black) 
				{
					if ( mc == MC_Vampire ) 
					{
						vfxEnt.PlayEffectSingle('blood_spatter_red');
					}
					else if ( mc == MC_Magicals ) 
					{
						if (npc.HasAbility('mon_golem_base')
						|| npc.HasAbility('mon_djinn')
						|| npc.HasAbility('mon_gargoyle')
						)
						{
							vfxEnt.PlayEffectSingle('blood_spatter_black');
						}
						else
						{
							vfxEnt.PlayEffectSingle('blood_spatter_red');
						}
					}
					else
					{
						vfxEnt.PlayEffectSingle('blood_spatter_black');
					}
				}
				else
				{
					vfxEnt.PlayEffectSingle('blood_spatter_red');
				}
			}
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


function ACS_Caretaker_Drain_Energy()
{
	var vACS_Caretaker_Drain_Energy : cACS_Caretaker_Drain_Energy;
	vACS_Caretaker_Drain_Energy = new cACS_Caretaker_Drain_Energy in theGame;
			
	vACS_Caretaker_Drain_Energy.ACS_Caretaker_Drain_Energy_Engage();
}

statemachine class cACS_Caretaker_Drain_Energy
{
    function ACS_Caretaker_Drain_Energy_Engage()
	{
		this.PushState('ACS_Caretaker_Drain_Energy_Engage');
	}
}

state ACS_Caretaker_Drain_Energy_Engage in cACS_Caretaker_Drain_Energy
{
	private var targets 						: array<CGameplayEntity>;
	private var dist, ang						: float;
	private var pos, targetPos					: Vector;
	private var targetRot 						: EulerAngles;
	private var i								: int;
	private var npc     						: CNewNPC;
	private var anchor							: CEntity;
	private var anchorTemplate					: CEntityTemplate;
	
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		ACS_Caretaker_Drain_Energy_Entry();
	}

	entry function ACS_Caretaker_Drain_Energy_Entry()
	{
		if ( !GetWitcherPlayer().IsWeaponHeld( 'fist' ) && GetWitcherPlayer().HasTag('acs_yrden_sword_equipped') )
		{
			if ( ACS_GetWeaponMode() == 0 )
			{
				if (ACS_Settings_Main_Int('EHmodArmigerModeSettings','EHmodArmigerModeWeaponType', 0) == 0)
				{
					dist = 2.5;
					ang = 70;
				}
				else 
				{
					dist = 2;
					ang = 70;
				}
			}
			else if ( ACS_GetWeaponMode() == 1 )
			{
				if (ACS_Settings_Main_Int('EHmodFocusModeSettings','EHmodFocusModeWeaponType', 0) == 0)
				{
					dist = 2.5;
					ang = 70;
				}
				else 
				{
					dist = 2;
					ang = 70;
				}
			}
			else if ( ACS_GetWeaponMode() == 2 )
			{
				if (ACS_Settings_Main_Int('EHmodHybridModeSettings','EHmodHybridModeWeaponType', 0) == 0)
				{
					dist = 2.5;
					ang = 70;
				}
				else 
				{
					dist = 2;
					ang = 70;
				}
			}
			else if ( ACS_GetWeaponMode() == 3 )
			{
				dist = 2.5;
				ang = 70;
			}	
		}

		if (ACS_Settings_Main_Float('EHmodVisualSettings','EHmodPlayerScale', 1) > 1)
		{
			dist += ACS_Settings_Main_Float('EHmodVisualSettings','EHmodPlayerScale', 1) * 0.5;
		}
		else if (ACS_Settings_Main_Float('EHmodVisualSettings','EHmodPlayerScale', 1) < 1)
		{
			dist -= ACS_Settings_Main_Float('EHmodVisualSettings','EHmodPlayerScale', 1) * 0.5;
		}

		if( thePlayer.HasAbility('Runeword 2 _Stats', true) 
		&& !thePlayer.HasTag('acs_igni_sword_equipped') 
		&& !thePlayer.HasTag('acs_igni_secondary_sword_equipped') 
		&& !ACS_Armor_Equipped_Check())
		{
			dist += 1;
		}

		targets.Clear();

		FindGameplayEntitiesInCone( targets, GetWitcherPlayer().GetWorldPosition(), VecHeading( GetWitcherPlayer().GetWorldForward() ), ang, dist, 999,,FLAG_ExcludePlayer + FLAG_OnlyAliveActors );
		pos = GetWitcherPlayer().GetWorldPosition();
		pos.Z += 0.8;
		for( i = targets.Size()-1; i >= 0; i -= 1 ) 
		{	
			npc = (CNewNPC)targets[i];

			targetPos = npc.GetWorldPosition();

			targetRot = npc.GetWorldRotation();

			if 
			( 
			npc == GetWitcherPlayer() 
			|| npc.HasTag('smokeman') 
			|| npc.IsHorse() 
			|| npc.HasTag('ACS_Rat_Mage_Rat')
			|| npc.HasTag('ACS_Plumard')
			|| npc.HasTag('ACS_Tentacle_1') 
			|| npc.HasTag('ACS_Tentacle_2') 
			|| npc.HasTag('ACS_Tentacle_3') 
			|| npc.HasTag('ACS_Necrofiend_Tentacle_1') 
			|| npc.HasTag('ACS_Necrofiend_Tentacle_2') 
			|| npc.HasTag('ACS_Necrofiend_Tentacle_3') 
			|| npc.HasTag('ACS_Necrofiend_Tentacle_6')
			|| npc.HasTag('ACS_Necrofiend_Tentacle_5')
			|| npc.HasTag('ACS_Necrofiend_Tentacle_4') 
			|| npc.HasTag('ACS_Svalblod_Bossbar') 
			|| npc.HasTag('ACS_Melusine_Bossbar') 
			|| npc.HasTag('ACS_Vampire_Monster_Boss_Bar') 
			|| npc.HasAbility('animal_rat_base')
			)
				continue;

			if( targets.Size() > 0 )
			{				
				if( ACS_AttitudeCheck ( npc ) && npc.IsAlive() )
				{
					if (ACS_GetItem_Caretaker_Shovel())
					{
						anchorTemplate = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true );		
						anchor = (CEntity)theGame.CreateEntity( anchorTemplate, targetPos, targetRot );

						anchor.CreateAttachment( npc, 'head', Vector( 0, 0, -0.5 ) );

						GetWitcherPlayer().PlayEffectSingle('drain_energy', anchor);
						GetWitcherPlayer().StopEffect('drain_energy');

						acs_yrden_sword_effect_small();

						anchor.DestroyAfter(3);
					}
				}
			}
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class cACS_Drain_Energy
{
    function ACS_Drain_Energy_Engage()
	{
		this.PushState('ACS_Drain_Energy_Engage');
	}
}

state ACS_Drain_Energy_Engage in cACS_Drain_Energy
{
	private var actors 							: array<CActor>;
	private var dist, ang						: float;
	private var pos, targetPos					: Vector;
	private var targetRot 						: EulerAngles;
	private var i								: int;
	private var npc     						: CNewNPC;
	private var anchor							: CEntity;
	private var anchorTemplate					: CEntityTemplate;
	
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		ACS_Drain_Energy_Entry();
	}

	entry function ACS_Drain_Energy_Entry()
	{
		if( GetWitcherPlayer().GetStat(BCS_Focus) >= GetWitcherPlayer().GetStatMax(BCS_Focus)/3
			&& GetWitcherPlayer().GetStat(BCS_Focus) < GetWitcherPlayer().GetStatMax(BCS_Focus) * 2/3)
		{
			actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 1.5, 20, , FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);
		}	
		else if( GetWitcherPlayer().GetStat(BCS_Focus) >= GetWitcherPlayer().GetStatMax(BCS_Focus) * 2/3
		&& GetWitcherPlayer().GetStat(BCS_Focus) < GetWitcherPlayer().GetStatMax(BCS_Focus))
		{
			actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 2.5, 20, , FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);
		}
		else if( GetWitcherPlayer().GetStat(BCS_Focus) == GetWitcherPlayer().GetStatMax(BCS_Focus))
		{
			actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 5, 20, , FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);
		}

		pos = GetWitcherPlayer().GetWorldPosition();

		pos.Z += 0.8;

		actors.Clear();

		for( i = actors.Size()-1; i >= 0; i -= 1 ) 
		{	
			npc = (CNewNPC)actors[i];

			targetPos = npc.GetWorldPosition();

			targetRot = npc.GetWorldRotation();

			if 
			( 
			npc == GetWitcherPlayer() 
			|| npc.HasTag('smokeman') 
			|| npc.IsHorse() 
			|| npc.HasTag('ACS_Rat_Mage_Rat')
			|| npc.HasTag('ACS_Plumard')
			|| npc.HasTag('ACS_Tentacle_1') 
			|| npc.HasTag('ACS_Tentacle_2') 
			|| npc.HasTag('ACS_Tentacle_3') 
			|| npc.HasTag('ACS_Necrofiend_Tentacle_1') 
			|| npc.HasTag('ACS_Necrofiend_Tentacle_2') 
			|| npc.HasTag('ACS_Necrofiend_Tentacle_3') 
			|| npc.HasTag('ACS_Necrofiend_Tentacle_6')
			|| npc.HasTag('ACS_Necrofiend_Tentacle_5')
			|| npc.HasTag('ACS_Necrofiend_Tentacle_4') 
			|| npc.HasTag('ACS_Svalblod_Bossbar') 
			|| npc.HasTag('ACS_Melusine_Bossbar') 
			|| npc.HasTag('ACS_Vampire_Monster_Boss_Bar') 
			|| npc.HasAbility('animal_rat_base')
			)
				continue;

			if( actors.Size() > 0 )
			{				
				if( ACS_AttitudeCheck ( npc ) && npc.IsAlive() )
				{
					anchorTemplate = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true );		
					anchor = (CEntity)theGame.CreateEntity( anchorTemplate, targetPos, targetRot );

					anchor.CreateAttachment( npc, , Vector( 0, 0, 0.5 ) );

					GetWitcherPlayer().PlayEffectSingle('drain_energy', anchor);
					GetWitcherPlayer().StopEffect('drain_energy');

					anchor.DestroyAfter(3);
				}
			}
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class cACS_Marker_Switch
{
    function ACS_Marker_Switch_Engage()
	{
		this.PushState('ACS_Marker_Switch_Engage');
	}
}

state ACS_Marker_Switch_Engage in cACS_Marker_Switch
{
	private var markerNPC_1, markerNPC_2, markerNPC_3, markerNPC_4, markerNPC_5, markerNPC_6, markerNPC_7, markerNPC_8, markerNPC_9, markerNPC_10, markerNPC_11, markerNPC_12		: CEntity;
	private var markerTemplate 																		: CEntityTemplate;
	private var targets 																			: array<CGameplayEntity>;
	private var dist, ang																			: float;
	private var pos, targetPos, npcPos, attach_vec													: Vector;
	private var targetRot_1, attach_rot																: EulerAngles;
	private var i																					: int;
	private var npc     																			: CNewNPC;
	
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Passive_Weapon_Effects_Switch();
	}

	entry function Passive_Weapon_Effects_Switch()
	{
		GetACSWatcher().Remove_On_Hit_Tags();

		if (!thePlayer.IsPerformingFinisher())
		{
			if ( thePlayer.IsWeaponHeld( 'fist' ) )
			{
				dist = 1.125;
				ang = 30;

				if ( thePlayer.HasTag('acs_vampire_claws_equipped') )
				{
					dist += 0.125;
					ang += 30;

					if ( thePlayer.HasBuff(EET_BlackBlood))
					{
						dist += 1.75;
						ang += 30;
					}

					if ( thePlayer.HasBuff(EET_Mutagen22) || ACS_Armor_Equipped_Check())
					{
						dist += 2.75;
						ang += 60;
					}
				}
			}
			else
			{
				if ( 
				thePlayer.HasTag('acs_igni_sword_equipped_TAG') 
				|| thePlayer.HasTag('acs_igni_sword_equipped') 
				)
				{
					dist = 1.5;
					ang =	70;

					if(  thePlayer.IsDoingSpecialAttack( false ) )
					{
						ang +=	315;
					}

					if( thePlayer.HasAbility('Runeword 2 _Stats', true) )
					{
						if(  thePlayer.IsDoingSpecialAttack( false ) )
						{
							dist += 1.1;
						}
						else if(  thePlayer.IsDoingSpecialAttack( true ) )
						{
							dist += 1.9;
						}
					}
				}
				else if ( thePlayer.HasTag('acs_igni_secondary_sword_equipped_TAG') 
				|| thePlayer.HasTag('acs_igni_secondary_sword_equipped') 
				)
				{
					dist = 1.5;
					ang =	70;

					if(  thePlayer.IsDoingSpecialAttack( false ) )
					{
						ang +=	315;
					}

					if( thePlayer.HasAbility('Runeword 2 _Stats', true) )
					{
						if(  thePlayer.IsDoingSpecialAttack( false ) )
						{
							dist += 1.1;
						}
						else if(  thePlayer.IsDoingSpecialAttack( true ) )
						{
							dist += 1.9;
						}
					}
				}
				else if ( thePlayer.HasTag('acs_axii_sword_equipped') )
				{
					dist = 1.6;
					ang =	70;	

					if (thePlayer.HasTag('ACS_Sparagmos_Active'))
					{
						dist += 10;
						ang +=	30;
					}
				}
				else if ( thePlayer.HasTag('acs_axii_secondary_sword_equipped') )
				{
					if ( 
					ACS_GetWeaponMode() == 0
					|| ACS_GetWeaponMode() == 1
					|| ACS_GetWeaponMode() == 2
					)
					{
						dist = 2.25;
						ang =	70;
					}
					else if ( ACS_GetWeaponMode() == 3 )
					{ 
						dist = 1.75;
						ang =	70;
					}
				}
				else if ( thePlayer.HasTag('acs_aard_sword_equipped') )
				{
					if (thePlayer.HasTag('ACS_Chain_Weapon_Expand')) 
					{
						dist = 7.5;
						ang =	90;	
					}
					else
					{
						dist = 2;
						ang =	75;	
					}
				}
				else if ( thePlayer.HasTag('acs_aard_secondary_sword_equipped') )
				{
					dist = 2;
					ang = 70;
				}
				else if ( thePlayer.HasTag('acs_yrden_sword_equipped') )
				{
					if ( ACS_GetWeaponMode() == 0 )
					{
						if (ACS_Settings_Main_Int('EHmodArmigerModeSettings','EHmodArmigerModeWeaponType', 0) == 0)
						{
							dist = 2.5;
							ang = 70;
						}
						else 
						{
							dist = 2;
							ang = 70;
						}
					}
					else if ( ACS_GetWeaponMode() == 1 )
					{
						if (ACS_Settings_Main_Int('EHmodFocusModeSettings','EHmodFocusModeWeaponType', 0) == 0)
						{
							dist = 2.5;
							ang = 70;
						}
						else 
						{
							dist = 2;
							ang = 70;
						}
					}
					else if ( ACS_GetWeaponMode() == 2 )
					{
						if (ACS_Settings_Main_Int('EHmodHybridModeSettings','EHmodHybridModeWeaponType', 0) == 0)
						{
							dist = 2.5;
							ang = 70;
						}
						else 
						{
							dist = 2;
							ang = 70;
						}
					}
					else if ( ACS_GetWeaponMode() == 3 )
					{
						dist = 2.5;
						ang = 70;
					}
				}
				else if ( thePlayer.HasTag('acs_yrden_secondary_sword_equipped') )
				{
					dist = 3.5;
					ang =	180;
				}
				else if ( thePlayer.HasTag('acs_quen_sword_equipped') )
				{
					dist = 1.6;
					ang =	70;

					if (thePlayer.HasTag('ACS_Shadow_Dash_Empowered'))
					{
						ang +=	320;
					}
				}
				else if ( thePlayer.HasTag('acs_quen_secondary_sword_equipped') )
				{
					if (thePlayer.HasTag('ACS_Storm_Spear_Active'))
					{
						dist = 10;
						ang =	30;
					}
					else
					{
						dist = 2.25;
						ang =	70;
					}
				}
				else 
				{
					dist = 1.25;
					ang = 30;
				}

				if (ACS_Armor_Equipped_Check())
				{
					if( thePlayer.HasAbility('Runeword 2 _Stats', true) )
					{
						if( !thePlayer.IsDoingSpecialAttack( false )
						&& !thePlayer.IsDoingSpecialAttack( true ) )
						{
							dist += 1.5;
						}
					}
					else
					{
						dist += 1.5;
					}
				}
			}

			if ( thePlayer.GetTarget() == ACSGetCActor('ACS_Big_Boi') )
			{
				dist += 0.75;
				ang += 15;

				if (((CNewNPC)thePlayer.GetTarget()).IsFlying())
				{
					dist += 1.25;
					ang += 15;
				}
			}

			if (ACS_Settings_Main_Float('EHmodVisualSettings','EHmodPlayerScale', 1) > 1)
			{
				dist += ACS_Settings_Main_Float('EHmodVisualSettings','EHmodPlayerScale', 1) * 0.75;
			}
			else if (ACS_Settings_Main_Float('EHmodVisualSettings','EHmodPlayerScale', 1) < 1)
			{
				dist -= ACS_Settings_Main_Float('EHmodVisualSettings','EHmodPlayerScale', 1) * 0.5;
			}

			if( thePlayer.HasAbility('Runeword 2 _Stats', true) 
			&& !thePlayer.HasTag('acs_igni_sword_equipped') 
			&& !thePlayer.HasTag('acs_igni_secondary_sword_equipped') 
			&& !ACS_Armor_Equipped_Check())
			{
				dist += 1;
			}

			if (thePlayer.IsUsingHorse()) 
			{
				dist += 1.5;

				ang += 270;
			}

			if (thePlayer.HasTag('ACS_In_Ciri_Special_Attack'))
			{
				dist += 1.5;

				ang += 315;
			}

			if (thePlayer.HasTag('ACS_In_Dance_Of_Wrath'))
			{
				dist += 1.5;

				ang += 315;
			}

			if (ACS_Bear_School_Check())
			{
				dist += 0.5;
				ang +=	15;

				if (thePlayer.HasTag('ACS_Bear_Special_Attack'))
				{
					dist += 1.5;
				}
			}

			if (ACS_Griffin_School_Check()
			&& thePlayer.HasTag('ACS_Griffin_Special_Attack'))
			{
				dist += 2;
				ang +=	15;
			}

			if (ACS_Manticore_School_Check())
			{
				dist += 0.5;

				if (thePlayer.HasTag('ACS_Manticore_Special_Attack'))
				{
					dist += 1.5;
				}
			}

			if (ACS_Viper_School_Check())
			{
				if (thePlayer.HasTag('ACS_Viper_Special_Attack'))
				{
					dist += 1.5;
				}
			}
		}
		else 
		{
			dist = 1.125;
			ang = 30;
		}

		targets.Clear();

		FindGameplayEntitiesInCone( targets, GetWitcherPlayer().GetWorldPosition(), VecHeading( GetWitcherPlayer().GetWorldForward() ), ang, dist, 999,,FLAG_ExcludePlayer + FLAG_OnlyAliveActors );
		pos = GetWitcherPlayer().GetWorldPosition();
		pos.Z += 0.8;
		for( i = targets.Size()-1; i >= 0; i -= 1 ) 
		{	
			npc = (CNewNPC)targets[i];

			targetPos = npc.GetWorldPosition();
			targetPos.Z += 1.5;

			targetRot_1 = npc.GetWorldRotation();
				
			if( targets.Size() > 0 )
			{	
				if (
				!ACS_AttitudeCheck ( (CActor)targets[i] ) 
				|| npc == GetWitcherPlayer() 
				|| GetACSWatcher().ACS_Rage_Process != false
				|| npc.HasTag('smokeman') 
				|| npc.HasTag('ACS_Tentacle_1')
				|| npc.HasTag('ACS_Tentacle_2')
				|| npc.HasTag('ACS_Tentacle_3')
				|| npc.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| npc.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| npc.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| npc.HasTag('ACS_Necrofiend_Tentacle_6')
				|| npc.HasTag('ACS_Necrofiend_Tentacle_5')
				|| npc.HasTag('ACS_Necrofiend_Tentacle_4')
				|| npc.HasTag('acs_snow_entity') 
				|| npc.HasTag('ACS_Nekker_Guardian')
				|| npc.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| npc.HasTag('ACS_Svalblod_Bossbar') 
				|| npc.HasTag('ACS_Melusine_Bossbar') 
				|| npc.HasTag('ACS_Rat_Mage_Rat')
				|| npc.HasTag('ACS_Plumard')
				|| npc.HasAbility('animal_rat_base')
				|| !npc.IsAlive()
				)
				{
					continue;
				}
			
				ACS_Tutorial_Display_Check('ACS_ElementalComboSystem_Tutorial_Shown');

				if ( GetWitcherPlayer().HasTag('acs_aard_sword_equipped') )
				{
					markerTemplate = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\vampire_decal.w2ent", true );
	
					markerNPC_1 = (CEntity)theGame.CreateEntity( markerTemplate, targetPos, targetRot_1 );

					attach_rot.Roll = 0;
					attach_rot.Pitch = 0;
					attach_rot.Yaw = 0;

					attach_vec.X = 0;
					attach_vec.Y = 0;

					if (((CMovingPhysicalAgentComponent)(npc.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| npc.GetRadius() >= 0.7
					)
					{
						attach_vec.Z = 4.25;
					}
					else
					{
						attach_vec.Z = 2.75;
					}

					markerNPC_1.CreateAttachment( npc, , attach_vec, attach_rot );

					markerNPC_1.PlayEffectSingle('glow');

					markerNPC_1.PlayEffectSingle('rune_hand_blood');

					markerNPC_1.AddTag('spectreMark');
				}
				else if ( GetWitcherPlayer().HasTag('acs_aard_secondary_sword_equipped') )
				{
					markerTemplate = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\vampire_decal.w2ent", true );
	
					markerNPC_1 = (CEntity)theGame.CreateEntity( markerTemplate, targetPos, targetRot_1 );

					attach_rot.Roll = 0;
					attach_rot.Pitch = 0;
					attach_rot.Yaw = 0;

					attach_vec.X = 0;
					attach_vec.Y = 0;

					if (((CMovingPhysicalAgentComponent)(npc.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| npc.GetRadius() >= 0.7
					)
					{
						attach_vec.Z = 4.25;
					}
					else
					{
						attach_vec.Z = 2.75;
					}

					markerNPC_1.CreateAttachment( npc, , attach_vec, attach_rot );

					markerNPC_1.PlayEffectSingle('glow');

					markerNPC_1.PlayEffectSingle('rune_figure');

					markerNPC_1.AddTag('spectreMark');
				}
				else if ( GetWitcherPlayer().HasTag('acs_yrden_sword_equipped') )
				{
					markerTemplate = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\vampire_decal.w2ent", true );
	
					markerNPC_1 = (CEntity)theGame.CreateEntity( markerTemplate, targetPos, targetRot_1 );

					attach_rot.Roll = 0;
					attach_rot.Pitch = 0;
					attach_rot.Yaw = 0;

					attach_vec.X = 0;
					attach_vec.Y = 0;

					if (((CMovingPhysicalAgentComponent)(npc.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| npc.GetRadius() >= 0.7
					)
					{
						attach_vec.Z = 4.25;
					}
					else
					{
						attach_vec.Z = 2.75;
					}

					markerNPC_1.CreateAttachment( npc, , attach_vec, attach_rot );

					markerNPC_1.PlayEffectSingle('glow');

					markerNPC_1.PlayEffectSingle('rune_gate');

					markerNPC_1.AddTag('spectreMark');
				}
				else if ( GetWitcherPlayer().HasTag('acs_yrden_secondary_sword_equipped') )
				{
					markerTemplate = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\vampire_decal.w2ent", true );
	
					markerNPC_1 = (CEntity)theGame.CreateEntity( markerTemplate, targetPos, targetRot_1 );

					attach_rot.Roll = 0;
					attach_rot.Pitch = 0;
					attach_rot.Yaw = 0;

					attach_vec.X = 0;
					attach_vec.Y = 0;

					if (((CMovingPhysicalAgentComponent)(npc.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| npc.GetRadius() >= 0.7
					)
					{
						attach_vec.Z = 4.25;
					}
					else
					{
						attach_vec.Z = 2.75;
					}

					markerNPC_1.CreateAttachment( npc, , attach_vec, attach_rot );

					markerNPC_1.PlayEffectSingle('glow');

					markerNPC_1.PlayEffectSingle('rune_goat_ring');

					markerNPC_1.AddTag('spectreMark');
				}
				else if ( GetWitcherPlayer().HasTag('acs_axii_sword_equipped') )
				{
					markerTemplate = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\vampire_decal.w2ent", true );
	
					markerNPC_1 = (CEntity)theGame.CreateEntity( markerTemplate, targetPos, targetRot_1 );

					attach_rot.Roll = 0;
					attach_rot.Pitch = 0;
					attach_rot.Yaw = 0;

					attach_vec.X = 0;
					attach_vec.Y = 0;

					if (((CMovingPhysicalAgentComponent)(npc.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| npc.GetRadius() >= 0.7
					)
					{
						attach_vec.Z = 4.25;
					}
					else
					{
						attach_vec.Z = 2.75;
					}

					markerNPC_1.CreateAttachment( npc, , attach_vec, attach_rot );

					markerNPC_1.PlayEffectSingle('glow');

					markerNPC_1.PlayEffectSingle('rune_hand_snake');

					markerNPC_1.AddTag('spectreMark');
				}
				else if ( GetWitcherPlayer().HasTag('acs_axii_secondary_sword_equipped') )
				{
					markerTemplate = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\vampire_decal.w2ent", true );
	
					markerNPC_1 = (CEntity)theGame.CreateEntity( markerTemplate, targetPos, targetRot_1 );

					attach_rot.Roll = 0;
					attach_rot.Pitch = 0;
					attach_rot.Yaw = 0;

					attach_vec.X = 0;
					attach_vec.Y = 0;

					if (((CMovingPhysicalAgentComponent)(npc.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| npc.GetRadius() >= 0.7
					)
					{
						attach_vec.Z = 4.25;
					}
					else
					{
						attach_vec.Z = 2.75;
					}

					markerNPC_1.CreateAttachment( npc, , attach_vec, attach_rot );

					markerNPC_1.PlayEffectSingle('glow');

					markerNPC_1.PlayEffectSingle('rune_hand_winged');

					markerNPC_1.AddTag('spectreMark');
				}
				else if ( GetWitcherPlayer().HasTag('acs_quen_sword_equipped') )
				{
					markerTemplate = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\vampire_decal.w2ent", true );
	
					markerNPC_1 = (CEntity)theGame.CreateEntity( markerTemplate, targetPos, targetRot_1 );

					attach_rot.Roll = 0;
					attach_rot.Pitch = 0;
					attach_rot.Yaw = 0;

					attach_vec.X = 0;
					attach_vec.Y = 0;

					if (((CMovingPhysicalAgentComponent)(npc.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| npc.GetRadius() >= 0.7
					)
					{
						attach_vec.Z = 4.25;
					}
					else
					{
						attach_vec.Z = 2.75;
					}

					markerNPC_1.CreateAttachment( npc, , attach_vec, attach_rot );

					markerNPC_1.PlayEffectSingle('glow');

					markerNPC_1.PlayEffectSingle('rune_hand_knife');

					markerNPC_1.AddTag('spectreMark');
				}
				else if ( GetWitcherPlayer().HasTag('acs_quen_secondary_sword_equipped') )
				{
					markerTemplate = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\vampire_decal.w2ent", true );
	
					markerNPC_1 = (CEntity)theGame.CreateEntity( markerTemplate, targetPos, targetRot_1 );

					attach_rot.Roll = 0;
					attach_rot.Pitch = 0;
					attach_rot.Yaw = 0;

					attach_vec.X = 0;
					attach_vec.Y = 0;

					if (((CMovingPhysicalAgentComponent)(npc.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| npc.GetRadius() >= 0.7
					)
					{
						attach_vec.Z = 4.25;
					}
					else
					{
						attach_vec.Z = 2.75;
					}

					markerNPC_1.CreateAttachment( npc, , attach_vec, attach_rot );

					markerNPC_1.PlayEffectSingle('glow');

					markerNPC_1.PlayEffectSingle('rune_goat');

					markerNPC_1.AddTag('spectreMark');
				}
				else if ( GetWitcherPlayer().HasTag('acs_igni_sword_equipped_TAG') )
				{
					markerTemplate = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\vampire_decal.w2ent", true );
	
					markerNPC_1 = (CEntity)theGame.CreateEntity( markerTemplate, targetPos, targetRot_1 );

					attach_rot.Roll = 0;
					attach_rot.Pitch = 0;
					attach_rot.Yaw = 0;

					attach_vec.X = 0;
					attach_vec.Y = 0;

					if (((CMovingPhysicalAgentComponent)(npc.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| npc.GetRadius() >= 0.7
					)
					{
						attach_vec.Z = 4.25;
					}
					else
					{
						attach_vec.Z = 2.75;
					}

					markerNPC_1.CreateAttachment( npc, , attach_vec, attach_rot );

					markerNPC_1.PlayEffectSingle('glow');

					markerNPC_1.PlayEffectSingle('rune_black_circle');

					markerNPC_1.AddTag('spectreMark');
				}
			}
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_GatesOfBabylon()
{
	var vACS_GatesOfBabylon : cACS_GatesOfBabylon;
	vACS_GatesOfBabylon = new cACS_GatesOfBabylon in theGame;
			
	vACS_GatesOfBabylon.cACS_GatesOfBabylon_Engage();
}

statemachine class cACS_GatesOfBabylon
{
    function cACS_GatesOfBabylon_Engage()
	{
		this.PushState('cACS_GatesOfBabylon_Engage');
	}
}

state cACS_GatesOfBabylon_Engage in cACS_GatesOfBabylon
{
	private var portalPos, initpos												: Vector;
	private var sword 															: W3ACSSwordProjectile;
	private var actor, pActor       											: CActor;
	private var targetPosition													: Vector;
	private var meshcomp 														: CComponent;
	private var h 																: float;
	private var movementAdjustor												: CMovementAdjustor;
	private var ticket 															: SMovementAdjustmentRequestTicket;
	private var portal_temp, portal_temp_1										: CEntityTemplate;
	private var portal_ent, portal_ent_1										: CEntity;
	private var i, count														: int;
	private var playerPos, spawnPos												: Vector;
	private var randAngle, randRange											: float;
	
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Swords_Fire();
	}
	
	entry function Swords_Fire()
	{
		actor = (CActor)( GetWitcherPlayer().GetDisplayTarget() );

		if( ACS_AttitudeCheck ( actor ) && actor.IsAlive() )
		{
			movementAdjustor = GetWitcherPlayer().GetMovingAgentComponent().GetMovementAdjustor();
			
			ticket = movementAdjustor.GetRequest( 'acs_summon_swords');
			
			movementAdjustor.CancelByName( 'summon_swords' );
			
			movementAdjustor.CancelAll();
			
			ticket = movementAdjustor.CreateNewRequest( 'acs_summon_swords' );
			
			movementAdjustor.AdjustmentDuration( ticket, 0.25 );
			
			movementAdjustor.MaxRotationAdjustmentSpeed( ticket, 50000 );
			
			movementAdjustor.MaxLocationAdjustmentDistance( ticket, true, 0 );
			
			movementAdjustor.MaxLocationAdjustmentSpeed( ticket, 50000 );

			if (!theGame.IsDialogOrCutscenePlaying() 
			&& !GetWitcherPlayer().IsInNonGameplayCutscene() 
			&& !GetWitcherPlayer().IsInGameplayScene()
			&& !GetWitcherPlayer().IsUsingHorse()
			&& !GetWitcherPlayer().IsUsingVehicle()
			)
			{
				if( ACS_AttitudeCheck ( actor ) && GetWitcherPlayer().IsInCombat() && actor.IsAlive() )
				{	
					movementAdjustor.RotateTowards( ticket, actor );
				}
				else
				{
					movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );
				}
			}

			if (thePlayer.IsHardLockEnabled())
			{
				Projectile_Locked();
			}
			else
			{
				Projectile_1();
				Projectile_2();
				Projectile_3();
				Projectile_4();
				Projectile_5();
			}
		}
		else
		{
			Projectile_1();
			Projectile_2();
			Projectile_3();
			Projectile_4();
			Projectile_5();
		}

	}

	function pick_random_sword() : string
	{
		var sword_template_names			: array< string >;

		sword_template_names.Clear();

		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\aquila_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\ares_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\beastcutter_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\blackdawn_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\blooddusk_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\claymore_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\crownbreaker_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\deimos_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\doomblade_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\dragonbane_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\ejder_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\flameborn_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\frostmourne_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\gorgonslayer_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\graveripper_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\guandao_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\hades_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\haoma_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\heavenspire_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\hellspire_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\hitokiri_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\icarus_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\khopesh_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\kingslayer_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\kukri_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\lionhunter_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\oathblade_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\oblivion_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\pridefall_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\rakuyo_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\realmblade_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\realmdivider_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\ryukatana_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\silverknife_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\sinner_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\sithis_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\voidblade_projectile.w2ent");
		sword_template_names.PushBack("dlc\dlc_acs\data\entities\projectiles\gate_of_babylon_weapons\vulcan_projectile.w2ent");

		return sword_template_names[RandRange(sword_template_names.Size())];
	}
	
	latent function Projectile_Locked()
	{	
		var sword_pos : Vector;

		initpos = actor.GetWorldPosition();

		initpos.Z += RandRangeF(10,7);
		
		count = 5;
			
		for( i = 0; i < count; i += 1 )
		{
			randRange = 7 + 7 * RandF();
			randAngle = 7 * Pi() * RandF();
			
			spawnPos.X = randRange * CosF( randAngle ) + initpos.X;
			spawnPos.Y = randRange * SinF( randAngle ) + initpos.Y;
			spawnPos.Z = initpos.Z;

			if( ACS_AttitudeCheck ( actor ) && actor.IsAlive() )
			{	
				portal_temp = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\portal.w2ent", true );

				portal_ent = (CEntity)theGame.CreateEntity( portal_temp, spawnPos );

				portal_ent.PlayEffectSingle('teleport');

				portal_ent.PlayEffectSingle('portal');

				portal_ent.DestroyAfter(5);

				targetPosition = actor.PredictWorldPosition( 0.7 );

				sword_pos = spawnPos;

				//sword_pos.Z += 1;

				sword = (W3ACSSwordProjectile)theGame.CreateEntity( 
				(CEntityTemplate)LoadResourceAsync( 
					
				pick_random_sword()
					
				, true ), sword_pos );
					
				meshcomp = sword.GetComponentByClassName('CMeshComponent');
				h = 1.5;
				meshcomp.SetScale(Vector(h,h,h,1));	
					
				sword.Init(GetWitcherPlayer());

				sword.PlayEffectSingle('blade_trail');
				sword.PlayEffectSingle('appear_flash');
				//sword.PlayEffectSingle('eff_1');
				sword.PlayEffectSingle('eff_2');
				sword.PlayEffectSingle('hit_flash');
				sword.PlayEffectSingle('appear_flash_hit_1');
				sword.PlayEffectSingle('appear_flash_hit_2');

				sword.ShootProjectileAtPosition( 0, 20+RandRange(5,1), targetPosition, 500 );
				sword.DestroyAfter(31);
			}	
		}
	}
	
	latent function Projectile_1()
	{	
		portalPos = GetWitcherPlayer().GetWorldPosition();		

		portalPos.Z += 1;

		initpos = portalPos;	

		initpos.Z += 1;

		portal_temp = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\portal.w2ent", true );

		portal_ent = (CEntity)theGame.CreateEntity( portal_temp, portalPos );

		portal_ent.PlayEffectSingle('teleport');

		portal_ent.PlayEffectSingle('portal');

		portal_ent.DestroyAfter(5);

		if( ACS_AttitudeCheck ( actor ) && GetWitcherPlayer().IsInCombat() && actor.IsAlive() )
		{	
			targetPosition = actor.PredictWorldPosition( 0.5 );
			targetPosition.Z += 1.1;

			sword = (W3ACSSwordProjectile)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( 
				
			pick_random_sword()
				
			, true ), initpos );
				
			meshcomp = sword.GetComponentByClassName('CMeshComponent');
			h = 1.5;
			meshcomp.SetScale(Vector(h,h,h,1));	
				
			sword.Init(GetWitcherPlayer());
			sword.PlayEffectSingle('blade_trail');
			sword.PlayEffectSingle('appear_flash');
			//sword.PlayEffectSingle('eff_1');
			sword.PlayEffectSingle('eff_2');
			sword.PlayEffectSingle('hit_flash');
			sword.PlayEffectSingle('appear_flash_hit_1');
			sword.PlayEffectSingle('appear_flash_hit_2');
			sword.ShootProjectileAtPosition( 0, 20+RandRange(5,1), targetPosition, 500 );
			sword.DestroyAfter(31);
		}		
		else
		{				
			//targetPosition = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetWorldForward() * 10;
			targetPosition = GetWitcherPlayer().GetLookAtPosition();
			//targetPosition.Z += 1.1;
				
			sword = (W3ACSSwordProjectile)theGame.CreateEntity( 

			(CEntityTemplate)LoadResourceAsync( 

			pick_random_sword()

			, true ), initpos );
				
			meshcomp = sword.GetComponentByClassName('CMeshComponent');
			h = 1.5;
			meshcomp.SetScale(Vector(h,h,h,1));	
			
			sword.Init(GetWitcherPlayer());
			sword.PlayEffectSingle('blade_trail');
			sword.PlayEffectSingle('appear_flash');
			//sword.PlayEffectSingle('eff_1');
			sword.PlayEffectSingle('eff_2');
			sword.PlayEffectSingle('hit_flash');
			sword.PlayEffectSingle('appear_flash_hit_1');
			sword.PlayEffectSingle('appear_flash_hit_2');
			sword.ShootProjectileAtPosition( 0, 20+RandRange(5,1), targetPosition, 500 );
			sword.DestroyAfter(31);
		}
	}

	latent function Projectile_2()
	{	
		portalPos = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetWorldRight() * 3;				
		portalPos.Z -= 0.5;

		initpos = portalPos;			
		initpos.Z += 2;

		portal_temp = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\portal.w2ent", true );

		portal_ent = (CEntity)theGame.CreateEntity( portal_temp, portalPos );

		portal_ent.PlayEffectSingle('teleport');

		portal_ent.PlayEffectSingle('portal');

		portal_ent.DestroyAfter(5);


		if( ACS_AttitudeCheck ( actor ) && GetWitcherPlayer().IsInCombat() && actor.IsAlive() )
		{	
			targetPosition = actor.PredictWorldPosition( 0.5 );
			targetPosition.Z += 1.1;
				
			sword = (W3ACSSwordProjectile)theGame.CreateEntity( 

			(CEntityTemplate)LoadResourceAsync( 

			pick_random_sword()
			
			, true ), initpos );
				
			meshcomp = sword.GetComponentByClassName('CMeshComponent');
			h = 1.5;
			meshcomp.SetScale(Vector(h,h,h,1));	
				
			sword.Init(GetWitcherPlayer());
			sword.PlayEffectSingle('blade_trail');
			sword.PlayEffectSingle('appear_flash');
			//sword.PlayEffectSingle('eff_1');
			sword.PlayEffectSingle('eff_2');
			sword.PlayEffectSingle('hit_flash');
			sword.PlayEffectSingle('appear_flash_hit_1');
			sword.PlayEffectSingle('appear_flash_hit_2');
			sword.ShootProjectileAtPosition( 0, 20+RandRange(5,1), targetPosition, 500 );
			sword.DestroyAfter(31);
		}		
		else
		{
			//targetPosition = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetWorldForward() * 10;
			targetPosition = GetWitcherPlayer().GetLookAtPosition();
			//targetPosition.Z += 1.1;
				
			sword = (W3ACSSwordProjectile)theGame.CreateEntity( 

			(CEntityTemplate)LoadResourceAsync( 

			pick_random_sword()
			
			, true ), initpos );
				
			meshcomp = sword.GetComponentByClassName('CMeshComponent');
			h = 1.5;
			meshcomp.SetScale(Vector(h,h,h,1));	
			
			sword.Init(GetWitcherPlayer());
			sword.PlayEffectSingle('blade_trail');
			sword.PlayEffectSingle('appear_flash');
			//sword.PlayEffectSingle('eff_1');
			sword.PlayEffectSingle('eff_2');
			sword.PlayEffectSingle('hit_flash');
			sword.PlayEffectSingle('appear_flash_hit_1');
			sword.PlayEffectSingle('appear_flash_hit_2');
			sword.ShootProjectileAtPosition( 0, 20+RandRange(5,1), targetPosition, 500 );
			sword.DestroyAfter(31);
		}
	}

	latent function Projectile_3()
	{	
		portalPos = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetWorldRight() * -3;		
		portalPos.Z -= 0.5;

		initpos = portalPos;			
		initpos.Z += 2;

		portal_temp = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\portal.w2ent", true );

		portal_ent = (CEntity)theGame.CreateEntity( portal_temp, portalPos );

		portal_ent.PlayEffectSingle('teleport');

		portal_ent.PlayEffectSingle('portal');

		portal_ent.DestroyAfter(5);

		if( ACS_AttitudeCheck ( actor ) && GetWitcherPlayer().IsInCombat() && actor.IsAlive() )
		{	
			targetPosition = actor.PredictWorldPosition( 0.5 );
			targetPosition.Z += 1.1;
				
			sword = (W3ACSSwordProjectile)theGame.CreateEntity( 

			(CEntityTemplate)LoadResourceAsync( 

			pick_random_sword()
			
			, true ), initpos );
				
			meshcomp = sword.GetComponentByClassName('CMeshComponent');
			h = 1.5;
			meshcomp.SetScale(Vector(h,h,h,1));	
				
			sword.Init(GetWitcherPlayer());
			sword.PlayEffectSingle('blade_trail');
			sword.PlayEffectSingle('appear_flash');
			//sword.PlayEffectSingle('eff_1');
			sword.PlayEffectSingle('eff_2');
			sword.PlayEffectSingle('hit_flash');
			sword.PlayEffectSingle('appear_flash_hit_1');
			sword.PlayEffectSingle('appear_flash_hit_2');
			sword.ShootProjectileAtPosition( 0, 20+RandRange(5,1), targetPosition, 500 );
			sword.DestroyAfter(31);
		}		
		else
		{				
			//targetPosition = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetWorldForward() * 10;
			targetPosition = GetWitcherPlayer().GetLookAtPosition();
			//targetPosition.Z += 1.1;
				
			sword = (W3ACSSwordProjectile)theGame.CreateEntity( 

			(CEntityTemplate)LoadResourceAsync( 

			pick_random_sword()
			
			, true ), initpos );
				
			meshcomp = sword.GetComponentByClassName('CMeshComponent');
			h = 1.5;
			meshcomp.SetScale(Vector(h,h,h,1));	
			
			sword.Init(GetWitcherPlayer());
			sword.PlayEffectSingle('blade_trail');
			sword.PlayEffectSingle('appear_flash');
			//sword.PlayEffectSingle('eff_1');
			sword.PlayEffectSingle('eff_2');
			sword.PlayEffectSingle('hit_flash');
			sword.PlayEffectSingle('appear_flash_hit_1');
			sword.PlayEffectSingle('appear_flash_hit_2');
			sword.ShootProjectileAtPosition( 0, 20+RandRange(5,1), targetPosition, 500 );
			sword.DestroyAfter(31);
		}
	}

	latent function Projectile_4()
	{
		portalPos = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetWorldRight() * 5;			

		portalPos.Z -= 1.5;

		initpos = portalPos;			
		initpos.Z += 3;

		portal_temp = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\portal.w2ent", true );

		portal_ent = (CEntity)theGame.CreateEntity( portal_temp, portalPos );

		portal_ent = (CEntity)theGame.CreateEntity( portal_temp, initpos );

		portal_ent.PlayEffectSingle('teleport');

		portal_ent.PlayEffectSingle('portal');

		portal_ent.DestroyAfter(5);


		if( ACS_AttitudeCheck ( actor ) && GetWitcherPlayer().IsInCombat() && actor.IsAlive() )
		{	
			targetPosition = actor.PredictWorldPosition( 0.5 );
			targetPosition.Z += 1.1;
				
			sword = (W3ACSSwordProjectile)theGame.CreateEntity( 

			(CEntityTemplate)LoadResourceAsync( 

			pick_random_sword()
			
			, true ), initpos );
				
			meshcomp = sword.GetComponentByClassName('CMeshComponent');
			h = 1.5;
			meshcomp.SetScale(Vector(h,h,h,1));	
				
			sword.Init(GetWitcherPlayer());
			sword.PlayEffectSingle('blade_trail');
			sword.PlayEffectSingle('appear_flash');
			//sword.PlayEffectSingle('eff_1');
			sword.PlayEffectSingle('eff_2');
			sword.PlayEffectSingle('hit_flash');
			sword.PlayEffectSingle('appear_flash_hit_1');
			sword.PlayEffectSingle('appear_flash_hit_2');
			sword.ShootProjectileAtPosition( 0, 20+RandRange(5,1), targetPosition, 500 );
			sword.DestroyAfter(31);
		}		
		else
		{				
			//targetPosition = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetWorldForward() * 10;
			targetPosition = GetWitcherPlayer().GetLookAtPosition();
			//targetPosition.Z += 1.1;
				
			sword = (W3ACSSwordProjectile)theGame.CreateEntity( 

			(CEntityTemplate)LoadResourceAsync( 

			pick_random_sword()
			
			, true ), initpos );
				
			meshcomp = sword.GetComponentByClassName('CMeshComponent');
			h = 1.5;
			meshcomp.SetScale(Vector(h,h,h,1));	
			
			sword.Init(GetWitcherPlayer());
			sword.PlayEffectSingle('blade_trail');
			sword.PlayEffectSingle('appear_flash');
			//sword.PlayEffectSingle('eff_1');
			sword.PlayEffectSingle('eff_2');
			sword.PlayEffectSingle('hit_flash');
			sword.PlayEffectSingle('appear_flash_hit_1');
			sword.PlayEffectSingle('appear_flash_hit_2');
			sword.ShootProjectileAtPosition( 0, 20+RandRange(5,1), targetPosition, 500 );
			sword.DestroyAfter(31);
		}
	}

	latent function Projectile_5()
	{	
		portalPos = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetWorldRight() * -5;	
		portalPos.Z -= 1.5;

		initpos = portalPos;			
		initpos.Z += 3;

		portal_temp = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\portal.w2ent", true );

		portal_ent = (CEntity)theGame.CreateEntity( portal_temp, portalPos );

		portal_ent.PlayEffectSingle('teleport');

		portal_ent.PlayEffectSingle('portal');

		portal_ent.DestroyAfter(5);


		if( ACS_AttitudeCheck ( actor ) && GetWitcherPlayer().IsInCombat() && actor.IsAlive() )
		{				
			targetPosition = actor.PredictWorldPosition( 0.5 );
			targetPosition.Z += 1.1;

			sword = (W3ACSSwordProjectile)theGame.CreateEntity( 

			(CEntityTemplate)LoadResourceAsync( 

			pick_random_sword()
			
			, true ), initpos );
				
			meshcomp = sword.GetComponentByClassName('CMeshComponent');
			h = 1.5;
			meshcomp.SetScale(Vector(h,h,h,1));	
				
			sword.Init(GetWitcherPlayer());
			sword.PlayEffectSingle('blade_trail');
			sword.PlayEffectSingle('appear_flash');
			//sword.PlayEffectSingle('eff_1');
			sword.PlayEffectSingle('eff_2');
			sword.PlayEffectSingle('hit_flash');
			sword.PlayEffectSingle('appear_flash_hit_1');
			sword.PlayEffectSingle('appear_flash_hit_2');
			sword.ShootProjectileAtPosition( 0, 20+RandRange(5,1), targetPosition, 500 );
			sword.DestroyAfter(31);
		}		
		else
		{				
			//targetPosition = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetWorldForward() * 10;
			targetPosition = GetWitcherPlayer().GetLookAtPosition();
			//targetPosition.Z += 1.1;
				
			sword = (W3ACSSwordProjectile)theGame.CreateEntity( 

			(CEntityTemplate)LoadResourceAsync( 

			pick_random_sword()
			
			, true ), initpos );
				
			meshcomp = sword.GetComponentByClassName('CMeshComponent');
			h = 1.5;
			meshcomp.SetScale(Vector(h,h,h,1));	
			
			sword.Init(GetWitcherPlayer());
			sword.PlayEffectSingle('blade_trail');
			sword.PlayEffectSingle('appear_flash');
			//sword.PlayEffectSingle('eff_1');
			sword.PlayEffectSingle('eff_2');
			sword.PlayEffectSingle('hit_flash');
			sword.PlayEffectSingle('appear_flash_hit_1');
			sword.PlayEffectSingle('appear_flash_hit_2');
			sword.ShootProjectileAtPosition( 0, 20+RandRange(5,1), targetPosition, 500 );
			sword.DestroyAfter(31);
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


function ACS_Sword_Array()
{
	var vACS_Sword_Array : cACS_Sword_Array;
	vACS_Sword_Array = new cACS_Sword_Array in theGame;
			
	vACS_Sword_Array.Switch();
}

function ACS_Sword_Array_Fire_Override()
{
	var vACS_Sword_Array : cACS_Sword_Array;
	vACS_Sword_Array = new cACS_Sword_Array in theGame;
			
	vACS_Sword_Array.Swords_Fire_Override();
}

function ACS_Sword_Array_Destroy()
{
	var sword_torso_anchor_1, static_torso_sword_1, static_torso_sword_2, static_torso_sword_3, static_torso_sword_4, static_torso_sword_5 : CEntity;	
	var i													: int;
	
	sword_torso_anchor_1 = (CEntity)theGame.GetEntityByTag( 'sword_torso_anchor_1' );
	//sword_torso_anchor_1.BreakAttachment();
	sword_torso_anchor_1.Destroy();
				
	static_torso_sword_1 = (CEntity)theGame.GetEntityByTag( 'static_torso_sword_1' );
	//static_torso_sword_1.BreakAttachment();
	static_torso_sword_1.StopEffect('glow');
	static_torso_sword_1.PlayEffectSingle('disappear');
	static_torso_sword_1.DestroyAfter(0.4);

	static_torso_sword_2 = (CEntity)theGame.GetEntityByTag( 'static_torso_sword_2' );
	//static_torso_sword_2.BreakAttachment();
	static_torso_sword_2.StopEffect('glow');
	static_torso_sword_2.PlayEffectSingle('disappear');
	static_torso_sword_2.DestroyAfter(0.4);

	static_torso_sword_3 = (CEntity)theGame.GetEntityByTag( 'static_torso_sword_3' );
	//static_torso_sword_3.BreakAttachment();
	static_torso_sword_3.StopEffect('glow');
	static_torso_sword_3.PlayEffectSingle('disappear');
	static_torso_sword_3.DestroyAfter(0.4);

	static_torso_sword_4 = (CEntity)theGame.GetEntityByTag( 'static_torso_sword_4' );
	//static_torso_sword_4.BreakAttachment();
	static_torso_sword_4.StopEffect('glow');
	static_torso_sword_4.PlayEffectSingle('disappear');
	static_torso_sword_4.DestroyAfter(0.4);

	static_torso_sword_5 = (CEntity)theGame.GetEntityByTag( 'static_torso_sword_5' );
	//static_torso_sword_5.BreakAttachment();
	static_torso_sword_5.StopEffect('glow');
	static_torso_sword_5.PlayEffectSingle('disappear');
	static_torso_sword_5.DestroyAfter(0.4);
}

statemachine class cACS_Sword_Array
{
    function Switch()
	{
		if ( !GetWitcherPlayer().HasTag('ACS_Swords_Ready') )
		{
			this.PushState('Ready');

			GetWitcherPlayer().AddTag('ACS_Swords_Ready');
		}
		else if ( GetWitcherPlayer().HasTag('ACS_Swords_Ready') )
		{
			this.PushState('Fire');

			GetWitcherPlayer().RemoveTag('ACS_Swords_Ready');
		}
	}

	function Swords_Fire_Override()
	{
		if ( GetWitcherPlayer().HasTag('ACS_Swords_Ready') )
		{
			this.PushState('Fire');

			GetWitcherPlayer().RemoveTag('ACS_Swords_Ready');
		}
	}
}

state Ready in cACS_Sword_Array
{
	private var anchor_temp, sword_temp																													: CEntityTemplate;
	private var bonePosition, attach_vec																												: Vector;
	private var boneRotation, attach_rot																												: EulerAngles;
	private var sword_torso_anchor_1, static_torso_sword_1, static_torso_sword_2, static_torso_sword_3, static_torso_sword_4, static_torso_sword_5 		: CEntity;	
	private var movementAdjustor																														: CMovementAdjustor;
	private var ticket 																																	: SMovementAdjustmentRequestTicket;
	private var actor																																	: CActor;
	private var action 																																	: W3DamageAction;
	
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Ready_Swords();
	}
	
	entry function Ready_Swords()
	{
		actor = (CActor)( GetWitcherPlayer().GetDisplayTarget() );

		movementAdjustor = GetWitcherPlayer().GetMovingAgentComponent().GetMovementAdjustor();
		
		ticket = movementAdjustor.GetRequest( 'summon_swords');
		
		movementAdjustor.CancelByName( 'summon_swords' );
		
		movementAdjustor.CancelAll();
		
		ticket = movementAdjustor.CreateNewRequest( 'summon_swords' );
		
		movementAdjustor.AdjustmentDuration( ticket, 0.25 );
		
		movementAdjustor.MaxRotationAdjustmentSpeed( ticket, 50000 );
		
		movementAdjustor.MaxLocationAdjustmentDistance( ticket, true, 0 );
		
		movementAdjustor.MaxLocationAdjustmentSpeed( ticket, 50000 );

		GetACSWatcher().RemoveTimer('ACS_Shout');

		if (!theGame.IsDialogOrCutscenePlaying() 
		&& !GetWitcherPlayer().IsInNonGameplayCutscene() 
		&& !GetWitcherPlayer().IsInGameplayScene()
		&& !GetWitcherPlayer().IsUsingHorse()
		&& !GetWitcherPlayer().IsUsingVehicle()
		)
		{
			if( ACS_AttitudeCheck ( actor ) && GetWitcherPlayer().IsInCombat() && actor.IsAlive() )
			{	
				movementAdjustor.RotateTowards( ticket, actor );
			}
			else
			{
				movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );
			}

			thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( '', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(1.f, 1.f) );
		}

		ACS_Sword_Array_Destroy();
		Swords();
	}
	
	latent function Swords()
	{	
		anchor_temp = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true );
		
		sword_temp = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\aerondight_proj_static.w2ent", true );

		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( GetWitcherPlayer().GetBoneIndex( 'Trajectory' ), bonePosition, boneRotation );
		sword_torso_anchor_1 = (CEntity)theGame.CreateEntity( anchor_temp, GetWitcherPlayer().GetWorldPosition() + Vector( 0, 0, -10 ) );
		sword_torso_anchor_1.CreateAttachmentAtBoneWS( GetWitcherPlayer(), 'Trajectory', bonePosition, boneRotation );
		sword_torso_anchor_1.AddTag('sword_torso_anchor_1');
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		static_torso_sword_1 = (CEntity)theGame.CreateEntity( sword_temp, GetWitcherPlayer().GetWorldPosition() + Vector( 0, 0, -10 ) );
		static_torso_sword_2 = (CEntity)theGame.CreateEntity( sword_temp, GetWitcherPlayer().GetWorldPosition() + Vector( 0, 0, -10 ) );
		static_torso_sword_3 = (CEntity)theGame.CreateEntity( sword_temp, GetWitcherPlayer().GetWorldPosition() + Vector( 0, 0, -10 ) );
		static_torso_sword_4 = (CEntity)theGame.CreateEntity( sword_temp, GetWitcherPlayer().GetWorldPosition() + Vector( 0, 0, -10 ) );
		static_torso_sword_5 = (CEntity)theGame.CreateEntity( sword_temp, GetWitcherPlayer().GetWorldPosition() + Vector( 0, 0, -10 ) );

		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		// + down/ - up
		attach_rot.Roll = 0;

		attach_rot.Pitch = -110;
		
		// + left/ - right
		attach_rot.Yaw = 0;
		
		attach_vec.X = 0;
		
		//-Forward/+Backward
		attach_vec.Y = -0.5;
		
		//+up/-down
		attach_vec.Z = 3;
				
		static_torso_sword_1.CreateAttachment( sword_torso_anchor_1, , attach_vec, attach_rot );

		GetWitcherPlayer().PlayEffectSingle('hit_lightning');
		GetWitcherPlayer().StopEffect('hit_lightning');

		static_torso_sword_1.PlayEffectSingle('glow');
		static_torso_sword_1.AddTag('static_torso_sword_1');
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		attach_rot.Roll = 100;
		attach_rot.Pitch = 0;
		
		attach_rot.Yaw = 110;
		
		//+Up/-Down
		attach_vec.X = 1;
		
		//-Forward/+Backward
		attach_vec.Y = -0.5;
		
		//+Left/-Right
		attach_vec.Z = 2;
				
		static_torso_sword_2.CreateAttachment( sword_torso_anchor_1, , attach_vec, attach_rot );
		static_torso_sword_2.PlayEffectSingle('glow');
		static_torso_sword_2.AddTag('static_torso_sword_2');
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		attach_rot.Roll = 100;
		attach_rot.Pitch = 0;
		
		attach_rot.Yaw = 70;
		
		//+Up/-Down
		attach_vec.X = -1;
		
		//-Forward/+Backward
		attach_vec.Y = -0.5;
		
		//+Left/-Right
		attach_vec.Z = 2;
				
		static_torso_sword_3.CreateAttachment( sword_torso_anchor_1, , attach_vec, attach_rot );
		static_torso_sword_3.PlayEffectSingle('glow');
		static_torso_sword_3.AddTag('static_torso_sword_3');
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		attach_rot.Roll = 80;
		attach_rot.Pitch = 0;
		
		attach_rot.Yaw = 110;
		
		//+Up/-Down
		attach_vec.X = 1;
		
		//-Forward/+Backward
		attach_vec.Y = -0.5;
		
		//+Left/-Right
		attach_vec.Z = 1;
				
		static_torso_sword_4.CreateAttachment( sword_torso_anchor_1, , attach_vec, attach_rot );
		static_torso_sword_4.PlayEffectSingle('glow');
		static_torso_sword_4.AddTag('static_torso_sword_4');
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		attach_rot.Roll = 80;
		attach_rot.Pitch = 0;
		
		attach_rot.Yaw = 70;
		
		//+Up/-Down
		attach_vec.X = -1;
		
		//-Forward/+Backward
		attach_vec.Y = -0.5;
		
		//+Left/-Right
		attach_vec.Z = 1;
				
		static_torso_sword_5.CreateAttachment( sword_torso_anchor_1, , attach_vec, attach_rot );
		static_torso_sword_5.PlayEffectSingle('glow');
		static_torso_sword_5.AddTag('static_torso_sword_5');
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state Fire in cACS_Sword_Array
{
	private var initpos					: Vector;
	private var sword 					: W3ACSSwordProjectile;
	private var actor, pActor       	: CActor;
	private var targetPosition			: Vector;
	private var meshcomp 				: CComponent;
	private var h 						: float;
	private var movementAdjustor		: CMovementAdjustor;
	private var ticket 					: SMovementAdjustmentRequestTicket;
	
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Swords_Fire();
	}
	
	entry function Swords_Fire()
	{
		GetWitcherPlayer().DrainFocus( GetWitcherPlayer().GetStat( BCS_Focus ) * 2/3 );

		GetACSWatcher().RemoveTimer('ACS_Shout');

		actor = (CActor)( GetWitcherPlayer().GetDisplayTarget() );

		movementAdjustor = GetWitcherPlayer().GetMovingAgentComponent().GetMovementAdjustor();
		
		ticket = movementAdjustor.GetRequest( 'summon_swords');
		
		movementAdjustor.CancelByName( 'summon_swords' );
		
		movementAdjustor.CancelAll();
		
		ticket = movementAdjustor.CreateNewRequest( 'summon_swords' );
		
		movementAdjustor.AdjustmentDuration( ticket, 0.25 );
		
		movementAdjustor.MaxRotationAdjustmentSpeed( ticket, 50000 );
		
		movementAdjustor.MaxLocationAdjustmentDistance( ticket, true, 0 );
		
		movementAdjustor.MaxLocationAdjustmentSpeed( ticket, 50000 );

		if (!theGame.IsDialogOrCutscenePlaying() 
		&& !GetWitcherPlayer().IsInNonGameplayCutscene() 
		&& !GetWitcherPlayer().IsInGameplayScene()
		&& !GetWitcherPlayer().IsUsingHorse()
		&& !GetWitcherPlayer().IsUsingVehicle()
		)
		{
			if( ACS_AttitudeCheck ( actor ) && GetWitcherPlayer().IsInCombat() && actor.IsAlive() )
			{	
				movementAdjustor.RotateTowards( ticket, actor );
			}
			else
			{
				movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );
			}

			thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( '', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(1.f, 1.f) );
		}

		ACS_Sword_Array_Destroy();
		Projectile_1();
		Projectile_2();
		Projectile_3();
		Projectile_4();
		Projectile_5();
	}
	
	latent function Projectile_1()
	{	
		if( ACS_AttitudeCheck ( actor ) && GetWitcherPlayer().IsInCombat() && actor.IsAlive() )
		{	
			initpos = GetWitcherPlayer().GetWorldPosition();				
			initpos.Z += 3;
						
			targetPosition = actor.PredictWorldPosition( 0.1 );
			targetPosition.Z += 1.1;
				
			sword = (W3ACSSwordProjectile)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\sword_projectile_1.w2ent", true ), initpos );
				
			meshcomp = sword.GetComponentByClassName('CMeshComponent');
			h = 1;
			meshcomp.SetScale(Vector(h,h,h,1));	
				
			sword.Init(GetWitcherPlayer());
			sword.PlayEffectSingle('blade_trail');
			sword.PlayEffectSingle('appear_flash');
			//sword.PlayEffectSingle('eff_1');
			sword.PlayEffectSingle('eff_2');
			sword.PlayEffectSingle('hit_flash');
			sword.PlayEffectSingle('appear_flash_hit_1');
			sword.PlayEffectSingle('appear_flash_hit_2');
			sword.PlayEffectSingle('glow');
			sword.ShootProjectileAtPosition( 0, 20+RandRange(5,1), targetPosition, 500 );
			sword.DestroyAfter(31);
		}		
		else
		{
			initpos = GetWitcherPlayer().GetWorldPosition();				
			initpos.Z += 3;
								
			//targetPosition = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetWorldForward() * 10;
			targetPosition = GetWitcherPlayer().GetLookAtPosition();
			//targetPosition.Z += 1.1;
				
			sword = (W3ACSSwordProjectile)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\sword_projectile_1.w2ent", true ), initpos );
				
			meshcomp = sword.GetComponentByClassName('CMeshComponent');
			h = 1;
			meshcomp.SetScale(Vector(h,h,h,1));	
			
			sword.Init(GetWitcherPlayer());
			sword.PlayEffectSingle('blade_trail');
			sword.PlayEffectSingle('appear_flash');
			//sword.PlayEffectSingle('eff_1');
			sword.PlayEffectSingle('eff_2');
			sword.PlayEffectSingle('hit_flash');
			sword.PlayEffectSingle('appear_flash_hit_1');
			sword.PlayEffectSingle('appear_flash_hit_2');
			sword.PlayEffectSingle('glow');
			sword.ShootProjectileAtPosition( 0, 20+RandRange(5,1), targetPosition, 500 );
			sword.DestroyAfter(31);
		}
	}

	latent function Projectile_2()
	{	
		if( ACS_AttitudeCheck ( actor ) && GetWitcherPlayer().IsInCombat() && actor.IsAlive() )
		{	
			initpos = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetWorldRight() * 1.5;				
			initpos.Z += 2;
						
			targetPosition = actor.PredictWorldPosition( 0.1 );
			targetPosition.Z += 1.1;
				
			sword = (W3ACSSwordProjectile)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\sword_projectile_1.w2ent", true ), initpos );
				
			meshcomp = sword.GetComponentByClassName('CMeshComponent');
			h = 1;
			meshcomp.SetScale(Vector(h,h,h,1));	
				
			sword.Init(GetWitcherPlayer());
			sword.PlayEffectSingle('blade_trail');
			sword.PlayEffectSingle('appear_flash');
			//sword.PlayEffectSingle('eff_1');
			sword.PlayEffectSingle('eff_2');
			sword.PlayEffectSingle('hit_flash');
			sword.PlayEffectSingle('appear_flash_hit_1');
			sword.PlayEffectSingle('appear_flash_hit_2');
			sword.PlayEffectSingle('glow');
			sword.ShootProjectileAtPosition( 0, 20+RandRange(5,1), targetPosition, 500 );
			sword.DestroyAfter(31);
		}		
		else
		{
			initpos = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetWorldRight() * 1.5;				
			initpos.Z += 2;
								
			//targetPosition = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetWorldForward() * 10;
			targetPosition = GetWitcherPlayer().GetLookAtPosition();
			//targetPosition.Z += 1.1;
				
			sword = (W3ACSSwordProjectile)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\sword_projectile_1.w2ent", true ), initpos );
				
			meshcomp = sword.GetComponentByClassName('CMeshComponent');
			h = 1;
			meshcomp.SetScale(Vector(h,h,h,1));	
			
			sword.Init(GetWitcherPlayer());
			sword.PlayEffectSingle('blade_trail');
			sword.PlayEffectSingle('appear_flash');
			//sword.PlayEffectSingle('eff_1');
			sword.PlayEffectSingle('eff_2');
			sword.PlayEffectSingle('hit_flash');
			sword.PlayEffectSingle('appear_flash_hit_1');
			sword.PlayEffectSingle('appear_flash_hit_2');
			sword.PlayEffectSingle('glow');
			sword.ShootProjectileAtPosition( 0, 20+RandRange(5,1), targetPosition, 500 );
			sword.DestroyAfter(31);
		}
	}

	latent function Projectile_3()
	{	
		if( ACS_AttitudeCheck ( actor ) && GetWitcherPlayer().IsInCombat() && actor.IsAlive() )
		{	
			initpos = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetWorldRight() * -1.5;				
			initpos.Z += 2;
						
			targetPosition = actor.PredictWorldPosition( 0.1 );
			targetPosition.Z += 1.1;
				
			sword = (W3ACSSwordProjectile)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\sword_projectile_1.w2ent", true ), initpos );
				
			meshcomp = sword.GetComponentByClassName('CMeshComponent');
			h = 1;
			meshcomp.SetScale(Vector(h,h,h,1));	
				
			sword.Init(GetWitcherPlayer());
			sword.PlayEffectSingle('blade_trail');
			sword.PlayEffectSingle('appear_flash');
			//sword.PlayEffectSingle('eff_1');
			sword.PlayEffectSingle('eff_2');
			sword.PlayEffectSingle('hit_flash');
			sword.PlayEffectSingle('appear_flash_hit_1');
			sword.PlayEffectSingle('appear_flash_hit_2');
			sword.PlayEffectSingle('glow');
			sword.ShootProjectileAtPosition( 0, 20+RandRange(5,1), targetPosition, 500 );
			sword.DestroyAfter(31);
		}		
		else
		{
			initpos = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetWorldRight() * -1.5;				
			initpos.Z += 2;
								
			//targetPosition = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetWorldForward() * 10;
			targetPosition = GetWitcherPlayer().GetLookAtPosition();
			//targetPosition.Z += 1.1;
				
			sword = (W3ACSSwordProjectile)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\sword_projectile_1.w2ent", true ), initpos );
				
			meshcomp = sword.GetComponentByClassName('CMeshComponent');
			h = 1;
			meshcomp.SetScale(Vector(h,h,h,1));	
			
			sword.Init(GetWitcherPlayer());
			sword.PlayEffectSingle('blade_trail');
			sword.PlayEffectSingle('appear_flash');
			//sword.PlayEffectSingle('eff_1');
			sword.PlayEffectSingle('eff_2');
			sword.PlayEffectSingle('hit_flash');
			sword.PlayEffectSingle('appear_flash_hit_1');
			sword.PlayEffectSingle('appear_flash_hit_2');
			sword.PlayEffectSingle('glow');
			sword.ShootProjectileAtPosition( 0, 20+RandRange(5,1), targetPosition, 500 );
			sword.DestroyAfter(31);
		}
	}

	latent function Projectile_4()
	{	
		if( ACS_AttitudeCheck ( actor ) && GetWitcherPlayer().IsInCombat() && actor.IsAlive() )
		{	
			initpos = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetWorldRight() * 1.5;				
			initpos.Z += 1;
						
			targetPosition = actor.PredictWorldPosition( 0.1 );
			targetPosition.Z += 1.1;
				
			sword = (W3ACSSwordProjectile)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\sword_projectile_1.w2ent", true ), initpos );
				
			meshcomp = sword.GetComponentByClassName('CMeshComponent');
			h = 1;
			meshcomp.SetScale(Vector(h,h,h,1));	
				
			sword.Init(GetWitcherPlayer());
			sword.PlayEffectSingle('blade_trail');
			sword.PlayEffectSingle('appear_flash');
			//sword.PlayEffectSingle('eff_1');
			sword.PlayEffectSingle('eff_2');
			sword.PlayEffectSingle('hit_flash');
			sword.PlayEffectSingle('appear_flash_hit_1');
			sword.PlayEffectSingle('appear_flash_hit_2');
			sword.PlayEffectSingle('glow');
			sword.ShootProjectileAtPosition( 0, 20+RandRange(5,1), targetPosition, 500 );
			sword.DestroyAfter(31);
		}		
		else
		{
			initpos = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetWorldRight() * 1.5;				
			initpos.Z += 1;
								
			//targetPosition = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetWorldForward() * 10;
			targetPosition = GetWitcherPlayer().GetLookAtPosition();
			//targetPosition.Z += 1.1;
				
			sword = (W3ACSSwordProjectile)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\sword_projectile_1.w2ent", true ), initpos );
				
			meshcomp = sword.GetComponentByClassName('CMeshComponent');
			h = 1;
			meshcomp.SetScale(Vector(h,h,h,1));	
			
			sword.Init(GetWitcherPlayer());
			sword.PlayEffectSingle('blade_trail');
			sword.PlayEffectSingle('appear_flash');
			//sword.PlayEffectSingle('eff_1');
			sword.PlayEffectSingle('eff_2');
			sword.PlayEffectSingle('hit_flash');
			sword.PlayEffectSingle('appear_flash_hit_1');
			sword.PlayEffectSingle('appear_flash_hit_2');
			sword.PlayEffectSingle('glow');
			sword.ShootProjectileAtPosition( 0, 20+RandRange(5,1), targetPosition, 500 );
			sword.DestroyAfter(31);
		}
	}

	latent function Projectile_5()
	{	
		if( ACS_AttitudeCheck ( actor ) && GetWitcherPlayer().IsInCombat() && actor.IsAlive() )
		{	
			initpos = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetWorldRight() * -1.5;				
			initpos.Z += 1;
						
			targetPosition = actor.PredictWorldPosition( 0.1 );
			targetPosition.Z += 1.1;
				
			sword = (W3ACSSwordProjectile)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\sword_projectile_1.w2ent", true ), initpos );
				
			meshcomp = sword.GetComponentByClassName('CMeshComponent');
			h = 1;
			meshcomp.SetScale(Vector(h,h,h,1));	
				
			sword.Init(GetWitcherPlayer());
			sword.PlayEffectSingle('blade_trail');
			sword.PlayEffectSingle('appear_flash');
			//sword.PlayEffectSingle('eff_1');
			sword.PlayEffectSingle('eff_2');
			sword.PlayEffectSingle('hit_flash');
			sword.PlayEffectSingle('appear_flash_hit_1');
			sword.PlayEffectSingle('appear_flash_hit_2');
			sword.PlayEffectSingle('glow');
			sword.ShootProjectileAtPosition( 0, 20+RandRange(5,1), targetPosition, 500 );
			sword.DestroyAfter(31);
		}		
		else
		{
			initpos = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetWorldRight() * -1.5;				
			initpos.Z += 1;
								
			//targetPosition = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetWorldForward() * 10;
			targetPosition = GetWitcherPlayer().GetLookAtPosition();
			//targetPosition.Z += 1.1;
				
			sword = (W3ACSSwordProjectile)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\sword_projectile_1.w2ent", true ), initpos );
				
			meshcomp = sword.GetComponentByClassName('CMeshComponent');
			h = 1;
			meshcomp.SetScale(Vector(h,h,h,1));	
			
			sword.Init(GetWitcherPlayer());
			sword.PlayEffectSingle('blade_trail');
			sword.PlayEffectSingle('appear_flash');
			//sword.PlayEffectSingle('eff_1');
			sword.PlayEffectSingle('eff_2');
			sword.PlayEffectSingle('hit_flash');
			sword.PlayEffectSingle('appear_flash_hit_1');
			sword.PlayEffectSingle('appear_flash_hit_2');
			sword.PlayEffectSingle('glow');
			sword.ShootProjectileAtPosition( 0, 20+RandRange(5,1), targetPosition, 500 );
			sword.DestroyAfter(31);
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


function ACS_Bat_Damage()
{
	var actortarget																										: CActor;
	var actors    																										: array<CActor>;
	var damage																											: float;
	var i																												: int;
	var dmg 																											: W3DamageAction;
	var targetVitality, targetEssence 																					: EBaseCharacterStats;

	//actors = GetActorsInRange(GetWitcherPlayer(), 7, 100, ,true);

	actors.Clear();

	actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 7, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

	//GetWitcherPlayer().DrainStamina( ESAT_FixedValue, 0.046875 );

	//GetWitcherPlayer().DrainStamina( ESAT_FixedValue, 0.0625 );

	GetWitcherPlayer().DrainStamina( ESAT_FixedValue, 0.5 );

	for( i = 0; i < actors.Size(); i += 1 )
	{
		actortarget = (CActor)actors[i];

		if (actortarget.UsesEssence())
		{
			if ( actortarget.GetStat( BCS_Essence ) <= actortarget.GetStatMax( BCS_Essence ) * 0.05 )
			{
				damage = 99999;
			}
			else
			{
				damage = actortarget.GetStat( BCS_Essence ) * 0.000625;
			}
		}
		else if (actortarget.UsesVitality())
		{
			if ( actortarget.GetStat( BCS_Vitality ) <= actortarget.GetStatMax( BCS_Vitality ) * 0.05 )
			{
				damage = 99999;
			}
			else
			{
				damage = actortarget.GetStat( BCS_Vitality ) * 0.000625;
			}
		}

		if 
		( 
		actortarget == GetWitcherPlayer() 
		|| actortarget.HasTag('smokeman') 
		|| ((CNewNPC)(actortarget)).IsHorse() 
		|| actortarget.HasTag('ACS_Rat_Mage_Rat')
		|| actortarget.HasTag('ACS_Plumard')
		|| actortarget.HasTag('ACS_Tentacle_1') 
		|| actortarget.HasTag('ACS_Tentacle_2') 
		|| actortarget.HasTag('ACS_Tentacle_3') 
		|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
		|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
		|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
		|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
		|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
		|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4') 
		|| actortarget.HasAbility('animal_rat_base')
		)
		continue;
			
		dmg = new W3DamageAction in theGame.damageMgr;
		dmg.Initialize(NULL, actortarget, theGame, 'ACS_Bats_Damage', EHRT_None, CPS_Undefined, false, false, true, false);
		dmg.SetProcessBuffsIfNoDamage(true);
		dmg.SetCanPlayHitParticle(false);
		dmg.SetSuppressHitSounds(true);

		dmg.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, damage );
					
		//dmg.AddEffectInfo( EET_Bleeding, 10 );
			
		theGame.damageMgr.ProcessAction( dmg );
								
		delete dmg;	
	}
}

statemachine class cACS_Bats_Summon
{
	function ACS_Bats_Summon_Engage()
	{
		this.PushState('ACS_Bats_Summon_Engage');
	}

	function ACS_Bats_Summon_Small_Engage()
	{
		this.PushState('ACS_Bats_Summon_Small_Engage');
	}
}

state ACS_Bats_Summon_Engage in cACS_Bats_Summon
{
	private var playerRot, adjustedRot																							: EulerAngles;
	private var markerNPC																										: CEntity;
	private var playerPos, spawnPos																								: Vector;
	private var i, markerCount																									: int;
	private var randRange, randAngle, dist																						: float;
	private var actortarget																										: CActor;
	private var actors    																										: array<CActor>;
	private var movementAdjustor																								: CMovementAdjustor;
	private var ticket																											: SMovementAdjustmentRequestTicket;
	private var bat_template_names																								: array< string >;

	event OnEnterState(prevStateName : name)
	{
		ACS_Bats_Summon_Latent();
		
		BlindOrBleed();
	}
		
	entry function BlindOrBleed()
	{
		//actors = GetActorsInRange(GetWitcherPlayer(), 10, 100, ,true);

		actors.Clear();

		actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 7, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

		for( i = 0; i < actors.Size(); i += 1 )
		{
			actortarget = (CActor)actors[i];

			if 
			( 
			actortarget == GetWitcherPlayer() 
			|| actortarget.HasTag('ACS_Transformation_Vampire_Monster') 
			|| actortarget.HasTag('ACS_Transformation_Vampire_Monster_Camera_Dummy') 
			|| ((CNewNPC)(actortarget)).IsHorse() 
			|| actortarget.HasTag('ACS_Rat_Mage_Rat')
			|| actortarget.HasTag('ACS_Plumard')
			|| actortarget.HasTag('ACS_Tentacle_1') 
			|| actortarget.HasTag('ACS_Tentacle_2') 
			|| actortarget.HasTag('ACS_Tentacle_3') 
			|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
			|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
			|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
			|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
			|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
			|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4') 
			|| actortarget.HasAbility('animal_rat_base')
			)
			continue;

			if (FactsQuerySum("acs_transformation_activated") <= 0)
			{
				dist = (((CMovingPhysicalAgentComponent)actortarget.GetMovingAgentComponent()).GetCapsuleRadius() 
				+ ((CMovingPhysicalAgentComponent)GetWitcherPlayer().GetMovingAgentComponent()).GetCapsuleRadius()) * 1.75;

				movementAdjustor = actortarget.GetMovingAgentComponent().GetMovementAdjustor();
				movementAdjustor.CancelByName( 'ACS_AardPull' );
				ticket = movementAdjustor.CreateNewRequest( 'ACS_AardPull' );
				movementAdjustor.AdjustmentDuration( ticket, 1 );
				movementAdjustor.ShouldStartAt(ticket, actortarget.GetWorldPosition());
				movementAdjustor.AdjustLocationVertically( ticket, true );
				movementAdjustor.ScaleAnimationLocationVertically( ticket, true );
				movementAdjustor.MaxLocationAdjustmentSpeed( ticket, 5 );

				movementAdjustor.SlideTowards( ticket, GetWitcherPlayer(), dist, dist );	
			}

			if ( RandF() < 0.75 )
			{
				if( RandF() < 0.025 ) 
				{
					if( actortarget.HasBuff( EET_Bleeding ) ) 
					{ 	
						actortarget.RemoveBuff( EET_Bleeding, true, 'acs_bat_effect' ); 						
					}

					if( !actortarget.IsImmuneToBuff( EET_Blindness ) && !actortarget.HasBuff( EET_Blindness ) ) 
					{ 	
						actortarget.AddEffectDefault( EET_Blindness, GetWitcherPlayer(), 'acs_bat_effect' ); 						
					}
				}
				else
				{
					if( actortarget.HasBuff( EET_Blindness ) ) 
					{ 	
						actortarget.RemoveBuff( EET_Blindness, true, 'acs_bat_effect' ); 						
					}

					if( !actortarget.IsImmuneToBuff( EET_Bleeding ) && !actortarget.HasBuff( EET_Bleeding ) ) 
					{ 	
						actortarget.AddEffectDefault( EET_Bleeding, GetWitcherPlayer(), 'acs_bat_effect' ); 						
					}
				}
			}
		}
	}
		
	entry function ACS_Bats_Summon_Latent()
	{
		playerPos = GetWitcherPlayer().GetWorldPosition();

		playerRot = thePlayer.GetWorldRotation();

		playerRot.Yaw += 180;

		adjustedRot = EulerAngles(0,0,0);

		adjustedRot.Yaw = playerRot.Yaw;
	
		markerCount = 3;

		for( i = 0; i < markerCount; i += 1 )
		{
			randRange = 5 + 5 * RandF();
			randAngle = 2 * Pi() * RandF();
			
			spawnPos.X = randRange * CosF( randAngle ) + playerPos.X;
			spawnPos.Y = randRange * SinF( randAngle ) + playerPos.Y;
			spawnPos.Z = playerPos.Z;
			spawnPos.Z -= 1;

			adjustedRot.Yaw = RandRangeF(360,1);
			adjustedRot.Pitch = RandRangeF(45,-45);
			adjustedRot.Roll = RandRangeF(45,-45);

			bat_template_names.Clear();

			bat_template_names.PushBack("dlc\dlc_acs\data\fx\bat_swarm\bat_swarm_01.w2ent");
			bat_template_names.PushBack("dlc\dlc_acs\data\fx\bat_swarm\bat_swarm_02.w2ent");
			bat_template_names.PushBack("dlc\dlc_acs\data\fx\bat_swarm\bat_swarm_03.w2ent");
			bat_template_names.PushBack("dlc\dlc_acs\data\fx\bat_swarm\bat_swarm_04.w2ent");
			bat_template_names.PushBack("dlc\dlc_acs\data\fx\bat_swarm\bat_swarm_05.w2ent");
			bat_template_names.PushBack("dlc\dlc_acs\data\fx\bat_swarm\bat_swarm_06.w2ent");

			markerNPC = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

			bat_template_names[RandRange(bat_template_names.Size())]
			
			, true ), spawnPos, adjustedRot );

			markerNPC.PlayEffectSingle('bat_swarm');
			markerNPC.DestroyAfter(3);
		}
	}
}

state ACS_Bats_Summon_Small_Engage in cACS_Bats_Summon
{
	private var playerRot, adjustedRot																							: EulerAngles;
	private var markerNPC																										: CEntity;
	private var playerPos, spawnPos																								: Vector;
	private var i, markerCount																									: int;
	private var randRange, randAngle, dist																						: float;
	private var actortarget																										: CActor;
	private var actors    																										: array<CActor>;
	private var movementAdjustor																								: CMovementAdjustor;
	private var ticket																											: SMovementAdjustmentRequestTicket;
	private var bat_template_names																								: array< string >;

	event OnEnterState(prevStateName : name)
	{
		ACS_Bats_Summon_Small_Latent();
	}
		
	entry function ACS_Bats_Summon_Small_Latent()
	{
		playerPos = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetWorldForward() * 6;

		playerRot = thePlayer.GetWorldRotation();

		adjustedRot = EulerAngles(0,0,0);
	
		markerCount = 3;

		for( i = 0; i < markerCount; i += 1 )
		{
			randRange = 2 + 2 * RandF();
			randAngle = 2 * Pi() * RandF();
			
			spawnPos.X = randRange * CosF( randAngle ) + playerPos.X;
			spawnPos.Y = randRange * SinF( randAngle ) + playerPos.Y;
			spawnPos.Z = playerPos.Z;
			spawnPos.Z -= 1;

			adjustedRot.Yaw = RandRangeF(360,1);
			adjustedRot.Pitch = RandRangeF(45,-45);
			adjustedRot.Roll = RandRangeF(45,-45);

			bat_template_names.Clear();

			bat_template_names.PushBack("dlc\dlc_acs\data\fx\bat_swarm\bat_swarm_01.w2ent");
			bat_template_names.PushBack("dlc\dlc_acs\data\fx\bat_swarm\bat_swarm_02.w2ent");
			bat_template_names.PushBack("dlc\dlc_acs\data\fx\bat_swarm\bat_swarm_03.w2ent");
			bat_template_names.PushBack("dlc\dlc_acs\data\fx\bat_swarm\bat_swarm_04.w2ent");
			bat_template_names.PushBack("dlc\dlc_acs\data\fx\bat_swarm\bat_swarm_05.w2ent");
			bat_template_names.PushBack("dlc\dlc_acs\data\fx\bat_swarm\bat_swarm_06.w2ent");

			markerNPC = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

			bat_template_names[RandRange(bat_template_names.Size())]
			
			, true ), spawnPos, adjustedRot );

			markerNPC.PlayEffectSingle('bat_swarm');
			markerNPC.DestroyAfter(3);
		}
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_bruxa_blood_resource()
{
	var vACS_bruxa_blood_resource : cACS_bruxa_blood_resource;
	vACS_bruxa_blood_resource = new cACS_bruxa_blood_resource in theGame;
			
	vACS_bruxa_blood_resource.ACS_bruxa_blood_resource_Engage();
}

statemachine class cACS_bruxa_blood_resource
{
    function ACS_bruxa_blood_resource_Engage()
	{
		this.PushState('ACS_bruxa_blood_resource_Engage');
	}
}

state ACS_bruxa_blood_resource_Engage in cACS_bruxa_blood_resource
{
	private var npc 																																						: CActor;
	private var actors    																																					: array<CActor>;
	private var i         																																					: int;
	private var vfxEnt, vfxEnt2, vfxEnt3																																	: CEntity;
	private var targetRotationNPC																																			: EulerAngles;
		
	event OnEnterState(prevStateName : name)
	{
		ACS_bruxa_blood_resource_ENTRY();
	}

	entry function ACS_bruxa_blood_resource_ENTRY()
	{
		actors.Clear();

		actors = GetActorsInRange(GetWitcherPlayer(), 10, 10, 'bruxa_bite_victim', true);

		for( i = 0; i < actors.Size(); i += 1 )
		{
			npc = (CNewNPC)actors[i];

			targetRotationNPC = npc.GetWorldRotation();
			targetRotationNPC.Yaw += RandRangeF(360,1);
			targetRotationNPC.Pitch += RandRangeF(360,1);
			targetRotationNPC.Roll += RandRangeF(360,1);
			
			if( actors.Size() > 0 )
			{	
				if 
				(
				!((CNewNPC)npc).IsFlying()
				&& !npc.HasAbility('mon_garkain')
				&& !npc.HasAbility('mon_sharley_base')
				&& !npc.HasAbility('mon_bies_base')
				&& !npc.HasAbility('mon_golem_base')
				&& !npc.HasAbility('mon_endriaga_base')
				&& !npc.HasAbility('mon_arachas_base')
				&& !npc.HasAbility('mon_kikimore_base')
				&& !npc.HasAbility('mon_black_spider_base')
				&& !npc.HasAbility('mon_black_spider_ep2_base')
				&& !npc.HasAbility('mon_ice_giant')
				&& !npc.HasAbility('mon_cyclops')
				&& !npc.HasAbility('mon_knight_giant')
				&& !npc.HasAbility('mon_cloud_giant')
				&& !npc.HasAbility('mon_troll_base')
				)
				{
					if( ((CNewNPC)npc).GetBloodType() == BT_Red) 
					{
						vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\blood_fx.w2ent", true ), npc.GetWorldPosition(), targetRotationNPC );
						vfxEnt.CreateAttachment( npc, , Vector( 0, 0, 1.5 ), EulerAngles(RandRangeF(360,1), RandRangeF(360,1), RandRangeF(360,1)) );	
						vfxEnt.PlayEffectSingle('blood_explode_red');
						vfxEnt.PlayEffectSingle('hit');
						vfxEnt.PlayEffectSingle('hit_refraction');
						vfxEnt.DestroyAfter(1.5);

						vfxEnt2 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync('finisher_blood', true), npc.GetWorldPosition(), targetRotationNPC);
						vfxEnt2.CreateAttachment( npc, , Vector( 0, 0, 1.5 ), EulerAngles(RandRangeF(360,1), RandRangeF(360,1), RandRangeF(360,1)) );	
						vfxEnt2.PlayEffectSingle('crawl_blood');
						vfxEnt2.DestroyAfter(1.5);
					}
				}
			}
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_Hijack_Marker_Create()
{
	var vACS_Hijack_Marker_Create : cACS_Hijack_Marker_Create;
	vACS_Hijack_Marker_Create = new cACS_Hijack_Marker_Create in theGame;
			
	vACS_Hijack_Marker_Create.ACS_Hijack_Marker_Create_Engage();
}

statemachine class cACS_Hijack_Marker_Create
{
    function ACS_Hijack_Marker_Create_Engage()
	{
		this.PushState('ACS_Hijack_Marker_Create_Engage');
	}
}

state ACS_Hijack_Marker_Create_Engage in cACS_Hijack_Marker_Create
{
	private var npc 																																						: CActor;
	private var actors    																																					: array<CActor>;
	private var i         																																					: int;
	private var vfxEnt, ent_2																																				: CEntity;
	private var targetRotationNPC																																			: EulerAngles;
		
	event OnEnterState(prevStateName : name)
	{
		ACS_Hijack_Marker_Create_ENTRY();
	}
	
	entry function ACS_Hijack_Marker_Create_ENTRY()
	{
		actors.Clear();

		actors = GetActorsInRange(GetWitcherPlayer(), 10, 10, 'bruxa_bite_victim', true);

		ACS_Hijack_Marker_2_Destroy();

		for( i = 0; i < actors.Size(); i += 1 )
		{
			npc = (CNewNPC)actors[i];

			targetRotationNPC = npc.GetWorldRotation();
			targetRotationNPC.Yaw = RandRangeF(360,1);
			targetRotationNPC.Pitch = RandRangeF(45,-45);
			
			if( actors.Size() > 0 )
			{	
				vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\ep1\data\fx\quest\q604\604_11_cellar\ground_smoke_ent.w2ent", true ), npc.GetWorldPosition(), targetRotationNPC );

				vfxEnt.CreateAttachmentAtBoneWS( npc, 'head', npc.GetBoneWorldPosition('head'), npc.GetWorldRotation() );

				vfxEnt.StopEffect('ground_smoke');

				vfxEnt.PlayEffectSingle('ground_smoke');

				vfxEnt.AddTag('ACS_Hijack_Marker_2');
			}
		}

		ACSGetCEntity('ACS_Player_Hijack_Mark').Destroy();

		ent_2 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\fx\acs_ice_breathe_old.w2ent"

		, true ), thePlayer.GetWorldPosition() );

		ent_2.AddTag('ACS_Player_Hijack_Mark');

		ent_2.CreateAttachment( GetWitcherPlayer(), 'l_weapon' );
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


statemachine class cACS_Arrow_Create
{
    function ACS_Arrow_Create_Engage()
	{
		this.PushState('ACS_Arrow_Create_Engage');
	}

	function ACS_Arrow_Create_Ready_Engage()
	{
		this.PushState('ACS_Arrow_Create_Ready_Engage');
	}

	function ACS_Arrow_Create_Ready_Arrow_Rain_Engage()
	{
		this.PushState('ACS_Arrow_Create_Ready_Arrow_Rain_Engage');
	}

	function ACS_Arrow_Create_Crossbow_Engage()
	{
		this.PushState('ACS_Arrow_Create_Crossbow_Engage');
	}

	function ACS_ShootCrossbow_Arrow_Engage()
	{
		this.PushState('ACS_ShootCrossbow_Arrow_Engage');
	}
}

state ACS_Arrow_Create_Engage in cACS_Arrow_Create
{
	private var attach_vec, bone_vec					: Vector;
	private var attach_rot, bone_rot					: EulerAngles;
	private var arrow1									: CEntity;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Arrow_Create_Entry();
	}
	
	entry function Arrow_Create_Entry()
	{
		if (FactsQuerySum("ACS_Azkar_Active") > 0
		)
		{
			//ACSGetCEntity('ACS_Bow_Arrow').Destroy();
			ACSGetCEntity('ACS_Bow_Arrow').Teleport( GetWitcherPlayer().GetWorldPosition() + Vector( 0, 0, -200 ) );
			ACSGetCEntity('ACS_Bow_Arrow').DestroyAfter(0.0125);
			ACSGetCEntity('ACS_Bow_Arrow').RemoveTag('ACS_Bow_Arrow');

			arrow1 = (CEntity)theGame.CreateEntity((CEntityTemplate)LoadResourceAsync( 
		
			//"items\weapons\projectiles\arrows\arrow_01.w2ent"
			"dlc\dlc_acs\data\entities\projectiles\bow_projectile_moving.w2ent"
				
			, true), GetWitcherPlayer().GetWorldPosition() );
				
			attach_rot.Roll = 0;
			attach_rot.Pitch = 0;
			attach_rot.Yaw = 177.5;
			attach_vec.X = 0;
			attach_vec.Y = 0;
			attach_vec.Z = 0.0325;
			
			arrow1.PlayEffectSingle('ghost_06');

			arrow1.PlayEffectSingle('fire_wraith');

			arrow1.PlayEffectSingle('arrow_trail_wraith');

			arrow1.PlayEffectSingle('arrow_trail_fire_wraith');

			arrow1.PlayEffectSingle('arrow_trail_red_wraith');

			arrow1.CreateAttachment( GetWitcherPlayer(), 'r_weapon', attach_vec, attach_rot );
			arrow1.AddTag('ACS_Bow_Arrow');
		}	
	}
}

state ACS_Arrow_Create_Ready_Engage in cACS_Arrow_Create
{
	private var attach_vec, bone_vec					: Vector;
	private var attach_rot, bone_rot					: EulerAngles;
	private var arrow1, vfxEnt							: CEntity;
	private var eff_names								: array<CName>;


	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Arrow_Create_Ready_Entry();
	}
	
	entry function Arrow_Create_Ready_Entry()
	{
		if (FactsQuerySum("ACS_Azkar_Active") > 0
		)
		{
			ACSGetCEntity('ACS_Bow_Arrow').Teleport( GetWitcherPlayer().GetWorldPosition() + Vector( 0, 0, -200 ) );
			ACSGetCEntity('ACS_Bow_Arrow').DestroyAfter(0.0125);
			ACSGetCEntity('ACS_Bow_Arrow').RemoveTag('ACS_Bow_Arrow');

			arrow1 = (CEntity)theGame.CreateEntity((CEntityTemplate)LoadResourceAsync( 
		
			//"items\weapons\projectiles\arrows\arrow_01.w2ent"
			"dlc\dlc_acs\data\entities\projectiles\bow_projectile_moving.w2ent"
				
			, true), GetWitcherPlayer().GetWorldPosition() );

			attach_rot.Roll = 0;
			attach_rot.Pitch = 0;
			attach_rot.Yaw = 177.5;
			attach_vec.X = 0;
			attach_vec.Y = 0;
			attach_vec.Z = 0.0325;
			
			arrow1.PlayEffectSingle('ghost_06');

			arrow1.PlayEffectSingle('fire_wraith');

			arrow1.PlayEffectSingle('arrow_trail_wraith');

			arrow1.PlayEffectSingle('arrow_trail_fire_wraith');

			arrow1.PlayEffectSingle('arrow_trail_red_wraith');

			arrow1.CreateAttachment( GetWitcherPlayer(), 'r_weapon', attach_vec, attach_rot );
			arrow1.AddTag('ACS_Bow_Arrow');

			if (thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 0.9875)
			{
				vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
					
					"dlc\dlc_acs\data\fx\acs_ice_breathe_old.w2ent"
					
					, true ), GetWitcherPlayer().GetWorldPosition() );

				vfxEnt.CreateAttachment( GetWitcherPlayer(), 'r_weapon' );

				eff_names.Clear();

				eff_names.PushBack('diagonal_up_left_wraith');
				eff_names.PushBack('diagonal_down_left_wraith');
				eff_names.PushBack('down_wraith');
				eff_names.PushBack('up_wraith');
				eff_names.PushBack('diagonal_up_right_wraith');
				eff_names.PushBack('diagonal_down_right_wraith');
				eff_names.PushBack('right_wraith');
				eff_names.PushBack('left_wraith');
				
				vfxEnt.PlayEffectSingle(eff_names[RandRange(eff_names.Size())]);

				vfxEnt.DestroyAfter(2);
			}
		}	
	}
}

state ACS_Arrow_Create_Ready_Arrow_Rain_Engage in cACS_Arrow_Create
{
	private var attach_vec, bone_vec					: Vector;
	private var attach_rot, bone_rot					: EulerAngles;
	private var arrow1, vfxEnt							: CEntity;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Arrow_Create_Ready_Arrow_Rain_Entry();
	}

	entry function Arrow_Create_Ready_Arrow_Rain_Entry()
	{
		if (FactsQuerySum("ACS_Azkar_Active") > 0
		)
		{
			ACSGetCEntity('ACS_Bow_Arrow').Teleport( GetWitcherPlayer().GetWorldPosition() + Vector( 0, 0, -200 ) );
			ACSGetCEntity('ACS_Bow_Arrow').DestroyAfter(0.0125);
			ACSGetCEntity('ACS_Bow_Arrow').RemoveTag('ACS_Bow_Arrow');

			arrow1 = (CEntity)theGame.CreateEntity((CEntityTemplate)LoadResourceAsync( 
		
			//"items\weapons\projectiles\arrows\arrow_01.w2ent"
			"dlc\dlc_acs\data\entities\projectiles\bow_projectile_moving.w2ent"
				
			, true), GetWitcherPlayer().GetWorldPosition() );

			attach_rot.Roll = 0;
			attach_rot.Pitch = 0;
			attach_rot.Yaw = 180;
			attach_vec.X = 0;
			attach_vec.Y = 0;
			attach_vec.Z = 0.0325;
			
			arrow1.PlayEffectSingle('ghost_06');

			arrow1.PlayEffectSingle('fire_wraith');

			arrow1.PlayEffectSingle('arrow_trail_wraith');

			arrow1.PlayEffectSingle('arrow_trail_fire_wraith');

			arrow1.PlayEffectSingle('arrow_trail_red_wraith');

			arrow1.CreateAttachment( GetWitcherPlayer(), 'r_weapon', attach_vec, attach_rot );
			arrow1.AddTag('ACS_Bow_Arrow');

			if (thePlayer.GetStat( BCS_Focus )>= thePlayer.GetStatMax( BCS_Focus ) * 0.9875)
			{
				vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "gameplay\abilities\sorceresses\sorceress_lightining_bolt.w2ent", true ), GetWitcherPlayer().GetWorldPosition() );

				vfxEnt.CreateAttachment( GetWitcherPlayer(), 'r_weapon' );
				
				vfxEnt.PlayEffectSingle('diagonal_up_left');
				vfxEnt.PlayEffectSingle('diagonal_down_left');
				vfxEnt.PlayEffectSingle('down');
				vfxEnt.PlayEffectSingle('up');
				vfxEnt.PlayEffectSingle('diagonal_up_right');
				vfxEnt.PlayEffectSingle('diagonal_down_right');
				vfxEnt.PlayEffectSingle('right');
				vfxEnt.PlayEffectSingle('left');
				//vfxEnt.PlayEffectSingle('lightning_fx');
				//vfxEnt.PlayEffectSingle('shock');

				vfxEnt.AddTag('ACS_Bow_Arrow_Stationary_Effect');

				vfxEnt.DestroyAfter(2);
			}
		}	
	}
}

state ACS_Arrow_Create_Crossbow_Engage in cACS_Arrow_Create
{
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Arrow_Create_Crossbow_Entry();
	}

	entry function Arrow_Create_Crossbow_Entry()
	{
		var arrow1	 																																					: ACSCrossbowProjectile;
		var initpos, targetPositionNPC, targetPosition																													: Vector;
		var targetRotationNPC, targetRotationPlayer																														: EulerAngles;
		var attach_vec																																					: Vector;
		var attach_rot																																					: EulerAngles;

		ACS_CrossbowArrowDestroy();

		arrow1 = (ACSCrossbowProjectile)theGame.CreateEntity((CEntityTemplate)LoadResourceAsync( 
		
		"dlc\dlc_acs\data\entities\projectiles\crossbow_projectile.w2ent"
			
		, true), thePlayer.GetWorldPosition());
		
		arrow1.PlayEffectSingle('glow');

		attach_rot.Roll = 75;
		attach_rot.Pitch = 0;
		attach_rot.Yaw = 0;
		attach_vec.X = 0;
		attach_vec.Y = 0;
		attach_vec.Z = 0;

		if (ACSGetCEntity('acs_crossbow'))
		{
			arrow1.CreateAttachment( ACSGetCEntity('acs_crossbow'), , attach_vec, attach_rot );
		}
		else if (ACSGetCEntity('axii_crossbow_1'))
		{
			arrow1.CreateAttachment( ACSGetCEntity('axii_crossbow_1'), , attach_vec, attach_rot );
		}
		else if (ACSGetCEntity('aard_crossbow_1'))
		{
			arrow1.CreateAttachment( ACSGetCEntity('aard_crossbow_1'), , attach_vec, attach_rot );
		}
		else if (ACSGetCEntity('quen_crossbow_1'))
		{
			arrow1.CreateAttachment( ACSGetCEntity('quen_crossbow_1'), , attach_vec, attach_rot );
		}
		else if (ACSGetCEntity('yrden_crossbow_1'))
		{
			arrow1.CreateAttachment( ACSGetCEntity('yrden_crossbow_1'), , attach_vec, attach_rot );
		}
		
		arrow1.AddTag('ACS_Crossbow_Arrow');
	}
}

state ACS_ShootCrossbow_Arrow_Engage in cACS_Arrow_Create
{
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		ACS_ShootCrossbow_Arrow_Entry();
	}

	entry function ACS_ShootCrossbow_Arrow_Entry()
	{
		var actortarget																																					: CActor;
		var actors    																																					: array<CActor>;
		var i         																																					: int;
		var arrow1	 																																					: ACSCrossbowProjectile;
		var initpos, targetPositionNPC, targetPosition																													: Vector;
		var targetRotationNPC, targetRotationPlayer																														: EulerAngles;
		var dmg																																							: W3DamageAction;
		var targetDistance																																				: float;
		var meshcomp 																																					: CComponent;
		var h 																																							: float;
		var movementAdjustor																																			: CMovementAdjustor;
		var ticket 																																						: SMovementAdjustmentRequestTicket;
		

		actortarget = (CActor)( GetWitcherPlayer().GetDisplayTarget() );	

		if(GetWitcherPlayer().HasTag('ACS_Manual_Combat_Control')){GetWitcherPlayer().RemoveTag('ACS_Manual_Combat_Control');} GetACSWatcher().RemoveTimer('Manual_Combat_Control_Remove');

		movementAdjustor = GetWitcherPlayer().GetMovingAgentComponent().GetMovementAdjustor();

		movementAdjustor.CancelAll();
		
		ticket = movementAdjustor.CreateNewRequest( 'ACS_Shoot_Arrow_Rotate' );
			
		movementAdjustor.AdjustmentDuration( ticket, 0.125 );

		movementAdjustor.ShouldStartAt(ticket, GetWitcherPlayer().GetWorldPosition());
		movementAdjustor.MaxRotationAdjustmentSpeed( ticket, 5000000 );
		movementAdjustor.MaxLocationAdjustmentSpeed( ticket, 5000000 );

		movementAdjustor.RotateTowards( ticket, actortarget );

		//initpos = GetWitcherPlayer().GetBoneWorldPosition('r_hand');
		if (ACSGetCEntity('acs_crossbow'))
		{
			initpos = ACSGetCEntity('acs_crossbow').GetWorldPosition() + ACSGetCEntity('acs_crossbow').GetWorldUp();		
		}
		else if (ACSGetCEntity('axii_crossbow_1'))
		{
			initpos = ACSGetCEntity('axii_crossbow_1').GetWorldPosition() + ACSGetCEntity('axii_crossbow_1').GetWorldUp();		
		}
		else if (ACSGetCEntity('aard_crossbow_1'))
		{
			initpos = ACSGetCEntity('aard_crossbow_1').GetWorldPosition() + ACSGetCEntity('aard_crossbow_1').GetWorldUp();		
		}
		else if (ACSGetCEntity('quen_crossbow_1'))
		{
			initpos = ACSGetCEntity('quen_crossbow_1').GetWorldPosition() + ACSGetCEntity('quen_crossbow_1').GetWorldUp();		
		}
		else if (ACSGetCEntity('yrden_crossbow_1'))
		{
			initpos = ACSGetCEntity('yrden_crossbow_1').GetWorldPosition() + ACSGetCEntity('yrden_crossbow_1').GetWorldUp();		
		}

		initpos.Z -= 0.2;
		//initpos.X += 0.4;
		//initpos.Y += 0.25;

		if (actortarget)
		{
			if ( thePlayer.GetStat(BCS_Focus) >= thePlayer.GetStatMax( BCS_Focus ) * 0.9875 )
			{
				targetPosition = thePlayer.GetWorldPosition() + ( thePlayer.GetWorldForward() * 50 ) + (thePlayer.GetWorldRight() * RandRangeF(5.25, -5.25));
				targetPosition.Z += RandRangeF(5.5, 1.5);
			}
			else
			{
				targetPosition = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetWorldForward() * 50;
				targetPosition.Z += 1.5;
			}
		}
		else
		{
			targetPosition = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetWorldForward() * 50;
			targetPosition.Z += 1.5;
		}

		ACS_CrossbowArrowDestroy();

		arrow1 = (ACSCrossbowProjectile)theGame.CreateEntity((CEntityTemplate)LoadResourceAsync( 
			
		//"items\weapons\projectiles\arrows\arrow_01.w2ent"
		"dlc\dlc_acs\data\entities\projectiles\crossbow_projectile.w2ent"
			
		, true), initpos);
		
		arrow1.PlayEffectSingle('glow');

		arrow1.PlayEffectSingle( 'fire' );

		arrow1.PlayEffectSingle('arrow_trail_fire');

		arrow1.Init(GetWitcherPlayer());

		arrow1.ShootProjectileAtPosition( 0, 20+RandRange(5,1), targetPosition, 500  );

		arrow1.DestroyAfter(31);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class cACS_Shoot_Bow
{
    function ACS_Shoot_Bow_Engage()
	{
		this.PushState('ACS_Shoot_Bow_Engage');
	}

	function ACS_Shoot_Bow_Aiming_Engage()
	{
		this.PushState('ACS_Shoot_Bow_Aiming_Engage');
	}

	function ACS_Shoot_Bow_Arrow_Rain_Engage()
	{
		this.PushState('ACS_Shoot_Bow_Arrow_Rain_Engage');
	}
}

state ACS_Shoot_Bow_Engage in cACS_Shoot_Bow
{
	private var actortarget																																					: CActor;
	private var actors    																																					: array<CActor>;
	private var i         																																					: int;
	private var rock_pillar_temp																																			: CEntityTemplate;
	private var proj_1	 																																					: ACSBowProjectileMoving;
	private var proj_2	 																																					: ACSBowProjectile;
	private var initpos, playerpos, targetPositionNPC, targetPosition																													: Vector;
	private var targetRotationNPC, targetRotationPlayer																														: EulerAngles;
	private var dmg																																							: W3DamageAction;
	private var targetDistance																																				: float;
	private var meshcomp 																																					: CComponent;
	private var h 																																							: float;
	private var movementAdjustor																																			: CMovementAdjustor;
	private var ticket 																																						: SMovementAdjustmentRequestTicket;
	
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		ShootBowEntry();
	}
	
	entry function ShootBowEntry()
	{	
		ACSGetCEntity('ACS_Bow_Arrow').Teleport( GetWitcherPlayer().GetWorldPosition() + Vector( 0, 0, -200 ) );
		ACSGetCEntity('ACS_Bow_Arrow').DestroyAfter(0.0125);
		ACSGetCEntity('ACS_Bow_Arrow').RemoveTag('ACS_Bow_Arrow');

		actortarget = (CActor)( GetWitcherPlayer().GetDisplayTarget() );	
		
		targetDistance = VecDistanceSquared2D( GetWitcherPlayer().GetWorldPosition(), actortarget.GetWorldPosition() ) ;

		initpos = GetWitcherPlayer().GetBoneWorldPosition('r_hand');
		initpos.Z += 0.0325;		

		targetPosition =  GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetWorldForward() * 50;
		targetPosition.Z += 1.5;

		proj_1 = (ACSBowProjectileMoving)theGame.CreateEntity( 
		(CEntityTemplate)LoadResourceAsync( 
		"dlc\dlc_acs\data\entities\projectiles\bow_projectile_moving.w2ent"
		, true ), initpos );

		proj_1.Init(GetWitcherPlayer());

		proj_1.PlayEffectSingle('ghost_06');

		proj_1.PlayEffectSingle('fire_wraith');

		proj_1.PlayEffectSingle('arrow_trail_wraith');

		proj_1.PlayEffectSingle('arrow_trail_fire_wraith');

		proj_1.PlayEffectSingle('arrow_trail_red_wraith');

		proj_1.ShootProjectileAtPosition( 0, 10, targetPosition, 500  );
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state ACS_Shoot_Bow_Aiming_Engage in cACS_Shoot_Bow
{
	private var actortarget																																					: CActor;
	private var actors    																																					: array<CActor>;
	private var i         																																					: int;
	private var rock_pillar_temp																																			: CEntityTemplate;
	private var proj_1	 																																					: ACSBowProjectileMoving;
	private var proj_2	 																																					: ACSBowProjectile;
	private var initpos, targetPositionNPC, targetPosition																													: Vector;
	private var targetRotationNPC, targetRotationPlayer																														: EulerAngles;
	private var dmg																																							: W3DamageAction;
	private var targetDistance																																				: float;
	private var meshcomp 																																					: CComponent;
	private var h 																																							: float;
	private var movementAdjustor																																			: CMovementAdjustor;
	private var ticket 																																						: SMovementAdjustmentRequestTicket;
	
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		ShootBowAimingEntry();
	}
	
	entry function ShootBowAimingEntry()
	{	
		ACSGetCEntity('ACS_Bow_Arrow').Teleport( GetWitcherPlayer().GetWorldPosition() + Vector( 0, 0, -200 ) );
		ACSGetCEntity('ACS_Bow_Arrow').DestroyAfter(0.0125);
		ACSGetCEntity('ACS_Bow_Arrow').RemoveTag('ACS_Bow_Arrow');

		initpos = GetWitcherPlayer().GetBoneWorldPosition('r_hand');
		initpos.Z += 0.0325;

		targetPosition = 
		
		GetACSWatcher().GetPlayerCamera().GetWorldPosition() 
		+ GetACSWatcher().GetPlayerCamera().GetWorldRight() * 5.5
		+ GetACSWatcher().GetPlayerCamera().GetWorldForward() * 50;
		
		proj_1 = (ACSBowProjectileMoving)theGame.CreateEntity( 
		(CEntityTemplate)LoadResourceAsync( 
		"dlc\dlc_acs\data\entities\projectiles\bow_projectile_moving.w2ent"
		, true ), initpos );

		proj_1.Init(GetWitcherPlayer());

		proj_1.PlayEffectSingle('ghost_06');

		proj_1.PlayEffectSingle('fire_wraith');

		proj_1.PlayEffectSingle('arrow_trail_wraith');

		proj_1.PlayEffectSingle('arrow_trail_fire_wraith');

		proj_1.PlayEffectSingle('arrow_trail_red_wraith');

		proj_1.ShootProjectileAtPosition( 0, 30, targetPosition, 500  );
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state ACS_Shoot_Bow_Arrow_Rain_Engage in cACS_Shoot_Bow
{
	private var actortarget																																					: CActor;
	private var actors    																																					: array<CActor>;
	private var i         																																					: int;
	private var rock_pillar_temp																																			: CEntityTemplate;
	private var proj_1	 																																					: ACSBowProjectileMoving;
	private var proj_2	 																																					: ACSBowProjectile;
	private var initpos, targetPositionNPC, targetPosition																													: Vector;
	private var targetRotationNPC, targetRotationPlayer																														: EulerAngles;
	private var dmg																																							: W3DamageAction;
	private var targetDistance																																				: float;
	private var meshcomp 																																					: CComponent;
	private var h 																																							: float;
	private var movementAdjustor																																			: CMovementAdjustor;
	private var ticket 																																						: SMovementAdjustmentRequestTicket;
	
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		ShootBowArrowRainEntry();
	}

	entry function ShootBowArrowRainEntry()
	{	
		ACSGetCEntity('ACS_Bow_Arrow').Teleport( GetWitcherPlayer().GetWorldPosition() + Vector( 0, 0, -200 ) );
		ACSGetCEntity('ACS_Bow_Arrow').DestroyAfter(0.0125);
		ACSGetCEntity('ACS_Bow_Arrow').RemoveTag('ACS_Bow_Arrow');

		actortarget = (CActor)( GetWitcherPlayer().GetDisplayTarget() );	

		targetDistance = VecDistanceSquared2D( GetWitcherPlayer().GetWorldPosition(), actortarget.GetWorldPosition() ) ;

		initpos = GetWitcherPlayer().GetBoneWorldPosition('r_hand');		
		initpos.Z += 0.0325;

		if( targetDistance <= 3 * 3 ) 
		{
			if ( actortarget.GetBoneIndex('head') != -1 )
			{
				targetPositionNPC = actortarget.GetBoneWorldPosition('head');
				//targetPositionNPC.Z += RandRangeF(0,-0.1);
				targetPositionNPC.X += RandRangeF(0.1,-0.1);
			}
			else
			{
				targetPositionNPC = actortarget.GetBoneWorldPosition('k_head_g');
				//targetPositionNPC.Z += RandRangeF(0.1,-0.1);
				targetPositionNPC.X += RandRangeF(0.1,-0.1);
			}
		}
		else if( targetDistance > 3 * 3 && targetDistance <= 7.5*7.5 ) 
		{
			if ( actortarget.GetBoneIndex('head') != -1 )
			{
				targetPositionNPC = actortarget.GetBoneWorldPosition('head');
				targetPositionNPC.Z += RandRangeF(0,-0.25);
				targetPositionNPC.X += RandRangeF(0.15,-0.15);
			}
			else
			{
				targetPositionNPC = actortarget.GetBoneWorldPosition('k_head_g');
				targetPositionNPC.Z += RandRangeF(0,-0.25);
				targetPositionNPC.X += RandRangeF(0.15,-0.15);
			}
		}
		else
		{
			if ( actortarget.GetBoneIndex('head') != -1 )
			{
				targetPositionNPC = actortarget.GetBoneWorldPosition('head');
				targetPositionNPC.Z += RandRangeF(0,-0.1);
				targetPositionNPC.X += RandRangeF(0.1,-0.1);
			}
			else
			{
				targetPositionNPC = actortarget.GetBoneWorldPosition('k_head_g');
				targetPositionNPC.Z += RandRangeF(0,-0.1);
				targetPositionNPC.X += RandRangeF(0.1,-0.1);
			}
		}

		//targetPosition =  GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetWorldForward() * 20;
		//targetPosition.Z += 1.5;

		targetPosition = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetWorldForward() * 10;
		//targetPosition = GetWitcherPlayer().GetLookAtPosition();
		targetPosition.Z += 1.5;

		if ( thePlayer.GetStat(BCS_Focus) >= thePlayer.GetStatMax( BCS_Focus ) * 0.9875 )
		{		
			proj_2 = (ACSBowProjectile)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( 
				"dlc\dlc_acs\data\entities\projectiles\bow_projectile.w2ent"
				, true ), initpos );
			
			meshcomp = proj_2.GetComponentByClassName('CMeshComponent');
			h = 2;
			meshcomp.SetScale(Vector(h,h,h,1));	

			proj_2.Init(GetWitcherPlayer());

			if (GetWitcherPlayer().GetEquippedSign() == ST_Igni)
			{
				proj_2.PlayEffectSingle( 'fire' );
			}

			proj_2.PlayEffectSingle('ghost_06');

			if( ACS_AttitudeCheck ( actortarget ) && GetWitcherPlayer().IsInCombat() && actortarget.IsAlive() )
			{
				proj_2.PlayEffectSingle('arrow_trail_fire');
				proj_2.ShootProjectileAtPosition( 0, 40+RandRange(5,1), targetPosition, 500  );
			}
			else
			{
				proj_2.ShootProjectileAtPosition( 0, 40+RandRange(5,1), targetPosition, 500  );
			}

			proj_2.DestroyAfter(31);
		}
		else
		{
			proj_1 = (ACSBowProjectileMoving)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( 
				"dlc\dlc_acs\data\entities\projectiles\bow_projectile_moving.w2ent"
				, true ), initpos );

			proj_1.Init(GetWitcherPlayer());

			if (GetWitcherPlayer().GetEquippedSign() == ST_Igni)
			{
				proj_1.PlayEffectSingle( 'fire' );
			}

			proj_1.PlayEffectSingle('ghost_06');

			if( ACS_AttitudeCheck ( actortarget ) && GetWitcherPlayer().IsInCombat() && actortarget.IsAlive() )
			{
				if ( actortarget.HasTag('ACS_second_bow_moving_projectile'))
				{
					proj_1.ShootProjectileAtPosition( 0, 40+RandRange(5,1), targetPositionNPC, 500  );
					proj_1.PlayEffectSingle('arrow_trail_fire');
				}
				else
				{
					proj_1.ShootProjectileAtPosition( 0, 20+RandRange(5,1), targetPositionNPC, 500  );
				}
			}
			else
			{
				proj_1.ShootProjectileAtPosition( 0, 20+RandRange(5,1), targetPosition, 500  );
			}

			proj_1.DestroyAfter(31);
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_Umbral_Slash_Single()
{
	var vACS_Umbral_Slash_Single : cACS_Umbral_Slash_Single;
	vACS_Umbral_Slash_Single = new cACS_Umbral_Slash_Single in theGame;
			
	vACS_Umbral_Slash_Single.ACS_Umbral_Slash_Single_Engage();
}

statemachine class cACS_Umbral_Slash_Single
{
    function ACS_Umbral_Slash_Single_Engage()
	{
		this.PushState('ACS_Umbral_Slash_Single_Engage');
	}
}

state ACS_Umbral_Slash_Single_Engage in cACS_Umbral_Slash_Single
{
	private var ent, ent__2, ent__3, ent_1, ent_2, ent_3, ent_4, ent_5, ent_6                         									: CEntity;
	private var playerRot, playerRot_1, playerRot_2, playerRot_3, rot, rot_1, rot_2, rot_3, rot_4, rot_5, rot_6, adjustedRot            : EulerAngles;
    private var playerPos, playerPos_1, playerPos_2, playerPos_3, pos, pos_1, pos_2, pos_3, pos_4, pos_5, pos_6							: Vector;
	private var dmg 																													: W3DamageAction;
	private var damageMax																												: float;
	private var attAction																												: W3Action_Attack;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Umbral_Slash_Single();
	}

	entry function Umbral_Slash_Single()
	{
		rot = GetWitcherPlayer().GetDisplayTarget().GetWorldRotation();

		pos = GetWitcherPlayer().GetDisplayTarget().GetWorldPosition();

		pos.Z += 1.5;

		playerPos = GetWitcherPlayer().GetWorldPosition();

		playerRot = thePlayer.GetWorldRotation();

		playerRot.Yaw += 180;

		adjustedRot = EulerAngles(0,0,0);

		adjustedRot.Yaw = playerRot.Yaw;


		ent = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
			//"dlc\dlc_acs\data\fx\acs_sword_slashes.w2ent"
			"dlc\dlc_acs\data\fx\acs_sword_slash_orb.w2ent"
			, true ), pos, adjustedRot );

		ent.CreateAttachment( GetWitcherPlayer().GetDisplayTarget(), , Vector( 0, -0.5, 1.5 ) );

		ent.PlayEffectSingle('sword_slash_orb');

		ent.DestroyAfter(1);

		/*
		playerRot_1 = playerRot;

		playerRot_1.Yaw = RandRangeF(360,1);

		playerRot_1.Pitch = RandRangeF(45,-45);

		playerRot_1.Roll = RandRange( 360, 0 );

		playerPos_1 = playerPos;

		playerPos_1.Z += RandRangeF( 0.5, -0.4 );

		playerPos_1.Y += RandRangeF( 0.4, -0.4 );

		playerPos_1.X += RandRangeF( 0.4, -0.4 );

		ent = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
			//"dlc\dlc_acs\data\fx\acs_sword_slashes.w2ent"
			"dlc\dlc_acs\data\fx\acs_sword_slash_orb.w2ent"
			, true ), playerPos_1, playerRot_1 );

		//ent.CreateAttachment( GetWitcherPlayer(), , Vector( 0, 0, 0 ) );

		ent.PlayEffectSingle('sword_slash_orb_big');

		ent.DestroyAfter(5);

		

		playerRot_2 = playerRot;

		playerRot_2.Yaw = RandRangeF(360,1);

		playerRot_2.Pitch = RandRangeF(45,-45);

		playerRot_2.Roll = RandRange( 360, 0 );

		playerPos_2 = playerPos;

		playerPos_2.Z += RandRangeF( 0.5, -0.4 );

		playerPos_2.Y += RandRangeF( 0.4, -0.4 );

		playerPos_2.X += RandRangeF( 0.4, -0.4 );


		ent__2 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
			//"dlc\dlc_acs\data\fx\acs_sword_slashes.w2ent"
			"dlc\dlc_acs\data\fx\acs_sword_slash_orb.w2ent"
			, true ), playerPos_2, playerRot_2 );

		//ent.CreateAttachment( GetWitcherPlayer(), , Vector( 0, 0, 0 ) );

		ent__2.PlayEffectSingle('sword_slash_orb_big');

		ent__2.DestroyAfter(5);

		playerRot_3 = playerRot;

		playerRot_3.Yaw = RandRangeF(360,1);

		playerRot_3.Pitch = RandRangeF(45,-45);

		playerRot_3.Roll = RandRange( 360, 0 );

		playerPos_3 = playerPos;

		playerPos_3.Z += RandRangeF( 0.5, -0.4 );

		playerPos_3.Y += RandRangeF( 0.4, -0.4 );

		playerPos_3.X += RandRangeF( 0.4, -0.4 );


		ent__3 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
			//"dlc\dlc_acs\data\fx\acs_sword_slashes.w2ent"
			"dlc\dlc_acs\data\fx\acs_sword_slash_orb.w2ent"
			, true ), playerPos_3, playerRot_3 );

		//ent.CreateAttachment( GetWitcherPlayer(), , Vector( 0, 0, 0 ) );

		ent__3.PlayEffectSingle('sword_slash_orb_big');

		ent__3.DestroyAfter(5);
		*/

		rot_1 = adjustedRot;

		rot_1.Yaw = RandRangeF(360,1);

		rot_1.Pitch = RandRangeF(45,-45);

		rot_1.Roll = RandRange( 360, 0 );

		pos_1 = pos;

		pos_1.Z += RandRangeF( 0.5, -0.4 );

		pos_1.Y += RandRangeF( 0.4, -0.4 );

		pos_1.X += RandRangeF( 0.4, -0.4 );



		ent_1 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
			"dlc\dlc_acs\data\fx\acs_sword_slashes.w2ent"
			, true ), pos_1, rot_1 );

		ent_1.PlayEffectSingle('sword_slash_medium');

		ent_1.DestroyAfter(0.5);



		rot_2 = adjustedRot;

		rot_2.Yaw = RandRangeF(360,1);

		rot_2.Pitch = RandRangeF(45,-45);

		rot_2.Roll = RandRange( 360, 0 );

		pos_2 = pos;

		pos_2.Z += RandRangeF( 0.5, -0.4 );

		pos_2.Y += RandRangeF( 0.4, -0.4 );

		pos_2.X += RandRangeF( 0.4, -0.4 );


		ent_2 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
			"dlc\dlc_acs\data\fx\acs_sword_slashes.w2ent"
			, true ), pos_2, rot_2 );

		ent_2.PlayEffectSingle('sword_slash_medium');

		ent_2.DestroyAfter(0.5);





		rot_3 = adjustedRot;

		rot_3.Yaw = RandRangeF(360,1);

		rot_3.Pitch = RandRangeF(45,-45);

		rot_3.Roll = RandRange( 360, 0 );

		pos_3 = pos;

		pos_3.Z += RandRangeF( 0.5, -0.4 );

		pos_3.Y += RandRangeF( 0.4, -0.4 );

		pos_3.X += RandRangeF( 0.4, -0.4 );




		ent_3 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
			"dlc\dlc_acs\data\fx\acs_sword_slashes.w2ent"
			, true ), pos_3, rot_3 );

		ent_3.PlayEffectSingle('sword_slash_medium');

		ent_3.DestroyAfter(0.5);




		rot_4 = adjustedRot;

		rot_4.Yaw = RandRangeF(360,1);

		rot_4.Pitch = RandRangeF(45,-45);

		rot_4.Roll = RandRange( 360, 0 );

		pos_4 = pos;

		pos_4.Z += RandRangeF( 0.5, -0.4 );

		pos_4.Y += RandRangeF( 0.4, -0.4 );

		pos_4.X += RandRangeF( 0.4, -0.4 );




		ent_4 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
			"dlc\dlc_acs\data\fx\acs_sword_slashes.w2ent"
			, true ), pos_4, rot_4 );

		ent_4.PlayEffectSingle('sword_slash_medium');

		ent_4.DestroyAfter(0.5);





		rot_5 = adjustedRot;

		rot_5.Yaw = RandRangeF(360,1);

		rot_5.Pitch = RandRangeF(45,-45);

		rot_5.Roll = RandRange( 360, 0 );

		pos_5 = pos;

		pos_5.Z += RandRangeF( 0.5, -0.4 );

		pos_5.Y += RandRangeF( 0.4, -0.4 );

		pos_5.X += RandRangeF( 0.4, -0.4 );



		ent_5 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
			"dlc\dlc_acs\data\fx\acs_sword_slashes.w2ent"
			, true ), pos_5, rot_5 );

		ent_5.PlayEffectSingle('sword_slash');

		ent_5.DestroyAfter(0.5);




		rot_6 = adjustedRot;

		rot_6.Yaw = RandRangeF(360,1);

		rot_6.Pitch = RandRangeF(45,-45);

		rot_6.Roll = RandRange( 360, 0 );

		pos_6 = pos;

		pos_6.Z += RandRangeF( 0.5, -0.4 );

		pos_6.Y += RandRangeF( 0.4, -0.4 );

		pos_6.X += RandRangeF( 0.4, -0.4 );



		ent_6 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
			"dlc\dlc_acs\data\fx\acs_sword_slashes.w2ent"
			, true ), pos_6, rot_6 );

		ent_6.PlayEffectSingle('sword_slash');

		ent_6.DestroyAfter(0.5);

		/*
		dmg = new W3DamageAction in theGame.damageMgr;
		dmg.Initialize(NULL, GetWitcherPlayer().GetDisplayTarget(), theGame, 'ACS_Umbral_Slash_Damage', EHRT_Heavy, CPS_Undefined, false, false, true, false);

		dmg.SetProcessBuffsIfNoDamage(true);
		dmg.SetCanPlayHitParticle(true);

		if (GetWitcherPlayer().GetDisplayTarget().UsesVitality()) 
		{ 
			damageMax = GetWitcherPlayer().GetDisplayTarget().GetStat( BCS_Vitality ) * 0.25; 
		} 
		else if (GetWitcherPlayer().GetDisplayTarget().UsesEssence()) 
		{ 
			damageMax = GetWitcherPlayer().GetDisplayTarget().GetStat( BCS_Essence ) * 0.25; 
		} 

		dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, damageMax );

		dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, damageMax );
					
		//dmg.AddEffectInfo( EET_Stagger, 0.5 );

		dmg.SetForceExplosionDismemberment();
			
		theGame.damageMgr.ProcessAction( dmg );
								
		delete dmg;
		*/
		if( (CActor)GetWitcherPlayer().GetDisplayTarget() && ACS_AttitudeCheck ( (CActor)GetWitcherPlayer().GetDisplayTarget() ) )
		{
			((CActor)GetWitcherPlayer().GetDisplayTarget()).AddAbility( 'DisableFinishers', true );

			attAction = new W3Action_Attack in theGame.damageMgr;

			attAction.Init( GetWitcherPlayer(), GetWitcherPlayer().GetDisplayTarget(), GetWitcherPlayer(), GetWitcherPlayer().GetInventory().GetItemFromSlot( 'r_weapon' ), 
			theGame.params.ATTACK_NAME_HEAVY, GetWitcherPlayer().GetName(), EHRT_None, true, true, theGame.params.ATTACK_NAME_HEAVY, AST_NotSet, ASD_NotSet, true, false, false, false, , , , , );
			attAction.SetHitReactionType(EHRT_Heavy);
			attAction.SetHitAnimationPlayType(EAHA_Default);

			if (((CActor)GetWitcherPlayer().GetDisplayTarget()).UsesVitality()) 
			{ 
				damageMax = ((CActor)GetWitcherPlayer().GetDisplayTarget()).GetStat( BCS_Vitality ) * 0.1; 
			} 
			else if (((CActor)GetWitcherPlayer().GetDisplayTarget()).UsesEssence()) 
			{ 
				damageMax = ((CActor)GetWitcherPlayer().GetDisplayTarget()).GetStat( BCS_Essence ) * 0.1; 
			}

			attAction.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, damageMax );
			
			attAction.SetSoundAttackType( 'wpn_slice' );
			
			attAction.AddEffectInfo( EET_Stagger, 1 );
			
			theGame.damageMgr.ProcessAction( attAction );	
			
			if ( ( (CNewNPC)GetWitcherPlayer().GetDisplayTarget()).IsShielded( NULL ) )
			{
				( (CNewNPC)GetWitcherPlayer().GetDisplayTarget()).ProcessShieldDestruction();
			}

			delete attAction;

			((CActor)GetWitcherPlayer().GetDisplayTarget()).RemoveAbility( 'DisableFinishers' );

			if( GetWitcherPlayer().GetStat( BCS_Focus ) >= GetWitcherPlayer().GetStatMax( BCS_Focus )/3
			&& GetWitcherPlayer().GetStat( BCS_Focus ) < GetWitcherPlayer().GetStatMax( BCS_Focus ) * 2/3) 
			{	
				GetWitcherPlayer().DrainFocus( GetWitcherPlayer().GetStatMax( BCS_Focus ) );
			}
			else if( GetWitcherPlayer().GetStat( BCS_Focus ) >= GetWitcherPlayer().GetStatMax( BCS_Focus ) * 2/3
			&& GetWitcherPlayer().GetStat( BCS_Focus ) < GetWitcherPlayer().GetStatMax( BCS_Focus )) 
			{	
				GetWitcherPlayer().DrainFocus( GetWitcherPlayer().GetStatMax( BCS_Focus ) * 1/3);
			}
			else if( GetWitcherPlayer().GetStat( BCS_Focus ) == GetWitcherPlayer().GetStatMax(BCS_Focus) ) 
			{
				GetWitcherPlayer().DrainFocus( GetWitcherPlayer().GetStatMax( BCS_Focus ) * 1/3);
			}
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_Umbral_Slash_End_Damage_Actual()
{
	var dmg 																																							: W3DamageAction;
	var damageMax, maxTargetVitality, maxTargetEssence																													: float;
	var actortarget																																						: CActor;
	var actors    																																						: array<CActor>;
	var i         																																						: int;
	var marks																																							: array< CEntity >;
	var mark       																																						: CEntity;
	var attAction																																						: W3Action_Attack;

	marks.Clear();
			
	theGame.GetEntitiesByTag( 'Umbral_Slash_End_Mark', marks );

	for( i=0; i<marks.Size(); i+=1 )
	{	
		mark = (CEntity)marks[i];	
		mark.Teleport( GetWitcherPlayer().GetWorldPosition() + Vector( 0, 0, -100) );
		mark.Destroy();
	}

	actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 50, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);
	for( i = 0; i < actors.Size(); i += 1 )
	{
		actortarget = (CActor)actors[i];
		/*
		dmg = new W3DamageAction in theGame.damageMgr;
		dmg.Initialize(GetWitcherPlayer(), actortarget, theGame, 'ACS_Umbral_Slash_End_Damage', EHRT_Heavy, CPS_Undefined, false, false, true, false);

		dmg.SetProcessBuffsIfNoDamage(true);
		dmg.SetCanPlayHitParticle(true);

		if (actortarget.UsesVitality()) 
		{ 
			damageMax = actortarget.GetStatMax( BCS_Vitality ) * 0.75; 
		} 
		else if (GetWitcherPlayer().GetDisplayTarget().UsesEssence()) 
		{ 
			damageMax = actortarget.GetStatMax( BCS_Essence ) * 0.75; 
		} 

		dmg.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, damageMax );
					
		dmg.AddEffectInfo( EET_HeavyKnockdown, 1 );

		//dmg.SetForceExplosionDismemberment();
			
		theGame.damageMgr.ProcessAction( dmg );
								
		delete dmg;
		*/

		((CActor)actortarget).AddAbility( 'DisableFinishers', true );

		attAction = new W3Action_Attack in theGame.damageMgr;

		attAction.Init( GetWitcherPlayer(), actortarget, GetWitcherPlayer(), GetWitcherPlayer().GetInventory().GetItemFromSlot( 'r_weapon' ), 
		theGame.params.ATTACK_NAME_LIGHT, GetWitcherPlayer().GetName(), EHRT_None, true, true, theGame.params.ATTACK_NAME_LIGHT, AST_NotSet, ASD_NotSet, true, false, false, false, , , , , );
		attAction.SetHitReactionType(EHRT_Light);
		attAction.SetHitAnimationPlayType(EAHA_Default);

		if (actortarget.UsesVitality()) 
		{ 
			maxTargetVitality = actortarget.GetStatMax( BCS_Vitality ) - actortarget.GetStat( BCS_Vitality );

			damageMax = maxTargetVitality * 0.45; 
		} 
		else if (actortarget.UsesEssence()) 
		{ 
			maxTargetEssence = actortarget.GetStatMax( BCS_Essence ) - actortarget.GetStat( BCS_Essence );
			
			damageMax = maxTargetEssence * 0.45; 
		} 

		attAction.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, 50 + damageMax );
		
		attAction.SetSoundAttackType( 'wpn_slice' );
		
		attAction.AddEffectInfo( EET_Stagger, 1 );
		
		theGame.damageMgr.ProcessAction( attAction );	
		
		if ( ( (CNewNPC)actortarget).IsShielded( NULL ) )
		{
			( (CNewNPC)actortarget).ProcessShieldDestruction();
		}

		delete attAction;

		((CActor)actortarget).RemoveAbility( 'DisableFinishers' );
	}

	GetWitcherPlayer().StopEffect('olgierd_energy_blast');
	
	GetWitcherPlayer().PlayEffectSingle('olgierd_energy_blast');
	GetWitcherPlayer().PlayEffectSingle('olgierd_energy_blast');
	GetWitcherPlayer().PlayEffectSingle('olgierd_energy_blast');
	GetWitcherPlayer().PlayEffectSingle('olgierd_energy_blast');
	GetWitcherPlayer().PlayEffectSingle('olgierd_energy_blast');
	GetWitcherPlayer().StopEffect('olgierd_energy_blast');
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_Umbral_Slash_End_Effect()
{
	var vACS_Umbral_Slash_End : cACS_Umbral_Slash_End;
	vACS_Umbral_Slash_End = new cACS_Umbral_Slash_End in theGame;
			
	vACS_Umbral_Slash_End.ACS_Umbral_Slash_End_Engage();
}

statemachine class cACS_Umbral_Slash_End
{
    function ACS_Umbral_Slash_End_Engage()
	{
		this.PushState('ACS_Umbral_Slash_End_Engage');
	}
}

state ACS_Umbral_Slash_End_Engage in cACS_Umbral_Slash_End
{
	private var ent, ent__1, ent__2, ent__3, ent__4, ent__5, ent__6, ent__7, ent_1, ent_2, ent_3, ent_4, ent_5, ent_6                         									: CEntity;
	private var playerRot, playerRot_1, playerRot_2, playerRot_3, playerRot_4, playerRot_5, playerRot_6, playerRot_7, rot, rot_1, rot_2, rot_3, rot_4, rot_5, rot_6             : EulerAngles;
    private var playerPos, playerPos_1, playerPos_2, playerPos_3, playerPos_4, playerPos_5, playerPos_6, playerPos_7, pos, pos_1, pos_2, pos_3, pos_4, pos_5, pos_6				: Vector;
	private var actortarget																																						: CActor;
	private var actors    																																						: array<CActor>;
	private var i         																																						: int;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Umbral_Slash_End();
	}

	entry function Umbral_Slash_End()
	{
		playerRot = GetWitcherPlayer().GetWorldRotation();

		playerPos = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetWorldForward() * 2.5;

		playerPos.Z += 1.5;

		playerRot_1 = playerRot;

		playerRot_1.Yaw = RandRangeF(360,1);

		playerRot_1.Pitch = RandRangeF(45,-45);

		playerRot_1.Roll = RandRange( 360, 0 );

		playerPos_1 = playerPos;

		playerPos_1.Z += RandRangeF( 0.5, -0.4 );

		playerPos_1.Y += RandRangeF( 0.4, -0.4 );

		playerPos_1.X += RandRangeF( 0.4, -0.4 );

		ent = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
			//"dlc\dlc_acs\data\fx\acs_sword_slashes.w2ent"
			"dlc\dlc_acs\data\fx\acs_sword_slash_orb.w2ent"
			, true ), playerPos_1, playerRot_1 );

		ent.CreateAttachment( GetWitcherPlayer(), , Vector( 0, 0, 0.5 ) );

		ent.PlayEffectSingle('sword_slash_orb_big');

		ent.DestroyAfter(7);


		actors.Clear();

		actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 50, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);
		for( i = 0; i < actors.Size(); i += 1 )
		{
			actortarget = (CActor)actors[i];

			actortarget.AddEffectDefault( EET_Immobilized, GetWitcherPlayer(), 'ACS_Umbral_Slash_End' );

			actortarget.AddEffectDefault( EET_Confusion, GetWitcherPlayer(), 'ACS_Umbral_Slash_End' );

				
			rot = actortarget.GetWorldRotation();

			pos = actortarget.GetWorldPosition();

			pos.Z += 1.5;

			rot_1 = rot;

			rot_1.Yaw = RandRangeF(360,1);

			rot_1.Pitch = RandRangeF(45,-45);

			rot_1.Roll = RandRange( 360, 0 );

			pos_1 = pos;

			pos_1.Z += RandRangeF( 0.5, 0 );

			pos_1.Y += RandRangeF( 1.4, -1.4 );

			pos_1.X += RandRangeF( 2.4, -2.4 );



			ent_1 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
				"dlc\dlc_acs\data\fx\acs_sword_slashes.w2ent"
				, true ), pos_1, rot_1 );

			ent_1.AddTag('Umbral_Slash_End_Mark');


			ent_1.PlayEffectSingle('sword_slash_red_large');

			ent_1.DestroyAfter(2.5);



			rot_2 = rot;

			rot_2.Yaw = RandRangeF(360,1);

			rot_2.Pitch = RandRangeF(45,-45);

			rot_2.Roll = RandRange( 360, 0 );

			pos_2 = pos;

			pos_2.Z += RandRangeF( 0.5, 0 );

			pos_2.Y += RandRangeF( 1.4, -1.4 );

			pos_2.X += RandRangeF( 2.4, -2.4 );


			ent_2 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
				"dlc\dlc_acs\data\fx\acs_sword_slashes.w2ent"
				, true ), pos_2, rot_2 );

			ent_2.AddTag('Umbral_Slash_End_Mark');


			ent_2.PlayEffectSingle('sword_slash_red_large');

			ent_2.DestroyAfter(5);





			rot_3 = rot;

			rot_3.Yaw = RandRangeF(360,1);

			rot_3.Pitch = RandRangeF(45,-45);

			rot_3.Roll = RandRange( 360, 0 );

			pos_3 = pos;

			pos_3.Z += RandRangeF( 0.5, 0 );

			pos_3.Y += RandRangeF( 1.4, -1.4 );

			pos_3.X += RandRangeF( 2.4, -2.4 );




			ent_3 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
				"dlc\dlc_acs\data\fx\acs_sword_slashes.w2ent"
				, true ), pos_3, rot_3 );
			
			ent_3.AddTag('Umbral_Slash_End_Mark');


			ent_3.PlayEffectSingle('sword_slash_red_large');

			ent_3.DestroyAfter(5);


			rot_4 = rot;

			rot_4.Yaw = RandRangeF(360,1);

			rot_4.Pitch = RandRangeF(45,-45);

			rot_4.Roll = RandRange( 360, 0 );

			pos_4 = pos;

			pos_4.Z += RandRangeF( 0.5, 0 );

			pos_4.Y += RandRangeF( 1.4, -1.4 );

			pos_4.X += RandRangeF( 1.4, -1.4 );




			ent_4 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
				"dlc\dlc_acs\data\fx\acs_sword_slashes.w2ent"
				, true ), pos_4, rot_4 );

			ent_4.AddTag('Umbral_Slash_End_Mark');


			ent_4.PlayEffectSingle('sword_slash_red_large');

			ent_4.DestroyAfter(5);





			rot_5 = rot;

			rot_5.Yaw = RandRangeF(360,1);

			rot_5.Pitch = RandRangeF(45,-45);

			rot_5.Roll = RandRange( 360, 0 );

			pos_5 = pos;

			pos_5.Z += RandRangeF( 0.5, 0 );

			pos_5.Y += RandRangeF( 1.4, -1.4 );

			pos_5.X += RandRangeF( 2.4, -2.4 );



			ent_5 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
				"dlc\dlc_acs\data\fx\acs_sword_slashes.w2ent"
				, true ), pos_5, rot_5 );

			ent_5.AddTag('Umbral_Slash_End_Mark');


			ent_5.PlayEffectSingle('sword_slash_red_large');

			ent_5.DestroyAfter(5);


			rot_6 = rot;

			rot_6.Yaw = RandRangeF(360,1);

			rot_6.Pitch = RandRangeF(45,-45);

			rot_6.Roll = RandRange( 360, 0 );

			pos_6 = pos;

			pos_6.Z += RandRangeF( 0.5, 0 );

			pos_6.Y += RandRangeF( 1.4, -1.4 );

			pos_6.X += RandRangeF( 2.4, -2.4 );

			ent_6 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
				"dlc\dlc_acs\data\fx\acs_sword_slashes.w2ent"
				, true ), pos_6, rot_6 );

			ent_6.AddTag('Umbral_Slash_End_Mark');

			ent_6.PlayEffectSingle('sword_slash_red_large');

			ent_6.DestroyAfter(5);

		}

		playerRot_2 = playerRot;

		playerRot_2.Yaw = RandRangeF(360,1);

		playerRot_2.Pitch = RandRangeF(45,-45);

		playerRot_2.Roll = RandRange( 360, 0 );

		playerPos_2 = playerPos;

		playerPos_2.Z += RandRangeF( 0.5, 0 );

		playerPos_2.Y += RandRangeF( 1.4, -0.4 );

		playerPos_2.X += RandRangeF( 2.4, -2.4 );



		ent__1 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
			"dlc\dlc_acs\data\fx\acs_sword_slashes.w2ent"
			, true ), playerPos_2, playerRot_2 );

		ent__1.AddTag('Umbral_Slash_End_Mark');


		ent__1.PlayEffectSingle('sword_slash_red_large');

		ent__1.DestroyAfter(5);



		playerRot_3 = playerRot;

		playerRot_3.Yaw = RandRangeF(360,1);

		playerRot_3.Pitch = RandRangeF(45,-45);

		playerRot_3.Roll = RandRange( 360, 0 );

		playerPos_3 = playerPos;

		playerPos_3.Z += RandRangeF( 0.5, 0 );

		playerPos_3.Y += RandRangeF( 1.4, -1.4 );

		playerPos_3.X += RandRangeF( 2.4, -2.4 );


		ent__2 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
			"dlc\dlc_acs\data\fx\acs_sword_slashes.w2ent"
			, true ), playerPos_3, playerRot_3 );

		ent__2.AddTag('Umbral_Slash_End_Mark');

		ent__2.PlayEffectSingle('sword_slash_red_large');

		ent__2.DestroyAfter(5);





		playerRot_4 = playerRot;

		playerRot_4.Yaw = RandRangeF(360,1);

		playerRot_4.Pitch = RandRangeF(45,-45);

		playerRot_4.Roll = RandRange( 360, 0 );

		playerPos_4 = playerPos;

		playerPos_4.Z += RandRangeF( 0.5, 0 );

		playerPos_4.Y += RandRangeF( 1.4, -0.4 );

		playerPos_4.X += RandRangeF( 2.4, -2.4 );




		ent__3 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
			"dlc\dlc_acs\data\fx\acs_sword_slashes.w2ent"
			, true ), playerPos_4, playerRot_4 );
		
		ent__3.AddTag('Umbral_Slash_End_Mark');


		ent__3.PlayEffectSingle('sword_slash_red_large');

		ent__3.DestroyAfter(5);


		playerRot_5 = playerRot;

		playerRot_5.Yaw = RandRangeF(360,1);

		playerRot_5.Pitch = RandRangeF(45,-45);

		playerRot_5.Roll = RandRange( 360, 0 );

		playerPos_5 = playerPos;

		playerPos_5.Z += RandRangeF( 0.5, 0 );

		playerPos_5.Y += RandRangeF( 1.4, -0.4 );

		playerPos_5.X += RandRangeF( 1.4, -1.4 );




		ent__4 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
			"dlc\dlc_acs\data\fx\acs_sword_slashes.w2ent"
			, true ), playerPos_5, playerRot_5 );
		
		ent__4.AddTag('Umbral_Slash_End_Mark');


		ent__4.PlayEffectSingle('sword_slash_red_large');

		ent__4.DestroyAfter(5);





		playerRot_6 = playerRot;

		playerRot_6.Yaw = RandRangeF(360,1);

		playerRot_6.Pitch = RandRangeF(45,-45);

		playerRot_6.Roll = RandRange( 360, 0 );

		playerPos_6 = playerPos;

		playerPos_6.Z += RandRangeF( 0.5, 0 );

		playerPos_6.Y += RandRangeF( 1.4, -0.4 );

		playerPos_6.X += RandRangeF( 2.4, -2.4 );



		ent__5 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
			"dlc\dlc_acs\data\fx\acs_sword_slashes.w2ent"
			, true ), playerPos_6, playerRot_6 );
		
		ent__5.AddTag('Umbral_Slash_End_Mark');


		ent__5.PlayEffectSingle('sword_slash_red_large');

		ent__5.DestroyAfter(5);




		playerRot_7 = playerRot;

		playerRot_7.Yaw = RandRangeF(360,1);

		playerRot_7.Pitch = RandRangeF(45,-45);

		playerRot_7.Roll = RandRange( 360, 0 );

		playerPos_7 = playerPos;

		playerPos_7.Z += RandRangeF( 0.5, 0 );

		playerPos_7.Y += RandRangeF( 1.4, -0.4 );

		playerPos_7.X += RandRangeF( 2.4, -2.4 );


		ent__6 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
			"dlc\dlc_acs\data\fx\acs_sword_slashes.w2ent"
			, true ), playerPos_7, playerRot_7 );
		
		ent__6.AddTag('Umbral_Slash_End_Mark');

		ent__6.PlayEffectSingle('sword_slash_red_large');

		ent__6.DestroyAfter(5);

		GetWitcherPlayer().SoundEvent("monster_dettlaff_monster_combat_geralt_deathblow_01");

		GetWitcherPlayer().SoundEvent("monster_dettlaff_monster_combat_geralt_deathblow_02");
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_Sparagmos_Effect()
{
	var vACS_Sparagmos : cACS_Sparagmos;
	vACS_Sparagmos = new cACS_Sparagmos in theGame;
			
	vACS_Sparagmos.ACS_Sparagmos_Engage();
}

function ACS_Sparagmos_Damage()
{
	var vACS_Sparagmos : cACS_Sparagmos;
	vACS_Sparagmos = new cACS_Sparagmos in theGame;
			
	vACS_Sparagmos.ACS_Sparagmos_Damage_Engage();
}

statemachine class cACS_Sparagmos
{
    function ACS_Sparagmos_Engage()
	{
		this.PushState('ACS_Sparagmos_Engage');
	}

	function ACS_Sparagmos_Damage_Engage()
	{
		this.PushState('ACS_Sparagmos_Damage_Engage');
	}
}

state ACS_Sparagmos_Engage in cACS_Sparagmos
{
	private var ent, ent_1, ent_2, ent_3, ent_4, ent_5, ent_6, ent_7                         																					: CEntity;
	private var adjustedRot, playerRot_1, playerRot_2, playerRot_3, playerRot_4, playerRot_5, playerRot_6, playerRot_7, rot, rot_1, rot_2, rot_3, rot_4, rot_5, rot_6             : EulerAngles;
    private var playerPos, playerPos_1, playerPos_2, playerPos_3, playerPos_4, playerPos_5, playerPos_6, playerPos_7, pos, pos_1, pos_2, pos_3, pos_4, pos_5, pos_6				: Vector;
	private var euler_sword																																						: EulerAngles;
	private var vector_sword																																					: Vector;
	private var eff_names																																						: array<CName>;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Sparagmos();
	}

	function fill_lightning_array()
	{
		eff_names.Clear();

		eff_names.PushBack('diagonal_up_left');
		eff_names.PushBack('diagonal_down_left');
		eff_names.PushBack('down');
		eff_names.PushBack('up');
		eff_names.PushBack('diagonal_up_right');
		eff_names.PushBack('diagonal_down_right');
		eff_names.PushBack('right');
		eff_names.PushBack('left');
	}
	
	entry function Sparagmos()
	{
		fill_lightning_array();

		//GetACSWatcher().RemoveTimer('ACS_Sparagmos_Electric_Effect');

		//ACSGetCEntity('ACS_Sparagmos_Effect_2').Destroy();

		adjustedRot = GetWitcherPlayer().GetWorldRotation();

		playerPos = GetWitcherPlayer().GetWorldPosition();


		ent = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
			"dlc\dlc_acs\data\fx\acs_sword_slashes.w2ent"
			, true ), playerPos, adjustedRot );

		euler_sword.Roll = 0;
		euler_sword.Pitch = 0;
		euler_sword.Yaw = 0;
		vector_sword.X = 0;
		vector_sword.Y = 0;
		vector_sword.Z = 5.25;

		ent.CreateAttachment( GetWitcherPlayer(), 'r_weapon', vector_sword, euler_sword );

		//ent.PlayEffectSingle(eff_names[RandRange(eff_names.Size())]);

		ent.AddTag('ACS_Sparagmos_Effect');

		ent.DestroyAfter(2);



		ent_1 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
			
			"gameplay\abilities\sorceresses\sorceress_lightining_bolt.w2ent"
			
			, true ), GetWitcherPlayer().GetWorldPosition() );

		euler_sword.Roll = RandRangeF(360,1);
		euler_sword.Pitch = RandRangeF(360,1);
		euler_sword.Yaw = RandRangeF(360,1);
		vector_sword.X = 0;
		vector_sword.Y = 0;
		vector_sword.Z = 0.25;

		ent_1.CreateAttachment( GetWitcherPlayer(), 'r_weapon', vector_sword, euler_sword );
		
		//ent.PlayEffectSingle('diagonal_up_left');
		//ent.PlayEffectSingle('diagonal_down_left');
		//ent.PlayEffectSingle('down');
		//ent.PlayEffectSingle('up');
		//ent.PlayEffectSingle('diagonal_up_right');
		//ent.PlayEffectSingle('diagonal_down_right');
		//ent.PlayEffectSingle('right');
		//ent.PlayEffectSingle('left');

		ent_1.PlayEffectSingle(eff_names[RandRange(eff_names.Size())]);
		ent_1.PlayEffectSingle(eff_names[RandRange(eff_names.Size())]);
		ent_1.PlayEffectSingle(eff_names[RandRange(eff_names.Size())]);

		ent_1.PlayEffectSingle('shock');
		ent_1.PlayEffectSingle('shock');
		ent_1.PlayEffectSingle('shock');
		ent_1.PlayEffectSingle('shock');
		ent_1.PlayEffectSingle('shock');

		ent_1.StopEffect('shock');

		ent_1.DestroyAfter(2);

		ent_1.AddTag('ACS_Sparagmos_Effect_1');


		ent_2 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\acs_lightning.w2ent", true ), GetWitcherPlayer().GetWorldPosition() );

		euler_sword.Roll = RandRangeF(360,1);
		euler_sword.Pitch = RandRangeF(360,1);
		euler_sword.Yaw = RandRangeF(360,1);
		vector_sword.X = 0;
		vector_sword.Y = 0;
		vector_sword.Z = 2;

		ent_2.CreateAttachment( GetWitcherPlayer(), 'r_weapon', vector_sword, euler_sword  );

		//ent_2.PlayEffectSingle(eff_names[RandRange(eff_names.Size())]);

		ent_2.AddTag('ACS_Sparagmos_Effect_2');

		ent_2.DestroyAfter(2);



		ent_3 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\acs_lightning.w2ent", true ), GetWitcherPlayer().GetWorldPosition() );

		euler_sword.Roll = RandRangeF(360,1);
		euler_sword.Pitch = RandRangeF(360,1);
		euler_sword.Yaw = RandRangeF(360,1);
		vector_sword.X = 0;
		vector_sword.Y = 0;
		vector_sword.Z = 6;

		ent_3.CreateAttachment( GetWitcherPlayer(), 'r_weapon', vector_sword, euler_sword  );

		//ent_3.PlayEffectSingle(eff_names[RandRange(eff_names.Size())]);

		ent_3.AddTag('ACS_Sparagmos_Effect_3');

		ent_3.DestroyAfter(2);


		ent_4 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\acs_lightning.w2ent", true ), GetWitcherPlayer().GetWorldPosition() );

		euler_sword.Roll = RandRangeF(360,1);
		euler_sword.Pitch = RandRangeF(360,1);
		euler_sword.Yaw = RandRangeF(360,1);
		vector_sword.X = 0;
		vector_sword.Y = 0;
		vector_sword.Z = 10;

		ent_4.CreateAttachment( GetWitcherPlayer(), 'r_weapon', vector_sword, euler_sword  );

		//ent_4.PlayEffectSingle(eff_names[RandRange(eff_names.Size())]);

		ent_4.AddTag('ACS_Sparagmos_Effect_4');

		ent_4.DestroyAfter(2);




		ent_5 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\acs_lightning.w2ent", true ), GetWitcherPlayer().GetWorldPosition() );

		euler_sword.Roll = RandRangeF(360,1);
		euler_sword.Pitch = RandRangeF(360,1);
		euler_sword.Yaw = RandRangeF(360,1);
		vector_sword.X = 0;
		vector_sword.Y = 0;
		vector_sword.Z = 14;

		ent_5.CreateAttachment( GetWitcherPlayer(), 'r_weapon', vector_sword, euler_sword  );

		//ent_5.PlayEffectSingle(eff_names[RandRange(eff_names.Size())]);

		ent_5.AddTag('ACS_Sparagmos_Effect_5');

		ent_5.DestroyAfter(2);

		//ACS_Heavy_Attack_Extended_Trail();

		GetACSWatcher().AddTimer('ACS_Sparagmos_Electric_Effect', 0.1, true);
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state ACS_Sparagmos_Damage_Engage in cACS_Sparagmos
{
	private var ent_6                       																																	: CEntity;
	private var actortarget																																						: CActor;
	private var actors    																																						: array<CActor>;
	private var i         																																						: int;
	private var damageMax																																						: float;
	private var attAction																																						: W3Action_Attack;
	private var eff_names																																						: array<CName>;
	private var targetPos																																						: Vector;
	private var targetRot																																						: EulerAngles;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Sparagmos_Damage();
	}

	function fill_lightning_array()
	{
		eff_names.Clear();

		eff_names.PushBack('diagonal_up_left');
		eff_names.PushBack('diagonal_down_left');
		eff_names.PushBack('down');
		eff_names.PushBack('up');
		eff_names.PushBack('diagonal_up_right');
		eff_names.PushBack('diagonal_down_right');
		eff_names.PushBack('right');
		eff_names.PushBack('left');
	}
	
	entry function Sparagmos_Damage()
	{
		fill_lightning_array();

		actors.Clear();

		actors = GetWitcherPlayer().GetNPCsAndPlayersInCone(10, VecHeading(GetWitcherPlayer().GetHeadingVector()), 60, 50, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				targetPos = actortarget.GetWorldPosition();

				targetRot = actortarget.GetWorldRotation();

				ent_6 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "gameplay\abilities\sorceresses\sorceress_lightining_bolt.w2ent", true ), actortarget.GetWorldPosition() );

				ent_6.CreateAttachment( actortarget, , Vector(0,0,1), EulerAngles(RandRangeF(360,0), RandRangeF(360,0), RandRangeF(360,0)) );
				
				ent_6.PlayEffectSingle(eff_names[RandRange(eff_names.Size())]);

				/*
				ent_6.PlayEffectSingle('diagonal_up_left');
				ent_6.PlayEffectSingle('diagonal_up_left');
				ent_6.PlayEffectSingle('diagonal_down_left');
				ent_6.PlayEffectSingle('down');
				ent_6.PlayEffectSingle('up');
				ent_6.PlayEffectSingle('diagonal_up_right');
				ent_6.PlayEffectSingle('diagonal_down_right');
				ent_6.PlayEffectSingle('right');
				ent_6.PlayEffectSingle('left');
				*/

				//ent_6.PlayEffectSingle('lightning_fx');
				ent_6.PlayEffectSingle('shock');

				ent_6.DestroyAfter(1);
			}
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_Bruxa_Scream()
{
	var vACS_Bruxa_Scream : cACS_Bruxa_Scream;
	vACS_Bruxa_Scream = new cACS_Bruxa_Scream in theGame;
			
	vACS_Bruxa_Scream.ACS_Bruxa_Scream_Engage();
}

statemachine class cACS_Bruxa_Scream
{
    function ACS_Bruxa_Scream_Engage()
	{
		this.PushState('ACS_Bruxa_Scream_Engage');
	}
}

state ACS_Bruxa_Scream_Engage in cACS_Bruxa_Scream
{
	private var ent, ent_2, ent_3                   : CEntity;
	private var rot                        			: EulerAngles;
    private var pos									: Vector;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Bruxa_Scream();
	}

	entry function Bruxa_Scream()
	{
		rot = GetWitcherPlayer().GetWorldRotation();

		pos = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetHeadingVector() * 1.3;

		if (GetWitcherPlayer().HasTag('acs_vampire_claws_equipped'))
		{
			if ( GetWitcherPlayer().HasBuff(EET_BlackBlood) )
			{
				GetWitcherPlayer().SoundEvent("monster_dettlaff_monster_voice_taunt_claws");

				ent_2 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
					"dlc\bob\data\fx\monsters\dettlaff\dettlaff_swarm_attack.w2ent"
					, true ), pos, rot );
				
				ent_2.CreateAttachment( GetWitcherPlayer(), , Vector( 0, 3, 0 ), EulerAngles(0,0,0) );

				ent_2.PlayEffectSingle('swarm_attack');

				ent_2.DestroyAfter(7);

				ent_3 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
					"dlc\bob\data\fx\monsters\dettlaff\dettlaff_swarm_attack.w2ent"
					, true ), pos, rot );
				
				ent_3.CreateAttachment( GetWitcherPlayer(), , Vector( 0, 3, -5 ), EulerAngles(0,0,0) );

				ent_3.PlayEffectSingle('swarm_attack');

				ent_3.DestroyAfter(7);

				GetACSWatcher().AddTimer('ACS_Bruxa_Scream_Release_Delay', 4.5, false);
			}
			else	
			{
				GetWitcherPlayer().SoundEvent("monster_bruxa_voice_scream");

				ent = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
				"dlc\bob\data\gameplay\abilities\bruxa\bruxa_scream_attack.w2ent"
				, true ), pos, rot );

				ent.AddTag('ACS_Bruxa_Scream');

				ent.CreateAttachment( GetWitcherPlayer(), , Vector( 0, 0.5, 0.375 ), EulerAngles(0,0,0) );

				ent.PlayEffectSingle('cone');

				ent.DestroyAfter(3);

				GetACSWatcher().AddTimer('ACS_Bruxa_Scream_Release_Delay', 2, false);
			}
		}
		else if (GetWitcherPlayer().HasTag('acs_aard_sword_equipped'))
		{
			GetWitcherPlayer().SoundEvent("monster_dettlaff_monster_voice_taunt_claws");

			ent_2 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
				"dlc\bob\data\fx\monsters\dettlaff\dettlaff_swarm_attack.w2ent"
				, true ), pos, rot );
			
			ent_2.CreateAttachment( GetWitcherPlayer(), , Vector( 0, 3, 0 ), EulerAngles(0,0,0) );

			ent_2.PlayEffectSingle('swarm_attack');

			ent_2.DestroyAfter(7);

			ent_3 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
				"dlc\bob\data\fx\monsters\dettlaff\dettlaff_swarm_attack.w2ent"
				, true ), pos, rot );
			
			ent_3.CreateAttachment( GetWitcherPlayer(), , Vector( 0, 3, -5 ), EulerAngles(0,0,0) );

			ent_3.PlayEffectSingle('swarm_attack');

			ent_3.DestroyAfter(7);

			GetACSWatcher().AddTimer('ACS_Bruxa_Scream_Release_Delay', 4.5, false);
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

function ACS_Bruxa_Scream_Release()
{
	var dmg																																								: W3DamageAction;
	var actortarget																																						: CActor;
	var actors    																																						: array<CActor>;
	var i         																																						: int;
	var damageMax, maxTargetVitality, maxTargetEssence																													: float;

	actors.Clear();

	actors = GetWitcherPlayer().GetNPCsAndPlayersInCone(10, VecHeading(GetWitcherPlayer().GetHeadingVector()), 60, 50, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors );

	if( actors.Size() > 0 )
	{
		for( i = 0; i < actors.Size(); i += 1 )
		{
			actortarget = (CActor)actors[i];

			dmg = new W3DamageAction in theGame.damageMgr;
			dmg.Initialize(GetWitcherPlayer(), actortarget, theGame, 'ACS_Bruxa_Scream_Damage', EHRT_Heavy, CPS_Undefined, false, false, true, false);

			dmg.SetProcessBuffsIfNoDamage(true);
			dmg.SetCanPlayHitParticle(true);
			
			if (GetWitcherPlayer().HasTag('acs_vampire_claws_equipped'))
			{
				if ( GetWitcherPlayer().HasBuff(EET_BlackBlood) )
				{
					if (actortarget.UsesVitality()) 
					{ 
						maxTargetVitality = actortarget.GetStatMax( BCS_Vitality ) - actortarget.GetStat( BCS_Vitality );

						damageMax = maxTargetVitality * 0.35; 
					} 
					else if (actortarget.UsesEssence()) 
					{ 
						maxTargetEssence = actortarget.GetStatMax( BCS_Essence ) - actortarget.GetStat( BCS_Essence );
						
						damageMax = maxTargetEssence * 0.35; 
					}  

					dmg.AddEffectInfo( EET_Bleeding, 10 );

					dmg.AddEffectInfo( EET_Confusion, 1 );
				}
				else
				{
					ACSGetCEntity('ACS_Bruxa_Scream').StopEffect('cone');

					ACSGetCEntity('ACS_Bruxa_Scream').PlayEffectSingle('fx_push');

					if (actortarget.UsesVitality()) 
					{ 
						maxTargetVitality = actortarget.GetStatMax( BCS_Vitality ) - actortarget.GetStat( BCS_Vitality );

						damageMax = maxTargetVitality * 0.15; 
					} 
					else if (actortarget.UsesEssence()) 
					{ 
						maxTargetEssence = actortarget.GetStatMax( BCS_Essence ) - actortarget.GetStat( BCS_Essence );
						
						damageMax = maxTargetEssence * 0.15; 
					} 

					dmg.AddEffectInfo( EET_HeavyKnockdown, 1 );
				}
			}
			else if (GetWitcherPlayer().HasTag('acs_aard_sword_equipped'))
			{
				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality ) - actortarget.GetStat( BCS_Vitality );

					damageMax = maxTargetVitality * 0.35; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence ) - actortarget.GetStat( BCS_Essence );
					
					damageMax = maxTargetEssence * 0.35; 
				}  

				dmg.AddEffectInfo( EET_Bleeding, 10 );

				dmg.AddEffectInfo( EET_Confusion, 1 );
			}

			dmg.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, 50 + damageMax );

			//dmg.SetForceExplosionDismemberment();
				
			theGame.damageMgr.ProcessAction( dmg );
									
			delete dmg;
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_Blood_Spikes()
{
	var vACS_Blood_Spikes : cACS_Blood_Spikes;
	vACS_Blood_Spikes = new cACS_Blood_Spikes in theGame;
			
	vACS_Blood_Spikes.ACS_Blood_Spikes_Engage();
}

statemachine class cACS_Blood_Spikes
{
    function ACS_Blood_Spikes_Engage()
	{
		this.PushState('ACS_Blood_Spikes_Engage');
	}
}

state ACS_Blood_Spikes_Engage in cACS_Blood_Spikes
{
	private var proj_6	 																									: W3ACSClawSpikesProjectile;
	private var initpos_6, targetPositionNPC																				: Vector;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Blood_Spikes();
	}

	entry function Blood_Spikes()
	{
		if ( !theSound.SoundIsBankLoaded("monster_golem_dao.bnk") )
		{
			theSound.SoundLoadBank( "monster_golem_dao.bnk", false );
		}

		if (thePlayer.GetTarget() && GetAttitudeBetween( thePlayer, thePlayer.GetTarget() ) == AIA_Hostile)
		{
			targetPositionNPC = thePlayer.GetTarget().GetWorldPosition();
		}
		else
		{
			targetPositionNPC = thePlayer.GetWorldPosition() + thePlayer.GetWorldForward() * 50;
		}
		
		initpos_6 = thePlayer.GetWorldPosition() + thePlayer.GetWorldForward() * 2.5;

		if (thePlayer.HasTag('acs_aard_sword_equipped'))
		{
			if (thePlayer.IsWeaponHeld('steelsword'))
			{
				proj_6 = (W3ACSClawSpikesProjectile)theGame.CreateEntity( 
				(CEntityTemplate)LoadResourceAsync( 

				"dlc\dlc_acs\data\entities\projectiles\claw_spikes_alt.w2ent"
				
				, true ), initpos_6 );
			}
			else if (thePlayer.IsWeaponHeld('silversword'))
			{
				proj_6 = (W3ACSClawSpikesProjectile)theGame.CreateEntity( 
				(CEntityTemplate)LoadResourceAsync( 

				"dlc\dlc_acs\data\entities\projectiles\claw_spikes.w2ent"
				
				, true ), initpos_6 );
			}
		}
		else
		{
			if (RandF() < 0.5)
			{
				proj_6 = (W3ACSClawSpikesProjectile)theGame.CreateEntity( 
				(CEntityTemplate)LoadResourceAsync( 

				"dlc\dlc_acs\data\entities\projectiles\claw_spikes_alt.w2ent"
				
				, true ), initpos_6 );
			}
			else
			{
				proj_6 = (W3ACSClawSpikesProjectile)theGame.CreateEntity( 
				(CEntityTemplate)LoadResourceAsync( 

				"dlc\dlc_acs\data\entities\projectiles\claw_spikes.w2ent"
				
				, true ), initpos_6 );
			}
		}
				
		proj_6.Init(GetWitcherPlayer());
		proj_6.PlayEffectSingle('fire_line');
		proj_6.ShootProjectileAtPosition(0,	15, targetPositionNPC, 25 );
		proj_6.DestroyAfter(10);
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_Transformation_Bruxa_Scream()
{
	var vACS_Transformation_Bruxa_Scream : cACS_Transformation_Bruxa_Scream;
	vACS_Transformation_Bruxa_Scream = new cACS_Transformation_Bruxa_Scream in theGame;
			
	vACS_Transformation_Bruxa_Scream.ACS_Transformation_Bruxa_Scream_Engage();
}

statemachine class cACS_Transformation_Bruxa_Scream
{
    function ACS_Transformation_Bruxa_Scream_Engage()
	{
		this.PushState('ACS_Transformation_Bruxa_Scream_Engage');
	}
}

state ACS_Transformation_Bruxa_Scream_Engage in cACS_Transformation_Bruxa_Scream
{
	private var ent, ent_2, ent_3                   : CEntity;
	private var rot                        			: EulerAngles;
    private var pos									: Vector;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Bruxa_Scream();
	}
	
	entry function Bruxa_Scream()
	{
		rot = ACSGetCActor('ACS_Transformation_Vampiress').GetWorldRotation();

		pos = ACSGetCActor('ACS_Transformation_Vampiress').GetWorldPosition() + ACSGetCActor('ACS_Transformation_Vampiress').GetHeadingVector() * 1.3;
	
		//GetWitcherPlayer().SoundEvent("monster_bruxa_voice_scream");

		ent = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
		"dlc\bob\data\gameplay\abilities\bruxa\bruxa_scream_attack.w2ent"
		, true ), pos, rot );

		ent.AddTag('ACS_Transformation_Bruxa_Scream');

		ent.CreateAttachment( ACSGetCActor('ACS_Transformation_Vampiress'), , Vector( 0, 0.5, 0.375 ), EulerAngles(0,0,0) );

		ent.PlayEffectSingle('cone');

		ent.DestroyAfter(3);

		GetACSWatcher().AddTimer('ACS_Transformation_Bruxa_Scream_Release_Delay', 2, false);
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

function ACS_Transformation_Bruxa_Scream_Release()
{
	var dmg																																								: W3DamageAction;
	var actortarget																																						: CActor;
	var actors    																																						: array<CActor>;
	var i         																																						: int;
	var damageMax, maxTargetVitality, maxTargetEssence																													: float;

	actors.Clear();

	actors = GetWitcherPlayer().GetNPCsAndPlayersInCone(10, VecHeading(ACSGetCActor('ACS_Transformation_Vampiress').GetHeadingVector()), 60, 50, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors );

	if( actors.Size() > 0 )
	{
		for( i = 0; i < actors.Size(); i += 1 )
		{
			actortarget = (CActor)actors[i];

			dmg = new W3DamageAction in theGame.damageMgr;
			dmg.Initialize(GetWitcherPlayer(), actortarget, theGame, 'ACS_Bruxa_Scream_Damage', EHRT_Heavy, CPS_Undefined, false, false, true, false);

			dmg.SetProcessBuffsIfNoDamage(true);
			dmg.SetCanPlayHitParticle(true);
			
			ACSGetCEntity('ACS_Transformation_Bruxa_Scream').StopEffect('cone');

			ACSGetCEntity('ACS_Transformation_Bruxa_Scream').PlayEffectSingle('fx_push');

			if (actortarget.UsesVitality()) 
			{ 
				maxTargetVitality = actortarget.GetStatMax( BCS_Vitality ) - actortarget.GetStat( BCS_Vitality );

				damageMax = maxTargetVitality * 0.25; 
			} 
			else if (actortarget.UsesEssence()) 
			{ 
				maxTargetEssence = actortarget.GetStatMax( BCS_Essence ) - actortarget.GetStat( BCS_Essence );
				
				damageMax = maxTargetEssence * 0.25; 
			} 

			dmg.AddEffectInfo( EET_HeavyKnockdown, 2 );
			
			dmg.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, 100 + damageMax );

			dmg.SetForceExplosionDismemberment();
				
			theGame.damageMgr.ProcessAction( dmg );
									
			delete dmg;
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_Bat_Teleport_FX()
{
	var vACS_Bat_Teleport_FX : cACS_Bat_Teleport_FX;
	vACS_Bat_Teleport_FX = new cACS_Bat_Teleport_FX in theGame;
			
	vACS_Bat_Teleport_FX.ACS_Bat_Teleport_FX_Engage();
}

statemachine class cACS_Bat_Teleport_FX
{
    function ACS_Bat_Teleport_FX_Engage()
	{
		this.PushState('ACS_Bat_Teleport_FX_Engage');
	}
}

state ACS_Bat_Teleport_FX_Engage in cACS_Bat_Teleport_FX
{
	private var ent                         : CEntity;
	private var rot                         : EulerAngles;
    private var pos							: Vector;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Bat_Teleport_FX_Entry();
	}

	entry function Bat_Teleport_FX_Entry()
	{
		rot = GetWitcherPlayer().GetWorldRotation();

		pos = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetHeadingVector() * 1.3;

		ent = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

			"dlc\bob\data\fx\monsters\dettlaff\dettlaff_swarm_trap.w2ent"

			, true ), pos, rot );

		ent.CreateAttachment( GetWitcherPlayer(), , Vector( 0, 0, 0 ), EulerAngles( 0, 90, 0 ) );

		ent.PlayEffectSingle('swarm_attack');

		ent.DestroyAfter(2);
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_Water_Aard()
{
	var vACS_Water_Aard : cACS_Water_Aard;
	vACS_Water_Aard = new cACS_Water_Aard in theGame;
			
	vACS_Water_Aard.ACS_Water_Aard_Engage();
}

statemachine class cACS_Water_Aard
{
    function ACS_Water_Aard_Engage()
	{
		this.PushState('ACS_Water_Aard_Engage');
	}
	
	function ACS_Water_Aard_Release_Engage()
	{
		this.PushState('ACS_Water_Aard_Release_Engage');
	}
}

state ACS_Water_Aard_Engage in cACS_Water_Aard
{
	private var ent, ent_2, ent_3                   : CEntity;
	private var rot                        			: EulerAngles;
    private var pos									: Vector;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Water_Aard();
	}
	
	entry function Water_Aard()
	{
		rot = GetWitcherPlayer().GetWorldRotation();

		pos = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetHeadingVector() * 1.1;

		ent = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
		"dlc\bob\data\gameplay\abilities\water_mage\sand_push_cast_bob.w2ent"
		, true ), pos, rot );

		ent.AddTag('ACS_Water_Aard');

		//ent.CreateAttachment( GetWitcherPlayer(), , Vector( 0, 0.5, 0.375 ), EulerAngles(0,0,0) );

		ent.PlayEffectSingle('cone');

		ent.DestroyAfter(3);

		GetACSWatcher().AddTimer('ACS_Water_Aard_Release_Delay', 0.5, false);
	
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state ACS_Water_Aard_Release_Engage in cACS_Water_Aard
{
	private var dmg																																								: W3DamageAction;
	private var actortarget																																						: CActor;
	private var actors    																																						: array<CActor>;
	private var i         																																						: int;
	private var damageMax																																						: float;
	private var ent, ent_2, ent_3                  																																: CEntity;
	private var rot                        																																		: EulerAngles;
    private var pos																																								: Vector;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Water_Aard_Release();
	}
	
	entry function Water_Aard_Release()
	{
		rot = GetWitcherPlayer().GetWorldRotation();

		pos = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetHeadingVector() * 1.1;

		ent = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
		"dlc\bob\data\gameplay\abilities\water_mage\sand_push_cast_bob.w2ent"
		, true ), pos, rot );

		ent.AddTag('ACS_Water_Aard');

		//ent.CreateAttachment( GetWitcherPlayer(), , Vector( 0, 0.5, 0.375 ), EulerAngles(0,0,0) );

		ent.PlayEffectSingle('cone');

		ent.PlayEffectSingle('blast');

		ent.DestroyAfter(3);

		actors.Clear();

		actors = GetWitcherPlayer().GetNPCsAndPlayersInCone(10, VecHeading(GetWitcherPlayer().GetHeadingVector()), 60, 50, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				dmg = new W3DamageAction in theGame.damageMgr;
				dmg.Initialize(GetWitcherPlayer(), actortarget, theGame, 'ACS_Water_Aard_Damage', EHRT_Heavy, CPS_Undefined, false, false, true, false);

				dmg.SetProcessBuffsIfNoDamage(true);
				dmg.SetCanPlayHitParticle(true);

				if (actortarget.UsesVitality()) 
				{ 
					damageMax = actortarget.GetStatMax( BCS_Vitality ) * 0.03; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					damageMax = actortarget.GetStatMax( BCS_Essence ) * 0.03; 
				} 

				if (
				!actortarget.HasTag('ACS_First_Water_Wave_Hit')
				&& !actortarget.HasTag('ACS_Second_Water_Wave_Hit')
				)
				{
					actortarget.AddTag('ACS_First_Water_Wave_Hit'); 
				}
				else if (
				actortarget.HasTag('ACS_First_Water_Wave_Hit') 
				)
				{
					actortarget.RemoveTag('ACS_First_Water_Wave_Hit'); 
					actortarget.AddTag('ACS_Second_Water_Wave_Hit');
				}
				else if (
				actortarget.HasTag('ACS_Second_Water_Wave_Hit')
				)
				{
					dmg.AddEffectInfo( EET_HeavyKnockdown, 1 );

					actortarget.RemoveTag('ACS_Second_Water_Wave_Hit'); 
				}

				dmg.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, damageMax );

				//dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
										
				delete dmg;
			}
		}
	}
}

function ACS_Water_Aard_Release()
{
	var vACS_Water_Aard : cACS_Water_Aard;
	vACS_Water_Aard = new cACS_Water_Aard in theGame;
			
	vACS_Water_Aard.ACS_Water_Aard_Release_Engage();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_Giant_Stomp()
{
	var vACS_Giant_Stomp : cACS_Giant_Stomp;
	vACS_Giant_Stomp = new cACS_Giant_Stomp in theGame;
			
	vACS_Giant_Stomp.ACS_Giant_Stomp_Engage();
}

statemachine class cACS_Giant_Stomp
{
    function ACS_Giant_Stomp_Engage()
	{
		this.PushState('ACS_Giant_Stomp_Engage');
	}
}

state ACS_Giant_Stomp_Engage in cACS_Giant_Stomp
{
	private var ent_1, ent_2                																																	: CEntity;
	private var rot                        																																		: EulerAngles;
    private var pos																																								: Vector;
	private var dmg																																								: W3DamageAction;
	private var actortarget																																						: CActor;
	private var actors    																																						: array<CActor>;
	private var i         																																						: int;
	private var damageMax, maxTargetVitality, maxTargetEssence																													: float;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Giant_Stomp_Entry();
	}
	
	entry function Giant_Stomp_Entry()
	{
		rot = GetWitcherPlayer().GetWorldRotation();

		pos = GetWitcherPlayer().GetWorldPosition();

		ent_1 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

			//"dlc\bob\data\fx\monsters\dettlaff\dettlaff_monster_ground.w2ent"

			"dlc\dlc_acs\data\fx\stomp_prer_ground.w2ent"

			, true ), pos, rot );

		//ent_1.CreateAttachment( GetWitcherPlayer(), , Vector( 0, 1, 0 ), EulerAngles(0,0,0) );

		ent_1.PlayEffectSingle('impact');

		ent_1.PlayEffectSingle('warning');

		ent_1.DestroyAfter(5);

		ent_2 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

			//"dlc\bob\data\fx\monsters\dettlaff\blast.w2ent"
			
			"dlc\dlc_acs\data\fx\stomp_blast.w2ent"

			, true ), pos, rot );

		//ent_2.CreateAttachment( GetWitcherPlayer(), , Vector( 0, 1, 0 ), EulerAngles(0,0,0) );

		ent_2.PlayEffectSingle('blast_lv1');

		ent_2.DestroyAfter(1);

		actors.Clear();

		actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 5, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				dmg = new W3DamageAction in theGame.damageMgr;
				dmg.Initialize(GetWitcherPlayer(), actortarget, theGame, 'ACS_Giant_Stomp_Damage', EHRT_Heavy, CPS_Undefined, false, false, true, false);

				dmg.SetProcessBuffsIfNoDamage(true);
				dmg.SetCanPlayHitParticle(true);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality ) - actortarget.GetStat( BCS_Vitality );

					damageMax = maxTargetVitality * 0.25; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence ) - actortarget.GetStat( BCS_Essence );
					
					damageMax = maxTargetEssence * 0.25; 
				} 

				if (
				!actortarget.HasTag('ACS_First_Giant_Stomp_Hit')
				&& !actortarget.HasTag('ACS_Second_Giant_Stomp_Hit')
				)
				{
					dmg.AddEffectInfo( EET_Stagger, 0.5 );

					actortarget.AddTag('ACS_First_Giant_Stomp_Hit'); 
				}
				else if (
				actortarget.HasTag('ACS_First_Giant_Stompe_Hit') 
				)
				{
					dmg.AddEffectInfo( EET_Stagger, 0.5 );

					actortarget.RemoveTag('ACS_First_Giant_Stomp_Hit'); 
					actortarget.AddTag('ACS_Second_Giant_Stomp_Hit');
				}
				else if (
				actortarget.HasTag('ACS_Second_Giant_Stomp_Hit')
				)
				{
					dmg.AddEffectInfo( EET_HeavyKnockdown, 1 );

					actortarget.RemoveTag('ACS_Second_Giant_Stomp_Hit'); 
				}

				dmg.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, 50 + damageMax );

				//dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
										
				delete dmg;
			}
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_Storm_Spear_Effect()
{
	var vACS_Storm_Spear : cACS_Storm_Spear;
	vACS_Storm_Spear = new cACS_Storm_Spear in theGame;
			
	vACS_Storm_Spear.ACS_Storm_Spear_Engage();
}

function ACS_Storm_Spear_Damage()
{
	var vACS_Storm_Spear : cACS_Storm_Spear;
	vACS_Storm_Spear = new cACS_Storm_Spear in theGame;
			
	vACS_Storm_Spear.ACS_Storm_Spear_Damage_Engage();
}

statemachine class cACS_Storm_Spear
{
    function ACS_Storm_Spear_Engage()
	{
		this.PushState('ACS_Storm_Spear_Engage');
	}

	 function ACS_Storm_Spear_Damage_Engage()
	{
		this.PushState('ACS_Storm_Spear_Damage_Engage');
	}
}

state ACS_Storm_Spear_Damage_Engage in cACS_Storm_Spear
{
	private var ent_6                       																																	: CEntity;
	private var actortarget																																						: CActor;
	private var actors    																																						: array<CActor>;
	private var i         																																						: int;
	private var damageMax																																						: float;
	private var attAction																																						: W3Action_Attack;
	private var eff_names																																						: array<CName>;
	private var targetPos																																						: Vector;
	private var targetRot																																						: EulerAngles;
	private var meshcomp																																						: CComponent;
	private var animcomp 																																						: CAnimatedComponent;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Storm_Spear_Damage();
	}
	
	entry function Storm_Spear_Damage()
	{
		actors.Clear();

		actors = GetWitcherPlayer().GetNPCsAndPlayersInCone(10, VecHeading(GetWitcherPlayer().GetHeadingVector()), 30, 50, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				targetPos = actortarget.GetWorldPosition();

				targetRot = actortarget.GetWorldRotation();

				ent_6 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\tornado_custom_2.w2ent", true ), actortarget.GetWorldPosition() );

				animcomp = (CAnimatedComponent)ent_6.GetComponentByClassName('CAnimatedComponent');
				meshcomp = ent_6.GetComponentByClassName('CMeshComponent');

				animcomp.SetScale(Vector( 0.5, 0.5, 0.5, 1 ));

				meshcomp.SetScale(Vector( 0.5, 0.5, 0.5, 1 ));	

				animcomp.SetAnimationSpeedMultiplier( 3  ); 

				ent_6.CreateAttachment( actortarget, , Vector( 0, 0, 0 ) );

				ent_6.PlayEffectSingle('tornado');

				ent_6.DestroyAfter(1.5);
			}
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state ACS_Storm_Spear_Engage in cACS_Storm_Spear
{
	private var ent, ent_1, ent_2, ent_3, ent_4, ent_5, ent_6, ent_7            : CEntity;
	private var rot, attach_rot                        						 	: EulerAngles;
   	private var pos, attach_vec													: Vector;
	private var meshcomp														: CComponent;
	private var animcomp 														: CAnimatedComponent;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Storm_Spear_Entry();
	}
	
	entry function Storm_Spear_Entry()
	{
		ACS_Storm_Spear_Array_Destroy_Immediate();

		GetWitcherPlayer().SoundEvent("magic_man_tornado_loop_start");

		GetWitcherPlayer().SoundEvent("magic_man_sand_gust");

		rot = GetWitcherPlayer().GetWorldRotation();

		pos = GetWitcherPlayer().GetWorldPosition();

		ent = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

			"dlc\dlc_acs\data\fx\tornado_custom_2.w2ent"

			, true ), pos, rot );

		ent.AddTag('ACS_Tornado_Effect');

		animcomp = (CAnimatedComponent)ent.GetComponentByClassName('CAnimatedComponent');
		meshcomp = ent.GetComponentByClassName('CMeshComponent');

		animcomp.SetScale(Vector( 0.25, 0.25, 0.75, 1 ));

		meshcomp.SetScale(Vector( 0.25, 0.25, 0.75, 1 ));	

		animcomp.SetAnimationSpeedMultiplier( 8  ); 

		attach_rot.Roll = 0;
		attach_rot.Pitch = 180;
		attach_rot.Yaw = 0;
		attach_vec.X = 0;
		attach_vec.Y = 0;
		attach_vec.Z = 5;
		
		ent.CreateAttachment( GetWitcherPlayer(), 'r_weapon', attach_vec, attach_rot );

		ent.PlayEffectSingle('tornado');


		ent_1 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

			"dlc\dlc_acs\data\fx\tornado_custom_2.w2ent"

			, true ), pos, rot );

		ent_1.AddTag('ACS_Tornado_Effect');

		animcomp = (CAnimatedComponent)ent_1.GetComponentByClassName('CAnimatedComponent');
		meshcomp = ent_1.GetComponentByClassName('CMeshComponent');

		animcomp.SetScale(Vector( 0.225, 0.225, 0.75, 1 ));

		meshcomp.SetScale(Vector( 0.225, 0.225, 0.75, 1 ));	

		animcomp.SetAnimationSpeedMultiplier( 4  ); 

		attach_rot.Roll = 0;
		attach_rot.Pitch = 180;
		attach_rot.Yaw = 0;
		attach_vec.X = 0;
		attach_vec.Y = 0;
		attach_vec.Z = 5;
		
		ent_1.CreateAttachment( GetWitcherPlayer(), 'r_weapon', attach_vec, attach_rot );

		ent_1.PlayEffectSingle('tornado');


		ent_2 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

			"dlc\dlc_acs\data\fx\tornado_custom_2.w2ent"

			, true ), pos, rot );

		ent_2.AddTag('ACS_Tornado_Effect');

		animcomp = (CAnimatedComponent)ent_2.GetComponentByClassName('CAnimatedComponent');
		meshcomp = ent_2.GetComponentByClassName('CMeshComponent');

		animcomp.SetScale(Vector( 0.2, 0.2, 0.75, 1 ));

		meshcomp.SetScale(Vector( 0.2, 0.2, 0.75, 1 ));	

		animcomp.SetAnimationSpeedMultiplier( 2  ); 

		attach_rot.Roll = 0;
		attach_rot.Pitch = 180;
		attach_rot.Yaw = 0;
		attach_vec.X = 0;
		attach_vec.Y = 0;
		attach_vec.Z = 5;
		
		ent_2.CreateAttachment( GetWitcherPlayer(), 'r_weapon', attach_vec, attach_rot );

		ent_2.PlayEffectSingle('tornado');


		ent_3 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

			"dlc\dlc_acs\data\fx\tornado_custom_2.w2ent"

			, true ), pos, rot );

		ent_3.AddTag('ACS_Tornado_Effect');

		animcomp = (CAnimatedComponent)ent_3.GetComponentByClassName('CAnimatedComponent');
		meshcomp = ent_3.GetComponentByClassName('CMeshComponent');

		animcomp.SetScale(Vector( 0.175, 0.175, 0.75, 1 ));

		meshcomp.SetScale(Vector( 0.175, 0.175, 0.75, 1 ));	

		animcomp.SetAnimationSpeedMultiplier( 1 ); 

		attach_rot.Roll = 0;
		attach_rot.Pitch = 180;
		attach_rot.Yaw = 0;
		attach_vec.X = 0;
		attach_vec.Y = 0;
		attach_vec.Z = 5;
		
		ent_3.CreateAttachment( GetWitcherPlayer(), 'r_weapon', attach_vec, attach_rot );

		ent_3.PlayEffectSingle('tornado');

		ent_4 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

			"dlc\dlc_acs\data\fx\tornado_custom_2.w2ent"

			, true ), pos, rot );

		ent_4.AddTag('ACS_Tornado_Effect');

		animcomp = (CAnimatedComponent)ent_4.GetComponentByClassName('CAnimatedComponent');
		meshcomp = ent_4.GetComponentByClassName('CMeshComponent');

		animcomp.SetScale(Vector( 0.15, 0.15, 0.75, 1 ));

		meshcomp.SetScale(Vector( 0.15, 0.15, 0.75, 1 ));	

		animcomp.SetAnimationSpeedMultiplier( 0.5  ); 

		attach_rot.Roll = 0;
		attach_rot.Pitch = 180;
		attach_rot.Yaw = 0;
		attach_vec.X = 0;
		attach_vec.Y = 0;
		attach_vec.Z = 5;
		
		ent_4.CreateAttachment( GetWitcherPlayer(), 'r_weapon', attach_vec, attach_rot );

		ent_4.PlayEffectSingle('tornado');


		ent_5 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

			"dlc\dlc_acs\data\fx\tornado_custom_2.w2ent"

			, true ), pos, rot );

		ent_5.AddTag('ACS_Tornado_Effect');

		animcomp = (CAnimatedComponent)ent_5.GetComponentByClassName('CAnimatedComponent');
		meshcomp = ent_5.GetComponentByClassName('CMeshComponent');

		animcomp.SetScale(Vector( 0.125, 0.125, 0.75, 1 ));

		meshcomp.SetScale(Vector( 0.125, 0.125, 0.75, 1 ));	

		animcomp.SetAnimationSpeedMultiplier( 0.25  ); 

		attach_rot.Roll = 0;
		attach_rot.Pitch = 180;
		attach_rot.Yaw = 0;
		attach_vec.X = 0;
		attach_vec.Y = 0;
		attach_vec.Z = 5;
		
		ent_5.CreateAttachment( GetWitcherPlayer(), 'r_weapon', attach_vec, attach_rot );

		ent_5.PlayEffectSingle('tornado');

		ent_6 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

			"dlc\dlc_acs\data\fx\tornado_custom_2.w2ent"

			, true ), pos, rot );

		ent_6.AddTag('ACS_Tornado_Effect');

		animcomp = (CAnimatedComponent)ent_6.GetComponentByClassName('CAnimatedComponent');
		meshcomp = ent_6.GetComponentByClassName('CMeshComponent');

		animcomp.SetScale(Vector( 0.1, 0.1, 0.75, 1 ));

		meshcomp.SetScale(Vector( 0.1, 0.1, 0.75, 1 ));	

		animcomp.SetAnimationSpeedMultiplier( 0 ); 

		attach_rot.Roll = 0;
		attach_rot.Pitch = 180;
		attach_rot.Yaw = 0;
		attach_vec.X = 0;
		attach_vec.Y = 0;
		attach_vec.Z = 5;
		
		ent_6.CreateAttachment( GetWitcherPlayer(), 'r_weapon', attach_vec, attach_rot );

		ent_6.PlayEffectSingle('tornado');
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

function ACS_Storm_Spear_Array_Destroy_Immediate()
{	
	var i												: int;
	var ents 											: array<CEntity>;

	ents.Clear();

	theGame.GetEntitiesByTag( 'ACS_Tornado_Effect', ents );	

	for( i = 0; i < ents.Size(); i += 1 )
	{
		ents[i].Destroy();
	}

	GetWitcherPlayer().SoundEvent("magic_man_tornado_loop_stop");
}

function ACS_Storm_Spear_Array_Destroy()
{	
	var i												: int;
	var ents 											: array<CEntity>;

	ents.Clear();

	theGame.GetEntitiesByTag( 'ACS_Tornado_Effect', ents );	
	
	for( i = 0; i < ents.Size(); i += 1 )
	{
		//ents[i].Destroy();
		ents[i].StopAllEffects();
		ents[i].BreakAttachment(); 
		ents[i].Teleport( GetWitcherPlayer().GetWorldPosition() + Vector( 0, 0, -200 ) );
		ents[i].DestroyAfter(0.00125);
	}

	GetWitcherPlayer().SoundEvent("magic_man_tornado_loop_stop");
}

function ACS_Storm_Spear_Array_Stop_Effects()
{	
	var i												: int;
	var ents 											: array<CEntity>;

	ents.Clear();

	theGame.GetEntitiesByTag( 'ACS_Tornado_Effect', ents );	
	
	for( i = 0; i < ents.Size(); i += 1 )
	{
		ents[i].StopAllEffects();
		ents[i].DestroyAfter(3);
	}

	GetWitcherPlayer().SoundEvent("magic_man_tornado_loop_stop");
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_Giant_Sword_Fall()
{
	var vACS_Giant_Sword_Fall : cACS_Giant_Sword_Fall;
	vACS_Giant_Sword_Fall = new cACS_Giant_Sword_Fall in theGame;
			
	vACS_Giant_Sword_Fall.ACS_Giant_Sword_Fall_Engage();
}

statemachine class cACS_Giant_Sword_Fall
{
    function ACS_Giant_Sword_Fall_Engage()
	{
		this.PushState('ACS_Giant_Sword_Fall_Engage');
	}
}

state ACS_Giant_Sword_Fall_Engage in cACS_Giant_Sword_Fall
{
	private var initpos					: Vector;
	private var sword 					: W3ACSSwordProjectileGiant;
	private var actor       			: CActor;
	private var targetPosition			: Vector;
	private var meshcomp 				: CComponent;
	private var h 						: float;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Giant_Sword_Fall_Entry();
	}
	
	entry function Giant_Sword_Fall_Entry()
	{
		actor = ( CActor)( GetWitcherPlayer().GetDisplayTarget() );
		
		if( ACS_AttitudeCheck ( actor ) && GetWitcherPlayer().IsInCombat() && actor.IsAlive() )
		{	
			initpos = actor.GetWorldPosition();				
			initpos.Z += 40;
						
			targetPosition = actor.PredictWorldPosition( 0.1 );
			//targetPosition.Z += 1.1;
				
			sword = (W3ACSSwordProjectileGiant)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\sword_projectile_giant.w2ent", true ), initpos );
				
			meshcomp = sword.GetComponentByClassName('CMeshComponent');
			h = 10;
			meshcomp.SetScale(Vector(h,h,h,1));	
				
			sword.Init(GetWitcherPlayer());
			sword.PlayEffectSingle('appear');
			sword.ShootProjectileAtPosition( 0, 50, targetPosition, 500 );
			sword.DestroyAfter(31);
		}		
		else
		{
			initpos = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetWorldForward() * 5;				
			initpos.Z += 40;
								
			//targetPosition = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetWorldForward() * 5;
			targetPosition = GetWitcherPlayer().GetLookAtPosition();
				
			sword = (W3ACSSwordProjectileGiant)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\sword_projectile_giant.w2ent", true ), initpos );
				
			meshcomp = sword.GetComponentByClassName('CMeshComponent');
			h = 10;
			meshcomp.SetScale(Vector(h,h,h,1));	
			
			sword.Init(GetWitcherPlayer());
			sword.PlayEffectSingle('appear');
			sword.ShootProjectileAtPosition( 0, 50, targetPosition, 500 );
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_Dagger_Summon()
{
	var vACS_Dagger_Summon : cACS_Dagger_Summon;
	vACS_Dagger_Summon = new cACS_Dagger_Summon in theGame;
			
	vACS_Dagger_Summon.ACS_Dagger_Summon_Engage();
}

statemachine class cACS_Dagger_Summon
{
    function ACS_Dagger_Summon_Engage()
	{
		this.PushState('ACS_Dagger_Summon_Engage');
	}
}

state ACS_Dagger_Summon_Engage in cACS_Dagger_Summon
{
	private var attach_vec				: Vector;
	private var dagger_1 				: CEntity;
	private var attach_rot				: EulerAngles;
	private var meshcomp 				: CComponent;
	private var h 						: float;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		
		GetACSWatcher().RemoveTimer('ACS_Dagger_Destroy_Timer');
		//ACSGetCEntity('acs_dagger_1').Destroy();

		if(!GetWitcherPlayer().HasTag('ACS_Dagger_Summoned'))
		{
			Dagger_Summon_Entry();
		}

		GetACSWatcher().AddTimer('ACS_Dagger_Destroy_Timer', 1.25, false);
	}

	entry function Dagger_Summon_Entry()
	{
		GetWitcherPlayer().AddTag('ACS_Dagger_Summoned');

		if ( !theSound.SoundIsBankLoaded("mq_nml_1035.bnk") )
		{
			theSound.SoundLoadBank( "mq_nml_1035.bnk", false );
		}

		GetWitcherPlayer().SoundEvent("scene_weapon_sword_unsheat_fast");

		dagger_1 = (CEntity)theGame.CreateEntity((CEntityTemplate)LoadResourceAsync( 
						
		"dlc\dlc_acs\data\entities\swords\baron_dagger.w2ent" 

		//"items\quest_items\q105\q105_item__ritual_dagger.w2ent"
			
		, true), GetWitcherPlayer().GetWorldPosition() );
			
		attach_rot.Roll = 30;
		attach_rot.Pitch = 30;
		attach_rot.Yaw = 30;
		attach_vec.X = 0.025;
		attach_vec.Y = 0;
		attach_vec.Z = 0.0125;
			
		dagger_1.CreateAttachment( GetWitcherPlayer(), 'l_weapon', attach_vec, attach_rot );
		dagger_1.AddTag('acs_dagger_1');

		//GetACSWatcher().AddTimer('ACS_Dagger_Summon_Delay', 0.125, false);
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

function ACS_Dagger_Destroy()
{
	ACSGetCEntity('acs_dagger_1').PlayEffectSingle('fast_attack_buff_hit');

	ACSGetCEntity('acs_dagger_1').BreakAttachment(); 
	ACSGetCEntity('acs_dagger_1').Teleport( GetWitcherPlayer().GetWorldPosition() + Vector( 0, 0, -200 ) );
	ACSGetCEntity('acs_dagger_1').DestroyAfter(0.00125);

	GetWitcherPlayer().RemoveTag('ACS_Dagger_Summoned');
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_Yrden_Sidearm_Summon()
{
	var vACS_Yrden_Sidearm_Summon : cACS_Yrden_Sidearm_Summon;

	if ( thePlayer.IsHoldingItemInLHand() ) 
	{
		return;
	}

	vACS_Yrden_Sidearm_Summon = new cACS_Yrden_Sidearm_Summon in theGame;
			
	vACS_Yrden_Sidearm_Summon.ACS_Yrden_Sidearm_Summon_Engage();
}

statemachine class cACS_Yrden_Sidearm_Summon
{
    function ACS_Yrden_Sidearm_Summon_Engage()
	{
		this.PushState('ACS_Yrden_Sidearm_Summon_Engage');
	}
}

state ACS_Yrden_Sidearm_Summon_Engage in cACS_Yrden_Sidearm_Summon
{
	private var anchor_temp, blade_temp 					: CEntityTemplate;
	private var l_blade1, l_blade2, l_blade3, l_anchor		: CEntity;
	private var attach_vec, bone_vec						: Vector;
	private var attach_rot, bone_rot						: EulerAngles;
	
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		
		GetACSWatcher().RemoveTimer('ACS_Yrden_Sidearm_Destroy_Timer');

		GetACSWatcher().RemoveTimer('ACS_Yrden_Sidearm_Destroy_Actual_Timer');

		if(!GetWitcherPlayer().HasTag('ACS_Yrden_Sidearm_Summoned'))
		{
			Dagger_Summon_Entry();
		}

		GetACSWatcher().AddTimer('ACS_Yrden_Sidearm_Destroy_Timer', 4, false);
	}
	
	entry function Dagger_Summon_Entry()
	{
		GetWitcherPlayer().AddTag('ACS_Yrden_Sidearm_Summoned');

		GetACSWatcher().AddTimer('ACS_Yrden_Sidearm_Summon_Delay', 0.125, false);

		if (ACS_GetWeaponMode() == 0
		&& ACS_Settings_Main_Int('EHmodArmigerModeSettings','EHmodArmigerModeWeaponType', 0) == 1 
		)
		{
			if ( GetWitcherPlayer().IsWeaponHeld( 'silversword' ) )
			{
				anchor_temp = (CEntityTemplate)LoadResourceAsync( 

				"dlc\dlc_acs\data\entities\other\imlerith_shield_damaged.w2ent"
					
				, true );

				l_anchor = (CEntity)theGame.CreateEntity( anchor_temp, GetWitcherPlayer().GetWorldPosition() );

				l_anchor.CreateAttachment( GetWitcherPlayer(), 'l_weapon', Vector(0, 0, 0), EulerAngles(0, -30, 0) );
			}
			else
			{
				anchor_temp = (CEntityTemplate)LoadResourceAsync( 

				"dlc\dlc_acs\data\entities\other\amasii_shield.w2ent"
					
				, true );

				l_anchor = (CEntity)theGame.CreateEntity( anchor_temp, GetWitcherPlayer().GetWorldPosition() );

				l_anchor.CreateAttachment( GetWitcherPlayer(), 'l_weapon', Vector(0, 0.125, -0.5), EulerAngles(0, 0, 0) );
			}

			l_anchor.AddTag('acs_yrden_sidearm_anchor');

			l_anchor.PlayEffectSingle('destroy');

			l_anchor.StopEffect('destroy');

			l_anchor.PlayEffectSingle('destroy_shield_fx');

			l_anchor.StopEffect('destroy_shield_fx');

			l_anchor.PlayEffectSingle('igni_cone_hit');

			l_anchor.StopEffect('igni_cone_hit');
		}
		else if (ACS_GetWeaponMode() == 1
		&& ACS_Settings_Main_Int('EHmodFocusModeSettings','EHmodFocusModeWeaponType', 0) == 1 
		)
		{
			if ( GetWitcherPlayer().IsWeaponHeld( 'silversword' ) )
			{
				anchor_temp = (CEntityTemplate)LoadResourceAsync( 

				"dlc\dlc_acs\data\entities\other\imlerith_shield_damaged.w2ent"
					
				, true );

				l_anchor = (CEntity)theGame.CreateEntity( anchor_temp, GetWitcherPlayer().GetWorldPosition() );

				l_anchor.CreateAttachment( GetWitcherPlayer(), 'l_weapon', Vector(0, 0, 0), EulerAngles(0, -30, 0) );
			}
			else
			{
				anchor_temp = (CEntityTemplate)LoadResourceAsync( 

				"dlc\dlc_acs\data\entities\other\amasii_shield.w2ent"
					
				, true );

				l_anchor = (CEntity)theGame.CreateEntity( anchor_temp, GetWitcherPlayer().GetWorldPosition() );

				l_anchor.CreateAttachment( GetWitcherPlayer(), 'l_weapon', Vector(0, 0.125, -0.5), EulerAngles(0, 0, 0) );
			}

			l_anchor.AddTag('acs_yrden_sidearm_anchor');

			l_anchor.PlayEffectSingle('destroy');

			l_anchor.StopEffect('destroy');

			l_anchor.PlayEffectSingle('destroy_shield_fx');

			l_anchor.StopEffect('destroy_shield_fx');

			l_anchor.PlayEffectSingle('igni_cone_hit');

			l_anchor.StopEffect('igni_cone_hit');
		}
		else if (ACS_GetWeaponMode() == 2
		&& ACS_Settings_Main_Int('EHmodHybridModeSettings','EHmodHybridModeWeaponType', 0) == 1 
		)
		{
			if ( GetWitcherPlayer().IsWeaponHeld( 'silversword' ) )
			{
				anchor_temp = (CEntityTemplate)LoadResourceAsync( 

				"dlc\dlc_acs\data\entities\other\imlerith_shield_damaged.w2ent"
					
				, true );

				l_anchor = (CEntity)theGame.CreateEntity( anchor_temp, GetWitcherPlayer().GetWorldPosition() );

				l_anchor.CreateAttachment( GetWitcherPlayer(), 'l_weapon', Vector(0, 0, 0), EulerAngles(0, -30, 0) );
			}
			else
			{
				anchor_temp = (CEntityTemplate)LoadResourceAsync( 

				"dlc\dlc_acs\data\entities\other\amasii_shield.w2ent"
					
				, true );

				l_anchor = (CEntity)theGame.CreateEntity( anchor_temp, GetWitcherPlayer().GetWorldPosition() );

				l_anchor.CreateAttachment( GetWitcherPlayer(), 'l_weapon', Vector(0, 0.125, -0.5), EulerAngles(0, 0, 0) );
			}

			l_anchor.AddTag('acs_yrden_sidearm_anchor');

			l_anchor.PlayEffectSingle('destroy');

			l_anchor.StopEffect('destroy');

			l_anchor.PlayEffectSingle('destroy_shield_fx');

			l_anchor.StopEffect('destroy_shield_fx');

			l_anchor.PlayEffectSingle('igni_cone_hit');

			l_anchor.StopEffect('igni_cone_hit');
		}
		else if (ACS_GetWeaponMode() == 3)
		{
			if ( ACS_Imlerith_Mace_Equipped() )
			{
				anchor_temp = (CEntityTemplate)LoadResourceAsync( 

				"dlc\dlc_acs\data\entities\other\imlerith_shield_damaged.w2ent"
					
				, true );

				l_anchor = (CEntity)theGame.CreateEntity( anchor_temp, GetWitcherPlayer().GetWorldPosition() );

				l_anchor.CreateAttachment( GetWitcherPlayer(), 'l_weapon', Vector(0, 0, 0), EulerAngles(0, -30, 0) );
			}
			else
			{
				anchor_temp = (CEntityTemplate)LoadResourceAsync( 

				"dlc\dlc_acs\data\entities\other\amasii_shield.w2ent"
					
				, true );

				l_anchor = (CEntity)theGame.CreateEntity( anchor_temp, GetWitcherPlayer().GetWorldPosition() );

				l_anchor.CreateAttachment( GetWitcherPlayer(), 'l_weapon', Vector(0, 0.125, -0.5), EulerAngles(0, 0, 0) );
			}

			l_anchor.AddTag('acs_yrden_sidearm_anchor');

			l_anchor.PlayEffectSingle('destroy');

			l_anchor.StopEffect('destroy');

			l_anchor.PlayEffectSingle('destroy_shield_fx');

			l_anchor.StopEffect('destroy_shield_fx');

			l_anchor.PlayEffectSingle('igni_cone_hit');

			l_anchor.StopEffect('igni_cone_hit');
		}
		else
		{
			anchor_temp = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true );

			GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( GetWitcherPlayer().GetBoneIndex( 'l_forearm' ), bone_vec, bone_rot );
			l_anchor = (CEntity)theGame.CreateEntity( anchor_temp, GetWitcherPlayer().GetWorldPosition() );
			
			l_anchor.CreateAttachmentAtBoneWS( GetWitcherPlayer(), 'l_forearm', bone_vec, bone_rot );

			if ( GetWitcherPlayer().IsWeaponHeld( 'silversword' ) )
			{
				blade_temp = (CEntityTemplate)LoadResourceAsync( 
					"dlc\ep1\data\items\weapons\swords\steel_swords\steel_sword_ep1_02.w2ent"
					
					, true );
			}
			else
			{
				blade_temp = (CEntityTemplate)LoadResourceAsync( 
					"items\weapons\swords\wildhunt_swords\wildhunt_sword_lvl3.w2ent"
					
					, true );
			}
					
			l_blade1 = (CEntity)theGame.CreateEntity( blade_temp, GetWitcherPlayer().GetWorldPosition() + Vector( 0, 0, -20 ) );
			
			l_blade2 = (CEntity)theGame.CreateEntity( blade_temp, GetWitcherPlayer().GetWorldPosition() + Vector( 0, 0, -20 ) );
			
			l_blade3 = (CEntity)theGame.CreateEntity( blade_temp, GetWitcherPlayer().GetWorldPosition() + Vector( 0, 0, -20 ) );

			attach_rot.Roll = 90;
			attach_rot.Pitch = 270;
			attach_rot.Yaw = 10;
			attach_vec.X = -0.15;
			attach_vec.Y = -0.15;
			attach_vec.Z = -0.005;
			
			l_blade1.CreateAttachment( l_anchor, , attach_vec, attach_rot );
			
			attach_rot.Roll = 90;
			attach_rot.Pitch = 270;
			attach_rot.Yaw = 10;
			attach_vec.X = -0.15;
			attach_vec.Y = -0.15;
			attach_vec.Z = 0.045;
			
			l_blade2.CreateAttachment( l_anchor, , attach_vec, attach_rot );
			
			attach_rot.Roll = 90;
			attach_rot.Pitch = 270;
			attach_rot.Yaw = 10;
			attach_vec.X = -0.15;
			attach_vec.Y = -0.15;
			attach_vec.Z = -0.05;
			
			l_blade3.CreateAttachment( l_anchor, , attach_vec, attach_rot );

			l_anchor.AddTag('acs_yrden_sidearm_anchor');

			l_blade1.AddTag('acs_yrden_sidearm_1');

			l_blade2.AddTag('acs_yrden_sidearm_2');

			l_blade3.AddTag('acs_yrden_sidearm_3');
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

function ACS_Yrden_Sidearm_Destroy()
{
	GetACSWatcher().RemoveTimer('ACS_Yrden_Sidearm_Destroy_Timer');
	GetACSWatcher().RemoveTimer('ACS_Yrden_Sidearm_Destroy_Actual_Timer');

	if (ACSGetCEntity('acs_yrden_sidearm_anchor'))
	{
		ACSGetCEntity('acs_yrden_sidearm_anchor').StopEffect('appear');
		ACSGetCEntity('acs_yrden_sidearm_anchor').PlayEffectSingle('disappear_fast');
	}
	
	if (ACSGetCEntity('acs_yrden_sidearm_1'))
	{
		ACSGetCEntity('acs_yrden_sidearm_1').PlayEffectSingle('fire_sparks_trail');
		ACSGetCEntity('acs_yrden_sidearm_1').PlayEffectSingle('runeword1_fire_trail');
		ACSGetCEntity('acs_yrden_sidearm_1').PlayEffectSingle('fast_attack_buff_hit');
	}

	if (ACSGetCEntity('acs_yrden_sidearm_2'))
	{
		ACSGetCEntity('acs_yrden_sidearm_2').PlayEffectSingle('fire_sparks_trail');
		ACSGetCEntity('acs_yrden_sidearm_2').PlayEffectSingle('runeword1_fire_trail');
		ACSGetCEntity('acs_yrden_sidearm_2').PlayEffectSingle('fast_attack_buff_hit');
	}

	if (ACSGetCEntity('acs_yrden_sidearm_3'))
	{
		ACSGetCEntity('acs_yrden_sidearm_3').PlayEffectSingle('fire_sparks_trail');
		ACSGetCEntity('acs_yrden_sidearm_3').PlayEffectSingle('runeword1_fire_trail');
		ACSGetCEntity('acs_yrden_sidearm_3').PlayEffectSingle('fast_attack_buff_hit');
	}

	GetACSWatcher().RemoveTimer('ACS_Yrden_Sidearm_Destroy_Actual_Timer');

	GetACSWatcher().AddTimer('ACS_Yrden_Sidearm_Destroy_Actual_Timer', 0.125, false);
}

function ACS_Yrden_Sidearm_DestroyActual()
{
	if (ACSGetCEntity('acs_yrden_sidearm_anchor'))
	{
		ACSGetCEntity('acs_yrden_sidearm_anchor').BreakAttachment(); 
		ACSGetCEntity('acs_yrden_sidearm_anchor').Teleport( GetWitcherPlayer().GetWorldPosition() + Vector( 0, 0, -200 ) );
		ACSGetCEntity('acs_yrden_sidearm_anchor').DestroyAfter(0.00125);
		ACSGetCEntity('acs_yrden_sidearm_anchor').RemoveTag('acs_yrden_sidearm_anchor');
	}
	
	if (ACSGetCEntity('acs_yrden_sidearm_1'))
	{
		ACSGetCEntity('acs_yrden_sidearm_1').BreakAttachment(); 
		ACSGetCEntity('acs_yrden_sidearm_1').Teleport( GetWitcherPlayer().GetWorldPosition() + Vector( 0, 0, -200 ) );
		ACSGetCEntity('acs_yrden_sidearm_1').DestroyAfter(0.00125);
		ACSGetCEntity('acs_yrden_sidearm_1').RemoveTag('acs_yrden_sidearm_1');
	}
	
	if (ACSGetCEntity('acs_yrden_sidearm_2'))
	{
		ACSGetCEntity('acs_yrden_sidearm_2').BreakAttachment(); 
		ACSGetCEntity('acs_yrden_sidearm_2').Teleport( GetWitcherPlayer().GetWorldPosition() + Vector( 0, 0, -200 ) );
		ACSGetCEntity('acs_yrden_sidearm_2').DestroyAfter(0.00125);
		ACSGetCEntity('acs_yrden_sidearm_2').RemoveTag('acs_yrden_sidearm_2');
	}
	
	if (ACSGetCEntity('acs_yrden_sidearm_3'))
	{
		ACSGetCEntity('acs_yrden_sidearm_3').BreakAttachment(); 
		ACSGetCEntity('acs_yrden_sidearm_3').Teleport( GetWitcherPlayer().GetWorldPosition() + Vector( 0, 0, -200 ) );
		ACSGetCEntity('acs_yrden_sidearm_3').DestroyAfter(0.00125);
		ACSGetCEntity('acs_yrden_sidearm_3').RemoveTag('acs_yrden_sidearm_3');
	}

	GetWitcherPlayer().RemoveTag('ACS_Yrden_Sidearm_Summoned');
}

function ACS_Yrden_Sidearm_UpdateEnhancements()
{
	var steelID, silverID 						: SItemUniqueId;
	var enhancements 							: array<name>;
	var runeCount 								: int;

	GetWitcherPlayer().GetItemEquippedOnSlot(EES_SilverSword, silverID);
	GetWitcherPlayer().GetItemEquippedOnSlot(EES_SteelSword, steelID);

	enhancements.Clear();

	if (GetWitcherPlayer().IsWeaponHeld('steelsword'))
	{
		GetWitcherPlayer().GetInventory().GetItemEnhancementItems( steelID, enhancements );

		runeCount = GetWitcherPlayer().GetInventory().GetItemEnhancementCount( steelID );
	}
	else if (GetWitcherPlayer().IsWeaponHeld('silversword'))
	{
		GetWitcherPlayer().GetInventory().GetItemEnhancementItems( silverID, enhancements );

		runeCount = GetWitcherPlayer().GetInventory().GetItemEnhancementCount( silverID );
	}

	if ( runeCount > 0 && ( ( runeCount - 1 ) < enhancements.Size() ) )
	{
		ACSGetCEntity('acs_yrden_sidearm_1').StopEffect( ACS_GetRuneLevel( runeCount ) );
		ACSGetCEntity('acs_yrden_sidearm_1').StopEffect( ACS_GetRuneFxName( enhancements[ runeCount - 1 ] ) );

		ACSGetCEntity('acs_yrden_sidearm_2').StopEffect( ACS_GetRuneLevel( runeCount ) );
		ACSGetCEntity('acs_yrden_sidearm_2').StopEffect( ACS_GetRuneFxName( enhancements[ runeCount - 1 ] ) );

		ACSGetCEntity('acs_yrden_sidearm_3').StopEffect( ACS_GetRuneLevel( runeCount ) );
		ACSGetCEntity('acs_yrden_sidearm_3').StopEffect( ACS_GetRuneFxName( enhancements[ runeCount - 1 ] ) );

		ACSGetCEntity('acs_yrden_sidearm_1').PlayEffectSingle( ACS_GetRuneLevel( runeCount ) );
		ACSGetCEntity('acs_yrden_sidearm_1').PlayEffectSingle( ACS_GetRuneFxName( enhancements[ runeCount - 1 ] ) );

		ACSGetCEntity('acs_yrden_sidearm_2').PlayEffectSingle( ACS_GetRuneLevel( runeCount ) );
		ACSGetCEntity('acs_yrden_sidearm_2').PlayEffectSingle( ACS_GetRuneFxName( enhancements[ runeCount - 1 ] ) );

		ACSGetCEntity('acs_yrden_sidearm_3').PlayEffectSingle( ACS_GetRuneLevel( runeCount ) );
		ACSGetCEntity('acs_yrden_sidearm_3').PlayEffectSingle( ACS_GetRuneFxName( enhancements[ runeCount - 1 ] ) );
	}
	else if ( 3 == runeCount && 1 == enhancements.Size() )
	{
		ACSGetCEntity('acs_yrden_sidearm_1').StopEffect( ACS_GetRuneLevel( runeCount ) );
		ACSGetCEntity('acs_yrden_sidearm_1').StopEffect( ACS_GetEnchantmentFxName( enhancements[ 0 ] ) );

		ACSGetCEntity('acs_yrden_sidearm_2').StopEffect( ACS_GetRuneLevel( runeCount ) );
		ACSGetCEntity('acs_yrden_sidearm_2').StopEffect( ACS_GetEnchantmentFxName( enhancements[ 0 ] ) );

		ACSGetCEntity('acs_yrden_sidearm_3').StopEffect( ACS_GetRuneLevel( runeCount ) );
		ACSGetCEntity('acs_yrden_sidearm_3').StopEffect( ACS_GetEnchantmentFxName( enhancements[ 0 ] ) );

		ACSGetCEntity('acs_yrden_sidearm_1').PlayEffectSingle( ACS_GetRuneLevel( runeCount ) );
		ACSGetCEntity('acs_yrden_sidearm_1').PlayEffectSingle( ACS_GetEnchantmentFxName( enhancements[ 0 ] ) );

		ACSGetCEntity('acs_yrden_sidearm_2').PlayEffectSingle( ACS_GetRuneLevel( runeCount ) );
		ACSGetCEntity('acs_yrden_sidearm_2').PlayEffectSingle( ACS_GetEnchantmentFxName( enhancements[ 0 ] ) );

		ACSGetCEntity('acs_yrden_sidearm_3').PlayEffectSingle( ACS_GetRuneLevel( runeCount ) );
		ACSGetCEntity('acs_yrden_sidearm_3').PlayEffectSingle( ACS_GetEnchantmentFxName( enhancements[ 0 ] ) );
	}

	ACSGetCEntity('acs_yrden_sidearm_1').PlayEffectSingle('rune_blast_loop');

	ACSGetCEntity('acs_yrden_sidearm_2').PlayEffectSingle('rune_blast_loop');

	ACSGetCEntity('acs_yrden_sidearm_3').PlayEffectSingle('rune_blast_loop');
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class cACS_Rage_Marker
{
    function ACS_Rage_Marker_Engage()
	{
		this.PushState('ACS_Rage_Marker_Engage');
	}

	function ACS_Rage_Marker_Player_Engage()
	{
		this.PushState('ACS_Rage_Marker_Player_Engage');
	}

	function ACS_Rage_Marker_Player_Pre_Engage()
	{
		this.PushState('ACS_Rage_Marker_Player_Pre_Engage');
	}
}

state ACS_Rage_Marker_Engage in cACS_Rage_Marker
{
	private var ent_1, ent_2, ent_3, ent_4, ent_5, ent_6, ent_7, markerNPC, markerNPC_1     : CEntity;
	private var npcRot, rot, attach_rot                        								: EulerAngles;
	private var npcPos, pos, attach_vec														: Vector;
	private var meshcomp																	: CComponent;
	private var animcomp 																	: CAnimatedComponent;
	private var h 																			: float;
	private var actors																		: array<CActor>;
	private var i 																			: int;
	private var npc 																		: CNewNPC;
	private var actor 																		: CActor;
	private var markerTemplate_1, markerTemplate_2 											: CEntityTemplate;
	private var movementAdjustorNPC															: CMovementAdjustor;
	private var ticket 																		: SMovementAdjustmentRequestTicket;
	private var l_aiTree																	: CAIExecuteAttackAction;
	private var animatedComponentA 															: CAnimatedComponent;
	private var attackTypes																	: array<EAttackType>;
	
	event OnEnterState(prevStateName : name)
	{
		Rage_Marker_Entry();
	}

	entry function Rage_Marker_Entry()
	{
		actors.Clear();
		
		//actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 20, 1, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

		theGame.GetActorsByTag( 'ACS_Pre_Rage', actors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				npc = (CNewNPC)actors[i];

				actor = actors[i];

				if (
				thePlayer.HasTag('ACS_Ghost_Stance_Active')
				|| thePlayer.IsPerformingFinisher()
				|| thePlayer.HasTag('ACS_IsPerformingFinisher')
				|| thePlayer.HasTag('acs_blood_sucking')
				)
				{
					continue;
				}

				if (
				npc.HasTag('ACS_taunted')
				|| npc.HasTag('ACS_Final_Fear_Stack')
				|| npc.HasTag('ACS_Poise_Finisher')
				|| npc.IsUsingVehicle()
				|| npc.IsUsingHorse()
				|| npc.HasTag('ACS_Final_Fear_Stack')
				)
				{
					continue;
				}

				npcRot = npc.GetWorldRotation();

				npcPos = npc.GetWorldPosition();

				attach_vec.X = 0;
				attach_vec.Y = 0;

				if (((CMovingPhysicalAgentComponent)(npc.GetMovingAgentComponent())).GetCapsuleHeight() > 2.25
				|| npc.GetRadius() > 0.7
				)
				{
					attach_vec.Z = 4.25;
				}
				else
				{
					attach_vec.Z = 2.5;
				}

				markerTemplate_1 = (CEntityTemplate)LoadResourceAsync( 
					
				"dlc\dlc_acs\data\fx\wolf_decal.w2ent"
				
				, true );

				markerTemplate_2 = (CEntityTemplate)LoadResourceAsync( 
				
				"dlc\dlc_acs\data\fx\vulnerable_marker.w2ent"
				
				, true );


				ent_1 = theGame.CreateEntity( markerTemplate_1, pos, rot );

				ent_1.AddTag('ACS_Rage_Marker_1');

				ent_1.CreateAttachment( npc, , attach_vec, EulerAngles(0,0,0) );

				ent_1.PlayEffectSingle('rune_2');

				ent_1.PlayEffectSingle('ground_smoke');

				ent_1.DestroyAfter(2);


				ent_2 = theGame.CreateEntity( markerTemplate_2, pos, rot );

				ent_2.AddTag('ACS_Rage_Marker_2');

				ent_2.CreateAttachment( npc, , attach_vec, EulerAngles(0,0,0) );

				ent_2.DestroyAfter(2);


				npc.GainStat( BCS_Morale, npc.GetStatMax( BCS_Morale ) );  

				npc.GainStat( BCS_Focus, npc.GetStatMax( BCS_Focus ) );  
					
				npc.GainStat( BCS_Stamina, npc.GetStatMax( BCS_Stamina ) );

				if (
				!npc.HasAbility('ImlerithSecondStage')
				)
				{
					npc.SetAnimationSpeedMultiplier(1 + RandRangeF(0.5, 0.25));
				}

				movementAdjustorNPC = npc.GetMovingAgentComponent().GetMovementAdjustor();

				npc.RemoveTag('ACS_Pre_Rage');
				npc.AddTag('ACS_In_Rage');

				npc.AddBuffImmunity_AllNegative('ACS_Rage', true); 

				npc.AddBuffImmunity_AllCritical('ACS_Rage', true);

				npc.SetCanPlayHitAnim(false); 

				ticket = movementAdjustorNPC.GetRequest( 'ACS_NPC_Rage_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Rage_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticket = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Rage_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticket, 0.25 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticket, 50000 );

				movementAdjustorNPC.RotateTowards( ticket, GetWitcherPlayer() );

				((CNewNPC)actor).SetAttitude(GetWitcherPlayer(), AIA_Hostile);

				if (
				!npc.HasAbility('mon_wyvern_base') 
				&& !npc.HasAbility('mon_draco_base')
				)
				{
					l_aiTree = new CAIExecuteAttackAction in actor;
					l_aiTree.OnCreated();

					if (actor.HasAbility('mon_golem_base')
					|| actor.HasAbility('mon_werewolf_base')
					)
					{
						l_aiTree.attackParameter = EAT_Attack3;
					}
					else
					{
						attackTypes.Clear();

						attackTypes.PushBack(EAT_Attack1);
						//attackTypes.PushBack(EAT_Attack2);
						//attackTypes.PushBack(EAT_Attack3);

						l_aiTree.attackParameter = attackTypes[RandRange(attackTypes.Size())];
					}
					
					actor.ForceAIBehavior( l_aiTree, BTAP_AboveCombat2);

					theGame.GetBehTreeReactionManager().CreateReactionEventIfPossible( actor, 'AttackAction', 1.0, 1.0f, 999.0f, 1, true); 
				}

				((CNewNPC)actor).SetAttitude(GetWitcherPlayer(), AIA_Hostile);
			}

			GetACSWatcher().RemoveTimer('ACS_Rage_Remove');

			GetACSWatcher().AddTimer('ACS_Rage_Remove', RandRangeF(1.5, 1), false);
		}
		else
		{
			GetACSWatcher().RemoveTimer('ACS_Rage_Remove');
			GetACSWatcher().Rage_Remove_Actual();

			ACS_Rage_Markers_Destroy();

			ACS_Rage_Markers_Player_Destroy();
		}
	}
}

state ACS_Rage_Marker_Player_Pre_Engage in cACS_Rage_Marker
{
	private var ent, ent_1, ent_2, ent_3, ent_4, ent_5, ent_6, ent_7            : CEntity;
	private var npcRot, rot, attach_rot                        					: EulerAngles;
	private var npcPos, pos, attach_vec											: Vector;
	private var meshcomp														: CComponent;
	private var animcomp 														: CAnimatedComponent;
	private var h 																: float;
	private var actors															: array<CActor>;
	private var i 																: int;
	private var npc 															: CNewNPC;
	private var actor 															: CActor;
	private var markerTemplate 													: CEntityTemplate;
	
	event OnEnterState(prevStateName : name)
	{
		Rage_Marker_Player_Pre_Entry();
	}

	entry function Rage_Marker_Player_Pre_Entry()
	{
		var ent, ent_1, ent_2, ent_3, ent_4, ent_5, ent_6, ent_7            : CEntity;
		var npcRot, rot, attach_rot                        					: EulerAngles;
		var npcPos, pos, attach_vec											: Vector;
		var meshcomp														: CComponent;
		var animcomp 														: CAnimatedComponent;
		var h 																: float;
		var actors															: array<CActor>;
		var i, num 															: int;
		var npc 															: CNewNPC;
		var actor 															: CActor;
		var markerTemplate 													: CEntityTemplate;

		if (
		GetWitcherPlayer().IsInCombat()
		)
		{
			actors.Clear();
			
			actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( ACS_Settings_Main_Float('EHmodRageMechanicSettings','EHmodRageMechanicRadius', 10), ACS_Settings_Main_Int('EHmodRageMechanicSettings','EHmodNumberOfEnragedEnemies', 2), , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

			if( actors.Size() > 0 )
			{
				for( i = 0; i < actors.Size(); i += 1 )
				{
					npc = (CNewNPC)actors[i];

					actor = actors[i];

					if (thePlayer.HasTag('ACS_Ghost_Stance_Active')
					|| thePlayer.HasTag('acs_blood_sucking')
					|| thePlayer.HasTag('ACS_Transformation_Bruxa_Cloaked'))
					{
						continue;
					}

					if (
					npc.HasTag('ACS_Forest_God')
					|| npc.HasTag('ACS_taunted')
					|| npc.HasTag('ACS_Forest_God_Shadows')
					|| npc.HasTag('ACS_Tentacle_1')
					|| npc.HasTag('ACS_Tentacle_2')
					|| npc.HasTag('ACS_Tentacle_3')
					|| npc.HasTag('ACS_Necrofiend_Tentacle_1') 
					|| npc.HasTag('ACS_Necrofiend_Tentacle_2') 
					|| npc.HasTag('ACS_Necrofiend_Tentacle_3') 
					|| npc.HasTag('ACS_Necrofiend_Tentacle_6')
					|| npc.HasTag('ACS_Necrofiend_Tentacle_5')
					|| npc.HasTag('ACS_Necrofiend_Tentacle_4')
					|| npc.HasTag('acs_snow_entity') 
					|| npc.HasTag('ACS_Nekker_Guardian')
					|| npc.HasTag('ACS_Vampire_Monster_Boss_Bar') 
					|| npc.HasTag('ACS_Svalblod_Bossbar') 
					|| npc.HasTag('ACS_Melusine_Bossbar') 
					|| npc.HasTag('ACS_Rat_Mage_Rat')
					|| npc.HasTag('ACS_Final_Fear_Stack')
					|| npc.HasTag('ACS_Poise_Finisher')
					)
					{
						continue;
					}

					if (npc.HasAbility('animal_rat_base')
					|| npc.HasAbility( 'Boss' )
					|| npc.GetNPCType() == ENGT_Guard
					|| npc.IsFlying()
					|| npc.IsSwimming()
					|| npc.IsUsingVehicle()
					|| npc.IsUsingHorse()
					)
					{
						continue;
					}
					
					if (npc.HasTag('ACS_Vampire_Monster')
					&& GetACSWatcher().ACS_Vampire_Monster_Flying_Process == true
					)
					{
						continue;
					}

					if (npc.IsHuman()
					&& (((CHumanAICombatStorage)npc.GetScriptStorageObject('CombatData')).GetActiveCombatStyle() == EBG_Combat_Fists
					|| ((CHumanAICombatStorage)npc.GetScriptStorageObject('CombatData')).GetActiveCombatStyle() == EBG_Combat_Undefined
					|| ((CHumanAICombatStorage)npc.GetScriptStorageObject('CombatData')).GetActiveCombatStyle() == EBG_Combat_Crossbow
					|| ((CHumanAICombatStorage)npc.GetScriptStorageObject('CombatData')).GetActiveCombatStyle() == EBG_Combat_Bow
					|| ((CHumanAICombatStorage)npc.GetScriptStorageObject('CombatData')).GetActiveCombatStyle() == EBG_None)
					)
					{
						continue;
					}

					if (!ACSGetCEntity('ACS_Rage_Marker_Player_1'))
					{
						GetACSWatcher().Remove_On_Hit_Tags();

						markerTemplate = (CEntityTemplate)LoadResourceAsync( 

						"dlc\dlc_acs\data\fx\wolf_decal.w2ent"
						
						, true );

						ent_1 = theGame.CreateEntity( markerTemplate, pos, rot );

						ent_1.AddTag('ACS_Rage_Marker_Player_1');

						attach_vec.X = 0;
						attach_vec.Y = 0;

						attach_vec.Z = 2.25;

						ent_1.CreateAttachment( GetWitcherPlayer(), , attach_vec, EulerAngles(0,0,0) );

						//ent_1.CreateAttachment( GetWitcherPlayer(), 'head', Vector(0,0,1), EulerAngles(0,0,0) );

						ent_1.PlayEffectSingle('marker');

						ent_1.PlayEffectSingle('rune');

						ent_1.DestroyAfter(1.5);

						if ( FactsQuerySum("ACS_Rage_Sound_Played") <= 0 )
						{
							GetWitcherPlayer().SoundEvent("magic_geralt_healing_oneshot");
							GetWitcherPlayer().SoundEvent("magic_geralt_healing_oneshot");
							GetWitcherPlayer().SoundEvent("sign_axii_ready");
							//GetWitcherPlayer().SoundEvent("sign_axii_ready");

							FactsAdd("ACS_Rage_Sound_Played", 1, -1);
						}

						ACS_Tutorial_Display_Check('ACS_Rage_Tutorial_Shown');

						GetACSWatcher().SetRageProcess(true);
					}

					npc.AddTag('ACS_Pre_Rage');
				}
			}
		}
	}
}

function ACS_Rage_Markers_Destroy()
{	
	var markers 										: array<CEntity>;
	var i												: int;
	
	markers.Clear();

	theGame.GetEntitiesByTag( 'ACS_Rage_Marker_1', markers );	
	
	for( i = 0; i < markers.Size(); i += 1 )
	{
		markers[i].Destroy();
	}

	markers.Clear();

	theGame.GetEntitiesByTag( 'ACS_Rage_Marker_2', markers );	
	
	for( i = 0; i < markers.Size(); i += 1 )
	{
		markers[i].Destroy();
	}

	markers.Clear();

	theGame.GetEntitiesByTag( 'ACS_Rage_Marker_3', markers );	
	
	for( i = 0; i < markers.Size(); i += 1 )
	{
		markers[i].Destroy();
	}

	markers.Clear();

	theGame.GetEntitiesByTag( 'ACS_Rage_Marker_4', markers );	
	
	for( i = 0; i < markers.Size(); i += 1 )
	{
		markers[i].Destroy();
	}

	markers.Clear();

	theGame.GetEntitiesByTag( 'ACS_Rage_Marker_5', markers );	
	
	for( i = 0; i < markers.Size(); i += 1 )
	{
		markers[i].Destroy();
	}

	markers.Clear();

	theGame.GetEntitiesByTag( 'ACS_Rage_Marker_6', markers );	
	
	for( i = 0; i < markers.Size(); i += 1 )
	{
		markers[i].Destroy();
	}

	markers.Clear();

	theGame.GetEntitiesByTag( 'ACS_Rage_Marker_7', markers );	
	
	for( i = 0; i < markers.Size(); i += 1 )
	{
		markers[i].Destroy();
	}

	if (FactsQuerySum("ACS_Rage_Sound_Played") > 0)
	{
		FactsRemove("ACS_Rage_Sound_Played");
	}
}

function ACS_Rage_Markers_Player_Destroy()
{	
	var markers 										: array<CEntity>;
	var i												: int;
	
	markers.Clear();

	theGame.GetEntitiesByTag( 'ACS_Rage_Marker_Player_1', markers );	
	
	for( i = 0; i < markers.Size(); i += 1 )
	{
		markers[i].Destroy();
	}

	markers.Clear();

	theGame.GetEntitiesByTag( 'ACS_Rage_Marker_Player_2', markers );	
	
	for( i = 0; i < markers.Size(); i += 1 )
	{
		markers[i].Destroy();
	}

	markers.Clear();

	theGame.GetEntitiesByTag( 'ACS_Rage_Marker_Player_3', markers );	
	
	for( i = 0; i < markers.Size(); i += 1 )
	{
		markers[i].Destroy();
	}

	markers.Clear();

	theGame.GetEntitiesByTag( 'ACS_Rage_Marker_Player_4', markers );	
	
	for( i = 0; i < markers.Size(); i += 1 )
	{
		markers[i].Destroy();
	}

	markers.Clear();

	theGame.GetEntitiesByTag( 'ACS_Rage_Marker_Player_5', markers );	
	
	for( i = 0; i < markers.Size(); i += 1 )
	{
		markers[i].Destroy();
	}

	markers.Clear();

	theGame.GetEntitiesByTag( 'ACS_Rage_Marker_Player_6', markers );	
	
	for( i = 0; i < markers.Size(); i += 1 )
	{
		markers[i].Destroy();
	}

	markers.Clear();

	theGame.GetEntitiesByTag( 'ACS_Rage_Marker_Player_7', markers );	
	
	for( i = 0; i < markers.Size(); i += 1 )
	{
		markers[i].Destroy();
	}

	if (FactsQuerySum("ACS_Rage_Sound_Played") > 0)
	{
		FactsRemove("ACS_Rage_Sound_Played");
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class ACSShieldSpawner extends CGameplayEntity
{
	var actor															: CActor;
	var shield_temp														: CEntityTemplate;
	var shield															: CEntity;
	var ents			  												: array<CGameplayEntity>;
	var i																: int;
	var progres 														: float;
	var pos 															: Vector;
	var target															: CGameplayEntity;

	event OnSpawned( spawnData : SEntitySpawnData )
	{
		//super.OnSpawned(spawnData);

		pos = this.GetWorldPosition();

		target = this;

		//AddTimer('NPCCheckTimer', 0.001, true);

		AddTimer('NPCCheckTimerDelay', 0.001, false);
	}

	timer function NPCCheckTimerDelay ( dt : float, id : int)
	{ 
		ents.Clear();

		FindGameplayEntitiesCloseToPoint(ents, this.GetWorldPosition(), 1, 5, ,FLAG_OnlyAliveActors + FLAG_ExcludePlayer);
		
		for( i = 0; i < ents.Size(); i += 1 )
		{
			if( ents.Size() > 0 )
			{
				actor = (CActor) ents[i];

				if (actor.IsAlive() )
				{
					if (
					actor.HasTag('ACS_Swapped_To_Shield')
					&& !actor.HasTag('ACS_Shield_Attached'))
					{
						if (StrContains( actor.GetReadableName(), "novigrad" ) )
						{
							if( RandF() < 0.5 )
							{
								shield_temp = (CEntityTemplate)LoadResource( 

								"items\weapons\shields\novigrad_shield_01.w2ent"
								
								, true );
							}
							else
							{
								shield_temp = (CEntityTemplate)LoadResource( 

								"items\weapons\shields\novigrad_shield_02.w2ent"
								
								, true );
							}	
						}
						else if (StrContains( actor.GetReadableName(), "redania" ) 
						|| StrContains( actor.GetReadableName(), "witch_hunter" ) 
						|| StrContains( actor.GetReadableName(), "inq_" ) 
						)
						{
							shield_temp = (CEntityTemplate)LoadResource( 

							"items\weapons\shields\redanian_shield_01.w2ent"
							
							, true );	
						}
						else if (StrContains( actor.GetReadableName(), "nilfgaard" ) )
						{
							if( RandF() < 0.5 )
							{
								shield_temp = (CEntityTemplate)LoadResource( 

								"items\weapons\shields\nilfgaard_shield_01.w2ent"
								
								, true );
							}
							else
							{
								shield_temp = (CEntityTemplate)LoadResource( 

								"items\weapons\shields\nilfgaard_shield_02.w2ent"
								
								, true );
							}	
						}
						else if (StrContains( actor.GetReadableName(), "brokvar" ) )
						{
							shield_temp = (CEntityTemplate)LoadResource( 

							"items\weapons\shields\skellige_brokvar_shield_01.w2ent"
							
							, true );	
						}
						else if (StrContains( actor.GetReadableName(), "craite" ) )
						{
							shield_temp = (CEntityTemplate)LoadResource( 

							"items\weapons\shields\skellige_craite_shield_01.w2ent"
							
							, true );	
						}
						else if (StrContains( actor.GetReadableName(), "dimun" ) )
						{
							shield_temp = (CEntityTemplate)LoadResource( 

							"items\weapons\shields\skellige_dimun_shield_01.w2ent"
							
							, true );	
						}
						else if (StrContains( actor.GetReadableName(), "drummond" ) )
						{
							shield_temp = (CEntityTemplate)LoadResource( 

							"items\weapons\shields\skellige_drummond_shield_01.w2ent"
							
							, true );	
						}
						else if (StrContains( actor.GetReadableName(), "heymaey" ) )
						{
							shield_temp = (CEntityTemplate)LoadResource( 

							"items\weapons\shields\skellige_heymaey_shield_01.w2ent"
							
							, true );	
						}
						else if (StrContains( actor.GetReadableName(), "tuiseach" ) )
						{
							shield_temp = (CEntityTemplate)LoadResource( 

							"items\weapons\shields\skellige_tuiseach_shield_01.w2ent"
							
							, true );	
						}
						else if (StrContains( actor.GetReadableName(), "temeria" ) )
						{
							shield_temp = (CEntityTemplate)LoadResource( 

							"items\weapons\shields\temeria_shield_01.w2ent"
							
							, true );	
						}
						else if (StrContains( actor.GetReadableName(), "knight" ) )
						{
							if (StrContains( actor.GetReadableName(), "nilfgaard" ) )
							{
								if( RandF() < 0.5 )
								{
									shield_temp = (CEntityTemplate)LoadResource( 

									"items\weapons\shields\nilfgaard_shield_01.w2ent"
									
									, true );
								}
								else
								{
									shield_temp = (CEntityTemplate)LoadResource( 

									"items\weapons\shields\nilfgaard_shield_02.w2ent"
									
									, true );
								}	
							}
							else
							{
								if( RandF() < 0.5 )
								{
									if( RandF() < 0.5 )
									{
										shield_temp = (CEntityTemplate)LoadResource( 

										"dlc\bob\data\items\weapons\shields\toussaint_shield_01_5_toussaint.w2ent"
										
										, true );
									}
									else
									{
										shield_temp = (CEntityTemplate)LoadResource( 

										"dlc\bob\data\items\weapons\shields\toussaint_shield_02_6_toussaint.w2ent"
										
										, true );
									}
								}
								else
								{
									if( RandF() < 0.5 )
									{
										shield_temp = (CEntityTemplate)LoadResource( 

										"dlc\bob\data\items\weapons\shields\toussaint_shield_03_7_dun_tynne.w2ent"
										
										, true );
									}
									else
									{
										if( RandF() < 0.5 )
										{
											shield_temp = (CEntityTemplate)LoadResource( 

											"dlc\bob\data\items\weapons\shields\toussaint_shield_01_6_flat_color.w2ent"
											
											, true );
										}
										else
										{
											if( RandF() < 0.5 )
											{
												shield_temp = (CEntityTemplate)LoadResource( 

												"dlc\bob\data\items\weapons\shields\toussaint_shield_02_7_flat_color.w2ent"
												
												, true );
											}
											else
											{
												shield_temp = (CEntityTemplate)LoadResource( 

												"dlc\bob\data\items\weapons\shields\toussaint_shield_03_6_flat_color.w2ent"
												
												, true );
											}
										}
									}
								}
							}
						}
						else if (StrContains( actor.GetReadableName(), "wildhunt" ) )
						{
							shield_temp = (CEntityTemplate)LoadResource( 

							"items\weapons\unique\imlerith_shield\imlerith_shield_intact.w2ent"
							
							, true );
						}
						else 
						{
							if( RandF() < 0.5 )
							{
								if( RandF() < 0.5 )
								{
									shield_temp = (CEntityTemplate)LoadResource( 

									"items\weapons\shields\bandit_shield_01.w2ent"
									
									, true );
								}
								else
								{
									shield_temp = (CEntityTemplate)LoadResource( 

									"items\weapons\shields\bandit_shield_02.w2ent"
									
									, true );
								}	
							}
							else
							{
								if( RandF() < 0.5 )
								{
									shield_temp = (CEntityTemplate)LoadResource( 
							
									"items\weapons\shields\bandit_shield_03.w2ent"
									
									, true );
								}
								else
								{
									shield_temp = (CEntityTemplate)LoadResource( 
						
									"items\weapons\shields\bandit_shield_04.w2ent"
									
									, true );
								}
							}
						}
						
						shield = (CEntity)theGame.CreateEntity( shield_temp, GetWitcherPlayer().GetWorldPosition() + Vector( 0, 0, -20 ) );

						//shield.CreateAttachment( actor, 'l_weapon', Vector(0,0,-0.5), EulerAngles(0,0,0) );

						shield.CreateAttachment( this, , Vector(0,0.0125,0), EulerAngles(0,0,0) );

						shield.PlayEffectSingle('aard_cone_hit');
						shield.PlayEffectSingle('igni_cone_hit');
						shield.PlayEffectSingle('heavy_block');
						shield.PlayEffectSingle('light_block');

						shield.DestroyAfter(300);

						shield.AddTag('ACS_ShieldSpawnerShield');

						actor.AddTag('ACS_Shield_Attached');

						this.AddTag('ACS_Shield_Activated');
					}
				}
			}
		}
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class ACSHumanDeathCrawlController extends CEntity
{
	var actor															: CActor;
	var shield_temp														: CEntityTemplate;
	var shield															: CEntity;
	var ents  															: array<CGameplayEntity>;
	var i, j, k, l, m													: int;
	var dismembermentComp 												: CDismembermentComponent;
	var wounds															: array< name >;
	var usedWound														: name;
	var movementAdjustorNPCCrawl										: CMovementAdjustor;
	var ticketNPCCrawl													: SMovementAdjustmentRequestTicket;
	var animatedComponentA												: CAnimatedComponent;
	var soundComponentA													: CSoundEmitterComponent;
	var drawableComponents 												: array < CComponent >;
	var drawableComponent 												: CDrawableComponent;
	var temp 															: CR4Player;
	var finisher_anim_names												: array< name >;
	var finisher_anim_name_selected										: name;
	
	
	event OnSpawned( spawnData : SEntitySpawnData )
	{
		super.OnSpawned(spawnData);

		AddTimer('AliveCheckTimer', 0.1, true);
	}
	
	timer function HumanDeathCrawlLoopFeetTimerDelay ( dt : float, id : int)
	{
		HumanDeathCrawlFeetCheck();

		AddTimer('HumanDeathCrawlLoopTimer', 1.15, true);
	}

	timer function HumanDeathCrawlLoopFinalFearTimerDelay ( dt : float, id : int)
	{
		HumanDeathCrawlFinalFearCheck();

		AddTimer('HumanDeathCrawlLoopTimer', 1.15, true);
	}

	timer function HumanDeathCrawlLoopNeckTimerDelay ( dt : float, id : int)
	{
		AddTimer('HumanDeathCrawlNeckCheckDelay', 0.5, false);

		AddTimer('HumanDeathCrawlLoopTimer', 1.15, true);
	}

	timer function HumanDeathCrawlLoopTimerDelay ( dt : float, id : int)
	{
		AddTimer('HumanDeathCrawlLoopTimer', 1.15, true);
	}

	timer function HumanDeathCrawlNeckCheckDelay ( dt : float, id : int)
	{ 
		HumanDeathCrawlFeetCheck();
	}

	timer function HumanDeathCrawlLoopTimer ( dt : float, id : int)
	{ 
		HumanDeathCrawlLoop();
	}

	timer function HumanDeathCrawlLoopTimerStop ( dt : float, id : int)
	{ 
		HumanDeathCrawlLoopStop();
	}

	timer function HumanDeathCrawlLoopTimerSelfDestruct ( dt : float, id : int)
	{ 
		HumanDeathCrawlLoopSelfDestruct();
	}

	timer function AliveCheckTimer ( dt : float, id : int)
	{
		ents.Clear();

		FindGameplayEntitiesCloseToPoint(ents, this.GetWorldPosition(), 0.01, 1, ,FLAG_ExcludePlayer, ,);

		//FindGameplayEntitiesInRange(ents, this, 0.01, 1, ,FLAG_ExcludePlayer );
		
		for( i = 0; i < ents.Size(); i += 1 )
		{
			if( ents.Size() > 0 )
			{
				actor = (CActor) ents[i];

				if ( !actor.IsAlive() )
				{
					if (actor.IsHuman()
					&& actor.IsMan()
					&& !actor.HasTag('ACS_caretaker_shade') 
					&& !actor.HasTag('ACS_Lynx_Witcher')
					&& actor.GetImmortalityMode() != AIM_Invulnerable
					&& actor.GetImmortalityMode() != AIM_Immortal
					&& !actor.HasTag('acs_was_dismembered')
					&& ((CNewNPC)(actor)).GetNPCType() != ENGT_Guard
					&& !actor.UsesEssence()
					)
					{
						actor.SetBehaviorMimicVariable( 'gameplayMimicsMode', (float)(int)GMM_Tpose );

						actor.SetAnimationSpeedMultiplier(1);

						animatedComponentA = (CAnimatedComponent)actor.GetComponentByClassName( 'CAnimatedComponent' );

						movementAdjustorNPCCrawl = actor.GetMovingAgentComponent().GetMovementAdjustor();
						
						actor.StopEffect('demonic_possession');
						
						actor.DropItemFromSlot('r_weapon'); 

						if( RandF() < 0.25 ) 
						{
							actor.StopEffect('pee');
							actor.PlayEffectSingle('pee');
							actor.PlayEffectSingle('pee');
							actor.PlayEffectSingle('pee');
							actor.PlayEffectSingle('pee');
							actor.PlayEffectSingle('pee');
							actor.PlayEffectSingle('pee');
							actor.PlayEffectSingle('pee');
							actor.PlayEffectSingle('pee');
							actor.PlayEffectSingle('pee');
							actor.PlayEffectSingle('pee');
							actor.PlayEffectSingle('pee');
							actor.PlayEffectSingle('pee');
							actor.PlayEffectSingle('pee');
							actor.PlayEffectSingle('pee');
							actor.PlayEffectSingle('pee');
							actor.PlayEffectSingle('pee');
							actor.PlayEffectSingle('pee');
							actor.PlayEffectSingle('pee');
							actor.PlayEffectSingle('pee');
							actor.PlayEffectSingle('pee');
						}

						if( RandF() < 0.5 ) 
						{
							actor.StopEffect('puke');
							actor.PlayEffectSingle('puke');
							actor.PlayEffectSingle('puke');
							actor.PlayEffectSingle('puke');
							actor.PlayEffectSingle('puke');
							actor.PlayEffectSingle('puke');
							actor.PlayEffectSingle('puke');
							actor.PlayEffectSingle('puke');
							actor.PlayEffectSingle('puke');
							actor.PlayEffectSingle('puke');
							actor.PlayEffectSingle('puke');
							actor.PlayEffectSingle('puke');
							actor.PlayEffectSingle('puke');
							actor.PlayEffectSingle('puke');
							actor.PlayEffectSingle('puke');
							actor.PlayEffectSingle('puke');
							actor.PlayEffectSingle('puke');
							actor.PlayEffectSingle('puke');
							actor.PlayEffectSingle('puke');
						}

						actor.StopAllEffectsAfter(5);

						if( actor.HasTag('ACS_One_Hand_Swap_Stage_1') )
						{
							actor.RemoveTag('ACS_One_Hand_Swap_Stage_1');
						}

						if( actor.HasTag('ACS_One_Hand_Swap_Stage_2') )
						{
							actor.RemoveTag('ACS_One_Hand_Swap_Stage_2');
						}

						if( actor.HasTag('ACS_sword2h_npc') )
						{
							if( actor.HasTag('ACS_Swapped_To_Witcher') )
							{
								actor.RemoveTag('ACS_Swapped_To_Witcher');
							}

							if( actor.HasTag('ACS_Swapped_To_1h_Sword') )
							{
								actor.RemoveTag('ACS_Swapped_To_1h_Sword');
							}

							actor.RemoveTag('ACS_sword2h_npc');
						}
						else if( actor.HasTag('ACS_sword1h_npc') )
						{
							if( actor.HasTag('ACS_Swapped_To_2h_Sword') )
							{
								actor.RemoveTag('ACS_Swapped_To_2h_Sword');
							}

							if( actor.HasTag('ACS_Swapped_To_Witcher') )
							{
								actor.RemoveTag('ACS_Swapped_To_Witcher');
							}

							actor.RemoveTag('ACS_sword1h_npc');
						}
						else if( actor.HasTag('ACS_shield_npc') )
						{
							if( actor.HasTag('ACS_Swapped_To_2h_Sword') )
							{
								actor.RemoveTag('ACS_Swapped_To_2h_Sword');
							}

							if( actor.HasTag('ACS_Swapped_To_Witcher') )
							{
								actor.RemoveTag('ACS_Swapped_To_Witcher');
							}

							actor.RemoveTag('ACS_shield_npc');
						}
						else if( actor.HasTag('ACS_witcher_npc') )
						{
							if( actor.HasTag('ACS_Swapped_To_2h_Sword') )
							{
								actor.RemoveTag('ACS_Swapped_To_2h_Sword');
							}

							if( actor.HasTag('ACS_Swapped_To_1h_Sword') )
							{
								actor.RemoveTag('ACS_Swapped_To_1h_Sword');
							}

							actor.RemoveTag('ACS_witcher_npc');
						}

						if (GetWitcherPlayer().HasTag('acs_vampire_claws_equipped')
						|| GetWitcherPlayer().HasTag('acs_aard_sword_equipped')
						|| GetWitcherPlayer().HasTag('acs_aard_secondary_sword_equipped')
						|| GetWitcherPlayer().HasTag('acs_yrden_sword_equipped')
						|| GetWitcherPlayer().HasTag('acs_yrden_secondary_sword_equipped')
						|| GetWitcherPlayer().HasTag('acs_quen_secondary_sword_equipped'))
						{
							if (actor.HasTag('ACS_Final_Fear_Stack'))
							{
								if (RandF() < 0.5)
								{
									animatedComponentA.PlaySlotAnimationAsync ( 'man_npc_sword_1hand_wounded_crawl_death', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(RandRangeF(0.5f, 0.25f), RandRangeF(0.5f, 0.25f)) );

									animatedComponentA.FreezePoseFadeIn(RandRangeF(2.f, 1.75f));
								}
								else
								{
									animatedComponentA.PlaySlotAnimationAsync ( 'man_npc_sword_1hand_wounded_crawl_killed_ACS', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(RandRangeF(0.5f, 0.25f), RandRangeF(0.5f, 0.25f)) );

									animatedComponentA.FreezePoseFadeIn(RandRangeF(2.f, 1.75f));
								}

								AddTimer('HumanDeathCrawlLoopTimer', 1.15, true);
								AddTimer('HumanDeathCrawlLoopTimerStop', RandRangeF(30, 15), false);
							}

							//actor.SoundEvent( "grunt_vo_death_stop", 'head' );

							AddTimer('HumanDeathCrawlLoopTimerSelfDestruct', 1, false);

							actor.AddTag('acs_was_dismembered');

							actor.AddTag('ACS_Crawling_Disabled');

							RemoveTimer('AliveCheckTimer');

							ACS_Normal_Death_Explode(actor, actor.GetWorldPosition());

							return;
						}
						else
						{
							if (actor.HasTag('ACS_Final_Fear_Stack'))
							{
								if (RandF() < 0.5)
								{
									animatedComponentA.PlaySlotAnimationAsync ( 'man_npc_sword_1hand_wounded_crawl_death', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(RandRangeF(0.5f, 0.25f), RandRangeF(0.5f, 0.25f)) );

									animatedComponentA.FreezePoseFadeIn(RandRangeF(2.f, 1.75f));
								}
								else
								{
									animatedComponentA.PlaySlotAnimationAsync ( 'man_npc_sword_1hand_wounded_crawl_killed_ACS', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(RandRangeF(0.5f, 0.25f), RandRangeF(0.5f, 0.25f)) );

									animatedComponentA.FreezePoseFadeIn(RandRangeF(2.f, 1.75f));
								}

								AddTimer('HumanDeathCrawlLoopTimer', 1.15, true);
								AddTimer('HumanDeathCrawlLoopTimerStop', RandRangeF(30, 15), false);
								AddTimer('HumanDeathCrawlLoopTimerSelfDestruct', 31, false);

								RemoveTimer('AliveCheckTimer');

								actor.AddTag('acs_was_dismembered');

								actor.AddTag('ACS_Crawling_Disabled');

								actor.SoundEvent( "grunt_vo_death_stop", 'head' );

								return;
							}
							else
							{
								if (actor.HasTag('ACS_man_finisher_dlc_legs_lp')
								|| actor.HasTag('ACS_man_finisher_dlc_legs_rp')
								)
								{
									AddTimer('HumanDeathCrawlLoopFeetTimerDelay', 0.75, false);
								}
								else if (actor.HasTag('ACS_man_finisher_dlc_arm_rp')
								|| actor.HasTag('ACS_man_finisher_dlc_arm_lp')
								)
								{
									AddTimer('HumanDeathCrawlLoopFeetTimerDelay', 1, false);
								}
								else if (
								actor.HasTag('ACS_man_finisher_dlc_neck_rp')
								)
								{
									AddTimer('HumanDeathCrawlLoopNeckTimerDelay', 0.25, false);
								}
								else if (
								actor.HasTag('ACS_man_finisher_08_lp')
								|| actor.HasTag('ACS_man_finisher_dlc_head_rp')
								)
								{
									AddTimer('HumanDeathCrawlLoopNeckTimerDelay', 0.5, false);
								}
								else if (
								actor.HasTag('ACS_man_finisher_01_rp')
								|| actor.HasTag('ACS_man_finisher_02_lp')
								|| actor.HasTag('ACS_man_finisher_dlc_torso_rp')
								|| actor.HasTag('ACS_man_finisher_dlc_torso_lp')
								|| actor.HasTag('ACS_man_finisher_head')
								)
								{
									AddTimer('HumanDeathCrawlLoopTimerSelfDestruct', 1, false);
								}
								else if (
								actor.HasTag('ACS_man_ger_crawl_finish')
								|| actor.HasTag('ACS_man_trample')
								)
								{
									AddTimer('HumanDeathCrawlLoopFinalFearTimerDelay', 0.5f, false);
								}
								else
								{
									AddTimer('HumanDeathCrawlLoopTimerDelay', 0.85, false);
								}

								AddTimer('HumanDeathCrawlLoopTimerStop', RandRangeF(30, 15), false);
								AddTimer('HumanDeathCrawlLoopTimerSelfDestruct', 31, false);

								RemoveTimer('AliveCheckTimer');

								actor.AddTag('acs_was_dismembered');

								actor.SoundEvent( "grunt_vo_death_stop", 'head' );
							}
						}
					}
				}	
			}
		}
	}

	function HumanDeathCrawlFeetCheck()
	{
		ents.Clear();

		FindGameplayEntitiesCloseToPoint(ents, this.GetWorldPosition(), 0.01, 2, ,FLAG_ExcludePlayer, ,);
		
		for( m = 0; m < ents.Size(); m += 1 )
		{
			if( ents.Size() > 0 )
			{
				actor = (CActor) ents[m];

				animatedComponentA = (CAnimatedComponent)actor.GetComponentByClassName( 'CAnimatedComponent' );

				movementAdjustorNPCCrawl = actor.GetMovingAgentComponent().GetMovementAdjustor();

				soundComponentA = (CSoundEmitterComponent)actor.GetComponentByClassName( 'CSoundEmitterComponent' );

				if (!actor.IsAlive()
				&& actor.IsHuman()
				&& !actor.HasTag('ACS_Crawling_Disable')
				)
				{
					actor.StopEffect('blood');
					actor.PlayEffectSingle('blood');

					actor.StopEffect('death_blood');
					actor.PlayEffectSingle('death_blood');

					actor.StopEffect('blood_spill');
					actor.PlayEffectSingle('blood_spill');  

					if (RandF() < 0.75)
					{
						animatedComponentA.PlaySlotAnimationAsync ( 'man_npc_sword_1hand_wounded_crawl_ACS', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(RandRangeF(1.f, 0.75f), RandRangeF(1.f, 0.75f)) );
					}
					else
					{
						animatedComponentA.PlaySlotAnimationAsync ( 'man_npc_sword_1hand_wounded_crawl_death_ACS', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(RandRangeF(1.f, 0.75f), RandRangeF(1.f, 0.75f)) );
					}
				}
			}
		}
	}

	function HumanDeathCrawlFinalFearCheck()
	{
		ents.Clear();

		FindGameplayEntitiesCloseToPoint(ents, this.GetWorldPosition(), 0.01, 2, ,FLAG_ExcludePlayer, ,);
		
		for( m = 0; m < ents.Size(); m += 1 )
		{
			if( ents.Size() > 0 )
			{
				actor = (CActor) ents[m];

				animatedComponentA = (CAnimatedComponent)actor.GetComponentByClassName( 'CAnimatedComponent' );

				movementAdjustorNPCCrawl = actor.GetMovingAgentComponent().GetMovementAdjustor();

				soundComponentA = (CSoundEmitterComponent)actor.GetComponentByClassName( 'CSoundEmitterComponent' );

				if (!actor.IsAlive()
				&& actor.IsHuman()
				&& !actor.HasTag('ACS_Crawling_Disable')
				)
				{
					actor.StopEffect('blood');
					actor.PlayEffectSingle('blood');

					actor.StopEffect('death_blood');
					actor.PlayEffectSingle('death_blood');

					actor.StopEffect('blood_spill');
					actor.PlayEffectSingle('blood_spill');  

					if (actor.HasTag('ACS_Scared_Standing'))
					{
						animatedComponentA.PlaySlotAnimationAsync ( 'man_npc_sword_1hand_wounded_crawl_ACS', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 0.5f) );
					}
					else if (actor.HasTag('ACS_Scared_On_Ground'))
					{
						animatedComponentA.PlaySlotAnimationAsync ( 'man_npc_sword_1hand_hit_knockdown_death', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.125f, 0.125f) );

						animatedComponentA.FreezePoseFadeIn(0.75f);

						AddTimer('HumanDeathCrawlLoopTimerSelfDestruct', 1, false);
					}
				}
			}
		}
	}

	function HumanDeathCrawlLoop()
	{
		ents.Clear();

		FindGameplayEntitiesCloseToPoint(ents, this.GetWorldPosition(), 0.01, 2, ,FLAG_ExcludePlayer, ,);
		
		for( j = 0; j < ents.Size(); j += 1 )
		{
			if( ents.Size() > 0 )
			{
				actor = (CActor) ents[j];

				animatedComponentA = (CAnimatedComponent)actor.GetComponentByClassName( 'CAnimatedComponent' );

				movementAdjustorNPCCrawl = actor.GetMovingAgentComponent().GetMovementAdjustor();

				soundComponentA = (CSoundEmitterComponent)actor.GetComponentByClassName( 'CSoundEmitterComponent' );

				if (!actor.IsAlive()
				&& actor.IsHuman()
				&& actor != GetWitcherPlayer().GetFinisherVictim()
				&& !actor.HasTag('ACS_Crawling_Disable')
				&& !actor.HasTag('ACS_Scared_On_Ground')
				)
				{
					actor.StopEffect('blood');
					actor.PlayEffectSingle('blood');

					actor.StopEffect('death_blood');
					actor.PlayEffectSingle('death_blood');

					actor.StopEffect('blood_spill');
					actor.PlayEffectSingle('blood_spill');  

					actor.SetAnimationSpeedMultiplier(1);

					actor.SetBehaviorMimicVariable( 'gameplayMimicsMode', (float)(int)GMM_Tpose );

					dismembermentComp = (CDismembermentComponent)(actor.GetComponentByClassName( 'CDismembermentComponent' ));

					if( StrContains( NameToString(dismembermentComp.GetVisibleWoundName()), "head" ) 
					|| StrContains( NameToString(dismembermentComp.GetVisibleWoundName()), "cut_head" ) 
					|| StrContains( NameToString(dismembermentComp.GetVisibleWoundName()), "doppler_trophy_head" ) 
					|| StrContains( NameToString(dismembermentComp.GetVisibleWoundName()), "none" ) 
					|| StrContains( NameToString(dismembermentComp.GetVisibleWoundName()), "torso" ) 
					|| StrContains( NameToString(dismembermentComp.GetVisibleWoundName()), "explode" ) 
					|| dismembermentComp.GetMainCurveName(dismembermentComp.GetVisibleWoundName()) == 'head'
					)
					{
						animatedComponentA.PlaySlotAnimationAsync ( 'man_npc_sword_1hand_wounded_crawl_death_ACS', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(RandRangeF(1.f, 0.75f), RandRangeF(1.f, 0.75f)) );
	
						RemoveTimer('HumanDeathCrawlLoopTimerStop');
						RemoveTimer('HumanDeathCrawlLoopTimerSelfDestruct');
						AddTimer('HumanDeathCrawlLoopTimerStop', 1, false);
						AddTimer('HumanDeathCrawlLoopTimerSelfDestruct', 2, false);

						RemoveTimer('HumanDeathCrawlLoopTimer');
						return;
					}

					ticketNPCCrawl = movementAdjustorNPCCrawl.GetRequest( 'ACS_NPC_Crawl_Rotate');
					movementAdjustorNPCCrawl.CancelByName( 'ACS_NPC_Crawl_Rotate' );
					movementAdjustorNPCCrawl.CancelAll();

					ticketNPCCrawl = movementAdjustorNPCCrawl.CreateNewRequest( 'ACS_NPC_Crawl_Rotate' );
					movementAdjustorNPCCrawl.AdjustmentDuration( ticketNPCCrawl, RandRangeF(4, 2) );
					movementAdjustorNPCCrawl.MaxRotationAdjustmentSpeed( ticketNPCCrawl, 500000 );
					
					//actor.SetBehaviorMimicVariable( 'gameplayMimicsMode', (float)(int)GMM_Death );
					
					if (RandF() < 0.5)
					{
						movementAdjustorNPCCrawl.RotateTo( ticketNPCCrawl, VecHeading( actor.GetHeadingVector() +  actor.GetWorldRight() * 10 ) );

						actor.PlayMimicAnimationAsync('geralt_neutral_gesture_death_longer_face');
					}
					else
					{
						movementAdjustorNPCCrawl.RotateTo( ticketNPCCrawl, VecHeading( actor.GetHeadingVector() +  actor.GetWorldRight() * -10 ) );

						actor.PlayMimicAnimationAsync('geralt_neutral_gesture_death_shorter_face');
					}

					if (RandF() < 0.75)
					{
						animatedComponentA.PlaySlotAnimationAsync ( 'man_npc_sword_1hand_wounded_crawl_ACS', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(RandRangeF(1.f, 0.75f), RandRangeF(1.f, 0.75f)) );
					}
					else
					{
						animatedComponentA.PlaySlotAnimationAsync ( 'man_npc_sword_1hand_wounded_crawl_death_ACS', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(RandRangeF(1.f, 0.75f), RandRangeF(1.f, 0.75f)) );
					}
				}
			}
		}
	}

	function HumanDeathCrawlLoopStop()
	{
		var dismembermentComp 						: CDismembermentComponent;
		var wounds									: array< name >;
		var usedWound								: name;
		var movementAdjustorNPCCrawl				: CMovementAdjustor;
		var ticketNPCCrawl							: SMovementAdjustmentRequestTicket;

		ents.Clear();

		FindGameplayEntitiesCloseToPoint(ents, this.GetWorldPosition(), 0.01, 2, ,FLAG_ExcludePlayer, ,);
		
		for( k = 0; k < ents.Size(); k += 1 )
		{
			if( ents.Size() > 0 )
			{
				actor = (CActor) ents[k];

				animatedComponentA = (CAnimatedComponent)actor.GetComponentByClassName( 'CAnimatedComponent' );

				movementAdjustorNPCCrawl = actor.GetMovingAgentComponent().GetMovementAdjustor();

				if (!actor.IsAlive()
				&& actor.IsHuman()
				&& actor.HasTag('acs_was_dismembered')
				&& !actor.HasTag('ACS_Crawling_Disable')
				)
				{
					actor.StopEffect('blood');
					actor.PlayEffectSingle('blood');

					actor.StopEffect('death_blood');
					actor.PlayEffectSingle('death_blood');

					actor.StopEffect('blood_spill');
					actor.PlayEffectSingle('blood_spill'); 

					movementAdjustorNPCCrawl.CancelAll();

					if (RandF() < 0.5)
					{
						animatedComponentA.PlaySlotAnimationAsync ( 'man_npc_sword_1hand_wounded_crawl_death', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(RandRangeF(0.5f, 0.25f), RandRangeF(0.5f, 0.25f)) );

						animatedComponentA.FreezePoseFadeIn(RandRangeF(2.f, 1.75f));
					}
					else
					{
						animatedComponentA.PlaySlotAnimationAsync ( 'man_npc_sword_1hand_wounded_crawl_killed_ACS', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(RandRangeF(0.5f, 0.25f), RandRangeF(0.5f, 0.25f)) );

						animatedComponentA.FreezePoseFadeIn(RandRangeF(2.f, 1.75f));
					}
						
					actor.AddTag('ACS_Crawling_Disable');

					actor.StopAllEffectsAfter(1);
				}
			}
		}
	}

	function HumanDeathCrawlLoopSelfDestruct()
	{
		var dismembermentComp 						: CDismembermentComponent;
		var wounds									: array< name >;
		var usedWound								: name;
		var movementAdjustorNPCCrawl				: CMovementAdjustor;
		var ticketNPCCrawl							: SMovementAdjustmentRequestTicket;

		ents.Clear();

		FindGameplayEntitiesCloseToPoint(ents, this.GetWorldPosition(), 0.01, 5, ,FLAG_ExcludePlayer, ,);
		
		for( l = 0; l < ents.Size(); l += 1 )
		{
			if( ents.Size() > 0 )
			{
				actor = (CActor) ents[l];

				animatedComponentA = (CAnimatedComponent)actor.GetComponentByClassName( 'CAnimatedComponent' );

				movementAdjustorNPCCrawl = actor.GetMovingAgentComponent().GetMovementAdjustor();

				if (!actor.IsAlive()
				&& actor.IsHuman()
				&& actor.HasTag('acs_was_dismembered')
				&& actor.HasTag('ACS_Crawling_Disable')
				)
				{
					actor.TurnOnRagdoll();

					//actor.SetAnimationSpeedMultiplier(0);

					actor.SetBehaviorMimicVariable( 'gameplayMimicsMode', (float)(int)GMM_Tpose );

					this.DestroyAfter(10);
				}
			}
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class cACS_Dance_Of_Wrath extends CEntity
{
    function ACS_Dance_Of_Wrath_Engage()
	{
		GotoState('ACS_Dance_Of_Wrath_Engage', true, true);
	}
}

state ACS_Dance_Of_Wrath_Engage in cACS_Dance_Of_Wrath
{
	private var actorVictims															: array<CActor>;
	private var j, k, dummy_count 														: int;
	private var movementAdjustor, movementAdjustorDummy									: CMovementAdjustor;
	private var ticket, ticketDummy														: SMovementAdjustmentRequestTicket;
	private var dist																	: float;
	private var attack_anim_names, ciri_attack_anim_names								: array< name >;
	private var victimPos, newVictimPos													: Vector;
	private var last_enemy																: bool;
	private var dummy_temp, specialAttackEffectTemplate									: CEntityTemplate;
	private var dummy_ent, specialAttackSphereEnt										: CEntity;
	private var actorPos, spawnPos														: Vector;
	private var randAngle, randRange													: float;
	private var meshcomp																: CComponent;
	private var animcomp 																: CAnimatedComponent;
	private var h 																		: float;
	private var actorRot																: EulerAngles;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		this.Dance_Of_Wrath_Entry();
	}
	
	entry function Dance_Of_Wrath_Entry()
	{
		actorVictims.Clear();
		
		actorVictims = GetWitcherPlayer().GetNPCsAndPlayersInRange( 33, 3, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors + FLAG_Attitude_Hostile );

		if( actorVictims.Size() > 0 )
		{
			if( actorVictims.Size() > 1 )
			{
				GetACSWatcher().RemoveTimer('ACS_ResetAnimation');

				last_enemy = false;

				GetWitcherPlayer().EnableCharacterCollisions(false);
				GetWitcherPlayer().SetImmortalityMode( AIM_Invulnerable, AIC_Combat );
				GetWitcherPlayer().SetCanPlayHitAnim(false);
				GetWitcherPlayer().AddBuffImmunity_AllNegative('acs_ciri_special', true);

				GetWitcherPlayer().ClearAnimationSpeedMultipliers();

				GetACSWatcher().RemoveTimer('ACS_ResetAnimation');

				GetWitcherPlayer().SetAnimationSpeedMultiplier( 4 );

				GetWitcherPlayer().BlockAction( EIAB_Crossbow, 			'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_CallHorse,			'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_Signs, 			'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_DrawWeapon, 		'acs_dance_of_wrath'); 
				GetWitcherPlayer().BlockAction( EIAB_FastTravel, 		'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_Fists, 			'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_InteractionAction, 'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_UsableItem,		'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_ThrowBomb,			'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_SwordAttack,		'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_Jump,				'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_LightAttacks,		'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_HeavyAttacks,		'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_SpecialAttackLight,'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_SpecialAttackHeavy,'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_Dodge,				'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_Roll,				'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_Parry,				'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_MeditationWaiting,	'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_OpenMeditation,	'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_RadialMenu,		'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_Interactions, 		'acs_dance_of_wrath');

				//theGame.SetTimeScale( 0.25, theGame.GetTimescaleSource( ETS_ThrowingAim ), theGame.GetTimescalePriority( ETS_ThrowingAim ), false, true );

				GetWitcherPlayer().AddTag('ACS_In_Dance_Of_Wrath');

				for( j = 0; j < actorVictims.Size(); j += 1 )
				{
					if ( j == actorVictims.Size() - 1 )
					{
						last_enemy = true;
					}

					if (actorVictims[j] && actorVictims[j].IsAlive())
					{
						//GetWitcherPlayer().StopEffect('disappear_ciri');
						//GetWitcherPlayer().PlayEffectSingle('disappear_ciri');

						theGame.RemoveTimeScale( theGame.GetTimescaleSource(ETS_ThrowingAim) );

						thePlayer.DestroyEffect('dodge_acs_armor');
						thePlayer.PlayEffectSingle('dodge_acs_armor');

						thePlayer.StopEffect('shadowdash_shockwave');

						thePlayer.PlayEffectSingle('shadowdash_shockwave');

						thePlayer.StopEffect('shadowdash_shockwave');

						movementAdjustor = GetWitcherPlayer().GetMovingAgentComponent().GetMovementAdjustor();

						dist = (((CMovingPhysicalAgentComponent)actorVictims[j].GetMovingAgentComponent()).GetCapsuleRadius() 
						+ ((CMovingPhysicalAgentComponent)GetWitcherPlayer().GetMovingAgentComponent()).GetCapsuleRadius()) * 2;

						ticket = movementAdjustor.GetRequest( 'ACS_Dance_Of_Wrath');
						movementAdjustor.CancelByName( 'ACS_Dance_Of_Wrath' );
						movementAdjustor.CancelAll();

						ticket = movementAdjustor.CreateNewRequest( 'ACS_Dance_Of_Wrath' );
						movementAdjustor.AdjustmentDuration( ticket, 0.5 );
						movementAdjustor.MaxRotationAdjustmentSpeed( ticket, 500000 );

						victimPos = actorVictims[j].PredictWorldPosition(0.35f) + VecFromHeading( AngleNormalize180( GetWitcherPlayer().GetHeading() - dist ) ) * 2;

						if( !theGame.GetWorld().NavigationFindSafeSpot( victimPos, 0.3, 0.3 , newVictimPos ) )
						{
							theGame.GetWorld().NavigationFindSafeSpot( victimPos, 0.3, 4 , newVictimPos );
							victimPos = newVictimPos;
						}

						movementAdjustor.RotateTowards(ticket, actorVictims[j]);

						if ( ((CNewNPC)actorVictims[j]).IsShielded( NULL )
						|| actorVictims[j].IsGuarded()
						)
						{
							movementAdjustor.SlideTo( ticket, ACSPlayerFixZAxis(victimPos) );
						}
						else
						{
							movementAdjustor.SlideTowards( ticket, actorVictims[j], dist, dist );
						}

						Sleep( 0.25f );

						theGame.SetTimeScale( 0.25, theGame.GetTimescaleSource( ETS_ThrowingAim ), theGame.GetTimescalePriority( ETS_ThrowingAim ), false, true );

						movementAdjustor.RotateTowards(ticket, actorVictims[j]);

						attack_anim_names.Clear();
						//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_left_2_lp_50ms_mod_ACS');
						//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_right_2_rp_50ms_mod_ACS');
						//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_left_1_lp_50ms_mod_ACS');
						//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_right_1_rp_50ms_mod_ACS');
						//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_left_2_rp_50ms_mod_ACS');
						//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_right_2_lp_50ms_mod_ACS');
						//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_left_1_rp_50ms_mod_ACS');
						//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_right_1_lp_50ms_mod_ACS');
						attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_forward_1_lp_50ms');
						attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_forward_1_rp_50ms');

						GetACSWatcher().PlayerPlayAnimation( attack_anim_names[RandRange(attack_anim_names.Size())] );

						//Dance_Of_Wrath_Deal_Damage(actorVictims[j]);

						GetWitcherPlayer().ClearAnimationSpeedMultipliers();

						GetACSWatcher().RemoveTimer('ACS_ResetAnimation');

						GetWitcherPlayer().SetAnimationSpeedMultiplier( 4 );

						GetWitcherPlayer().EnableCharacterCollisions(false);
						GetWitcherPlayer().SetImmortalityMode( AIM_Invulnerable, AIC_Combat );
						GetWitcherPlayer().SetCanPlayHitAnim(false);
						GetWitcherPlayer().AddBuffImmunity_AllNegative('acs_dance_of_wrath', true);

						Sleep( 0.35f );
					}
				}

				if ( last_enemy == true ) 
				{
					GetWitcherPlayer().DestroyEffect('dodge_acs_armor');

					GetWitcherPlayer().StopEffect('bruxa_dash_trails');

					GetWitcherPlayer().RemoveTag('ACS_In_Dance_Of_Wrath');

					theGame.RemoveTimeScale( theGame.GetTimescaleSource(ETS_ThrowingAim) );

					if( GetWitcherPlayer().IsAlive()) {GetWitcherPlayer().ClearAnimationSpeedMultipliers();}

					GetWitcherPlayer().EnableCharacterCollisions(true);
					GetWitcherPlayer().SetImmortalityMode( AIM_None, AIC_Combat );
					GetWitcherPlayer().SetCanPlayHitAnim(true);
					GetWitcherPlayer().RemoveBuffImmunity_AllNegative('acs_dance_of_wrath');

					GetWitcherPlayer().UnblockAction( EIAB_Crossbow, 			'acs_dance_of_wrath');
					GetWitcherPlayer().UnblockAction( EIAB_CallHorse,			'acs_dance_of_wrath');
					GetWitcherPlayer().UnblockAction( EIAB_Signs, 				'acs_dance_of_wrath');
					GetWitcherPlayer().UnblockAction( EIAB_DrawWeapon, 			'acs_dance_of_wrath'); 
					GetWitcherPlayer().UnblockAction( EIAB_FastTravel, 			'acs_dance_of_wrath');
					GetWitcherPlayer().UnblockAction( EIAB_Fists, 				'acs_dance_of_wrath');
					GetWitcherPlayer().UnblockAction( EIAB_InteractionAction, 	'acs_dance_of_wrath');
					GetWitcherPlayer().UnblockAction( EIAB_UsableItem,			'acs_dance_of_wrath');
					GetWitcherPlayer().UnblockAction( EIAB_ThrowBomb,			'acs_dance_of_wrath');
					GetWitcherPlayer().UnblockAction( EIAB_SwordAttack,			'acs_dance_of_wrath');
					GetWitcherPlayer().UnblockAction( EIAB_Jump,				'acs_dance_of_wrath');
					GetWitcherPlayer().UnblockAction( EIAB_LightAttacks,		'acs_dance_of_wrath');
					GetWitcherPlayer().UnblockAction( EIAB_HeavyAttacks,		'acs_dance_of_wrath');
					GetWitcherPlayer().UnblockAction( EIAB_SpecialAttackLight,	'acs_dance_of_wrath');
					GetWitcherPlayer().UnblockAction( EIAB_SpecialAttackHeavy,	'acs_dance_of_wrath');
					GetWitcherPlayer().UnblockAction( EIAB_Dodge,				'acs_dance_of_wrath');
					GetWitcherPlayer().UnblockAction( EIAB_Roll,				'acs_dance_of_wrath');
					GetWitcherPlayer().UnblockAction( EIAB_Parry,				'acs_dance_of_wrath');
					GetWitcherPlayer().UnblockAction( EIAB_MeditationWaiting,	'acs_dance_of_wrath');
					GetWitcherPlayer().UnblockAction( EIAB_OpenMeditation,		'acs_dance_of_wrath');
					GetWitcherPlayer().UnblockAction( EIAB_RadialMenu,			'acs_dance_of_wrath');
					GetWitcherPlayer().UnblockAction( EIAB_Interactions, 		'acs_dance_of_wrath');

					movementAdjustor = GetWitcherPlayer().GetMovingAgentComponent().GetMovementAdjustor();

					ticket = movementAdjustor.GetRequest( 'ACS_Dance_Of_Wrath');
					movementAdjustor.CancelByName( 'ACS_Dance_Of_Wrath' );
					movementAdjustor.CancelAll();

					ticket = movementAdjustor.CreateNewRequest( 'ACS_Dance_Of_Wrath' );
					movementAdjustor.AdjustmentDuration( ticket, 0.125 );
					movementAdjustor.MaxRotationAdjustmentSpeed( ticket, 500000 );

					if (GetWitcherPlayer().IsInCombat() && GetWitcherPlayer().GetTarget())
					{
						movementAdjustor.RotateTowards( ticket, GetWitcherPlayer().GetTarget() );
					}
					else
					{
						movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );
					}
				}
			}
			else
			{
				GetACSWatcher().RemoveTimer('ACS_ResetAnimation');

				GetWitcherPlayer().EnableCharacterCollisions(false);
				GetWitcherPlayer().SetImmortalityMode( AIM_Invulnerable, AIC_Combat );
				GetWitcherPlayer().SetCanPlayHitAnim(false);
				GetWitcherPlayer().AddBuffImmunity_AllNegative('acs_ciri_special', true);

				GetWitcherPlayer().ClearAnimationSpeedMultipliers();

				GetACSWatcher().RemoveTimer('ACS_ResetAnimation');

				GetWitcherPlayer().SetAnimationSpeedMultiplier( 4 );

				GetWitcherPlayer().BlockAction( EIAB_Crossbow, 			'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_CallHorse,			'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_Signs, 			'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_DrawWeapon, 		'acs_dance_of_wrath'); 
				GetWitcherPlayer().BlockAction( EIAB_FastTravel, 		'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_Fists, 			'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_InteractionAction, 'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_UsableItem,		'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_ThrowBomb,			'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_SwordAttack,		'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_Jump,				'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_LightAttacks,		'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_HeavyAttacks,		'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_SpecialAttackLight,'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_SpecialAttackHeavy,'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_Dodge,				'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_Roll,				'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_Parry,				'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_MeditationWaiting,	'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_OpenMeditation,	'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_RadialMenu,		'acs_dance_of_wrath');
				GetWitcherPlayer().BlockAction( EIAB_Interactions, 		'acs_dance_of_wrath');

				theGame.SetTimeScale( 0.25, theGame.GetTimescaleSource( ETS_ThrowingAim ), theGame.GetTimescalePriority( ETS_ThrowingAim ), false, true );

				GetWitcherPlayer().AddTag('ACS_In_Dance_Of_Wrath');

				thePlayer.DestroyEffect('dodge_acs_armor');
				thePlayer.PlayEffectSingle('dodge_acs_armor');

				thePlayer.StopEffect('shadowdash_shockwave');

				thePlayer.PlayEffectSingle('shadowdash_shockwave');

				thePlayer.StopEffect('shadowdash_shockwave');

				movementAdjustor = GetWitcherPlayer().GetMovingAgentComponent().GetMovementAdjustor();

				dist = (((CMovingPhysicalAgentComponent)actorVictims[j].GetMovingAgentComponent()).GetCapsuleRadius() 
				+ ((CMovingPhysicalAgentComponent)GetWitcherPlayer().GetMovingAgentComponent()).GetCapsuleRadius()) * 2;

				ticket = movementAdjustor.GetRequest( 'ACS_Dance_Of_Wrath');
				movementAdjustor.CancelByName( 'ACS_Dance_Of_Wrath' );
				movementAdjustor.CancelAll();

				ticket = movementAdjustor.CreateNewRequest( 'ACS_Dance_Of_Wrath' );
				movementAdjustor.AdjustmentDuration( ticket, 0.125 );
				movementAdjustor.MaxRotationAdjustmentSpeed( ticket, 500000 );

				victimPos = actorVictims[j].PredictWorldPosition(0.35f) + VecFromHeading( AngleNormalize180( GetWitcherPlayer().GetHeading() - dist ) ) * 2;

				if( !theGame.GetWorld().NavigationFindSafeSpot( victimPos, 0.3, 0.3 , newVictimPos ) )
				{
					theGame.GetWorld().NavigationFindSafeSpot( victimPos, 0.3, 4 , newVictimPos );
					victimPos = newVictimPos;
				}

				movementAdjustor.RotateTowards(ticket, actorVictims[j]);

				if ( ((CNewNPC)actorVictims[j]).IsShielded( NULL )
				|| actorVictims[j].IsGuarded()
				)
				{
					movementAdjustor.SlideTo( ticket, ACSPlayerFixZAxis(victimPos) );
				}
				else
				{
					movementAdjustor.SlideTowards( ticket, actorVictims[j], dist, dist );
				}

				attack_anim_names.Clear();
				//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_left_2_lp_50ms_mod_ACS');
				//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_right_2_rp_50ms_mod_ACS');
				//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_left_1_lp_50ms_mod_ACS');
				//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_right_1_rp_50ms_mod_ACS');
				//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_left_2_rp_50ms_mod_ACS');
				//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_right_2_lp_50ms_mod_ACS');
				//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_left_1_rp_50ms_mod_ACS');
				//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_right_1_lp_50ms_mod_ACS');
				attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_forward_1_lp_50ms');
				attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_forward_1_rp_50ms');

				GetACSWatcher().PlayerPlayAnimation( attack_anim_names[RandRange(attack_anim_names.Size())] );

				//Dance_Of_Wrath_Deal_Damage(actorVictims[j]);

				GetWitcherPlayer().ClearAnimationSpeedMultipliers();

				GetACSWatcher().RemoveTimer('ACS_ResetAnimation');

				GetWitcherPlayer().SetAnimationSpeedMultiplier( 4 );

				GetWitcherPlayer().EnableCharacterCollisions(false);
				GetWitcherPlayer().SetImmortalityMode( AIM_Invulnerable, AIC_Combat );
				GetWitcherPlayer().SetCanPlayHitAnim(false);
				GetWitcherPlayer().AddBuffImmunity_AllNegative('acs_dance_of_wrath', true);

				Sleep( 0.35 );

				ticket = movementAdjustor.GetRequest( 'ACS_Dance_Of_Wrath');
				movementAdjustor.CancelByName( 'ACS_Dance_Of_Wrath' );
				movementAdjustor.CancelAll();

				ticket = movementAdjustor.CreateNewRequest( 'ACS_Dance_Of_Wrath' );
				movementAdjustor.AdjustmentDuration( ticket, 0.125 );
				movementAdjustor.MaxRotationAdjustmentSpeed( ticket, 500000 );

				victimPos = actorVictims[j].PredictWorldPosition(0.35f) + VecFromHeading( AngleNormalize180( GetWitcherPlayer().GetHeading() - dist ) ) * 2;

				if( !theGame.GetWorld().NavigationFindSafeSpot( victimPos, 0.3, 0.3 , newVictimPos ) )
				{
					theGame.GetWorld().NavigationFindSafeSpot( victimPos, 0.3, 4 , newVictimPos );
					victimPos = newVictimPos;
				}

				movementAdjustor.RotateTowards(ticket, actorVictims[j]);

				if ( ((CNewNPC)actorVictims[j]).IsShielded( NULL )
				|| actorVictims[j].IsGuarded()
				)
				{
					movementAdjustor.SlideTo( ticket, ACSPlayerFixZAxis(victimPos) );
				}
				else
				{
					movementAdjustor.SlideTowards( ticket, actorVictims[j], dist, dist );
				}

				attack_anim_names.Clear();
				//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_left_2_lp_50ms_mod_ACS');
				//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_right_2_rp_50ms_mod_ACS');
				//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_left_1_lp_50ms_mod_ACS');
				//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_right_1_rp_50ms_mod_ACS');
				//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_left_2_rp_50ms_mod_ACS');
				//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_right_2_lp_50ms_mod_ACS');
				//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_left_1_rp_50ms_mod_ACS');
				//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_right_1_lp_50ms_mod_ACS');
				attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_forward_1_lp_50ms');
				attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_forward_1_rp_50ms');

				GetACSWatcher().PlayerPlayAnimation( attack_anim_names[RandRange(attack_anim_names.Size())] );

				//Dance_Of_Wrath_Deal_Damage(actorVictims[j]);

				GetWitcherPlayer().ClearAnimationSpeedMultipliers();

				GetACSWatcher().RemoveTimer('ACS_ResetAnimation');

				GetWitcherPlayer().SetAnimationSpeedMultiplier( 4 );

				GetWitcherPlayer().EnableCharacterCollisions(false);
				GetWitcherPlayer().SetImmortalityMode( AIM_Invulnerable, AIC_Combat );
				GetWitcherPlayer().SetCanPlayHitAnim(false);
				GetWitcherPlayer().AddBuffImmunity_AllNegative('acs_dance_of_wrath', true);

				Sleep( 0.35 );

				ticket = movementAdjustor.GetRequest( 'ACS_Dance_Of_Wrath');
				movementAdjustor.CancelByName( 'ACS_Dance_Of_Wrath' );
				movementAdjustor.CancelAll();

				ticket = movementAdjustor.CreateNewRequest( 'ACS_Dance_Of_Wrath' );
				movementAdjustor.AdjustmentDuration( ticket, 0.125 );
				movementAdjustor.MaxRotationAdjustmentSpeed( ticket, 500000 );

				victimPos = actorVictims[j].PredictWorldPosition(0.35f) + VecFromHeading( AngleNormalize180( GetWitcherPlayer().GetHeading() - dist ) ) * 2;

				if( !theGame.GetWorld().NavigationFindSafeSpot( victimPos, 0.3, 0.3 , newVictimPos ) )
				{
					theGame.GetWorld().NavigationFindSafeSpot( victimPos, 0.3, 4 , newVictimPos );
					victimPos = newVictimPos;
				}

				movementAdjustor.RotateTowards(ticket, actorVictims[j]);

				if ( ((CNewNPC)actorVictims[j]).IsShielded( NULL )
				|| actorVictims[j].IsGuarded()
				)
				{
					movementAdjustor.SlideTo( ticket, ACSPlayerFixZAxis(victimPos) );
				}
				else
				{
					movementAdjustor.SlideTowards( ticket, actorVictims[j], dist, dist );
				}

				attack_anim_names.Clear();
				//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_left_2_lp_50ms_mod_ACS');
				//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_right_2_rp_50ms_mod_ACS');
				//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_left_1_lp_50ms_mod_ACS');
				//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_right_1_rp_50ms_mod_ACS');
				//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_left_2_rp_50ms_mod_ACS');
				//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_right_2_lp_50ms_mod_ACS');
				//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_left_1_rp_50ms_mod_ACS');
				//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_right_1_lp_50ms_mod_ACS');
				attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_forward_1_lp_50ms');
				attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_forward_1_rp_50ms');

				GetACSWatcher().PlayerPlayAnimation( attack_anim_names[RandRange(attack_anim_names.Size())] );

				//Dance_Of_Wrath_Deal_Damage(actorVictims[j]);

				GetWitcherPlayer().ClearAnimationSpeedMultipliers();

				GetACSWatcher().RemoveTimer('ACS_ResetAnimation');

				GetWitcherPlayer().SetAnimationSpeedMultiplier( 4 );

				GetWitcherPlayer().EnableCharacterCollisions(false);
				GetWitcherPlayer().SetImmortalityMode( AIM_Invulnerable, AIC_Combat );
				GetWitcherPlayer().SetCanPlayHitAnim(false);
				GetWitcherPlayer().AddBuffImmunity_AllNegative('acs_dance_of_wrath', true);

				Sleep( 0.35 );

				GetWitcherPlayer().DestroyEffect('dodge_acs_armor');

				GetWitcherPlayer().StopEffect('bruxa_dash_trails');

				GetWitcherPlayer().RemoveTag('ACS_In_Dance_Of_Wrath');

				theGame.RemoveTimeScale( theGame.GetTimescaleSource(ETS_ThrowingAim) );

				if( GetWitcherPlayer().IsAlive()) {GetWitcherPlayer().ClearAnimationSpeedMultipliers();}

				GetWitcherPlayer().EnableCharacterCollisions(true);
				GetWitcherPlayer().SetImmortalityMode( AIM_None, AIC_Combat );
				GetWitcherPlayer().SetCanPlayHitAnim(true);
				GetWitcherPlayer().RemoveBuffImmunity_AllNegative('acs_dance_of_wrath');

				GetWitcherPlayer().UnblockAction( EIAB_Crossbow, 			'acs_dance_of_wrath');
				GetWitcherPlayer().UnblockAction( EIAB_CallHorse,			'acs_dance_of_wrath');
				GetWitcherPlayer().UnblockAction( EIAB_Signs, 				'acs_dance_of_wrath');
				GetWitcherPlayer().UnblockAction( EIAB_DrawWeapon, 			'acs_dance_of_wrath'); 
				GetWitcherPlayer().UnblockAction( EIAB_FastTravel, 			'acs_dance_of_wrath');
				GetWitcherPlayer().UnblockAction( EIAB_Fists, 				'acs_dance_of_wrath');
				GetWitcherPlayer().UnblockAction( EIAB_InteractionAction, 	'acs_dance_of_wrath');
				GetWitcherPlayer().UnblockAction( EIAB_UsableItem,			'acs_dance_of_wrath');
				GetWitcherPlayer().UnblockAction( EIAB_ThrowBomb,			'acs_dance_of_wrath');
				GetWitcherPlayer().UnblockAction( EIAB_SwordAttack,			'acs_dance_of_wrath');
				GetWitcherPlayer().UnblockAction( EIAB_Jump,				'acs_dance_of_wrath');
				GetWitcherPlayer().UnblockAction( EIAB_LightAttacks,		'acs_dance_of_wrath');
				GetWitcherPlayer().UnblockAction( EIAB_HeavyAttacks,		'acs_dance_of_wrath');
				GetWitcherPlayer().UnblockAction( EIAB_SpecialAttackLight,	'acs_dance_of_wrath');
				GetWitcherPlayer().UnblockAction( EIAB_SpecialAttackHeavy,	'acs_dance_of_wrath');
				GetWitcherPlayer().UnblockAction( EIAB_Dodge,				'acs_dance_of_wrath');
				GetWitcherPlayer().UnblockAction( EIAB_Roll,				'acs_dance_of_wrath');
				GetWitcherPlayer().UnblockAction( EIAB_Parry,				'acs_dance_of_wrath');
				GetWitcherPlayer().UnblockAction( EIAB_MeditationWaiting,	'acs_dance_of_wrath');
				GetWitcherPlayer().UnblockAction( EIAB_OpenMeditation,		'acs_dance_of_wrath');
				GetWitcherPlayer().UnblockAction( EIAB_RadialMenu,			'acs_dance_of_wrath');
				GetWitcherPlayer().UnblockAction( EIAB_Interactions, 		'acs_dance_of_wrath');

				movementAdjustor = GetWitcherPlayer().GetMovingAgentComponent().GetMovementAdjustor();

				ticket = movementAdjustor.GetRequest( 'ACS_Dance_Of_Wrath');
				movementAdjustor.CancelByName( 'ACS_Dance_Of_Wrath' );
				movementAdjustor.CancelAll();

				ticket = movementAdjustor.CreateNewRequest( 'ACS_Dance_Of_Wrath' );
				movementAdjustor.AdjustmentDuration( ticket, 0.125 );
				movementAdjustor.MaxRotationAdjustmentSpeed( ticket, 500000 );

				if (GetWitcherPlayer().IsInCombat() && GetWitcherPlayer().GetTarget())
				{
					movementAdjustor.RotateTowards( ticket, GetWitcherPlayer().GetTarget() );
				}
				else
				{
					movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );
				}
			}
		}
		else
		{
			attack_anim_names.Clear();

			//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_left_2_lp_50ms_mod_ACS');
			//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_right_2_rp_50ms_mod_ACS');
			//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_left_1_lp_50ms_mod_ACS');
			//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_right_1_rp_50ms_mod_ACS');
			//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_left_2_rp_50ms_mod_ACS');
			//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_right_2_lp_50ms_mod_ACS');
			//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_left_1_rp_50ms_mod_ACS');
			//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_right_1_lp_50ms_mod_ACS');
			attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_forward_1_lp_50ms');
			attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_forward_1_rp_50ms');

			GetACSWatcher().PlayerPlayAnimation( attack_anim_names[RandRange(attack_anim_names.Size())] );
		}
	}

	latent function Dance_Of_Wrath_Deal_Damage(actortarget : CActor)
	{
		var actors	    			: array<CActor>;
		var i 						: int;
		var dmg						: W3DamageAction;
		var curTargetVitality, maxTargetVitality, curTargetEssence, maxTargetEssence, finisherDist, vampireDmgValSteel, vampireDmgValSilver										: float;
		var item_steel, item_silver																																				: SItemUniqueId;
		var ent_1                      																																			: CEntity;
		var rot_1         																																						: EulerAngles;
		var pos_1																																								: Vector;

		pos_1 = actortarget.GetWorldPosition();

		pos_1.Z += 1.5;

		rot_1 = actortarget.GetWorldRotation();

		rot_1.Yaw = RandRangeF(360,1);

		rot_1.Pitch = RandRangeF(45,-45);

		rot_1.Roll = RandRange( 360, 0 );

		ent_1 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\fx\acs_sword_slashes.w2ent"

		, true ), pos_1, rot_1 );

		ent_1.PlayEffectSingle('sword_slash_red_large');

		ent_1.DestroyAfter(2.5);
		
		actortarget.IsAttacked();

		actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

		dmg = new W3DamageAction in theGame.damageMgr;
		
		dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
		
		dmg.SetProcessBuffsIfNoDamage(true);
		
		dmg.SetIgnoreImmortalityMode(false);

		dmg.SetHitAnimationPlayType(EAHA_ForceYes);

		if (actortarget.UsesVitality()) 
		{
			vampireDmgValSteel = thePlayer.GetTotalWeaponDamage(item_steel, theGame.params.DAMAGE_NAME_SLASHING, GetInvalidUniqueId()) 
			+ thePlayer.GetTotalWeaponDamage(item_steel, theGame.params.DAMAGE_NAME_PIERCING, GetInvalidUniqueId())
			+ thePlayer.GetTotalWeaponDamage(item_steel, theGame.params.DAMAGE_NAME_BLUDGEONING, GetInvalidUniqueId());

			dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, vampireDmgValSteel );

			dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, (actortarget.GetMaxHealth() * 0.075 ));
		} 
		else if (actortarget.UsesEssence()) 
		{
			vampireDmgValSilver = thePlayer.GetTotalWeaponDamage(item_silver, theGame.params.DAMAGE_NAME_SILVER, GetInvalidUniqueId()); 

			dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, vampireDmgValSilver );

			dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, (actortarget.GetMaxHealth() * 0.075) );
		}

		if( ((CNewNPC)actortarget).IsShielded( NULL ) )
		{
			((CNewNPC)actortarget).ProcessShieldDestruction();
		}

		dmg.SetHitReactionType( EHRT_Heavy );

		dmg.SetForceExplosionDismemberment();

		//dmg.AddEffectInfo( EET_Stagger, 0.5 );

		actortarget.SoundEvent("cmb_play_hit_heavy");
		GetWitcherPlayer().SoundEvent("monster_dettlaff_monster_vein_hit_blood");

		actortarget.PlayEffectSingle('blood');
		actortarget.StopEffect('blood');

		actortarget.PlayEffectSingle('death_blood');
		actortarget.StopEffect('death_blood');

		actortarget.PlayEffectSingle('heavy_hit');
		actortarget.StopEffect('heavy_hit');

		actortarget.PlayEffectSingle('light_hit');
		actortarget.StopEffect('light_hit');

		actortarget.PlayEffectSingle('blood_spill');
		actortarget.StopEffect('blood_spill');

		GetACSWatcher().Player_Blood_Covered_Effect(actortarget);

		theGame.damageMgr.ProcessAction( dmg );
			
		delete dmg;	
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class cACS_Ghost_Stance_Switch extends CEntity
{
    function ACS_Ghost_Stance_Switch_Activate_Engage()
	{
		GotoState('ACS_Ghost_Stance_Switch_Activate_Engage', true, true);
	}

	function ACS_Ghost_Stance_Switch_Deactivate_Engage()
	{
		GotoState('ACS_Ghost_Stance_Switch_Deactivate_Engage', true, true);
	}
}

state ACS_Ghost_Stance_Switch_Activate_Engage in cACS_Ghost_Stance_Switch
{

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		this.Ghost_Stance_Switch_Activate_Entry();
	}
	
	entry function Ghost_Stance_Switch_Activate_Entry()
	{
		var stupidArray 	: array< name >;

		stupidArray.Clear();
		
		if (ACS_Is_DLC_Installed('scaaraiov_dlc') )
		{
			if (ACS_Settings_Main_Bool('EHmodMiscSettings','EHmodPassiveTauntEnabled', false))
			{
				stupidArray.Clear(); stupidArray.PushBack( 'axii_secondary_beh_SCAAR_passive_taunt' );
			}
			else
			{
				stupidArray.Clear(); stupidArray.PushBack( 'axii_secondary_beh_SCAAR' );
			}
		}
		else if (ACS_Is_DLC_Installed('e3arp_dlc') )
		{
			if (ACS_Settings_Main_Bool('EHmodMiscSettings','EHmodPassiveTauntEnabled', false))
			{
				stupidArray.Clear(); stupidArray.PushBack( 'axii_secondary_beh_E3ARP_passive_taunt' );
			}
			else
			{
				stupidArray.Clear(); stupidArray.PushBack( 'axii_secondary_beh_E3ARP' );
			}
		}
		else
		{
			if (ACS_Settings_Main_Bool('EHmodMiscSettings','EHmodPassiveTauntEnabled', false))
			{
				stupidArray.Clear(); stupidArray.PushBack( 'axii_secondary_beh_passive_taunt' );
			}
			else
			{
				stupidArray.Clear(); stupidArray.PushBack( 'axii_secondary_beh' );
			}
		}

		thePlayer.ActivateBehaviors(stupidArray);

		if (thePlayer.IsInCombat() || thePlayer.IsThreatened())
		{
			thePlayer.GotoState('Combat');
		}
	}
}

state ACS_Ghost_Stance_Switch_Deactivate_Engage in cACS_Ghost_Stance_Switch
{
	
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		this.Ghost_Stance_Switch_Deactivate_Entry();
	}
	
	entry function Ghost_Stance_Switch_Deactivate_Entry()
	{
		var stupidArray 	: array< name >;

		stupidArray.Clear();
		
		if (ACS_Is_DLC_Installed('scaaraiov_dlc') )
		{
			if (ACS_Settings_Main_Bool('EHmodMiscSettings','EHmodPassiveTauntEnabled', false))
			{
				stupidArray.Clear(); stupidArray.PushBack( 'igni_primary_beh_SCAAR_passive_taunt' );
			}
			else
			{
				stupidArray.Clear(); stupidArray.PushBack( 'igni_primary_beh_SCAAR' );
			}
		}
		else if (ACS_Is_DLC_Installed('e3arp_dlc') )
		{
			if (ACS_Settings_Main_Bool('EHmodMiscSettings','EHmodPassiveTauntEnabled', false))
			{
				stupidArray.Clear(); stupidArray.PushBack( 'igni_primary_beh_E3ARP_passive_taunt' );
			}
			else
			{
				stupidArray.Clear(); stupidArray.PushBack( 'igni_primary_beh_E3ARP' );
			}
		}
		else
		{
			if (ACS_Settings_Main_Bool('EHmodMiscSettings','EHmodPassiveTauntEnabled', false))
			{
				stupidArray.Clear(); stupidArray.PushBack( 'igni_primary_beh_passive_taunt' );
			}
			else
			{
				stupidArray.Clear(); stupidArray.PushBack( 'igni_primary_beh' );
			}
		}

		Sleep(0.75f / theGame.GetTimeScale( false ));

		if( !theGame.IsDialogOrCutscenePlaying() 
		&& !thePlayer.IsInNonGameplayCutscene() 
		&& !thePlayer.IsInGameplayScene() 
		&& !theGame.IsCurrentlyPlayingNonGameplayScene()
		&& (thePlayer.IsThreatened() || thePlayer.IsInCombat())
		&& thePlayer.IsAnyWeaponHeld() 
		&& !thePlayer.IsWeaponHeld('fist') 
		&& !thePlayer.HasTag('acs_vampire_claws_equipped')
		&& !thePlayer.HasTag('acs_aard_sword_equipped') 
		&& !thePlayer.HasTag('acs_aard_secondary_sword_equipped') 
		&& !thePlayer.HasTag('acs_quen_sword_equipped') 
		&& !thePlayer.HasTag('acs_quen_secondary_sword_equipped') 
		&& !thePlayer.HasTag('acs_yrden_sword_equipped') 
		&& !thePlayer.HasTag('acs_yrden_secondary_sword_equipped') 
		&& !thePlayer.HasTag('acs_axii_sword_equipped') 
		&& !thePlayer.HasTag('acs_axii_secondary_sword_equipped') 
		&& !thePlayer.HasTag('acs_sorc_fists_equipped')
		&& !thePlayer.IsPerformingFinisher()
		&& !thePlayer.HasTag('ACS_IsPerformingFinisher')
		&& !thePlayer.IsUsingHorse() 
		&& !thePlayer.IsUsingVehicle()
		&& !thePlayer.IsSwimming()
		&& !thePlayer.IsDiving()
		) 
		{
			thePlayer.ActivateBehaviors(stupidArray);

			if (thePlayer.IsInCombat() || thePlayer.IsThreatened())
			{
				thePlayer.GotoState('Combat');
			}
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class cACS_Dual_Wield_Switch extends CEntity
{
    function ACS_Dual_Wield_Switch_Activate_Engage()
	{
		GotoState('ACS_Dual_Wield_Switch_Activate_Engage', true, true);
	}

	function ACS_Dual_Wield_Switch_Deactivate_Engage()
	{
		GotoState('ACS_Dual_Wield_Switch_Deactivate_Engage', true, true);
	}
}

state ACS_Dual_Wield_Switch_Activate_Engage in cACS_Dual_Wield_Switch
{
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		this.Dual_Wield_Switch_Activate_Entry();
	}
	
	entry function Dual_Wield_Switch_Activate_Entry()
	{
		var stupidArray 	: array< name >;

		stupidArray.Clear();
		
		if (ACS_Is_DLC_Installed('scaaraiov_dlc') )
		{
			stupidArray.Clear(); stupidArray.PushBack( 'acs_dual_wield_beh_SCAAR' );
		}
		else if (ACS_Is_DLC_Installed('e3arp_dlc') )
		{
			stupidArray.Clear(); stupidArray.PushBack( 'acs_dual_wield_beh_E3ARP' );
		}
		else
		{
			stupidArray.Clear(); stupidArray.PushBack( 'acs_dual_wield_beh' );
		}

		thePlayer.ActivateBehaviors(stupidArray);

		if (thePlayer.IsInCombat() || thePlayer.IsThreatened())
		{
			thePlayer.GotoState('Combat');
		}

		if(thePlayer.IsAnyWeaponHeld())
		{
			if (thePlayer.IsWeaponHeld('steelsword'))
			{
				SteelSwordSpawn();
			}
			else if (thePlayer.IsWeaponHeld('silversword'))
			{
				SilverSwordSpawn();
			}
		}
	}

	latent function SteelSwordSpawn()
	{
		var steelid							: SItemUniqueId; 
		var swordsteel						: CEntity; 
		var steelcopy						: CEntity;
		
		if ( !theGame.GetEntityByTag('ACS_Dual_Wield_L_Sword_Steel') )
		{
			thePlayer.GetInventory().GetItemEquippedOnSlot(EES_SteelSword, steelid);

			swordsteel = thePlayer.GetInventory().GetItemEntityUnsafe( steelid );

			steelcopy = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResource(

			swordsteel.GetReadableName()

			,true ), thePlayer.GetWorldPosition() -100, thePlayer.GetWorldRotation());

			steelcopy.AddTag('ACS_Dual_Wield_L_Sword_Steel');

			steelcopy.CreateAttachment(thePlayer, 'l_weapon', Vector(0.0125,-0.05,0));
		}
	}

	latent function SilverSwordSpawn()
	{
		var silverid						: SItemUniqueId; 
		var swordsilver						: CEntity; 
		var silvercopy						: CEntity;
		
		if ( !theGame.GetEntityByTag('ACS_Dual_Wield_L_Sword_Silver') )
		{
			thePlayer.GetInventory().GetItemEquippedOnSlot(EES_SilverSword, silverid);

			swordsilver = thePlayer.GetInventory().GetItemEntityUnsafe( silverid );

			silvercopy = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResource(

			swordsilver.GetReadableName()

			,true ), thePlayer.GetWorldPosition()-100, thePlayer.GetWorldRotation());

			silvercopy.AddTag('ACS_Dual_Wield_L_Sword_Silver');

			silvercopy.CreateAttachment(thePlayer, 'l_weapon', Vector(0.0125,-0.05,0));
		}
	}
}

state ACS_Dual_Wield_Switch_Deactivate_Engage in cACS_Dual_Wield_Switch
{
	
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		this.Dual_Wield_Switch_Deactivate_Entry();
	}
	
	entry function Dual_Wield_Switch_Deactivate_Entry()
	{
		var stupidArray 	: array< name >;

		ACSGetCEntity('ACS_Dual_Wield_L_Sword_Steel').Destroy();

		ACSGetCEntity('ACS_Dual_Wield_L_Sword_Silver').Destroy();

		stupidArray.Clear();
		
		if (ACS_Is_DLC_Installed('scaaraiov_dlc') )
		{
			if (ACS_Settings_Main_Bool('EHmodMiscSettings','EHmodPassiveTauntEnabled', false))
			{
				stupidArray.Clear(); stupidArray.PushBack( 'igni_primary_beh_SCAAR_passive_taunt' );
			}
			else
			{
				stupidArray.Clear(); stupidArray.PushBack( 'igni_primary_beh_SCAAR' );
			}
		}
		else if (ACS_Is_DLC_Installed('e3arp_dlc') )
		{
			if (ACS_Settings_Main_Bool('EHmodMiscSettings','EHmodPassiveTauntEnabled', false))
			{
				stupidArray.Clear(); stupidArray.PushBack( 'igni_primary_beh_E3ARP_passive_taunt' );
			}
			else
			{
				stupidArray.Clear(); stupidArray.PushBack( 'igni_primary_beh_E3ARP' );
			}
		}
		else
		{
			if (ACS_Settings_Main_Bool('EHmodMiscSettings','EHmodPassiveTauntEnabled', false))
			{
				stupidArray.Clear(); stupidArray.PushBack( 'igni_primary_beh_passive_taunt' );
			}
			else
			{
				stupidArray.Clear(); stupidArray.PushBack( 'igni_primary_beh' );
			}
		}

		Sleep(0.75f / theGame.GetTimeScale( false ));

		if( !theGame.IsDialogOrCutscenePlaying() 
		&& !thePlayer.IsInNonGameplayCutscene() 
		&& !thePlayer.IsInGameplayScene() 
		&& !theGame.IsCurrentlyPlayingNonGameplayScene()
		&& (thePlayer.IsThreatened() || thePlayer.IsInCombat())
		&& thePlayer.IsAnyWeaponHeld() 
		&& !thePlayer.IsWeaponHeld('fist') 
		&& !thePlayer.HasTag('acs_vampire_claws_equipped')
		&& !thePlayer.HasTag('acs_aard_sword_equipped') 
		&& !thePlayer.HasTag('acs_aard_secondary_sword_equipped') 
		&& !thePlayer.HasTag('acs_quen_sword_equipped') 
		&& !thePlayer.HasTag('acs_quen_secondary_sword_equipped') 
		&& !thePlayer.HasTag('acs_yrden_sword_equipped') 
		&& !thePlayer.HasTag('acs_yrden_secondary_sword_equipped') 
		&& !thePlayer.HasTag('acs_axii_sword_equipped') 
		&& !thePlayer.HasTag('acs_axii_secondary_sword_equipped') 
		&& !thePlayer.HasTag('acs_sorc_fists_equipped')
		&& !thePlayer.IsPerformingFinisher()
		&& !thePlayer.HasTag('ACS_IsPerformingFinisher')
		&& !thePlayer.IsUsingHorse() 
		&& !thePlayer.IsUsingVehicle()
		&& !thePlayer.IsSwimming()
		&& !thePlayer.IsDiving()
		) 
		{
			thePlayer.ActivateBehaviors(stupidArray);

			if (thePlayer.IsInCombat() || thePlayer.IsThreatened())
			{
				thePlayer.GotoState('Combat');
			}
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class cACS_Geralt_Phantom_Attack extends CEntity
{
    function ACS_Geralt_Phantom_Finisher_Engage()
	{
		GotoState('ACS_Geralt_Phantom_Finisher_Engage', true, true);
	}

	function ACS_Geralt_Phantom_Finisher_Marked_Engage()
	{
		GotoState('ACS_Geralt_Phantom_Finisher_Marked_Engage', true, true);
	}
}

state ACS_Geralt_Phantom_Finisher_Engage in cACS_Geralt_Phantom_Attack
{
	private var actorVictims															: array<CActor>;
	private var j, k, dummy_count 														: int;
	private var movementAdjustor, movementAdjustorDummy									: CMovementAdjustor;
	private var ticket, ticketDummy														: SMovementAdjustmentRequestTicket;
	private var dist																	: float;
	private var attack_anim_names, ciri_attack_anim_names								: array< name >;
	private var victimPos, newVictimPos													: Vector;
	private var last_enemy																: bool;
	private var dummy_temp, specialAttackEffectTemplate									: CEntityTemplate;
	private var dummy_ent, specialAttackSphereEnt										: CEntity;
	private var actorPos, spawnPos														: Vector;
	private var randAngle, randRange													: float;
	private var meshcomp																: CComponent;
	private var animcomp 																: CAnimatedComponent;
	private var h 																		: float;
	private var actorRot																: EulerAngles;
	private var specialAttackSphere 													: CMeshComponent;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		this.Geralt_Phantom_Finisher_Entry();
	}
	
	entry function Geralt_Phantom_Finisher_Entry()
	{
		actorVictims.Clear();
		
		actorVictims = GetWitcherPlayer().GetNPCsAndPlayersInRange( 50, 50, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors + FLAG_Attitude_Hostile );

		if( actorVictims.Size() > 0 )
		{
			for( j = 0; j < actorVictims.Size(); j += 1 )
			{
				if (actorVictims[j] && actorVictims[j].IsAlive())
				{
					ACS_Geralt_Phantom_Assassin_Destroy();

					GetACSWatcher().ACS_PhantomPerformFinisher(actorVictims[j]);

					Sleep( 1.5 );
				}
			}
		}
	}

	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state ACS_Geralt_Phantom_Finisher_Marked_Engage in cACS_Geralt_Phantom_Attack
{
	private var actorVictims															: array<CActor>;
	private var j, k, dummy_count 														: int;
	private var movementAdjustor, movementAdjustorDummy									: CMovementAdjustor;
	private var ticket, ticketDummy														: SMovementAdjustmentRequestTicket;
	private var dist																	: float;
	private var attack_anim_names, ciri_attack_anim_names								: array< name >;
	private var victimPos, newVictimPos													: Vector;
	private var last_enemy																: bool;
	private var dummy_temp, specialAttackEffectTemplate									: CEntityTemplate;
	private var dummy_ent, specialAttackSphereEnt										: CEntity;
	private var actorPos, spawnPos														: Vector;
	private var randAngle, randRange													: float;
	private var meshcomp																: CComponent;
	private var animcomp 																: CAnimatedComponent;
	private var h 																		: float;
	private var actorRot																: EulerAngles;
	private var specialAttackSphere 													: CMeshComponent;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		this.Geralt_Phantom_Finisher_Marked_Entry();
	}
	
	entry function Geralt_Phantom_Finisher_Marked_Entry()
	{
		actorVictims.Clear();
		
		actorVictims = GetWitcherPlayer().GetNPCsAndPlayersInRange( 50, 50, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors + FLAG_Attitude_Hostile );

		if( actorVictims.Size() > 0 )
		{
			for( j = 0; j < actorVictims.Size(); j += 1 )
			{
				if (actorVictims[j] 
				&& actorVictims[j].IsAlive()
				&& actorVictims[j].HasTag('ACS_Wraith_Finisher_Marked')
				)
				{
					ACS_Geralt_Phantom_Assassin_Destroy();

					GetACSWatcher().ACS_PhantomPerformFinisher(actorVictims[j]);

					Sleep( 1.5 );
				}
			}
		}
	}

	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class cACS_Ciri_Special_Attack extends CEntity
{
    function ACS_Ciri_Special_Attack_Engage()
	{
		GotoState('ACS_Ciri_Special_Attack_Engage', true, true);
	}

	function ACS_Ciri_Spectre_Attack_Engage()
	{
		GotoState('ACS_Ciri_Spectre_Attack_Engage', true, true);
	}

	function ACS_Ciri_Spectre_Dodge_Front_Engage()
	{
		GotoState('ACS_Ciri_Spectre_Dodge_Front_Engage', true, true);
	}

	function ACS_Ciri_Spectre_Dodge_Back_Engage()
	{
		GotoState('ACS_Ciri_Spectre_Dodge_Back_Engage', true, true);
	}

	function ACS_Ciri_Spectre_Dodge_Left_Engage()
	{
		GotoState('ACS_Ciri_Spectre_Dodge_Left_Engage', true, true);
	}

	function ACS_Ciri_Spectre_Dodge_Right_Engage()
	{
		GotoState('ACS_Ciri_Spectre_Dodge_Right_Engage', true, true);
	}
}

state ACS_Ciri_Special_Attack_Engage in cACS_Ciri_Special_Attack
{
	private var actorVictims															: array<CActor>;
	private var j, k, dummy_count 														: int;
	private var movementAdjustor, movementAdjustorDummy									: CMovementAdjustor;
	private var ticket, ticketDummy														: SMovementAdjustmentRequestTicket;
	private var dist																	: float;
	private var attack_anim_names, ciri_attack_anim_names								: array< name >;
	private var victimPos, newVictimPos													: Vector;
	private var last_enemy																: bool;
	private var dummy_temp, specialAttackEffectTemplate									: CEntityTemplate;
	private var dummy_ent, specialAttackSphereEnt										: CEntity;
	private var actorPos, spawnPos														: Vector;
	private var randAngle, randRange													: float;
	private var meshcomp																: CComponent;
	private var animcomp 																: CAnimatedComponent;
	private var h 																		: float;
	private var actorRot																: EulerAngles;
	private var specialAttackSphere 													: CMeshComponent;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		this.Ciri_Special_Attack_Entry();
	}
	
	entry function Ciri_Special_Attack_Entry()
	{
		ACSGetCEntityDestroyAll('ACS_Ciri_Special_Attack_Sphere');

		specialAttackEffectTemplate = (CEntityTemplate)LoadResourceAsync('special_attack_ciri');

		specialAttackSphereEnt = theGame.CreateEntity( specialAttackEffectTemplate, GetWitcherPlayer().GetWorldPosition(), GetWitcherPlayer().GetWorldRotation() );

		specialAttackSphereEnt.AddTag('ACS_Ciri_Special_Attack_Sphere');

		GetACSWatcher().ResetCiriSpecialSphereSize();

		GetACSWatcher().RemoveTimer('GrowCiriSpecialSphereTimer');

		GetACSWatcher().AddTimer('GrowCiriSpecialSphereTimer', 0.001, true);

		actorVictims.Clear();
		
		actorVictims = GetWitcherPlayer().GetNPCsAndPlayersInRange( 10, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors + FLAG_Attitude_Hostile );

		if( actorVictims.Size() > 0 )
		{
			GetACSWatcher().RemoveTimer('ACS_ResetAnimation');

			last_enemy = false;

			GetWitcherPlayer().EnableCharacterCollisions(false);
			GetWitcherPlayer().SetImmortalityMode( AIM_Invulnerable, AIC_Combat );
			GetWitcherPlayer().SetCanPlayHitAnim(false);
			GetWitcherPlayer().AddBuffImmunity_AllNegative('acs_ciri_special', true);

			GetWitcherPlayer().ClearAnimationSpeedMultipliers();

			GetACSWatcher().RemoveTimer('ACS_ResetAnimation');

			GetWitcherPlayer().SetAnimationSpeedMultiplier( 4 );

			GetWitcherPlayer().BlockAction( EIAB_Crossbow, 			'acs_ciri_special_attack');
			GetWitcherPlayer().BlockAction( EIAB_CallHorse,			'acs_ciri_special_attack');
			GetWitcherPlayer().BlockAction( EIAB_Signs, 			'acs_ciri_special_attack');
			GetWitcherPlayer().BlockAction( EIAB_DrawWeapon, 		'acs_ciri_special_attack'); 
			GetWitcherPlayer().BlockAction( EIAB_FastTravel, 		'acs_ciri_special_attack');
			GetWitcherPlayer().BlockAction( EIAB_Fists, 			'acs_ciri_special_attack');
			GetWitcherPlayer().BlockAction( EIAB_InteractionAction, 'acs_ciri_special_attack');
			GetWitcherPlayer().BlockAction( EIAB_UsableItem,		'acs_ciri_special_attack');
			GetWitcherPlayer().BlockAction( EIAB_ThrowBomb,			'acs_ciri_special_attack');
			GetWitcherPlayer().BlockAction( EIAB_SwordAttack,		'acs_ciri_special_attack');
			GetWitcherPlayer().BlockAction( EIAB_Jump,				'acs_ciri_special_attack');
			GetWitcherPlayer().BlockAction( EIAB_LightAttacks,		'acs_ciri_special_attack');
			GetWitcherPlayer().BlockAction( EIAB_HeavyAttacks,		'acs_ciri_special_attack');
			GetWitcherPlayer().BlockAction( EIAB_SpecialAttackLight,'acs_ciri_special_attack');
			GetWitcherPlayer().BlockAction( EIAB_SpecialAttackHeavy,'acs_ciri_special_attack');
			GetWitcherPlayer().BlockAction( EIAB_Dodge,				'acs_ciri_special_attack');
			GetWitcherPlayer().BlockAction( EIAB_Roll,				'acs_ciri_special_attack');
			GetWitcherPlayer().BlockAction( EIAB_Parry,				'acs_ciri_special_attack');
			GetWitcherPlayer().BlockAction( EIAB_MeditationWaiting,	'acs_ciri_special_attack');
			GetWitcherPlayer().BlockAction( EIAB_OpenMeditation,	'acs_ciri_special_attack');
			GetWitcherPlayer().BlockAction( EIAB_RadialMenu,		'acs_ciri_special_attack');
			GetWitcherPlayer().BlockAction( EIAB_Interactions, 		'acs_ciri_special_attack');

			GetWitcherPlayer().AddTag('ACS_In_Ciri_Special_Attack');

			theGame.SetTimeScale( 0.25, theGame.GetTimescaleSource( ETS_ThrowingAim ), theGame.GetTimescalePriority( ETS_ThrowingAim ), false, true );

			for( j = 0; j < actorVictims.Size(); j += 1 )
			{
				if ( j == actorVictims.Size() - 1 )
				{
					last_enemy = true;
				}

				if (actorVictims[j] && actorVictims[j].IsAlive())
				{
					//GetWitcherPlayer().StopEffect('disappear_ciri');
					//GetWitcherPlayer().PlayEffectSingle('disappear_ciri');

					GetWitcherPlayer().StopEffect('dodge_ciri_trail');
					GetWitcherPlayer().PlayEffectSingle('dodge_ciri_trail');

					GetWitcherPlayer().DestroyEffect('teleport_glow_ciri');
					GetWitcherPlayer().PlayEffectSingle('teleport_glow_ciri');

					movementAdjustor = GetWitcherPlayer().GetMovingAgentComponent().GetMovementAdjustor();

					dist = (((CMovingPhysicalAgentComponent)actorVictims[j].GetMovingAgentComponent()).GetCapsuleRadius() 
					+ ((CMovingPhysicalAgentComponent)GetWitcherPlayer().GetMovingAgentComponent()).GetCapsuleRadius()) * 2;

					ticket = movementAdjustor.GetRequest( 'ACS_Ciri_Speical_Attack');
					movementAdjustor.CancelByName( 'ACS_Ciri_Speical_Attack' );
					movementAdjustor.CancelAll();

					ticket = movementAdjustor.CreateNewRequest( 'ACS_Ciri_Speical_Attack' );
					movementAdjustor.AdjustmentDuration( ticket, 0.125 );
					movementAdjustor.MaxRotationAdjustmentSpeed( ticket, 500000 );

					victimPos = actorVictims[j].PredictWorldPosition(0.35f) + VecFromHeading( AngleNormalize180( GetWitcherPlayer().GetHeading() - dist ) ) * 2;

					if( !theGame.GetWorld().NavigationFindSafeSpot( victimPos, 0.3, 0.3 , newVictimPos ) )
					{
						theGame.GetWorld().NavigationFindSafeSpot( victimPos, 0.3, 4 , newVictimPos );
						victimPos = newVictimPos;
					}

					movementAdjustor.RotateTowards(ticket, actorVictims[j]);

					if ( ((CNewNPC)actorVictims[j]).IsShielded( NULL )
					|| actorVictims[j].IsGuarded()
					)
					{
						movementAdjustor.SlideTo( ticket, ACSPlayerFixZAxis(victimPos) );
					}
					else
					{
						movementAdjustor.SlideTowards( ticket, actorVictims[j], dist, dist );
					}

					attack_anim_names.Clear();
					//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_left_2_lp_50ms_mod_ACS');
					//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_right_2_rp_50ms_mod_ACS');
					//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_left_1_lp_50ms_mod_ACS');
					//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_right_1_rp_50ms_mod_ACS');
					//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_left_2_rp_50ms_mod_ACS');
					//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_right_2_lp_50ms_mod_ACS');
					//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_left_1_rp_50ms_mod_ACS');
					//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_right_1_lp_50ms_mod_ACS');
					attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_forward_1_lp_50ms');
					attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_forward_1_rp_50ms');

					GetACSWatcher().PlayerPlayAnimation( attack_anim_names[RandRange(attack_anim_names.Size())] );

					GetWitcherPlayer().ClearAnimationSpeedMultipliers();

					GetACSWatcher().RemoveTimer('ACS_ResetAnimation');

					GetWitcherPlayer().SetAnimationSpeedMultiplier( 4 );

					GetWitcherPlayer().EnableCharacterCollisions(false);
					GetWitcherPlayer().SetImmortalityMode( AIM_Invulnerable, AIC_Combat );
					GetWitcherPlayer().SetCanPlayHitAnim(false);
					GetWitcherPlayer().AddBuffImmunity_AllNegative('acs_ciri_special', true);

					spawn_ciri_phantom(actorVictims[j]);

					Sleep( 0.35 );
				}
			}

			if ( last_enemy == true ) 
			{
				GetWitcherPlayer().DestroyEffect('teleport_glow_ciri');

				GetWitcherPlayer().StopEffect('dodge_ciri_trail');

				GetWitcherPlayer().RemoveTag('ACS_In_Ciri_Special_Attack');

				theGame.RemoveTimeScale( theGame.GetTimescaleSource(ETS_ThrowingAim) );

				if( GetWitcherPlayer().IsAlive()) {GetWitcherPlayer().ClearAnimationSpeedMultipliers();}

				GetWitcherPlayer().EnableCharacterCollisions(true);
				GetWitcherPlayer().SetImmortalityMode( AIM_None, AIC_Combat );
				GetWitcherPlayer().SetCanPlayHitAnim(true);
				GetWitcherPlayer().RemoveBuffImmunity_AllNegative('acs_ciri_special');

				GetWitcherPlayer().UnblockAction( EIAB_Crossbow, 			'acs_ciri_special_attack');
				GetWitcherPlayer().UnblockAction( EIAB_CallHorse,			'acs_ciri_special_attack');
				GetWitcherPlayer().UnblockAction( EIAB_Signs, 				'acs_ciri_special_attack');
				GetWitcherPlayer().UnblockAction( EIAB_DrawWeapon, 			'acs_ciri_special_attack'); 
				GetWitcherPlayer().UnblockAction( EIAB_FastTravel, 			'acs_ciri_special_attack');
				GetWitcherPlayer().UnblockAction( EIAB_Fists, 				'acs_ciri_special_attack');
				GetWitcherPlayer().UnblockAction( EIAB_InteractionAction, 	'acs_ciri_special_attack');
				GetWitcherPlayer().UnblockAction( EIAB_UsableItem,			'acs_ciri_special_attack');
				GetWitcherPlayer().UnblockAction( EIAB_ThrowBomb,			'acs_ciri_special_attack');
				GetWitcherPlayer().UnblockAction( EIAB_SwordAttack,			'acs_ciri_special_attack');
				GetWitcherPlayer().UnblockAction( EIAB_Jump,				'acs_ciri_special_attack');
				GetWitcherPlayer().UnblockAction( EIAB_LightAttacks,		'acs_ciri_special_attack');
				GetWitcherPlayer().UnblockAction( EIAB_HeavyAttacks,		'acs_ciri_special_attack');
				GetWitcherPlayer().UnblockAction( EIAB_SpecialAttackLight,	'acs_ciri_special_attack');
				GetWitcherPlayer().UnblockAction( EIAB_SpecialAttackHeavy,	'acs_ciri_special_attack');
				GetWitcherPlayer().UnblockAction( EIAB_Dodge,				'acs_ciri_special_attack');
				GetWitcherPlayer().UnblockAction( EIAB_Roll,				'acs_ciri_special_attack');
				GetWitcherPlayer().UnblockAction( EIAB_Parry,				'acs_ciri_special_attack');
				GetWitcherPlayer().UnblockAction( EIAB_MeditationWaiting,	'acs_ciri_special_attack');
				GetWitcherPlayer().UnblockAction( EIAB_OpenMeditation,		'acs_ciri_special_attack');
				GetWitcherPlayer().UnblockAction( EIAB_RadialMenu,			'acs_ciri_special_attack');
				GetWitcherPlayer().UnblockAction( EIAB_Interactions, 		'acs_ciri_special_attack');

				GetWitcherPlayer().DestroyEffect('dodge_ciri');
				GetWitcherPlayer().PlayEffectSingle('dodge_ciri');

				GetWitcherPlayer().PlayEffectSingle('teleport_glow_ciri');

				movementAdjustor = GetWitcherPlayer().GetMovingAgentComponent().GetMovementAdjustor();

				ticket = movementAdjustor.GetRequest( 'ACS_Ciri_Speical_Attack');
				movementAdjustor.CancelByName( 'ACS_Ciri_Speical_Attack' );
				movementAdjustor.CancelAll();

				ticket = movementAdjustor.CreateNewRequest( 'ACS_Ciri_Speical_Attack' );
				movementAdjustor.AdjustmentDuration( ticket, 0.125 );
				movementAdjustor.MaxRotationAdjustmentSpeed( ticket, 500000 );

				movementAdjustor.SlideTo( ticket, ACSPlayerFixZAxis(specialAttackSphereEnt.GetWorldPosition()) );

				if (GetWitcherPlayer().IsInCombat() && GetWitcherPlayer().GetTarget())
				{
					movementAdjustor.RotateTowards( ticket, GetWitcherPlayer().GetTarget() );
				}
				else
				{
					movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );
				}

				GetACSWatcher().PlayerPlayAnimation ( 'man_mage_teleport_in_ACS');

				specialAttackSphereEnt.PlayEffectSingle('fade');
				specialAttackSphereEnt.DestroyAfter(1);
			}
		}
		else
		{
			attack_anim_names.Clear();

			//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_left_2_lp_50ms_mod_ACS');
			//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_right_2_rp_50ms_mod_ACS');
			//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_left_1_lp_50ms_mod_ACS');
			//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_right_1_rp_50ms_mod_ACS');
			//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_left_2_rp_50ms_mod_ACS');
			//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_right_2_lp_50ms_mod_ACS');
			//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_left_1_rp_50ms_mod_ACS');
			//attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_right_1_lp_50ms_mod_ACS');
			attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_forward_1_lp_50ms');
			attack_anim_names.PushBack('man_geralt_sword_attack_fast_far_forward_1_rp_50ms');

			GetACSWatcher().PlayerPlayAnimation( attack_anim_names[RandRange(attack_anim_names.Size())] );

			GetACSWatcher().RemoveTimer('GrowCiriSpecialSphereTimer');

			GetACSWatcher().ResetCiriSpecialSphereSize();

			specialAttackSphereEnt.PlayEffectSingle('fade');
			specialAttackSphereEnt.DestroyAfter(1);
		}
	}

	latent function spawn_ciri_phantom( victim : CActor )
	{
		actorPos = victim.PredictWorldPosition(0.35f);

		actorRot = victim.GetWorldRotation();

		actorRot.Yaw += RandRange(180,0);

		dummy_temp = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\entities\other\ciri_phantom_fx.w2ent"
			
		, true );

		dummy_count = RandRange(3,1);

		for( k = 0; k < dummy_count; k += 1 )
		{
			randRange = 1.125 + 1.125 * RandF();
			randAngle = 1.125 * Pi() * RandF();
			
			spawnPos.X = randRange * CosF( randAngle ) + actorPos.X;
			spawnPos.Y = randRange * SinF( randAngle ) + actorPos.Y;
			spawnPos.Z = actorPos.Z;
			
			dummy_ent = theGame.CreateEntity( dummy_temp, ACSPlayerFixZAxis(spawnPos), actorRot );
			animcomp = (CAnimatedComponent)dummy_ent.GetComponentByClassName('CAnimatedComponent');
			meshcomp = dummy_ent.GetComponentByClassName('CMeshComponent');
			h = 1;
			animcomp.SetScale(Vector(h,h,h,1));
			meshcomp.SetScale(Vector(h,h,h,1));	
			
			((CNewNPC)dummy_ent).SetLevel(GetWitcherPlayer().GetLevel());
			((CNewNPC)dummy_ent).SetAttitude(GetWitcherPlayer(), AIA_Friendly);
			((CNewNPC)dummy_ent).SetTemporaryAttitudeGroup('q104_avallach_friendly_to_all', AGP_Default);
			((CNewNPC)dummy_ent).SetImmortalityMode( AIM_Invulnerable, AIC_Default, true );
			((CNewNPC)dummy_ent).EnableCharacterCollisions(false);

			((CActor)dummy_ent).SetAnimationSpeedMultiplier(5);

			dummy_ent.PlayEffectSingle('dodge');

			dummy_ent.PlayEffectSingle('fury');

			dummy_ent.PlayEffectSingle('fury_403');
		
			dummy_ent.PlayEffectSingle('teleport_glow');

			dummy_ent.PlayEffectSingle('appear');
			
			dummy_ent.AddTag( 'ACS_Ciri_Special_Dummy' );

			movementAdjustorDummy = ((CActor)dummy_ent).GetMovingAgentComponent().GetMovementAdjustor();

			ticketDummy = movementAdjustor.GetRequest( 'ACS_Ciri_Speical_Attack_Dummy');
			movementAdjustorDummy.CancelByName( 'ACS_Ciri_Speical_Attack_Dummy' );
			movementAdjustorDummy.CancelAll();

			ticketDummy = movementAdjustorDummy.CreateNewRequest( 'ACS_Ciri_Speical_Attack_Dummy' );
			movementAdjustorDummy.AdjustmentDuration( ticket, 0.125 );
			movementAdjustorDummy.MaxRotationAdjustmentSpeed( ticketDummy, 500000 );

			movementAdjustorDummy.RotateTowards( ticketDummy, victim);
			movementAdjustorDummy.SlideTowards( ticketDummy, victim, dist, dist );

			ciri_attack_anim_names.Clear();

			ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_far_forward_1_rp_50ms');
			ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_1_rp_40ms');
			ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_2_rp_40ms');
			ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_3_rp_40ms');
			ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_4_rp_40ms');
			ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_5_rp_40ms');
			ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_back_1_rp_40ms');
			ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_left_1_rp_40ms');
			ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_right_1_rp_40ms');
			ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_far_back_1_rp_50ms');
			ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_far_left_1_rp_50ms');
			ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_far_right_1_rp_50ms');
			ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_1_lp_40ms');
			ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_2_lp_40ms');
			ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_3_lp_40ms');
			ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_4_lp_40ms');
			ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_back_1_lp_40ms');
			ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_left_1_lp_40ms');
			ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_right_1_lp_40ms');
			ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_far_forward_1_lp_50ms');
			ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_far_back_1_lp_50ms');
			ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_far_left_1_lp_50ms');
			ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_far_right_1_lp_50ms');
			ciri_attack_anim_names.PushBack('woman_ciri_sword_special_heavy_attack_short_rp');
			ciri_attack_anim_names.PushBack('woman_ciri_sword_special_heavy_attack_short_lp');

			animcomp.PlaySlotAnimationAsync ( ciri_attack_anim_names[RandRange(ciri_attack_anim_names.Size())], 'GAMEPLAY_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0.5f));

			dummy_ent.DestroyAfter(0.75);
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state ACS_Ciri_Spectre_Attack_Engage in cACS_Ciri_Special_Attack
{
	private var actorVictims, actors													: array<CActor>;
	private var actortarget																: CActor;
	private var i, j, k, dummy_count 													: int;
	private var movementAdjustor, movementAdjustorDummy									: CMovementAdjustor;
	private var ticket, ticketDummy														: SMovementAdjustmentRequestTicket;
	private var dist																	: float;
	private var attack_anim_names, ciri_attack_anim_names								: array< name >;
	private var victimPos, newVictimPos													: Vector;
	private var last_enemy																: bool;
	private var dummy_temp																: CEntityTemplate;
	private var dummy_ent																: CEntity;
	private var actorPos, spawnPos														: Vector;
	private var randAngle, randRange													: float;
	private var meshcomp																: CComponent;
	private var animcomp 																: CAnimatedComponent;
	private var h 																		: float;
	private var actorRot																: EulerAngles;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		this.Ciri_Spectre_Attack_Entry();
	}
	
	entry function Ciri_Spectre_Attack_Entry()
	{
		dummy_temp = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\entities\other\ciri_phantom_fx.w2ent"
			
		, true );

		dummy_ent = theGame.CreateEntity( dummy_temp, ACSPlayerFixZAxis(GetWitcherPlayer().GetWorldPosition() ), GetWitcherPlayer().GetWorldRotation() );
		animcomp = (CAnimatedComponent)dummy_ent.GetComponentByClassName('CAnimatedComponent');
		meshcomp = dummy_ent.GetComponentByClassName('CMeshComponent');
		h = 1;
		animcomp.SetScale(Vector(h,h,h,1));
		meshcomp.SetScale(Vector(h,h,h,1));	
		
		((CNewNPC)dummy_ent).SetLevel(GetWitcherPlayer().GetLevel());
		((CNewNPC)dummy_ent).SetAttitude(GetWitcherPlayer(), AIA_Friendly);
		((CNewNPC)dummy_ent).SetTemporaryAttitudeGroup('q104_avallach_friendly_to_all', AGP_Default);
		((CNewNPC)dummy_ent).SetImmortalityMode( AIM_Invulnerable, AIC_Default, true );
		((CNewNPC)dummy_ent).EnableCharacterCollisions(false);

		((CActor)dummy_ent).SetAnimationSpeedMultiplier(5);

		dummy_ent.PlayEffectSingle('dodge');

		dummy_ent.PlayEffectSingle('fury');

		dummy_ent.PlayEffectSingle('fury_403');
	
		dummy_ent.PlayEffectSingle('teleport_glow');

		dummy_ent.PlayEffectSingle('appear');
		
		dummy_ent.AddTag( 'ACS_Ciri_Special_Dummy' );

		movementAdjustorDummy = ((CActor)dummy_ent).GetMovingAgentComponent().GetMovementAdjustor();

		ticketDummy = movementAdjustor.GetRequest( 'ACS_Ciri_Speical_Attack_Dummy');
		movementAdjustorDummy.CancelByName( 'ACS_Ciri_Speical_Attack_Dummy' );
		movementAdjustorDummy.CancelAll();

		ticketDummy = movementAdjustorDummy.CreateNewRequest( 'ACS_Ciri_Speical_Attack_Dummy' );
		movementAdjustorDummy.AdjustmentDuration( ticket, 0.125 );
		movementAdjustorDummy.MaxRotationAdjustmentSpeed( ticketDummy, 500000 );

		ciri_attack_anim_names.Clear();

		ciri_attack_anim_names.PushBack('woman_ciri_sword_special_blink_attack_start_lp');
		ciri_attack_anim_names.PushBack('woman_ciri_sword_special_blink_attack_start_rp');

		animcomp.PlaySlotAnimationAsync ( ciri_attack_anim_names[RandRange(ciri_attack_anim_names.Size())], 'GAMEPLAY_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0.5f));

		dummy_ent.DestroyAfter(0.75);

		/*

		Sleep(0.5);

		GetWitcherPlayer().PlayEffectSingle('dodge_ciri');
		GetWitcherPlayer().DestroyEffect('dodge_ciri');

		dummy_temp = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\entities\other\ciri_phantom_fx.w2ent"
			
		, true );

		dummy_ent = theGame.CreateEntity( dummy_temp, ACSPlayerFixZAxis(GetWitcherPlayer().GetWorldPosition() ), GetWitcherPlayer().GetWorldRotation() );
		animcomp = (CAnimatedComponent)dummy_ent.GetComponentByClassName('CAnimatedComponent');
		meshcomp = dummy_ent.GetComponentByClassName('CMeshComponent');
		h = 1;
		animcomp.SetScale(Vector(h,h,h,1));
		meshcomp.SetScale(Vector(h,h,h,1));	
		
		((CNewNPC)dummy_ent).SetLevel(GetWitcherPlayer().GetLevel());
		((CNewNPC)dummy_ent).SetAttitude(GetWitcherPlayer(), AIA_Friendly);
		((CNewNPC)dummy_ent).SetTemporaryAttitudeGroup('player', AGP_Default);
		((CNewNPC)dummy_ent).SetImmortalityMode( AIM_Invulnerable, AIC_Default, true );
		((CNewNPC)dummy_ent).EnableCharacterCollisions(false);

		((CActor)dummy_ent).SetAnimationSpeedMultiplier(5);

		dummy_ent.PlayEffectSingle('dodge');

		dummy_ent.PlayEffectSingle('fury');

		dummy_ent.PlayEffectSingle('fury_403');
	
		dummy_ent.PlayEffectSingle('teleport_glow');

		dummy_ent.PlayEffectSingle('appear');
		
		dummy_ent.AddTag( 'ACS_Ciri_Special_Dummy' );

		movementAdjustorDummy = ((CActor)dummy_ent).GetMovingAgentComponent().GetMovementAdjustor();

		ticketDummy = movementAdjustor.GetRequest( 'ACS_Ciri_Speical_Attack_Dummy');
		movementAdjustorDummy.CancelByName( 'ACS_Ciri_Speical_Attack_Dummy' );
		movementAdjustorDummy.CancelAll();

		ticketDummy = movementAdjustorDummy.CreateNewRequest( 'ACS_Ciri_Speical_Attack_Dummy' );
		movementAdjustorDummy.AdjustmentDuration( ticket, 0.125 );
		movementAdjustorDummy.MaxRotationAdjustmentSpeed( ticketDummy, 500000 );

		ciri_attack_anim_names.Clear();

		ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_far_forward_1_rp_50ms');
		ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_far_forward_1_lp_50ms');
		ciri_attack_anim_names.PushBack('woman_ciri_sword_special_heavy_attack_short_rp');
		ciri_attack_anim_names.PushBack('woman_ciri_sword_special_heavy_attack_short_lp');
		ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_1_rp_40ms');
		ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_2_rp_40ms');
		ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_3_rp_40ms');
		ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_4_rp_40ms');
		ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_5_rp_40ms');
		ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_1_lp_40ms');
		ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_2_lp_40ms');
		ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_3_lp_40ms');
		ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_4_lp_40ms');

		animcomp.PlaySlotAnimationAsync ( ciri_attack_anim_names[RandRange(ciri_attack_anim_names.Size())], 'GAMEPLAY_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0.5f));

		dummy_ent.DestroyAfter(0.75);

		Sleep(0.125);

		GetWitcherPlayer().PlayEffectSingle('dodge_ciri');
		GetWitcherPlayer().DestroyEffect('dodge_ciri');

		dummy_temp = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\entities\other\ciri_phantom_fx.w2ent"
			
		, true );

		dummy_ent = theGame.CreateEntity( dummy_temp, ACSPlayerFixZAxis(GetWitcherPlayer().GetWorldPosition() ), GetWitcherPlayer().GetWorldRotation() );
		animcomp = (CAnimatedComponent)dummy_ent.GetComponentByClassName('CAnimatedComponent');
		meshcomp = dummy_ent.GetComponentByClassName('CMeshComponent');
		h = 1;
		animcomp.SetScale(Vector(h,h,h,1));
		meshcomp.SetScale(Vector(h,h,h,1));	
		
		((CNewNPC)dummy_ent).SetLevel(GetWitcherPlayer().GetLevel());
		((CNewNPC)dummy_ent).SetAttitude(GetWitcherPlayer(), AIA_Friendly);
		((CNewNPC)dummy_ent).SetTemporaryAttitudeGroup('player', AGP_Default);
		((CNewNPC)dummy_ent).SetImmortalityMode( AIM_Invulnerable, AIC_Default, true );
		((CNewNPC)dummy_ent).EnableCharacterCollisions(false);

		((CActor)dummy_ent).SetAnimationSpeedMultiplier(5);

		dummy_ent.PlayEffectSingle('dodge');

		dummy_ent.PlayEffectSingle('fury');

		dummy_ent.PlayEffectSingle('fury_403');
	
		dummy_ent.PlayEffectSingle('teleport_glow');

		dummy_ent.PlayEffectSingle('appear');
		
		dummy_ent.AddTag( 'ACS_Ciri_Special_Dummy' );

		movementAdjustorDummy = ((CActor)dummy_ent).GetMovingAgentComponent().GetMovementAdjustor();

		ticketDummy = movementAdjustor.GetRequest( 'ACS_Ciri_Speical_Attack_Dummy');
		movementAdjustorDummy.CancelByName( 'ACS_Ciri_Speical_Attack_Dummy' );
		movementAdjustorDummy.CancelAll();

		ticketDummy = movementAdjustorDummy.CreateNewRequest( 'ACS_Ciri_Speical_Attack_Dummy' );
		movementAdjustorDummy.AdjustmentDuration( ticket, 0.125 );
		movementAdjustorDummy.MaxRotationAdjustmentSpeed( ticketDummy, 500000 );

		ciri_attack_anim_names.Clear();

		ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_left_1_rp_40ms');
		ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_far_left_1_rp_50ms');
		ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_left_1_lp_40ms');
		ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_far_left_1_lp_50ms');

		animcomp.PlaySlotAnimationAsync ( ciri_attack_anim_names[RandRange(ciri_attack_anim_names.Size())], 'GAMEPLAY_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0.5f));

		dummy_ent.DestroyAfter(0.75);

		Sleep(0.125);

		GetWitcherPlayer().PlayEffectSingle('dodge_ciri');
		GetWitcherPlayer().DestroyEffect('dodge_ciri');

		dummy_temp = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\entities\other\ciri_phantom_fx.w2ent"
			
		, true );

		dummy_ent = theGame.CreateEntity( dummy_temp, ACSPlayerFixZAxis(GetWitcherPlayer().GetWorldPosition() ), GetWitcherPlayer().GetWorldRotation() );
		animcomp = (CAnimatedComponent)dummy_ent.GetComponentByClassName('CAnimatedComponent');
		meshcomp = dummy_ent.GetComponentByClassName('CMeshComponent');
		h = 1;
		animcomp.SetScale(Vector(h,h,h,1));
		meshcomp.SetScale(Vector(h,h,h,1));	
		
		((CNewNPC)dummy_ent).SetLevel(GetWitcherPlayer().GetLevel());
		((CNewNPC)dummy_ent).SetAttitude(GetWitcherPlayer(), AIA_Friendly);
		((CNewNPC)dummy_ent).SetTemporaryAttitudeGroup('player', AGP_Default);
		((CNewNPC)dummy_ent).SetImmortalityMode( AIM_Invulnerable, AIC_Default, true );
		((CNewNPC)dummy_ent).EnableCharacterCollisions(false);

		((CActor)dummy_ent).SetAnimationSpeedMultiplier(5);

		dummy_ent.PlayEffectSingle('dodge');

		dummy_ent.PlayEffectSingle('fury');

		dummy_ent.PlayEffectSingle('fury_403');
	
		dummy_ent.PlayEffectSingle('teleport_glow');

		dummy_ent.PlayEffectSingle('appear');
		
		dummy_ent.AddTag( 'ACS_Ciri_Special_Dummy' );

		movementAdjustorDummy = ((CActor)dummy_ent).GetMovingAgentComponent().GetMovementAdjustor();

		ticketDummy = movementAdjustor.GetRequest( 'ACS_Ciri_Speical_Attack_Dummy');
		movementAdjustorDummy.CancelByName( 'ACS_Ciri_Speical_Attack_Dummy' );
		movementAdjustorDummy.CancelAll();

		ticketDummy = movementAdjustorDummy.CreateNewRequest( 'ACS_Ciri_Speical_Attack_Dummy' );
		movementAdjustorDummy.AdjustmentDuration( ticket, 0.125 );
		movementAdjustorDummy.MaxRotationAdjustmentSpeed( ticketDummy, 500000 );

		ciri_attack_anim_names.Clear();

		ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_back_1_rp_40ms');
		ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_far_back_1_rp_50ms');
		ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_far_back_1_lp_50ms');
		ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_back_1_lp_40ms');

		animcomp.PlaySlotAnimationAsync ( ciri_attack_anim_names[RandRange(ciri_attack_anim_names.Size())], 'GAMEPLAY_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0.5f));

		dummy_ent.DestroyAfter(0.75);

		Sleep(0.125);

		GetWitcherPlayer().PlayEffectSingle('dodge_ciri');
		GetWitcherPlayer().DestroyEffect('dodge_ciri');

		dummy_temp = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\entities\other\ciri_phantom_fx.w2ent"
			
		, true );

		dummy_ent = theGame.CreateEntity( dummy_temp, ACSPlayerFixZAxis(GetWitcherPlayer().GetWorldPosition() ), GetWitcherPlayer().GetWorldRotation() );
		animcomp = (CAnimatedComponent)dummy_ent.GetComponentByClassName('CAnimatedComponent');
		meshcomp = dummy_ent.GetComponentByClassName('CMeshComponent');
		h = 1;
		animcomp.SetScale(Vector(h,h,h,1));
		meshcomp.SetScale(Vector(h,h,h,1));	
		
		((CNewNPC)dummy_ent).SetLevel(GetWitcherPlayer().GetLevel());
		((CNewNPC)dummy_ent).SetAttitude(GetWitcherPlayer(), AIA_Friendly);
		((CNewNPC)dummy_ent).SetTemporaryAttitudeGroup('player', AGP_Default);
		((CNewNPC)dummy_ent).SetImmortalityMode( AIM_Invulnerable, AIC_Default, true );
		((CNewNPC)dummy_ent).EnableCharacterCollisions(false);

		((CActor)dummy_ent).SetAnimationSpeedMultiplier(5);

		dummy_ent.PlayEffectSingle('dodge');

		dummy_ent.PlayEffectSingle('fury');

		dummy_ent.PlayEffectSingle('fury_403');
	
		dummy_ent.PlayEffectSingle('teleport_glow');

		dummy_ent.PlayEffectSingle('appear');
		
		dummy_ent.AddTag( 'ACS_Ciri_Special_Dummy' );

		movementAdjustorDummy = ((CActor)dummy_ent).GetMovingAgentComponent().GetMovementAdjustor();

		ticketDummy = movementAdjustor.GetRequest( 'ACS_Ciri_Speical_Attack_Dummy');
		movementAdjustorDummy.CancelByName( 'ACS_Ciri_Speical_Attack_Dummy' );
		movementAdjustorDummy.CancelAll();

		ticketDummy = movementAdjustorDummy.CreateNewRequest( 'ACS_Ciri_Speical_Attack_Dummy' );
		movementAdjustorDummy.AdjustmentDuration( ticket, 0.125 );
		movementAdjustorDummy.MaxRotationAdjustmentSpeed( ticketDummy, 500000 );

		ciri_attack_anim_names.Clear();

		ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_right_1_rp_40ms');
		ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_far_right_1_rp_50ms');
		ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_right_1_lp_40ms');
		ciri_attack_anim_names.PushBack('woman_ciri_sword_attack_fast_far_right_1_lp_50ms');

		animcomp.PlaySlotAnimationAsync ( ciri_attack_anim_names[RandRange(ciri_attack_anim_names.Size())], 'GAMEPLAY_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0.5f));

		dummy_ent.DestroyAfter(0.75);
		
		*/
	}
}

state ACS_Ciri_Spectre_Dodge_Front_Engage in cACS_Ciri_Special_Attack
{
	private var actorVictims															: array<CActor>;
	private var j, k, dummy_count 														: int;
	private var movementAdjustor, movementAdjustorDummy									: CMovementAdjustor;
	private var ticket, ticketDummy														: SMovementAdjustmentRequestTicket;
	private var dist																	: float;
	private var attack_anim_names, ciri_attack_anim_names								: array< name >;
	private var victimPos, newVictimPos													: Vector;
	private var last_enemy																: bool;
	private var dummy_temp																: CEntityTemplate;
	private var dummy_ent																: CEntity;
	private var actorPos, spawnPos														: Vector;
	private var randAngle, randRange													: float;
	private var meshcomp																: CComponent;
	private var animcomp 																: CAnimatedComponent;
	private var h 																		: float;
	private var actorRot																: EulerAngles;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		this.Ciri_Spectre_Dodge_Front_Entry();
	}
	
	entry function Ciri_Spectre_Dodge_Front_Entry()
	{
		//Sleep(0.25);

		dummy_temp = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\entities\other\ciri_phantom_fx.w2ent"
			
		, true );

		dummy_ent = theGame.CreateEntity( dummy_temp, ACSPlayerFixZAxis(GetWitcherPlayer().GetWorldPosition() ), GetWitcherPlayer().GetWorldRotation() );
		animcomp = (CAnimatedComponent)dummy_ent.GetComponentByClassName('CAnimatedComponent');
		meshcomp = dummy_ent.GetComponentByClassName('CMeshComponent');
		h = 1;
		animcomp.SetScale(Vector(h,h,h,1));
		meshcomp.SetScale(Vector(h,h,h,1));	
		
		((CNewNPC)dummy_ent).SetLevel(GetWitcherPlayer().GetLevel());
		((CNewNPC)dummy_ent).SetAttitude(GetWitcherPlayer(), AIA_Friendly);
		((CNewNPC)dummy_ent).SetTemporaryAttitudeGroup('q104_avallach_friendly_to_all', AGP_Default);
		((CNewNPC)dummy_ent).SetImmortalityMode( AIM_Invulnerable, AIC_Default, true );
		((CNewNPC)dummy_ent).EnableCharacterCollisions(false);

		((CActor)dummy_ent).SetAnimationSpeedMultiplier(5);

		dummy_ent.PlayEffectSingle('dodge');

		dummy_ent.PlayEffectSingle('fury');

		dummy_ent.PlayEffectSingle('fury_403');
	
		dummy_ent.PlayEffectSingle('teleport_glow');

		dummy_ent.PlayEffectSingle('appear');
		
		dummy_ent.AddTag( 'ACS_Ciri_Special_Dummy' );

		ciri_attack_anim_names.Clear();

		ciri_attack_anim_names.PushBack('woman_ciri_sword_special_attack_end_disappear_lp');
		ciri_attack_anim_names.PushBack('woman_ciri_sword_special_attack_end_disappear_rp');

		animcomp.PlaySlotAnimationAsync ( ciri_attack_anim_names[RandRange(ciri_attack_anim_names.Size())], 'GAMEPLAY_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0.5f));

		dummy_ent.DestroyAfter(0.75);
	}
}

state ACS_Ciri_Spectre_Dodge_Back_Engage in cACS_Ciri_Special_Attack
{
	private var actorVictims															: array<CActor>;
	private var j, k, dummy_count 														: int;
	private var movementAdjustor, movementAdjustorDummy									: CMovementAdjustor;
	private var ticket, ticketDummy														: SMovementAdjustmentRequestTicket;
	private var dist																	: float;
	private var attack_anim_names, ciri_attack_anim_names								: array< name >;
	private var victimPos, newVictimPos													: Vector;
	private var last_enemy																: bool;
	private var dummy_temp																: CEntityTemplate;
	private var dummy_ent																: CEntity;
	private var actorPos, spawnPos														: Vector;
	private var randAngle, randRange													: float;
	private var meshcomp																: CComponent;
	private var animcomp 																: CAnimatedComponent;
	private var h 																		: float;
	private var actorRot																: EulerAngles;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		this.Ciri_Spectre_Dodge_Back_Entry();
	}
	
	entry function Ciri_Spectre_Dodge_Back_Entry()
	{
		//Sleep(0.25);

		dummy_temp = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\entities\other\ciri_phantom_fx.w2ent"
			
		, true );

		dummy_ent = theGame.CreateEntity( dummy_temp, ACSPlayerFixZAxis(GetWitcherPlayer().GetWorldPosition() ), GetWitcherPlayer().GetWorldRotation() );
		animcomp = (CAnimatedComponent)dummy_ent.GetComponentByClassName('CAnimatedComponent');
		meshcomp = dummy_ent.GetComponentByClassName('CMeshComponent');
		h = 1;
		animcomp.SetScale(Vector(h,h,h,1));
		meshcomp.SetScale(Vector(h,h,h,1));	
		
		((CNewNPC)dummy_ent).SetLevel(GetWitcherPlayer().GetLevel());
		((CNewNPC)dummy_ent).SetAttitude(GetWitcherPlayer(), AIA_Friendly);
		((CNewNPC)dummy_ent).SetTemporaryAttitudeGroup('q104_avallach_friendly_to_all', AGP_Default);
		((CNewNPC)dummy_ent).SetImmortalityMode( AIM_Invulnerable, AIC_Default, true );
		((CNewNPC)dummy_ent).EnableCharacterCollisions(false);

		((CActor)dummy_ent).SetAnimationSpeedMultiplier(5);

		dummy_ent.PlayEffectSingle('dodge');

		dummy_ent.PlayEffectSingle('fury');

		dummy_ent.PlayEffectSingle('fury_403');
	
		dummy_ent.PlayEffectSingle('teleport_glow');

		dummy_ent.PlayEffectSingle('appear');
		
		dummy_ent.AddTag( 'ACS_Ciri_Special_Dummy' );

		ciri_attack_anim_names.Clear();

		ciri_attack_anim_names.PushBack('woman_ciri_sword_special_blink_attack_disappear');
		//ciri_attack_anim_names.PushBack('woman_ciri_sword_dodge_start_back_lp');

		animcomp.PlaySlotAnimationAsync ( ciri_attack_anim_names[RandRange(ciri_attack_anim_names.Size())], 'GAMEPLAY_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0.5f));

		dummy_ent.DestroyAfter(0.75);
	}
}

state ACS_Ciri_Spectre_Dodge_Left_Engage in cACS_Ciri_Special_Attack
{
	private var actorVictims															: array<CActor>;
	private var j, k, dummy_count 														: int;
	private var movementAdjustor, movementAdjustorDummy									: CMovementAdjustor;
	private var ticket, ticketDummy														: SMovementAdjustmentRequestTicket;
	private var dist																	: float;
	private var attack_anim_names, ciri_attack_anim_names								: array< name >;
	private var victimPos, newVictimPos													: Vector;
	private var last_enemy																: bool;
	private var dummy_temp																: CEntityTemplate;
	private var dummy_ent																: CEntity;
	private var actorPos, spawnPos														: Vector;
	private var randAngle, randRange													: float;
	private var meshcomp																: CComponent;
	private var animcomp 																: CAnimatedComponent;
	private var h 																		: float;
	private var actorRot																: EulerAngles;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		this.Ciri_Spectre_Dodge_Left_Entry();
	}
	
	entry function Ciri_Spectre_Dodge_Left_Entry()
	{
		actorRot = GetWitcherPlayer().GetWorldRotation();

		actorRot.Yaw -= 45;

		dummy_temp = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\entities\other\ciri_phantom_fx.w2ent"
			
		, true );

		dummy_ent = theGame.CreateEntity( dummy_temp, ACSPlayerFixZAxis(GetWitcherPlayer().GetWorldPosition() ), actorRot );
		animcomp = (CAnimatedComponent)dummy_ent.GetComponentByClassName('CAnimatedComponent');
		meshcomp = dummy_ent.GetComponentByClassName('CMeshComponent');
		h = 1;
		animcomp.SetScale(Vector(h,h,h,1));
		meshcomp.SetScale(Vector(h,h,h,1));	
		
		((CNewNPC)dummy_ent).SetLevel(GetWitcherPlayer().GetLevel());
		((CNewNPC)dummy_ent).SetAttitude(GetWitcherPlayer(), AIA_Friendly);
		((CNewNPC)dummy_ent).SetTemporaryAttitudeGroup('q104_avallach_friendly_to_all', AGP_Default);
		((CNewNPC)dummy_ent).SetImmortalityMode( AIM_Invulnerable, AIC_Default, true );
		((CNewNPC)dummy_ent).EnableCharacterCollisions(false);

		((CActor)dummy_ent).SetAnimationSpeedMultiplier(5);

		dummy_ent.PlayEffectSingle('dodge');

		dummy_ent.PlayEffectSingle('fury');

		dummy_ent.PlayEffectSingle('fury_403');
	
		dummy_ent.PlayEffectSingle('teleport_glow');

		dummy_ent.PlayEffectSingle('appear');
		
		dummy_ent.AddTag( 'ACS_Ciri_Special_Dummy' );

		ciri_attack_anim_names.Clear();

		ciri_attack_anim_names.PushBack('woman_ciri_sword_dodge_start_left_lp');
		ciri_attack_anim_names.PushBack('woman_ciri_sword_dodge_start_left_rp');

		animcomp.PlaySlotAnimationAsync ( ciri_attack_anim_names[RandRange(ciri_attack_anim_names.Size())], 'GAMEPLAY_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0.5f));

		dummy_ent.DestroyAfter(0.75);
	}
}

state ACS_Ciri_Spectre_Dodge_Right_Engage in cACS_Ciri_Special_Attack
{
	private var actorVictims															: array<CActor>;
	private var j, k, dummy_count 														: int;
	private var movementAdjustor, movementAdjustorDummy									: CMovementAdjustor;
	private var ticket, ticketDummy														: SMovementAdjustmentRequestTicket;
	private var dist																	: float;
	private var attack_anim_names, ciri_attack_anim_names								: array< name >;
	private var victimPos, newVictimPos													: Vector;
	private var last_enemy																: bool;
	private var dummy_temp																: CEntityTemplate;
	private var dummy_ent																: CEntity;
	private var actorPos, spawnPos														: Vector;
	private var randAngle, randRange													: float;
	private var meshcomp																: CComponent;
	private var animcomp 																: CAnimatedComponent;
	private var h 																		: float;
	private var actorRot																: EulerAngles;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		this.Ciri_Spectre_Dodge_Right_Entry();
	}
	
	entry function Ciri_Spectre_Dodge_Right_Entry()
	{
		actorRot = GetWitcherPlayer().GetWorldRotation();

		actorRot.Yaw += 45;

		dummy_temp = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\entities\other\ciri_phantom_fx.w2ent"
			
		, true );

		dummy_ent = theGame.CreateEntity( dummy_temp, ACSPlayerFixZAxis(GetWitcherPlayer().GetWorldPosition() ), actorRot );
		animcomp = (CAnimatedComponent)dummy_ent.GetComponentByClassName('CAnimatedComponent');
		meshcomp = dummy_ent.GetComponentByClassName('CMeshComponent');
		h = 1;
		animcomp.SetScale(Vector(h,h,h,1));
		meshcomp.SetScale(Vector(h,h,h,1));	
		
		((CNewNPC)dummy_ent).SetLevel(GetWitcherPlayer().GetLevel());
		((CNewNPC)dummy_ent).SetAttitude(GetWitcherPlayer(), AIA_Friendly);
		((CNewNPC)dummy_ent).SetTemporaryAttitudeGroup('q104_avallach_friendly_to_all', AGP_Default);
		((CNewNPC)dummy_ent).SetImmortalityMode( AIM_Invulnerable, AIC_Default, true );
		((CNewNPC)dummy_ent).EnableCharacterCollisions(false);

		((CActor)dummy_ent).SetAnimationSpeedMultiplier(5);

		dummy_ent.PlayEffectSingle('dodge');

		dummy_ent.PlayEffectSingle('fury');

		dummy_ent.PlayEffectSingle('fury_403');
	
		dummy_ent.PlayEffectSingle('teleport_glow');

		dummy_ent.PlayEffectSingle('appear');
		
		dummy_ent.AddTag( 'ACS_Ciri_Special_Dummy' );

		ciri_attack_anim_names.Clear();

		ciri_attack_anim_names.PushBack('woman_ciri_sword_dodge_start_right_lp');
		ciri_attack_anim_names.PushBack('woman_ciri_sword_dodge_start_right_rp');

		animcomp.PlaySlotAnimationAsync ( ciri_attack_anim_names[RandRange(ciri_attack_anim_names.Size())], 'GAMEPLAY_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0.5f));

		dummy_ent.DestroyAfter(0.75);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class cACS_Spawn_Transformation_Werewolf
{
    function Spawn_Transformation_Werewolf_Engage()
	{
		this.PushState('Spawn_Transformation_Werewolf_Engage');
	}
}

state Spawn_Transformation_Werewolf_Engage in cACS_Spawn_Transformation_Werewolf
{
	private var actor															: CActor;
	private var ent																: CEntity;
	private var temp															: CEntityTemplate;
	private var meshcomp														: CComponent;
	private var animcomp 														: CAnimatedComponent;
	private var h 																: float;
	private var p_comp															: CComponent;
	private var apptemp															: CEntityTemplate;

	var cameraTemplate															: CEntityTemplate;
	var cameraEnt																: CEntity;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		ACSGetCActor('ACS_Transformation_Werewolf').Destroy();
		Spawn_Transformation_Werewolf_Entry();
	}
	
	entry function Spawn_Transformation_Werewolf_Entry()
	{
		temp = (CEntityTemplate)LoadResource( 

		"dlc\dlc_acs\data\entities\transformation_entities\acs_werewolf.w2ent"
			
		, true );

		ent = theGame.CreateEntity( temp, GetWitcherPlayer().GetWorldPosition(), GetWitcherPlayer().GetWorldRotation() );

		//p_comp = ent.GetComponentByClassName( 'CAppearanceComponent' );

		//apptemp = (CEntityTemplate)LoadResource(

		//"dlc\dlc_acs\data\models\transformation_werewolf\t_03__werewolf.w2ent"
			
		//, true);
		
		//((CAppearanceComponent)p_comp).IncludeAppearanceTemplate(apptemp);

		animcomp = (CAnimatedComponent)ent.GetComponentByClassName('CAnimatedComponent');
		meshcomp = ent.GetComponentByClassName('CMeshComponent');
		h = 1.1875;
		animcomp.SetScale(Vector(h,h,h,1));
		meshcomp.SetScale(Vector(h,h,h,1));	

		((CNewNPC)ent).SetLevel(GetWitcherPlayer().GetLevel());

		((CActor)ent).SetTemporaryAttitudeGroup( 'q104_avallach_friendly_to_all', AGP_Default );
		((CNewNPC)ent).SetTemporaryAttitudeGroup( 'q104_avallach_friendly_to_all', AGP_Default );

		((CNewNPC)ent).SetCanPlayHitAnim(false);

		((CActor)ent).SetImmortalityMode( AIM_Invulnerable, AIC_Default, true );

		((CActor)ent).AddBuffImmunity_AllNegative('ACS_Transformation_Werewolf_Immunity_Negative', true); 
		((CActor)ent).AddBuffImmunity_AllCritical('ACS_Transformation_Werewolf_Immunity_Critical', true); 

		ent.AddTag('ACS_Transformation_Werewolf');

		ent.PlayEffectSingle('sonar');
		ent.StopEffect('sonar');

		ent.PlayEffectSingle('blood');
		ent.StopEffect('blood');

		ent.PlayEffectSingle('morph_fx');
		ent.StopEffect('morph_fx');

		//ent.PlayEffectSingle('shadow_disappear');
		//ent.StopEffect('shadow_disappear');

		ent.PlayEffectSingle('him_smoke_red');
		ent.PlayEffectSingle('him_smoke_red');
		ent.PlayEffectSingle('him_smoke_red');

		ent.PlayEffectSingle('him_smoke_swirl');
		ent.StopEffect('him_smoke_swirl');

		//ent.PlayEffectSingle('smash_ground');
		//ent.StopEffect('smash_ground');

		ent.PlayEffectSingle('attack_special');
		ent.StopEffect('attack_special');

		GetACSWatcher().ACSTransformWerewolfPlayAnim('monster_werewolf_taunt_02', 1, 1);

		GetWitcherPlayer().SoundEvent("animals_wolf_howl");
		GetWitcherPlayer().SoundEvent("animals_wolf_howl");
		GetWitcherPlayer().SoundEvent("animals_wolf_howl");
		GetWitcherPlayer().SoundEvent("animals_wolf_howl");
		GetWitcherPlayer().SoundEvent("animals_wolf_howl");
		
		GetWitcherPlayer().SoundEvent("monster_wild_dog_howl");
		GetWitcherPlayer().SoundEvent("monster_wild_dog_howl");
		GetWitcherPlayer().SoundEvent("monster_wild_dog_howl");
		GetWitcherPlayer().SoundEvent("monster_wild_dog_howl");
		GetWitcherPlayer().SoundEvent("monster_wild_dog_howl");

		GetWitcherPlayer().SoundEvent("monster_werewolf_vo_taunt1");
		GetWitcherPlayer().SoundEvent("monster_werewolf_vo_taunt1");
		//GetWitcherPlayer().SoundEvent("monster_werewolf_vo_taunt1");
		//GetWitcherPlayer().SoundEvent("monster_werewolf_vo_taunt1");
		//GetWitcherPlayer().SoundEvent("monster_werewolf_vo_taunt1");

		GetWitcherPlayer().SoundEvent("monster_werewolf_vo_taunt2");
		GetWitcherPlayer().SoundEvent("monster_werewolf_vo_taunt2");
		//GetWitcherPlayer().SoundEvent("monster_werewolf_vo_taunt2");
		//GetWitcherPlayer().SoundEvent("monster_werewolf_vo_taunt2");
		//GetWitcherPlayer().SoundEvent("monster_werewolf_vo_taunt2");



		GetACSWatcher().CamerasDestroy();

		cameraTemplate = (CEntityTemplate)LoadResource("dlc\dlc_acs\data\entities\other\transformation_camera.w2ent", true);

		cameraEnt = (CStaticCamera)theGame.CreateEntity(cameraTemplate, theCamera.GetCameraPosition(), theCamera.GetCameraRotation());	

		cameraEnt.AddTag('ACS_Transformation_Custom_Camera');
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class cACS_Spawn_Transformation_Red_Miasmal
{
    function Spawn_Transformation_Red_Miasmal_Engage()
	{
		this.PushState('Spawn_Transformation_Red_Miasmal_Engage');
	}

	function ACS_RedMiasmalBehSwitch_Engage()
	{
		this.PushState('ACS_RedMiasmalBehSwitch_Engage');
	}
}

state Spawn_Transformation_Red_Miasmal_Engage in cACS_Spawn_Transformation_Red_Miasmal
{
	private var actor															: CActor;
	private var ent																: CEntity;
	private var temp															: CEntityTemplate;
	private var meshcomp														: CComponent;
	private var animcomp 														: CAnimatedComponent;
	private var h 																: float;
	private var p_comp															: CComponent;
	private var apptemp															: CEntityTemplate;

	var cameraTemplate															: CEntityTemplate;
	var cameraEnt																: CEntity;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		ACSGetCActor('ACS_Transformation_Red_Miasmal').Destroy();
		Spawn_Transformation_Red_Miasmal_Entry();
	}

	entry function Spawn_Transformation_Red_Miasmal_Entry()
	{
		temp = (CEntityTemplate)LoadResource( 

		"dlc\dlc_acs\data\entities\transformation_entities\acs_red_miasmal.w2ent"
			
		, true );

		ent = theGame.CreateEntity( temp, GetWitcherPlayer().GetWorldPosition(), GetWitcherPlayer().GetWorldRotation() );

		animcomp = (CAnimatedComponent)ent.GetComponentByClassName('CAnimatedComponent');
		meshcomp = ent.GetComponentByClassName('CMeshComponent');
		h = 0.875;
		animcomp.SetScale(Vector(h,h,h,1));
		meshcomp.SetScale(Vector(h,h,h,1));	

		((CNewNPC)ent).SetLevel(GetWitcherPlayer().GetLevel());

		((CActor)ent).SetTemporaryAttitudeGroup( 'q104_avallach_friendly_to_all', AGP_Default );
		((CNewNPC)ent).SetTemporaryAttitudeGroup( 'q104_avallach_friendly_to_all', AGP_Default );

		((CNewNPC)ent).SetCanPlayHitAnim(false);

		((CActor)ent).SetImmortalityMode( AIM_Invulnerable, AIC_Default, true );

		((CActor)ent).AddBuffImmunity_AllNegative('ACS_Transformation_Red_Miasmal_Immunity_Negative', true); 
		((CActor)ent).AddBuffImmunity_AllCritical('ACS_Transformation_Red_Miasmal_Immunity_Critical', true); 

		ent.AddTag('ACS_Transformation_Red_Miasmal');

		ACSGetCActor('ACS_Transformation_Red_Miasmal').PlayEffectSingle('evil_appear');
		ACSGetCActor('ACS_Transformation_Red_Miasmal').StopEffect('evil_appear');

		ACSGetCActor('ACS_Transformation_Red_Miasmal').PlayEffectSingle('appear');
		ACSGetCActor('ACS_Transformation_Red_Miasmal').StopEffect('appear');

		GetACSWatcher().CamerasDestroy();

		cameraTemplate = (CEntityTemplate)LoadResource("dlc\dlc_acs\data\entities\other\transformation_camera.w2ent", true);

		cameraEnt = (CStaticCamera)theGame.CreateEntity(cameraTemplate, theCamera.GetCameraPosition(), theCamera.GetCameraRotation());	

		cameraEnt.AddTag('ACS_Transformation_Custom_Camera');
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state ACS_RedMiasmalBehSwitch_Engage in cACS_Spawn_Transformation_Red_Miasmal
{
	var temp						: CEntityTemplate;
	var vampRot, adjustedRot 		: EulerAngles;
	
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Beh_Switch_Entry();
	}

	entry function Beh_Switch_Entry()
	{
		if (!ACSGetCActor('ACS_Transformation_Red_Miasmal').HasTag('ACS_Red_Miasmal_Giant_Mode'))
		{
			if ( ACSGetCActor('ACS_Transformation_Red_Miasmal').GetBehaviorGraphInstanceName() != 'Combat_Giant' )
			{
				ACSGetCActor('ACS_Transformation_Red_Miasmal').ActivateAndSyncBehavior( 'Combat_Giant' );
			}

			ACSGetCActor('ACS_Transformation_Red_Miasmal').AddTag('ACS_Red_Miasmal_Giant_Mode');
		}
		else
		{
			if ( ACSGetCActor('ACS_Transformation_Red_Miasmal').GetBehaviorGraphInstanceName() != 'Exploration' )
			{
				ACSGetCActor('ACS_Transformation_Red_Miasmal').ActivateAndSyncBehavior( 'Exploration' );
			}

			ACSGetCActor('ACS_Transformation_Red_Miasmal').RemoveTag('ACS_Red_Miasmal_Giant_Mode');
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class cACS_Spawn_Transformation_Sharley
{
    function Spawn_Transformation_Sharley_Engage()
	{
		this.PushState('Spawn_Transformation_Sharley_Engage');
	}

	function Sharley_Shockwave_Engage()
	{
		this.PushState('Sharley_Shockwave_Engage');
	}
}

state Spawn_Transformation_Sharley_Engage in cACS_Spawn_Transformation_Sharley
{
	private var actor															: CActor;
	private var ent																: CEntity;
	private var temp															: CEntityTemplate;
	private var meshcomp														: CComponent;
	private var animcomp 														: CAnimatedComponent;
	private var h 																: float;
	private var p_comp															: CComponent;
	private var apptemp															: CEntityTemplate;

	var cameraTemplate															: CEntityTemplate;
	var cameraEnt																: CEntity;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		ACSGetCActor('ACS_Transformation_Sharley').Destroy();
		Spawn_Transformation_Sharley_Entry();
	}

	entry function Spawn_Transformation_Sharley_Entry()
	{
		temp = (CEntityTemplate)LoadResource( 

		"dlc\dlc_acs\data\entities\transformation_entities\acs_sharley.w2ent"
			
		, true );

		ent = theGame.CreateEntity( temp, GetWitcherPlayer().GetWorldPosition(), GetWitcherPlayer().GetWorldRotation() );

		animcomp = (CAnimatedComponent)ent.GetComponentByClassName('CAnimatedComponent');
		meshcomp = ent.GetComponentByClassName('CMeshComponent');
		h = 1;
		animcomp.SetScale(Vector(h,h,h,1));
		meshcomp.SetScale(Vector(h,h,h,1));	

		((CNewNPC)ent).SetLevel(GetWitcherPlayer().GetLevel());

		((CActor)ent).SetTemporaryAttitudeGroup( 'q104_avallach_friendly_to_all', AGP_Default );
		((CNewNPC)ent).SetTemporaryAttitudeGroup( 'q104_avallach_friendly_to_all', AGP_Default );

		((CNewNPC)ent).SetCanPlayHitAnim(false);

		((CActor)ent).SetImmortalityMode( AIM_Invulnerable, AIC_Default, true );

		((CActor)ent).AddBuffImmunity_AllNegative('ACS_Transformation_Sharley_Immunity_Negative', true); 
		((CActor)ent).AddBuffImmunity_AllCritical('ACS_Transformation_Sharley_Immunity_Critical', true); 

		ent.AddTag('ACS_Transformation_Sharley');

		ACSGetCActor('ACS_Transformation_Sharley').PlayEffectSingle('spawn_drop');
		ACSGetCActor('ACS_Transformation_Sharley').StopEffect('spawn_drop');

		ACSGetCActor('ACS_Transformation_Sharley').PlayEffectSingle('smoke_throw_screen');
		ACSGetCActor('ACS_Transformation_Sharley').StopEffect('smoke_throw_screen');

		ACSGetCActor('ACS_Transformation_Sharley').PlayEffectSingle('tremor_start_2');
		ACSGetCActor('ACS_Transformation_Sharley').StopEffect('tremor_start_2');

		ACSGetCActor('ACS_Transformation_Sharley').PlayEffectSingle('glow');

		GetACSWatcher().CamerasDestroy();

		cameraTemplate = (CEntityTemplate)LoadResource("dlc\dlc_acs\data\entities\other\transformation_camera.w2ent", true);

		cameraEnt = (CStaticCamera)theGame.CreateEntity(cameraTemplate, theCamera.GetCameraPosition(), theCamera.GetCameraRotation());	

		cameraEnt.AddTag('ACS_Transformation_Custom_Camera');
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state Sharley_Shockwave_Engage in cACS_Spawn_Transformation_Sharley
{
	private var proj_1																					: W3ACSSharleyShockwave;
	private var targetPosition_1, position																: Vector;
	private var actors																					: array<CActor>;
	private var i         																				: int;
	private var actortarget					       														: CActor;
	private var dmg																						: W3DamageAction;
	private var maxTargetVitality, maxTargetEssence, damageMax											: float;
	private var attackRange, attackAngle 																: float;
	private var tmpBool 																				: bool;
	private var mc 																						: EMonsterCategory;
	private var tmpName 																				: name;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);

		Sharley_Shockwave_Entry();
	}

	entry function Sharley_Shockwave_Entry()
	{
		position = ACSGetCActor('ACS_Transformation_Sharley').GetWorldPosition() + (ACSGetCActor('ACS_Transformation_Sharley').GetWorldForward() * 1.1) + ACSGetCActor('ACS_Transformation_Sharley').GetHeadingVector() * 1.1;
		
		targetPosition_1 = position + ACSGetCActor('ACS_Transformation_Sharley').GetHeadingVector() * 30;

		actors.Clear();

		actors = ACSGetCActor('ACS_Transformation_Sharley').GetNPCsAndPlayersInCone(5, VecHeading(ACSGetCActor('ACS_Transformation_Sharley').GetHeadingVector()), 360, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );
	
		for( i = 0; i < actors.Size(); i += 1 )
		{
			actortarget = (CActor)actors[i];

			if (actortarget == ACSGetCActor('ACS_Transformation_Sharley')
			|| actortarget.HasTag('acs_snow_entity')
			|| actortarget.HasTag('smokeman') 
			|| actortarget.HasTag('ACS_Tentacle_1') 
			|| actortarget.HasTag('ACS_Tentacle_2') 
			|| actortarget.HasTag('ACS_Tentacle_3') 
			|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
			|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
			|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
			|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
			|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
			|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
			|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
			|| actortarget.HasTag('ACS_Chaos_Cloud')
			)
			continue;
			
			if (actortarget.UsesVitality()) 
			{ 
				maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

				damageMax = maxTargetVitality * 0.05; 
			} 
			else if (actortarget.UsesEssence()) 
			{ 
				maxTargetEssence = actortarget.GetStatMax( BCS_Essence );
				
				damageMax = maxTargetEssence * 0.05; 
			} 

			dmg = new W3DamageAction in theGame.damageMgr;
			
			dmg.Initialize(GetWitcherPlayer(), actortarget, GetWitcherPlayer(), GetWitcherPlayer().GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
			
			dmg.SetProcessBuffsIfNoDamage(true);

			dmg.SetForceExplosionDismemberment();
			
			dmg.SetHitReactionType( EHRT_Heavy, true);
			
			dmg.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, damageMax );

			if( !actortarget.IsImmuneToBuff( EET_HeavyKnockdown ) && !actortarget.HasBuff( EET_HeavyKnockdown ) ) 
			{ 
				dmg.AddEffectInfo( EET_HeavyKnockdown, 0.1 );
			}
				
			theGame.damageMgr.ProcessAction( dmg );
				
			delete dmg;	
		}
			
		proj_1 = (W3ACSSharleyShockwave)theGame.CreateEntity( (CEntityTemplate)LoadResource( 

		"dlc\dlc_acs\data\entities\projectiles\sharley_shockwave_proj.w2ent"
		
		, true ), position );

		proj_1.Init(GetWitcherPlayer());
		proj_1.PlayEffectSingle('fire_line');
		proj_1.ShootProjectileAtPosition(0,	20, targetPosition_1, 30 );
		proj_1.DestroyAfter(10);
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class cACS_Spawn_Transformation_Black_Wolf
{
    function Spawn_Transformation_Black_Wolf_Engage()
	{
		this.PushState('Spawn_Transformation_Black_Wolf_Engage');
	}

	function Spawn_Wolf_Summons_Engage()
	{
		this.PushState('Spawn_Wolf_Summons_Engage');
	}
}

state Spawn_Transformation_Black_Wolf_Engage in cACS_Spawn_Transformation_Black_Wolf
{
	private var actor															: CActor;
	private var ent																: CEntity;
	private var temp															: CEntityTemplate;
	private var meshcomp														: CComponent;
	private var animcomp 														: CAnimatedComponent;
	private var h 																: float;
	private var p_comp															: CComponent;
	private var apptemp															: CEntityTemplate;

	var cameraTemplate															: CEntityTemplate;
	var cameraEnt																: CEntity;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		ACSGetCActor('ACS_Transformation_Black_Wolf').Destroy();
		Spawn_Transformation_Black_Wolf_Entry();
	}
	
	entry function Spawn_Transformation_Black_Wolf_Entry()
	{
		temp = (CEntityTemplate)LoadResource( 

		"dlc\dlc_acs\data\entities\transformation_entities\acs_black_wolf.w2ent"
			
		, true );

		ent = theGame.CreateEntity( temp, GetWitcherPlayer().GetWorldPosition(), GetWitcherPlayer().GetWorldRotation() );

		animcomp = (CAnimatedComponent)ent.GetComponentByClassName('CAnimatedComponent');
		meshcomp = ent.GetComponentByClassName('CMeshComponent');
		h = 1.75;
		animcomp.SetScale(Vector(h,h,h,1));
		meshcomp.SetScale(Vector(h,h,h,1));	

		((CNewNPC)ent).SetLevel(GetWitcherPlayer().GetLevel());

		((CActor)ent).SetTemporaryAttitudeGroup( 'q104_avallach_friendly_to_all', AGP_Default );
		((CNewNPC)ent).SetTemporaryAttitudeGroup( 'q104_avallach_friendly_to_all', AGP_Default );

		((CNewNPC)ent).SetCanPlayHitAnim(false);

		((CActor)ent).SetImmortalityMode( AIM_Invulnerable, AIC_Default, true );

		((CActor)ent).AddBuffImmunity_AllNegative('ACS_Transformation_Sharley_Immunity_Negative', true); 
		((CActor)ent).AddBuffImmunity_AllCritical('ACS_Transformation_Sharley_Immunity_Critical', true); 

		ent.AddTag('ACS_Transformation_Black_Wolf');

		ent.AddTag('ACS_Transformation_Black_Wolf_Spawned');

		((CActor)ent).SetInteractionPriority( IP_Max_Unpushable );

		//GetACSWatcher().ACSTransformBlackWolfPlayAnim('wolf_howling_loop', 0.25f, 0.25f);

		//ACSGetCActor('ACS_Transformation_Black_Wolf').PlayEffectSingle('critical_burning_red_alt');

		//ACSGetCActor('ACS_Transformation_Black_Wolf').PlayEffectSingle('critical_burning_red_alt_2');

		ACSGetCActor('ACS_Transformation_Black_Wolf').PlayEffectSingle('shadow_form');

		ACSGetCActor('ACS_Transformation_Black_Wolf').PlayEffectSingle('demonic_posession');

		ACSGetCActor('ACS_Transformation_Black_Wolf').PlayEffectSingle('fire_breath');
		ACSGetCActor('ACS_Transformation_Black_Wolf').StopEffect('fire_breath');

		ACSGetCActor('ACS_Transformation_Black_Wolf').PlayEffectSingle('shadows_form');
		ACSGetCActor('ACS_Transformation_Black_Wolf').StopEffect('shadows_form');

		GetACSWatcher().CamerasDestroy();

		cameraTemplate = (CEntityTemplate)LoadResource("dlc\dlc_acs\data\entities\other\transformation_camera.w2ent", true);

		cameraEnt = (CStaticCamera)theGame.CreateEntity(cameraTemplate, theCamera.GetCameraPosition(), theCamera.GetCameraRotation());	

		cameraEnt.AddTag('ACS_Transformation_Custom_Camera');
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state Spawn_Wolf_Summons_Engage in cACS_Spawn_Transformation_Black_Wolf
{
	private var wolf_temp																		: CEntityTemplate;
	private var wolf_ent																		: CEntity;
	private var actor       																	: CActor;
	private var i, wolfCount																	: int;
	private var actorPos, spawnPos																: Vector;
	private var randAngle, randRange															: float;
	

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);

		Spawn_Wolf_Summons_Entry();
	}

	entry function Spawn_Wolf_Summons_Entry()
	{
		var wolves 											: array<CActor>;
		var j												: int;
		var wolfAnimatedComponent 							: CAnimatedComponent;
	
		wolves.Clear();

		theGame.GetActorsByTag( 'ACS_Transformation_Black_Wolf_Summon', wolves );	

		if (wolves.Size() > 5)
		{

			return;
		}

		wolf_temp = (CEntityTemplate)LoadResource( 

		"dlc\dlc_acs\data\entities\companions\acs_transformation_wolf_summon.w2ent"

		, true );

		actorPos = thePlayer.GetWorldPosition();

		if (wolves.Size() <= 0)
		{
			wolfCount = 6;
		}
		else if (wolves.Size() > 0 && wolves.Size() <= 6)
		{
			wolfCount = 1;
		}
		else if (wolves.Size() > 6)
		{
			return;
		}
		else
		{
			return;
		}

		for( i = 0; i < wolfCount; i += 1 )
		{
			randRange = 2.5 + 2.5 * RandF();
			randAngle = 2 * Pi() * RandF();
			
			spawnPos.X = randRange * CosF( randAngle ) + actorPos.X;
			spawnPos.Y = randRange * SinF( randAngle ) + actorPos.Y;
			spawnPos.Z = actorPos.Z;
			
			wolf_ent = theGame.CreateEntity( wolf_temp, spawnPos, thePlayer.GetWorldRotation() );
			
			//((CNewNPC)wolf_ent).SetLevel(GetWitcherPlayer().GetLevel());
			//((CNewNPC)wolf_ent).SetAttitude(GetWitcherPlayer(), AIA_Friendly);
			//((CNewNPC)wolf_ent).SetTemporaryAttitudeGroup('player', AGP_Default);
			//((CNewNPC)wolf_ent).SetImmortalityMode( AIM_Invulnerable, AIC_Default, true );
			//((CNewNPC)wolf_ent).EnableCharacterCollisions(false);

			//wolf_ent.PlayEffectSingle('shadow_form');
			//wolf_ent.PlayEffectSingle('demonic_possession');
			//wolf_ent.PlayEffectSingle('shadow_form_2');

			wolf_ent.PlayEffectSingle('appear');
			wolf_ent.StopEffect('appear');
			
			wolf_ent.AddTag( 'ACS_Transformation_Black_Wolf_Summon' );

			wolfAnimatedComponent = (CAnimatedComponent)wolf_ent.GetComponentByClassName( 'CAnimatedComponent' );	
		
			wolfAnimatedComponent.PlaySlotAnimationAsync ( 'wolf_attack_closer', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

function ACS_Transformation_Black_Wolf_Summons_Destroy()
{	
	var wolves 											: array<CActor>;
	var i												: int;
	var wolfAnimatedComponent 							: CAnimatedComponent;
	
	wolves.Clear();

	theGame.GetActorsByTag( 'ACS_Transformation_Black_Wolf_Summon', wolves );	

	if (wolves.Size() <= 0)
	{
		return;
	}

	for( i = 0; i < wolves.Size(); i += 1 )
	{
		wolfAnimatedComponent = (CAnimatedComponent)wolves[i].GetComponentByClassName( 'CAnimatedComponent' );	
		
		wolfAnimatedComponent.PlaySlotAnimationAsync ( 'wolf_howling_loop', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.2f, 0.5f));
		
		wolves[i].PlayEffectSingle('disappear');
		wolves[i].DestroyAfter(2);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class cACS_Spawn_Transformation_Giant
{
    function Spawn_Transformation_Giant_Engage()
	{
		this.PushState('Spawn_Transformation_Giant_Engage');
	}

	function TransformationGiantBehSwitch_Engage()
	{
		this.PushState('TransformationGiantBehSwitch_Engage');
	}

	function TransformationGiantBehSwitchReturn_Engage()
	{
		this.PushState('TransformationGiantBehSwitchReturn_Engage');
	}

	function TransformationGiantLightningStrike_Engage()
	{
		this.PushState('TransformationGiantLightningStrike_Engage');
	}

	function TransformationGiantAnchorFarProjectiles_Engage()
	{
		this.PushState('TransformationGiantAnchorFarProjectiles_Engage');
	}

	function TransformationGiantAnchorProjectiles_Engage()
	{
		this.PushState('TransformationGiantAnchorProjectiles_Engage');
	}

	function TransformationGiantElectricBlastSmall_Engage()
	{
		this.PushState('TransformationGiantElectricBlastSmall_Engage');
	}

	function TransformationGiantElectricBlast_Engage()
	{
		this.PushState('TransformationGiantElectricBlast_Engage');
	}

	function TransformationGiantStompHeavyProjectiles_Engage()
	{
		this.PushState('TransformationGiantStompHeavyProjectiles_Engage');
	}

	function TransformationGiantKickProjectiles_Engage()
	{
		this.PushState('TransformationGiantKickProjectiles_Engage');
	}

	function TransformationGiantElectricProjectiles_Engage()
	{
		this.PushState('TransformationGiantElectricProjectiles_Engage');
	}

	function TransformationGiantElectricProjectilesSingle_Engage()
	{
		this.PushState('TransformationGiantElectricProjectilesSingle_Engage');
	}
}

state Spawn_Transformation_Giant_Engage in cACS_Spawn_Transformation_Giant
{
	private var actor															: CActor;
	private var ent																: CEntity;
	private var temp															: CEntityTemplate;
	private var meshcomp														: CComponent;
	private var animcomp 														: CAnimatedComponent;
	private var h 																: float;
	private var p_comp															: CComponent;
	private var apptemp															: CEntityTemplate;

	var cameraTemplate															: CEntityTemplate;
	var cameraEnt																: CEntity;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		ACSGetCActor('ACS_Transformation_Giant').Destroy();
		Spawn_Transformation_Giant_Entry();
	}
	
	entry function Spawn_Transformation_Giant_Entry()
	{
		temp = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\entities\transformation_entities\acs_giant.w2ent"
			
		, true );

		ent = theGame.CreateEntity( temp, GetWitcherPlayer().GetWorldPosition(), GetWitcherPlayer().GetWorldRotation() );

		animcomp = (CAnimatedComponent)ent.GetComponentByClassName('CAnimatedComponent');
		meshcomp = ent.GetComponentByClassName('CMeshComponent');
		h = 1;
		animcomp.SetScale(Vector(h,h,h,1));
		meshcomp.SetScale(Vector(h,h,h,1));	

		((CNewNPC)ent).SetLevel(GetWitcherPlayer().GetLevel());

		//((CActor)ent).SetTemporaryAttitudeGroup( 'q104_avallach_friendly_to_all', AGP_Default );
		//((CNewNPC)ent).SetTemporaryAttitudeGroup( 'q104_avallach_friendly_to_all', AGP_Default );

		//((CNewNPC)ent).SetCanPlayHitAnim(false);

		//((CActor)ent).SetImmortalityMode( AIM_Immortal, AIC_Default, true );

		((CActor)ent).AddBuffImmunity_AllNegative('ACS_Transformation_Giant_Immunity_Negative', true); 
		((CActor)ent).AddBuffImmunity_AllCritical('ACS_Transformation_Giant_Immunity_Critical', true); 

		ent.AddTag('ACS_Transformation_Giant');

		ent.AddTag('ACS_Transformation_Giant_Spawned');

		if (!ACSGetCActor('ACS_Transformation_Giant').HasTag('ACS_Transformation_Giant_Anim_Initiated'))
		{
			GetACSWatcher().ACSTransformationGiantPlayAnim( 'giant_sleep_idle_to_idle_acs_ice_giant', 0.25f, 0.325f);

			ACSGetCActor('ACS_Transformation_Giant').AddTag('ACS_Transformation_Giant_Anim_Initiated');
		}
			
		//((CAnimatedComponent)((CNewNPC)ACSGetCActor('ACS_Transformation_Giant')).GetComponentByClassName( 'CAnimatedComponent' )).RaiseBehaviorForceEvent('TauntOverride');

		((CActor)ent).SetInteractionPriority( IP_Max_Unpushable );

		GetACSWatcher().CamerasDestroy();

		cameraTemplate = (CEntityTemplate)LoadResource("dlc\dlc_acs\data\entities\other\transformation_camera.w2ent", true);

		cameraEnt = (CStaticCamera)theGame.CreateEntity(cameraTemplate, theCamera.GetCameraPosition(), theCamera.GetCameraRotation());	

		cameraEnt.AddTag('ACS_Transformation_Custom_Camera');
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state TransformationGiantBehSwitch_Engage in cACS_Spawn_Transformation_Giant
{
	var p_actor 																						: CActor;
	var p_comp																							: CComponent;
	var temp																							: CEntityTemplate;
	var taunt_anim_names																				: array<name>;
	var ent_1, ent_2, ent_3, ent_4																		: CEntity;
	var attach_rot                  																	: EulerAngles;
    var attach_vec																						: Vector;
	var l_comp 																							: array< CComponent >;
	var size, j 																						: int;
	var weapon_template_1, anchor_template_1, weapon_template_2, anchor_template_2 						: CEntityTemplate;
	
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Beh_Switch_Entry();
	}
	
	entry function Beh_Switch_Entry()
	{
		p_actor = ACSGetCActor('ACS_Transformation_Giant');

		p_comp = p_actor.GetComponentByClassName( 'CAppearanceComponent' );

		if (thePlayer.IsInCombat())
		{
			GetACSWatcher().ACSTransformationGiantMovementAdjust('rotatetoenemy', true);
		}

		GetACSWatcher().ACSTransformationGiantRemoveMoveTimers();

		if (!ACSGetCActor('ACS_Transformation_Giant').HasTag('ACS_Transformation_Giant_Weapon_Mode'))
		{
			if ( ACSGetCActor('ACS_Transformation_Giant').GetBehaviorGraphInstanceName() != 'Combat_Weapon' )
			{
				ACSGetCActor('ACS_Transformation_Giant').ActivateAndSyncBehavior( 'Combat_Weapon' );
			}

			ACSGetCActor('ACS_Transformation_Giant').SetVisibility(false);
			GetACSWatcher().RemoveTimer('TransformationGiantReveal');
			GetACSWatcher().AddTimer('TransformationGiantReveal', 0.125, false);

			taunt_anim_names.Clear();

			taunt_anim_names.PushBack('giant_combat_anchor_taunt_1_acs_ice_giant');
			taunt_anim_names.PushBack('giant_combat_anchor_taunt_2_acs_ice_giant');

			if (!ACSGetCActor('ACS_Transformation_Giant').HasTag('ACS_Transformation_Giant_Anim_Initiated'))
			{
				GetACSWatcher().ACSTransformationGiantPlayAnim(taunt_anim_names[RandRange(taunt_anim_names.Size())], 0.125f, 0.125f);

				ACSGetCActor('ACS_Transformation_Giant').AddTag('ACS_Transformation_Giant_Anim_Initiated');
			}

			l_comp = ((CActor)ACSGetCActor('ACS_Transformation_Giant')).GetComponentsByClassName( 'CMorphedMeshManagerComponent' );
			size = l_comp.Size();

			for ( j=0; j<size; j+= 1 )
			{
				((CMorphedMeshManagerComponent)l_comp[ j ]).SetMorphBlend( 1, 0.001 );
			}

			weapon_template_1 = (CEntityTemplate)LoadResourceAsync(
				"dlc\dlc_acs\data\models\transformation_giant\transformation_giant_weapon.w2ent"
				, true);

			anchor_template_1 = (CEntityTemplate)LoadResourceAsync(
				"items\weapons\unique\giant_weapon\anchor_01__giant_weapon.w2ent"
				, true);

			weapon_template_2 = (CEntityTemplate)LoadResourceAsync(
				"dlc\dlc_acs\data\models\transformation_giant\transformation_giant_weapon_secondary.w2ent"
				, true);

			anchor_template_2 = (CEntityTemplate)LoadResourceAsync(
				//"items\weapons\unique\giant_weapon\anchor_01__giant_weapon.w2ent"
				"dlc\dlc_acs\data\models\transformation_giant\transformation_giant_weapon_tertiary.w2ent"
				, true);

			ent_1 = theGame.CreateEntity( weapon_template_1, ACSGetCActor('ACS_Transformation_Giant').GetWorldPosition(), ACSGetCActor('ACS_Transformation_Giant').GetWorldRotation() );

			ent_1.CreateAttachment(ACSGetCActor('ACS_Transformation_Giant'), 'r_weapon');

			ent_1.AddTag('ACS_Transformation_Giant_Weapon_Primary_R');

			ent_2 = theGame.CreateEntity( anchor_template_1, ACSGetCActor('ACS_Transformation_Giant').GetWorldPosition(), ACSGetCActor('ACS_Transformation_Giant').GetWorldRotation() );

			attach_rot.Roll = 0;
			attach_rot.Pitch = 0;
			attach_rot.Yaw = 0;

			attach_vec.X = 0;
			attach_vec.Y = 0;
			attach_vec.Z = -0.125;

			ent_2.CreateAttachment(ACSGetCActor('ACS_Transformation_Giant'), 'r_weapon', attach_vec, attach_rot);

			ent_2.AddTag('ACS_Transformation_Giant_Weapon_Secondary_R');


			ent_3 = theGame.CreateEntity( weapon_template_2, ACSGetCActor('ACS_Transformation_Giant').GetWorldPosition(), ACSGetCActor('ACS_Transformation_Giant').GetWorldRotation() );

			attach_rot.Roll = -157.5;
			attach_rot.Pitch = 0;
			attach_rot.Yaw = 180;

			attach_vec.X = 0.5;
			attach_vec.Y = 0.25;
			attach_vec.Z = 0;

			ent_3.CreateAttachment(ACSGetCActor('ACS_Transformation_Giant'), 'l_weapon', attach_vec, attach_rot);

			ent_3.AddTag('ACS_Transformation_Giant_Weapon_Primary_L');

			ent_4 = theGame.CreateEntity( anchor_template_2, ACSGetCActor('ACS_Transformation_Giant').GetWorldPosition(), ACSGetCActor('ACS_Transformation_Giant').GetWorldRotation() );

			ent_4.CreateAttachment(ACSGetCActor('ACS_Transformation_Giant'), 'l_weapon', attach_vec, attach_rot);

			ent_4.AddTag('ACS_Transformation_Giant_Weapon_Secondary_L');












			if (ACSGetCEntity('ACS_Transformation_Giant_Back_Weapons').IsEffectActive('discharge'))
			{
				ACSGetCEntity('ACS_Transformation_Giant_Back_Weapons').StopEffect('discharge');
			}

			if (!ACSGetCEntity('ACS_Transformation_Giant_Back_Weapons').IsEffectActive('discharge_ascended'))
			{
				ACSGetCEntity('ACS_Transformation_Giant_Back_Weapons').PlayEffect('discharge_ascended');
			}

			ACSGetCActor('ACS_Transformation_Giant').AddTag('ACS_Transformation_Giant_Weapon_Mode');
		}
		else
		{
			if ( ACSGetCActor('ACS_Transformation_Giant').GetBehaviorGraphInstanceName() != 'Combat' )
			{
				ACSGetCActor('ACS_Transformation_Giant').ActivateAndSyncBehavior( 'Combat' );
			}

			thePlayer.GainStat(BCS_Vitality, thePlayer.GetStatMax(BCS_Vitality) * 0.33);

			ACSGetCActor('ACS_Transformation_Giant').SetVisibility(false);
			GetACSWatcher().RemoveTimer('TransformationGiantReveal');
			GetACSWatcher().AddTimer('TransformationGiantReveal', 0.125, false);

			l_comp = ((CActor)ACSGetCActor('ACS_Transformation_Giant')).GetComponentsByClassName( 'CMorphedMeshManagerComponent' );
			size = l_comp.Size();

			for ( j=0; j<size; j+= 1 )
			{
				((CMorphedMeshManagerComponent)l_comp[ j ]).SetMorphBlend( 0, 0.001 );
			}

			((CAnimatedComponent)((CNewNPC)ACSGetCActor('ACS_Transformation_Giant')).GetComponentByClassName( 'CAnimatedComponent' )).RaiseBehaviorForceEvent('TauntOverride');

			ACSGetCEntity('ACS_Transformation_Giant_Weapon_Primary_R').Destroy();

			ACSGetCEntity('ACS_Transformation_Giant_Weapon_Secondary_R').Destroy();

			ACSGetCEntity('ACS_Transformation_Giant_Weapon_Primary_L').Destroy();

			ACSGetCEntity('ACS_Transformation_Giant_Weapon_Secondary_L').Destroy();

			if (ACSGetCEntity('ACS_Transformation_Giant_Back_Weapons').IsEffectActive('discharge_ascended'))
			{
				ACSGetCEntity('ACS_Transformation_Giant_Back_Weapons').StopEffect('discharge_ascended');
			}

			if (!ACSGetCEntity('ACS_Transformation_Giant_Back_Weapons').IsEffectActive('discharge'))
			{
				ACSGetCEntity('ACS_Transformation_Giant_Back_Weapons').PlayEffect('discharge');
			}

			ACSGetCActor('ACS_Transformation_Giant').RemoveTag('ACS_Transformation_Giant_Weapon_Mode');
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state TransformationGiantBehSwitchReturn_Engage in cACS_Spawn_Transformation_Giant
{
	var taunt_anim_names			: array<name>;
	var ent        					: CEntity;
	var l_comp 						: array< CComponent >;
	var size, j 					: int;
	
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Beh_Switch_Return_Entry();
	}
	
	entry function Beh_Switch_Return_Entry()
	{
		if (thePlayer.IsInCombat())
		{
			GetACSWatcher().ACSTransformationGiantMovementAdjust('rotatetoenemy', true);
		}

		GetACSWatcher().ACSTransformationGiantRemoveMoveTimers();

		if (ACSGetCActor('ACS_Transformation_Giant').HasTag('ACS_Transformation_Giant_Weapon_Mode'))
		{
			if ( ACSGetCActor('ACS_Transformation_Giant').GetBehaviorGraphInstanceName() != 'Combat' )
			{
				ACSGetCActor('ACS_Transformation_Giant').ActivateAndSyncBehavior( 'Combat' );
			}

			l_comp = ((CActor)ACSGetCActor('ACS_Transformation_Giant')).GetComponentsByClassName( 'CMorphedMeshManagerComponent' );
			size = l_comp.Size();

			for ( j=0; j<size; j+= 1 )
			{
				((CMorphedMeshManagerComponent)l_comp[ j ]).SetMorphBlend( 0, 0.001 );
			}

			thePlayer.GainStat(BCS_Vitality, thePlayer.GetStatMax(BCS_Vitality) * 0.33);

			ACSGetCActor('ACS_Transformation_Giant').SetVisibility(false);
			GetACSWatcher().RemoveTimer('TransformationGiantReveal');
			GetACSWatcher().AddTimer('TransformationGiantReveal', 0.25, false);

			/*
			taunt_anim_names.Clear();

			taunt_anim_names.PushBack('giant_combat_taunt_6_acs_ice_giant');
			taunt_anim_names.PushBack('giant_combat_taunt_1_acs_ice_giant');
			taunt_anim_names.PushBack('giant_combat_taunt_2_acs_ice_giant');
			taunt_anim_names.PushBack('giant_combat_taunt_3_acs_ice_giant');
			taunt_anim_names.PushBack('giant_combat_taunt_4_acs_ice_giant');
			taunt_anim_names.PushBack('giant_combat_taunt_5_acs_ice_giant');

			GetACSWatcher().ACSTransformationGiantPlayAnim(taunt_anim_names[RandRange(taunt_anim_names.Size())], 0.125f, 0.125f);
			*/

			//((CNewNPC)ACSGetCActor('ACS_Transformation_Giant')).SetBehaviorVariable( 'npcFightStage', 1, true );

			((CAnimatedComponent)((CNewNPC)ACSGetCActor('ACS_Transformation_Giant')).GetComponentByClassName( 'CAnimatedComponent' )).RaiseBehaviorForceEvent('TauntOverride');

			ACSGetCEntity('ACS_Transformation_Giant_Weapon_Primary_R').Destroy();

			ACSGetCEntity('ACS_Transformation_Giant_Weapon_Secondary_R').Destroy();

			ACSGetCEntity('ACS_Transformation_Giant_Weapon_Primary_L').Destroy();

			ACSGetCEntity('ACS_Transformation_Giant_Weapon_Secondary_L').Destroy();

			if (ACSGetCEntity('ACS_Transformation_Giant_Back_Weapons').IsEffectActive('discharge_ascended'))
			{
				ACSGetCEntity('ACS_Transformation_Giant_Back_Weapons').StopEffect('discharge_ascended');
			}

			if (!ACSGetCEntity('ACS_Transformation_Giant_Back_Weapons').IsEffectActive('discharge'))
			{
				ACSGetCEntity('ACS_Transformation_Giant_Back_Weapons').PlayEffect('discharge');
			}

			ACSGetCActor('ACS_Transformation_Giant').RemoveTag('ACS_Transformation_Giant_Weapon_Mode');
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state TransformationGiantLightningStrike_Engage in cACS_Spawn_Transformation_Giant
{
	var temp, temp_2, temp_3, temp_4, temp_5									: CEntityTemplate;
	var ent, ent_1, ent_2, ent_3, ent_4, ent_5									: CEntity;
	var i, count, count_2, j, k													: int;
	var playerPos, spawnPos, spawnPos2, posAdjusted, posAdjusted2, entPos		: Vector;
	var randAngle, randRange, randAngle_2, randRange_2, distance				: float;
	var adjustedRot, playerRot2													: EulerAngles;
	var actors    																: array<CActor>;
	var actor    																: CActor;
	var dmg																		: W3DamageAction;
	var world																	: CWorld;
	var damage 																	: float;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Lightning_Strike_Mult_Entry();
	}

	entry function Lightning_Strike_Mult_Entry()
	{
		temp = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\fx\giant_lightning_strike.w2ent"
			
		, true );

		temp_2 = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\fx\custom_lightning.w2ent"
			
		, true );

		temp_3 = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\fx\custom_lightning_lights.w2ent"
			
		, true );

		temp_4 = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\fx\q603_08_fire_01.w2ent"
			
		, true );

		temp_5 = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\fx\acs_guiding_wind.w2ent"
			
		, true );

		playerPos = ACSGetCActor('ACS_Transformation_Giant').GetWorldPosition();

		adjustedRot = EulerAngles(0,0,0);

		adjustedRot.Yaw = RandRangeF(360,1);
		adjustedRot.Pitch = RandRangeF(22.5,-22.5);

		playerRot2 = EulerAngles(0,0,0);
		playerRot2.Yaw = RandRangeF(360,1);

		ent = theGame.CreateEntity( temp_3, playerPos, EulerAngles(0,0,0) );

		ent.PlayEffectSingle('lights');

		ent.DestroyAfter(1);
		
		count = 5;

		distance = 5;
			
		for( i = 0; i < count; i += 1 )
		{
			randRange = distance + distance * RandF();
			randAngle = 2 * Pi() * RandF();
			
			spawnPos.X = randRange * CosF( randAngle ) + playerPos.X;
			spawnPos.Y = randRange * SinF( randAngle ) + playerPos.Y;
			//spawnPos.Z = playerPos.Z;

			posAdjusted = ACSPlayerFixZAxis(spawnPos);

			ent_1 = theGame.CreateEntity( temp, posAdjusted, adjustedRot );

			ent_1.PlayEffectSingle('pre_lightning');
			ent_1.PlayEffectSingle('lightning');

			ent_1.DestroyAfter(10);


			ent_2 = theGame.CreateEntity( temp_2, posAdjusted, playerRot2 );

			ent_2.PlayEffectSingle('lighgtning');

			ent_2.DestroyAfter(10);


			ent_3 = theGame.CreateEntity( temp_2, posAdjusted, adjustedRot );

			ent_3.PlayEffectSingle('lighgtning');

			ent_3.DestroyAfter(10);


			theGame.GetSurfacePostFX().AddSurfacePostFXGroup( posAdjusted, 0.5f, 10.5f, 0.5f, 7.f, 1);

			count_2 = 12;

			for( j = 0; j < count_2; j += 1 )
			{
				randRange_2 = 2 + 2 * RandF();
				randAngle_2 = 2 * Pi() * RandF();
				
				spawnPos2.X = randRange_2 * CosF( randAngle_2 ) + posAdjusted.X;
				spawnPos2.Y = randRange_2 * SinF( randAngle_2 ) + posAdjusted.Y;
				spawnPos2.Z = posAdjusted.Z;

				posAdjusted2 = ACSPlayerFixZAxis(spawnPos2);

				ent_4 = theGame.CreateEntity( temp_4, posAdjusted2, EulerAngles(0,0,0) );

				if (RandF() < 0.5)
				{
					ent_4.PlayEffectSingle('explosion');
					ent_4.StopEffect('explosion');
				}
				else
				{
					if (RandF() < 0.5)
					{
						ent_4.PlayEffectSingle('explosion_big');
						ent_4.StopEffect('explosion_big');
					}
					else
					{
						ent_4.PlayEffectSingle('explosion_medium');
						ent_4.StopEffect('explosion_medium');
					}
				}

				ent_4.DestroyAfter(20);
			}
		}

		//GetACSWatcher().RemoveTimer('Thunder_Sounds');
		//GetACSWatcher().AddTimer('Thunder_Sounds', 1, false);

		thePlayer.SoundEvent( "fx_amb_thunder_close" );

		thePlayer.SoundEvent( "qu_nml_103_lightning" );
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state TransformationGiantAnchorFarProjectiles_Engage in cACS_Spawn_Transformation_Giant
{
	var proj_fire_1, proj_fire_2, proj_fire_3																								: W3ACSFireLine;
	var proj_stone_1, proj_stone_2, proj_stone_3																							: W3ACSRockLine;
	var targetPosition_1,targetPosition_2, targetPosition_3, position																		: Vector;
	var fireLineTemp, rockLineTemp																											: CEntityTemplate;
	
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		TransformationGiantAnchorFarProjectiles_Entry();
	}

	entry function TransformationGiantAnchorFarProjectiles_Entry()
	{
		position = ACSGetCActor('ACS_Transformation_Giant').GetWorldPosition() + (ACSGetCActor('ACS_Transformation_Giant').GetWorldForward() * 2) + ACSGetCActor('ACS_Transformation_Giant').GetHeadingVector() * 2;

		targetPosition_1 = position + ACSGetCActor('ACS_Transformation_Giant').GetHeadingVector() * 30;

		targetPosition_2 = position + ACSGetCActor('ACS_Transformation_Giant').GetWorldRight() * 15 + ACSGetCActor('ACS_Transformation_Giant').GetHeadingVector() * 30;

		targetPosition_3 = position  +ACSGetCActor('ACS_Transformation_Giant'). GetWorldRight() * -15 + ACSGetCActor('ACS_Transformation_Giant').GetHeadingVector() * 30;

		fireLineTemp = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\elemental_ifryt_proj.w2ent", true );

		rockLineTemp = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\elemental_dao_proj.w2ent", true );

		proj_fire_1 = (W3ACSFireLine)theGame.CreateEntity( fireLineTemp, position );
		proj_fire_1.Init(GetWitcherPlayer());
		proj_fire_1.PlayEffectSingle('fire_line');
		proj_fire_1.ShootProjectileAtPosition(0,	50, targetPosition_1, 30 );
		proj_fire_1.DestroyAfter(10);

		proj_fire_2 = (W3ACSFireLine)theGame.CreateEntity( fireLineTemp, position );
		proj_fire_2.Init(GetWitcherPlayer());
		proj_fire_2.PlayEffectSingle('fire_line');
		proj_fire_2.ShootProjectileAtPosition(0,	50, targetPosition_2, 30 );
		proj_fire_2.DestroyAfter(10);

		proj_fire_3 = (W3ACSFireLine)theGame.CreateEntity( fireLineTemp, position );
		proj_fire_3.Init(GetWitcherPlayer());
		proj_fire_3.PlayEffectSingle('fire_line');
		proj_fire_3.ShootProjectileAtPosition(0,	50, targetPosition_3, 30 );
		proj_fire_3.DestroyAfter(10);

		proj_stone_1 = (W3ACSRockLine)theGame.CreateEntity( rockLineTemp, position );
		proj_stone_1.Init(GetWitcherPlayer());
		proj_stone_1.PlayEffectSingle('fire_line');
		proj_stone_1.ShootProjectileAtPosition(0,	50, targetPosition_1, 30 );
		proj_stone_1.DestroyAfter(10);

		proj_stone_2 = (W3ACSRockLine)theGame.CreateEntity( rockLineTemp, position );
		proj_stone_2.Init(GetWitcherPlayer());
		proj_stone_2.PlayEffectSingle('fire_line');
		proj_stone_2.ShootProjectileAtPosition(0,	50, targetPosition_2, 30 );
		proj_stone_2.DestroyAfter(10);

		proj_stone_3 = (W3ACSRockLine)theGame.CreateEntity( rockLineTemp, position );
		proj_stone_3.Init(GetWitcherPlayer());
		proj_stone_3.PlayEffectSingle('fire_line');
		proj_stone_3.ShootProjectileAtPosition(0,	50, targetPosition_3, 30 );
		proj_stone_3.DestroyAfter(10);
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state TransformationGiantAnchorProjectiles_Engage in cACS_Spawn_Transformation_Giant
{
	var proj_fire_1																								: W3ACSFireLine;
	var proj_stone_1																							: W3ACSRockLine;
	var targetPosition_1, position																				: Vector;
	var fireLineTemp, rockLineTemp																				: CEntityTemplate;
	
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		TransformationGiantAnchorProjectiles_Entry();
	}

	entry function TransformationGiantAnchorProjectiles_Entry()
	{
		position = ACSGetCActor('ACS_Transformation_Giant').GetWorldPosition() + (ACSGetCActor('ACS_Transformation_Giant').GetWorldForward() * 2) + ACSGetCActor('ACS_Transformation_Giant').GetHeadingVector() * 2;

		targetPosition_1 = position + ACSGetCActor('ACS_Transformation_Giant').GetHeadingVector() * 30;

		fireLineTemp = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\elemental_ifryt_proj.w2ent", true );

		rockLineTemp = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\elemental_dao_proj.w2ent", true );

		proj_fire_1 = (W3ACSFireLine)theGame.CreateEntity( fireLineTemp, position );
		proj_fire_1.Init(GetWitcherPlayer());
		proj_fire_1.PlayEffectSingle('fire_line');
		proj_fire_1.ShootProjectileAtPosition(0,	50, targetPosition_1, 30 );
		proj_fire_1.DestroyAfter(10);

		proj_stone_1 = (W3ACSRockLine)theGame.CreateEntity( rockLineTemp, position );
		proj_stone_1.Init(GetWitcherPlayer());
		proj_stone_1.PlayEffectSingle('fire_line');
		proj_stone_1.ShootProjectileAtPosition(0,	50, targetPosition_1, 30 );
		proj_stone_1.DestroyAfter(10);
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state TransformationGiantElectricBlastSmall_Engage in cACS_Spawn_Transformation_Giant
{
	var position																															: Vector;
	var ent																																	: CEntity;
	

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		TransformationGiantElectricBlastSmall_Entry();
	}

	entry function TransformationGiantElectricBlastSmall_Entry()
	{
		thePlayer.SoundEvent("magic_sorceress_vfx_hit_electric");

		thePlayer.SoundEvent("magic_sorceress_vfx_lightning_bolt");

		position = ACSGetCActor('ACS_Transformation_Giant').GetWorldPosition() 
		+ (ACSGetCActor('ACS_Transformation_Giant').GetWorldForward() * 1.1) 
		+ ACSGetCActor('ACS_Transformation_Giant').GetHeadingVector() * 1.1;

		ent = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\transformation_giant\blast_fx\transformation_giant_blast.w2ent", true ), position );
		ent.PlayEffectSingle('blast_lv2_small');
		ent.PlayEffectSingle('blast_lv0_small');
		ent.PlayEffectSingle('lightning_area');

		ent.DestroyAfter(10);
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state TransformationGiantElectricBlast_Engage in cACS_Spawn_Transformation_Giant
{
	var position																															: Vector;
	var ent																																	: CEntity;
	

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		TransformationGiantElectricBlast_Entry();
	}

	entry function TransformationGiantElectricBlast_Entry()
	{
		thePlayer.SoundEvent("magic_sorceress_vfx_hit_electric");

		thePlayer.SoundEvent("magic_sorceress_vfx_lightning_bolt");

		position = ACSGetCActor('ACS_Transformation_Giant').GetWorldPosition() 
		+ (ACSGetCActor('ACS_Transformation_Giant').GetWorldForward() * 1.1) 
		+ ACSGetCActor('ACS_Transformation_Giant').GetHeadingVector() * 1.1;

		position.Z += 2;

		ent = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\transformation_giant\blast_fx\transformation_giant_blast.w2ent", true ), position );
		ent.PlayEffectSingle('blast_lv2');
		ent.PlayEffectSingle('blast_lv0');
		ent.PlayEffectSingle('lightning_area');

		ent.DestroyAfter(10);
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state TransformationGiantStompHeavyProjectiles_Engage in cACS_Spawn_Transformation_Giant
{
	var proj_1, proj_2, proj_3																												: W3ACSSharleyShockwave;
	var proj_stone_1, proj_stone_2, proj_stone_3																							: W3ACSRockLine;
	var targetPosition_1,targetPosition_2, targetPosition_3, position																		: Vector;
	var sharleyShockwaveTemp, rockLineTemp																									: CEntityTemplate;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		TransformationGiantStompHeavyProjectiles_Entry();
	}

	entry function TransformationGiantStompHeavyProjectiles_Entry()
	{
		if ( !theSound.SoundIsBankLoaded("monster_golem_dao.bnk") )
		{
			theSound.SoundLoadBank( "monster_golem_dao.bnk", false );
		}
		
		GetWitcherPlayer().SoundEvent("monster_golem_dao_cmb_swoosh_light");

		position = ACSGetCActor('ACS_Transformation_Giant').GetWorldPosition() 
		+ (ACSGetCActor('ACS_Transformation_Giant').GetWorldForward() * 1.1) 
		+ ACSGetCActor('ACS_Transformation_Giant').GetHeadingVector() * 1.1;

		targetPosition_1 = position + ACSGetCActor('ACS_Transformation_Giant').GetHeadingVector() * 30;

		targetPosition_2 = position + ACSGetCActor('ACS_Transformation_Giant').GetWorldRight() * 15 + ACSGetCActor('ACS_Transformation_Giant').GetHeadingVector() * 30;

		targetPosition_3 = position + ACSGetCActor('ACS_Transformation_Giant').GetWorldRight() * -15 + ACSGetCActor('ACS_Transformation_Giant').GetHeadingVector() * 30;

		sharleyShockwaveTemp = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\sharley_shockwave_proj.w2ent", true );

		rockLineTemp = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\elemental_dao_proj.w2ent", true );

		proj_1 = (W3ACSSharleyShockwave)theGame.CreateEntity( sharleyShockwaveTemp, position );
		proj_1.Init(GetWitcherPlayer());
		proj_1.PlayEffectSingle('fire_line');
		proj_1.ShootProjectileAtPosition(0,	50, targetPosition_1, 60 );
		proj_1.DestroyAfter(5);

		proj_2 = (W3ACSSharleyShockwave)theGame.CreateEntity( sharleyShockwaveTemp, position );
		proj_2.Init(GetWitcherPlayer());
		proj_2.PlayEffectSingle('fire_line');
		proj_2.ShootProjectileAtPosition(0,	50, targetPosition_2, 60 );
		proj_2.DestroyAfter(5);

		proj_3 = (W3ACSSharleyShockwave)theGame.CreateEntity( sharleyShockwaveTemp, position );
		proj_3.Init(GetWitcherPlayer());
		proj_3.PlayEffectSingle('fire_line');
		proj_3.ShootProjectileAtPosition(0,	50, targetPosition_3, 60 );
		proj_3.DestroyAfter(5);

		proj_stone_1 = (W3ACSRockLine)theGame.CreateEntity( rockLineTemp, position );
		proj_stone_1.Init(GetWitcherPlayer());
		proj_stone_1.PlayEffectSingle('fire_line');
		proj_stone_1.ShootProjectileAtPosition(0,	50, targetPosition_1, 30 );
		proj_stone_1.DestroyAfter(10);

		proj_stone_2 = (W3ACSRockLine)theGame.CreateEntity( rockLineTemp, position );
		proj_stone_2.Init(GetWitcherPlayer());
		proj_stone_2.PlayEffectSingle('fire_line');
		proj_stone_2.ShootProjectileAtPosition(0,	50, targetPosition_2, 30 );
		proj_stone_2.DestroyAfter(10);

		proj_stone_3 = (W3ACSRockLine)theGame.CreateEntity( rockLineTemp, position );
		proj_stone_3.Init(GetWitcherPlayer());
		proj_stone_3.PlayEffectSingle('fire_line');
		proj_stone_3.ShootProjectileAtPosition(0,	50, targetPosition_3, 30 );
		proj_stone_3.DestroyAfter(10);
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state TransformationGiantKickProjectiles_Engage in cACS_Spawn_Transformation_Giant
{
	var proj_1																																: W3ACSSharleyShockwave;
	var targetPosition_1, position																											: Vector;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		TransformationGiantKickProjectiles_Entry();
	}

	entry function TransformationGiantKickProjectiles_Entry()
	{
		if ( !theSound.SoundIsBankLoaded("monster_golem_dao.bnk") )
		{
			theSound.SoundLoadBank( "monster_golem_dao.bnk", false );
		}
		
		GetWitcherPlayer().SoundEvent("monster_golem_dao_cmb_swoosh_light");

		position = ACSGetCActor('ACS_Transformation_Giant').GetWorldPosition() 
		+ (ACSGetCActor('ACS_Transformation_Giant').GetWorldForward() * 1.1) 
		+ ACSGetCActor('ACS_Transformation_Giant').GetHeadingVector() * 1.1;

		targetPosition_1 = position + ACSGetCActor('ACS_Transformation_Giant').GetHeadingVector() * 30;

		proj_1 = (W3ACSSharleyShockwave)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\sharley_shockwave_proj.w2ent", true ), position );
		proj_1.Init(GetWitcherPlayer());
		proj_1.PlayEffectSingle('fire_line');
		proj_1.ShootProjectileAtPosition(0,	50, targetPosition_1, 60 );
		proj_1.DestroyAfter(5);
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state TransformationGiantElectricProjectiles_Engage in cACS_Spawn_Transformation_Giant
{
	var proj_1, proj_2																																				: W3ACSTransformationGiantElectricSpear;
	var targetPosition_1, targetPosition_2, bone_vec, position																										: Vector;
	var spearTemp																																					: CEntityTemplate;
	var bone_rot 																																					: EulerAngles;
	var collidedActor 																																				: CActor;
	var actors 																																						: array< CActor >;
	var i 																																							: int;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		TransformationGiantElectricProjectiles_Entry();
	}

	entry function TransformationGiantElectricProjectiles_Entry()
	{
		ACSGetCActor('ACS_Transformation_Giant').GetBoneWorldPositionAndRotationByIndex( ACSGetCActor('ACS_Transformation_Giant').GetBoneIndex( 'l_weapon' ), bone_vec, bone_rot );
		
		position = bone_vec;

		spearTemp = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\transformation_giant_electric_spear.w2ent", true );

		ACSGetCActor('ACS_Transformation_Giant').StopEffect('lightning_l');

		ACSGetCActor('ACS_Transformation_Giant').PlayEffect('prepare_attack_l');

		ACSGetCActor('ACS_Transformation_Giant').StopEffect('prepare_attack_l');

		ACSGetCActor('ACS_Transformation_Giant').PlayEffect('prepare_attack_l');

		actors.Clear();

		actors = ACSGetCActor('ACS_Transformation_Giant').GetNPCsAndPlayersInCone(50, VecHeading(ACSGetCActor('ACS_Transformation_Giant').GetHeadingVector()), 90, 10, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors);

		actors.Remove( ACSGetCActor('ACS_Transformation_Giant') );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				collidedActor = (CActor)actors[i];

				if (collidedActor == this
				|| collidedActor.HasTag('acs_snow_entity')
				|| collidedActor.HasTag('smokeman') 
				|| collidedActor.HasTag('ACS_Tentacle_1') 
				|| collidedActor.HasTag('ACS_Tentacle_2') 
				|| collidedActor.HasTag('ACS_Tentacle_3') 
				|| collidedActor.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| collidedActor.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| collidedActor.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| collidedActor.HasTag('ACS_Necrofiend_Tentacle_6')
				|| collidedActor.HasTag('ACS_Necrofiend_Tentacle_5')
				|| collidedActor.HasTag('ACS_Necrofiend_Tentacle_4')
				|| collidedActor.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| collidedActor.HasTag('ACS_Chaos_Cloud') 
				)
				continue;

				targetPosition_1 = collidedActor.GetWorldPosition();
				targetPosition_1.X += RandRangeF(3, -3);
				targetPosition_1.Y += RandRangeF(3, -3);
				
				proj_1 = (W3ACSTransformationGiantElectricSpear)theGame.CreateEntity( spearTemp, position );
				proj_1.Init(GetWitcherPlayer());
				proj_1.ShootProjectileAtPosition(0,	100, targetPosition_1, 60 );
				proj_1.DestroyAfter(5);
			}

			targetPosition_2 = ACSGetCActor('ACS_Transformation_Giant').GetWorldPosition() + ACSGetCActor('ACS_Transformation_Giant').GetWorldForward() * 15;
			targetPosition_2.X += RandRangeF(3, -3);
			targetPosition_2.Y += RandRangeF(3, -3);
				
			proj_2 = (W3ACSTransformationGiantElectricSpear)theGame.CreateEntity( spearTemp, position );
			proj_2.Init(GetWitcherPlayer());
			proj_2.ShootProjectileAtPosition(0,	100, targetPosition_2, 60 );
			proj_2.DestroyAfter(5);
		}
		else
		{
			targetPosition_1 = ACSGetCActor('ACS_Transformation_Giant').GetWorldPosition() + ACSGetCActor('ACS_Transformation_Giant').GetWorldForward() * 15;
			targetPosition_1.X += RandRangeF(3, -3);
			targetPosition_1.Y += RandRangeF(3, -3);
				
			proj_1 = (W3ACSTransformationGiantElectricSpear)theGame.CreateEntity( spearTemp, position );
			proj_1.Init(GetWitcherPlayer());
			proj_1.ShootProjectileAtPosition(0,	100, targetPosition_1, 60 );
			proj_1.DestroyAfter(5);
		}

	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state TransformationGiantElectricProjectilesSingle_Engage in cACS_Spawn_Transformation_Giant
{
	var proj_1																																						: W3ACSTransformationGiantElectricSpear;
	var targetPosition_1, bone_vec, position																														: Vector;
	var spearTemp																																					: CEntityTemplate;
	var bone_rot 																																					: EulerAngles;
	var collidedActor 																																				: CActor;
	var actors 																																						: array< CActor >;
	var i 																																							: int;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		TransformationGiantElectricProjectilesSingle_Entry();
	}

	entry function TransformationGiantElectricProjectilesSingle_Entry()
	{
		ACSGetCActor('ACS_Transformation_Giant').StopEffect('lightning_l');

		ACSGetCActor('ACS_Transformation_Giant').PlayEffect('prepare_attack_l');

		ACSGetCActor('ACS_Transformation_Giant').StopEffect('prepare_attack_l');

		ACSGetCActor('ACS_Transformation_Giant').PlayEffect('prepare_attack_l');

		thePlayer.DrainStamina( ESAT_FixedValue,  thePlayer.GetStatMax( BCS_Stamina ) * 0.025, 0.5 );

		ACSGetCActor('ACS_Transformation_Giant').GetBoneWorldPositionAndRotationByIndex( ACSGetCActor('ACS_Transformation_Giant').GetBoneIndex( 'l_weapon' ), bone_vec, bone_rot );
		
		position = bone_vec;

		spearTemp = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\transformation_giant_electric_spear.w2ent", true );

		actors.Clear();

		actors = ACSGetCActor('ACS_Transformation_Giant').GetNPCsAndPlayersInCone(25, VecHeading(ACSGetCActor('ACS_Transformation_Giant').GetHeadingVector()), 30, 3, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors);

		actors.Remove( ACSGetCActor('ACS_Transformation_Giant') );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				collidedActor = (CActor)actors[i];

				if (collidedActor == this
				|| collidedActor.HasTag('acs_snow_entity')
				|| collidedActor.HasTag('smokeman') 
				|| collidedActor.HasTag('ACS_Tentacle_1') 
				|| collidedActor.HasTag('ACS_Tentacle_2') 
				|| collidedActor.HasTag('ACS_Tentacle_3') 
				|| collidedActor.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| collidedActor.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| collidedActor.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| collidedActor.HasTag('ACS_Necrofiend_Tentacle_6')
				|| collidedActor.HasTag('ACS_Necrofiend_Tentacle_5')
				|| collidedActor.HasTag('ACS_Necrofiend_Tentacle_4')
				|| collidedActor.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| collidedActor.HasTag('ACS_Chaos_Cloud') 
				)
				continue;

				targetPosition_1 = collidedActor.GetWorldPosition();
				
				proj_1 = (W3ACSTransformationGiantElectricSpear)theGame.CreateEntity( spearTemp, position );
				proj_1.Init(GetWitcherPlayer());
				proj_1.ShootProjectileAtPosition(0,	100, targetPosition_1, 60 );
				proj_1.DestroyAfter(5);
			}
		}
		else
		{
			targetPosition_1 = ACSGetCActor('ACS_Transformation_Giant').GetWorldPosition() + ACSGetCActor('ACS_Transformation_Giant').GetWorldForward() * 15;
			targetPosition_1.X += RandRangeF(3, -3);
			targetPosition_1.Y += RandRangeF(3, -3);
				
			proj_1 = (W3ACSTransformationGiantElectricSpear)theGame.CreateEntity( spearTemp, position );
			proj_1.Init(GetWitcherPlayer());
			proj_1.ShootProjectileAtPosition(0,	100, targetPosition_1, 60 );
			proj_1.DestroyAfter(5);
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class cACS_Transformation_Toad
{
    function Spawn_Transformation_Toad_Engage()
	{
		this.PushState('Spawn_Transformation_Toad_Engage');
	}

	function Transformation_Toad_Single_Projectile_Engage()
	{
		this.PushState('Transformation_Toad_Single_Projectile_Engage');
	}

	function Transformation_Toad_Mortar_Projectile1_Engage()
	{
		this.PushState('Transformation_Toad_Mortar_Projectile1_Engage');
	}

	function Transformation_Toad_Mortar_Projectile2_Engage()
	{
		this.PushState('Transformation_Toad_Mortar_Projectile2_Engage');
	}

	function Transformation_Toad_Mortar_Projectile3_Engage()
	{
		this.PushState('Transformation_Toad_Mortar_Projectile3_Engage');
	}

	function Transformation_Toad_Mortar_Projectile4_Engage()
	{
		this.PushState('Transformation_Toad_Mortar_Projectile4_Engage');
	}
}

state Spawn_Transformation_Toad_Engage in cACS_Transformation_Toad
{
	private var actor															: CActor;
	private var ent																: CEntity;
	private var temp															: CEntityTemplate;
	private var meshcomp														: CComponent;
	private var animcomp 														: CAnimatedComponent;
	private var h 																: float;
	private var p_comp															: CComponent;
	private var apptemp															: CEntityTemplate;

	var cameraTemplate															: CEntityTemplate;
	var cameraEnt																: CEntity;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		ACSGetCActor('ACS_Transformation_Toad').Destroy();
		Spawn_Transformation_Toad_Entry();
	}

	entry function Spawn_Transformation_Toad_Entry()
	{
		temp = (CEntityTemplate)LoadResource( 

		"dlc\dlc_acs\data\entities\transformation_entities\acs_toad.w2ent"
			
		, true );

		ent = theGame.CreateEntity( temp, GetWitcherPlayer().GetWorldPosition(), GetWitcherPlayer().GetWorldRotation() );

		animcomp = (CAnimatedComponent)ent.GetComponentByClassName('CAnimatedComponent');
		meshcomp = ent.GetComponentByClassName('CMeshComponent');
		h = 0.75;
		animcomp.SetScale(Vector(h,h,h,1));
		meshcomp.SetScale(Vector(h,h,h,1));	

		((CNewNPC)ent).SetLevel(GetWitcherPlayer().GetLevel());

		//((CActor)ent).SetTemporaryAttitudeGroup( 'q104_avallach_friendly_to_all', AGP_Default );
		//((CNewNPC)ent).SetTemporaryAttitudeGroup( 'q104_avallach_friendly_to_all', AGP_Default );

		((CActor)ent).SetTemporaryAttitudeGroup('player', AGP_Default);
		((CNewNPC)ent).SetTemporaryAttitudeGroup('player', AGP_Default);

		((CNewNPC)ent).SetCanPlayHitAnim(true);

		((CActor)ent).SetImmortalityMode( AIM_Immortal, AIC_Default, true );

		((CActor)ent).AddBuffImmunity_AllNegative('ACS_Transformation_Toad_Immunity_Negative', true); 
		((CActor)ent).AddBuffImmunity_AllCritical('ACS_Transformation_Toad_Immunity_Critical', true); 

		ent.AddTag('ACS_Transformation_Toad');

		ent.PlayEffectSingle('jump');
		ent.StopEffect('jump');

		ent.PlayEffectSingle('screen_slime');
		ent.StopEffect('screen_slime');

		ent.PlayEffectSingle('landing');
		ent.StopEffect('landing');

		GetACSWatcher().ACSTransformToadPlayAnim('monster_toad_taunt_01', 0.5, 0.5);

		GetACSWatcher().CamerasDestroy();

		cameraTemplate = (CEntityTemplate)LoadResource("dlc\dlc_acs\data\entities\other\transformation_camera.w2ent", true);

		cameraEnt = (CStaticCamera)theGame.CreateEntity(cameraTemplate, theCamera.GetCameraPosition(), theCamera.GetCameraRotation());	

		cameraEnt.AddTag('ACS_Transformation_Custom_Camera');
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state Transformation_Toad_Single_Projectile_Engage in cACS_Transformation_Toad
{
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Transformation_Toad_Single_Projectile_Entry();
	}

	entry function Transformation_Toad_Single_Projectile_Entry()
	{
		var attackRange, attackAngle 				: float;
		var proj 								: CACSTransformationToadPoisonProjectile;
		var rotation 								: EulerAngles;
		var initpos, targetPosition, vampPos		: Vector;
		var actortarget								: CActor;
		var actors									: array<CActor>;
		var i 										: int;

		initpos = ACSGetCActor('ACS_Transformation_Toad').GetWorldPosition() + ACSGetCActor('ACS_Transformation_Toad').GetWorldForward() * 2;

		initpos.Z += 1.5;

		rotation = ACSGetCActor('ACS_Transformation_Toad').GetWorldRotation();

		if (thePlayer.GetDisplayTarget())
		{
			targetPosition = ((CActor)(thePlayer.GetDisplayTarget())).GetWorldPosition();
		}
		else
		{
			targetPosition = ACSGetCActor('ACS_Transformation_Toad').GetWorldPosition() + ACSGetCActor('ACS_Transformation_Toad').GetWorldForward() * 50;
		}

		proj = (CACSTransformationToadPoisonProjectile)theGame.CreateEntity( 
		(CEntityTemplate)LoadResource( "dlc\dlc_acs\data\entities\toad_projectiles\toad_spawn_projectile.w2ent", true ), initpos, rotation );
		proj.Init(thePlayer);
		proj.PlayEffectSingle( 'spit_travel' );
		proj.ShootProjectileAtPosition( 0, 10 + RandRange(15,5), targetPosition, 500 );
		proj.DestroyAfter(10);
	}
}

state Transformation_Toad_Mortar_Projectile1_Engage in cACS_Transformation_Toad
{
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Transformation_Toad_Mortar_Projectile1_Entry();
	}

	function Transformation_Toad_Mortar_Projectile1_Entry()
	{
		var attackRange, attackAngle 				: float;
		var proj 									: CACSTransformationToadSpawnMultipleEntitiesPoisonProjectile;
		var rotation, bone_rot 						: EulerAngles;
		var initpos, targetPosition, bone_vec		: Vector;
		var actortarget								: CActor;
		var actors									: array<CActor>;
		var i 										: int;

		//initpos = ACSGetCActor('ACS_Transformation_Toad').GetBoneWorldPosition();

		ACSGetCActor('ACS_Transformation_Toad').GetBoneWorldPositionAndRotationByIndex( ACSGetCActor('ACS_Transformation_Toad').GetBoneIndex( 'r_torso_helper_04' ), bone_vec, bone_rot );

		initpos = bone_vec;

		initpos.Z += 0.5;

		rotation = ACSGetCActor('ACS_Transformation_Toad').GetWorldRotation();

		if (thePlayer.GetDisplayTarget())
		{
			targetPosition = ((CActor)(thePlayer.GetDisplayTarget())).GetWorldPosition();
		}
		else
		{
			targetPosition = ACSGetCActor('ACS_Transformation_Toad').GetWorldPosition() + ACSGetCActor('ACS_Transformation_Toad').GetWorldForward() * 50;
		}

		proj = (CACSTransformationToadSpawnMultipleEntitiesPoisonProjectile)theGame.CreateEntity( 
		(CEntityTemplate)LoadResource( "dlc\dlc_acs\data\entities\toad_projectiles\toad_mortar_proj.w2ent", true ), initpos, rotation );
		proj.Init(thePlayer);
		proj.PlayEffectSingle( 'spit_travel' );
		//proj.ShootProjectileAtPosition( 0, 10 + RandRange(15,5), targetPosition, 500 );
		proj.ShootProjectileAtPosition( proj.projAngle, proj.projSpeed, FindPosition(), 500 );
		proj.DestroyAfter(10);
	}

	function FindPosition() : Vector
	{
		var randVec : Vector;
		var targetPos : Vector;
		var outPos : Vector;

		randVec = Vector( 0.f, 0.f, 0.f );

		if (thePlayer.GetDisplayTarget())
		{
			targetPos = (thePlayer.GetDisplayTarget()).GetWorldPosition();
		}
		else
		{
			targetPos = ACSGetCActor('ACS_Transformation_Toad').GetWorldPosition() + ACSGetCActor('ACS_Transformation_Toad').GetWorldForward() * 50;
		}

		randVec = VecRingRand( 2, 6 );
		
		outPos = targetPos + randVec;

		return outPos;
	}
}

state Transformation_Toad_Mortar_Projectile2_Engage in cACS_Transformation_Toad
{
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Transformation_Toad_Mortar_Projectile2_Entry();
	}

	entry function Transformation_Toad_Mortar_Projectile2_Entry()
	{
		var attackRange, attackAngle 				: float;
		var proj 									: CACSTransformationToadSpawnMultipleEntitiesPoisonProjectile;
		var rotation, bone_rot 						: EulerAngles;
		var initpos, targetPosition, bone_vec		: Vector;
		var actortarget								: CActor;
		var actors									: array<CActor>;
		var i 										: int;

		//initpos = ACSGetCActor('ACS_Transformation_Toad').GetBoneWorldPosition();

		ACSGetCActor('ACS_Transformation_Toad').GetBoneWorldPositionAndRotationByIndex( ACSGetCActor('ACS_Transformation_Toad').GetBoneIndex( 'l_torso_helper_04' ), bone_vec, bone_rot );

		initpos = bone_vec;

		initpos.Z += 0.5;

		rotation = ACSGetCActor('ACS_Transformation_Toad').GetWorldRotation();

		if (thePlayer.GetDisplayTarget())
		{
			targetPosition = ((CActor)(thePlayer.GetDisplayTarget())).GetWorldPosition();
		}
		else
		{
			targetPosition = ACSGetCActor('ACS_Transformation_Toad').GetWorldPosition() + ACSGetCActor('ACS_Transformation_Toad').GetWorldForward() * 50;
		}

		proj = (CACSTransformationToadSpawnMultipleEntitiesPoisonProjectile)theGame.CreateEntity( 
		(CEntityTemplate)LoadResource( "dlc\dlc_acs\data\entities\toad_projectiles\toad_mortar_proj.w2ent", true ), initpos, rotation );
		proj.Init(thePlayer);
		proj.PlayEffectSingle( 'spit_travel' );
		//proj.ShootProjectileAtPosition( 0, 10 + RandRange(15,5), targetPosition, 500 );
		proj.ShootProjectileAtPosition( proj.projAngle, proj.projSpeed, FindPosition(), 500 );
		proj.DestroyAfter(10);
	}

	function FindPosition() : Vector
	{
		var randVec : Vector;
		var targetPos : Vector;
		var outPos : Vector;

		randVec = Vector( 0.f, 0.f, 0.f );

		if (thePlayer.GetDisplayTarget())
		{
			targetPos = (thePlayer.GetDisplayTarget()).GetWorldPosition();
		}
		else
		{
			targetPos = ACSGetCActor('ACS_Transformation_Toad').GetWorldPosition() + ACSGetCActor('ACS_Transformation_Toad').GetWorldForward() * 50;
		}

		randVec = VecRingRand( 2, 6 );
		
		outPos = targetPos + randVec;

		return outPos;
	}
}

state Transformation_Toad_Mortar_Projectile3_Engage in cACS_Transformation_Toad
{
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Transformation_Toad_Mortar_Projectile3_Entry();
	}

	entry function Transformation_Toad_Mortar_Projectile3_Entry()
	{
		var attackRange, attackAngle 				: float;
		var proj 									: CACSTransformationToadSpawnMultipleEntitiesPoisonProjectile;
		var rotation, bone_rot 						: EulerAngles;
		var initpos, targetPosition, bone_vec		: Vector;
		var actortarget								: CActor;
		var actors									: array<CActor>;
		var i 										: int;

		//initpos = ACSGetCActor('ACS_Transformation_Toad').GetBoneWorldPosition();

		ACSGetCActor('ACS_Transformation_Toad').GetBoneWorldPositionAndRotationByIndex( ACSGetCActor('ACS_Transformation_Toad').GetBoneIndex( 'r_torso_helper_05' ), bone_vec, bone_rot );

		initpos = bone_vec;

		initpos.Z += 0.5;

		rotation = ACSGetCActor('ACS_Transformation_Toad').GetWorldRotation();

		if (thePlayer.GetDisplayTarget())
		{
			targetPosition = ((CActor)(thePlayer.GetDisplayTarget())).GetWorldPosition();
		}
		else
		{
			targetPosition = ACSGetCActor('ACS_Transformation_Toad').GetWorldPosition() + ACSGetCActor('ACS_Transformation_Toad').GetWorldForward() * 50;
		}

		proj = (CACSTransformationToadSpawnMultipleEntitiesPoisonProjectile)theGame.CreateEntity( 
		(CEntityTemplate)LoadResource( "dlc\dlc_acs\data\entities\toad_projectiles\toad_mortar_proj.w2ent", true ), initpos, rotation );
		proj.Init(thePlayer);
		proj.PlayEffectSingle( 'spit_travel' );
		//proj.ShootProjectileAtPosition( 0, 10 + RandRange(15,5), targetPosition, 500 );
		proj.ShootProjectileAtPosition( proj.projAngle, proj.projSpeed, FindPosition(), 500 );
		proj.DestroyAfter(10);
	}

	function FindPosition() : Vector
	{
		var randVec : Vector;
		var targetPos : Vector;
		var outPos : Vector;

		randVec = Vector( 0.f, 0.f, 0.f );

		if (thePlayer.GetDisplayTarget())
		{
			targetPos = (thePlayer.GetDisplayTarget()).GetWorldPosition();
		}
		else
		{
			targetPos = ACSGetCActor('ACS_Transformation_Toad').GetWorldPosition() + ACSGetCActor('ACS_Transformation_Toad').GetWorldForward() * 50;
		}

		randVec = VecRingRand( 2, 6 );
		
		outPos = targetPos + randVec;

		return outPos;
	}
}

state Transformation_Toad_Mortar_Projectile4_Engage in cACS_Transformation_Toad
{
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Transformation_Toad_Mortar_Projectile4_Entry();
	}

	entry function Transformation_Toad_Mortar_Projectile4_Entry()
	{
		var attackRange, attackAngle 				: float;
		var proj 									: CACSTransformationToadSpawnMultipleEntitiesPoisonProjectile;
		var rotation, bone_rot 						: EulerAngles;
		var initpos, targetPosition, bone_vec		: Vector;
		var actortarget								: CActor;
		var actors									: array<CActor>;
		var i 										: int;

		//initpos = ACSGetCActor('ACS_Transformation_Toad').GetBoneWorldPosition();

		ACSGetCActor('ACS_Transformation_Toad').GetBoneWorldPositionAndRotationByIndex( ACSGetCActor('ACS_Transformation_Toad').GetBoneIndex( 'l_torso_helper_05' ), bone_vec, bone_rot );

		initpos = bone_vec;

		initpos.Z += 0.5;

		rotation = ACSGetCActor('ACS_Transformation_Toad').GetWorldRotation();

		if (thePlayer.GetDisplayTarget())
		{
			targetPosition = ((CActor)(thePlayer.GetDisplayTarget())).GetWorldPosition();
		}
		else
		{
			targetPosition = ACSGetCActor('ACS_Transformation_Toad').GetWorldPosition() + ACSGetCActor('ACS_Transformation_Toad').GetWorldForward() * 50;
		}

		proj = (CACSTransformationToadSpawnMultipleEntitiesPoisonProjectile)theGame.CreateEntity( 
		(CEntityTemplate)LoadResource( "dlc\dlc_acs\data\entities\toad_projectiles\toad_mortar_proj.w2ent", true ), initpos, rotation );
		proj.Init(thePlayer);
		proj.PlayEffectSingle( 'spit_travel' );
		//proj.ShootProjectileAtPosition( 0, 10 + RandRange(15,5), targetPosition, 500 );
		proj.ShootProjectileAtPosition( proj.projAngle, proj.projSpeed, FindPosition(), 500 );
		proj.DestroyAfter(10);
	}

	function FindPosition() : Vector
	{
		var randVec : Vector;
		var targetPos : Vector;
		var outPos : Vector;

		randVec = Vector( 0.f, 0.f, 0.f );

		if (thePlayer.GetDisplayTarget())
		{
			targetPos = (thePlayer.GetDisplayTarget()).GetWorldPosition();
		}
		else
		{
			targetPos = ACSGetCActor('ACS_Transformation_Toad').GetWorldPosition() + ACSGetCActor('ACS_Transformation_Toad').GetWorldForward() * 50;
		}

		randVec = VecRingRand( 2, 6 );
		
		outPos = targetPos + randVec;

		return outPos;
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class cACS_Transformation_Vampire_Monster
{
    function Spawn_Transformation_Vampire_Monster_Engage()
	{
		this.PushState('Spawn_Transformation_Vampire_Monster_Engage');
	}

	function ACS_VampireMonsterBehSwitch_Engage()
	{
		this.PushState('ACS_VampireMonsterBehSwitch_Engage');
	}

	function ACS_VampireMonsterFastWalkSwitch_Engage()
	{
		this.PushState('ACS_VampireMonsterFastWalkSwitch_Engage');
	}

	function ACS_VampireMonsterSlowWalkSwitch_Engage()
	{
		this.PushState('ACS_VampireMonsterSlowWalkSwitch_Engage');
	}

	function ACS_VampireMonsterBatProjectile_Engage()
	{
		this.PushState('ACS_VampireMonsterBatProjectile_Engage');
	}

	function ACS_VampireMonsterBatProjectileRepeating_Engage()
	{
		this.PushState('ACS_VampireMonsterBatProjectileRepeating_Engage');
	}
}

state Spawn_Transformation_Vampire_Monster_Engage in cACS_Transformation_Vampire_Monster
{
	private var actor															: CActor;
	private var ent																: CEntity;
	private var temp															: CEntityTemplate;
	private var meshcomp														: CComponent;
	private var animcomp 														: CAnimatedComponent;
	private var h 																: float;
	private var p_comp															: CComponent;
	private var apptemp															: CEntityTemplate;

	private var cameraTemplate													: CEntityTemplate;
	private var cameraEnt														: CEntity;

	private var cam_dummy_temp, sacrifice_dummy_temp							: CEntityTemplate;
	private var cam_dummy, sacrifice_dummy 										: CEntity;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		ACSGetCActor('ACS_Transformation_Vampire_Monster').Destroy();
		Spawn_Transformation_Vampire_Monster_Entry();
	}

	entry function Spawn_Transformation_Vampire_Monster_Entry()
	{
		temp = (CEntityTemplate)LoadResource( 

		"dlc\dlc_acs\data\entities\transformation_entities\acs_vampire_monster.w2ent"
			
		, true );

		ent = theGame.CreateEntity( temp, GetWitcherPlayer().GetWorldPosition(), GetWitcherPlayer().GetWorldRotation() );

		animcomp = (CAnimatedComponent)ent.GetComponentByClassName('CAnimatedComponent');
		meshcomp = ent.GetComponentByClassName('CMeshComponent');
		h = 0.75;
		animcomp.SetScale(Vector(h,h,h,1));
		meshcomp.SetScale(Vector(h,h,h,1));	

		((CNewNPC)ent).SetLevel(GetWitcherPlayer().GetLevel());

		((CActor)ent).SetTemporaryAttitudeGroup( 'q104_avallach_friendly_to_all', AGP_Default );
		((CNewNPC)ent).SetTemporaryAttitudeGroup( 'q104_avallach_friendly_to_all', AGP_Default );

		((CNewNPC)ent).SetCanPlayHitAnim(false);

		((CActor)ent).SetImmortalityMode( AIM_Invulnerable, AIC_Default, true );

		((CActor)ent).AddBuffImmunity_AllNegative('ACS_Transformation_Vampire_Monster_Immunity_Negative', true); 
		((CActor)ent).AddBuffImmunity_AllCritical('ACS_Transformation_Vampire_Monster_Immunity_Critical', true); 

		ent.AddTag('ACS_Transformation_Vampire_Monster');

		ent.AddTag('ACS_Vampire_Monster_Ground_Mode');

		ent.PlayEffect('avatar_death_swollen_no_decal');

		GetACSWatcher().ACSTransformVampireMonsterPlayAnim('dettlaff_fly_phase2_start', 0.25, 0.25);

		GetACSWatcher().RemoveTimer('ACS_Transformation_Vampire_Monster_Delay_Cancel_Anim');

		GetACSWatcher().AddTimer('ACS_Transformation_Vampire_Monster_Delay_Cancel_Anim', 1, false);

		GetACSWatcher().CamerasDestroy();

		cameraTemplate = (CEntityTemplate)LoadResource("dlc\dlc_acs\data\entities\other\transformation_camera.w2ent", true);

		cameraEnt = (CStaticCamera)theGame.CreateEntity(cameraTemplate, theCamera.GetCameraPosition(), theCamera.GetCameraRotation());	

		cameraEnt.AddTag('ACS_Transformation_Custom_Camera');



		cam_dummy_temp = (CEntityTemplate)LoadResource( "dlc\dlc_acs\data\entities\other\fx_dummy_entity.w2ent", true );

		cam_dummy = (CEntity)theGame.CreateEntity( cam_dummy_temp, ent.GetWorldPosition() );

		((CNewNPC)cam_dummy).EnableCharacterCollisions(false);
		((CNewNPC)cam_dummy).EnableCollisions(false);

		((CActor)cam_dummy).AddBuffImmunity_AllNegative('ACS_Dummy_Entity', true);

		((CActor)cam_dummy).AddBuffImmunity_AllCritical('ACS_Dummy_Entity', true);

		((CActor)cam_dummy).SetUnpushableTarget(thePlayer);

		((CActor)cam_dummy).SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
		((CActor)cam_dummy).SetCanPlayHitAnim(false); 

		((CNewNPC)cam_dummy).SetTemporaryAttitudeGroup( 'q104_avallach_friendly_to_all', AGP_Default );

		((CActor)(cam_dummy)).GetInventory().RemoveAllItems();

		cam_dummy.CreateAttachment(ent,'attach_slot', Vector( 0, 0, 0 ), EulerAngles(-90,0,0));

		cam_dummy.AddTag('ACS_Transformation_Vampire_Monster_Camera_Dummy');


		GetACSWatcher().AddTimer('TransformationVampireMonsterHeavyAttackDamageBlast', 0.5, false);
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state ACS_VampireMonsterBehSwitch_Engage in cACS_Transformation_Vampire_Monster
{
	var p_actor 					: CActor;
	var p_comp						: CComponent;
	var temp						: CEntityTemplate;
	var vampRot, adjustedRot 		: EulerAngles;
	
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Beh_Switch_Entry();
	}

	entry function Beh_Switch_Entry()
	{
		p_actor = ACSGetCActor('ACS_Transformation_Vampire_Monster');

		p_comp = p_actor.GetComponentByClassName( 'CAppearanceComponent' );

		if (thePlayer.IsInCombat())
		{
			GetACSWatcher().ACSTransformVampiressMovementAdjust('rotatetoenemy', true);
		}
		else
		{
			GetACSWatcher().ACSTransformVampiressMovementAdjust('forward', true);
		}

		GetACSWatcher().RemoveTimer('TransformationVampireMonsterLDashEnd');
		GetACSWatcher().RemoveTimer('TransformationVampireMonsterRDashEnd');

		ACSGetCActor('ACS_Transformation_Vampire_Monster').SetVisibility(true);

		GetACSWatcher().ACSVampireMonsterRemoveMoveTimers();

		if (ACSGetCActor('ACS_Transformation_Vampire_Monster').HasTag('ACS_Vampire_Monster_Ground_Mode'))
		{
			if ( ACSGetCActor('ACS_Transformation_Vampire_Monster').GetBehaviorGraphInstanceName() != 'DettlaffFlight' )
			{
				ACSGetCActor('ACS_Transformation_Vampire_Monster').ActivateAndSyncBehavior( 'DettlaffFlight' );
			}

			thePlayer.BreakAttachment();
			//thePlayer.CreateAttachment( ACSGetCEntity('ACS_Transformation_Vampire_Monster_Camera_Dummy'), 'fx_point', Vector( 0, -2, 0 ), EulerAngles(0,90,0) );

			GetACSWatcher().AddTimer('TransformationVampireMonsterHeavyAttackDamageBlast', 0.5, false);

			//GetWitcherPlayer().PlayEffectSingle('smoke_explosion');
			//GetWitcherPlayer().StopEffect('smoke_explosion');

			ACSGetCActor('ACS_Transformation_Vampire_Monster').DestroyEffect('dive_smoke');
			ACSGetCActor('ACS_Transformation_Vampire_Monster').PlayEffectSingle('dive_smoke');
			ACSGetCActor('ACS_Transformation_Vampire_Monster').StopEffect('dive_smoke');

			//ACSGetCActor('ACS_Transformation_Vampire_Monster').PlayEffectSingle('wing_trail');

			GetACSWatcher().ACSTransformVampireMonsterPlayAnim('dettlaff_fly_phase2_start', 0.0125f, 0.25f);

			GetACSWatcher().RemoveTimer('ACS_Transformation_Vampire_Monster_Delay_Flight_Controls');

			GetACSWatcher().AddTimer('ACS_Transformation_Vampire_Monster_Delay_Flight_Controls', 2, false);

			ACSGetCActor('ACS_Transformation_Vampire_Monster').AddTag('ACS_Vampire_Monster_Flight_Mode');

			ACSGetCActor('ACS_Transformation_Vampire_Monster').RemoveTag('ACS_Vampire_Monster_Ground_Mode');
		}
		else
		{
			if ( ACSGetCActor('ACS_Transformation_Vampire_Monster').GetBehaviorGraphInstanceName() != 'DettlaffMinion' )
			{
				ACSGetCActor('ACS_Transformation_Vampire_Monster').ActivateAndSyncBehavior( 'DettlaffMinion' );
			}

			GetACSWatcher().AddTimer('TransformationVampireMonsterHeavyAttackDamageBlast', 1, false);

			thePlayer.BreakAttachment();
			thePlayer.CreateAttachment( ACSGetCActor('ACS_Transformation_Vampire_Monster'), 'Trajectory' , Vector( 0, 0, 0.5 ), EulerAngles(0,0,0) );

			//GetWitcherPlayer().PlayEffectSingle('smoke_explosion');
			//GetWitcherPlayer().StopEffect('smoke_explosion');

			ACSGetCActor('ACS_Transformation_Vampire_Monster').DestroyEffect('start_effect');
			ACSGetCActor('ACS_Transformation_Vampire_Monster').PlayEffectSingle('start_effect');

			//ACSGetCActor('ACS_Transformation_Vampire_Monster').StopEffect('wing_trail');

			GetACSWatcher().ACSTransformVampireMonsterPlayAnim('dettlaff_construct_diving', 0.25f, 0.25f);

			GetACSWatcher().RemoveTimer('ACS_Transformation_Vampire_Monster_Delay_Cancel_Anim_Beh_Transition');

			GetACSWatcher().AddTimer('ACS_Transformation_Vampire_Monster_Delay_Cancel_Anim_Beh_Transition', 2, false);

			ACSGetCActor('ACS_Transformation_Vampire_Monster').AddTag('ACS_Vampire_Monster_Ground_Mode');

			ACSGetCActor('ACS_Transformation_Vampire_Monster').RemoveTag('ACS_Vampire_Monster_Flight_Mode');

			vampRot = ACSGetCActor('ACS_Transformation_Vampire_Monster').GetWorldRotation();

			adjustedRot = EulerAngles(0,0,0);

			adjustedRot.Yaw = vampRot.Yaw;

			((CMovingPhysicalAgentComponent)(ACSGetCActor('ACS_Transformation_Vampire_Monster').GetMovingAgentComponent())).SetRotation(EulerAngles(0, 0, 0));

			ACSGetCActor('ACS_Transformation_Vampire_Monster').TeleportWithRotation(ACSFixZAxis(ACSGetCActor('ACS_Transformation_Vampire_Monster').GetWorldPosition()), adjustedRot);
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state ACS_VampireMonsterFastWalkSwitch_Engage in cACS_Transformation_Vampire_Monster
{
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Fast_Walk_Switch_Entry();
	}

	entry function Fast_Walk_Switch_Entry()
	{
		if (ACSGetCActor('ACS_Transformation_Vampire_Monster').HasTag('ACS_Vampire_Monster_Ground_Mode'))
		{
			if ( ACSGetCActor('ACS_Transformation_Vampire_Monster').GetBehaviorGraphInstanceName() != 'DettlaffMinionFastWalk' )
			{
				GetACSWatcher().ACSTransformVampireMonsterPlayAnim('dettlaff_weak_walk_forward', 0.875, 0.0125);

				ACSGetCActor('ACS_Transformation_Vampire_Monster').SetVisibility(false);

				GetACSWatcher().RemoveTimer('Vampire_Monster_Reveal_Delay');

				GetACSWatcher().AddTimer('Vampire_Monster_Reveal_Delay', 0.5, false);

				ACSGetCActor('ACS_Transformation_Vampire_Monster').StopEffect('shadowdash_body_blood');

				ACSGetCActor('ACS_Transformation_Vampire_Monster').StopEffect('shadowdash_ground_blood');

				ACSGetCActor('ACS_Transformation_Vampire_Monster').PlayEffectSingle('shadowdash_body_blood');

				ACSGetCActor('ACS_Transformation_Vampire_Monster').PlayEffectSingle('shadowdash_ground_blood');

				ACSGetCActor('ACS_Transformation_Vampire_Monster').DestroyEffect('finisher_sparks');
				
				ACSGetCActor('ACS_Transformation_Vampire_Monster').PlayEffectSingle('finisher_sparks');

				ACSGetCActor('ACS_Transformation_Vampire_Monster').DestroyEffect('body_blood_drip');
				ACSGetCActor('ACS_Transformation_Vampire_Monster').PlayEffectSingle('body_blood_drip');
				ACSGetCActor('ACS_Transformation_Vampire_Monster').StopEffect('body_blood_drip');

				ACSGetCActor('ACS_Transformation_Vampire_Monster').DestroyEffect('comming_out');
				ACSGetCActor('ACS_Transformation_Vampire_Monster').PlayEffectSingle('comming_out');
				ACSGetCActor('ACS_Transformation_Vampire_Monster').StopEffect('comming_out');

				ACSGetCActor('ACS_Transformation_Vampire_Monster').ActivateAndSyncBehavior( 'DettlaffMinionFastWalk' );
			}
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state ACS_VampireMonsterSlowWalkSwitch_Engage in cACS_Transformation_Vampire_Monster
{
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Slow_Walk_Switch_Entry();
	}
	
	entry function Slow_Walk_Switch_Entry()
	{
		if (ACSGetCActor('ACS_Transformation_Vampire_Monster').HasTag('ACS_Vampire_Monster_Ground_Mode'))
		{
			if ( ACSGetCActor('ACS_Transformation_Vampire_Monster').GetBehaviorGraphInstanceName() != 'DettlaffMinion' )
			{
				GetACSWatcher().ACSTransformVampireMonsterPlayAnim('dettlaff_construct_walk_forward', 0.875, 0.0125);

				ACSGetCActor('ACS_Transformation_Vampire_Monster').SetVisibility(false);

				GetACSWatcher().RemoveTimer('Vampire_Monster_Reveal_Delay');

				GetACSWatcher().AddTimer('Vampire_Monster_Reveal_Delay', 0.5, false);

				ACSGetCActor('ACS_Transformation_Vampire_Monster').StopEffect('shadowdash_body_blood');

				ACSGetCActor('ACS_Transformation_Vampire_Monster').StopEffect('shadowdash_ground_blood');

				ACSGetCActor('ACS_Transformation_Vampire_Monster').PlayEffectSingle('shadowdash_body_blood');

				ACSGetCActor('ACS_Transformation_Vampire_Monster').PlayEffectSingle('shadowdash_ground_blood');

				ACSGetCActor('ACS_Transformation_Vampire_Monster').DestroyEffect('finisher_sparks');

				ACSGetCActor('ACS_Transformation_Vampire_Monster').PlayEffectSingle('finisher_sparks');

				ACSGetCActor('ACS_Transformation_Vampire_Monster').DestroyEffect('finisher_sparks');
				
				ACSGetCActor('ACS_Transformation_Vampire_Monster').PlayEffectSingle('finisher_sparks');

				ACSGetCActor('ACS_Transformation_Vampire_Monster').DestroyEffect('body_blood_drip');
				ACSGetCActor('ACS_Transformation_Vampire_Monster').PlayEffectSingle('body_blood_drip');
				ACSGetCActor('ACS_Transformation_Vampire_Monster').StopEffect('body_blood_drip');

				ACSGetCActor('ACS_Transformation_Vampire_Monster').DestroyEffect('comming_out');
				ACSGetCActor('ACS_Transformation_Vampire_Monster').PlayEffectSingle('comming_out');
				ACSGetCActor('ACS_Transformation_Vampire_Monster').StopEffect('comming_out');



				ACSGetCActor('ACS_Transformation_Vampire_Monster').ActivateAndSyncBehavior( 'DettlaffMinion' );
			}
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state ACS_VampireMonsterBatProjectile_Engage in cACS_Transformation_Vampire_Monster
{
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		VampireMonsterBatProjectile_Entry();
	}

	entry function VampireMonsterBatProjectile_Entry()
	{
		var attackRange 							: float;
		var bat_proj 								: W3BatSwarmAttack;
		var rotation 								: EulerAngles;
		var initpos, targetPosition, vampPos		: Vector;
		var actortarget								: CActor;
		var actors									: array<CActor>;
		var i 										: int;

		attackRange = 40;

		actors.Clear();

		actors = ACSGetCActor('ACS_Transformation_Vampire_Monster').GetNPCsAndPlayersInRange(attackRange, 10, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );
		
		actors.Remove( ACSGetCActor('ACS_Transformation_Vampire_Monster') );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == ACSGetCActor('ACS_Transformation_Vampire_Monster')
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				|| actortarget.HasTag('ACS_Transformation_Vampire_Monster_Camera_Dummy') 
				|| actortarget.HasTag('ACS_Transformation_Vampire_Monster') 
				)
				continue;

				initpos = (actortarget.GetWorldPosition() + thePlayer.GetWorldPosition()) * 0.5;

				vampPos = thePlayer.GetWorldPosition() + Vector(0,0,2);

				initpos.Z = vampPos.Z;

				rotation = ACSGetCActor('ACS_Transformation_Vampire_Monster').GetWorldRotation();

				targetPosition = actortarget.PredictWorldPosition( 0.3 );
				//targetPosition.Z += 1;

				bat_proj = (W3BatSwarmAttack)theGame.CreateEntity( 
				(CEntityTemplate)LoadResource( "dlc\dlc_acs\data\entities\projectiles\acs_bat_swarm_attack_2.w2ent", true ), initpos, rotation );
				bat_proj.Init(thePlayer);
				bat_proj.PlayEffectSingle( 'trail' );
				bat_proj.PlayEffectSingle( 'venom' );
				bat_proj.AddTag('ACS_Transformation_Vampire_Monster_Swarm_Proj');
				bat_proj.ShootProjectileAtPosition( 0, 10 + RandRange(15,5), targetPosition, 500 );
				bat_proj.DestroyAfter(7);
			}
		}

	}
}

state ACS_VampireMonsterBatProjectileRepeating_Engage in cACS_Transformation_Vampire_Monster
{
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		VampireMonsterBatProjectileRepeating_Entry();
	}

	entry function VampireMonsterBatProjectileRepeating_Entry()
	{
		var attackRange, attackAngle 				: float;
		var bat_proj 								: W3BatSwarmAttack;
		var rotation 								: EulerAngles;
		var initpos, targetPosition, vampPos		: Vector;
		var actortarget								: CActor;
		var actors									: array<CActor>;
		var i 										: int;

		attackRange = 40;

		actors.Clear();

		actors = ACSGetCActor('ACS_Transformation_Vampire_Monster').GetNPCsAndPlayersInRange(attackRange, 3, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );
		
		actors.Remove( ACSGetCActor('ACS_Transformation_Vampire_Monster') );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == ACSGetCActor('ACS_Transformation_Vampire_Monster')
				|| actortarget.HasTag('acs_snow_entity')
				|| actortarget.HasTag('smokeman') 
				|| actortarget.HasTag('ACS_Tentacle_1') 
				|| actortarget.HasTag('ACS_Tentacle_2') 
				|| actortarget.HasTag('ACS_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
				|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
				|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| actortarget.HasTag('ACS_Chaos_Cloud')
				|| actortarget.HasTag('ACS_Transformation_Vampire_Monster_Camera_Dummy') 
				|| actortarget.HasTag('ACS_Transformation_Vampire_Monster') 
				)
				continue;

				initpos = (actortarget.GetWorldPosition() + thePlayer.GetWorldPosition()) * 0.5;

				vampPos = thePlayer.GetWorldPosition() + Vector(0,0,3);

				initpos.Z = vampPos.Z;

				rotation = ACSGetCActor('ACS_Transformation_Vampire_Monster').GetWorldRotation();

				targetPosition = actortarget.PredictWorldPosition( 0.3 );
				//targetPosition.Z += 1;

				bat_proj = (W3BatSwarmAttack)theGame.CreateEntity( 
				(CEntityTemplate)LoadResource( "dlc\dlc_acs\data\entities\projectiles\acs_bat_swarm_attack_2.w2ent", true ), initpos, rotation );
				bat_proj.Init(thePlayer);
				bat_proj.AddTag('ACS_Transformation_Vampire_Monster_Gatling_Proj');
				bat_proj.PlayEffectSingle( 'trail' );
				bat_proj.PlayEffectSingle( 'venom' );
				bat_proj.ShootProjectileAtPosition( 0, 10 + RandRange(15,5), targetPosition, 500 );
				bat_proj.DestroyAfter(3);
			}
		}

	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class W3TransformationVampireMonsterTrap extends CInteractiveEntity
{
	editable var effectOnSpawn				: name;
	editable var effectToPlayOnActivation	: name;
	editable var durationFrom				: int;
	editable var durationTo					: int;
	
	var areasActive							: bool;
	var movementAdjustorActive				: bool;
	var params 								: SCustomEffectParams;
	var movementAdjustor					: CMovementAdjustor;
	var ticket 								: SMovementAdjustmentRequestTicket;
	var ticketRot							: SMovementAdjustmentRequestTicket;
	var lifeTime							: int;
	var l_effectDuration					: int;
	var startTimestamp						: float;
	var enterTimestamp						: float;
	var actors								: array<CActor>;
	var actortarget							: CActor;
	var i									: int;
	var entities 							: array<CGameplayEntity>;
	
	default areasActive = true;
	default movementAdjustorActive = false;
	default durationTo = 5;
	default durationFrom = 0;
	
	event OnSpawned( spawnData : SEntitySpawnData )
	{
		super.OnSpawned(spawnData);

		PlayEffect( effectOnSpawn );
		lifeTime = RandRange(durationTo,durationFrom);
		AddTimer('DestroyEntityAfter', lifeTime, false );
		startTimestamp = theGame.GetEngineTimeAsSeconds();
		super.Init();
	}
	
	event OnAreaEnter( area : CTriggerAreaComponent, activator : CComponent )
	{
		if ( 
		area == (CTriggerAreaComponent)this.GetComponent( "TrapTrigger" ) 
		&& activator.GetEntity() != thePlayer 
		&& activator.GetEntity() != ACSGetCActor('ACS_Transformation_Vampire_Monster')
		&& activator.GetEntity() != ACSGetCEntity('ACS_Transformation_Vampire_Monster_Camera_Dummy')
		&& areasActive )
		{
			
			PlayEffect( effectToPlayOnActivation );
		}
		
		if( area == (CTriggerAreaComponent)this.GetComponent( "TrapMovementAdjust" ) && areasActive )
		{
			FindGameplayEntitiesInSphere( entities, this.GetWorldPosition(), 4, 50, '', FLAG_ExcludePlayer + FLAG_OnlyAliveActors, this );

			entities.Remove( ACSGetCActor('ACS_Transformation_Vampire_Monster') );

			if( entities.Size() > 0 )
			{
				PlayEffect( effectToPlayOnActivation );

				for( i = 0; i < entities.Size(); i += 1 )
				{
					actortarget = (CActor)entities[i];

					if (actortarget == ACSGetCActor('ACS_Transformation_Vampire_Monster')
					|| actortarget.HasTag('acs_snow_entity')
					|| actortarget.HasTag('smokeman') 
					|| actortarget.HasTag('ACS_Tentacle_1') 
					|| actortarget.HasTag('ACS_Tentacle_2') 
					|| actortarget.HasTag('ACS_Tentacle_3') 
					|| actortarget.HasTag('ACS_Necrofiend_Tentacle_6')
					|| actortarget.HasTag('ACS_Necrofiend_Tentacle_5')
					|| actortarget.HasTag('ACS_Necrofiend_Tentacle_4')
					|| actortarget.HasTag('ACS_Necrofiend_Tentacle_3')
					|| actortarget.HasTag('ACS_Necrofiend_Tentacle_2')
					|| actortarget.HasTag('ACS_Necrofiend_Tentacle_1')
					|| actortarget.HasTag('ACS_Vampire_Monster_Boss_Bar') 
					|| actortarget.HasTag('ACS_Chaos_Cloud')
					|| actortarget.HasTag('ACS_Transformation_Vampire_Monster_Camera_Dummy') 
					|| actortarget.HasTag('ACS_Transformation_Vampire_Monster') 
					)

					continue;

					params.effectType = EET_Bleeding;
					enterTimestamp = theGame.GetEngineTimeAsSeconds();
					l_effectDuration = (int)(enterTimestamp - startTimestamp);
					params.duration = ( lifeTime - l_effectDuration )+1;
					actortarget.AddEffectCustom(params);
					
					movementAdjustor = actortarget.GetMovingAgentComponent().GetMovementAdjustor();
					ticketRot = movementAdjustor.CreateNewRequest( 'ACSVampireMonsterCriticalTrapRotate' );
					movementAdjustor.RotateTowards( ticketRot, this );
					movementAdjustor.BindToEvent( ticketRot, 'RotateTowards');
				}
			}

			AddTimer( 'MovementAdjustTimer', 0.2, false );
		}
		
	}
	timer function MovementAdjustTimer( delta : float , id : int )
	{
		if( movementAdjustor && !movementAdjustor.IsRequestActive(ticket) )
		{
			ticket = movementAdjustor.CreateNewRequest( 'ACSVampireMonsterCriticalTrapSlide' );
			movementAdjustor.MaxLocationAdjustmentSpeed( ticket, 4.f );
			movementAdjustor.SlideTowards( ticket, this );
			movementAdjustor.Continuous(ticket);
		}
	}
	
	timer function DestroyEntityAfter( dt : float , id: int )
	{
		areasActive = false;
		movementAdjustor.CancelByName('ACSVampireMonsterCriticalTrapSlide');
		movementAdjustor.CancelByName('ACSVampireMonsterCriticalTrapRotate');
		StopEffects();
	}
	
	event OnAreaExit( area : CTriggerAreaComponent, activator : CComponent )
	{
		if ( area == (CTriggerAreaComponent)this.GetComponent( "TrapTrigger" )
		&& activator.GetEntity() != thePlayer 
		&& activator.GetEntity() != ACSGetCActor('ACS_Transformation_Vampire_Monster')
		&& activator.GetEntity() != ACSGetCEntity('ACS_Transformation_Vampire_Monster_Camera_Dummy')
		)
		{
			StopEffect( effectToPlayOnActivation );
		}
		
		if( area == (CTriggerAreaComponent)this.GetComponent("TrapMovementAdjust") )
		{
			movementAdjustor.CancelByName('ACSVampireMonsterCriticalTrapSlide');
			movementAdjustor.CancelByName('ACSVampireMonsterCriticalTrapRotate');
			RemoveTimer( 'MovementAdjustTimer' );
		}
	}
	
	event OnAardHit( sign : W3AardProjectile )
	{
		//StopEffects();
	}
	
	private function StopEffects()
	{
		StopAllEffects();
		DestroyAfter( 2.0f );
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class cACS_Transformation_Vampiress
{
    function Spawn_Transformation_Vampiress_Engage()
	{
		this.PushState('Spawn_Transformation_Vampiress_Engage');
	}

	function Spawn_Transformation_Bruxa_Engage()
	{
		this.PushState('Spawn_Transformation_Bruxa_Engage');
	}

	function ACS_VampiressBehSwitch_Engage()
	{
		this.PushState('ACS_VampiressBehSwitch_Engage');
	}

	function Chaos_Meteorite_Storm_Engage()
	{
		this.PushState('Chaos_Meteorite_Storm_Engage');
	}

	function Chaos_Meteorite_Single_Summon_Engage()
	{
		this.PushState('Chaos_Meteorite_Single_Summon_Engage');
	}

	function Chaos_Meteorite_Single_Fire_Engage()
	{
		this.PushState('Chaos_Meteorite_Single_Fire_Engage');
	}

	function Chaos_Magma_Summon_Engage()
	{
		this.PushState('Chaos_Magma_Summon_Engage');
	}

	function Chaos_Magma_Line_Engage()
	{
		this.PushState('Chaos_Magma_Line_Engage');
	}

	function Chaos_Tornado_Engage()
	{
		this.PushState('Chaos_Tornado_Engage');
	}

	function Chaos_Lightning_Targeted_Engage()
	{
		this.PushState('Chaos_Lightning_Targeted_Engage');
	}

	function Chaos_Cloud_Summon_Engage()
	{
		this.PushState('Chaos_Cloud_Summon_Engage');
	}

	function Chaos_Root_Projectile_Engage()
	{
		this.PushState('Chaos_Root_Projectile_Engage');
	}

	function Chaos_Wood_Projectile_Engage()
	{
		this.PushState('Chaos_Wood_Projectile_Engage');
	}

	function Chaos_Snowball_Single_Summon_Engage()
	{
		this.PushState('Chaos_Snowball_Single_Summon_Engage');
	}

	function Chaos_Snowball_Engage()
	{
		this.PushState('Chaos_Snowball_Engage');
	}

	function Chaos_Ice_Explosion_Engage()
	{
		this.PushState('Chaos_Ice_Explosion_Engage');
	}

	function Chaos_Vacuum_Orb_Engage()
	{
		this.PushState('Chaos_Vacuum_Orb_Engage');
	}

	function Chaos_Orb_Small_Engage()
	{
		this.PushState('Chaos_Orb_Small_Engage');
	}

	function Chaos_Arena_Engage()
	{
		this.PushState('Chaos_Arena_Engage');
	}

	function Chaos_Drain_Engage()
	{
		this.PushState('Chaos_Drain_Engage');
	}
}

state Spawn_Transformation_Vampiress_Engage in cACS_Transformation_Vampiress
{
	private var actor															: CActor;
	private var ent																: CEntity;
	private var temp															: CEntityTemplate;
	private var meshcomp														: CComponent;
	private var animcomp 														: CAnimatedComponent;
	private var h 																: float;
	private var p_comp															: CComponent;
	private var apptemp															: CEntityTemplate;
	private var vampiress_taunt_anim_names										: array<name>;
	private var cameraTemplate													: CEntityTemplate;
	private var cameraEnt														: CEntity;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		ACSGetCActor('ACS_Transformation_Vampiress').Destroy();
		Spawn_Transformation_Vampiress_Entry();
	}

	entry function Spawn_Transformation_Vampiress_Entry()
	{
		temp = (CEntityTemplate)LoadResource( 

		"dlc\dlc_acs\data\entities\transformation_entities\acs_lillith.w2ent"
			
		, true );

		ent = theGame.CreateEntity( temp, GetWitcherPlayer().GetWorldPosition(), GetWitcherPlayer().GetWorldRotation() );

		animcomp = (CAnimatedComponent)ent.GetComponentByClassName('CAnimatedComponent');
		meshcomp = ent.GetComponentByClassName('CMeshComponent');
		h = 1;
		animcomp.SetScale(Vector(h,h,h,1));
		meshcomp.SetScale(Vector(h,h,h,1));	

		((CNewNPC)ent).SetLevel(GetWitcherPlayer().GetLevel());

		((CActor)ent).SetTemporaryAttitudeGroup( 'q104_avallach_friendly_to_all', AGP_Default );
		((CNewNPC)ent).SetTemporaryAttitudeGroup( 'q104_avallach_friendly_to_all', AGP_Default );

		((CNewNPC)ent).SetCanPlayHitAnim(false);

		((CActor)ent).SetImmortalityMode( AIM_Invulnerable, AIC_Default, true );

		((CActor)ent).AddBuffImmunity_AllNegative('ACS_Transformation_Vampiress_Immunity_Negative', true); 
		((CActor)ent).AddBuffImmunity_AllCritical('ACS_Transformation_Vampiress_Immunity_Critical', true); 

		vampiress_taunt_anim_names.Clear();

		vampiress_taunt_anim_names.PushBack('bruxa_taunt_02');
		vampiress_taunt_anim_names.PushBack('bruxa_taunt_01');
		vampiress_taunt_anim_names.PushBack('utility_taunt_01');
		vampiress_taunt_anim_names.PushBack('utility_taunt_from_dodge');
		vampiress_taunt_anim_names.PushBack('utility_taunt_02');

		ent.AddTag('ACS_Transformation_Vampiress');

		//ent.AddTag('ACS_Transformation_Bruxa');

		ent.PlayEffectSingle('acs_armor_effect_1' );
		ent.PlayEffectSingle('acs_armor_effect_2' );

		ent.PlayEffectSingle('igni_reaction_djinn' );
		ent.StopEffect('igni_reaction_djinn' );

		ent.PlayEffectSingle('shadowdash_cs701_1' );
		ent.StopEffect('shadowdash_cs701_1' );

		//ent.PlayEffectSingle('demonic_possession' );

		ent.PlayEffectSingle('teleport_out' );
		ent.StopEffect('teleport_out');

		ent.PlayEffectSingle('shadowdash_smoke' );
		ent.StopEffect('shadowdash_smoke');

		((CActor)ent).SetInteractionPriority( IP_Max_Unpushable );

		GetACSWatcher().ACSTransformVampiressPlayAnim(vampiress_taunt_anim_names[RandRange(vampiress_taunt_anim_names.Size())], 0.5f, 0.5f);



		GetACSWatcher().CamerasDestroy();

		cameraTemplate = (CEntityTemplate)LoadResource("dlc\dlc_acs\data\entities\other\transformation_camera.w2ent", true);

		cameraEnt = (CStaticCamera)theGame.CreateEntity(cameraTemplate, theCamera.GetCameraPosition(), theCamera.GetCameraRotation());	

		cameraEnt.AddTag('ACS_Transformation_Custom_Camera');
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state Spawn_Transformation_Bruxa_Engage in cACS_Transformation_Vampiress
{
	private var actor															: CActor;
	private var ent																: CEntity;
	private var temp															: CEntityTemplate;
	private var meshcomp														: CComponent;
	private var animcomp 														: CAnimatedComponent;
	private var h 																: float;
	private var p_comp															: CComponent;
	private var apptemp															: CEntityTemplate;
	private var vampiress_taunt_anim_names										: array<name>;
	private var cameraTemplate													: CEntityTemplate;
	private var cameraEnt														: CEntity;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);

		ACSGetCActor('ACS_Transformation_Vampiress').Destroy();

		Spawn_Transformation_Bruxa_Entry();
	}

	entry function Spawn_Transformation_Bruxa_Entry()
	{
		temp = (CEntityTemplate)LoadResource( 

		"dlc\dlc_acs\data\entities\transformation_entities\acs_bruxa.w2ent"
			
		, true );

		ent = theGame.CreateEntity( temp, GetWitcherPlayer().GetWorldPosition(), GetWitcherPlayer().GetWorldRotation() );

		animcomp = (CAnimatedComponent)ent.GetComponentByClassName('CAnimatedComponent');
		meshcomp = ent.GetComponentByClassName('CMeshComponent');
		h = 1;
		animcomp.SetScale(Vector(h,h,h,1));
		meshcomp.SetScale(Vector(h,h,h,1));	

		((CNewNPC)ent).SetLevel(GetWitcherPlayer().GetLevel());

		((CActor)ent).SetTemporaryAttitudeGroup( 'q104_avallach_friendly_to_all', AGP_Default );
		((CNewNPC)ent).SetTemporaryAttitudeGroup( 'q104_avallach_friendly_to_all', AGP_Default );

		((CNewNPC)ent).SetCanPlayHitAnim(false);

		((CActor)ent).SetImmortalityMode( AIM_Invulnerable, AIC_Default, true );

		((CActor)ent).AddBuffImmunity_AllNegative('ACS_Transformation_Vampiress_Immunity_Negative', true); 
		((CActor)ent).AddBuffImmunity_AllCritical('ACS_Transformation_Vampiress_Immunity_Critical', true); 

		vampiress_taunt_anim_names.Clear();

		vampiress_taunt_anim_names.PushBack('bruxa_taunt_02');
		vampiress_taunt_anim_names.PushBack('bruxa_taunt_01');
		vampiress_taunt_anim_names.PushBack('utility_taunt_01');
		vampiress_taunt_anim_names.PushBack('utility_taunt_from_dodge');
		vampiress_taunt_anim_names.PushBack('utility_taunt_02');

		ent.AddTag('ACS_Transformation_Vampiress');

		ent.AddTag('ACS_Transformation_Bruxa');

		//ent.PlayEffectSingle('demonic_possession' );
		//ent.StopEffect('demonic_possession' );

		ent.PlayEffectSingle('shadowdash_short' );
		ent.StopEffect('shadowdash_short' );

		//ent.PlayEffectSingle('demonic_possession' );

		ent.PlayEffectSingle('shadowdash_smoke' );
		ent.StopEffect('shadowdash_smoke');

		((CActor)ent).SetInteractionPriority( IP_Max_Unpushable );

		GetACSWatcher().ACSTransformVampiressPlayAnim(vampiress_taunt_anim_names[RandRange(vampiress_taunt_anim_names.Size())], 0.5f, 0.5f);



		GetACSWatcher().CamerasDestroy();

		cameraTemplate = (CEntityTemplate)LoadResource("dlc\dlc_acs\data\entities\other\transformation_camera.w2ent", true);

		cameraEnt = (CStaticCamera)theGame.CreateEntity(cameraTemplate, theCamera.GetCameraPosition(), theCamera.GetCameraRotation());	

		cameraEnt.AddTag('ACS_Transformation_Custom_Camera');
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state ACS_VampiressBehSwitch_Engage in cACS_Transformation_Vampiress
{
	var p_actor 					: CActor;
	var p_comp						: CComponent;
	var temp						: CEntityTemplate;
	var vampiress_taunt_anim_names	: array<name>;
	
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Beh_Switch_Entry();
	}
	
	entry function Beh_Switch_Entry()
	{
		if (ACSGetCActor('ACS_Transformation_Vampiress').HasTag('ACS_Transformation_Bruxa'))
		{
			return;
		}

		p_actor = ACSGetCActor('ACS_Transformation_Vampiress');

		p_comp = p_actor.GetComponentByClassName( 'CAppearanceComponent' );

		if (thePlayer.IsInCombat())
		{
			GetACSWatcher().ACSTransformVampiressMovementAdjust('rotatetoenemy', true);
		}
		else
		{
			GetACSWatcher().ACSTransformVampiressMovementAdjust('forward', true);
		}

		if (!ACSGetCActor('ACS_Transformation_Vampiress').HasTag('ACS_Vampiress_Sorceress_Mode'))
		{
			if ( ACSGetCActor('ACS_Transformation_Vampiress').GetBehaviorGraphInstanceName() != 'Sorceress_Beh' )
			{
				ACSGetCActor('ACS_Transformation_Vampiress').ActivateAndSyncBehavior( 'Sorceress_Beh' );
			}

			temp = (CEntityTemplate)LoadResource(

			"dlc\dlc_acs\data\models\nightmare_to_remember\nightmare_body.w2ent"
			
			, true);

			((CAppearanceComponent)p_comp).ExcludeAppearanceTemplate(temp);

			temp = (CEntityTemplate)LoadResource(

			"dlc\dlc_acs\data\models\nightmare_to_remember\nightmare_body_2.w2ent"
			
			, true);

			((CAppearanceComponent)p_comp).IncludeAppearanceTemplate(temp);

			GetWitcherPlayer().PlayEffectSingle('smoke_explosion');
			GetWitcherPlayer().StopEffect('smoke_explosion');

			GetACSWatcher().RemoveTimer('ACS_Vampiress_Hand_Fx_Delay');
			GetACSWatcher().AddTimer('ACS_Vampiress_Hand_Fx_Delay', 1.5, false);

			GetACSWatcher().VampiressSpecialAbilityEffectsSwitch();

			vampiress_taunt_anim_names.Clear();

			vampiress_taunt_anim_names.PushBack('woman_sorceress_taunt_01_lp');
			vampiress_taunt_anim_names.PushBack('woman_sorceress_taunt_01_rp');
			vampiress_taunt_anim_names.PushBack('woman_sorceress_taunt_02_lp');
			vampiress_taunt_anim_names.PushBack('woman_sorceress_taunt_02_rp');
			vampiress_taunt_anim_names.PushBack('woman_sorceress_taunt_03_lp');
			vampiress_taunt_anim_names.PushBack('woman_sorceress_taunt_03_rp');

			GetACSWatcher().ACSTransformVampiressPlayAnim(vampiress_taunt_anim_names[RandRange(vampiress_taunt_anim_names.Size())], 0.5f, 0.5f);

			ACSGetCActor('ACS_Transformation_Vampiress').AddTag('ACS_Vampiress_Sorceress_Mode');
		}
		else
		{
			if ( ACSGetCActor('ACS_Transformation_Vampiress').GetBehaviorGraphInstanceName() != 'Exploration' )
			{
				ACSGetCActor('ACS_Transformation_Vampiress').ActivateAndSyncBehavior( 'Exploration' );
			}

			temp = (CEntityTemplate)LoadResource(

			"dlc\dlc_acs\data\models\nightmare_to_remember\nightmare_body_2.w2ent"
			
			, true);

			((CAppearanceComponent)p_comp).ExcludeAppearanceTemplate(temp);

			temp = (CEntityTemplate)LoadResource(

			"dlc\dlc_acs\data\models\nightmare_to_remember\nightmare_body.w2ent"
			
			, true);

			((CAppearanceComponent)p_comp).IncludeAppearanceTemplate(temp);

			GetWitcherPlayer().PlayEffectSingle('smoke_explosion');
			GetWitcherPlayer().StopEffect('smoke_explosion');

			ACSGetCActor('ACS_Transformation_Vampiress').PlayEffectSingle('shadowdash_smoke' );
			ACSGetCActor('ACS_Transformation_Vampiress').StopEffect('shadowdash_smoke');

			GetACSWatcher().RemoveTimer('ACS_Vampiress_Hand_Fx_Delay');

			ACSGetCActor('ACS_Transformation_Vampiress').StopEffect('hand_fx');

			ACSGetCActor('ACS_Transformation_Vampiress').StopEffect('hand_fx_l');

			ACSGetCActor('ACS_Transformation_Vampiress').StopEffect('igni_reaction_djinn');

			GetACSWatcher().VampiressSpecialAbilityEffectsStop();

			vampiress_taunt_anim_names.Clear();

			vampiress_taunt_anim_names.PushBack('bruxa_taunt_02');
			vampiress_taunt_anim_names.PushBack('bruxa_taunt_01');
			vampiress_taunt_anim_names.PushBack('utility_taunt_01');
			vampiress_taunt_anim_names.PushBack('utility_taunt_from_dodge');
			vampiress_taunt_anim_names.PushBack('utility_taunt_02');

			GetACSWatcher().ACSTransformVampiressPlayAnim(vampiress_taunt_anim_names[RandRange(vampiress_taunt_anim_names.Size())], 0.25f, 0.5f);

			ACSGetCActor('ACS_Transformation_Vampiress').RemoveTag('ACS_Vampiress_Sorceress_Mode');
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state Chaos_Meteorite_Storm_Engage in cACS_Transformation_Vampiress
{
	private var targetPosition																																: Vector;

	event OnEnterState(prevStateName : name)
	{
		Meteorite_Storm_Entry();
	}

	entry function Meteorite_Storm_Entry()
	{
		var entity : CEntity;
		var meteoriteStorm : CACSChaosMeteoriteStormEntity;
		var spawnPos : Vector;
		var rotation : EulerAngles;

		GetACSChaosMeteorSingle().Destroy();

		if (thePlayer.IsInCombat())
		{
			GetACSWatcher().ACSTransformVampiressMovementAdjust('rotatetoenemy', true);
		}
		else
		{
			GetACSWatcher().ACSTransformVampiressMovementAdjust('forward', true);
		}
		
		if (thePlayer.GetTarget())
		{
			spawnPos = (GetWitcherPlayer().GetTarget()).PredictWorldPosition(0.35f);
			rotation = (GetWitcherPlayer().GetTarget()).GetWorldRotation();

			entity = (CACSChaosMeteoriteStormEntity)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\lillith_magic\chaos_meterorite_storm.w2ent", true ), spawnPos, rotation );

			meteoriteStorm = (CACSChaosMeteoriteStormEntity)entity;

			if( meteoriteStorm )
			{
				meteoriteStorm.Execute( GetWitcherPlayer().GetTarget() );
			}
		}

		meteoriteStorm.DestroyAfter(10);
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state Chaos_Meteorite_Single_Summon_Engage in cACS_Transformation_Vampiress
{
	private var proj_1, proj_2, proj_3, proj_4, proj_5	 								: W3ACSChaosMeteorProjectile;
	private var initpos																	: Vector;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Meteor_Single();
	}
	
	entry function Meteor_Single()
	{
		GetACSChaosMeteorSingle().Destroy();

		Meteor_Single_Summon();
	}
	
	latent function Meteor_Single_Summon()
	{
		initpos = ACSGetCActor('ACS_Transformation_Vampiress').GetWorldPosition();			
		initpos.Z += 5;
				
		proj_1 = (W3ACSChaosMeteorProjectile)theGame.CreateEntity( 
		(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\lillith_magic\chaos_meteorite_small.w2ent", true ), initpos );
						
		proj_1.Init(thePlayer);
		proj_1.PlayEffectSingle('fire_fx');

		proj_1.AddTag('ACS_Chaos_Meteorite_Single');

		proj_1.CreateAttachment(ACSGetCActor('ACS_Transformation_Vampiress'), 'r_weapon');
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state Chaos_Meteorite_Single_Fire_Engage in cACS_Transformation_Vampiress
{
	private var targetPosition														: Vector;
	private var proj_1, proj_2, proj_3, proj_4, proj_5	 							: W3ACSChaosMeteorProjectile;
	private var initpos																: Vector;
	
	event OnEnterState(prevStateName : name)
	{
		Meteor_Single_Fire_Entry();
	}

	entry function Meteor_Single_Fire_Entry()
	{
		GetACSChaosMeteorSingle().Destroy();

		if (thePlayer.IsInCombat())
		{
			GetACSWatcher().ACSTransformVampiressMovementAdjust('rotatetoenemy', true);
		}
		else
		{
			GetACSWatcher().ACSTransformVampiressMovementAdjust('forward', true);
		}

		if ( thePlayer.IsInCombat() && thePlayer.GetTarget() )
		{
			targetPosition = (thePlayer.GetTarget()).PredictWorldPosition(0.35f);

			//targetPosition.Z += 1.1;

			initpos = ACSGetCActor('ACS_Transformation_Vampiress').GetBoneWorldPosition('r_weapon');	

			//initpos.Y += 1.5;
					
			proj_1 = (W3ACSChaosMeteorProjectile)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\lillith_magic\chaos_meteorite_small.w2ent", true ), initpos );
							
			proj_1.Init(thePlayer);
			proj_1.PlayEffectSingle('fire_fx');

			proj_1.ShootProjectileAtPosition( 0, 15, targetPosition, 500 );
		}
		else
		{
			targetPosition = ACSGetCActor('ACS_Transformation_Vampiress').GetWorldPosition() + ACSGetCActor('ACS_Transformation_Vampiress').GetHeadingVector() + ACSGetCActor('ACS_Transformation_Vampiress').GetWorldForward() * 20;

			targetPosition.Z -= 1.1;

			initpos = ACSGetCActor('ACS_Transformation_Vampiress').GetBoneWorldPosition('r_weapon');	

			//initpos.Y += 1.5;
					
			proj_1 = (W3ACSChaosMeteorProjectile)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\lillith_magic\chaos_meteorite_small.w2ent", true ), initpos );
							
			proj_1.Init(thePlayer);
			proj_1.PlayEffectSingle('fire_fx');

			proj_1.ShootProjectileAtPosition( 0, 15, targetPosition, 500 );
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state Chaos_Magma_Summon_Engage in cACS_Transformation_Vampiress
{
	private var proj_1																																										: W3ACSFireLine;
	private var proj_2																																										: W3ACSRockLine;
	private var targetPosition_1, targetPosition_2, targetPosition_3, targetPosition_4, targetPosition_5, position																			: Vector;
	private var actors																																			   							: array<CActor>;
	private var i         																																									: int;
	private var actortarget					       																																			: CActor;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);

		GetACSChaosMagmaProj1().Destroy();
		GetACSChaosMagmaProj2().Destroy();

		Chaos_Magma_Summon();
	}

	entry function Chaos_Magma_Summon()
	{
		if ( !theSound.SoundIsBankLoaded("monster_golem_ifryt.bnk") )
		{
			theSound.SoundLoadBank( "monster_golem_ifryt.bnk", false );
		}
		
		GetWitcherPlayer().SoundEvent("monster_golem_dao_cmb_swoosh_light");

		position = ACSGetCActor('ACS_Transformation_Vampiress').GetWorldPosition() + (ACSGetCActor('ACS_Transformation_Vampiress').GetWorldForward()) + ACSGetCActor('ACS_Transformation_Vampiress').GetHeadingVector() * 1.1;
		
		targetPosition_1 = position + ACSGetCActor('ACS_Transformation_Vampiress').GetHeadingVector() * 30;

		proj_1 = (W3ACSFireLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\elemental_ifryt_proj.w2ent", true ), position );
		proj_1.Init(GetWitcherPlayer());
		proj_1.PlayEffectSingle('fire_line');
		proj_1.ShootProjectileAtPosition(0,	100, targetPosition_1, 1 );
		proj_1.AddTag('ACS_Magma_Line_1');

		proj_2 = (W3ACSRockLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\elemental_dao_proj.w2ent", true ), position );
		proj_2.Init(GetWitcherPlayer());
		proj_2.PlayEffectSingle('fire_line');
		proj_2.ShootProjectileAtPosition(0,	100, targetPosition_1, 1 );
		proj_2.AddTag('ACS_Magma_Line_2');
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state Chaos_Magma_Line_Engage in cACS_Transformation_Vampiress
{
	private var proj_1																																										: W3ACSFireLine;
	private var proj_2																																										: W3ACSRockLine;
	private var targetPosition_1, targetPosition_2, targetPosition_3, targetPosition_4, targetPosition_5, position																			: Vector;
	private var actors																																			   							: array<CActor>;
	private var i         																																									: int;
	private var actortarget					       																																			: CActor;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);

		Chaos_Magma_Line();
	}
	
	entry function Chaos_Magma_Line()
	{
		if ( !theSound.SoundIsBankLoaded("monster_golem_ifryt.bnk") )
		{
			theSound.SoundLoadBank( "monster_golem_ifryt.bnk", false );
		}
		
		GetWitcherPlayer().SoundEvent("monster_golem_dao_cmb_swoosh_light");

		position = ACSGetCActor('ACS_Transformation_Vampiress').GetWorldPosition() + (ACSGetCActor('ACS_Transformation_Vampiress').GetWorldForward() * 1.5) + ACSGetCActor('ACS_Transformation_Vampiress').GetHeadingVector() * 1.1;
		
		targetPosition_1 = position + ACSGetCActor('ACS_Transformation_Vampiress').GetHeadingVector() * 30;

		proj_1 = (W3ACSFireLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\elemental_ifryt_proj.w2ent", true ), position );
		proj_1.Init(GetWitcherPlayer());
		proj_1.PlayEffectSingle('fire_line');
		proj_1.ShootProjectileAtPosition(0,	20, targetPosition_1, 30 );
		proj_1.DestroyAfter(10);

		proj_2 = (W3ACSRockLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\elemental_dao_proj.w2ent", true ), position );
		proj_2.Init(GetWitcherPlayer());
		proj_2.PlayEffectSingle('fire_line');
		proj_2.ShootProjectileAtPosition(0,	20, targetPosition_1, 30 );
		proj_2.DestroyAfter(10);
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state Chaos_Tornado_Engage in cACS_Transformation_Vampiress
{
	var tornado 					: W3ACSChaosTornado;
	var duration					: float;
	var position					: Vector;
	var tornadoApp 					: CEntity;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Chaos_Tornado();
	}
	
	entry function Chaos_Tornado()
	{
		duration = 10;

		if (GetACSChaosTornado())
		{
			GetACSChaosTornado().RemoveTimer('explode_timer');
			GetACSChaosTornado().AddTimer('explode_timer', 0.0001, false);

			ACSGetCEntity('ACS_Chaos_Tornado_Appearance').PlayEffectSingle('explode');
			ACSGetCEntity('ACS_Chaos_Tornado_Appearance').StopEffect('explode');

			GetACSChaosTornado().RemoveTimer('destroy_tornado');

			GetACSChaosTornado().AddTimer('destroy_tornado', duration, false );

			theGame.GetSurfacePostFX().AddSurfacePostFXGroup( TraceFloor( position ), 1.f, duration, 1.f, 20.f, 1);
		}
		else
		{
			position = ACSGetCActor('ACS_Transformation_Vampiress').GetWorldPosition() + ACSGetCActor('ACS_Transformation_Vampiress').GetHeadingVector() + ACSGetCActor('ACS_Transformation_Vampiress').GetWorldForward() * 10;

			tornado = (W3ACSChaosTornado)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\lillith_magic\chaos_tornado.w2ent" ,true ), ACSPlayerFixZAxis( position ), thePlayer.GetWorldRotation());

			tornado.AddTimer('destroy_tornado', duration, false );

			tornado.AddTag('ACS_Chaos_Tornado');



			ACSGetCEntity('ACS_Chaos_Tornado_Appearance').Destroy();

			tornadoApp = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\lillith_magic\chaos_tornado_appearance_1.w2ent" ,true ), position, thePlayer.GetWorldRotation());

			tornadoApp.CreateAttachment(tornado);

			tornadoApp.AddTag('ACS_Chaos_Tornado_Appearance');

			tornadoApp.PlayEffectSingle('explode');

			tornadoApp.StopEffect('explode');



			theGame.GetSurfacePostFX().AddSurfacePostFXGroup( TraceFloor( position ), 1.f, duration, 1.f, 20.f, 1);
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state Chaos_Lightning_Targeted_Engage in cACS_Transformation_Vampiress
{
	var temp, temp_2, temp_3, temp_4, temp_5									: CEntityTemplate;
	var ent, ent_1, ent_2, ent_3, ent_4, ent_5									: CEntity;
	var i, count, count_2, j, k													: int;
	var playerPos, spawnPos, spawnPos2, posAdjusted, posAdjusted2, entPos		: Vector;
	var randAngle, randRange, randAngle_2, randRange_2, distance				: float;
	var playerRot, playerRot2, adjustedRot										: EulerAngles;
	var actors    																: array<CActor>;
	var actor    																: CActor;
	var dmg																		: W3DamageAction;
	var projDMG																	: float;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Chaos_Lightning_Targeted_Entry();
	}

	entry function Chaos_Lightning_Targeted_Entry()
	{
		temp = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\fx\giant_lightning_strike.w2ent"
			
		, true );

		temp_2 = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\fx\custom_lightning.w2ent"
			
		, true );

		temp_4 = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\fx\q603_08_fire_01.w2ent"
			
		, true );

		temp_5 = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\fx\acs_guiding_wind.w2ent"
			
		, true );

		if (thePlayer.IsInCombat())
		{
			GetACSWatcher().ACSTransformVampiressMovementAdjust('rotatetoenemy', true);
		}
		else
		{
			GetACSWatcher().ACSTransformVampiressMovementAdjust('forward', true);
		}

		if (thePlayer.GetTarget())
		{
			playerPos = ACSPlayerFixZAxis((thePlayer.GetDisplayTarget()).GetWorldPosition());
		}
		else
		{
			playerPos = ACSPlayerFixZAxis(ACSGetCActor('ACS_Transformation_Vampiress').GetWorldPosition() + ACSGetCActor('ACS_Transformation_Vampiress').GetHeadingVector() + ACSGetCActor('ACS_Transformation_Vampiress').GetWorldForward() * 10);
		}

		playerRot = thePlayer.GetWorldRotation();

		adjustedRot = EulerAngles(0,0,0);

		adjustedRot.Yaw = playerRot.Yaw;

		playerRot.Yaw = RandRangeF(360,1);
		playerRot.Pitch = RandRangeF(22.5,-22.5);

		playerRot2 = thePlayer.GetWorldRotation();
		playerRot2.Yaw = RandRangeF(360,1);
			
		ent_1 = theGame.CreateEntity( temp, playerPos, adjustedRot );

		ent_1.PlayEffectSingle('pre_lightning');
		ent_1.PlayEffectSingle('lightning');

		ent_1.DestroyAfter(10);



		ent_2 = theGame.CreateEntity( temp_2, playerPos, playerRot2 );

		ent_2.PlayEffectSingle('lighgtning');

		ent_2.DestroyAfter(10);



		ent_3 = theGame.CreateEntity( temp_2, playerPos, adjustedRot );

		ent_3.PlayEffectSingle('lighgtning');

		ent_3.DestroyAfter(10);


		theGame.GetSurfacePostFX().AddSurfacePostFXGroup( playerPos, 0.5f, 10.5f, 0.5f, 7.f, 1);


		count_2 = 12;

		for( j = 0; j < count_2; j += 1 )
		{
			randRange_2 = 2 + 2 * RandF();
			randAngle_2 = 2 * Pi() * RandF();
			
			spawnPos2.X = randRange_2 * CosF( randAngle_2 ) + playerPos.X;
			spawnPos2.Y = randRange_2 * SinF( randAngle_2 ) + playerPos.Y;
			//spawnPos2.Z = posAdjusted.Z;

			posAdjusted2 = ACSPlayerFixZAxis(spawnPos2);

			ent_4 = theGame.CreateEntity( temp_4, posAdjusted2, thePlayer.GetWorldRotation() );

			if (RandF() < 0.5)
			{
				ent_4.PlayEffectSingle('explosion');
				ent_4.StopEffect('explosion');
			}
			else
			{
				if (RandF() < 0.5)
				{
					ent_4.PlayEffectSingle('explosion_big');
					ent_4.StopEffect('explosion_big');
				}
				else
				{
					ent_4.PlayEffectSingle('explosion_medium');
					ent_4.StopEffect('explosion_medium');
				}
			}

			ent_4.DestroyAfter(20);
		}

		actors.Clear();

		actors = ((CActor)thePlayer.GetDisplayTarget()).GetNPCsAndPlayersInRange( 4, 20, , FLAG_OnlyAliveActors + FLAG_ExcludePlayer);

		for( k = 0; k < actors.Size(); k += 1 )
		{
			actor = actors[k];
			
			if( actors.Size() > 0 )
			{	
				if (actor != ACSGetCActor('ACS_Transformation_Vampiress'))
				{
					dmg =  new W3DamageAction in this;

					dmg.Initialize(GetWitcherPlayer(), actor, GetWitcherPlayer(), GetWitcherPlayer().GetName(), EHRT_None, CPS_Undefined, false, false, true, false);

					if (actor.UsesVitality()) 
					{ 
						if ( actor.GetStat( BCS_Vitality ) >= actor.GetStatMax( BCS_Vitality ) * 0.25 )
						{
							projDMG = actor.GetStat( BCS_Vitality ) * 0.125; 
						}
						else if ( actor.GetStat( BCS_Vitality ) < actor.GetStatMax( BCS_Vitality ) * 0.25 )
						{
							projDMG = ( actor.GetStatMax( BCS_Vitality ) - actor.GetStat( BCS_Vitality ) ) * 0.125; 
						}
					} 
					else if (actor.UsesEssence()) 
					{ 
						if (((CMovingPhysicalAgentComponent)(actor.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
						|| actor.GetRadius() >= 0.7
						|| actor.HasAbility('Boss')
						|| actor.HasTag('IsBoss')
						)
						{
							if ( actor.GetStat( BCS_Essence ) >= actor.GetStatMax( BCS_Essence ) * 0.25 )
							{
								projDMG = actor.GetStat( BCS_Essence ) * 0.06125; 
							}
							else if ( actor.GetStat( BCS_Essence ) < actor.GetStatMax( BCS_Essence ) * 0.25 )
							{
								projDMG = ( actor.GetStatMax( BCS_Essence ) - actor.GetStat( BCS_Essence ) ) * 0.06125; 
							}
						}
						else
						{
							if ( actor.GetStat( BCS_Essence ) >= actor.GetStatMax( BCS_Essence ) * 0.25 )
							{
								projDMG = actor.GetStat( BCS_Essence ) * 0.125; 
							}
							else if ( actor.GetStat( BCS_Essence ) < actor.GetStatMax( BCS_Essence ) * 0.25 )
							{
								projDMG = ( actor.GetStatMax( BCS_Essence ) - actor.GetStat( BCS_Essence ) ) * 0.125; 
							}
						}
					}

					dmg.AddDamage( theGame.params.DAMAGE_NAME_FIRE, projDMG );
					dmg.SetHitAnimationPlayType(EAHA_ForceYes);
					dmg.SetSuppressHitSounds(true);

					dmg.AddEffectInfo(EET_HeavyKnockdown, 1);

					dmg.AddEffectInfo(EET_Burning, 1);

					dmg.SetForceExplosionDismemberment();
					
					theGame.damageMgr.ProcessAction( dmg );
					
					delete dmg;
				}
			}
		}

		thePlayer.SoundEvent( "fx_amb_thunder_close" );

		thePlayer.SoundEvent( "qu_nml_103_lightning" );
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state Chaos_Cloud_Summon_Engage in cACS_Transformation_Vampiress
{
	var temp, temp_2, temp_3, temp_4, temp_5									: CEntityTemplate;
	var ent, ent_1, ent_2, ent_3, ent_4, ent_5									: CEntity;
	var i, count, count_2, j, k													: int;
	var playerPos, spawnPos, spawnPos2, posAdjusted, posAdjusted2, entPos		: Vector;
	var randAngle, randRange, randAngle_2, randRange_2, distance				: float;
	var playerRot, playerRot2, adjustedRot										: EulerAngles;
	var actors    																: array<CActor>;
	var actor    																: CActor;
	var meshcomp																: CComponent;
	var animcomp 																: CAnimatedComponent;
	var h 																		: float;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Chaos_Cloud_Summon_Entry();
	}

	entry function Chaos_Cloud_Summon_Entry()
	{
		temp_5 = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\entities\lillith_magic\chaos_cloud.w2ent"
			
		, true );

		if (thePlayer.GetTarget())
		{
			playerPos = ACSPlayerFixZAxis((thePlayer.GetTarget()).GetWorldPosition());
		}
		else
		{
			playerPos = ACSPlayerFixZAxis(ACSGetCActor('ACS_Transformation_Vampiress').GetWorldPosition() + ACSGetCActor('ACS_Transformation_Vampiress').GetHeadingVector() + ACSGetCActor('ACS_Transformation_Vampiress').GetWorldForward() * 10);
		}

		playerRot = thePlayer.GetWorldRotation();

		adjustedRot = EulerAngles(0,0,0);

		adjustedRot.Yaw = playerRot.Yaw;

		count = 3;
		
		for( i = 0; i < count; i += 1 )
		{
			randRange = 5 + 5 * RandF();
			randAngle = 2 * Pi() * RandF();
			
			spawnPos.X = randRange * CosF( randAngle ) + playerPos.X;
			spawnPos.Y = randRange * SinF( randAngle ) + playerPos.Y;
			spawnPos.Z = playerPos.Z;

			ent_5 = theGame.CreateEntity( temp_5, spawnPos, adjustedRot );

			((CActor)ent_5).SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
			((CActor)ent_5).SetCanPlayHitAnim(false); 
			((CActor)ent_5).AddBuffImmunity_AllNegative('ACS_Chaos_Cloud', true); 

			((CNewNPC)ent_5).SetAttitude(thePlayer, AIA_Friendly);

			((CActor)ent_5).AddTag('IsBoss');

			((CActor)ent_5).AddAbility('Boss');

			((CActor)ent_5).AddAbility('BounceBoltsWildhunt');

			((CActor)ent_5).AddAbility('DjinnRage');

			animcomp = (CAnimatedComponent)ent_5.GetComponentByClassName('CAnimatedComponent');
			meshcomp = ent_5.GetComponentByClassName('CMeshComponent');
			h = 3;
			animcomp.SetScale(Vector(h,h,h,1));
			meshcomp.SetScale(Vector(h,h,h,1));	

			ent_5.DestroyAfter(60);

			actors.Clear();

			actors = thePlayer.GetNPCsAndPlayersInRange( 50, 20, , FLAG_Attitude_Hostile + FLAG_OnlyAliveActors + FLAG_ExcludePlayer);

			for( k = 0; k < actors.Size(); k += 1 )
			{
				actor = actors[k];
				
				if( actors.Size() > 0 )
				{	
					if (actor != ACSGetCActor('ACS_Transformation_Vampiress'))
					{
						((CNewNPC)ent_5).SetAttitude(actor, AIA_Hostile);
					}
				}
			}

			((CNewNPC)ent_5).SetAttitude(ACSGetCActor('ACS_Transformation_Vampiress'), AIA_Friendly);

			ACSGetCActor('ACS_Transformation_Vampiress').SetAttitude(((CNewNPC)ent_5), AIA_Friendly);

			((CNewNPC)ent_5).SetAttitude(thePlayer, AIA_Friendly);

			thePlayer.SetAttitude(((CNewNPC)ent_5), AIA_Friendly);

			ent_5.AddTag('ACS_Chaos_Cloud');
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state Chaos_Root_Projectile_Engage in cACS_Transformation_Vampiress
{
	var temp																	: CEntityTemplate;
	var ent																		: W3ACSRootAttack;
	var i, count_1, j, count_2													: int;
	var initPos, spawnPos, spawnPos2, posAdjusted, posAdjusted2, entPos			: Vector;
	var randAngle, randRange, distance											: float;
	var pos																		: Vector;
	var rot, playerRot															: EulerAngles;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Chaos_Root_Projectile();
	}

	entry function Chaos_Root_Projectile()
	{
		temp = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\entities\projectiles\sprigan_root_attack.w2ent"
			
		, true );

		//initPos = ACSPlayerFixZAxis((thePlayer.GetDisplayTarget()).GetWorldPosition());

		initPos = ACSGetCActor('ACS_Transformation_Vampiress').GetWorldPosition() + (ACSGetCActor('ACS_Transformation_Vampiress').GetWorldForward() * 1.5) + ACSGetCActor('ACS_Transformation_Vampiress').GetHeadingVector() * 15;

		playerRot = ACSGetCActor('ACS_Transformation_Vampiress').GetWorldRotation();

		playerRot.Yaw += RandRange(360,0);
		
		count_1 = 6;

		distance = 3;
			
		for( i = 0; i < count_1; i += 1 )
		{
			randRange = distance + distance * RandF();
			randAngle = 2 * Pi() * RandF();
			
			spawnPos.X = randRange * CosF( randAngle ) + initPos.X;
			spawnPos.Y = randRange * SinF( randAngle ) + initPos.Y;
			spawnPos.Z = initPos.Z;

			posAdjusted = ACSPlayerFixZAxis(spawnPos);

			count_2 = 2;

			for( j = 0; j < count_2; j += 1 )
			{
				randRange = distance + distance * RandF();
				randAngle = 2 * Pi() * RandF();
				
				spawnPos2.X = randRange * CosF( randAngle ) + posAdjusted.X;
				spawnPos2.Y = randRange * SinF( randAngle ) + posAdjusted.Y;
				spawnPos2.Z = posAdjusted.Z;

				posAdjusted2 = ACSPlayerFixZAxis(spawnPos2);

				ent = (W3ACSRootAttack)theGame.CreateEntity( temp, posAdjusted2, playerRot );

				ent.DestroyAfter(10);	
			}
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state Chaos_Wood_Projectile_Engage in cACS_Transformation_Vampiress
{
	private var targetPosition_1, targetPosition_2, targetPosition_3				: Vector;
	private var proj_1, proj_2, proj_3, proj_4, proj_5	 							: W3ACSChaosWoodProjectile;
	private var initpos_1, initpos_2, initpos_3										: Vector;
	
	event OnEnterState(prevStateName : name)
	{
		Chaos_Wood_Projectile_Entry();
	}
	
	entry function Chaos_Wood_Projectile_Entry()
	{
		if (thePlayer.IsInCombat())
		{
			GetACSWatcher().ACSTransformVampiressMovementAdjust('rotatetoenemy', true);
		}
		else
		{
			GetACSWatcher().ACSTransformVampiressMovementAdjust('forward', true);
		}

		if ( thePlayer.IsInCombat() && thePlayer.GetTarget() )
		{
			if (thePlayer.IsInCombat())
			{
				GetACSWatcher().ACSTransformVampiressMovementAdjust('rotatetoenemy', true);
			}
			else
			{
				GetACSWatcher().ACSTransformVampiressMovementAdjust('forward', true);
			}

			initpos_1 = ACSGetCActor('ACS_Transformation_Vampiress').GetWorldPosition() + (ACSGetCActor('ACS_Transformation_Vampiress').GetWorldForward() * 1.5) + ACSGetCActor('ACS_Transformation_Vampiress').GetHeadingVector() * 1.1;

			initpos_1.Z += 1.25;

			targetPosition_1 = ((CActor)thePlayer.GetDisplayTarget()).PredictWorldPosition(0.35f);

			targetPosition_1.Z += 0.5;
					
			proj_1 = (W3ACSChaosWoodProjectile)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\lillith_magic\chaos_wood_proj.w2ent", true ), initpos_1 );
							
			proj_1.Init(thePlayer);
			proj_1.PlayEffectSingle('glow');

			proj_1.ShootProjectileAtPosition( 0, 25, targetPosition_1, 500 );


			initpos_2 = ACSGetCActor('ACS_Transformation_Vampiress').GetWorldPosition() + (ACSGetCActor('ACS_Transformation_Vampiress').GetWorldForward() * 1.1) + ACSGetCActor('ACS_Transformation_Vampiress').GetWorldRight() * 1.1 + ACSGetCActor('ACS_Transformation_Vampiress').GetHeadingVector() * 1.1;
			
			initpos_2.Z += 1.5;

			targetPosition_2 = initpos_2 + ACSGetCActor('ACS_Transformation_Vampiress').GetWorldRight() * 1.5 + ACSGetCActor('ACS_Transformation_Vampiress').GetHeadingVector() * 30;

			targetPosition_2.Z -= 1.1;

			proj_2 = (W3ACSChaosWoodProjectile)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\lillith_magic\chaos_wood_proj.w2ent", true ), initpos_2 );
							
			proj_2.Init(thePlayer);
			proj_2.PlayEffectSingle('glow');

			proj_2.ShootProjectileAtPosition( 0, 25, targetPosition_1, 500 );


			initpos_3 = ACSGetCActor('ACS_Transformation_Vampiress').GetWorldPosition() + (ACSGetCActor('ACS_Transformation_Vampiress').GetWorldForward() * 1.1) + ACSGetCActor('ACS_Transformation_Vampiress').GetWorldRight() * -1.1 + ACSGetCActor('ACS_Transformation_Vampiress').GetHeadingVector() * 1.1;

			initpos_3.Z += 1.5;

			targetPosition_3 = initpos_3 + ACSGetCActor('ACS_Transformation_Vampiress').GetWorldRight() * -1.5 + ACSGetCActor('ACS_Transformation_Vampiress').GetHeadingVector() * 30;

			targetPosition_3.Z -= 1.1;

			proj_3 = (W3ACSChaosWoodProjectile)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\lillith_magic\chaos_wood_proj.w2ent", true ), initpos_3 );
							
			proj_3.Init(thePlayer);
			proj_3.PlayEffectSingle('glow');

			proj_3.ShootProjectileAtPosition( 0, 25, targetPosition_1, 500 );
		}
		else
		{
			targetPosition_1 = ACSGetCActor('ACS_Transformation_Vampiress').GetWorldPosition() + ACSGetCActor('ACS_Transformation_Vampiress').GetHeadingVector() + ACSGetCActor('ACS_Transformation_Vampiress').GetWorldForward() * 20;

			targetPosition_1.Z -= 1.1;

			initpos_1 = ACSGetCActor('ACS_Transformation_Vampiress').GetWorldPosition() + (ACSGetCActor('ACS_Transformation_Vampiress').GetWorldForward() * 1.5) + ACSGetCActor('ACS_Transformation_Vampiress').GetHeadingVector() * 1.1;

			proj_1 = (W3ACSChaosWoodProjectile)theGame.CreateEntity( 
			(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\lillith_magic\chaos_wood_proj.w2ent", true ), initpos_1 );
							
			proj_1.Init(thePlayer);
			proj_1.PlayEffectSingle('glow');

			proj_1.ShootProjectileAtPosition( 0, 25, targetPosition_1, 500 );
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state Chaos_Snowball_Single_Summon_Engage in cACS_Transformation_Vampiress
{
	private var proj_1																																										: W3ACSEredinFrostLine;
	private var proj_2																																										: W3WHMinionProjectile;
	private var targetPosition_1, targetPosition_2, targetPosition_3, targetPosition_4, targetPosition_5, position																			: Vector;
	private var actors																																			   							: array<CActor>;
	private var i         																																									: int;
	private var actortarget					       																																			: CActor;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);

		GetACSChaosSnowballProj1().Destroy();
		GetACSChaosSnowballProj2().Destroy();

		Chaos_Snowball_Summon();
	}
	
	entry function Chaos_Snowball_Summon()
	{
		if ( !theSound.SoundIsBankLoaded("monster_golem_ice.bnk") )
		{
			theSound.SoundLoadBank( "monster_golem_ice.bnk", false );
		}
		
		GetWitcherPlayer().SoundEvent("monster_golem_dao_cmb_swoosh_light");

		position = ACSGetCActor('ACS_Transformation_Vampiress').GetWorldPosition() + (ACSGetCActor('ACS_Transformation_Vampiress').GetWorldForward()) + ACSGetCActor('ACS_Transformation_Vampiress').GetHeadingVector() * 1.1;
		
		targetPosition_1 = position + ACSGetCActor('ACS_Transformation_Vampiress').GetHeadingVector() * 30;

		proj_1 = (W3ACSEredinFrostLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\eredin_frost_proj.w2ent", true ), position );
		proj_1.Init(GetWitcherPlayer());
		proj_1.PlayEffectSingle('fire_line');
		proj_1.ShootProjectileAtPosition(0,	100, targetPosition_1, 1 );
		proj_1.AddTag('ACS_Snowball_Line_1');

		proj_2 = (W3WHMinionProjectile)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\wh_minion_projectile.w2ent", true ), position );
		proj_2.Init(GetWitcherPlayer());
		proj_2.PlayEffectSingle('fire_line');
		proj_2.ShootProjectileAtPosition(0,	100, targetPosition_1, 1 );
		proj_2.AddTag('ACS_Snowball_Line_2');
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state Chaos_Snowball_Engage in cACS_Transformation_Vampiress
{
	private var proj_1																																										: W3ACSEredinFrostLine;
	private var proj_2																																										: W3WHMinionProjectile;
	private var targetPosition_1, targetPosition_2, targetPosition_3, targetPosition_4, targetPosition_5, position																			: Vector;
	private var actors																																			   							: array<CActor>;
	private var i         																																									: int;
	private var actortarget					       																																			: CActor;
		
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);

		Chaos_Snowball();
	}

	entry function Chaos_Snowball()
	{
		if ( !theSound.SoundIsBankLoaded("monster_golem_ice.bnk") )
		{
			theSound.SoundLoadBank( "monster_golem_ice.bnk", false );
		}
		
		GetWitcherPlayer().SoundEvent("monster_golem_dao_cmb_swoosh_light");

		position = ACSGetCActor('ACS_Transformation_Vampiress').GetWorldPosition() + (ACSGetCActor('ACS_Transformation_Vampiress').GetWorldForward() * 1.5) + ACSGetCActor('ACS_Transformation_Vampiress').GetHeadingVector() * 1.1;
		
		targetPosition_1 = position + ACSGetCActor('ACS_Transformation_Vampiress').GetHeadingVector() * 30;

		proj_1 = (W3ACSEredinFrostLine)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\eredin_frost_proj.w2ent", true ), position );
		proj_1.Init(GetWitcherPlayer());
		proj_1.PlayEffectSingle('fire_line');
		proj_1.ShootProjectileAtPosition(0,	20, targetPosition_1, 30 );
		proj_1.DestroyAfter(10);

		proj_2 = (W3WHMinionProjectile)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\wh_minion_projectile.w2ent", true ), position );
		proj_2.Init(GetWitcherPlayer());
		proj_2.PlayEffectSingle('fire_line');
		proj_2.ShootProjectileAtPosition(0,	20, targetPosition_1, 30 );
		proj_2.DestroyAfter(10);
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state Chaos_Ice_Explosion_Engage in cACS_Transformation_Vampiress
{
	var temp																	: CEntityTemplate;
	var ent																		: W3ChaosIceExplosion;
	var i, count_1, j, count_2													: int;
	var initPos, spawnPos, spawnPos2, posAdjusted, posAdjusted2, entPos			: Vector;
	var randAngle, randRange, distance											: float;
	var pos																		: Vector;
	var rot, playerRot															: EulerAngles;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Chaos_Ice_Explosion();
	}

	entry function Chaos_Ice_Explosion()
	{
		temp = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\entities\lillith_magic\chaos_ice_explosion.w2ent"
			
		, true );

		//initPos = ACSPlayerFixZAxis((thePlayer.GetDisplayTarget()).GetWorldPosition());

		initPos = ACSGetCActor('ACS_Transformation_Vampiress').GetWorldPosition() + (ACSGetCActor('ACS_Transformation_Vampiress').GetWorldForward() * 1.5) + ACSGetCActor('ACS_Transformation_Vampiress').GetHeadingVector() * 15;

		playerRot = ACSGetCActor('ACS_Transformation_Vampiress').GetWorldRotation();

		playerRot.Yaw += RandRange(360,0);
		
		count_1 = 6;

		distance = 3;
			
		for( i = 0; i < count_1; i += 1 )
		{
			randRange = distance + distance * RandF();
			randAngle = 2 * Pi() * RandF();
			
			spawnPos.X = randRange * CosF( randAngle ) + initPos.X;
			spawnPos.Y = randRange * SinF( randAngle ) + initPos.Y;
			spawnPos.Z = initPos.Z;

			posAdjusted = ACSPlayerFixZAxis(spawnPos);

			count_2 = 2;

			for( j = 0; j < count_2; j += 1 )
			{
				randRange = distance + distance * RandF();
				randAngle = 2 * Pi() * RandF();
				
				spawnPos2.X = randRange * CosF( randAngle ) + posAdjusted.X;
				spawnPos2.Y = randRange * SinF( randAngle ) + posAdjusted.Y;
				spawnPos2.Z = posAdjusted.Z;

				posAdjusted2 = ACSPlayerFixZAxis(spawnPos2);

				ent = (W3ChaosIceExplosion)theGame.CreateEntity( temp, posAdjusted2, playerRot );

				ent.DestroyAfter(30);	

				theGame.GetSurfacePostFX().AddSurfacePostFXGroup( TraceFloor( posAdjusted2 ), 1.f, 30, 1.f, 20.f, 0);
			}
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state Chaos_Orb_Small_Engage in cACS_Transformation_Vampiress
{
	private var targetPosition														: Vector;
	private var proj_1, proj_2, proj_3, proj_4, proj_5	 							: W3ACSChaosOrbSmall;
	private var initpos																: Vector;

	event OnEnterState(prevStateName : name)
	{
		Chaos_Orb_Small_Entry();
	}
	
	entry function Chaos_Orb_Small_Entry()
	{
		if (thePlayer.IsInCombat())
		{
			GetACSWatcher().ACSTransformVampiressMovementAdjust('rotatetoenemy', true);
		}
		else
		{
			GetACSWatcher().ACSTransformVampiressMovementAdjust('forward', true);
		}

		targetPosition = ((CActor)thePlayer.GetTarget()).PredictWorldPosition(0.35f);

		targetPosition.Z += 1.1;

		initpos = ACSGetCActor('ACS_Transformation_Vampiress').GetBoneWorldPosition('r_weapon');		

		initpos.Z += 0.5;

		proj_1 = (W3ACSChaosOrbSmall)theGame.CreateEntity( 
		(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\lillith_magic\chaos_orb_small.w2ent", true ), initpos );
						
		proj_1.Init(thePlayer);
		proj_1.PlayEffectSingle('fire_fx');
		proj_1.ShootProjectileAtPosition( 0, 15, targetPosition, 500 );
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state Chaos_Vacuum_Orb_Engage in cACS_Transformation_Vampiress
{
	private var targetPosition																																: Vector;

	event OnEnterState(prevStateName : name)
	{
		Vacuum_Orb_Entry();
	}

	entry function Vacuum_Orb_Entry()
	{
		var entity : CEntity;
		var iceSpike : W3ACSChasoVacuumOrb;
		var spawnPos : Vector;
		var rotation : EulerAngles;
		
		spawnPos = ACSGetCActor('ACS_Transformation_Vampiress').GetWorldPosition() + (ACSGetCActor('ACS_Transformation_Vampiress').GetWorldForward() * 1.1) + ACSGetCActor('ACS_Transformation_Vampiress').GetHeadingVector() * 5;

		spawnPos.Z += 1.1;

		rotation = GetWitcherPlayer().GetWorldRotation();

		rotation.Yaw = RandRangeF( 180.0, -180.0 );

		entity = (W3ACSChasoVacuumOrb)theGame.CreateEntity( 
		(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\lillith_magic\chaos_vacuum_orb.w2ent", true ), ACSPlayerFixZAxis(spawnPos), rotation );

		iceSpike = (W3ACSChasoVacuumOrb)entity;

		if( iceSpike )
		{
			iceSpike.Appear();
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state Chaos_Arena_Engage in cACS_Transformation_Vampiress
{
	var arena 											: W3ACSChaosArena;
	var duration										: float;
	var position, position2, position3					: Vector;
	var arenaApp1, arenaApp2 							: CEntity;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Chaos_Arena();
	}

	entry function Chaos_Arena()
	{
		duration = 30;

		GetACSChaosArena().Destroy();

		ACSGetCEntity('ACS_Chaos_Arena_Appearance_01').Destroy();

		ACSGetCEntity('ACS_Chaos_Arena_Appearance_02').Destroy();

		position = ACSGetCActor('ACS_Transformation_Vampiress').GetWorldPosition();

		arena = (W3ACSChaosArena)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\lillith_magic\chaos_arena.w2ent" ,true ), ACSPlayerFixZAxis( position ), thePlayer.GetWorldRotation());

		arena.AddTimer('destroy_arena', duration, false );

		arena.AddTag('ACS_Chaos_Arena');




		position2 = ACSPlayerFixZAxis( position );

		position2.Z -= 2;



		ACSGetCEntity('ACS_Chaos_Arena_Appearance_01').Destroy();

		arenaApp1 = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\lillith_magic\chaos_arena_appearance_01.w2ent" ,true ), position2, thePlayer.GetWorldRotation());

		//arenaApp1.CreateAttachment(arena);

		arenaApp1.AddTag('ACS_Chaos_Arena_Appearance_01');

		ACSGetCEntity('ACS_Chaos_Arena_Appearance_02').Destroy();

		arenaApp2 = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\lillith_magic\chaos_arena_appearance_02.w2ent" ,true ), position2, thePlayer.GetWorldRotation());

		//arenaApp2.CreateAttachment(arena);

		arenaApp2.AddTag('ACS_Chaos_Arena_Appearance_02');



		theGame.GetSurfacePostFX().AddSurfacePostFXGroup( TraceFloor( position ), 1.f, duration, 1.f, 60.f, 1);
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

state Chaos_Drain_Engage in cACS_Transformation_Vampiress
{
	private var actors, victims																		: array<CActor>;
	private var i																					: int;
	private var npc 																				: CNewNPC;
	private var actor, actortarget 																	: CActor;
	private var initpos, targetPosition																: Vector;
	private var ent, anchor, anchor_2  																: CEntity;
	private var rot, attach_rot                        						 						: EulerAngles;
   	private var pos, attach_vec																		: Vector;
	private var meshcomp																			: CComponent;
	private var animcomp 																			: CAnimatedComponent;
	private var h 																					: float;
	private var bone_vec																			: Vector;
	private var bone_rot																			: EulerAngles;
	private var anchorTemplate, anchorTemplate2														: CEntityTemplate;
	private var randAngle, randRange																: float;
	private var playerPos, spawnPos																	: Vector;
	
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);

		Chaos_Drain_Entry();
	}

	entry function Chaos_Drain_Entry()
	{
		actors.Clear();
		
		//actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 20, 3, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

		actors = ACSGetCActor('ACS_Transformation_Vampiress').GetNPCsAndPlayersInRange(20, 7, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			thePlayer.GainStat( BCS_Vitality, thePlayer.GetStatMax( BCS_Vitality) * 0.33 );

			thePlayer.GainStat( BCS_Stamina, thePlayer.GetStatMax( BCS_Stamina) * 0.33 );

			for( i = 0; i < actors.Size(); i += 1 )
			{
				npc = (CNewNPC)actors[i];

				if (npc == ACSGetCActor('ACS_Transformation_Vampiress')
				|| npc.HasTag('acs_snow_entity')
				|| npc.HasTag('smokeman') 
				|| npc.HasTag('ACS_Tentacle_1') 
				|| npc.HasTag('ACS_Tentacle_2') 
				|| npc.HasTag('ACS_Tentacle_3') 
				|| npc.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| npc.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| npc.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| npc.HasTag('ACS_Necrofiend_Tentacle_6')
				|| npc.HasTag('ACS_Necrofiend_Tentacle_5')
				|| npc.HasTag('ACS_Necrofiend_Tentacle_4')
				|| npc.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| npc.HasTag('ACS_Chaos_Cloud')
				|| npc.HasTag('ACS_Svalblod_Bossbar') 
				|| npc.HasTag('ACS_Melusine_Bossbar') 
				)
				continue;

				anchorTemplate = (CEntityTemplate)LoadResourceAsync( 
				
				"dlc\dlc_acs\data\fx\lillith_fx\health_drain.w2ent"
				
				, true );

				anchorTemplate2 = (CEntityTemplate)LoadResourceAsync( 
				
				"dlc\dlc_acs\data\entities\other\fx_dummy_entity.w2ent"
				
				, true );


				anchor = (CEntity)theGame.CreateEntity( anchorTemplate2, ACSGetCActor('ACS_Transformation_Vampiress').GetWorldPosition() + Vector( 0, 0, -10 ) );

				anchor.CreateAttachment( ACSGetCActor('ACS_Transformation_Vampiress'), 'r_weapon' );

				anchor.AddTag('ACS_Chaos_Life_Drain');

				anchor.DestroyAfter(10);



				anchor_2 = (CEntity)theGame.CreateEntity( anchorTemplate, npc.GetWorldPosition() + Vector( 0, 0, -10 ) );

				anchor_2.CreateAttachment( npc, , Vector( 0, 0, 1.25 ), EulerAngles(0,0,0) );


				anchor_2.AddTag('ACS_Chaos_Life_Drain_Anchor');

				anchor_2.DestroyAfter(10);


				if (!npc.HasBuff( EET_Swarm ) )
				{
					npc.AddEffectDefault(EET_Swarm, thePlayer, 'ACS_Chaos_Drain_Buff ');
				}

				npc.DrainStamina( ESAT_FixedValue, npc.GetStatMax( BCS_Stamina ), 10 );

				anchor_2.StopEffect('drain_energy_1');
				anchor_2.PlayEffectSingle('drain_energy_1', anchor);

				anchor.PlayEffectSingle('hit_electric');
				anchor.StopEffect('hit_electric');
			}
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

function ACS_Vampiress_Fx_Dummy_Spawn_Left_No_Tether( npc : CActor, pos : Vector )
{
	var temp															: CEntityTemplate;
	var ent																: CEntity;
	var i, count														: int;
	var spawnPos														: Vector;
	var randAngle, randRange											: float;
	var meshcomp														: CComponent;
	var animcomp 														: CAnimatedComponent;
	var h 																: float;		
	var adjustedRot														: EulerAngles;
	var eff_names														: array<name>;

	thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_large");

	thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_small");

	if (ACSGetCActor('ACS_Transformation_Vampiress').HasTag('ACS_Transformation_Bruxa'))
	{
		return;
	}

	if(RandF() < 0.5)
	{
		temp = (CEntityTemplate)LoadResource( 

		"dlc\dlc_acs\data\entities\lillith_magic\chaos_red_slashes.w2ent"
			
		, true );

		pos.Z += 1.25;

		adjustedRot = thePlayer.GetWorldRotation();

		adjustedRot.Yaw += RandRangeF(360,1);
		adjustedRot.Pitch += RandRangeF(360,1);
		adjustedRot.Roll += RandRangeF( 360, 1 );
		
		ent = theGame.CreateEntity( temp, pos, adjustedRot );

		eff_names.Clear();

		eff_names.PushBack('diagonal_up_left');
		eff_names.PushBack('diagonal_down_left');
		eff_names.PushBack('left');

		ent.PlayEffectSingle(eff_names[RandRange(eff_names.Size())]);

		ent.DestroyAfter(1);
	}
}

function ACS_Vampiress_Fx_Dummy_Spawn_Left( npc : CActor, pos : Vector )
{
	var temp															: CEntityTemplate;
	var ent																: CEntity;
	var i, count														: int;
	var spawnPos														: Vector;
	var randAngle, randRange											: float;
	var meshcomp														: CComponent;
	var animcomp 														: CAnimatedComponent;
	var h 																: float;		
	var adjustedRot														: EulerAngles;

	temp = (CEntityTemplate)LoadResource( 

	"dlc\dlc_acs\data\entities\lillith_magic\chaos_red_slashes.w2ent"
		
	, true );

	pos.Z += 1.25;

	adjustedRot = thePlayer.GetWorldRotation();

	adjustedRot.Yaw += RandRangeF(360,1);
	adjustedRot.Pitch += RandRangeF(360,1);
	adjustedRot.Roll += RandRangeF( 360, 1 );
	
	ent = theGame.CreateEntity( temp, pos, adjustedRot );

	ent.PlayEffectSingle('diagonal_up_left');
	ent.PlayEffectSingle('diagonal_down_left');
	ent.PlayEffectSingle('left');

	ent.DestroyAfter(1);

	//ACSGetCActor('ACS_Transformation_Vampiress').PlayEffectSingle('lightning_l', ent );
	//ACSGetCActor('ACS_Transformation_Vampiress').StopEffect('lightning_l');

	thePlayer.SoundEvent("magic_sorceress_vfx_arcane_explode");
}

function ACS_Vampiress_Fx_Dummy_Spawn_Right_No_Tether( npc : CActor, pos : Vector )
{
	var temp															: CEntityTemplate;
	var ent																: CEntity;
	var i, count														: int;
	var spawnPos														: Vector;
	var randAngle, randRange											: float;
	var meshcomp														: CComponent;
	var animcomp 														: CAnimatedComponent;
	var h 																: float;		
	var adjustedRot														: EulerAngles;
	var eff_names														: array<name>;

	thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_large");

	thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_small");

	if (ACSGetCActor('ACS_Transformation_Vampiress').HasTag('ACS_Transformation_Bruxa'))
	{
		return;
	}

	if(RandF() < 0.5)
	{
		temp = (CEntityTemplate)LoadResource( 

		"dlc\dlc_acs\data\entities\lillith_magic\chaos_red_slashes.w2ent"
			
		, true );

		pos.Z += 1.25;

		adjustedRot = thePlayer.GetWorldRotation();

		adjustedRot.Yaw += RandRangeF(360,1);
		adjustedRot.Pitch += RandRangeF(360,1);
		adjustedRot.Roll += RandRangeF( 360, 1 );
		
		ent = theGame.CreateEntity( temp, pos, adjustedRot );

		eff_names.Clear();

		eff_names.PushBack('diagonal_up_right');
		eff_names.PushBack('diagonal_down_right');
		eff_names.PushBack('right');

		ent.PlayEffectSingle(eff_names[RandRange(eff_names.Size())]);

		ent.DestroyAfter(1);
	}
}

function ACS_Vampiress_Fx_Dummy_Spawn_Right( npc : CActor, pos : Vector )
{
	var temp															: CEntityTemplate;
	var ent																: CEntity;
	var i, count														: int;
	var spawnPos														: Vector;
	var randAngle, randRange											: float;
	var meshcomp														: CComponent;
	var animcomp 														: CAnimatedComponent;
	var h 																: float;		
	var adjustedRot														: EulerAngles;

	temp = (CEntityTemplate)LoadResource( 

	"dlc\dlc_acs\data\entities\lillith_magic\chaos_red_slashes.w2ent"
		
	, true );

	pos.Z += 1.25;

	adjustedRot = thePlayer.GetWorldRotation();

	adjustedRot.Yaw += RandRangeF(360,1);
	adjustedRot.Pitch += RandRangeF(360,1);
	adjustedRot.Roll += RandRangeF( 360, 1 );
	
	ent = theGame.CreateEntity( temp, pos, adjustedRot );

	ent.PlayEffectSingle('diagonal_up_right');
	ent.PlayEffectSingle('diagonal_down_right');
	ent.PlayEffectSingle('right');

	ent.DestroyAfter(1);

	//ACSGetCActor('ACS_Transformation_Vampiress').PlayEffectSingle('lightning_r', ent );
	//ACSGetCActor('ACS_Transformation_Vampiress').StopEffect('lightning_r');

	thePlayer.SoundEvent("magic_sorceress_vfx_arcane_explode");
}

function ACS_Vampiress_Fx_Dummy_Spawn( npc : CActor, pos : Vector )
{
	var temp															: CEntityTemplate;
	var ent																: CEntity;
	var i, count														: int;
	var spawnPos														: Vector;
	var randAngle, randRange											: float;
	var meshcomp														: CComponent;
	var animcomp 														: CAnimatedComponent;
	var h 																: float;		
	var adjustedRot														: EulerAngles;

	temp = (CEntityTemplate)LoadResource( 

	//"dlc\dlc_acs\data\entities\other\fx_dummy_entity.w2ent"

	//"gameplay\abilities\sorceresses\fx_dummy_entity.w2ent"

	"dlc\dlc_acs\data\entities\lillith_magic\chaos_red_slashes.w2ent"
		
	, true );

	pos.Z += 1.25;

	adjustedRot = thePlayer.GetWorldRotation();

	adjustedRot.Yaw += RandRangeF(360,1);
	adjustedRot.Pitch += RandRangeF(360,1);
	adjustedRot.Roll += RandRangeF( 360, 1 );
	
	ent = theGame.CreateEntity( temp, pos, adjustedRot );

	ent.PlayEffectSingle('diagonal_up_right');
	ent.PlayEffectSingle('diagonal_down_right');
	ent.PlayEffectSingle('right');
	ent.PlayEffectSingle('diagonal_up_left');
	ent.PlayEffectSingle('diagonal_down_left');
	ent.PlayEffectSingle('left');
	ent.PlayEffectSingle('up');
	ent.PlayEffectSingle('down');

	ent.DestroyAfter(1);

	ACSGetCActor('ACS_Transformation_Vampiress').PlayEffectSingle('lightning', ent );
	ACSGetCActor('ACS_Transformation_Vampiress').StopEffect('lightning');
}

function ACS_Vampiress_Fx_Dummy_Spawn_Both_Hands_No_Tether( npc : CActor, pos : Vector )
{
	var temp															: CEntityTemplate;
	var ent																: CEntity;
	var i, count														: int;
	var spawnPos														: Vector;
	var randAngle, randRange											: float;
	var meshcomp														: CComponent;
	var animcomp 														: CAnimatedComponent;
	var h 																: float;		
	var adjustedRot														: EulerAngles;
	var eff_names														: array<name>;

	thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_large");

	thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_small");

	if (ACSGetCActor('ACS_Transformation_Vampiress').HasTag('ACS_Transformation_Bruxa'))
	{
		return;
	}

	if(RandF() < 0.5)
	{
		temp = (CEntityTemplate)LoadResource( 

		//"dlc\dlc_acs\data\entities\other\fx_dummy_entity.w2ent"

		//"gameplay\abilities\sorceresses\fx_dummy_entity.w2ent"

		"dlc\dlc_acs\data\entities\lillith_magic\chaos_red_slashes.w2ent"
			
		, true );

		pos.Z += 1.25;

		adjustedRot = thePlayer.GetWorldRotation();

		adjustedRot.Yaw += RandRangeF(360,1);
		adjustedRot.Pitch += RandRangeF(360,1);
		adjustedRot.Roll += RandRangeF( 360, 1 );
		
		ent = theGame.CreateEntity( temp, pos, adjustedRot );

		eff_names.Clear();

		eff_names.PushBack('diagonal_up_right');
		eff_names.PushBack('diagonal_down_right');
		eff_names.PushBack('right');
		eff_names.PushBack('diagonal_up_left');
		eff_names.PushBack('diagonal_down_left');
		eff_names.PushBack('left');
		eff_names.PushBack('up');
		eff_names.PushBack('down');

		ent.PlayEffectSingle(eff_names[RandRange(eff_names.Size())]);

		ent.DestroyAfter(1);
	}
}

function ACS_Vampiress_Fx_Dummy_Spawn_Both_Hands( npc : CActor, pos : Vector )
{
	var temp															: CEntityTemplate;
	var ent																: CEntity;
	var i, count														: int;
	var spawnPos														: Vector;
	var randAngle, randRange											: float;
	var meshcomp														: CComponent;
	var animcomp 														: CAnimatedComponent;
	var h 																: float;		
	var adjustedRot														: EulerAngles;

	temp = (CEntityTemplate)LoadResource( 

	//"dlc\dlc_acs\data\entities\other\fx_dummy_entity.w2ent"

	//"gameplay\abilities\sorceresses\fx_dummy_entity.w2ent"

	"dlc\dlc_acs\data\entities\lillith_magic\chaos_red_slashes.w2ent"
		
	, true );

	pos.Z += 1.25;

	adjustedRot = thePlayer.GetWorldRotation();

	adjustedRot.Yaw += RandRangeF(360,1);
	adjustedRot.Pitch += RandRangeF(360,1);
	adjustedRot.Roll += RandRangeF( 360, 1 );
	
	ent = theGame.CreateEntity( temp, pos, adjustedRot );

	ent.PlayEffectSingle('diagonal_up_right');
	ent.PlayEffectSingle('diagonal_down_right');
	ent.PlayEffectSingle('right');
	ent.PlayEffectSingle('diagonal_up_left');
	ent.PlayEffectSingle('diagonal_down_left');
	ent.PlayEffectSingle('left');
	ent.PlayEffectSingle('up');
	ent.PlayEffectSingle('down');

	ent.DestroyAfter(1);

	ACSGetCActor('ACS_Transformation_Vampiress').PlayEffectSingle('lightning_r', ent );
	ACSGetCActor('ACS_Transformation_Vampiress').StopEffect('lightning_r');

	ACSGetCActor('ACS_Transformation_Vampiress').PlayEffectSingle('lightning_l', ent );
	ACSGetCActor('ACS_Transformation_Vampiress').StopEffect('lightning_l');

	thePlayer.SoundEvent("magic_sorceress_vfx_arcane_explode");
}

function GetACSChaosMeteorSingle() : W3ACSChaosMeteorProjectile
{
	var entity 			 : W3ACSChaosMeteorProjectile;
	
	entity = (W3ACSChaosMeteorProjectile)theGame.GetEntityByTag( 'ACS_Chaos_Meteorite_Single' );
	return entity;
}

function GetACSChaosMagmaProj1() : W3ACSFireLine
{
	var entity 			 : W3ACSFireLine;
	
	entity = (W3ACSFireLine)theGame.GetEntityByTag( 'ACS_Magma_Line_1' );
	return entity;
}

function GetACSChaosMagmaProj2() : W3ACSRockLine
{
	var entity 			 : W3ACSRockLine;
	
	entity = (W3ACSRockLine)theGame.GetEntityByTag( 'ACS_Magma_Line_2' );
	return entity;
}

function GetACSChaosSnowballProj1() : W3ACSEredinFrostLine
{
	var entity 			 : W3ACSEredinFrostLine;
	
	entity = (W3ACSEredinFrostLine)theGame.GetEntityByTag( 'ACS_Snowball_Line_1' );
	return entity;
}

function GetACSChaosSnowballProj2() : W3WHMinionProjectile
{
	var entity 			 : W3WHMinionProjectile;
	
	entity = (W3WHMinionProjectile)theGame.GetEntityByTag( 'ACS_Snowball_Line_2' );
	return entity;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class cACS_Human_Ice_Breathe_Controller
{
    function ACS_Human_Ice_Breathe_Controller_Engage()
	{
		this.PushState('ACS_Human_Ice_Breathe_Controller_Engage');
	}
}

state ACS_Human_Ice_Breathe_Controller_Engage in cACS_Human_Ice_Breathe_Controller
{
	private var temp									: CEntityTemplate;
	private var controller								: CEntity;
	private var actors									: array<CActor>;
	private var npc										: CActor;
	private var i, j									: int;
	private var voiceTagName 							: name;
	private var voiceTagStr								: string;
	private var appearanceName 							: name;
	private var appearanceStr							: string;
	private var bonePosition							: Vector;
	private var boneRotation							: EulerAngles;

	event OnEnterState(prevStateName : name)
	{
		Human_Ice_Breathe_Controller_Entry();
	}
	
	entry function Human_Ice_Breathe_Controller_Entry()
	{	
		if (
		IceBreathAreaCheck()
		|| IceBreathWeatherCheck()
		)
		{
			if (thePlayer.IsInInterior())
			{
				thePlayer.DestroyEffect('ice_breath_gameplay_indoor');

				thePlayer.DestroyEffect('ice_breath_gameplay');
			}
			else
			{
				if (!thePlayer.IsEffectActive('ice_breath_gameplay', false))
				{
					thePlayer.PlayEffectSingle('ice_breath_gameplay');
				}
			}
		}
		else
		{
			if (!theGame.IsDialogOrCutscenePlaying())
			{
				thePlayer.DestroyEffect('ice_breath_gameplay_indoor');
				thePlayer.DestroyEffect('ice_breath_gameplay');
			}
		}

		if (thePlayer.IsInInterior())
		{
			Remove_Weather_Facts();

			Remove_Skellige_Envs();

			ACSGetCEntity('acs_snow_entity').StopEffect('spiral_snow');
			ACSGetCEntity('acs_snow_entity').StopEffect('snow_dust');
			ACSGetCEntity('acs_snow_entity').StopEffect('slow_snow');
			ACSGetCEntity('acs_snow_entity').StopEffect('snow_low_fx');
			ACSGetCEntity('acs_snow_entity').StopEffect('snow_med_fx');
			ACSGetCEntity('acs_snow_entity').StopEffect('snow_low_fx_2');
			ACSGetCEntity('acs_snow_entity').StopEffect('snow_high_fx');
			ACSGetCEntity('acs_snow_entity').StopEffect('spiral_snow');
			ACSGetCEntity('acs_snow_entity').StopEffect('everstorm_embers_slow_1');
			ACSGetCEntity('acs_snow_entity').StopEffect('everstorm_embers_slow_2');
			ACSGetCEntity('acs_snow_entity').StopEffect('everstorm_embers_slow_3');
			ACSGetCEntity('acs_snow_entity').StopEffect('everstorm_embers_slow_4');
			ACSGetCEntity('acs_snow_entity').StopEffect('spiral_sand');
		}
		else
		{
			if (
			((thePlayer.HasTag('ACS_Wild_Hunt_Pursuit')
			&& ACSWildHuntRiders_CheckDistance())
			|| ACSGetCActor('ACS_Eredin') 
			|| ACSGetCActor('ACS_Canaris')
			|| thePlayer.HasTag('ACS_Wild_Hunt_Horse_Flying'))
			&& GetWeatherConditionName() != 'WT_Blizzard'
			&& GetWeatherConditionName() != 'WT_q501_Blizzard2'
			)
			{
				if (!ACSGetCEntity('acs_snow_entity').IsEffectActive('spiral_snow', false))
				{
					ACSGetCEntity('acs_snow_entity').PlayEffectSingle('spiral_snow');
				}

				Snow_Controller();
			}
			else
			{
				ACSGetCEntity('acs_snow_entity').StopEffect('spiral_snow');

				Snow_Controller();
			}

			if (thePlayer.HasTag('ACS_Player_In_Everstorm'))
			{
				ACSGetCEntity('acs_snow_entity').DestroyEffect('spiral_snow');
				ACSGetCEntity('acs_snow_entity').DestroyEffect('snow_dust');
				ACSGetCEntity('acs_snow_entity').DestroyEffect('slow_snow');
				ACSGetCEntity('acs_snow_entity').DestroyEffect('snow_low_fx');
				ACSGetCEntity('acs_snow_entity').DestroyEffect('snow_med_fx');
				ACSGetCEntity('acs_snow_entity').DestroyEffect('snow_low_fx_2');
				ACSGetCEntity('acs_snow_entity').DestroyEffect('snow_high_fx');
				ACSGetCEntity('acs_snow_entity').DestroyEffect('spiral_snow');

				if (!ACSGetCEntity('acs_snow_entity').IsEffectActive('spiral_sand', false))
				{
					ACSGetCEntity('acs_snow_entity').PlayEffectSingle('spiral_sand');
				}

				if (thePlayer.HasTag('ACS_Player_In_Everstorm_Distance_1'))
				{
					ACSGetCEntity('acs_snow_entity').StopEffect('everstorm_embers_slow_1');
					ACSGetCEntity('acs_snow_entity').StopEffect('everstorm_embers_slow_2');
					ACSGetCEntity('acs_snow_entity').StopEffect('everstorm_embers_slow_3');

					if (!ACSGetCEntity('acs_snow_entity').IsEffectActive('everstorm_embers_slow_4', false))
					{
						ACSGetCEntity('acs_snow_entity').PlayEffectSingle('everstorm_embers_slow_4');
					}
				}
				else if (thePlayer.HasTag('ACS_Player_In_Everstorm_Distance_2'))
				{
					ACSGetCEntity('acs_snow_entity').StopEffect('everstorm_embers_slow_1');
					ACSGetCEntity('acs_snow_entity').StopEffect('everstorm_embers_slow_2');
					ACSGetCEntity('acs_snow_entity').StopEffect('everstorm_embers_slow_4');

					if (!ACSGetCEntity('acs_snow_entity').IsEffectActive('everstorm_embers_slow_3', false))
					{
						ACSGetCEntity('acs_snow_entity').PlayEffectSingle('everstorm_embers_slow_3');
					}
				}
				else if (thePlayer.HasTag('ACS_Player_In_Everstorm_Distance_3'))
				{
					ACSGetCEntity('acs_snow_entity').StopEffect('everstorm_embers_slow_1');
					ACSGetCEntity('acs_snow_entity').StopEffect('everstorm_embers_slow_3');
					ACSGetCEntity('acs_snow_entity').StopEffect('everstorm_embers_slow_4');

					if (!ACSGetCEntity('acs_snow_entity').IsEffectActive('everstorm_embers_slow_2', false))
					{
						ACSGetCEntity('acs_snow_entity').PlayEffectSingle('everstorm_embers_slow_2');
					}
				}
				else if (thePlayer.HasTag('ACS_Player_In_Everstorm_Distance_4'))
				{
					ACSGetCEntity('acs_snow_entity').StopEffect('everstorm_embers_slow_2');
					ACSGetCEntity('acs_snow_entity').StopEffect('everstorm_embers_slow_3');
					ACSGetCEntity('acs_snow_entity').StopEffect('everstorm_embers_slow_4');

					if (!ACSGetCEntity('acs_snow_entity').IsEffectActive('everstorm_embers_slow_1', false))
					{
						ACSGetCEntity('acs_snow_entity').PlayEffectSingle('everstorm_embers_slow_1');
					}
				}
			}
			else
			{
				ACSGetCEntity('acs_snow_entity').StopEffect('everstorm_embers_slow_1');
				ACSGetCEntity('acs_snow_entity').StopEffect('everstorm_embers_slow_2');
				ACSGetCEntity('acs_snow_entity').StopEffect('everstorm_embers_slow_3');
				ACSGetCEntity('acs_snow_entity').StopEffect('everstorm_embers_slow_4');
				ACSGetCEntity('acs_snow_entity').StopEffect('spiral_sand');
			}
		}
	}

	latent function Snow_Controller()
	{
		if ((theGame.GetWorld().GetDepotPath() == "levels\skellige\skellige.w2w"))
		{
			if (GetWeatherConditionName() == 'WT_Clear')
			{
				if (FactsQuerySum("ACS_Skellige_Clear_No_Snow") > 0
				|| FactsQuerySum("ACS_Skellige_Clear_Low_Snow") > 0
				)
				{
					return;
				}

				if (RandF() < 0.5)
				{
					if (FactsQuerySum("ACS_Skellige_Clear_Low_Snow") <= 0)
					{
						Skellige_Normal_Env();

						ACSGetCEntity('acs_snow_entity').StopEffect('snow_dust');
						ACSGetCEntity('acs_snow_entity').StopEffect('slow_snow');
						ACSGetCEntity('acs_snow_entity').StopEffect('snow_med_fx');
						ACSGetCEntity('acs_snow_entity').StopEffect('snow_high_fx');

						if (!ACSGetCEntity('acs_snow_entity').IsEffectActive('snow_low_fx', false))
						{
							ACSGetCEntity('acs_snow_entity').PlayEffectSingle('snow_low_fx');
						}

						if (!ACSGetCEntity('acs_snow_entity').IsEffectActive('snow_low_fx_2', false))
						{
							ACSGetCEntity('acs_snow_entity').PlayEffectSingle('snow_low_fx_2');
						}

						FactsAdd("ACS_Skellige_Clear_Low_Snow");
					}
				}
				else
				{
					if (FactsQuerySum("ACS_Skellige_Clear_No_Snow") <= 0)
					{
						Skellige_Mid_Clouds_Env();

						ACSGetCEntity('acs_snow_entity').StopEffect('snow_dust');
						ACSGetCEntity('acs_snow_entity').StopEffect('slow_snow');
						ACSGetCEntity('acs_snow_entity').StopEffect('snow_low_fx');
						ACSGetCEntity('acs_snow_entity').StopEffect('snow_low_fx_2');
						ACSGetCEntity('acs_snow_entity').StopEffect('snow_med_fx');
						ACSGetCEntity('acs_snow_entity').StopEffect('snow_high_fx');

						FactsAdd("ACS_Skellige_Clear_No_Snow");
					}
				}
			}
			else
			{
				Remove_Weather_Facts();

				if (
				GetWeatherConditionName() == 'WT_Snow' 
				)
				{
					Skellige_Blizzard_Env();

					ACSGetCEntity('acs_snow_entity').StopEffect('snow_dust');
					ACSGetCEntity('acs_snow_entity').StopEffect('slow_snow');
					ACSGetCEntity('acs_snow_entity').StopEffect('snow_low_fx');
					ACSGetCEntity('acs_snow_entity').StopEffect('snow_low_fx_2');

					if (!ACSGetCEntity('acs_snow_entity').IsEffectActive('snow_high_fx', false))
					{
						ACSGetCEntity('acs_snow_entity').PlayEffectSingle('snow_high_fx');
					}
				}
				else if (
				GetWeatherConditionName() == 'WT_Heavy_Snow' 
				)
				{
					Skellige_Blizzard_Env();

					if (!ACSGetCEntity('acs_snow_entity').IsEffectActive('snow_high_fx', false))
					{
						ACSGetCEntity('acs_snow_entity').PlayEffectSingle('snow_high_fx');
					}
				}
				else if (
				GetWeatherConditionName() == 'WT_Wild_Hunt'
				|| GetWeatherConditionName() == 'WT_q501_Blizzard'
				|| GetWeatherConditionName() == 'WT_q501_Blizzard2'
				)
				{
					Skellige_Normal_Env();

					ACSGetCEntity('acs_snow_entity').StopEffect('snow_high_fx');

					ACSGetCEntity('acs_snow_entity').StopEffect('slow_snow');

					ACSGetCEntity('acs_snow_entity').StopEffect('snow_dust');

					if (!ACSGetCEntity('acs_snow_entity').IsEffectActive('snow_med_fx', false))
					{
						ACSGetCEntity('acs_snow_entity').PlayEffectSingle('snow_med_fx');
					}
				}
				else if (
				GetWeatherConditionName() == 'WT_Mid_Clouds'
				)
				{
					Skellige_Normal_Env();

					ACSGetCEntity('acs_snow_entity').StopEffect('snow_dust');
					ACSGetCEntity('acs_snow_entity').StopEffect('slow_snow');
					ACSGetCEntity('acs_snow_entity').StopEffect('snow_med_fx');
					ACSGetCEntity('acs_snow_entity').StopEffect('snow_low_fx_2');
					ACSGetCEntity('acs_snow_entity').StopEffect('snow_high_fx');

					if (!ACSGetCEntity('acs_snow_entity').IsEffectActive('snow_low_fx', false))
					{
						ACSGetCEntity('acs_snow_entity').PlayEffectSingle('snow_low_fx');
					}
				}
				else if (
				GetWeatherConditionName() == 'WT_Heavy_Clouds'
				)
				{
					Skellige_Rain_Storm_Env();

					ACSGetCEntity('acs_snow_entity').StopEffect('snow_dust');
					ACSGetCEntity('acs_snow_entity').StopEffect('slow_snow');
					ACSGetCEntity('acs_snow_entity').StopEffect('snow_med_fx');
					ACSGetCEntity('acs_snow_entity').StopEffect('snow_high_fx');

					if (!ACSGetCEntity('acs_snow_entity').IsEffectActive('snow_low_fx', false))
					{
						ACSGetCEntity('acs_snow_entity').PlayEffectSingle('snow_low_fx');
					}
				}
				else if (
				GetWeatherConditionName() == 'WT_Fog_Snow'
				|| GetWeatherConditionName() == 'WT_Mid_Clouds_Fog'
				)
				{
					Skellige_Blizzard_Env();

					ACSGetCEntity('acs_snow_entity').StopEffect('slow_snow');
					ACSGetCEntity('acs_snow_entity').StopEffect('snow_low_fx');
					ACSGetCEntity('acs_snow_entity').StopEffect('snow_low_fx_2');
					ACSGetCEntity('acs_snow_entity').StopEffect('snow_dust');

					if (!ACSGetCEntity('acs_snow_entity').IsEffectActive('snow_high_fx', false))
					{
						ACSGetCEntity('acs_snow_entity').PlayEffectSingle('snow_high_fx');
					}
				}
				else if (
				GetWeatherConditionName() == 'WT_Heavy_Clouds_Dark'
				)
				{
					Skellige_Heavy_Clouds_Dark_Env();

					ACSGetCEntity('acs_snow_entity').StopEffect('snow_dust');
					ACSGetCEntity('acs_snow_entity').StopEffect('slow_snow');
					ACSGetCEntity('acs_snow_entity').StopEffect('snow_low_fx');
					ACSGetCEntity('acs_snow_entity').StopEffect('snow_med_fx');
					ACSGetCEntity('acs_snow_entity').StopEffect('snow_low_fx_2');
					ACSGetCEntity('acs_snow_entity').StopEffect('snow_high_fx');
				}
				else if (
				GetWeatherConditionName() == 'WT_Rain_Storm'
				)
				{
					Skellige_Mid_Clouds_Env();

					ACSGetCEntity('acs_snow_entity').StopEffect('snow_dust');
					ACSGetCEntity('acs_snow_entity').StopEffect('slow_snow');
					ACSGetCEntity('acs_snow_entity').StopEffect('snow_low_fx');
					ACSGetCEntity('acs_snow_entity').StopEffect('snow_med_fx');
					ACSGetCEntity('acs_snow_entity').StopEffect('snow_low_fx_2');
					ACSGetCEntity('acs_snow_entity').StopEffect('snow_high_fx');
				}
				else
				{
					Skellige_Normal_Env();

					ACSGetCEntity('acs_snow_entity').StopEffect('snow_dust');
					ACSGetCEntity('acs_snow_entity').StopEffect('slow_snow');
					ACSGetCEntity('acs_snow_entity').StopEffect('snow_low_fx');
					ACSGetCEntity('acs_snow_entity').StopEffect('snow_med_fx');
					ACSGetCEntity('acs_snow_entity').StopEffect('snow_low_fx_2');
					ACSGetCEntity('acs_snow_entity').StopEffect('snow_high_fx');
				}
			}
		}
		else
		{
			Remove_Weather_Facts();

			Remove_Skellige_Envs();

			if (
			GetWeatherConditionName() == 'WT_Snow' 
			)
			{
				if (!ACSGetCEntity('acs_snow_entity').IsEffectActive('snow_high_fx', false))
				{
					ACSGetCEntity('acs_snow_entity').PlayEffectSingle('snow_high_fx');
				}
			}
			else if (
			GetWeatherConditionName() == 'WT_Battle' 
			)
			{
				ACSGetCEntity('acs_snow_entity').StopEffect('snow_dust');
				ACSGetCEntity('acs_snow_entity').StopEffect('slow_snow');
				ACSGetCEntity('acs_snow_entity').StopEffect('snow_med_fx');
				ACSGetCEntity('acs_snow_entity').StopEffect('snow_high_fx');

				if (!ACSGetCEntity('acs_snow_entity').IsEffectActive('snow_low_fx', false))
				{
					ACSGetCEntity('acs_snow_entity').PlayEffectSingle('snow_low_fx');
				}
			}
			else if (
			GetWeatherConditionName() == 'WT_Battle_Forest'
			)
			{
				ACSGetCEntity('acs_snow_entity').StopEffect('snow_dust');
				ACSGetCEntity('acs_snow_entity').StopEffect('slow_snow');
				ACSGetCEntity('acs_snow_entity').StopEffect('snow_high_fx');

				if (!ACSGetCEntity('acs_snow_entity').IsEffectActive('snow_med_fx', false))
				{
					ACSGetCEntity('acs_snow_entity').PlayEffectSingle('snow_med_fx');
				}
			}
			else if (
			GetWeatherConditionName() == 'WT_Wild_Hunt'
			|| GetWeatherConditionName() == 'WT_q501_Blizzard'
			|| GetWeatherConditionName() == 'WT_q501_Blizzard2'
			)
			{
				ACSGetCEntity('acs_snow_entity').StopEffect('snow_high_fx');

				if (!ACSGetCEntity('acs_snow_entity').IsEffectActive('slow_snow', false))
				{
					ACSGetCEntity('acs_snow_entity').PlayEffectSingle('slow_snow');
				}

			}
			else if (
			GetWeatherConditionName() == 'WT_q604_Snow'
			)
			{
				ACSGetCEntity('acs_snow_entity').StopEffect('snow_dust');
				ACSGetCEntity('acs_snow_entity').StopEffect('slow_snow');
				ACSGetCEntity('acs_snow_entity').StopEffect('snow_low_fx_2');
				ACSGetCEntity('acs_snow_entity').StopEffect('snow_med_fx');
				ACSGetCEntity('acs_snow_entity').StopEffect('snow_high_fx');

				if (!ACSGetCEntity('acs_snow_entity').IsEffectActive('snow_low_fx', false))
				{
					ACSGetCEntity('acs_snow_entity').PlayEffectSingle('snow_low_fx');
				}
			}
			else if (
			GetWeatherConditionName() == 'WT_Fog_Snow'
			)
			{
				ACSGetCEntity('acs_snow_entity').StopEffect('snow_dust');
				ACSGetCEntity('acs_snow_entity').StopEffect('slow_snow');
				ACSGetCEntity('acs_snow_entity').StopEffect('snow_low_fx');
				ACSGetCEntity('acs_snow_entity').StopEffect('snow_med_fx');
				ACSGetCEntity('acs_snow_entity').StopEffect('snow_high_fx');

				if (!ACSGetCEntity('acs_snow_entity').IsEffectActive('snow_low_fx_2', false))
				{
					ACSGetCEntity('acs_snow_entity').PlayEffectSingle('snow_low_fx_2');
				}
			}
			else
			{
				ACSGetCEntity('acs_snow_entity').StopEffect('snow_dust');
				ACSGetCEntity('acs_snow_entity').StopEffect('slow_snow');
				ACSGetCEntity('acs_snow_entity').StopEffect('snow_low_fx');
				ACSGetCEntity('acs_snow_entity').StopEffect('snow_med_fx');
				ACSGetCEntity('acs_snow_entity').StopEffect('snow_low_fx_2');
				ACSGetCEntity('acs_snow_entity').StopEffect('snow_high_fx');
			}
		}
	}

	latent function Skellige_Blizzard_Env()
	{
		if (FactsQuerySum("ACS_Skellige_Heavy_Clouds_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('heavy_fog', false);

			FactsRemove("ACS_Skellige_Heavy_Clouds_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Heavy_Clouds_Dark_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('dark_clouds_heavy_rain', false);

			FactsRemove("ACS_Skellige_Heavy_Clouds_Dark_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Rain_Storm_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('rain_storm', false);

			FactsRemove("ACS_Skellige_Rain_Storm_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Mid_Clouds_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('fog', false);

			FactsRemove("ACS_Skellige_Mid_Clouds_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Normal_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('skellige_normal', false);

			FactsRemove("ACS_Skellige_Normal_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Blizzard_Env") <= 0)
		{
			GetACSWatcher().Custom_Env_Switch('blizzard', true);

			FactsAdd("ACS_Skellige_Blizzard_Env");
		}
	}

	latent function Skellige_Heavy_Clouds_Env()
	{
		if (FactsQuerySum("ACS_Skellige_Blizzard_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('blizzard', false);

			FactsRemove("ACS_Skellige_Blizzard_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Heavy_Clouds_Dark_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('dark_clouds_heavy_rain', false);

			FactsRemove("ACS_Skellige_Heavy_Clouds_Dark_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Rain_Storm_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('rain_storm', false);

			FactsRemove("ACS_Skellige_Rain_Storm_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Mid_Clouds_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('fog', false);

			FactsRemove("ACS_Skellige_Mid_Clouds_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Normal_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('skellige_normal', false);

			FactsRemove("ACS_Skellige_Normal_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Heavy_Clouds_Env") <= 0)
		{
			GetACSWatcher().Custom_Env_Switch('heavy_fog', true);

			FactsAdd("ACS_Skellige_Heavy_Clouds_Env");
		}
	}

	latent function Skellige_Heavy_Clouds_Dark_Env()
	{
		if (FactsQuerySum("ACS_Skellige_Blizzard_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('blizzard', false);

			FactsRemove("ACS_Skellige_Blizzard_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Heavy_Clouds_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('heavy_fog', false);

			FactsRemove("ACS_Skellige_Heavy_Clouds_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Rain_Storm_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('rain_storm', false);

			FactsRemove("ACS_Skellige_Rain_Storm_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Mid_Clouds_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('fog', false);

			FactsRemove("ACS_Skellige_Mid_Clouds_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Normal_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('skellige_normal', false);

			FactsRemove("ACS_Skellige_Normal_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Heavy_Clouds_Dark_Env") <= 0)
		{
			GetACSWatcher().Custom_Env_Switch('dark_clouds_heavy_rain', true);

			FactsAdd("ACS_Skellige_Heavy_Clouds_Dark_Env");
		}
	}

	latent function Skellige_Rain_Storm_Env()
	{
		if (FactsQuerySum("ACS_Skellige_Blizzard_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('blizzard', false);

			FactsRemove("ACS_Skellige_Blizzard_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Heavy_Clouds_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('heavy_fog', false);

			FactsRemove("ACS_Skellige_Heavy_Clouds_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Heavy_Clouds_Dark_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('dark_clouds_heavy_rain', false);

			FactsRemove("ACS_Skellige_Heavy_Clouds_Dark_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Mid_Clouds_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('fog', false);

			FactsRemove("ACS_Skellige_Mid_Clouds_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Normal_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('skellige_normal', false);

			FactsRemove("ACS_Skellige_Normal_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Rain_Storm_Env") <= 0)
		{
			GetACSWatcher().Custom_Env_Switch('rain_storm', true);

			FactsAdd("ACS_Skellige_Rain_Storm_Env");
		}
	}

	latent function Skellige_Mid_Clouds_Env()
	{
		if (FactsQuerySum("ACS_Skellige_Heavy_Clouds_Dark_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('dark_clouds_heavy_rain', false);

			FactsRemove("ACS_Skellige_Heavy_Clouds_Dark_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Heavy_Clouds_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('heavy_fog', false);

			FactsRemove("ACS_Skellige_Heavy_Clouds_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Blizzard_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('blizzard', false);

			FactsRemove("ACS_Skellige_Blizzard_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Rain_Storm_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('rain_storm', false);

			FactsRemove("ACS_Skellige_Rain_Storm_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Normal_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('skellige_normal', false);

			FactsRemove("ACS_Skellige_Normal_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Mid_Clouds_Env") <= 0)
		{
			GetACSWatcher().Custom_Env_Switch('fog', true);

			FactsAdd("ACS_Skellige_Mid_Clouds_Env");
		}
	}

	latent function Skellige_Normal_Env()
	{
		if (FactsQuerySum("ACS_Skellige_Heavy_Clouds_Dark_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('dark_clouds_heavy_rain', false);

			FactsRemove("ACS_Skellige_Heavy_Clouds_Dark_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Heavy_Clouds_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('heavy_fog', false);

			FactsRemove("ACS_Skellige_Heavy_Clouds_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Blizzard_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('blizzard', false);

			FactsRemove("ACS_Skellige_Blizzard_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Rain_Storm_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('rain_storm', false);

			FactsRemove("ACS_Skellige_Rain_Storm_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Mid_Clouds_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('fog', false);

			FactsRemove("ACS_Skellige_Mid_Clouds_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Normal_Env") <= 0)
		{
			GetACSWatcher().Custom_Env_Switch('skellige_normal', true);

			FactsAdd("ACS_Skellige_Normal_Env");
		}
	}
	
	latent function Remove_Skellige_Envs()
	{
		if (FactsQuerySum("ACS_Skellige_Blizzard_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('blizzard', false);

			FactsRemove("ACS_Skellige_Blizzard_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Heavy_Clouds_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('heavy_fog', false);

			FactsRemove("ACS_Skellige_Heavy_Clouds_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Heavy_Clouds_Dark_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('dark_clouds_heavy_rain', false);

			FactsRemove("ACS_Skellige_Heavy_Clouds_Dark_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Rain_Storm_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('rain_storm', false);

			FactsRemove("ACS_Skellige_Rain_Storm_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Mid_Clouds_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('fog', false);

			FactsRemove("ACS_Skellige_Mid_Clouds_Env");
		}

		if (FactsQuerySum("ACS_Skellige_Normal_Env") > 0)
		{
			GetACSWatcher().Custom_Env_Switch('skellige_normal', false);

			FactsRemove("ACS_Skellige_Normal_Env");
		}
	}

	latent function Remove_Weather_Facts()
	{
		if (FactsQuerySum("ACS_Skellige_Clear_No_Snow") > 0)
		{
			FactsRemove("ACS_Skellige_Clear_No_Snow");
		}

		if (FactsQuerySum("ACS_Skellige_Clear_Low_Snow") > 0)
		{
			FactsRemove("ACS_Skellige_Clear_Low_Snow");
		}
	}

	function IceBreathAreaCheck() : bool
	{
		if (
		theGame.GetCommonMapManager().GetCurrentArea() == AN_Skellige_ArdSkellig 
		|| theGame.GetCommonMapManager().GetCurrentArea() == AN_Island_of_Myst 
		|| theGame.GetCommonMapManager().GetCurrentArea() == AN_Prologue_Village_Winter 
		|| theGame.GetCommonMapManager().GetCurrentArea() == AN_Kaer_Morhen
		)
		{
			return true;
		}

		return false;
	}

	function IceBreathWeatherCheck() : bool
	{
		if (
		GetWeatherConditionName() == 'WT_Snow' 
		|| GetWeatherConditionName() == 'WT_Blizzard' 
		|| GetWeatherConditionName() == 'WT_Battle' 
		|| GetWeatherConditionName() == 'WT_Battle_Forest'
		|| GetWeatherConditionName() == 'WT_Mid_Clouds_Fog'
		|| GetWeatherConditionName() == 'WT_Wild_Hunt'
		|| GetWeatherConditionName() == 'WT_q501_Blizzard'
		|| GetWeatherConditionName() == 'WT_q501_Storm'
		|| GetWeatherConditionName() == 'WT_q501_Blizzard2'
		|| GetWeatherConditionName() == 'WT_q604_Snow'
		|| GetWeatherConditionName() == 'WT_Fog'
		|| GetWeatherConditionName() == 'WT_Light_Fog' 
		|| GetWeatherConditionName() == 'WT_Fog_Windy' 
		|| GetWeatherConditionName() == 'WT_Fog_Snow' 
		|| GetWeatherConditionName() == 'WT_Fog_Heavy' 
		|| GetWeatherConditionName() == 'WT_Cold' 
		|| GetWeatherConditionName() == 'WT_Cold_Clouds'
		|| GetWeatherConditionName() == 'fog1' 
		|| GetWeatherConditionName() == 'fog2' 
		|| GetWeatherConditionName() == 'flurry1' 
		|| GetWeatherConditionName() == 'flurry2' 
		|| GetWeatherConditionName() == 'flurry3' 
		|| GetWeatherConditionName() == 'flurry4' 
		|| GetWeatherConditionName() == 'snow1' 
		|| GetWeatherConditionName() == 'snow2' 
		|| GetWeatherConditionName() == 'snow3' 
		|| GetWeatherConditionName() == 'snow4' 
		|| GetWeatherConditionName() == 'snow5' 
		|| GetWeatherConditionName() == 'snow6'
		|| GetWeatherConditionName() == 'blizzard'
		|| GetWeatherConditionName() == 'LightSnow' 
		|| GetWeatherConditionName() == 'MidCloudsSnow' 
		|| GetWeatherConditionName() == 'Snow' 
		|| GetWeatherConditionName() == 'SnowWhite' 
		|| GetWeatherConditionName() == 'Blizzard'
		)
		{
			return true;
		}

		return false;
	}
}

function ACS_FireSourceCheck ( checkedActor: CActor ): bool 
{
    var entities: array<CGameplayEntity>;

	entities.Clear();

    FindGameplayEntitiesInRange(entities, checkedActor, 7, 1, , FLAG_ExcludePlayer, , 'W3FireSource');
	{
		if (entities.Size()>0)
		{
			return true;
		}
	}

    return false;
}

function ACS_Ice_Breathe_Entity_RemoveTag()
{	
	var ents, ents_2 										: array<CEntity>;
	var i, j												: int;
	
	ents.Clear();

	theGame.GetEntitiesByTag( 'ACS_Ice_Breathe_Controller_Added', ents );	
	
	for( i = 0; i < ents.Size(); i += 1 )
	{
		ents[i].DestroyEffect('ice_breath');

		ents[i].DestroyEffect('ice_breath_gameplay');

		ents[i].RemoveTag('ACS_Ice_Breathe_Controller_Added');
	}


	ents_2.Clear();

	theGame.GetEntitiesByTag( 'ACS_Ice_Breathe_Horse', ents_2 );	
	
	for( j = 0; j < ents_2.Size(); j += 1 )
	{
		ents_2[j].DestroyEffect('breath_fx_cutscene');

		ents_2[j].RemoveTag('ACS_Ice_Breathe_Horse');
	}
}

class CACSIceBreatheController extends CEntity
{
	private var ents  									: array<CGameplayEntity>;
	private var temp									: CEntityTemplate;
	private var controller								: CEntity;
	private var actors									: array<CActor>;
	private var actor									: CActor;
	private var i										: int;
	private var voiceTagName 							: name;
	private var voiceTagStr								: string;
	private var appearanceName 							: name;
	private var appearanceStr							: string;
	private var bonePosition							: Vector;
	private var boneRotation							: EulerAngles;
	
	event OnSpawned( spawnData : SEntitySpawnData )
	{
		super.OnSpawned(spawnData);

		AddTimer('AliveCheckTimer', 0.01, true);
	}
	
	timer function AliveCheckTimer ( dt : float, id : int)
	{
		ents.Clear();

		FindGameplayEntitiesCloseToPoint(ents, this.GetWorldPosition(), 0.01, 1, ,FLAG_ExcludePlayer, ,);

		//FindGameplayEntitiesInRange(ents, this, 0.01, 1, ,FLAG_ExcludePlayer );
		
		for( i = 0; i < ents.Size(); i += 1 )
		{
			if( ents.Size() > 0 )
			{
				actor = (CActor) ents[i];

				voiceTagName =  actor.GetVoicetag();
				voiceTagStr = NameToString( voiceTagName );
				
				appearanceName =  actor.GetAppearance();
				appearanceStr = NameToString( appearanceName );

				if (
				theGame.GetCommonMapManager().GetCurrentArea() == AN_Skellige_ArdSkellig 
				|| theGame.GetCommonMapManager().GetCurrentArea() == AN_Island_of_Myst 
				|| theGame.GetCommonMapManager().GetCurrentArea() == AN_Prologue_Village_Winter 
				|| theGame.GetCommonMapManager().GetCurrentArea() == AN_Kaer_Morhen
				|| GetWeatherConditionName() == 'WT_Snow' 
				|| GetWeatherConditionName() == 'WT_Blizzard' 
				|| GetWeatherConditionName() == 'WT_Battle' 
				|| GetWeatherConditionName() == 'WT_Battle_Forest'
				|| GetWeatherConditionName() == 'WT_Mid_Clouds_Fog'
				|| GetWeatherConditionName() == 'WT_Wild_Hunt'
				|| GetWeatherConditionName() == 'WT_q501_Blizzard'
				|| GetWeatherConditionName() == 'WT_q501_Storm'
				|| GetWeatherConditionName() == 'WT_q501_Blizzard2'
				|| GetWeatherConditionName() == 'WT_q604_Snow'
				|| GetWeatherConditionName() == 'WT_Fog'
				|| GetWeatherConditionName() == 'WT_Light_Fog' 
				|| GetWeatherConditionName() == 'WT_Fog_Windy' 
				|| GetWeatherConditionName() == 'WT_Fog_Snow' 
				|| GetWeatherConditionName() == 'WT_Fog_Heavy' 
				|| GetWeatherConditionName() == 'WT_Cold' 
				|| GetWeatherConditionName() == 'WT_Cold_Clouds'
				|| GetWeatherConditionName() == 'WT_Cold_BOB'
				|| GetWeatherConditionName() == 'fog1' 
				|| GetWeatherConditionName() == 'fog2' 
				|| GetWeatherConditionName() == 'flurry1' 
				|| GetWeatherConditionName() == 'flurry2' 
				|| GetWeatherConditionName() == 'flurry3' 
				|| GetWeatherConditionName() == 'flurry4' 
				|| GetWeatherConditionName() == 'snow1' 
				|| GetWeatherConditionName() == 'snow2' 
				|| GetWeatherConditionName() == 'snow3' 
				|| GetWeatherConditionName() == 'snow4' 
				|| GetWeatherConditionName() == 'snow5' 
				|| GetWeatherConditionName() == 'snow6'
				|| GetWeatherConditionName() == 'blizzard'
				|| GetWeatherConditionName() == 'LightSnow' 
				|| GetWeatherConditionName() == 'MidCloudsSnow' 
				|| GetWeatherConditionName() == 'Snow' 
				|| GetWeatherConditionName() == 'SnowWhite' 
				|| GetWeatherConditionName() == 'Blizzard'
				)
				{	
					if (!actor)
					{
						this.DestroyEffect('ice_breath_gameplay_indoor');
						this.DestroyEffect('ice_breath_gameplay');
					}
					else if(
					actor.IsHuman()
					|| actor.IsMan()
					|| actor.IsWoman()
					|| StrFindFirst(voiceTagStr, "BOY") >= 0
					|| StrFindFirst(voiceTagStr, "GIRL") >= 0
					|| StrFindFirst(appearanceStr, "BOY") >= 0
					|| StrFindFirst(appearanceStr, "GIRL") >= 0
					)
					{
						if (actor.IsAlive())
						{
							if (((CNewNPC)actor).IsInInterior())
							{
								actor.DestroyEffect('ice_breath');

								actor.DestroyEffect('ice_breath_gameplay');

								this.DestroyEffect('ice_breath');

								this.DestroyEffect('ice_breath_gameplay');
							}
							else
							{
								if (!actor.IsEffectActive('ice_breath', false))
								{
									actor.PlayEffectSingle('ice_breath');
								}

								if (!actor.IsEffectActive('ice_breath_gameplay', false))
								{
									actor.PlayEffectSingle('ice_breath_gameplay');
								}

								if (!this.IsEffectActive('ice_breath_gameplay', false))
								{
									this.PlayEffectSingle('ice_breath_gameplay');
								}

								if (!this.IsEffectActive('ice_breath', false))
								{
									this.PlayEffectSingle('ice_breath');
								}
							}
						}
						else
						{
							actor.DestroyEffect('ice_breath');

							actor.DestroyEffect('ice_breath_gameplay');

							this.DestroyEffect('ice_breath_gameplay_indoor');
							this.DestroyEffect('ice_breath_gameplay');
						}
					}
				}
				else
				{
					this.DestroyEffect('ice_breath_gameplay_indoor');
					this.DestroyEffect('ice_breath_gameplay');
				}
			}
			else
			{
				this.DestroyEffect('ice_breath_gameplay_indoor');
				this.DestroyEffect('ice_breath_gameplay');
			}
		}
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class cACS_EtherSword_Summon
{
	function EtherSword_Spawner_Engage()
	{
		this.PushState('EtherSword_Spawner_Engage');
	}
}

state EtherSword_Spawner_Engage in cACS_EtherSword_Summon
{
	private var trail_temp													: CEntityTemplate;
	private var sword_trail_1												: CEntity;

	event OnEnterState(prevStateName : name)
	{
		EtherSword_Spawner_Entry();
	}
	
	entry function EtherSword_Spawner_Entry()
	{
		ACSGetCEntity('ACS_Armor_Ether_Sword').Destroy();
		
		if (!ACSGetCEntity('ACS_Armor_Ether_Sword'))
		{
			ACS_HideSwordWitoutScabbardStuff();

			trail_temp = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\acs_enemy_sword_trail.w2ent" , true );

			sword_trail_1 = (CEntity)theGame.CreateEntity( trail_temp, thePlayer.GetWorldPosition() + Vector( 0, 0, -20 ) );

			sword_trail_1.CreateAttachment( thePlayer, 'r_weapon');

			sword_trail_1.AddTag( 'ACS_Armor_Ether_Sword' );

			sword_trail_1.PlayEffectSingle('special_attack_charged_iris');

			//sword_trail_1.PlayEffectSingle('red_runeword_igni_1');

			//sword_trail_1.PlayEffectSingle('red_runeword_igni_2');

			sword_trail_1.PlayEffectSingle('runeword1_fire_trail');

			sword_trail_1.PlayEffectSingle('runeword1_fire_trail_2');

			sword_trail_1.PlayEffectSingle('fire_sparks_trail');

			sword_trail_1.PlayEffectSingle('red_fast_attack_buff');

			sword_trail_1.PlayEffectSingle('red_fast_attack_buff_hit');

			if (ACS_Armor_Omega_Equipped_Check())
			{
				if(GetWitcherPlayer().IsWeaponHeld( 'silversword' ) )
				{
					sword_trail_1.PlayEffectSingle('soul_edge_glow');
				}
				else if(GetWitcherPlayer().IsWeaponHeld( 'steelsword' ))
				{
					sword_trail_1.PlayEffectSingle('war_sword_glow');
				}
			}
			else if (ACS_Armor_Alpha_Equipped_Check())
			{
				if(GetWitcherPlayer().IsWeaponHeld( 'silversword' ) )
				{
					sword_trail_1.PlayEffectSingle('doomsword_amasii_glow');
				}
				else if(GetWitcherPlayer().IsWeaponHeld( 'steelsword' ))
				{
					sword_trail_1.PlayEffectSingle('andurial_glow');
				}
			} 

			//sword_trail_1.PlayEffectSingle('arrow_trail_fire');

			//sword_trail_1.PlayEffectSingle('arrow_trail_fire_2');

			//thePlayer.SoundEvent("magic_sorceress_vfx_lightning_fx_loop_start");
		}

		//sword_trail_1.DestroyAfter(10);
	}

}

function ACSMeditationCampfire() : W3Campfire
{
	var entity 			 : W3Campfire;
	
	entity = (W3Campfire)theGame.GetEntityByTag( 'ACS_Meditation_Campfire' );
	return entity;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class cACS_Red_Blade_Projectile_Fire
{
    function ACS_Red_Blade_Projectile_Engage()
	{
		this.PushState('ACS_Red_Blade_Projectile_Engage');
	}
}

state ACS_Red_Blade_Projectile_Engage in cACS_Red_Blade_Projectile_Fire
{
	private var proj_1											: ACSBladeProjectile;
	private var initpos, newpos, targetPosition, bladepos		: Vector;
	private var portal_ent										: CEntity;
	private var actor											: CActor; 
	private var actors		    								: array<CActor>;
	private var i												: int;
	private var npc												: CNewNPC;
	private var blade_temp, portal_temp							: CEntityTemplate;
	private var playerRot, adjustedRot							: EulerAngles;

	event OnEnterState(prevStateName : name)
	{
		Red_Blade_Projectile_Entry();
	}

	entry function Red_Blade_Projectile_Entry()
	{
		thePlayer.SoundEvent("fx_rune_activate_igni");

		portal_temp = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\fx\portal.w2ent", true );
		
		blade_temp = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\blade_projectile.w2ent", true );

		initpos = GetWitcherPlayer().GetWorldPosition() + (GetWitcherPlayer().GetHeadingVector() * RandRangeF(2, -2)) + (GetWitcherPlayer().GetWorldRight() * RandRangeF(7, -7)) ;	
		initpos.Z += RandRangeF(2, 0.25);

		playerRot = thePlayer.GetWorldRotation();

		adjustedRot = EulerAngles(0,0,0);

		adjustedRot.Yaw = playerRot.Yaw;

		portal_ent = (CEntity)theGame.CreateEntity( portal_temp, initpos, adjustedRot );

		portal_ent.PlayEffectSingle('teleport');

		portal_ent.PlayEffectSingle('portal');

		bladepos = initpos;
		bladepos.Z += 3.75;

		proj_1 = (ACSBladeProjectile)theGame.CreateEntity( blade_temp, bladepos );
								
		proj_1.Init(thePlayer);

		if (ACS_Armor_Alpha_Equipped_Check())
		{
			portal_ent.DestroyAfter(7);
		}
		else if (ACS_Armor_Omega_Equipped_Check())
		{
			portal_ent.DestroyAfter(2);
		}

		if(thePlayer.IsInCombat())
		{
			if ( thePlayer.IsHardLockEnabled() )
			{
				targetPosition = ((CActor)( thePlayer.GetDisplayTarget() )).PredictWorldPosition(0.35f);

				if (ACS_Armor_Alpha_Equipped_Check())
				{
					targetPosition.Z += 0.75;
				}
				else if (ACS_Armor_Omega_Equipped_Check())
				{
					targetPosition.Z += 1.1;
				}
			}
			else
			{
				targetPosition = ((CActor)( thePlayer.moveTarget )).PredictWorldPosition(0.35f);
				
				if (ACS_Armor_Alpha_Equipped_Check())
				{
					targetPosition.Z += 0.75;
				}
				else if (ACS_Armor_Omega_Equipped_Check())
				{
					targetPosition.Z += 1.1;
				}

				/*
				actors.Clear();

				actors = thePlayer.GetNPCsAndPlayersInRange( 50, 1, , FLAG_OnlyAliveActors + FLAG_ExcludePlayer + FLAG_Attitude_Hostile);

				if( actors.Size() > 0 )
				{
					for( i = 0; i < actors.Size(); i += 1 )
					{
						npc = (CNewNPC)actors[i];

						actor = actors[i];

						targetPosition = actor.PredictWorldPosition(0.35f);
						
						if (ACS_Armor_Alpha_Equipped_Check())
						{
							targetPosition.Z += 0.25;
						}
						else if (ACS_Armor_Omega_Equipped_Check())
						{
							targetPosition.Z += 1.1;
						}
					}
				}
				*/
			}
		}
		else
		{
			targetPosition = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetHeadingVector() * 30;
			targetPosition.Z -= 5;
		}

		proj_1.ShootProjectileAtPosition( 0, RandRangeF(25,10), targetPosition, 500 );
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class cACS_Throw_Knife
{
    function ACS_Throw_Knife_Engage()
	{
		this.PushState('ACS_Throw_Knife_Engage');
	}
}

state ACS_Throw_Knife_Engage in cACS_Throw_Knife
{
	private var proj_1								: W3ACSKnifeProjectile;
	private var initpos, newpos, targetPosition		: Vector;
	private var blade_temp							: CEntityTemplate;
	private var actor								: CActor;

	event OnEnterState(prevStateName : name)
	{
		Throw_Knife_Entry();
	}

	entry function Throw_Knife_Entry()
	{
		blade_temp = (CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\acs_knife_projectile.w2ent", true );

		initpos = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetHeadingVector();	
		initpos.Z += 1.1;

		proj_1 = (W3ACSKnifeProjectile)theGame.CreateEntity( blade_temp, initpos );
								
		proj_1.Init(thePlayer);

		actor = ((CActor)( thePlayer.GetDisplayTarget() ));

		if( ACS_AttitudeCheck ( actor ) && GetWitcherPlayer().IsInCombat() && actor.IsAlive() )
		{
			if ( actor.GetBoneIndex('head') != -1 )
			{
				targetPosition = actor.GetBoneWorldPosition('head');
				targetPosition.Z += RandRangeF(0,-0.5);
				targetPosition.X += RandRangeF(0.125,-0.125);
			}
			else
			{
				targetPosition = actor.GetBoneWorldPosition('k_head_g');
				targetPosition.Z += RandRangeF(0,-0.5);
				targetPosition.X += RandRangeF(0.125,-0.125);
			}
		}
		else
		{
			targetPosition = GetWitcherPlayer().GetWorldPosition() + GetWitcherPlayer().GetWorldForward() * 30;

			targetPosition.Z += 1.25;
		}

		proj_1.ShootProjectileAtPosition( 0, 20, targetPosition, 500 );
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class cACS_Construct_Summon
{
    function Construct_Summon_Engage()
	{
		this.PushState('Construct_Summon_Engage');
	}
}

state Construct_Summon_Engage in cACS_Construct_Summon
{
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Construct_Summon_Entry();
	}
	
	entry function Construct_Summon_Entry()
	{
		if (!ACSGetCActor('ACS_Summoned_Construct_1'))
		{
			acsspawnconstruct1();
		}

		if (!ACSGetCActor('ACS_Summoned_Construct_2'))
		{
			acsspawnconstruct2();
		}
	}
	
	latent function acsspawnconstruct1()
	{
		var temp, temp_2, temp_3, ent_1_temp, trail_temp					: CEntityTemplate;
		var ent, ent_2, ent_3, sword_trail_1, l_anchor, r_blade1, l_blade1	: CEntity;
		var i, count														: int;
		var playerPos, spawnPos												: Vector;
		var randAngle, randRange											: float;
		var meshcomp														: CComponent;
		var animcomp 														: CAnimatedComponent;
		var h 																: float;
		var bone_vec, pos, attach_vec										: Vector;
		var bone_rot, rot, attach_rot, playerRot, adjustedRot				: EulerAngles;
		var animatedComponentA												: CAnimatedComponent;

		ACSGetCActor('ACS_Summoned_Construct_1').Destroy();

		temp = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\entities\monsters\detlaff_construct_summon.w2ent"

		//"dlc\bob\data\quests\main_quests\quest_files\q704_truth\characters\detlaff_construct.w2ent"
			
		, true );

		playerPos = theCamera.GetCameraPosition() + theCamera.GetCameraRight() * -2 + VecFromHeading(theCamera.GetCameraHeading()) * 2;

		playerRot = thePlayer.GetWorldRotation();

		adjustedRot = EulerAngles(0,0,0);

		adjustedRot.Yaw = playerRot.Yaw;

		//playerRot.Yaw += 180;
		
		ent = theGame.CreateEntity( temp, ACSPlayerFixZAxis(playerPos), adjustedRot );

		animcomp = (CAnimatedComponent)ent.GetComponentByClassName('CAnimatedComponent');
		meshcomp = ent.GetComponentByClassName('CMeshComponent');
		h = 0.8;
		animcomp.SetScale(Vector(h,h,h,1));
		meshcomp.SetScale(Vector(h,h,h,1));	

		((CNewNPC)ent).SetLevel(thePlayer.GetLevel());

		//((CNewNPC)ent).SetAttitude(thePlayer, AIA_Friendly);

		//thePlayer.SetAttitude(((CNewNPC)ent), AIA_Friendly);

		((CNewNPC)ent).SetTemporaryAttitudeGroup( 'friendly_to_player', AGP_Default );	

		((CActor)ent).SetAnimationSpeedMultiplier(1);

		ent.PlayEffectSingle('dive_shape');
		ent.StopEffect('dive_shape');

		((CActor)ent).SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
		((CActor)ent).SetCanPlayHitAnim(false); 
		//((CActor)ent).AddBuffImmunity_AllNegative('ACS_Summoned_Construct_1', true); 

		((CActor)ent).AddEffectDefault( EET_AxiiGuardMe, thePlayer, 'ACS_Summoned_Construct_Buff', false );

		ent.AddTag( 'ACS_Summoned_Construct_1' );

		animatedComponentA = (CAnimatedComponent)(((CNewNPC)ent)).GetComponentByClassName( 'CAnimatedComponent' );	

		animatedComponentA.PlaySlotAnimationAsync ( 'dettlaff_construct_resurrection', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 0.5f));
	}

	latent function acsspawnconstruct2()
	{
		var temp															: CEntityTemplate;
		var ent																: CEntity;
		var playerPos, spawnPos												: Vector;
		var randAngle, randRange											: float;
		var meshcomp														: CComponent;
		var animcomp 														: CAnimatedComponent;
		var h 																: float;
		var bone_vec, pos, attach_vec										: Vector;
		var bone_rot, rot, attach_rot, playerRot, adjustedRot				: EulerAngles;
		var animatedComponentA												: CAnimatedComponent;
			
		ACSGetCActor('ACS_Summoned_Construct_2').Destroy();

		temp = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\entities\monsters\detlaff_construct_summon.w2ent"

		//"dlc\bob\data\quests\main_quests\quest_files\q704_truth\characters\detlaff_construct.w2ent"
			
		, true );

		playerPos = theCamera.GetCameraPosition() + theCamera.GetCameraRight() * 2 + VecFromHeading(theCamera.GetCameraHeading()) * 2;

		playerRot = thePlayer.GetWorldRotation();

		adjustedRot = EulerAngles(0,0,0);

		adjustedRot.Yaw = playerRot.Yaw;

		//playerRot.Yaw += 180;
		
		ent = theGame.CreateEntity( temp, ACSPlayerFixZAxis(playerPos), adjustedRot );

		animcomp = (CAnimatedComponent)ent.GetComponentByClassName('CAnimatedComponent');
		meshcomp = ent.GetComponentByClassName('CMeshComponent');
		h = 0.8;
		animcomp.SetScale(Vector(h,h,h,1));
		meshcomp.SetScale(Vector(h,h,h,1));	

		((CNewNPC)ent).SetLevel(thePlayer.GetLevel());

		//((CNewNPC)ent).SetAttitude(thePlayer, AIA_Friendly);

		//thePlayer.SetAttitude(((CNewNPC)ent), AIA_Friendly);

		((CNewNPC)ent).SetTemporaryAttitudeGroup( 'friendly_to_player', AGP_Default );	

		((CActor)ent).SetAnimationSpeedMultiplier(1);

		ent.PlayEffectSingle('dive_shape');
		ent.StopEffect('dive_shape');

		((CActor)ent).SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
		((CActor)ent).SetCanPlayHitAnim(false); 
		//((CActor)ent).AddBuffImmunity_AllNegative('ACS_Summoned_Construct_2', true); 

		((CActor)ent).AddEffectDefault( EET_AxiiGuardMe, thePlayer, 'ACS_Summoned_Construct_Buff', false );

		ent.AddTag( 'ACS_Summoned_Construct_2' );

		animatedComponentA = (CAnimatedComponent)(((CNewNPC)ent)).GetComponentByClassName( 'CAnimatedComponent' );	

		animatedComponentA.PlaySlotAnimationAsync ( 'dettlaff_construct_resurrection', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 0.5f));
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_Fog_Check() : bool
{
	if (
	(
	GetWeatherConditionName() != 'WT_Rain_Heavy' 
	&& GetWeatherConditionName() != 'WT_Rain_Dark' 
	&& GetWeatherConditionName() != 'WT_Rain_Storm' 
	&& ACS_Settings_Main_Bool('EHmodVisualSettings','EHmodFogSpawnEnabled', true)
	)
	&& !thePlayer.IsInInterior()
	)
	{
		return true;
	}

	return false;
}

function ACS_Fog_Generate()
{
	var vACS_Fog_Generate : cACS_Fog_Generate;
	vACS_Fog_Generate = new cACS_Fog_Generate in theGame;
	
	if (ACS_Fog_Check()
	&& ACS_IsFogTime()
	&& theGame.GetWorld().GetDepotPath() != "dlc\bob\data\levels\bob\bob.w2w"
	)
	{
		if (ACS_fog_ent_spawn() 
		&& !thePlayer.IsInCombat() 
		&& !thePlayer.IsThreatened())
		{
			ACS_refresh_fog_ent_spawn_cooldown();

			vACS_Fog_Generate.Fog_Generate_Engage();
		}
	}
	else
	{
		ACSGetCEntityDestroyAll('ACS_Fog_Ent');
	}
}

statemachine class cACS_Fog_Generate
{
    function Fog_Generate_Engage()
	{
		this.PushState('Fog_Generate_Engage');
	}
}

state Fog_Generate_Engage in cACS_Fog_Generate
{
	var temp																	: CEntityTemplate;
	var ent																		: CEntity;
	var i, count_1, j, count_2													: int;
	var initPos, spawnPos, spawnPos2, posAdjusted, posAdjusted2, entPos			: Vector;
	var randAngle, randRange, distance											: float;
	var meshcomp																: CComponent;
	var animcomp 																: CAnimatedComponent;
	var h 																		: float;
	var bone_vec, pos, attach_vec												: Vector;
	var bone_rot, rot, attach_rot, playerRot, adjustedRot									: EulerAngles;
	var world																	: CWorld;
	
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Fog_Generate();
	}

	entry function Fog_Generate()
	{
		temp = (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\fx\fog_ent.w2ent"
			
		, true );

		initPos = ACSPlayerFixZAxis(theCamera.GetCameraPosition() + theCamera.GetCameraDirection() * RandRangeF(60,20));

		playerRot = EulerAngles(0,0,0);

		playerRot.Yaw += RandRange(360,0);
		
		count_1 = RandRange(6,3);

		if (!ACS_PlayerSettlementCheck(50))
		{
			distance = RandRangeF(60, 30);
		}
		else
		{
			distance = RandRangeF(100, 70);
		}

		world = theGame.GetWorld();
			
		for( i = 0; i < count_1; i += 1 )
		{
			randRange = distance + distance * RandF();
			randAngle = 2 * Pi() * RandF();
			
			spawnPos.X = randRange * CosF( randAngle ) + initPos.X;
			spawnPos.Y = randRange * SinF( randAngle ) + initPos.Y;
			spawnPos.Z = initPos.Z;

			posAdjusted = ACSPlayerFixZAxis(spawnPos);

			count_2 = RandRange(3,1);

			for( j = 0; j < count_2; j += 1 )
			{
				randRange = distance + distance * RandF();
				randAngle = 2 * Pi() * RandF();
				
				spawnPos2.X = randRange * CosF( randAngle ) + posAdjusted.X;
				spawnPos2.Y = randRange * SinF( randAngle ) + posAdjusted.Y;
				spawnPos2.Z = posAdjusted.Z;

				posAdjusted2 = ACSPlayerFixZAxis(spawnPos2);

				ent = theGame.CreateEntity( temp, posAdjusted2, adjustedRot );

				if (RandF() < 0.5)
				{
					if (RandF() < 0.5)
					{
						ent.PlayEffectSingle('fog_1');
						ent.PlayEffectSingle('fog_2');
						ent.PlayEffectSingle('fog_3');
						ent.PlayEffectSingle('fog_4');
					}
					else
					{
						ent.PlayEffectSingle('fog_7');
						ent.PlayEffectSingle('fog_8');
						ent.PlayEffectSingle('fog_9');
						ent.PlayEffectSingle('fog_10');
					}
				}
				else
				{
					if (RandF() < 0.5)
					{
						ent.PlayEffectSingle('fog_1');
						ent.PlayEffectSingle('fog_2');
						ent.PlayEffectSingle('fog_3');
						ent.PlayEffectSingle('fog_4');
					}
					else
					{
						ent.PlayEffectSingle('fog_11');
						ent.PlayEffectSingle('fog_12');
						ent.PlayEffectSingle('fog_13');
						ent.PlayEffectSingle('fog_14');
					}
				}
				
				//ent.PlayEffectSingle('fog_5');
				//ent.PlayEffectSingle('fog_6');

				ent.DestroyAfter(240);

				ent.AddTag('ACS_Fog_Ent');
			}
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class cACS_Startup_Entity_Spawns
{
    function Startup_Entities_Engage()
	{
		this.PushState('Startup_Entities_Engage');
	}
}

state Startup_Entities_Engage in cACS_Startup_Entity_Spawns
{
	event OnEnterState(prevStateName : name)
	{
		Entity_Spawn_Entry();
	}
	
	entry function Entity_Spawn_Entry()
	{
		LookatSpawn();

		SnowSpawn();

		VolumetricCloudsSpawn();

		//SwarmLayerSpawn();

		GrassCollision();

		if (theGame.GetWorld().GetDepotPath() == "levels\the_spiral\spiral.w2w"
		|| theGame.GetWorld().GetDepotPath() == "levels\island_of_mist\island_of_mist.w2w"
		)
		{
			return;
		}

		SpiralSkySpawn();

		SpiralStarSpawn();

		SpiralRainbowSpawn();

		EverstormSpawn();

		SkyWhaleSpawn();

		if (theGame.GetWorld().GetDepotPath() == "levels\wmh_lv1\wmh_lv1.w2w"
		)
		{
			ConjunctionSpawn();
		}
	}

	latent function GrassCollision()
	{
		var ent 		: CEntity;

		ent = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
		"dlc\dlc_acs\data\fx\pc_aard_mq1060.w2ent"
		, true ), thePlayer.GetWorldPosition() + Vector(0,0,-200), thePlayer.GetWorldRotation() );

		//ent.CreateAttachment( thePlayer, , Vector( 0, 0, 0 ), EulerAngles(0,0,0) );

		ent.AddTag('ACS_Grass_Collision');
	}

	latent function VolumetricCloudsSpawn()
	{
		var cloudArray : array<CEntity>;
		var cameraPos : Vector;
		var cameraRot, adjustedRot : EulerAngles;
		var rot : EulerAngles;
		var effectName : CName;
		var template : CEntityTemplate;
		var cloudEnt : CEntity;
		var cloudRotationArray : array<EulerAngles>; // Array holding the rotation of volumetric clouds (direction in which they spawn)
		var cloudLocationArray : array<Vector>; // Array holding the locations of volumetric clouds
		var cloudTypeArray : array<CName>; // Array holding the type of cloud to be used for each cloud
		var sizeCloudArray,idx : int;

		if ((theGame.GetWorld().GetDepotPath() != "levels\skellige\skellige.w2w"))
		{
			return;
		}

		rot.Pitch = 350;
		rot.Yaw = 260;
		rot.Roll = 0;

		template = (CEntityTemplate)LoadResourceAsync("dlc\dlc_acs\data\fx\volumetric_clouds.w2ent", true);

		// EulerAngles(Pitch, Yaw, Roll);
	
		////////////////////////////////////////// Cloud definition start //////////////////////////////////////////////
		
		// Ard Skellig
		cloudLocationArray.PushBack(Vector(-218,492,40)); // Hill near Kaer Trolde
		cloudRotationArray.PushBack(rot);
		cloudTypeArray.PushBack('cloudsTerrain');
		
		cloudLocationArray.PushBack(Vector(-120,745,120)); // Kaer Trolde bridge waypoint, Z=70: below the bridge, Z=110: above the bridge
		cloudRotationArray.PushBack(EulerAngles(360,290,0));
		cloudTypeArray.PushBack('cloudsTerrain');
		
		cloudLocationArray.PushBack(Vector(-64,-690,255)); // Mountain peak close to Kaer Muire (northern Side) 
		cloudRotationArray.PushBack(rot);
		cloudTypeArray.PushBack('cloudsUp');
		
		
		cloudLocationArray.PushBack(Vector(-190,-814,240)); // Mountain side facing Undvik northwest of Kaer Muire 
		cloudRotationArray.PushBack(EulerAngles(360,280,0));
		cloudTypeArray.PushBack('cloudsUp');
		
		cloudLocationArray.PushBack(Vector(-312,660,110)); // Western mountain peak close to Kaer Trolde Bridge (southern Side)
		cloudRotationArray.PushBack(EulerAngles(350,80,0));
		cloudTypeArray.PushBack('cloudsUp');
		
		cloudLocationArray.PushBack(Vector(-297,988,214)); // Western mountain peak close to Kaer Trolde Bridge (northwestern Side near summit)
		cloudRotationArray.PushBack(EulerAngles(350,360,0));
		cloudTypeArray.PushBack('cloudsUp');
		
		cloudLocationArray.PushBack(Vector(-359,790,102)); // West coast mountain front northwest of Kaer Trolde 
		cloudRotationArray.PushBack(EulerAngles(350,90,0));
		cloudTypeArray.PushBack('cloudsUp');
		
		cloudLocationArray.PushBack(Vector(22,886,153)); // Northern coast mountain front northeastern peak of Kaer Trolde bridge
		cloudRotationArray.PushBack(EulerAngles(350,15,0));
		cloudTypeArray.PushBack('cloudsUp');
		
		cloudLocationArray.PushBack(Vector(159,890,72)); // Northern coast mountain front mid high above ancient crypt
		cloudRotationArray.PushBack(EulerAngles(350,15,0));
		cloudTypeArray.PushBack('cloudsTerrain');
		
		cloudLocationArray.PushBack(Vector(647,834,135)); // Northern coast mountain front east of the mountain top near ancient crypt
		cloudRotationArray.PushBack(EulerAngles(360,10,0));
		cloudTypeArray.PushBack('cloudsUp');
		
		cloudLocationArray.PushBack(Vector(800,632,138)); // Eastern mountain front near Kaer Gelen
		cloudRotationArray.PushBack(EulerAngles(360,340,0));
		cloudTypeArray.PushBack('cloudsUp');
		
		cloudLocationArray.PushBack(Vector(1327,245,84)); // East coast outlook east of Gedyneith
		cloudRotationArray.PushBack(EulerAngles(360,293,0));
		cloudTypeArray.PushBack('cloudsUp');
		
		//cloudLocationArray.PushBack(Vector(1186,-409,43)); // East coast southeastern mountain low
		cloudLocationArray.PushBack(Vector(1141,-400,80));
		cloudRotationArray.PushBack(EulerAngles(48,230,0));
		cloudTypeArray.PushBack('cloudsTerrain');
		
		cloudLocationArray.PushBack(Vector(1148,-467,109)); // East coast southeastern mountain higher up
		cloudRotationArray.PushBack(EulerAngles(48,230,0));
		cloudTypeArray.PushBack('cloudsTerrain');
		
		cloudLocationArray.PushBack(Vector(1139,-494,160)); // East coast southeastern mountain top
		cloudRotationArray.PushBack(EulerAngles(360,280,0));
		cloudTypeArray.PushBack('cloudsTerrain');
		
		cloudLocationArray.PushBack(Vector(1019,-702,149)); // South coast southeastern mountain south side close to cave entrance
		cloudRotationArray.PushBack(EulerAngles(360,280,0));
		cloudTypeArray.PushBack('cloudsTerrain');
		
		cloudLocationArray.PushBack(Vector(1158,-631,110)); // South coast southeastern mountain midway up above Grotto east
		cloudRotationArray.PushBack(EulerAngles(360,280,0));
		cloudTypeArray.PushBack('cloudsTerrain');
		
		cloudLocationArray.PushBack(Vector(876,-752,102)); // South coast southeastern mountain midway up above Grotto west
		cloudRotationArray.PushBack(EulerAngles(360,280,0));
		cloudTypeArray.PushBack('cloudsTerrain');
		
		cloudLocationArray.PushBack(Vector(1195,104,76)); // East coast eastern mountain front southeast of Gedyneith and northeast of druids' camp
		cloudRotationArray.PushBack(EulerAngles(270,280,0));
		cloudTypeArray.PushBack('cloudsTerrain');
		
		cloudLocationArray.PushBack(Vector(-222,622,50)); // Western mountain close to Kaer Trolde Bridge (lower part)
		cloudRotationArray.PushBack(EulerAngles(320,280,0));
		cloudTypeArray.PushBack('cloudsTerrain');
		
		cloudLocationArray.PushBack(Vector(87,511,100)); // Mountain front east of Kaer Trolde harbor
		//cloudRotationArray.PushBack(EulerAngles(350,290,0)); 
		cloudRotationArray.PushBack(EulerAngles(350,260,0));
		cloudTypeArray.PushBack('cloudsUp');
		
		//////////////////////////////////////////////////////////////////// Testing distant clouds start /////////////////////////////////////////////////////////////////////////////////
		
		cloudLocationArray.PushBack(Vector(-312,409,270)); // Western mountain peak close to Kaer Trolde Bridge (southern Side)
		cloudRotationArray.PushBack(EulerAngles(0,0,0));
		cloudTypeArray.PushBack('cloudsHuge');
		
		//////////////////////////////////////////////////////////////////// Testing distant clouds end /////////////////////////////////////////////////////////////////////////////////
		
		cloudLocationArray.PushBack(Vector(426,802,170)); // Mountain top east of ancient crypt
		cloudRotationArray.PushBack(EulerAngles(360,360,0));
		cloudTypeArray.PushBack('cloudsUp');
		
		cloudLocationArray.PushBack(Vector(70,-627,130)); // Mountains west of Fyresdal (low)
		cloudRotationArray.PushBack(EulerAngles(330,325,0));
		cloudTypeArray.PushBack('cloudsTerrain');
		
		cloudLocationArray.PushBack(Vector(151,-627,85)); // Mountains west of Fyresdal (low, bit further north)
		cloudRotationArray.PushBack(EulerAngles(360,315,0));
		cloudTypeArray.PushBack('cloudsTerrain');
		
		cloudLocationArray.PushBack(Vector(243,-616,85)); // Mountains west of Fyresdal (low, bit further north2)
		cloudRotationArray.PushBack(EulerAngles(360,325,0));
		cloudTypeArray.PushBack('cloudsTerrain');
		
		cloudLocationArray.PushBack(Vector(190,-930,130)); // Mountains southwest of Fyresdal (low)
		cloudRotationArray.PushBack(EulerAngles(360,280,0));
		cloudTypeArray.PushBack('cloudsTerrain');
		
		cloudLocationArray.PushBack(Vector(122,-879,160)); // Mountains west of Fyresdal (high)
		cloudRotationArray.PushBack(EulerAngles(360,280,0));
		cloudTypeArray.PushBack('cloudsUp');
		
		cloudLocationArray.PushBack(Vector(24,-773,241)); // Mountains west of Fyresdal (peak)
		cloudRotationArray.PushBack(EulerAngles(360,280,0));
		cloudTypeArray.PushBack('cloudsUp');
		
		cloudLocationArray.PushBack(Vector(1053,-526,177)); // Mountain peak east of Fyresdal (high)
		cloudRotationArray.PushBack(EulerAngles(360,280,0));
		cloudTypeArray.PushBack('cloudsUp');
		
		cloudLocationArray.PushBack(Vector(913,-676,181)); // Mountain peak east of Fyresdal (high, western peak)
		cloudRotationArray.PushBack(EulerAngles(360,280,0));
		cloudTypeArray.PushBack('cloudsUp');
		
		cloudLocationArray.PushBack(Vector(871,-585,151)); // Mountain peak east of Fyresdal (lower on western side)
		cloudRotationArray.PushBack(EulerAngles(280,175,0));
		cloudTypeArray.PushBack('cloudsTerrain');
		
		cloudLocationArray.PushBack(Vector(453,-124,98)); // Mountains east of Boxholm, western side
		cloudRotationArray.PushBack(EulerAngles(360,245,0));
		cloudTypeArray.PushBack('cloudsTerrain');
		
		cloudLocationArray.PushBack(Vector(497,-124,98)); // Mountains east of Boxholm, eastern side
		cloudRotationArray.PushBack(EulerAngles(360,245,0));
		cloudTypeArray.PushBack('cloudsTerrain');
		
		// Undvik
		
		//////////////////////// ice fog ////////////////////////////
		//cloudLocationArray.PushBack(Vector(-1361,-48,1.67)); // 1. Most eastern rock wall near eastern coast of Undvik, northern part
		cloudLocationArray.PushBack(Vector(-1361,-48,1.5));
		cloudRotationArray.PushBack(EulerAngles(0,0,0));
		cloudTypeArray.PushBack('iceFog');
		
		cloudLocationArray.PushBack(Vector(-1386,37,1.5)); // 2. Most eastern rock wall near eastern coast of Undvik, southern part
		cloudRotationArray.PushBack(EulerAngles(0,0,0));
		cloudTypeArray.PushBack('iceFog');
		
		cloudLocationArray.PushBack(Vector(-1528,-149,1.5)); // 3. Big rock wall west of 1., southern end
		cloudRotationArray.PushBack(EulerAngles(0,0,0));
		cloudTypeArray.PushBack('iceFog');
		
		cloudLocationArray.PushBack(Vector(-1574,-79,1.5)); // 4. Big rock wall west of 1., northern end
		cloudRotationArray.PushBack(EulerAngles(0,0,0));
		cloudTypeArray.PushBack('iceFog');
		
		cloudLocationArray.PushBack(Vector(-1760,-201,1.5)); // 5. Small rock north of northern harbor
		cloudRotationArray.PushBack(EulerAngles(0,0,0));
		cloudTypeArray.PushBack('iceFog');
		
		cloudLocationArray.PushBack(Vector(-1561,-291,1.5)); // 6. Small island with shipwreck east of northern harbor
		cloudRotationArray.PushBack(EulerAngles(0,0,0));
		cloudTypeArray.PushBack('iceFog');
		
		cloudLocationArray.PushBack(Vector(-1863,43,1.5)); // 7. Northern most bigger rock, northeast of Undvik tower
		cloudRotationArray.PushBack(EulerAngles(0,0,0));
		cloudTypeArray.PushBack('iceFog');
		
		cloudLocationArray.PushBack(Vector(-1665,-311,1.5)); // 8. Rock directly east of northern harbor
		cloudRotationArray.PushBack(EulerAngles(0,0,0));
		cloudTypeArray.PushBack('iceFog');
		
		cloudLocationArray.PushBack(Vector(-1653,-364,1.5)); // 9. Small rock southeast of northern harbor
		cloudRotationArray.PushBack(EulerAngles(0,0,0));
		cloudTypeArray.PushBack('iceFog');
		
		cloudLocationArray.PushBack(Vector(-1354,-414,1.5)); // 10. Eastern most bigger island with two shipwrecks -> southeastern end
		cloudRotationArray.PushBack(EulerAngles(0,0,0));
		cloudTypeArray.PushBack('iceFog');
		
		cloudLocationArray.PushBack(Vector(-1408,-286,1.5)); // 11. Eastern most bigger island with two shipwrecks -> northern end
		cloudRotationArray.PushBack(EulerAngles(0,0,0));
		cloudTypeArray.PushBack('iceFog');
		
		//////////////////////// ice fog ////////////////////////////
		
		cloudLocationArray.PushBack(Vector(-1950,-916,95)); // Mountain west low
		cloudRotationArray.PushBack(rot);
		cloudTypeArray.PushBack('cloudsTerrain');
		
		cloudLocationArray.PushBack(Vector(-1619,-907,158)); // Mountain east low
		cloudRotationArray.PushBack(EulerAngles(360,175,0));
		cloudTypeArray.PushBack('cloudsTerrain');
		
		cloudLocationArray.PushBack(Vector(-1508,-1058,135)); // Mountain eastern front facing Kaer Muire
		cloudRotationArray.PushBack(rot);
		cloudTypeArray.PushBack('cloudsUp');
		
		cloudLocationArray.PushBack(Vector(-1561,-980,192)); // Mountain eastern front facing Kaer Muire higher
		cloudRotationArray.PushBack(rot);
		cloudTypeArray.PushBack('cloudsUp');
		
		cloudLocationArray.PushBack(Vector(-1738,-1023,210)); // Mountain center high
		cloudRotationArray.PushBack(rot);
		cloudTypeArray.PushBack('cloudsUp');
		
		cloudLocationArray.PushBack(Vector(-1791,-943,145)); // Mountain center low
		cloudRotationArray.PushBack(EulerAngles(360,175,0));
		cloudTypeArray.PushBack('cloudsTerrain');
		
		cloudLocationArray.PushBack(Vector(-2149,-138,110)); // Tower northwest northern side
		cloudRotationArray.PushBack(EulerAngles(360,350,0));
		cloudTypeArray.PushBack('cloudsTerrain');
		
		// Spiekeroog
		cloudLocationArray.PushBack(Vector(-1698,1497,55)); // SOD mountain old house up hill
		cloudRotationArray.PushBack(EulerAngles(350,190,0));
		cloudTypeArray.PushBack('cloudsTerrain');
		
		cloudLocationArray.PushBack(Vector(-1793,1434,115)); // SOD mountain platform near top
		cloudRotationArray.PushBack(EulerAngles(340,290,0));
		cloudTypeArray.PushBack('cloudsUp');
		
		cloudLocationArray.PushBack(Vector(-1743,1360,85)); // SOD mountain front west of Svorlag
		cloudRotationArray.PushBack(EulerAngles(285,256,0));
		cloudTypeArray.PushBack('cloudsTerrain');
		
		cloudLocationArray.PushBack(Vector(-1744,1407,55)); // SOD mountain front west of Svorlag - lower part
		cloudRotationArray.PushBack(EulerAngles(330,238,0));
		cloudTypeArray.PushBack('cloudsTerrain');
		
		
		cloudLocationArray.PushBack(Vector(-1592,1499,15)); // SOD mountain foot west of small lake in northern part of Spiekeroog
		cloudRotationArray.PushBack(rot);
		cloudTypeArray.PushBack('cloudsTerrain');
		
		cloudLocationArray.PushBack(Vector(-1911,1171,90)); // Mountain peak south of SOD mountain west of Old Watchtower
		cloudRotationArray.PushBack(EulerAngles(350,234,0));
		cloudTypeArray.PushBack('cloudsTerrain');
		
		cloudLocationArray.PushBack(Vector(-1751,1176,73)); // Lower mountain south of Old Watchtower
		cloudRotationArray.PushBack(EulerAngles(10,234,0));
		cloudTypeArray.PushBack('cloudsTerrain');
		
		cloudLocationArray.PushBack(Vector(-3168,1778,79)); // Background mountains west of Spiekeroog
		cloudRotationArray.PushBack(EulerAngles(360,80,0));
		cloudTypeArray.PushBack('cloudsTerrain');
		
		cloudLocationArray.PushBack(Vector(-3228,1233,107)); // Background mountains west of Spiekeroog south top
		cloudRotationArray.PushBack(EulerAngles(360,80,0));
		cloudTypeArray.PushBack('cloudsUp');
		
		// Larvik
		cloudLocationArray.PushBack(Vector(2524,60,79)); // Mountain east of Lofoten cemetry northwestern side
		cloudRotationArray.PushBack(EulerAngles(360,320,0));
		cloudTypeArray.PushBack('cloudsTerrain');
		
		cloudLocationArray.PushBack(Vector(2533,30,90)); // Mountain east of Lofoten cemetry southeastern peak
		cloudRotationArray.PushBack(EulerAngles(360,320,0));
		cloudTypeArray.PushBack('cloudsTerrain');
		
		cloudLocationArray.PushBack(Vector(2535,1274,49)); // Small island with large shipwreck north of Larvik
		cloudRotationArray.PushBack(EulerAngles(360,16,0));
		cloudTypeArray.PushBack('cloudsTerrain');
		
		////////////////////////////////////////// Cloud definition end //////////////////////////////////////////////
		
		sizeCloudArray = cloudLocationArray.Size();
		for(idx = 0; idx < sizeCloudArray; idx+=1){
		
			cloudEnt = theGame.CreateEntity(template, cloudLocationArray[idx], cloudRotationArray[idx]);
			
			effectName=cloudTypeArray[idx];
			
			cloudEnt.PlayEffectSingle(effectName);
			cloudArray.PushBack(cloudEnt); 
		}
	}

	latent function SwarmLayerSpawn()
	{
		var temp : CEntityTemplate;
		var pos : Vector;
		var rot : EulerAngles;
		var snow_ent : CEntity;

		temp = (CEntityTemplate)LoadResourceAsync("dlc\dlc_acs\data\entities\other\acs_swarm_master_lair.w2ent", true);

		snow_ent = theGame.CreateEntity(temp, thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation());

		snow_ent.CreateAttachment( thePlayer, , Vector( 0, 0, 2 ), EulerAngles(0,0,0) );

		snow_ent.AddTag('acs_swarm_lair_ent');
	}
	
	latent function LookatSpawn()
	{
		var temp : CEntityTemplate;
		var pos : Vector;
		var rot : EulerAngles;
		var headtarget : CEntity;

		temp = (CEntityTemplate) LoadResourceAsync( "fx_dummy_entity" );
		pos = theCamera.GetCameraPosition() + VecFromHeading(theCamera.GetCameraHeading()) * 7;
		rot = VecToRotation(thePlayer.GetWorldPosition() - pos);
		headtarget = theGame.CreateEntity(temp, pos, rot);

		((CActor)headtarget).SetImmortalityMode( AIM_Invulnerable, AIC_Default ); 
		((CActor)headtarget).SetCanPlayHitAnim(false); 
		((CActor)headtarget).AddBuffImmunity_AllNegative('acs_lookat_entity_buff', true); 

		headtarget.AddTag('acs_lookat_entity');

		((CActor)thePlayer).DisableLookAt();
		((CActor)thePlayer).EnableDynamicLookAt(ACSGetCEntity('acs_lookat_entity'), 65535);
	}

	latent function SnowSpawn()
	{
		var temp : CEntityTemplate;
		var pos : Vector;
		var rot : EulerAngles;
		var snow_ent : CEntity;

		temp = (CEntityTemplate)LoadResourceAsync("dlc\dlc_acs\data\fx\acs_ice_breathe_old.w2ent", true);

		snow_ent = theGame.CreateEntity(temp, thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation());

		snow_ent.CreateAttachment( thePlayer, 'blood_point', Vector( 0, 0, 0 ), EulerAngles(0,0,90) );

		snow_ent.AddTag('acs_snow_entity');
	}

	latent function SpiralSkySpawn()
	{
		var spiral_ent          : CEntity;
		var spiral_temp         : CEntityTemplate;
		var spiral_rotation		: EulerAngles;
		var spiral_vector		: Vector;

		if (theGame.GetWorld().GetDepotPath() == "levels\novigrad\novigrad.w2w"
		|| theGame.GetWorld().GetDepotPath() == "levels\skellige\skellige.w2w"
		)
		{
			spiral_rotation = EulerAngles(0,45,0);

			spiral_vector = Vector(0,0,0,1);
		}
		else if (theGame.GetWorld().GetDepotPath() == "dlc\bob\data\levels\bob\bob.w2w")
		{
			spiral_rotation = EulerAngles(0,180,0);

			spiral_vector = Vector(0,0,0,1);
		}
		else if (theGame.GetWorld().GetDepotPath() == "levels\kaer_morhen\kaer_morhen.w2w"
		)
		{
			spiral_rotation = EulerAngles(0,45,0);

			spiral_vector = Vector(0,750,0,1);
		}
		else if ((theGame.GetWorld().GetDepotPath() == "levels\wmh_lv1\wmh_lv1.w2w"))
		{
			spiral_rotation = EulerAngles(0,180,0);

			spiral_vector = Vector(0,0,0,1);

			spiral_vector.Z += 750;
		}
		else
		{
			spiral_rotation = EulerAngles(0,180,0);

			spiral_vector = Vector(0,0,0,1);
		}

		spiral_temp = (CEntityTemplate)LoadResourceAsync("dlc\dlc_acs\data\fx\acs_ice_breathe_old.w2ent", true);
		
		spiral_ent = theGame.CreateEntity(spiral_temp, spiral_vector, spiral_rotation);

		if (ACS_Settings_Main_Bool('EHmodVisualSettings','EHmodSpiralSkyPlanetsEnabled', true))
		{
			spiral_ent.PlayEffectSingle('spiral_sky_original');

			spiral_ent.PlayEffectSingle('spiral_sky_red');

			if (theGame.GetWorld().GetDepotPath() != "levels\skellige\skellige.w2w"
			)
			{
				//spiral_ent.PlayEffectSingle('spiral_sky_original_second_moon');

				//spiral_ent.PlayEffectSingle('spiral_sky_red_second_moon');
			}
		}

		//spiral_ent.PlayEffectSingle('meteors');

		//spiral_ent.PlayEffect('spiral_sky_secondary');

		//spiral_ent.PlayEffect('spiral_sky');

		if (ACS_Settings_Main_Bool('EHmodVisualSettings','EHmodSpiralSkyBandsEnabled', true))
		{
			spiral_ent.PlayEffectSingle('spiral_sky_original_bands');

			spiral_ent.PlayEffectSingle('spiral_sky_red_bands');

			//spiral_ent.PlayEffect('spiral_sky_secondary_bands');
		}

		spiral_ent.AddTag('acs_spiral_entity');
	}

	latent function SpiralStarSpawn()
	{
		var spiral_star_ent         	: CEntity;
		var spiral_star_temp        	: CEntityTemplate;
		var spiral_star_rotation		: EulerAngles;

		if (theGame.GetWorld().GetDepotPath() == "levels\novigrad\novigrad.w2w"
		)
		{
			spiral_star_rotation = EulerAngles(0,60,0);
		}
		else if (theGame.GetWorld().GetDepotPath() == "levels\prolog_village_winter\prolog_village.w2w"
		|| theGame.GetWorld().GetDepotPath() == "levels\prolog_village\prolog_village.w2w"
		)
		{
			spiral_star_rotation = EulerAngles(0,165,0);
		}
		else if (theGame.GetWorld().GetDepotPath() == "dlc\bob\data\levels\bob\bob.w2w")
		{
			spiral_star_rotation = EulerAngles(0,195,0);
		}
		else if (theGame.GetWorld().GetDepotPath() == "levels\kaer_morhen\kaer_morhen.w2w"
		)
		{
			spiral_star_rotation = EulerAngles(0,240,0);
		}
		else
		{
			spiral_star_rotation = EulerAngles(0,195,0);
		}

		spiral_star_temp = (CEntityTemplate)LoadResourceAsync("dlc\dlc_acs\data\fx\acs_ice_breathe_old.w2ent", true);

		spiral_star_ent = theGame.CreateEntity(spiral_star_temp, Vector(0,0,50), spiral_star_rotation);

		if (ACS_IsNight_Adjustable())
		{
			if (FactsQuerySum("ACS_Darkness_Upon_Us") > 0)
			{
				if (ACS_Settings_Main_Bool('EHmodVisualSettings','EHmodSpiralSkyStarsEnabled', true))
				{
					spiral_star_ent.PlayEffectSingle('stars');
				}
			}
		}

		spiral_star_ent.AddTag('acs_spiral_star_entity');
	}

	latent function SpiralRainbowSpawn()
	{
		var spiral_rainbow_ent         	: CEntity;
		var spiral_rainbow_temp        	: CEntityTemplate;
		var spiral_rainbow_rotation		: EulerAngles;

		if (theGame.GetWorld().GetDepotPath() == "levels\novigrad\novigrad.w2w"
		)
		{
			spiral_rainbow_rotation = EulerAngles(0,0,0);
		}
		else if (theGame.GetWorld().GetDepotPath() == "levels\prolog_village_winter\prolog_village.w2w"
		|| theGame.GetWorld().GetDepotPath() == "levels\prolog_village\prolog_village.w2w"
		)
		{
			spiral_rainbow_rotation = EulerAngles(0,0,0);
		}
		else if (theGame.GetWorld().GetDepotPath() == "dlc\bob\data\levels\bob\bob.w2w")
		{
			spiral_rainbow_rotation = EulerAngles(0,0,0);
		}
		else if (theGame.GetWorld().GetDepotPath() == "levels\kaer_morhen\kaer_morhen.w2w"
		)
		{
			spiral_rainbow_rotation = EulerAngles(0,0,0);
		}
		else
		{
			spiral_rainbow_rotation = EulerAngles(0,0,0);
		}

		spiral_rainbow_temp = (CEntityTemplate)LoadResourceAsync("dlc\dlc_acs\data\fx\acs_ice_breathe_old.w2ent", true);

		spiral_rainbow_ent = theGame.CreateEntity(spiral_rainbow_temp, Vector(0,0,0), spiral_rainbow_rotation);

		//spiral_rainbow_ent.PlayEffectSingle('rainbow');

		spiral_rainbow_ent.AddTag('acs_spiral_rainbow_entity');
	}

	latent function EverstormSpawn()
	{
		var ent           										: CEntity;
		var rot                        						 	: EulerAngles;
		var pos													: Vector;
		var locationArray 										: array<Vector>;

		if (!ACS_Settings_Main_Bool('EHmodMiscSettings','EHmodEverstormEnabled', true))
		{
			return;
		}

		GetACSEverstorm().Destroy();

		rot = EulerAngles(0,0,0);

		locationArray.Clear();

		locationArray.PushBack( ACSPlayerFixZAxis(Vector(0,0,0,1) + Vector(RandRangeF(4000,2000), RandRangeF(4000, 2000), RandRangeF(2000, 1000), 1)));
		locationArray.PushBack( ACSPlayerFixZAxis(Vector(0,0,0,1) + Vector(RandRangeF(2000,-4000), RandRangeF(2000, -4000), RandRangeF(2000, 1000), 1)));
		locationArray.PushBack( ACSPlayerFixZAxis(Vector(0,0,0,1) + Vector(RandRangeF(4000,2000), RandRangeF(2000, -4000), RandRangeF(2000, 1000), 1)));
		locationArray.PushBack( ACSPlayerFixZAxis(Vector(0,0,0,1) + Vector(RandRangeF(2000,-4000), RandRangeF(4000, 2000), RandRangeF(2000, 1000), 1)));

		pos = locationArray[RandRange(locationArray.Size())];

		ent = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

		"dlc\dlc_acs\data\entities\other\everstorm.w2ent"

		, true ), pos, rot );

		ent.AddTag('ACS_Everstorm');
	}

	latent function SkyWhaleSpawn()
	{
		var ent           										: CEntity;
		var rot                        						 	: EulerAngles;
		var pos													: Vector;
		var locationArray 										: array<Vector>;

		if (ACS_Settings_Main_Bool('EHmodVisualSettings','EHmodSpiralSkyFishEnabled', true))
		{
			ent = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

			"dlc\dlc_acs\data\entities\other\flying_whale\acs_flying_whale_ent.w2ent"

			, true ), Vector(0,0,0,1), rot );

			ent.AddTag('ACS_Sky_Whale');
		}
	}

	latent function ConjunctionSpawn()
	{
		var spiral_ent          				: CEntity;
		var spiral_temp        					: CEntityTemplate;
		var spiral_rotation						: EulerAngles;
		var spiral_vector						: Vector;

		if (ACS_Settings_Main_Bool('EHmodVisualSettings','EHmodSpiralSkyPlanetsEnabled', true))
		{
			spiral_rotation = EulerAngles(0,0,0);

			spiral_vector = Vector(0,0,750,1);

			spiral_temp = (CEntityTemplate)LoadResourceAsync(
				
			//"dlc\dlc_acs\data\fx\acs_ice_breathe_old.w2ent"

			"dlc\dlc_acs\data\fx\conjunction\q502_sky_conjunction.w2ent"
			
			, true);
			
			spiral_ent = theGame.CreateEntity(spiral_temp, spiral_vector, spiral_rotation);

			//spiral_ent.PlayEffectSingle('conjunction_original');
		}

		spiral_ent.PlayEffectSingle('conjunction');

		spiral_ent.AddTag('acs_wmh_conjunction_ent');
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
function ACS_IDD_INIT()
{
	var vACS_IDD : cACS_IDD;
	vACS_IDD = new cACS_IDD in theGame;

	vACS_IDD.IDD_Engage();
}

statemachine class cACS_IDD
{
    function IDD_Engage()
	{
		this.PushState('IDD_Engage');
	}
}

state IDD_Engage in cACS_IDD
{
	var id : string;
	var mesh : CMesh;
	var res : CResource;
	var i, j : int;
	var meshName : string;
	var data: C2dArray;				
	var world: CGameWorld;
	var meshes: array<CMesh>;
	var tempFloat : float;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);

		IDD_Entry();
	}
	
	entry function IDD_Entry()
	{
		IDD_Latent();
	}
	
	latent function IDD_Latent()
	{
		world = (CGameWorld)theGame.GetWorld();

		data = LoadCSV("dlc\dlc_acs\data\csv\meshes.csv");

		for(i = 0; i < data.GetNumRows(); i+=1)
		{							
			meshName = data.GetValueAt(0,i);			
			
			if (
				StrContains(meshName, "dlc1") || 
				StrContains(meshName, "dlc2") ||
				StrContains(meshName, "dlc3") ||				
				StrContains(meshName, "dlc4") ||
				StrContains(meshName, "dlc5") ||
				StrContains(meshName, "dlc6") ||
				StrContains(meshName, "dlc7") ||
				StrContains(meshName, "dlc8") ||
				StrContains(meshName, "ep1") ||
				StrContains(meshName, "dlc9") ||
				StrContains(meshName, "dlc10") ||
				StrContains(meshName, "dlc11") ||
				StrContains(meshName, "dlc12") ||
				StrContains(meshName, "dlc13") ||
				StrContains(meshName, "dlc14") ||
				StrContains(meshName, "dlc15") ||
				StrContains(meshName, "dlc16") ||
				StrContains(meshName, "items\usable") ||
				StrContains(meshName, "items\weapons") ||
				StrContains(meshName, "items\work") ||
				StrContains(meshName, "items\npc_items") ||
				StrContains(meshName, "items\horse_items") ||				
				StrContains(meshName, "merged_content") || 
				StrContains(meshName, "engine") ||
				StrContains(meshName, "cutscenes") ||
				StrContains(meshName, "living_world") || 
				StrContains(meshName, "weather_volume") || 
				StrContains(meshName, "block") ||
				StrContains(meshName, "plane") || 
				StrContains(meshName, "shadow") || 
				StrContains(meshName, "characters") ||
                StrContains(meshName, "geralt") ||	
                StrContains(meshName, "head") ||
				StrContains(meshName, "models") ||
                StrContains(meshName, "eyes") ||
                StrContains(meshName, "model") ||					
				StrContains(meshName, "volume") || 
				StrContains(meshName, "environment\definitions") || 
				StrContains(meshName, "environment\debug") || 
				StrContains(meshName, "environment\water") || 
				StrContains(meshName, "environment\shaders") || 				
				StrContains(meshName, "proxy"))
			{
				// Some objects cause randoms crashes, have not narrowed down a particular reason, only certain categories.
				// Proxys cannot be lined up with some non-proxy meshes which forces us to not scale them at all :(
				continue;
			}
			else
			{			
				res = LoadResource(meshName, true);

				if (res)
				{
					mesh = (CMesh)res;

					if (mesh)
					{
						meshes.PushBack(mesh);		
					}
				}
			}
		}
		
		UpdateIDD();
	}

	function UpdateIDD() 
	{		
		//world.umbraScene.distanceMultiplier = 0;	
	
		for(i = 0; i < meshes.Size(); i+=1)
		{
			mesh = meshes[i];

			UpdateDrawDistance(mesh);

			UpdateLod(mesh);
		}
    }
	
	function UpdateDrawDistance(mesh : CMesh)
	{
		meshName = mesh.GetPath();
		
		mesh.autoHideDistance *= 2;
		mesh.isTwoSided = true;	
	}
	
	function UpdateLod(mesh : CMesh)
	{
		meshName = mesh.GetPath();

		for(j = 0; j < mesh.cookedData.renderLODs.Size(); j+=1)
		{
			if (StrContains(meshName, "characters"))
			{
				continue;
			}		
			else
			{		
				mesh.cookedData.renderLODs[j] *= 2;
			}
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}
*/

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
function ACS_FriendlyWolves()
{
	var actor							: CActor; 
	var actors		    				: array<CActor>;
	var i								: int;
	var npc								: CNewNPC;
	var targetDistance					: float;
	
	actors.Clear();

	actors = thePlayer.GetNPCsAndPlayersInRange( 50, 20, , FLAG_OnlyAliveActors + FLAG_ExcludePlayer);

	if( actors.Size() <= 0 )
	{
		return;
	}

	if( actors.Size() > 0 )
	{
		for( i = 0; i < actors.Size(); i += 1 )
		{
			npc = (CNewNPC)actors[i];

			actor = actors[i];

			targetDistance = VecDistanceSquared2D( ((CActor)actors[i]).GetWorldPosition(), GetWitcherPlayer().GetWorldPosition() );

			if (actor.HasAbility('mon_wolf_base')
			&& !actor.HasAbility('mon_wolf_summon_were')
			&& !actor.HasAbility('mon_evil_dog')
			&& !actor.HasTag('ACS_Shadow_Wolf')
			&& !actor.HasTag('ACS_MonsterHunt_Woodland_Spirit_Wolf')
			&& !actor.UsesEssence()
			&& !npc.IsInInterior()
			&& !thePlayer.IsInInterior()
			&& ((CNewNPC)npc).GetNPCType() != ENGT_Quest
			)
			{
				if (targetDistance < 2 * 2)
				{
					if (!actor.HasTag('ACS_Angry_Wolf') && actor.GetAttitude( thePlayer ) != AIA_Hostile)
					{
						((CNewNPC)actor).ResetAttitude(thePlayer);

						((CNewNPC)actor).ResetBaseAttitudeGroup();

						((CNewNPC)actor).SetAttitude(thePlayer, AIA_Hostile);

						actor.AddTag('ACS_Angry_Wolf');
					}
				}
				else if (targetDistance >= 2 * 2)
				{
					if (thePlayer.GetCurrentHealth() > thePlayer.GetMaxHealth() * 0.25)
					{
						if (!actor.HasTag('ACS_Friendly_Wolf') && actor.GetAttitude( thePlayer ) == AIA_Hostile)
						{
							((CNewNPC)actor).SetAttitude(thePlayer, AIA_Neutral);
							
							//((CNewNPC)actor).SetTemporaryAttitudeGroup( 'friendly_to_player', AGP_Default );	

							((CNewNPC)actor).ForgetActor(thePlayer);

							actor.AddTag('ACS_Friendly_Wolf');
						}
					}
					else if (thePlayer.GetCurrentHealth() <= thePlayer.GetMaxHealth() * 0.25)
					{
						if (!actor.HasTag('ACS_Angry_Wolf') && actor.GetAttitude( thePlayer ) != AIA_Hostile)
						{
							((CNewNPC)actor).ResetAttitude(thePlayer);

							((CNewNPC)actor).ResetBaseAttitudeGroup();

							((CNewNPC)actor).SetAttitude(thePlayer, AIA_Hostile);

							actor.AddTag('ACS_Angry_Wolf');
						}
					}		
				}
			}
		}
	}
}
*/

function ACS_Sneaking()
{
	if (thePlayer.HasTag('ACS_Is_Sneaking')
	)
	{
		ACS_Sneaking_For_Hostile();
	}
	else
	{
		ACS_Sneaking_Revert();
	}
}

function ACS_Sneaking_For_Hostile()
{
	var actor, actortarget								: CActor; 
	var actors, targets		    						: array<CActor>;
	var i, j											: int;
	var npc												: CNewNPC;
	var targetDistance									: float;
	var targetPlayer									: CPlayer;
	var actorSightCone, actorSightRange					: float;
	
	actors.Clear();

	actors = thePlayer.GetNPCsAndPlayersInRange( 100, 20, , FLAG_OnlyAliveActors + FLAG_ExcludePlayer + FLAG_Attitude_Hostile);

	if( actors.Size() <= 0 )
	{
		return;
	}

	if( actors.Size() > 0 )
	{
		for( i = 0; i < actors.Size(); i += 1 )
		{
			npc = (CNewNPC)actors[i];

			actor = actors[i];

			targetDistance = VecDistanceSquared2D( ((CActor)actors[i]).GetWorldPosition(), GetWitcherPlayer().GetWorldPosition() );

			if (!actor.HasAbility('mon_wolf_base')
			&& ((CNewNPC)actor).GetNPCType() != ENGT_Quest
			&& !actor.IsAnimal()
			)
			{
				if (targetDistance < 15 * 15)
				{
					if( GetRainStrength() > 0 ) 
					{
						if (npc.IsMonster())
						{
							actorSightCone = 225;

							actorSightRange = 15;
						}
						else
						{
							actorSightCone = 135;

							actorSightRange = 12;
						}
					}
					else
					{
						if (npc.IsMonster())
						{
							actorSightCone = 270;

							actorSightRange = 17;
						}
						else
						{
							actorSightCone = 180;

							actorSightRange = 15;
						}
					}

					targets.Clear();

					targets = actor.GetNPCsAndPlayersInCone(15, VecHeading(actor.GetHeadingVector()), actorSightCone, 50, , FLAG_OnlyAliveActors );

					if( targets.Size() > 0 )
					{
						for( j = 0; j < targets.Size(); j += 1 )
						{
							targetPlayer = (CPlayer)targets[j];

							if (targetPlayer)
							{
								if (!actor.HasTag('ACS_Sneaking_Hostile') 
								&& actor.GetAttitude( thePlayer ) != AIA_Hostile
								&& ((CNewNPC)actor).GetNPCType() != ENGT_Quest
								)
								{
									((CNewNPC)actor).ResetAttitude(thePlayer);

									((CNewNPC)actor).ResetBaseAttitudeGroup();

									((CNewNPC)actor).SetAttitude(thePlayer, AIA_Hostile);

									actor.AddTag('ACS_Sneaking_Hostile');
								}
							}
						}
					}
				}
				else if (targetDistance >= 15 * 15)
				{
					if (!actor.HasTag('ACS_Sneaking_Neutral') && actor.GetAttitude( thePlayer ) == AIA_Hostile)
					{
						((CNewNPC)actor).SetAttitude(thePlayer, AIA_Neutral);
						
						//((CNewNPC)actor).SetTemporaryAttitudeGroup( 'friendly_to_player', AGP_Default );	
						
						actor.AddTag('ACS_Sneaking_Neutral');
					}
				}
			}
		}
	}
}

function ACS_Sneaking_Revert()
{
	var actor, actortarget								: CActor; 
	var actors		    								: array<CActor>;
	var i												: int;
	var npc												: CNewNPC;

	actors.Clear();

	theGame.GetActorsByTag( 'ACS_Sneaking_Neutral', actors );	

	if( actors.Size() <= 0 )
	{
		return;
	}

	if( actors.Size() > 0 )
	{
		for( i = 0; i < actors.Size(); i += 1 )
		{
			npc = (CNewNPC)actors[i];

			actor = actors[i];

			if (actor.HasTag('ACS_Sneaking_Neutral'))
			{
				((CNewNPC)actor).SetAttitude(thePlayer, AIA_Hostile);

				actor.RemoveTag('ACS_Sneaking_Hostile');

				actor.RemoveTag('ACS_Sneaking_Neutral');
			}
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_Fish_Check() : bool
{
	if (
	thePlayer.IsSwimming()
	&& thePlayer.IsDiving()
	)
	{
		return true;
	}

	return false;
}

statemachine class cACS_Fish_Generate
{
    function Fish_Generate_Engage()
	{
		this.PushState('Fish_Generate_Engage');
	}
}

state Fish_Generate_Engage in cACS_Fish_Generate
{
	var temp																	: CEntityTemplate;
	var ent																		: CEntity;
	var i, count_1, j, count_2													: int;
	var initPos, spawnPos, spawnPos2, posAdjusted, posAdjusted2, entPos			: Vector;
	var randAngle, randRange, distance											: float;
	var meshcomp																: CComponent;
	var animcomp 																: CAnimatedComponent;
	var h 																		: float;
	var bone_vec, pos, attach_vec												: Vector;
	var bone_rot, rot, attach_rot, playerRot, adjustedRot						: EulerAngles;
	var world																	: CWorld;
	
	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Fish_Generate();
	}

	entry function Fish_Generate()
	{
		temp = (CEntityTemplate)LoadResourceAsync( 

		"quests\sidequests\skellige\quest_files\sq209_weregild\entities\fishes\sq209_fish_v02.w2ent"

		//"quests\sidequests\skellige\quest_files\sq209_weregild\characters\sq209_flying_whale.w2ent"
			
		, true );

		initPos = (theCamera.GetCameraPosition() + theCamera.GetCameraDirection() * RandRangeF(30,20));

		playerRot = EulerAngles(0,0,0);

		playerRot.Yaw += RandRange(360,0);
		
		count_1 = RandRange(10,5);

		distance = RandRangeF(10, 5);

		world = theGame.GetWorld();
			
		for( i = 0; i < count_1; i += 1 )
		{
			randRange = distance + distance * RandF();
			randAngle = 2 * Pi() * RandF();
			
			spawnPos.X = randRange * CosF( randAngle ) + initPos.X;
			spawnPos.Y = randRange * SinF( randAngle ) + initPos.Y;
			spawnPos.Z = initPos.Z;

			posAdjusted = (spawnPos);

			count_2 = RandRange(30,15);

			for( j = 0; j < count_2; j += 1 )
			{
				randRange = distance + distance * RandF();
				randAngle = 2 * Pi() * RandF();
				
				spawnPos2.X = randRange * CosF( randAngle ) + posAdjusted.X;
				spawnPos2.Y = randRange * SinF( randAngle ) + posAdjusted.Y;
				spawnPos2.Z = posAdjusted.Z;

				posAdjusted2 = (spawnPos2);

				if ( world.GetWaterDepth( posAdjusted2 , true ) > 0 )
				{
					ent = theGame.CreateEntity( temp, posAdjusted2, adjustedRot );
				}

				ent.DestroyAfter(480);

				ent.AddTag('ACS_Fish_Ent');
			}
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function GetACSWisp() : W3ACSWisp
{
	var entity 			 : W3ACSWisp;
	
	entity = (W3ACSWisp)theGame.GetEntityByTag( 'ACS_Wisp' );
	return entity;
}

function ACS_Wisp_Gatling_Gun()
{
	var vACS_Wisp_Gatling_Gun : cACS_Wisp_Gatling_Gun;
	vACS_Wisp_Gatling_Gun = new cACS_Wisp_Gatling_Gun in theGame;
	
	if (ACS_wisp_projectile_spawn())
	{
		ACS_refresh_wisp_projectile_cooldown();

		vACS_Wisp_Gatling_Gun.Wisp_Gatling_Gun_Engage();
	}
}

statemachine class cACS_Wisp_Gatling_Gun
{
    function Wisp_Gatling_Gun_Engage()
	{
		this.PushState('Wisp_Gatling_Gun_Engage');
	}
}

state Wisp_Gatling_Gun_Engage in cACS_Wisp_Gatling_Gun
{
	var actortarget													: CActor;
	var actors    													: array<CActor>;
	var i         													: int;
	var rock_pillar_temp											: CEntityTemplate;
	var proj_1	 													: W3ACSIceSpearProjectile;
	var proj_2														: W3ACSBoulderProjectile;
	var initpos, targetPositionNPC, targetPositionRandom			: Vector;
	var initrot, targetRotationNPC, adjustedRot									: EulerAngles;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Wisp_Gatling_Gun();
	}
	
	entry function Wisp_Gatling_Gun()
	{
		if (!thePlayer.IsInCombat() && !thePlayer.IsThreatened())
		{
			return;
		}

		if (FactsQuerySum("ACS_Wisp_Attack_Enable") <= 0)
		{
			return;
		}

		actors.Clear();

		actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 20, 1, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

		for( i = 0; i < actors.Size(); i += 1 )
		{
			if (thePlayer.IsHardLockEnabled())
			{
				actortarget = (CActor)(thePlayer.GetDisplayTarget());
			}
			else
			{
				actortarget = (CActor)actors[i];
			}

			if (!actortarget)
			{
				return;
			}
				
			initpos = GetACSWisp().GetWorldPosition();		

			initrot = GetACSWisp().GetWorldRotation();
			initrot.Pitch += RandRangeF(360, 0);
			initrot.Roll += RandRangeF(360, 0);
			initrot.Yaw += RandRangeF(360, 0);

			if ( actortarget.GetBoneIndex('head') != -1 )
			{
				targetPositionNPC = actortarget.GetBoneWorldPosition('head');
				targetPositionNPC.Z += RandRangeF(0,-0.5);
				targetPositionNPC.X += RandRangeF(0.125,-0.125);
			}
			else
			{
				if ( actortarget.GetBoneIndex('k_head_g') != -1 )
				{
					targetPositionNPC = actortarget.GetBoneWorldPosition('k_head_g');
					targetPositionNPC.Z += RandRangeF(0,-0.5);
					targetPositionNPC.X += RandRangeF(0.125,-0.125);
				}
				else
				{
					targetPositionNPC = actortarget.GetWorldPosition();
					targetPositionNPC.Z += RandRangeF(0,-0.5);
					targetPositionNPC.X += RandRangeF(0.125,-0.125);
				}
			}

			targetPositionRandom = thePlayer.GetWorldPosition() + ( thePlayer.GetWorldForward() * RandRangeF(10, 5) ) + (thePlayer.GetWorldRight() * RandRangeF(10, -10));
			targetPositionRandom.Z += RandRangeF(10, 5);
			
			if ( thePlayer.GetEquippedSign() == ST_Aard )
			{
				if (thePlayer.GetLevel() < 5)
				{
					return;
				}

				GetACSWisp().PlayEffectSingle('wisp_fx_combat_attack');
				GetACSWisp().StopEffect('wisp_fx_combat_attack');

				GetACSWisp().SoundEvent("magic_sorceress_vfx_fireball_fire_fx_loop_start");
				GetACSWisp().SoundEvent("magic_sorceress_vfx_fireball_fire_fx_loop_stop");

				proj_1 = (W3ACSIceSpearProjectile)theGame.CreateEntity( 
				(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\wh_icespear.w2ent", true ), initpos );

				proj_1.AddTag('ACS_Shot_From_Wisp');

				if (GetACSWatcher().Wisp_Hit_Counter() >= 5)
				{
					proj_1.AddTag('ACS_Wisp_Projectile_Add_Freeze');
					
					GetACSWatcher().Reset_Wisp_Hit_Counter();
				}
								
				proj_1.Init(GetWitcherPlayer());
				proj_1.PlayEffectSingle('fire_fx');
				proj_1.ShootProjectileAtPosition( 0, 10, targetPositionNPC, 500 );
				proj_1.DestroyAfter(5);
			}
			else if ( thePlayer.GetEquippedSign() == ST_Yrden )
			{
				if (thePlayer.GetLevel() < 15)
				{
					return;
				}

				GetACSWisp().PlayEffectSingle('wisp_fx_combat_attack');
				GetACSWisp().StopEffect('wisp_fx_combat_attack');

				GetACSWisp().SoundEvent("magic_sorceress_vfx_fireball_fire_fx_loop_start");
				GetACSWisp().SoundEvent("magic_sorceress_vfx_fireball_fire_fx_loop_stop");

				proj_1 = (W3ACSIceSpearProjectile)theGame.CreateEntity( 
				(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\soceress_arcane_missile.w2ent", true ), initpos );

				proj_1.AddTag('ACS_Shot_From_Wisp');

				if (GetACSWatcher().Wisp_Hit_Counter() >= 5)
				{
					proj_1.AddTag('ACS_Wisp_Projectile_Add_Slow');
					
					GetACSWatcher().Reset_Wisp_Hit_Counter();
				}
								
				proj_1.Init(GetWitcherPlayer());
				proj_1.PlayEffectSingle('fire_fx');
				proj_1.ShootProjectileAtPosition( 0, 10, targetPositionNPC, 500 );
				proj_1.DestroyAfter(5);
			}
			else if ( thePlayer.GetEquippedSign() == ST_Igni )
			{
				if (thePlayer.GetLevel() < 10)
				{
					return;
				}

				GetACSWisp().PlayEffectSingle('wisp_fx_combat_attack');
				GetACSWisp().StopEffect('wisp_fx_combat_attack');

				GetACSWisp().SoundEvent("magic_sorceress_vfx_fireball_fire_fx_loop_start");
				GetACSWisp().SoundEvent("magic_sorceress_vfx_fireball_fire_fx_loop_stop");

				proj_1 = (W3ACSIceSpearProjectile)theGame.CreateEntity( 
				(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\sorceress_fireball.w2ent", true ), initpos );

				proj_1.AddTag('ACS_Shot_From_Wisp');

				if (GetACSWatcher().Wisp_Hit_Counter() >= 5)
				{
					proj_1.AddTag('ACS_Wisp_Projectile_Add_Fire');

					GetACSWatcher().Reset_Wisp_Hit_Counter();
				}
								
				proj_1.Init(GetWitcherPlayer());
				proj_1.PlayEffectSingle('fire_fx');
				proj_1.ShootProjectileAtPosition( 0, 10, targetPositionNPC, 500 );
				proj_1.DestroyAfter(5);
			}
			else if ( thePlayer.GetEquippedSign() == ST_Quen )
			{
				if (thePlayer.GetLevel() < 25)
				{
					return;
				}

				GetACSWisp().PlayEffectSingle('wisp_fx_combat_attack');
				GetACSWisp().StopEffect('wisp_fx_combat_attack');

				GetACSWisp().SoundEvent("magic_sorceress_vfx_fireball_fire_fx_loop_start");
				GetACSWisp().SoundEvent("magic_sorceress_vfx_fireball_fire_fx_loop_stop");

				proj_2 = (W3ACSBoulderProjectile)theGame.CreateEntity( 
				(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\lynx_rock_witch_rock.w2ent", true ), initpos, initrot );

				proj_2.AddTag('ACS_Shot_From_Wisp');
				proj_2.AddTag('ACS_Wisp_Rock_Projectile');
								
				proj_2.Init(GetWitcherPlayer());
				proj_2.PlayEffectSingle('glow');
				proj_2.ShootProjectileAtPosition( 0, 10, targetPositionRandom, 500 );
				proj_2.DestroyAfter(5);
			}
			else if ( thePlayer.GetEquippedSign() == ST_Axii )
			{
				if (thePlayer.GetLevel() < 20)
				{
					return;
				}

				GetACSWisp().PlayEffectSingle('wisp_fx_combat_attack');
				GetACSWisp().StopEffect('wisp_fx_combat_attack');

				GetACSWisp().SoundEvent("magic_sorceress_vfx_fireball_fire_fx_loop_start");
				GetACSWisp().SoundEvent("magic_sorceress_vfx_fireball_fire_fx_loop_stop");

				proj_2 = (W3ACSBoulderProjectile)theGame.CreateEntity( 
				(CEntityTemplate)LoadResourceAsync( "dlc\dlc_acs\data\entities\projectiles\djinn_wood_proj.w2ent", true ), initpos );

				proj_2.AddTag('ACS_Shot_From_Wisp');
				proj_2.AddTag('ACS_Wisp_Wood_Projectile');
								
				proj_2.Init(GetWitcherPlayer());
				proj_2.PlayEffectSingle('glow');
				proj_2.ShootProjectileAtPosition( 0, 10, targetPositionRandom, 500 );
				proj_2.DestroyAfter(5);
			}
		}
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_Ghoul_Explode( npc : CActor, pos : Vector )
{
	var ent       														: CEntity;
	var rot, attach_rot, adjustedRot                        						 	: EulerAngles;

	rot = EulerAngles(0,0,0);

	rot.Yaw += RandRangeF(360,0);
	rot.Pitch += RandRangeF(360,1);
	rot.Roll += RandRangeF(360,1);

	ent = theGame.CreateEntity( (CEntityTemplate)LoadResource( 

	"dlc\dlc_acs\data\fx\blood_fx.w2ent"

	, true ), pos, rot );

	ent.DestroyAfter(2);

	//ent.CreateAttachment( npc, , Vector( 0, 0 , 2 ), EulerAngles(0,0,0) );

	ent.PlayEffectSingle('blood_explode_red');

	ent.PlayEffectSingle('hit_red');
	ent.PlayEffectSingle('hit_refraction_red');
	ent.PlayEffectSingle('crawl_blood_red');
}

function ACS_Alghoul_Explode( npc : CActor, pos : Vector )
{
	var ent       														: CEntity;
	var rot, attach_rot, adjustedRot                        						 	: EulerAngles;

	rot = EulerAngles(0,0,0);

	rot.Yaw += RandRange(360,0);

	ent = theGame.CreateEntity( (CEntityTemplate)LoadResource( 

	"fx\monsters\rotfiend\rotfiend_explode.w2ent"

	, true ), pos, rot );

	ent.DestroyAfter(2);

	//ent.CreateAttachment( npc, , Vector( 0, 0 , 2 ), EulerAngles(0,0,0) );

	ent.PlayEffectSingle('blood_explode');
}

function ACS_Wildhunt_Minion_Explode( npc : CActor, pos : Vector )
{
	var entity : CEntity;
	var iceSpike : W3ACSCaranthirIceSpike;
	var spawnPos : Vector;
	var rotation, adjustedRot : EulerAngles;

	pos.Z += 1.1;

	rotation = EulerAngles(0,0,0);

	rotation.Yaw = RandRangeF( 180.0, -180.0 );

	entity = (W3ACSCaranthirIceSpike)theGame.CreateEntity( 
	(CEntityTemplate)LoadResource( "dlc\dlc_acs\data\entities\enemy_magic\caranthir_ice_spike.w2ent", true ), pos, rotation );

	iceSpike = (W3ACSCaranthirIceSpike)entity;

	iceSpike.AddTag('ACS_Spawned_From_Minion_Death');

	if( iceSpike )
	{
		iceSpike.Appear();
	}
}

function ACS_Normal_Death_Explode( npc : CActor, pos : Vector )
{
	var ent       														: CACSGoreSpawnerEntity;
	var torsoBoneIndex													: int;
	var bone_vec														: Vector;

	if (!ACS_Settings_Main_Bool('EHmodVisualSettings','EHmodGoreSpawnerEnabled', true))
	{
		return;
	}

	if (npc.HasAbility('animal_rat_base'))
	{
		return;
	}

	torsoBoneIndex = npc.GetTorsoBoneIndex();

	if ( torsoBoneIndex != -1 )
	{
		bone_vec = MatrixGetTranslation( npc.GetBoneWorldMatrixByIndex( torsoBoneIndex ) );

		ent = (CACSGoreSpawnerEntity)theGame.CreateEntity( (CEntityTemplate)LoadResource( "dlc\dlc_acs\data\entities\other\gore_spawner.w2ent", true ), bone_vec, npc.GetWorldRotation() );
	}
	else
	{
		bone_vec = pos;

		ent = (CACSGoreSpawnerEntity)theGame.CreateEntity( (CEntityTemplate)LoadResource( "dlc\dlc_acs\data\entities\other\gore_spawner.w2ent", true ), bone_vec, npc.GetWorldRotation() );

		ent.AddTag('ACS_Gore_Spawn_No_Torso_Bone_Found');
	}

	ent.DestroyAfter(10);
}

function ACS_Human_Death_Explode( npc : CActor, pos : Vector, delay : float )
{
	var ent       														: CACSGoreSpawnerEntity;
	var bone_vec														: Vector;
	var bone_rot, adjustedRot											: EulerAngles;
	var torsoBoneIndex													: int;

	if (!ACS_Settings_Main_Bool('EHmodVisualSettings','EHmodGoreSpawnerEnabled', true))
	{
		return;
	}

	torsoBoneIndex = npc.GetTorsoBoneIndex();

	if ( torsoBoneIndex != -1 )
	{
		bone_vec = MatrixGetTranslation( npc.GetBoneWorldMatrixByIndex( torsoBoneIndex ) );
	}
	else
	{
		bone_vec = pos;
	}

	ent = (CACSGoreSpawnerEntity)theGame.CreateEntity( (CEntityTemplate)LoadResource( "dlc\dlc_acs\data\entities\other\gore_spawner.w2ent", true ), bone_vec, npc.GetWorldRotation() );

	//ent.CreateAttachment( npc, 'blood_point', Vector(0.125,0.5,0), EulerAngles(0,0,0) );

	if (delay == 1)
	{
		ent.AddTag('ACS_Gore_Spawn_Delay_1');
	}
	else if (delay == 0.5)
	{
		ent.AddTag('ACS_Gore_Spawn_Delay_2');
	}
	
	ent.DestroyAfter(10);
}

statemachine class CACSGoreSpawnerEntity extends CEntity
{
	var pos : Vector;
	var rot, adjustedRot : EulerAngles;

	event OnSpawned( spawnData : SEntitySpawnData )
	{
		super.OnSpawned(spawnData);
		
		AddTimer('GoreSpawnCheck', 0.01, false);
	}

	timer function GoreSpawnCheck ( dt : float, id : int)
	{
		pos = this.GetWorldPosition();

		rot = this.GetWorldRotation();

		if (this.HasTag('ACS_Gore_Spawn_Delay_1'))
		{
			this.PushState('FinisherSpawnGore_1');
		}
		else if (this.HasTag('ACS_Gore_Spawn_Delay_2'))
		{
			this.PushState('FinisherSpawnGore_2');
		}
		else if (this.HasTag('ACS_Gore_Spawn_No_Torso_Bone_Found'))
		{
			this.PushState('SpawnGore_No_Torso_Bone');
		}
		else
		{
			this.PushState('SpawnGore');
		}
	}
}

state FinisherSpawnGore_1 in CACSGoreSpawnerEntity
{
	event OnEnterState(prevStateName : name)
	{
		Finisher_Gore_Spawn_1_Entry();
	}

	entry function Finisher_Gore_Spawn_1_Entry()
	{
		var ent, ent_1, ent_2, ent_3, ent_4      							: CEntity;
		var gorePos 														: Vector;
		var goreRot															: EulerAngles;
		var bone_vec														: Vector;
		var bone_rot, adjustedRot											: EulerAngles;
		var spawn_paths														: array<string>;

		gorePos = parent.pos;
		goreRot = parent.rot;

		//gorePos.Z += 1;

		//gorePos.Y += 1;

		//goreRot.Pitch += RandRange(360,0);
		//goreRot.Roll += RandRange(360,0);
		//goreRot.Yaw += RandRange(360,0);

		Sleep(1);

		GetWitcherPlayer().SoundEvent("cmb_play_dismemberment_gore");

		GetWitcherPlayer().SoundEvent("cmb_play_hit_heavy");

		spawn_paths.Clear();

		spawn_paths.PushBack("characters\models\common\wounds\w_ma__gore01.w2ent");
		spawn_paths.PushBack("characters\models\common\wounds\w_ma__gore02.w2ent");
		spawn_paths.PushBack("characters\models\common\wounds\w_ma__gore03.w2ent");
		spawn_paths.PushBack("characters\models\common\wounds\w_ma__gore04.w2ent");

		ent_1 = theGame.CreateEntity( (CEntityTemplate)LoadResource( 

		spawn_paths[RandRange(spawn_paths.Size())]

		, true ), gorePos, goreRot );

		ent_1.DestroyAfter(600);


		/*
		ent_1 = theGame.CreateEntity( (CEntityTemplate)LoadResource( 

		"characters\models\common\wounds\w_ma__gore01.w2ent"

		, true ), gorePos, goreRot );

		ent_1.DestroyAfter(600);

		ent_2 = theGame.CreateEntity( (CEntityTemplate)LoadResource( 

		"characters\models\common\wounds\w_ma__gore02.w2ent"

		, true ), gorePos, goreRot );

		ent_2.DestroyAfter(600);

		ent_3 = theGame.CreateEntity( (CEntityTemplate)LoadResource( 

		"characters\models\common\wounds\w_ma__gore03.w2ent"

		, true ), gorePos, goreRot );

		ent_3.DestroyAfter(600);

		ent_4 = theGame.CreateEntity( (CEntityTemplate)LoadResource( 

		"characters\models\common\wounds\w_ma__gore04.w2ent"

		, true ), gorePos, goreRot );

		ent_4.DestroyAfter(600);
		*/
	}
}

state FinisherSpawnGore_2 in CACSGoreSpawnerEntity
{
	event OnEnterState(prevStateName : name)
	{
		Finisher_Gore_Spawn_2_Entry();
	}

	entry function Finisher_Gore_Spawn_2_Entry()
	{
		var ent, ent_1, ent_2, ent_3, ent_4      							: CEntity;
		var gorePos 														: Vector;
		var goreRot, adjustedRot											: EulerAngles;
		var spawn_paths														: array<string>;

		gorePos = parent.pos;
		goreRot = parent.rot;

		//gorePos.Z += 1;

		//gorePos.Y += 1;

		//goreRot.Pitch += RandRange(360,0);
		//goreRot.Roll += RandRange(360,0);
		//goreRot.Yaw += RandRange(360,0);

		Sleep(0.4);

		GetWitcherPlayer().SoundEvent("cmb_play_dismemberment_gore");

		GetWitcherPlayer().SoundEvent("cmb_play_hit_heavy");

		spawn_paths.Clear();
		spawn_paths.PushBack("characters\models\common\wounds\w_ma__gore02.w2ent");
		spawn_paths.PushBack("characters\models\common\wounds\w_ma__gore03.w2ent");
		spawn_paths.PushBack("characters\models\common\wounds\w_ma__gore04.w2ent");


		ent_1 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

		spawn_paths[RandRange(spawn_paths.Size())]

		, true ), gorePos, goreRot );

		ent_1.DestroyAfter(600);


		/*
		ent_1 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

		"characters\models\common\wounds\w_ma__gore01.w2ent"

		, true ), gorePos, goreRot );

		ent_1.DestroyAfter(600);

		ent_2 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

		"characters\models\common\wounds\w_ma__gore02.w2ent"

		, true ), gorePos, goreRot );

		ent_2.DestroyAfter(600);

		ent_3 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

		"characters\models\common\wounds\w_ma__gore03.w2ent"

		, true ), gorePos, goreRot );

		ent_3.DestroyAfter(600);

		ent_4 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

		"characters\models\common\wounds\w_ma__gore04.w2ent"

		, true ), gorePos, goreRot );

		ent_4.DestroyAfter(600);
		*/
	}
}

state SpawnGore_No_Torso_Bone in CACSGoreSpawnerEntity
{
	event OnEnterState(prevStateName : name)
	{
		Gore_Spawn_No_Torso_Bone_Entry();
	}

	entry function Gore_Spawn_No_Torso_Bone_Entry()
	{
		var ent, ent_1, ent_2, ent_3, ent_4      							: CEntity;
		var gorePos 														: Vector;
		var goreRot, adjustedRot											: EulerAngles;
		var spawn_paths														: array<string>;
		
		gorePos = parent.pos;
		goreRot = parent.rot;

		//goreRot.Pitch += RandRange(360,0);
		//goreRot.Roll += RandRange(360,0);
		//goreRot.Yaw += RandRange(360,0);

		gorePos.Z += 1.5;

		/*
		ent = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

		"characters\models\common\special\force.w2ent"

		, true ), gorePos, goreRot );

		ent.DestroyAfter(3);
		*/

		GetWitcherPlayer().SoundEvent("cmb_play_dismemberment_gore");

		GetWitcherPlayer().SoundEvent("cmb_play_hit_heavy");


		spawn_paths.Clear();
		spawn_paths.PushBack("characters\models\common\wounds\w_ma__gore01.w2ent");
		spawn_paths.PushBack("characters\models\common\wounds\w_ma__gore02.w2ent");
		spawn_paths.PushBack("characters\models\common\wounds\w_ma__gore03.w2ent");
		spawn_paths.PushBack("characters\models\common\wounds\w_ma__gore04.w2ent");


		ent_1 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

		spawn_paths[RandRange(spawn_paths.Size())]

		, true ), gorePos, goreRot );

		ent_1.DestroyAfter(600);


		/*
		ent_1 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

		"characters\models\common\wounds\w_ma__gore01.w2ent"

		, true ), gorePos, goreRot );

		ent_1.DestroyAfter(600);

		ent_2 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

		"characters\models\common\wounds\w_ma__gore02.w2ent"

		, true ), gorePos, goreRot );

		ent_2.DestroyAfter(600);

		ent_3 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

		"characters\models\common\wounds\w_ma__gore03.w2ent"

		, true ), gorePos, goreRot );

		ent_3.DestroyAfter(600);

		ent_4 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

		"characters\models\common\wounds\w_ma__gore04.w2ent"

		, true ), gorePos, goreRot );

		ent_4.DestroyAfter(600);
		*/
	}
}

state SpawnGore in CACSGoreSpawnerEntity
{
	event OnEnterState(prevStateName : name)
	{
		Gore_Spawn_Entry();
	}

	entry function Gore_Spawn_Entry()
	{
		var ent, ent_1, ent_2, ent_3, ent_4      							: CEntity;
		var gorePos 														: Vector;
		var goreRot, adjustedRot											: EulerAngles;
		var spawn_paths														: array<string>;
		
		gorePos = parent.pos;
		goreRot = parent.rot;

		GetWitcherPlayer().SoundEvent("cmb_play_dismemberment_gore");

		GetWitcherPlayer().SoundEvent("cmb_play_hit_heavy");

		spawn_paths.Clear();
		spawn_paths.PushBack("characters\models\common\wounds\w_ma__gore01.w2ent");
		spawn_paths.PushBack("characters\models\common\wounds\w_ma__gore02.w2ent");
		spawn_paths.PushBack("characters\models\common\wounds\w_ma__gore03.w2ent");
		spawn_paths.PushBack("characters\models\common\wounds\w_ma__gore04.w2ent");


		ent_1 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

		spawn_paths[RandRange(spawn_paths.Size())]

		, true ), gorePos, goreRot );

		ent_1.DestroyAfter(600);


		/*
		ent_1 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

		"characters\models\common\wounds\w_ma__gore01.w2ent"

		, true ), gorePos, goreRot );

		ent_1.DestroyAfter(600);

		ent_2 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

		"characters\models\common\wounds\w_ma__gore02.w2ent"

		, true ), gorePos, goreRot );

		ent_2.DestroyAfter(600);

		ent_3 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

		"characters\models\common\wounds\w_ma__gore03.w2ent"

		, true ), gorePos, goreRot );

		ent_3.DestroyAfter(600);

		ent_4 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

		"characters\models\common\wounds\w_ma__gore04.w2ent"

		, true ), gorePos, goreRot );

		ent_4.DestroyAfter(600);
		*/
	}
}

class CACSCustomScent extends CGameplayEntity
{
	//import saved var isSaveable : bool;
	editable saved var isScentEnabled         : bool; default isScentEnabled = false;
	editable saved var scentPoints            : array<Vector>;
	editable saved var scentPointsDistance    : float; default scentPointsDistance = 0.5f;

	var currentDirection                 : int; default currentDirection = 1;
	var nextPoint                        : int; default nextPoint = 0;

	event OnSpawned( spawnData : SEntitySpawnData )
	{
		super.OnSpawned(spawnData);

		//isSaveable = true;

		AddTimer( 'UpdateScent', 0.1f, true , , , true, true );

		if (scentPoints.Size() < 2)
			LogChannel('UpdateScent', "[WARNING] Path contains less then two points!");
	}

	function setScentEnabled(enabled : bool) 
	{
		isScentEnabled = enabled;
	}

	function setScentPoints(points : array<Vector>) 
	{
		if (points.Size() > 0) 
		{
			scentPoints = points;
			LogChannel('CACSCustomScent', "[OK] Set new scent points(" + scentPoints.Size() + ")");
		}
	}

	function setScentDistance(dist : float) 
	{
		if (dist > 0.0f) 
		{
			scentPointsDistance = dist;
			LogChannel('CACSCustomScent', "[OK] Set new dist(" + scentPointsDistance + ")");
		}
	}

	function FindNextPoint() 
	{
		nextPoint += currentDirection;

		if (nextPoint == scentPoints.Size()) 
		{
			nextPoint -= 2;
			currentDirection *= -1;
		}

		if (nextPoint == -1) 
		{
			nextPoint += 2;
			currentDirection *= -1;
		}
	}

	function GetNextInterPoint() : Vector 
	{
		var distToNext : float;
		var curPos : Vector;
		var ret    : Vector;

		if (scentPoints.Size() < 2) 
		{
			return GetWorldPosition();
		}

		curPos = GetWorldPosition();

		distToNext = VecDistance(curPos, scentPoints[nextPoint]);

		if (distToNext < scentPointsDistance) 
		{
			ret = scentPoints[nextPoint];
			FindNextPoint();
			return ret;
		} 
		else 
		{
			ret = GetWorldPosition() + (scentPoints[nextPoint] - GetWorldPosition()) / (distToNext / scentPointsDistance);
			return ret;
		}
	}

	timer function UpdateScent( time : float , id : int)
	{
		if (isScentEnabled) 
		{
			if (!IsEffectActive('focus_smell_alt', false)) 
			{
				PlayEffect('focus_smell_alt');
			}
		} 
		else 
		{
			StopEffectIfActive('focus_smell_alt');
		}

		Teleport(GetNextInterPoint());
	}
}	

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class cACS_Wearable_Pocket_Items_Controller
{
    function ACS_Wearable_Pocket_Items_Controller_Engage()
	{
		this.PushState('ACS_Wearable_Pocket_Items_Controller_Engage');
	}
}

state ACS_Wearable_Pocket_Items_Controller_Engage in cACS_Wearable_Pocket_Items_Controller
{
	private var itemID_quickslot, itemID_petard 	: SItemUniqueId;
	private var item_name, petard_name 				: name;

	event OnEnterState(prevStateName : name)
	{
		Wearable_Pocket_Items_Entry();
	}
	
	entry function Wearable_Pocket_Items_Entry()
	{	
		if (theGame.IsDialogOrCutscenePlaying() 
		|| GetWitcherPlayer().IsInNonGameplayCutscene() 
		|| GetWitcherPlayer().IsInGameplayScene()
		|| theGame.IsCurrentlyPlayingNonGameplayScene()
		|| theGame.IsFading()
		|| theGame.IsBlackscreen()
		|| theGame.IsPaused()
		)
		{
			return;
		}

		if (thePlayer.HasTag('acs_in_wraith')
		|| thePlayer.HasTag('ACS_Camo_Active')
		|| !thePlayer.GetVisibility()
		|| !GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_Pants)
		|| !GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_Armor)
		)
		{
			Remove_All_Items();

			Remove_All_Bombs();

			return;
		}
		else
		{
			if (!GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_Quickslot1))
			{
				Remove_All_Items();
			}
			else
			{
				if (ACS_Settings_Main_Bool('EHmodVisualSettings','EHmodWearablwPocketItemsEnabled', true))
				{
					Wearable_Pocket_Items_Latent();
				}
				else
				{
					Remove_All_Items();
				}
			}

			if (!GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_Petard1))
			{
				Remove_All_Bombs();
			}
			else
			{
				if (ACS_Settings_Main_Bool('EHmodVisualSettings','EHmodWearableBombsEnabled', true))
				{
					Wearable_Bombs_Latent();
				}
				else
				{
					Remove_All_Bombs();
				}
			}
		}
	}

	latent function Wearable_Pocket_Items_Latent()
	{
		thePlayer.inv.GetItemEquippedOnSlot(EES_Quickslot1, itemID_quickslot);

		item_name = thePlayer.inv.GetItemName( itemID_quickslot );

		switch (item_name)
		{
			case 'Torch':
			Torch_Equip();
			break;

			case 'q106_magic_oillamp':
			Magic_Lamp_Equip();
			break;

			case 'Oil Lamp':
			Oil_Lamp_Equip();
			break;

			case 'Censer' :
			Censer_Equip();
			break;

			case 'q202_navigator_horn':
			Navigator_Horn_Equip();
			break;

			case 'oszluzg_bait_item':
			Oszluzg_Horn_Equip();
			break;

			case 'q701_grain_cup':
			case 'mh701_usable_lure':
			case 'mh107_czart_lure': 
			Lure_Equip();
			break;

			case 'q103_bell':
			Bell_Equip();
			break;

			case 'Potestaquisitor':
			Potestaquisitor_Equip();
			break;

			case 'q203_eyeofloki':
			Eye_Of_Loki_Equip();
			break;

			case 'Shani Flower 1':
			case 'Shani Flower 3':
			case 'Shani Alcohol 1':
			case 'Shani Alcohol 2':
			case 'q701_cookie_lure':
			case 'q701_carrot_basket':
			case 'q701_apple_lure':
			Pouch_Equip();
			break;

			default:
			Pouch_Equip();
			break;
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	latent function Torch_Equip()
	{
		var fake, dummy : CEntity; 
		var bIndex : int;
		var bName : name;
		var bPos, pPos : Vector;
		var bRot, pRot : EulerAngles;
		var meshComp : CMeshComponent;
		var option : int;

		if (thePlayer.IsHoldingItemInLHand() || thePlayer.IsCurrentlyUsingItemL())
		{
			Remove_All_Items();
		}
		else
		{
			if (FactsQuerySum("ACS_Magic_Lamp_Equipped") > 0)
			{
				GetACSMagicLampPropDestroyAll();

				FactsRemove("ACS_Magic_Lamp_Equipped");
			}

			if (FactsQuerySum("ACS_Oil_Lamp_Equipped") > 0)
			{
				GetACSOilLampPropDestroyAll();

				FactsRemove("ACS_Oil_Lamp_Equipped");
			}

			if (FactsQuerySum("ACS_Censer_Equipped") > 0)
			{
				GetACSCenserPropDestroyAll();

				FactsRemove("ACS_Censer_Equipped");
			}

			if (FactsQuerySum("ACS_Navigator_Horn_Equipped") > 0)
			{
				GetACSNavigatorHornPropDestroyAll();

				FactsRemove("ACS_Navigator_Horn_Equipped");
			}

			if (FactsQuerySum("ACS_Lure_Equipped") > 0)
			{
				GetACSLurePropDestroyAll();

				FactsRemove("ACS_Lure_Equipped");
			}

			if (FactsQuerySum("ACS_Bell_Equipped") > 0)
			{
				GetACSBellPropDestroyAll();

				FactsRemove("ACS_Bell_Equipped");
			}

			if (FactsQuerySum("ACS_Potestaquisitor_Equipped") > 0)
			{
				GetACSPotestaquisitorPropDestroyAll();

				FactsRemove("ACS_Potestaquisitor_Equipped");
			}

			if (FactsQuerySum("ACS_Eye_Of_Loki_Equipped") > 0)
			{
				GetACSEyeOfLokiPropDestroyAll();

				FactsRemove("ACS_Eye_Of_Loki_Equipped");
			}

			if (FactsQuerySum("ACS_Pouch_Equipped") > 0)
			{
				GetACSPouchPropDestroyAll();

				FactsRemove("ACS_Pouch_Equipped");
			}

			if (FactsQuerySum("ACS_Oszluzg_Horn_Equipped") > 0)
			{
				GetACSOszluzgHornPropDestroyAll();

				FactsRemove("ACS_Oszluzg_Horn_Equipped");
			}

			if (FactsQuerySum("ACS_Torch_Equipped") <= 0)
			{
				if (!ACSGetCEntity('ACS_Item_Prop_Anchor'))
				{
					dummy = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
					dummy.AddTag('ACS_Item_Prop_Anchor');
				}
				else 
				{
					dummy = ACSGetCEntity('ACS_Item_Prop_Anchor');
				}
				
				fake = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("items\usable\torchleft\torchleft.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
				fake.AddTag('ACS_Torch_Prop');

				meshComp = ( CMeshComponent ) fake.GetComponentByClassName( 'CMeshComponent' );
				meshComp.SetScale( Vector(0.8,0.8,0.8) );
				
				bIndex = GetWitcherPlayer().GetBoneIndex( 'pelvis' );	
				GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( bIndex, bPos, bRot );
				
				dummy.CreateAttachmentAtBoneWS(GetWitcherPlayer(), 'pelvis', bPos, bRot );

				option = ACS_Settings_Main_Int('EHmodVisualSettings','EHmodWearablePocketItemsPositioning', 0);

				switch ( option )
				{
					case 0: 
					pPos.X = 0.025;
					pPos.Y = -0.22;
					pPos.Z = -0.195;
					pRot.Roll = 115;
					pRot.Pitch = 95;
					pRot.Yaw = 50; 
					break;

					case 1:
					pPos.X = -0.05;
					pPos.Y = -0.21;
					pPos.Z = 0.2;
					pRot.Roll = 110;
					pRot.Pitch = 95;
					pRot.Yaw = 45; 
					break;
					
					default:
					pPos.X = 0.025;
					pPos.Y = -0.22;
					pPos.Z = -0.195;
					pRot.Roll = 115;
					pRot.Pitch = 95;
					pRot.Yaw = 50; 
					break;
				}

				fake.CreateAttachment(dummy, , pPos, pRot );

				FactsAdd("ACS_Torch_Equipped");
			}
		}
	}

	latent function Magic_Lamp_Equip()
	{
		var fake, dummy : CEntity; 
		var bIndex : int;
		var bName : name;
		var bPos, pPos : Vector;
		var bRot, pRot : EulerAngles;
		var meshComp : CMeshComponent;
		var option : int;

		if (thePlayer.IsHoldingItemInLHand() || thePlayer.IsCurrentlyUsingItemL())
		{
			Remove_All_Items();
		}
		else
		{
			if (FactsQuerySum("ACS_Torch_Equipped") > 0)
			{
				GetACSTorchPropDestroyAll();

				FactsRemove("ACS_Torch_Equipped");
			}

			if (FactsQuerySum("ACS_Oil_Lamp_Equipped") > 0)
			{
				GetACSOilLampPropDestroyAll();

				FactsRemove("ACS_Oil_Lamp_Equipped");
			}

			if (FactsQuerySum("ACS_Censer_Equipped") > 0)
			{
				GetACSCenserPropDestroyAll();

				FactsRemove("ACS_Censer_Equipped");
			}

			if (FactsQuerySum("ACS_Navigator_Horn_Equipped") > 0)
			{
				GetACSNavigatorHornPropDestroyAll();

				FactsRemove("ACS_Navigator_Horn_Equipped");
			}

			if (FactsQuerySum("ACS_Lure_Equipped") > 0)
			{
				GetACSLurePropDestroyAll();

				FactsRemove("ACS_Lure_Equipped");
			}

			if (FactsQuerySum("ACS_Bell_Equipped") > 0)
			{
				GetACSBellPropDestroyAll();

				FactsRemove("ACS_Bell_Equipped");
			}

			if (FactsQuerySum("ACS_Potestaquisitor_Equipped") > 0)
			{
				GetACSPotestaquisitorPropDestroyAll();

				FactsRemove("ACS_Potestaquisitor_Equipped");
			}

			if (FactsQuerySum("ACS_Eye_Of_Loki_Equipped") > 0)
			{
				GetACSEyeOfLokiPropDestroyAll();

				FactsRemove("ACS_Eye_Of_Loki_Equipped");
			}

			if (FactsQuerySum("ACS_Pouch_Equipped") > 0)
			{
				GetACSPouchPropDestroyAll();

				FactsRemove("ACS_Pouch_Equipped");
			}

			if (FactsQuerySum("ACS_Oszluzg_Horn_Equipped") > 0)
			{
				GetACSOszluzgHornPropDestroyAll();

				FactsRemove("ACS_Oszluzg_Horn_Equipped");
			}

			if (FactsQuerySum("ACS_Magic_Lamp_Equipped") <= 0)
			{
				if (!ACSGetCEntity('ACS_Item_Prop_Anchor'))
				{
					dummy = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
					dummy.AddTag('ACS_Item_Prop_Anchor');
				}
				else 
				{
					dummy = ACSGetCEntity('ACS_Item_Prop_Anchor');
				}
				
				fake = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("dlc\dlc_acs\data\entities\other\q106_magic_oillamp_dummy.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
				fake.AddTag('ACS_Magic_Lamp_Prop');

				//meshComp = ( CMeshComponent ) fake.GetComponentByClassName( 'CMeshComponent' );
				//meshComp.SetScale( Vector(0.8,0.8,0.8) );
				
				bIndex = GetWitcherPlayer().GetBoneIndex( 'pelvis' );	
				GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( bIndex, bPos, bRot );
				
				dummy.CreateAttachmentAtBoneWS(GetWitcherPlayer(), 'pelvis', bPos, bRot );

				option = ACS_Settings_Main_Int('EHmodVisualSettings','EHmodWearablePocketItemsPositioning', 0);

				switch ( option )
				{
					case 0: 
					pPos.X = 0.04;
					pPos.Y = -0.19;
					pPos.Z = -0.15;
					pRot.Roll = 110;
					pRot.Pitch = 205;
					pRot.Yaw = -90; 
					break;

					case 1:
					pPos.X = 0.07;
					pPos.Y = -0.1;
					pPos.Z = 0.14;
					pRot.Roll = 110;
					pRot.Pitch = 310;
					pRot.Yaw = -90;
					break;
					
					default:
					pPos.X = 0.04;
					pPos.Y = -0.19;
					pPos.Z = -0.15;
					pRot.Roll = 110;
					pRot.Pitch = 205;
					pRot.Yaw = -90; 
					break;
				}

				fake.CreateAttachment(dummy, , pPos, pRot );

				FactsAdd("ACS_Magic_Lamp_Equipped");
			}
		}
	}

	latent function Oil_Lamp_Equip()
	{
		var fake, dummy : CEntity; 
		var bIndex : int;
		var bName : name;
		var bPos, pPos : Vector;
		var bRot, pRot : EulerAngles;
		var meshComp : CMeshComponent;
		var option : int;

		if (thePlayer.IsHoldingItemInLHand() || thePlayer.IsCurrentlyUsingItemL())
		{
			Remove_All_Items();
		}
		else
		{
			if (FactsQuerySum("ACS_Torch_Equipped") > 0)
			{
				GetACSTorchPropDestroyAll();

				FactsRemove("ACS_Torch_Equipped");
			}

			if (FactsQuerySum("ACS_Magic_Lamp_Equipped") > 0)
			{
				GetACSMagicLampPropDestroyAll();

				FactsRemove("ACS_Magic_Lamp_Equipped");
			}

			if (FactsQuerySum("ACS_Censer_Equipped") > 0)
			{
				GetACSCenserPropDestroyAll();

				FactsRemove("ACS_Censer_Equipped");
			}

			if (FactsQuerySum("ACS_Navigator_Horn_Equipped") > 0)
			{
				GetACSNavigatorHornPropDestroyAll();

				FactsRemove("ACS_Navigator_Horn_Equipped");
			}

			if (FactsQuerySum("ACS_Lure_Equipped") > 0)
			{
				GetACSLurePropDestroyAll();

				FactsRemove("ACS_Lure_Equipped");
			}

			if (FactsQuerySum("ACS_Bell_Equipped") > 0)
			{
				GetACSBellPropDestroyAll();

				FactsRemove("ACS_Bell_Equipped");
			}

			if (FactsQuerySum("ACS_Potestaquisitor_Equipped") > 0)
			{
				GetACSPotestaquisitorPropDestroyAll();

				FactsRemove("ACS_Potestaquisitor_Equipped");
			}

			if (FactsQuerySum("ACS_Eye_Of_Loki_Equipped") > 0)
			{
				GetACSEyeOfLokiPropDestroyAll();

				FactsRemove("ACS_Eye_Of_Loki_Equipped");
			}

			if (FactsQuerySum("ACS_Pouch_Equipped") > 0)
			{
				GetACSPouchPropDestroyAll();

				FactsRemove("ACS_Pouch_Equipped");
			}

			if (FactsQuerySum("ACS_Oszluzg_Horn_Equipped") > 0)
			{
				GetACSOszluzgHornPropDestroyAll();

				FactsRemove("ACS_Oszluzg_Horn_Equipped");
			}

			if (FactsQuerySum("ACS_Oil_Lamp_Equipped") <= 0)
			{
				if (!ACSGetCEntity('ACS_Item_Prop_Anchor'))
				{
					dummy = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
					dummy.AddTag('ACS_Item_Prop_Anchor');
				}
				else 
				{
					dummy = ACSGetCEntity('ACS_Item_Prop_Anchor');
				}
				
				fake = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("dlc\dlc_acs\data\entities\other\oillamp_dummy.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
				fake.AddTag('ACS_Oil_Lamp_Prop');

				//meshComp = ( CMeshComponent ) fake.GetComponentByClassName( 'CMeshComponent' );
				//meshComp.SetScale( Vector(0.8,0.8,0.8) );
				
				bIndex = GetWitcherPlayer().GetBoneIndex( 'pelvis' );	
				GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( bIndex, bPos, bRot );
				
				dummy.CreateAttachmentAtBoneWS(GetWitcherPlayer(), 'pelvis', bPos, bRot );

				option = ACS_Settings_Main_Int('EHmodVisualSettings','EHmodWearablePocketItemsPositioning', 0);

				switch ( option )
				{
					case 0: 
					pPos.X = 0.04;
					pPos.Y = -0.19;
					pPos.Z = -0.15;
					pRot.Roll = 110;
					pRot.Pitch = 205;
					pRot.Yaw = -90; 
					break;

					case 1:
					pPos.X = 0.07;
					pPos.Y = -0.1;
					pPos.Z = 0.14;
					pRot.Roll = 110;
					pRot.Pitch = 310;
					pRot.Yaw = -90;
					break;
					
					default:
					pPos.X = 0.04;
					pPos.Y = -0.19;
					pPos.Z = -0.15;
					pRot.Roll = 110;
					pRot.Pitch = 205;
					pRot.Yaw = -90; 
					break;
				}

				fake.CreateAttachment(dummy, , pPos, pRot );

				FactsAdd("ACS_Oil_Lamp_Equipped");
			}
		}
	}

	latent function Censer_Equip()
	{
		var fake, dummy : CEntity; 
		var bIndex : int;
		var bName : name;
		var bPos, pPos : Vector;
		var bRot, pRot : EulerAngles;
		var meshComp : CMeshComponent;
		var option : int;

		if (thePlayer.IsHoldingItemInLHand() || thePlayer.IsCurrentlyUsingItemL())
		{
			Remove_All_Items();
		}
		else
		{
			if (FactsQuerySum("ACS_Torch_Equipped") > 0)
			{
				GetACSTorchPropDestroyAll();

				FactsRemove("ACS_Torch_Equipped");
			}

			if (FactsQuerySum("ACS_Magic_Lamp_Equipped") > 0)
			{
				GetACSMagicLampPropDestroyAll();

				FactsRemove("ACS_Magic_Lamp_Equipped");
			}

			if (FactsQuerySum("ACS_Oil_Lamp_Equipped") > 0)
			{
				GetACSOilLampPropDestroyAll();

				FactsRemove("ACS_Oil_Lamp_Equipped");
			}

			if (FactsQuerySum("ACS_Navigator_Horn_Equipped") > 0)
			{
				GetACSNavigatorHornPropDestroyAll();

				FactsRemove("ACS_Navigator_Horn_Equipped");
			}

			if (FactsQuerySum("ACS_Lure_Equipped") > 0)
			{
				GetACSLurePropDestroyAll();

				FactsRemove("ACS_Lure_Equipped");
			}

			if (FactsQuerySum("ACS_Bell_Equipped") > 0)
			{
				GetACSBellPropDestroyAll();

				FactsRemove("ACS_Bell_Equipped");
			}

			if (FactsQuerySum("ACS_Potestaquisitor_Equipped") > 0)
			{
				GetACSPotestaquisitorPropDestroyAll();

				FactsRemove("ACS_Potestaquisitor_Equipped");
			}

			if (FactsQuerySum("ACS_Eye_Of_Loki_Equipped") > 0)
			{
				GetACSEyeOfLokiPropDestroyAll();

				FactsRemove("ACS_Eye_Of_Loki_Equipped");
			}

			if (FactsQuerySum("ACS_Pouch_Equipped") > 0)
			{
				GetACSPouchPropDestroyAll();

				FactsRemove("ACS_Pouch_Equipped");
			}

			if (FactsQuerySum("ACS_Oszluzg_Horn_Equipped") > 0)
			{
				GetACSOszluzgHornPropDestroyAll();

				FactsRemove("ACS_Oszluzg_Horn_Equipped");
			}

			if (FactsQuerySum("ACS_Censer_Equipped") <= 0)
			{
				if (!ACSGetCEntity('ACS_Item_Prop_Anchor'))
				{
					dummy = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
					dummy.AddTag('ACS_Item_Prop_Anchor');
				}
				else 
				{
					dummy = ACSGetCEntity('ACS_Item_Prop_Anchor');
				}
				
				fake = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("dlc\ep1\data\items\quest_items\q602\q602_item__censer_scene_prop.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
				fake.AddTag('ACS_Censer_Prop');

				//meshComp = ( CMeshComponent ) fake.GetComponentByClassName( 'CMeshComponent' );
				//meshComp.SetScale( Vector(0.8,0.8,0.8) );
				
				bIndex = GetWitcherPlayer().GetBoneIndex( 'pelvis' );	
				GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( bIndex, bPos, bRot );
				
				dummy.CreateAttachmentAtBoneWS(GetWitcherPlayer(), 'pelvis', bPos, bRot );

				option = ACS_Settings_Main_Int('EHmodVisualSettings','EHmodWearablePocketItemsPositioning', 0);

				switch ( option )
				{
					case 0: 
					pPos.X = 0.04;
					pPos.Y = -0.19;
					pPos.Z = -0.15;
					pRot.Roll = 110;
					pRot.Pitch = 205;
					pRot.Yaw = -90; 
					break;

					case 1:
					pPos.X = 0.07;
					pPos.Y = -0.1;
					pPos.Z = 0.14;
					pRot.Roll = 110;
					pRot.Pitch = 310;
					pRot.Yaw = -90;
					break;
					
					default:
					pPos.X = 0.04;
					pPos.Y = -0.19;
					pPos.Z = -0.15;
					pRot.Roll = 110;
					pRot.Pitch = 205;
					pRot.Yaw = -90; 
					break;
				}

				fake.CreateAttachment(dummy, , pPos, pRot );

				FactsAdd("ACS_Censer_Equipped");
			}
		}
	}

	latent function Navigator_Horn_Equip()
	{
		var fake, dummy : CEntity; 
		var bIndex : int;
		var bName : name;
		var bPos, pPos : Vector;
		var bRot, pRot : EulerAngles;
		var meshComp : CMeshComponent;
		var option : int;

		if (thePlayer.IsHoldingItemInLHand() || thePlayer.IsCurrentlyUsingItemL())
		{
			Remove_All_Items();
		}
		else
		{
			if (FactsQuerySum("ACS_Torch_Equipped") > 0)
			{
				GetACSTorchPropDestroyAll();

				FactsRemove("ACS_Torch_Equipped");
			}

			if (FactsQuerySum("ACS_Magic_Lamp_Equipped") > 0)
			{
				GetACSMagicLampPropDestroyAll();

				FactsRemove("ACS_Magic_Lamp_Equipped");
			}

			if (FactsQuerySum("ACS_Oil_Lamp_Equipped") > 0)
			{
				GetACSOilLampPropDestroyAll();

				FactsRemove("ACS_Oil_Lamp_Equipped");
			}

			if (FactsQuerySum("ACS_Censer_Equipped") > 0)
			{
				GetACSCenserPropDestroyAll();

				FactsRemove("ACS_Censer_Equipped");
			}

			if (FactsQuerySum("ACS_Lure_Equipped") > 0)
			{
				GetACSLurePropDestroyAll();

				FactsRemove("ACS_Lure_Equipped");
			}

			if (FactsQuerySum("ACS_Bell_Equipped") > 0)
			{
				GetACSBellPropDestroyAll();

				FactsRemove("ACS_Bell_Equipped");
			}

			if (FactsQuerySum("ACS_Potestaquisitor_Equipped") > 0)
			{
				GetACSPotestaquisitorPropDestroyAll();

				FactsRemove("ACS_Potestaquisitor_Equipped");
			}

			if (FactsQuerySum("ACS_Eye_Of_Loki_Equipped") > 0)
			{
				GetACSEyeOfLokiPropDestroyAll();

				FactsRemove("ACS_Eye_Of_Loki_Equipped");
			}

			if (FactsQuerySum("ACS_Pouch_Equipped") > 0)
			{
				GetACSPouchPropDestroyAll();

				FactsRemove("ACS_Pouch_Equipped");
			}

			if (FactsQuerySum("ACS_Oszluzg_Horn_Equipped") > 0)
			{
				GetACSOszluzgHornPropDestroyAll();

				FactsRemove("ACS_Oszluzg_Horn_Equipped");
			}

			if (FactsQuerySum("ACS_Navigator_Horn_Equipped") <= 0)
			{
				if (!ACSGetCEntity('ACS_Item_Prop_Anchor'))
				{
					dummy = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
					dummy.AddTag('ACS_Item_Prop_Anchor');
				}
				else 
				{
					dummy = ACSGetCEntity('ACS_Item_Prop_Anchor');
				}
				
				fake = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("items\usable\q202_hornval_horn.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
				fake.AddTag('ACS_Navigator_Horn_Prop');

				meshComp = ( CMeshComponent ) fake.GetComponentByClassName( 'CMeshComponent' );
				meshComp.SetScale( Vector(0.9,0.9,0.9) );
				
				bIndex = GetWitcherPlayer().GetBoneIndex( 'pelvis' );	
				GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( bIndex, bPos, bRot );
				
				dummy.CreateAttachmentAtBoneWS(GetWitcherPlayer(), 'pelvis', bPos, bRot );

				option = ACS_Settings_Main_Int('EHmodVisualSettings','EHmodWearablePocketItemsPositioning', 0);

				switch ( option )
				{
					case 0: 
					pPos.X = 0.05;
					pPos.Y = -0.19;
					pPos.Z = -0.17;
					pRot.Roll = -130;
					pRot.Pitch = 210;
					pRot.Yaw = -100; 
					break;

					case 1:
					pPos.X = 0.03;
					pPos.Y = -0.15;
					pPos.Z = 0.21;
					pRot.Roll = -130;
					pRot.Pitch = 285;
					pRot.Yaw = -100; 
					break;
					
					default:
					pPos.X = 0.05;
					pPos.Y = -0.19;
					pPos.Z = -0.17;
					pRot.Roll = -130;
					pRot.Pitch = 210;
					pRot.Yaw = -100; 
					break;
				}

				fake.CreateAttachment(dummy, , pPos, pRot );

				FactsAdd("ACS_Navigator_Horn_Equipped");
			}
		}
	}

	latent function Oszluzg_Horn_Equip()
	{
		var fake, dummy : CEntity; 
		var bIndex : int;
		var bName : name;
		var bPos, pPos : Vector;
		var bRot, pRot : EulerAngles;
		var meshComp : CMeshComponent;
		var option : int;

		if (thePlayer.IsHoldingItemInLHand() || thePlayer.IsCurrentlyUsingItemL())
		{
			Remove_All_Items();
		}
		else
		{
			if (FactsQuerySum("ACS_Torch_Equipped") > 0)
			{
				GetACSTorchPropDestroyAll();

				FactsRemove("ACS_Torch_Equipped");
			}

			if (FactsQuerySum("ACS_Magic_Lamp_Equipped") > 0)
			{
				GetACSMagicLampPropDestroyAll();

				FactsRemove("ACS_Magic_Lamp_Equipped");
			}

			if (FactsQuerySum("ACS_Oil_Lamp_Equipped") > 0)
			{
				GetACSOilLampPropDestroyAll();

				FactsRemove("ACS_Oil_Lamp_Equipped");
			}

			if (FactsQuerySum("ACS_Censer_Equipped") > 0)
			{
				GetACSCenserPropDestroyAll();

				FactsRemove("ACS_Censer_Equipped");
			}

			if (FactsQuerySum("ACS_Lure_Equipped") > 0)
			{
				GetACSLurePropDestroyAll();

				FactsRemove("ACS_Lure_Equipped");
			}

			if (FactsQuerySum("ACS_Bell_Equipped") > 0)
			{
				GetACSBellPropDestroyAll();

				FactsRemove("ACS_Bell_Equipped");
			}

			if (FactsQuerySum("ACS_Potestaquisitor_Equipped") > 0)
			{
				GetACSPotestaquisitorPropDestroyAll();

				FactsRemove("ACS_Potestaquisitor_Equipped");
			}

			if (FactsQuerySum("ACS_Eye_Of_Loki_Equipped") > 0)
			{
				GetACSEyeOfLokiPropDestroyAll();

				FactsRemove("ACS_Eye_Of_Loki_Equipped");
			}

			if (FactsQuerySum("ACS_Pouch_Equipped") > 0)
			{
				GetACSPouchPropDestroyAll();

				FactsRemove("ACS_Pouch_Equipped");
			}

			if (FactsQuerySum("ACS_Navigator_Horn_Equipped") > 0)
			{
				GetACSNavigatorHornPropDestroyAll();

				FactsRemove("ACS_Navigator_Horn_Equipped");
			}

			if (FactsQuerySum("ACS_Oszluzg_Horn_Equipped") <= 0)
			{
				if (!ACSGetCEntity('ACS_Item_Prop_Anchor'))
				{
					dummy = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
					dummy.AddTag('ACS_Item_Prop_Anchor');
				}
				else 
				{
					dummy = ACSGetCEntity('ACS_Item_Prop_Anchor');
				}
				
				fake = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("dlc\dlc_eh_oszluzg_mount\data\entities\oszluzg_horn_mesh.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
				fake.PlayEffect('glow_normal');
				fake.AddTag('ACS_Oszluzg_Horn_Prop');

				meshComp = ( CMeshComponent ) fake.GetComponentByClassName( 'CMeshComponent' );
				meshComp.SetScale( Vector(0.9,0.9,0.9) );
				
				bIndex = GetWitcherPlayer().GetBoneIndex( 'pelvis' );	
				GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( bIndex, bPos, bRot );
				
				dummy.CreateAttachmentAtBoneWS(GetWitcherPlayer(), 'pelvis', bPos, bRot );

				option = ACS_Settings_Main_Int('EHmodVisualSettings','EHmodWearablePocketItemsPositioning', 0);

				switch ( option )
				{
					case 0: 
					pPos.X = 0.05;
					pPos.Y = -0.19;
					pPos.Z = -0.17;
					pRot.Roll = -130;
					pRot.Pitch = 210;
					pRot.Yaw = -100; 
					break;

					case 1:
					pPos.X = 0.03;
					pPos.Y = -0.15;
					pPos.Z = 0.21;
					pRot.Roll = -130;
					pRot.Pitch = 285;
					pRot.Yaw = -100; 
					break;
					
					default:
					pPos.X = 0.05;
					pPos.Y = -0.19;
					pPos.Z = -0.17;
					pRot.Roll = -130;
					pRot.Pitch = 210;
					pRot.Yaw = -100; 
					break;
				}

				fake.CreateAttachment(dummy, , pPos, pRot );

				FactsAdd("ACS_Oszluzg_Horn_Equipped");
			}
		}
	}

	latent function Lure_Equip()
	{
		var fake, dummy : CEntity; 
		var bIndex : int;
		var bName : name;
		var bPos, pPos : Vector;
		var bRot, pRot : EulerAngles;
		var meshComp : CMeshComponent;
		var option : int;

		if (thePlayer.IsHoldingItemInLHand() || thePlayer.IsCurrentlyUsingItemL())
		{
			Remove_All_Items();
		}
		else
		{
			if (FactsQuerySum("ACS_Torch_Equipped") > 0)
			{
				GetACSTorchPropDestroyAll();

				FactsRemove("ACS_Torch_Equipped");
			}

			if (FactsQuerySum("ACS_Magic_Lamp_Equipped") > 0)
			{
				GetACSMagicLampPropDestroyAll();

				FactsRemove("ACS_Magic_Lamp_Equipped");
			}

			if (FactsQuerySum("ACS_Oil_Lamp_Equipped") > 0)
			{
				GetACSOilLampPropDestroyAll();

				FactsRemove("ACS_Oil_Lamp_Equipped");
			}

			if (FactsQuerySum("ACS_Censer_Equipped") > 0)
			{
				GetACSCenserPropDestroyAll();

				FactsRemove("ACS_Censer_Equipped");
			}

			if (FactsQuerySum("ACS_Navigator_Horn_Equipped") > 0)
			{
				GetACSNavigatorHornPropDestroyAll();

				FactsRemove("ACS_Navigator_Horn_Equipped");
			}

			if (FactsQuerySum("ACS_Bell_Equipped") > 0)
			{
				GetACSBellPropDestroyAll();

				FactsRemove("ACS_Bell_Equipped");
			}

			if (FactsQuerySum("ACS_Potestaquisitor_Equipped") > 0)
			{
				GetACSPotestaquisitorPropDestroyAll();

				FactsRemove("ACS_Potestaquisitor_Equipped");
			}

			if (FactsQuerySum("ACS_Eye_Of_Loki_Equipped") > 0)
			{
				GetACSEyeOfLokiPropDestroyAll();

				FactsRemove("ACS_Eye_Of_Loki_Equipped");
			}

			if (FactsQuerySum("ACS_Pouch_Equipped") > 0)
			{
				GetACSPouchPropDestroyAll();

				FactsRemove("ACS_Pouch_Equipped");
			}

			if (FactsQuerySum("ACS_Oszluzg_Horn_Equipped") > 0)
			{
				GetACSOszluzgHornPropDestroyAll();

				FactsRemove("ACS_Oszluzg_Horn_Equipped");
			}

			if (FactsQuerySum("ACS_Lure_Equipped") <= 0)
			{
				if (!ACSGetCEntity('ACS_Item_Prop_Anchor'))
				{
					dummy = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
					dummy.AddTag('ACS_Item_Prop_Anchor');
				}
				else 
				{
					dummy = ACSGetCEntity('ACS_Item_Prop_Anchor');
				}
				
				fake = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("items\quest_items\mh107\mh107_item_czart_lure_potion.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
				fake.AddTag('ACS_Lure_Prop');

				meshComp = ( CMeshComponent ) fake.GetComponentByClassName( 'CMeshComponent' );
				meshComp.SetScale( Vector(0.9,0.9,0.9) );
				
				bIndex = GetWitcherPlayer().GetBoneIndex( 'pelvis' );	
				GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( bIndex, bPos, bRot );
				
				dummy.CreateAttachmentAtBoneWS(GetWitcherPlayer(), 'pelvis', bPos, bRot );

				option = ACS_Settings_Main_Int('EHmodVisualSettings','EHmodWearablePocketItemsPositioning', 0);

				switch ( option )
				{
					case 0: 
					pPos.X = 0.13;
					pPos.Y = 0;
					pPos.Z = -0.16;
					pRot.Roll = -90;
					pRot.Pitch = 15;
					pRot.Yaw = -290; 
					break;

					case 1:
					pPos.X = 0.15;
					pPos.Y = 0.05;
					pPos.Z = 0.14;
					pRot.Roll = -80;
					pRot.Pitch = 45;
					pRot.Yaw = -295; 
					break;
					
					default:
					pPos.X = 0.13;
					pPos.Y = 0;
					pPos.Z = -0.16;
					pRot.Roll = -90;
					pRot.Pitch = 15;
					pRot.Yaw = -290; 
					break;
				}

				fake.CreateAttachment(dummy, , pPos, pRot );

				FactsAdd("ACS_Lure_Equipped");
			}
		}
	}

	latent function Bell_Equip()
	{
		var fake, dummy : CEntity; 
		var bIndex : int;
		var bName : name;
		var bPos, pPos : Vector;
		var bRot, pRot : EulerAngles;
		var meshComp : CMeshComponent;
		var option : int;

		if (thePlayer.IsHoldingItemInLHand() || thePlayer.IsCurrentlyUsingItemL())
		{
			Remove_All_Items();
		}
		else
		{
			if (FactsQuerySum("ACS_Torch_Equipped") > 0)
			{
				GetACSTorchPropDestroyAll();

				FactsRemove("ACS_Torch_Equipped");
			}

			if (FactsQuerySum("ACS_Magic_Lamp_Equipped") > 0)
			{
				GetACSMagicLampPropDestroyAll();

				FactsRemove("ACS_Magic_Lamp_Equipped");
			}

			if (FactsQuerySum("ACS_Oil_Lamp_Equipped") > 0)
			{
				GetACSOilLampPropDestroyAll();

				FactsRemove("ACS_Oil_Lamp_Equipped");
			}

			if (FactsQuerySum("ACS_Censer_Equipped") > 0)
			{
				GetACSCenserPropDestroyAll();

				FactsRemove("ACS_Censer_Equipped");
			}

			if (FactsQuerySum("ACS_Navigator_Horn_Equipped") > 0)
			{
				GetACSNavigatorHornPropDestroyAll();

				FactsRemove("ACS_Navigator_Horn_Equipped");
			}

			if (FactsQuerySum("ACS_Lure_Equipped") > 0)
			{
				GetACSLurePropDestroyAll();

				FactsRemove("ACS_Lure_Equipped");
			}

			if (FactsQuerySum("ACS_Potestaquisitor_Equipped") > 0)
			{
				GetACSPotestaquisitorPropDestroyAll();

				FactsRemove("ACS_Potestaquisitor_Equipped");
			}

			if (FactsQuerySum("ACS_Eye_Of_Loki_Equipped") > 0)
			{
				GetACSEyeOfLokiPropDestroyAll();

				FactsRemove("ACS_Eye_Of_Loki_Equipped");
			}

			if (FactsQuerySum("ACS_Pouch_Equipped") > 0)
			{
				GetACSPouchPropDestroyAll();

				FactsRemove("ACS_Pouch_Equipped");
			}

			if (FactsQuerySum("ACS_Oszluzg_Horn_Equipped") > 0)
			{
				GetACSOszluzgHornPropDestroyAll();

				FactsRemove("ACS_Oszluzg_Horn_Equipped");
			}

			if (FactsQuerySum("ACS_Bell_Equipped") <= 0)
			{
				if (!ACSGetCEntity('ACS_Item_Prop_Anchor'))
				{
					dummy = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
					dummy.AddTag('ACS_Item_Prop_Anchor');
				}
				else 
				{
					dummy = ACSGetCEntity('ACS_Item_Prop_Anchor');
				}
				
				fake = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("items\usable\q103_bell.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
				fake.AddTag('ACS_Bell_Prop');

				//meshComp = ( CMeshComponent ) fake.GetComponentByClassName( 'CMeshComponent' );
				//meshComp.SetScale( Vector(0.9,0.9,0.9) );
				
				bIndex = GetWitcherPlayer().GetBoneIndex( 'pelvis' );	
				GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( bIndex, bPos, bRot );
				
				dummy.CreateAttachmentAtBoneWS(GetWitcherPlayer(), 'pelvis', bPos, bRot );

				option = ACS_Settings_Main_Int('EHmodVisualSettings','EHmodWearablePocketItemsPositioning', 0);

				switch ( option )
				{
					case 0: 
					pPos.X = 0.08;
					pPos.Y = 0.07;
					pPos.Z = -0.24;
					pRot.Roll = 115;
					pRot.Pitch = 140;
					pRot.Yaw = -110; 
					break;

					case 1:
					pPos.X = 0.17;
					pPos.Y = 0.15;
					pPos.Z = 0.14;
					pRot.Roll = 85;
					pRot.Pitch = 225;
					pRot.Yaw = -110; 
					break;
					
					default:
					pPos.X = 0.08;
					pPos.Y = 0.07;
					pPos.Z = -0.24;
					pRot.Roll = 115;
					pRot.Pitch = 140;
					pRot.Yaw = -110; 
					break;
				}

				fake.CreateAttachment(dummy, , pPos, pRot );

				FactsAdd("ACS_Bell_Equipped");
			}
		}
	}

	latent function Potestaquisitor_Equip()
	{
		var fake, dummy : CEntity; 
		var bIndex : int;
		var bName : name;
		var bPos, pPos : Vector;
		var bRot, pRot : EulerAngles;
		var meshComp : CMeshComponent;
		var option : int;

		if (thePlayer.IsHoldingItemInLHand() || thePlayer.IsCurrentlyUsingItemL())
		{
			Remove_All_Items();
		}
		else
		{
			if (FactsQuerySum("ACS_Torch_Equipped") > 0)
			{
				GetACSTorchPropDestroyAll();

				FactsRemove("ACS_Torch_Equipped");
			}

			if (FactsQuerySum("ACS_Magic_Lamp_Equipped") > 0)
			{
				GetACSMagicLampPropDestroyAll();

				FactsRemove("ACS_Magic_Lamp_Equipped");
			}

			if (FactsQuerySum("ACS_Oil_Lamp_Equipped") > 0)
			{
				GetACSOilLampPropDestroyAll();

				FactsRemove("ACS_Oil_Lamp_Equipped");
			}

			if (FactsQuerySum("ACS_Censer_Equipped") > 0)
			{
				GetACSCenserPropDestroyAll();

				FactsRemove("ACS_Censer_Equipped");
			}

			if (FactsQuerySum("ACS_Navigator_Horn_Equipped") > 0)
			{
				GetACSNavigatorHornPropDestroyAll();

				FactsRemove("ACS_Navigator_Horn_Equipped");
			}

			if (FactsQuerySum("ACS_Lure_Equipped") > 0)
			{
				GetACSLurePropDestroyAll();

				FactsRemove("ACS_Lure_Equipped");
			}

			if (FactsQuerySum("ACS_Bell_Equipped") > 0)
			{
				GetACSBellPropDestroyAll();

				FactsRemove("ACS_Bell_Equipped");
			}

			if (FactsQuerySum("ACS_Eye_Of_Loki_Equipped") > 0)
			{
				GetACSEyeOfLokiPropDestroyAll();

				FactsRemove("ACS_Eye_Of_Loki_Equipped");
			}

			if (FactsQuerySum("ACS_Pouch_Equipped") > 0)
			{
				GetACSPouchPropDestroyAll();

				FactsRemove("ACS_Pouch_Equipped");
			}

			if (FactsQuerySum("ACS_Oszluzg_Horn_Equipped") > 0)
			{
				GetACSOszluzgHornPropDestroyAll();

				FactsRemove("ACS_Oszluzg_Horn_Equipped");
			}

			if (FactsQuerySum("ACS_Potestaquisitor_Equipped") <= 0)
			{
				if (!ACSGetCEntity('ACS_Item_Prop_Anchor'))
				{
					dummy = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
					dummy.AddTag('ACS_Item_Prop_Anchor');
				}
				else 
				{
					dummy = ACSGetCEntity('ACS_Item_Prop_Anchor');
				}
				
				fake = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("items\usable\potestaquisitor\potestaquisitor.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
				fake.AddTag('ACS_Potestaquisitor_Prop');

				meshComp = ( CMeshComponent ) fake.GetComponentByClassName( 'CMeshComponent' );
				meshComp.SetScale( Vector(0.9,0.9,0.9) );
				
				bIndex = GetWitcherPlayer().GetBoneIndex( 'pelvis' );	
				GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( bIndex, bPos, bRot );
				
				dummy.CreateAttachmentAtBoneWS(GetWitcherPlayer(), 'pelvis', bPos, bRot );

				option = ACS_Settings_Main_Int('EHmodVisualSettings','EHmodWearablePocketItemsPositioning', 0);

				switch ( option )
				{
					case 0: 
					pPos.X = 0.05;
					pPos.Y = -0.24;
					pPos.Z = -0.13;
					pRot.Roll = 120;
					pRot.Pitch = 325;
					pRot.Yaw = 100; 
					break;

					case 1:
					pPos.X = 0.07;
					pPos.Y = -0.21;
					pPos.Z = 0.1;
					pRot.Roll = 120;
					pRot.Pitch = 235;
					pRot.Yaw = 100; 
					break;
					
					default:
					pPos.X = 0.05;
					pPos.Y = -0.24;
					pPos.Z = -0.13;
					pRot.Roll = 120;
					pRot.Pitch = 325;
					pRot.Yaw = 100; 
					break;
				}

				fake.CreateAttachment(dummy, , pPos, pRot );

				FactsAdd("ACS_Potestaquisitor_Equipped");
			}
		}
	}

	latent function Eye_Of_Loki_Equip()
	{
		var fake, dummy : CEntity; 
		var bIndex : int;
		var bName : name;
		var bPos, pPos : Vector;
		var bRot, pRot : EulerAngles;
		var meshComp : CMeshComponent;
		var option : int;

		if (thePlayer.IsHoldingItemInLHand() || thePlayer.IsCurrentlyUsingItemL())
		{
			Remove_All_Items();
		}
		else
		{
			if (FactsQuerySum("ACS_Torch_Equipped") > 0)
			{
				GetACSTorchPropDestroyAll();

				FactsRemove("ACS_Torch_Equipped");
			}

			if (FactsQuerySum("ACS_Magic_Lamp_Equipped") > 0)
			{
				GetACSMagicLampPropDestroyAll();

				FactsRemove("ACS_Magic_Lamp_Equipped");
			}

			if (FactsQuerySum("ACS_Oil_Lamp_Equipped") > 0)
			{
				GetACSOilLampPropDestroyAll();

				FactsRemove("ACS_Oil_Lamp_Equipped");
			}

			if (FactsQuerySum("ACS_Censer_Equipped") > 0)
			{
				GetACSCenserPropDestroyAll();

				FactsRemove("ACS_Censer_Equipped");
			}

			if (FactsQuerySum("ACS_Navigator_Horn_Equipped") > 0)
			{
				GetACSNavigatorHornPropDestroyAll();

				FactsRemove("ACS_Navigator_Horn_Equipped");
			}

			if (FactsQuerySum("ACS_Lure_Equipped") > 0)
			{
				GetACSLurePropDestroyAll();

				FactsRemove("ACS_Lure_Equipped");
			}

			if (FactsQuerySum("ACS_Bell_Equipped") > 0)
			{
				GetACSBellPropDestroyAll();

				FactsRemove("ACS_Bell_Equipped");
			}

			if (FactsQuerySum("ACS_Potestaquisitor_Equipped") > 0)
			{
				GetACSPotestaquisitorPropDestroyAll();

				FactsRemove("ACS_Potestaquisitor_Equipped");
			}

			if (FactsQuerySum("ACS_Pouch_Equipped") > 0)
			{
				GetACSPouchPropDestroyAll();

				FactsRemove("ACS_Pouch_Equipped");
			}

			if (FactsQuerySum("ACS_Oszluzg_Horn_Equipped") > 0)
			{
				GetACSOszluzgHornPropDestroyAll();

				FactsRemove("ACS_Oszluzg_Horn_Equipped");
			}

			if (FactsQuerySum("ACS_Eye_Of_Loki_Equipped") <= 0)
			{
				if (!ACSGetCEntity('ACS_Item_Prop_Anchor'))
				{
					dummy = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
					dummy.AddTag('ACS_Item_Prop_Anchor');
				}
				else 
				{
					dummy = ACSGetCEntity('ACS_Item_Prop_Anchor');
				}
				
				fake = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("items\usable\q203_eyeofloki.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
				fake.AddTag('ACS_Eye_Of_Loki_Prop');

				//meshComp = ( CMeshComponent ) fake.GetComponentByClassName( 'CMeshComponent' );
				//meshComp.SetScale( Vector(0.9,0.9,0.9) );
				
				bIndex = GetWitcherPlayer().GetBoneIndex( 'pelvis' );	
				GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( bIndex, bPos, bRot );
				
				dummy.CreateAttachmentAtBoneWS(GetWitcherPlayer(), 'pelvis', bPos, bRot );

				option = ACS_Settings_Main_Int('EHmodVisualSettings','EHmodWearablePocketItemsPositioning', 0);

				switch ( option )
				{
					case 0: 
					pPos.X = 0.07;
					pPos.Y = -0.21;
					pPos.Z = -0.16;
					pRot.Roll = 80;
					pRot.Pitch = 200;
					pRot.Yaw = 75; 
					break;

					case 1:
					pPos.X = 0.12;
					pPos.Y = -0.18;
					pPos.Z = 0.05;
					pRot.Roll = -65;
					pRot.Pitch = 5;
					pRot.Yaw = -100; 
					break;
					
					default:
					pPos.X = 0.07;
					pPos.Y = -0.21;
					pPos.Z = -0.16;
					pRot.Roll = 80;
					pRot.Pitch = 200;
					pRot.Yaw = 75; 
					break;
				}

				fake.CreateAttachment(dummy, , pPos, pRot );

				FactsAdd("ACS_Eye_Of_Loki_Equipped");
			}
		}
	}

	latent function Pouch_Equip()
	{
		var fake, dummy : CEntity; 
		var bIndex : int;
		var bName : name;
		var bPos, pPos : Vector;
		var bRot, pRot : EulerAngles;
		var meshComp : CMeshComponent;
		var option : int;

		if (thePlayer.IsHoldingItemInLHand() || thePlayer.IsCurrentlyUsingItemL())
		{
			Remove_All_Items();
		}
		else
		{
			if (FactsQuerySum("ACS_Torch_Equipped") > 0)
			{
				GetACSTorchPropDestroyAll();

				FactsRemove("ACS_Torch_Equipped");
			}

			if (FactsQuerySum("ACS_Magic_Lamp_Equipped") > 0)
			{
				GetACSMagicLampPropDestroyAll();

				FactsRemove("ACS_Magic_Lamp_Equipped");
			}

			if (FactsQuerySum("ACS_Oil_Lamp_Equipped") > 0)
			{
				GetACSOilLampPropDestroyAll();

				FactsRemove("ACS_Oil_Lamp_Equipped");
			}

			if (FactsQuerySum("ACS_Censer_Equipped") > 0)
			{
				GetACSCenserPropDestroyAll();

				FactsRemove("ACS_Censer_Equipped");
			}

			if (FactsQuerySum("ACS_Navigator_Horn_Equipped") > 0)
			{
				GetACSNavigatorHornPropDestroyAll();

				FactsRemove("ACS_Navigator_Horn_Equipped");
			}

			if (FactsQuerySum("ACS_Lure_Equipped") > 0)
			{
				GetACSLurePropDestroyAll();

				FactsRemove("ACS_Lure_Equipped");
			}

			if (FactsQuerySum("ACS_Bell_Equipped") > 0)
			{
				GetACSBellPropDestroyAll();

				FactsRemove("ACS_Bell_Equipped");
			}

			if (FactsQuerySum("ACS_Potestaquisitor_Equipped") > 0)
			{
				GetACSPotestaquisitorPropDestroyAll();

				FactsRemove("ACS_Potestaquisitor_Equipped");
			}

			if (FactsQuerySum("ACS_Eye_Of_Loki_Equipped") > 0)
			{
				GetACSEyeOfLokiPropDestroyAll();

				FactsRemove("ACS_Eye_Of_Loki_Equipped");
			}

			if (FactsQuerySum("ACS_Oszluzg_Horn_Equipped") > 0)
			{
				GetACSOszluzgHornPropDestroyAll();

				FactsRemove("ACS_Oszluzg_Horn_Equipped");
			}

			if (FactsQuerySum("ACS_Pouch_Equipped") <= 0)
			{
				if (!ACSGetCEntity('ACS_Item_Prop_Anchor'))
				{
					dummy = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
					dummy.AddTag('ACS_Item_Prop_Anchor');
				}
				else 
				{
					dummy = ACSGetCEntity('ACS_Item_Prop_Anchor');
				}
				
				fake = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync(
					
				"dlc\dlc_acs\data\entities\other\pouch_dummy.w2ent"
				
				//"items\cutscenes\pouch_01\pouch_01.w2ent"

				//"items\work\pouch\pouch_bag_01.w2ent"

				//"dlc\bob\data\items\cutscenes\cs_regis_bag\cs_regis_bag.w2ent"

				//"items\work\pack_to_carry\pack_to_carry.w2ent"

				//"environment\decorations\containers\bags\bundle_px.w2ent"

				//"environment\decorations\containers\bags\sack_px.w2ent"

				//"environment\decorations\containers\bags\sack_grain_px.w2ent"

				//"quests\minor_quests\kaer_morhen\quest_files\mq4005_sword\entities\mq4005_bag.w2ent"

				//"gameplay\containers\_container_definitions\_mesh_entities\cont_bag_bundle.w2ent"

				//"gameplay\containers\_container_definitions\_mesh_entities\cont_bag_sack.w2ent"

				//"dlc\bob\data\items\quest_items\q701\q701_item__bruxa_bag.w2ent"
				
				, true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );

				fake.AddTag('ACS_Pouch_Prop');

				meshComp = ( CMeshComponent ) fake.GetComponentByClassName( 'CMeshComponent' );
				meshComp.SetScale( Vector(2.0,2.0,2.0) );
				
				bIndex = GetWitcherPlayer().GetBoneIndex( 'pelvis' );	
				GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( bIndex, bPos, bRot );
				
				dummy.CreateAttachmentAtBoneWS(GetWitcherPlayer(), 'pelvis', bPos, bRot );

				option = ACS_Settings_Main_Int('EHmodVisualSettings','EHmodWearablePocketItemsPositioning', 0);

				switch ( option )
				{
					case 0: 
					pPos.X = 0.06;
					pPos.Y = -0.1;
					pPos.Z = -0.19;
					pRot.Roll = 90;
					pRot.Pitch = 160;
					pRot.Yaw = -95; 
					break;

					case 1:
					pPos.X = 0.11;
					pPos.Y = -0.06;
					pPos.Z = 0.15;
					pRot.Roll = 90;
					pRot.Pitch = 240;
					pRot.Yaw = -90;
					break;
					
					default:
					pPos.X = 0.06;
					pPos.Y = -0.1;
					pPos.Z = -0.19;
					pRot.Roll = 90;
					pRot.Pitch = 160;
					pRot.Yaw = -95; 
					break;
				}

				fake.CreateAttachment(dummy, , pPos, pRot );

				FactsAdd("ACS_Pouch_Equipped");
			}
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	latent function Remove_All_Items()
	{
		if (ACSGetCEntity('ACS_Item_Prop_Anchor'))
		{
			ACSGetCEntity('ACS_Item_Prop_Anchor').Destroy();
		}
		
		if (FactsQuerySum("ACS_Torch_Equipped") > 0)
		{
			GetACSTorchPropDestroyAll();

			FactsRemove("ACS_Torch_Equipped");
		}

		if (FactsQuerySum("ACS_Magic_Lamp_Equipped") > 0)
		{
			GetACSMagicLampPropDestroyAll();

			FactsRemove("ACS_Magic_Lamp_Equipped");
		}

		if (FactsQuerySum("ACS_Oil_Lamp_Equipped") > 0)
		{
			GetACSOilLampPropDestroyAll();

			FactsRemove("ACS_Oil_Lamp_Equipped");
		}

		if (FactsQuerySum("ACS_Censer_Equipped") > 0)
		{
			GetACSCenserPropDestroyAll();

			FactsRemove("ACS_Censer_Equipped");
		}

		if (FactsQuerySum("ACS_Navigator_Horn_Equipped") > 0)
		{
			GetACSNavigatorHornPropDestroyAll();

			FactsRemove("ACS_Navigator_Horn_Equipped");
		}

		if (FactsQuerySum("ACS_Lure_Equipped") > 0)
		{
			GetACSLurePropDestroyAll();

			FactsRemove("ACS_Lure_Equipped");
		}

		if (FactsQuerySum("ACS_Bell_Equipped") > 0)
		{
			GetACSBellPropDestroyAll();

			FactsRemove("ACS_Bell_Equipped");
		}

		if (FactsQuerySum("ACS_Potestaquisitor_Equipped") > 0)
		{
			GetACSPotestaquisitorPropDestroyAll();

			FactsRemove("ACS_Potestaquisitor_Equipped");
		}

		if (FactsQuerySum("ACS_Eye_Of_Loki_Equipped") > 0)
		{
			GetACSEyeOfLokiPropDestroyAll();

			FactsRemove("ACS_Eye_Of_Loki_Equipped");
		}

		if (FactsQuerySum("ACS_Pouch_Equipped") > 0)
		{
			GetACSPouchPropDestroyAll();

			FactsRemove("ACS_Pouch_Equipped");
		}

		if (FactsQuerySum("ACS_Oszluzg_Horn_Equipped") > 0)
		{
			GetACSOszluzgHornPropDestroyAll();

			FactsRemove("ACS_Oszluzg_Horn_Equipped");
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	latent function Wearable_Bombs_Latent()
	{
		if (thePlayer.IsThrowHold()
		|| thePlayer.IsThrowingItem()
		|| thePlayer.IsThrowingItemWithAim()
		)
		{
			Remove_All_Bombs();
		}
		else
		{
			thePlayer.inv.GetItemEquippedOnSlot(EES_Petard1, itemID_petard);

			if (thePlayer.inv.SingletonItemGetAmmo(itemID_petard) > 0)
			{
				petard_name = thePlayer.inv.GetItemName( itemID_petard );

				switch (petard_name)
				{
					case 'Dancing Star 1':
					case 'Dancing Star 2':
					case 'Dancing Star 3':
					Dancing_Star_Equip();
					break;

					case 'Devils Puffball 1':
					case 'Devils Puffball 2':
					case 'Devils Puffball 3':
					Devils_Puffball_Equip();
					break;

					case 'Dwimeritium Bomb 1':
					case 'Dwimeritium Bomb 2':
					case 'Dwimeritium Bomb 3':
					Dwimeritium_Equip();
					break;

					case 'Dragons Dream 1':
					case 'Dragons Dream 2':
					case 'Dragons Dream 3':
					Dragons_Dream_Equip();
					break;

					case 'Grapeshot 1':
					case 'Grapeshot 2':
					case 'Grapeshot 3':
					Grapeshot_Equip();
					break;

					case 'Silver Dust Bomb 1':
					case 'Silver Dust Bomb 2':
					case 'Silver Dust Bomb 3':
					Silver_Dust_Equip();
					break;

					case 'White Frost 1':
					case 'White Frost 2':
					case 'White Frost 3':
					White_Frost_Equip();
					break;

					case 'Samum 1':
					case 'Samum 2':
					case 'Samum 3':
					Samum_Equip();
					break;

					case 'Salt Bomb 1':
					case 'Salt Bomb 2':
					case 'Salt Bomb 3':
					Salt_Bomb_Equip();
					break;

					case 'Glue Bomb 1':
					case 'Glue Bomb 2':
					case 'Glue Bomb 3':
					Glue_Bomb_Equip();
					break;

					case 'Fungi Bomb 1':
					case 'Fungi Bomb 2':
					case 'Fungi Bomb 3':
					Fungi_Bomb_Equip();
					break;

					case 'Shrapnel Bomb 1':
					case 'Shrapnel Bomb 2':
					case 'Shrapnel Bomb 3':
					Shrapnel_Bomb_Equip();
					break;

					case 'Virus Bomb 1':
					case 'Virus Bomb 2':
					case 'Virus Bomb 3':
					Virus_Bomb_Equip();
					break;

					default:
					Remove_All_Bombs();
					break;
				}
			}
			else
			{
				Remove_All_Bombs();
			}
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	latent function Dancing_Star_Equip()
	{
		var fake, dummy : CEntity; 
		var bIndex : int;
		var bName : name;
		var bPos, pPos : Vector;
		var bRot, pRot : EulerAngles;
		var meshComp : CMeshComponent;
		var option : int;

		if (FactsQuerySum("ACS_Devils_Puffball_Equipped") > 0)
		{
			GetACSDevilsPuffballPropDestroyAll();

			FactsRemove("ACS_Devils_Puffball_Equipped");
		}

		if (FactsQuerySum("ACS_Dwimeritium_Bomb_Equipped") > 0)
		{
			GetACSDwimeritiumPropDestroyAll();

			FactsRemove("ACS_Dwimeritium_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Dragons_Dream_Equipped") > 0)
		{
			GetACSDragonsDreamPropDestroyAll();

			FactsRemove("ACS_Dragons_Dream_Equipped");
		}

		if (FactsQuerySum("ACS_Grapeshot_Equipped") > 0)
		{
			GetACSGrapeshotPropDestroyAll();

			FactsRemove("ACS_Grapeshot_Equipped");
		}

		if (FactsQuerySum("ACS_Silver_Dust_Equipped") > 0)
		{
			GetACSSilverDustPropDestroyAll();

			FactsRemove("ACS_Silver_Dust_Equipped");
		}

		if (FactsQuerySum("ACS_White_Frost_Equipped") > 0)
		{
			GetACSWhiteFrostPropDestroyAll();

			FactsRemove("ACS_White_Frost_Equipped");
		}

		if (FactsQuerySum("ACS_Samum_Equipped") > 0)
		{
			GetACSSamumPropDestroyAll();

			FactsRemove("ACS_Samum_Equipped");
		}

		if (FactsQuerySum("ACS_Salt_Bomb_Equipped") > 0)
		{
			GetACSSaltBombPropDestroyAll();

			FactsRemove("ACS_Salt_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Glue_Bomb_Equipped") > 0)
		{
			GetACSGlueBombPropDestroyAll();

			FactsRemove("ACS_Glue_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Fungi_Bomb_Equipped") > 0)
		{
			GetACSFungiBombPropDestroyAll();

			FactsRemove("ACS_Fungi_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Shrapnel_Bomb_Equipped") > 0)
		{
			GetACSShrapnelBombPropDestroyAll();

			FactsRemove("ACS_Shrapnel_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Virus_Bomb_Equipped") > 0)
		{
			GetACSVirusBombPropDestroyAll();

			FactsRemove("ACS_Virus_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Dancing_Star_Equipped") <= 0)
		{
			if (!ACSGetCEntity('ACS_Bomb_Prop_Anchor'))
			{
				dummy = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
				dummy.AddTag('ACS_Bomb_Prop_Anchor');
			}
			else 
			{
				dummy = ACSGetCEntity('ACS_Bomb_Prop_Anchor');
			}

			if (ACS_Is_DLC_Installed('dlc_056_710'))
			{
				fake = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync(

				"items\weapons\projectiles\petards\petard_dancing_star.w2ent"
				
				, true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
			}
			else
			{
				fake = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync(

				"dlc\dlc_acs\data\entities\other\bomb_dummies\petard_dancing_star_bomb_dummy.w2ent"
				
				, true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
			}
			
			fake.AddTag('ACS_Dancing_Star_Prop');
			
			bIndex = GetWitcherPlayer().GetBoneIndex( 'pelvis' );	
			GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( bIndex, bPos, bRot );
			
			dummy.CreateAttachmentAtBoneWS(GetWitcherPlayer(), 'pelvis', bPos, bRot );

			option = ACS_Settings_Main_Int('EHmodVisualSettings','EHmodWearableBombsPositioning', 0);

			switch ( option )
			{
				case 0: //back lower
				pPos.X = 0.13;
				pPos.Y = 0.01;
				pPos.Z = 0.11;
				pRot.Roll = 125;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;

				case 1: //back higher
				pPos.X = 0.13;
				pPos.Y = -0.09;
				pPos.Z = 0.11;
				pRot.Roll = 115;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;
				
				case 2: //front right
				pPos.X = -0.15;
				pPos.Y = -0.07;
				pPos.Z = 0.17;
				pRot.Roll = 130;
				pRot.Pitch = 290;
				pRot.Yaw = -40; 
				break;
				
				case 3: //front left
				pPos.X = -0.18;
				pPos.Y = -0.07;
				pPos.Z = -0.09;
				pRot.Roll = 155;
				pRot.Pitch = 265;
				pRot.Yaw = -20; 
				break;
				
				case 4: //Akatoshka7
				pPos.X = -0.15;
				pPos.Y = -0.18;
				pPos.Z = 0.17;
				pRot.Roll = 125;
				pRot.Pitch = 325;
				pRot.Yaw = -55; 
				break;
				
				default: //back right higher antr
				pPos.X = 0.13;
				pPos.Y = 0.01;
				pPos.Z = 0.11;
				pRot.Roll = 125;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;
			}

			fake.CreateAttachment(dummy, , pPos, pRot );

			FactsAdd("ACS_Dancing_Star_Equipped");
		}
	}

	latent function Devils_Puffball_Equip()
	{
		var fake, dummy : CEntity; 
		var bIndex : int;
		var bName : name;
		var bPos, pPos : Vector;
		var bRot, pRot : EulerAngles;
		var meshComp : CMeshComponent;
		var option : int;

		if (FactsQuerySum("ACS_Dancing_Star_Equipped") > 0)
		{
			GetACSDancingStarPropDestroyAll();

			FactsRemove("ACS_Dancing_Star_Equipped");
		}

		if (FactsQuerySum("ACS_Dwimeritium_Bomb_Equipped") > 0)
		{
			GetACSDwimeritiumPropDestroyAll();

			FactsRemove("ACS_Dwimeritium_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Dragons_Dream_Equipped") > 0)
		{
			GetACSDragonsDreamPropDestroyAll();

			FactsRemove("ACS_Dragons_Dream_Equipped");
		}

		if (FactsQuerySum("ACS_Grapeshot_Equipped") > 0)
		{
			GetACSGrapeshotPropDestroyAll();

			FactsRemove("ACS_Grapeshot_Equipped");
		}

		if (FactsQuerySum("ACS_Silver_Dust_Equipped") > 0)
		{
			GetACSSilverDustPropDestroyAll();

			FactsRemove("ACS_Silver_Dust_Equipped");
		}

		if (FactsQuerySum("ACS_White_Frost_Equipped") > 0)
		{
			GetACSWhiteFrostPropDestroyAll();

			FactsRemove("ACS_White_Frost_Equipped");
		}

		if (FactsQuerySum("ACS_Samum_Equipped") > 0)
		{
			GetACSSamumPropDestroyAll();

			FactsRemove("ACS_Samum_Equipped");
		}

		if (FactsQuerySum("ACS_Salt_Bomb_Equipped") > 0)
		{
			GetACSSaltBombPropDestroyAll();

			FactsRemove("ACS_Salt_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Glue_Bomb_Equipped") > 0)
		{
			GetACSGlueBombPropDestroyAll();

			FactsRemove("ACS_Glue_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Fungi_Bomb_Equipped") > 0)
		{
			GetACSFungiBombPropDestroyAll();

			FactsRemove("ACS_Fungi_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Shrapnel_Bomb_Equipped") > 0)
		{
			GetACSShrapnelBombPropDestroyAll();

			FactsRemove("ACS_Shrapnel_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Virus_Bomb_Equipped") > 0)
		{
			GetACSVirusBombPropDestroyAll();

			FactsRemove("ACS_Virus_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Devils_Puffball_Equipped") <= 0)
		{
			if (!ACSGetCEntity('ACS_Bomb_Prop_Anchor'))
			{
				dummy = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
				dummy.AddTag('ACS_Bomb_Prop_Anchor');
			}
			else 
			{
				dummy = ACSGetCEntity('ACS_Bomb_Prop_Anchor');
			}

			if (ACS_Is_DLC_Installed('dlc_056_710'))
			{
				fake = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync(

				//"dlc\dlc_acs\data\entities\other\petard_grapeshot_bomb_dummy_ard.w2ent"

				"items\weapons\projectiles\petards\petard_devils_puffball.w2ent"
				
				, true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
			}
			else
			{
				fake = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync(

				//"items\weapons\projectiles\petards\petard_grapeshot.w2ent"

				"dlc\dlc_acs\data\entities\other\bomb_dummies\petard_devils_puffball_bomb_dummy.w2ent"
				
				, true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
			}
			
			fake.AddTag('ACS_Devils_Puffball_Prop');
			
			bIndex = GetWitcherPlayer().GetBoneIndex( 'pelvis' );	
			GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( bIndex, bPos, bRot );
			
			dummy.CreateAttachmentAtBoneWS(GetWitcherPlayer(), 'pelvis', bPos, bRot );

			option = ACS_Settings_Main_Int('EHmodVisualSettings','EHmodWearableBombsPositioning', 0);

			switch ( option )
			{
				case 0: //back lower
				pPos.X = 0.13;
				pPos.Y = 0.01;
				pPos.Z = 0.11;
				pRot.Roll = 125;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;

				case 1: //back higher
				pPos.X = 0.13;
				pPos.Y = -0.09;
				pPos.Z = 0.11;
				pRot.Roll = 115;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;
				
				case 2: //front right
				pPos.X = -0.15;
				pPos.Y = -0.07;
				pPos.Z = 0.17;
				pRot.Roll = 130;
				pRot.Pitch = 290;
				pRot.Yaw = -40; 
				break;
				
				case 3: //front left
				pPos.X = -0.18;
				pPos.Y = -0.07;
				pPos.Z = -0.09;
				pRot.Roll = 155;
				pRot.Pitch = 265;
				pRot.Yaw = -20; 
				break;
				
				case 4: //Akatoshka7
				pPos.X = -0.15;
				pPos.Y = -0.18;
				pPos.Z = 0.17;
				pRot.Roll = 125;
				pRot.Pitch = 325;
				pRot.Yaw = -55; 
				break;
				
				default: //back right higher antr
				pPos.X = 0.13;
				pPos.Y = 0.01;
				pPos.Z = 0.11;
				pRot.Roll = 125;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;
			}

			fake.CreateAttachment(dummy, , pPos, pRot );

			FactsAdd("ACS_Devils_Puffball_Equipped");
		}
	}

	latent function Dwimeritium_Equip()
	{
		var fake, dummy : CEntity; 
		var bIndex : int;
		var bName : name;
		var bPos, pPos : Vector;
		var bRot, pRot : EulerAngles;
		var meshComp : CMeshComponent;
		var option : int;

		if (FactsQuerySum("ACS_Dancing_Star_Equipped") > 0)
		{
			GetACSDancingStarPropDestroyAll();

			FactsRemove("ACS_Dancing_Star_Equipped");
		}

		if (FactsQuerySum("ACS_Devils_Puffball_Equipped") > 0)
		{
			GetACSDevilsPuffballPropDestroyAll();

			FactsRemove("ACS_Devils_Puffball_Equipped");
		}

		if (FactsQuerySum("ACS_Dragons_Dream_Equipped") > 0)
		{
			GetACSDragonsDreamPropDestroyAll();

			FactsRemove("ACS_Dragons_Dream_Equipped");
		}

		if (FactsQuerySum("ACS_Grapeshot_Equipped") > 0)
		{
			GetACSGrapeshotPropDestroyAll();

			FactsRemove("ACS_Grapeshot_Equipped");
		}

		if (FactsQuerySum("ACS_Silver_Dust_Equipped") > 0)
		{
			GetACSSilverDustPropDestroyAll();

			FactsRemove("ACS_Silver_Dust_Equipped");
		}

		if (FactsQuerySum("ACS_White_Frost_Equipped") > 0)
		{
			GetACSWhiteFrostPropDestroyAll();

			FactsRemove("ACS_White_Frost_Equipped");
		}

		if (FactsQuerySum("ACS_Samum_Equipped") > 0)
		{
			GetACSSamumPropDestroyAll();

			FactsRemove("ACS_Samum_Equipped");
		}

		if (FactsQuerySum("ACS_Salt_Bomb_Equipped") > 0)
		{
			GetACSSaltBombPropDestroyAll();

			FactsRemove("ACS_Salt_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Glue_Bomb_Equipped") > 0)
		{
			GetACSGlueBombPropDestroyAll();

			FactsRemove("ACS_Glue_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Fungi_Bomb_Equipped") > 0)
		{
			GetACSFungiBombPropDestroyAll();

			FactsRemove("ACS_Fungi_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Shrapnel_Bomb_Equipped") > 0)
		{
			GetACSShrapnelBombPropDestroyAll();

			FactsRemove("ACS_Shrapnel_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Virus_Bomb_Equipped") > 0)
		{
			GetACSVirusBombPropDestroyAll();

			FactsRemove("ACS_Virus_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Dwimeritium_Bomb_Equipped") <= 0)
		{
			if (!ACSGetCEntity('ACS_Bomb_Prop_Anchor'))
			{
				dummy = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
				dummy.AddTag('ACS_Bomb_Prop_Anchor');
			}
			else 
			{
				dummy = ACSGetCEntity('ACS_Bomb_Prop_Anchor');
			}

			if (ACS_Is_DLC_Installed('dlc_056_710'))
			{
				fake = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync(

				//"dlc\dlc_acs\data\entities\other\petard_grapeshot_bomb_dummy_ard.w2ent"

				"items\weapons\projectiles\petards\petard_dimeritium_bomb.w2ent"
				
				, true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
			}
			else
			{
				fake = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync(

				//"items\weapons\projectiles\petards\petard_grapeshot.w2ent"

				"dlc\dlc_acs\data\entities\other\bomb_dummies\petard_dimeritium_bomb_dummy.w2ent"
				
				, true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
			}
			
			fake.AddTag('ACS_Dwimeritium_Prop');
			
			bIndex = GetWitcherPlayer().GetBoneIndex( 'pelvis' );	
			GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( bIndex, bPos, bRot );
			
			dummy.CreateAttachmentAtBoneWS(GetWitcherPlayer(), 'pelvis', bPos, bRot );

			option = ACS_Settings_Main_Int('EHmodVisualSettings','EHmodWearableBombsPositioning', 0);

			switch ( option )
			{
				case 0: //back lower
				pPos.X = 0.13;
				pPos.Y = 0.01;
				pPos.Z = 0.11;
				pRot.Roll = 125;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;

				case 1: //back higher
				pPos.X = 0.13;
				pPos.Y = -0.09;
				pPos.Z = 0.11;
				pRot.Roll = 115;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;
				
				case 2: //front right
				pPos.X = -0.15;
				pPos.Y = -0.07;
				pPos.Z = 0.17;
				pRot.Roll = 130;
				pRot.Pitch = 290;
				pRot.Yaw = -40; 
				break;
				
				case 3: //front left
				pPos.X = -0.18;
				pPos.Y = -0.07;
				pPos.Z = -0.09;
				pRot.Roll = 155;
				pRot.Pitch = 265;
				pRot.Yaw = -20; 
				break;
				
				case 4: //Akatoshka7
				pPos.X = -0.15;
				pPos.Y = -0.18;
				pPos.Z = 0.17;
				pRot.Roll = 125;
				pRot.Pitch = 325;
				pRot.Yaw = -55; 
				break;
				
				default: //back right higher antr
				pPos.X = 0.13;
				pPos.Y = 0.01;
				pPos.Z = 0.11;
				pRot.Roll = 125;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;
			}

			fake.CreateAttachment(dummy, , pPos, pRot );

			FactsAdd("ACS_Dwimeritium_Bomb_Equipped");
		}
	}

	latent function Dragons_Dream_Equip()
	{
		var fake, dummy : CEntity; 
		var bIndex : int;
		var bName : name;
		var bPos, pPos : Vector;
		var bRot, pRot : EulerAngles;
		var meshComp : CMeshComponent;
		var option : int;

		if (FactsQuerySum("ACS_Dancing_Star_Equipped") > 0)
		{
			GetACSDancingStarPropDestroyAll();

			FactsRemove("ACS_Dancing_Star_Equipped");
		}

		if (FactsQuerySum("ACS_Devils_Puffball_Equipped") > 0)
		{
			GetACSDevilsPuffballPropDestroyAll();

			FactsRemove("ACS_Devils_Puffball_Equipped");
		}

		if (FactsQuerySum("ACS_Dwimeritium_Bomb_Equipped") > 0)
		{
			GetACSDwimeritiumPropDestroyAll();

			FactsRemove("ACS_Dwimeritium_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Grapeshot_Equipped") > 0)
		{
			GetACSGrapeshotPropDestroyAll();

			FactsRemove("ACS_Grapeshot_Equipped");
		}

		if (FactsQuerySum("ACS_Silver_Dust_Equipped") > 0)
		{
			GetACSSilverDustPropDestroyAll();

			FactsRemove("ACS_Silver_Dust_Equipped");
		}

		if (FactsQuerySum("ACS_White_Frost_Equipped") > 0)
		{
			GetACSWhiteFrostPropDestroyAll();

			FactsRemove("ACS_White_Frost_Equipped");
		}

		if (FactsQuerySum("ACS_Samum_Equipped") > 0)
		{
			GetACSSamumPropDestroyAll();

			FactsRemove("ACS_Samum_Equipped");
		}

		if (FactsQuerySum("ACS_Salt_Bomb_Equipped") > 0)
		{
			GetACSSaltBombPropDestroyAll();

			FactsRemove("ACS_Salt_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Glue_Bomb_Equipped") > 0)
		{
			GetACSGlueBombPropDestroyAll();

			FactsRemove("ACS_Glue_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Fungi_Bomb_Equipped") > 0)
		{
			GetACSFungiBombPropDestroyAll();

			FactsRemove("ACS_Fungi_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Shrapnel_Bomb_Equipped") > 0)
		{
			GetACSShrapnelBombPropDestroyAll();

			FactsRemove("ACS_Shrapnel_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Virus_Bomb_Equipped") > 0)
		{
			GetACSVirusBombPropDestroyAll();

			FactsRemove("ACS_Virus_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Dragons_Dream_Equipped") <= 0)
		{
			if (!ACSGetCEntity('ACS_Bomb_Prop_Anchor'))
			{
				dummy = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
				dummy.AddTag('ACS_Bomb_Prop_Anchor');
			}
			else 
			{
				dummy = ACSGetCEntity('ACS_Bomb_Prop_Anchor');
			}

			if (ACS_Is_DLC_Installed('dlc_056_710'))
			{
				fake = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync(

				//"dlc\dlc_acs\data\entities\other\petard_grapeshot_bomb_dummy_ard.w2ent"

				"items\weapons\projectiles\petards\petard_dragons_dream.w2ent"
				
				, true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
			}
			else
			{
				fake = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync(

				//"items\weapons\projectiles\petards\petard_grapeshot.w2ent"

				"dlc\dlc_acs\data\entities\other\bomb_dummies\petard_dragons_dream_bomb_dummy.w2ent"
				
				, true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
			}
			
			fake.AddTag('ACS_Dragons_Dream_Prop');
			
			bIndex = GetWitcherPlayer().GetBoneIndex( 'pelvis' );	
			GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( bIndex, bPos, bRot );
			
			dummy.CreateAttachmentAtBoneWS(GetWitcherPlayer(), 'pelvis', bPos, bRot );

			option = ACS_Settings_Main_Int('EHmodVisualSettings','EHmodWearableBombsPositioning', 0);

			switch ( option )
			{
				case 0: //back lower
				pPos.X = 0.13;
				pPos.Y = 0.01;
				pPos.Z = 0.11;
				pRot.Roll = 125;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;

				case 1: //back higher
				pPos.X = 0.13;
				pPos.Y = -0.09;
				pPos.Z = 0.11;
				pRot.Roll = 115;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;
				
				case 2: //front right
				pPos.X = -0.15;
				pPos.Y = -0.07;
				pPos.Z = 0.17;
				pRot.Roll = 130;
				pRot.Pitch = 290;
				pRot.Yaw = -40; 
				break;
				
				case 3: //front left
				pPos.X = -0.18;
				pPos.Y = -0.07;
				pPos.Z = -0.09;
				pRot.Roll = 155;
				pRot.Pitch = 265;
				pRot.Yaw = -20; 
				break;
				
				case 4: //Akatoshka7
				pPos.X = -0.15;
				pPos.Y = -0.18;
				pPos.Z = 0.17;
				pRot.Roll = 125;
				pRot.Pitch = 325;
				pRot.Yaw = -55; 
				break;
				
				default: //back right higher antr
				pPos.X = 0.13;
				pPos.Y = 0.01;
				pPos.Z = 0.11;
				pRot.Roll = 125;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;
			}

			fake.CreateAttachment(dummy, , pPos, pRot );

			FactsAdd("ACS_Dragons_Dream_Equipped");
		}
	}

	latent function Grapeshot_Equip()
	{
		var fake, dummy : CEntity; 
		var bIndex : int;
		var bName : name;
		var bPos, pPos : Vector;
		var bRot, pRot : EulerAngles;
		var meshComp : CMeshComponent;
		var option : int;

		if (FactsQuerySum("ACS_Dancing_Star_Equipped") > 0)
		{
			GetACSDancingStarPropDestroyAll();

			FactsRemove("ACS_Dancing_Star_Equipped");
		}

		if (FactsQuerySum("ACS_Devils_Puffball_Equipped") > 0)
		{
			GetACSDevilsPuffballPropDestroyAll();

			FactsRemove("ACS_Devils_Puffball_Equipped");
		}

		if (FactsQuerySum("ACS_Dwimeritium_Bomb_Equipped") > 0)
		{
			GetACSDwimeritiumPropDestroyAll();

			FactsRemove("ACS_Dwimeritium_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Dragons_Dream_Equipped") > 0)
		{
			GetACSDragonsDreamPropDestroyAll();

			FactsRemove("ACS_Dragons_Dream_Equipped");
		}

		if (FactsQuerySum("ACS_Silver_Dust_Equipped") > 0)
		{
			GetACSSilverDustPropDestroyAll();

			FactsRemove("ACS_Silver_Dust_Equipped");
		}

		if (FactsQuerySum("ACS_White_Frost_Equipped") > 0)
		{
			GetACSWhiteFrostPropDestroyAll();

			FactsRemove("ACS_White_Frost_Equipped");
		}

		if (FactsQuerySum("ACS_Samum_Equipped") > 0)
		{
			GetACSSamumPropDestroyAll();

			FactsRemove("ACS_Samum_Equipped");
		}

		if (FactsQuerySum("ACS_Salt_Bomb_Equipped") > 0)
		{
			GetACSSaltBombPropDestroyAll();

			FactsRemove("ACS_Salt_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Glue_Bomb_Equipped") > 0)
		{
			GetACSGlueBombPropDestroyAll();

			FactsRemove("ACS_Glue_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Fungi_Bomb_Equipped") > 0)
		{
			GetACSFungiBombPropDestroyAll();

			FactsRemove("ACS_Fungi_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Shrapnel_Bomb_Equipped") > 0)
		{
			GetACSShrapnelBombPropDestroyAll();

			FactsRemove("ACS_Shrapnel_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Virus_Bomb_Equipped") > 0)
		{
			GetACSVirusBombPropDestroyAll();

			FactsRemove("ACS_Virus_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Grapeshot_Equipped") <= 0)
		{
			if (!ACSGetCEntity('ACS_Bomb_Prop_Anchor'))
			{
				dummy = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
				dummy.AddTag('ACS_Bomb_Prop_Anchor');
			}
			else 
			{
				dummy = ACSGetCEntity('ACS_Bomb_Prop_Anchor');
			}
			
			if (ACS_Is_DLC_Installed('dlc_056_710'))
			{
				fake = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync(

				//"dlc\dlc_acs\data\entities\other\petard_grapeshot_bomb_dummy_ard.w2ent"

				"dlc\dlc_acs\data\entities\other\bomb_dummies\petard_grapeshot_bomb_dummy_ard.w2ent"
				
				, true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
			}
			else
			{
				fake = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync(

				//"items\weapons\projectiles\petards\petard_grapeshot.w2ent"

				"dlc\dlc_acs\data\entities\other\bomb_dummies\petard_grapeshot_bomb_dummy.w2ent"
				
				, true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
			}
			
			fake.AddTag('ACS_Grapeshot_Prop');
			
			bIndex = GetWitcherPlayer().GetBoneIndex( 'pelvis' );	
			GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( bIndex, bPos, bRot );
			
			dummy.CreateAttachmentAtBoneWS(GetWitcherPlayer(), 'pelvis', bPos, bRot );

			option = ACS_Settings_Main_Int('EHmodVisualSettings','EHmodWearableBombsPositioning', 0);

			switch ( option )
			{
				case 0: //back lower
				pPos.X = 0.13;
				pPos.Y = 0.01;
				pPos.Z = 0.11;
				pRot.Roll = 125;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;

				case 1: //back higher
				pPos.X = 0.13;
				pPos.Y = -0.09;
				pPos.Z = 0.11;
				pRot.Roll = 115;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;
				
				case 2: //front right
				pPos.X = -0.15;
				pPos.Y = -0.07;
				pPos.Z = 0.17;
				pRot.Roll = 130;
				pRot.Pitch = 290;
				pRot.Yaw = -40; 
				break;
				
				case 3: //front left
				pPos.X = -0.18;
				pPos.Y = -0.07;
				pPos.Z = -0.09;
				pRot.Roll = 155;
				pRot.Pitch = 265;
				pRot.Yaw = -20; 
				break;
				
				case 4: //Akatoshka7
				pPos.X = -0.15;
				pPos.Y = -0.18;
				pPos.Z = 0.17;
				pRot.Roll = 125;
				pRot.Pitch = 325;
				pRot.Yaw = -55; 
				break;
				
				default: //back right higher antr
				pPos.X = 0.13;
				pPos.Y = 0.01;
				pPos.Z = 0.11;
				pRot.Roll = 125;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;
			}

			fake.CreateAttachment(dummy, , pPos, pRot );

			FactsAdd("ACS_Grapeshot_Equipped");
		}
	}

	latent function Silver_Dust_Equip()
	{
		var fake, dummy : CEntity; 
		var bIndex : int;
		var bName : name;
		var bPos, pPos : Vector;
		var bRot, pRot : EulerAngles;
		var meshComp : CMeshComponent;
		var option : int;

		if (FactsQuerySum("ACS_Dancing_Star_Equipped") > 0)
		{
			GetACSDancingStarPropDestroyAll();

			FactsRemove("ACS_Dancing_Star_Equipped");
		}

		if (FactsQuerySum("ACS_Devils_Puffball_Equipped") > 0)
		{
			GetACSDevilsPuffballPropDestroyAll();

			FactsRemove("ACS_Devils_Puffball_Equipped");
		}

		if (FactsQuerySum("ACS_Dwimeritium_Bomb_Equipped") > 0)
		{
			GetACSDwimeritiumPropDestroyAll();

			FactsRemove("ACS_Dwimeritium_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Dragons_Dream_Equipped") > 0)
		{
			GetACSDragonsDreamPropDestroyAll();

			FactsRemove("ACS_Dragons_Dream_Equipped");
		}

		if (FactsQuerySum("ACS_Grapeshot_Equipped") > 0)
		{
			GetACSGrapeshotPropDestroyAll();

			FactsRemove("ACS_Grapeshot_Equipped");
		}

		if (FactsQuerySum("ACS_White_Frost_Equipped") > 0)
		{
			GetACSWhiteFrostPropDestroyAll();

			FactsRemove("ACS_White_Frost_Equipped");
		}

		if (FactsQuerySum("ACS_Samum_Equipped") > 0)
		{
			GetACSSamumPropDestroyAll();

			FactsRemove("ACS_Samum_Equipped");
		}

		if (FactsQuerySum("ACS_Salt_Bomb_Equipped") > 0)
		{
			GetACSSaltBombPropDestroyAll();

			FactsRemove("ACS_Salt_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Glue_Bomb_Equipped") > 0)
		{
			GetACSGlueBombPropDestroyAll();

			FactsRemove("ACS_Glue_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Fungi_Bomb_Equipped") > 0)
		{
			GetACSFungiBombPropDestroyAll();

			FactsRemove("ACS_Fungi_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Shrapnel_Bomb_Equipped") > 0)
		{
			GetACSShrapnelBombPropDestroyAll();

			FactsRemove("ACS_Shrapnel_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Virus_Bomb_Equipped") > 0)
		{
			GetACSVirusBombPropDestroyAll();

			FactsRemove("ACS_Virus_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Silver_Dust_Equipped") <= 0)
		{
			if (!ACSGetCEntity('ACS_Bomb_Prop_Anchor'))
			{
				dummy = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
				dummy.AddTag('ACS_Bomb_Prop_Anchor');
			}
			else 
			{
				dummy = ACSGetCEntity('ACS_Bomb_Prop_Anchor');
			}

			if (ACS_Is_DLC_Installed('dlc_056_710'))
			{
				fake = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync(

				//"dlc\dlc_acs\data\entities\other\petard_grapeshot_bomb_dummy_ard.w2ent"

				"items\weapons\projectiles\petards\petard_silver_dust_bomb.w2ent"
				
				, true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
			}
			else
			{
				fake = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync(

				//"items\weapons\projectiles\petards\petard_grapeshot.w2ent"

				"dlc\dlc_acs\data\entities\other\bomb_dummies\petard_silver_dust_bomb_dummy.w2ent"
				
				, true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
			}
			
			fake.AddTag('ACS_Silver_Dust_Prop');
			
			bIndex = GetWitcherPlayer().GetBoneIndex( 'pelvis' );	
			GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( bIndex, bPos, bRot );
			
			dummy.CreateAttachmentAtBoneWS(GetWitcherPlayer(), 'pelvis', bPos, bRot );

			option = ACS_Settings_Main_Int('EHmodVisualSettings','EHmodWearableBombsPositioning', 0);

			switch ( option )
			{
				case 0: //back lower
				pPos.X = 0.13;
				pPos.Y = 0.01;
				pPos.Z = 0.11;
				pRot.Roll = 125;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;

				case 1: //back higher
				pPos.X = 0.13;
				pPos.Y = -0.09;
				pPos.Z = 0.11;
				pRot.Roll = 115;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;
				
				case 2: //front right
				pPos.X = -0.15;
				pPos.Y = -0.07;
				pPos.Z = 0.17;
				pRot.Roll = 130;
				pRot.Pitch = 290;
				pRot.Yaw = -40; 
				break;
				
				case 3: //front left
				pPos.X = -0.18;
				pPos.Y = -0.07;
				pPos.Z = -0.09;
				pRot.Roll = 155;
				pRot.Pitch = 265;
				pRot.Yaw = -20; 
				break;
				
				case 4: //Akatoshka7
				pPos.X = -0.15;
				pPos.Y = -0.18;
				pPos.Z = 0.17;
				pRot.Roll = 125;
				pRot.Pitch = 325;
				pRot.Yaw = -55; 
				break;
				
				default: //back right higher antr
				pPos.X = 0.13;
				pPos.Y = 0.01;
				pPos.Z = 0.11;
				pRot.Roll = 125;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;
			}

			fake.CreateAttachment(dummy, , pPos, pRot );

			FactsAdd("ACS_Silver_Dust_Equipped");
		}
	}

	latent function White_Frost_Equip()
	{
		var fake, dummy : CEntity; 
		var bIndex : int;
		var bName : name;
		var bPos, pPos : Vector;
		var bRot, pRot : EulerAngles;
		var meshComp : CMeshComponent;
		var option : int;

		if (FactsQuerySum("ACS_Dancing_Star_Equipped") > 0)
		{
			GetACSDancingStarPropDestroyAll();

			FactsRemove("ACS_Dancing_Star_Equipped");
		}

		if (FactsQuerySum("ACS_Devils_Puffball_Equipped") > 0)
		{
			GetACSDevilsPuffballPropDestroyAll();

			FactsRemove("ACS_Devils_Puffball_Equipped");
		}

		if (FactsQuerySum("ACS_Dwimeritium_Bomb_Equipped") > 0)
		{
			GetACSDwimeritiumPropDestroyAll();

			FactsRemove("ACS_Dwimeritium_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Dragons_Dream_Equipped") > 0)
		{
			GetACSDragonsDreamPropDestroyAll();

			FactsRemove("ACS_Dragons_Dream_Equipped");
		}

		if (FactsQuerySum("ACS_Grapeshot_Equipped") > 0)
		{
			GetACSGrapeshotPropDestroyAll();

			FactsRemove("ACS_Grapeshot_Equipped");
		}

		if (FactsQuerySum("ACS_Silver_Dust_Equipped") > 0)
		{
			GetACSSilverDustPropDestroyAll();

			FactsRemove("ACS_Silver_Dust_Equipped");
		}

		if (FactsQuerySum("ACS_Samum_Equipped") > 0)
		{
			GetACSSamumPropDestroyAll();

			FactsRemove("ACS_Samum_Equipped");
		}

		if (FactsQuerySum("ACS_Salt_Bomb_Equipped") > 0)
		{
			GetACSSaltBombPropDestroyAll();

			FactsRemove("ACS_Salt_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Glue_Bomb_Equipped") > 0)
		{
			GetACSGlueBombPropDestroyAll();

			FactsRemove("ACS_Glue_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Fungi_Bomb_Equipped") > 0)
		{
			GetACSFungiBombPropDestroyAll();

			FactsRemove("ACS_Fungi_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Shrapnel_Bomb_Equipped") > 0)
		{
			GetACSShrapnelBombPropDestroyAll();

			FactsRemove("ACS_Shrapnel_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Virus_Bomb_Equipped") > 0)
		{
			GetACSVirusBombPropDestroyAll();

			FactsRemove("ACS_Virus_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_White_Frost_Equipped") <= 0)
		{
			if (!ACSGetCEntity('ACS_Bomb_Prop_Anchor'))
			{
				dummy = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
				dummy.AddTag('ACS_Bomb_Prop_Anchor');
			}
			else 
			{
				dummy = ACSGetCEntity('ACS_Bomb_Prop_Anchor');
			}

			if (ACS_Is_DLC_Installed('dlc_056_710'))
			{
				fake = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync(

				//"dlc\dlc_acs\data\entities\other\petard_grapeshot_bomb_dummy_ard.w2ent"

				"items\weapons\projectiles\petards\petard_white_frost.w2ent"
				
				, true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
			}
			else
			{
				fake = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync(

				//"items\weapons\projectiles\petards\petard_grapeshot.w2ent"

				"dlc\dlc_acs\data\entities\other\bomb_dummies\petard_white_frost_bomb_dummy.w2ent"
				
				, true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
			}
			
			fake.AddTag('ACS_White_Frost_Prop');
			
			bIndex = GetWitcherPlayer().GetBoneIndex( 'pelvis' );	
			GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( bIndex, bPos, bRot );
			
			dummy.CreateAttachmentAtBoneWS(GetWitcherPlayer(), 'pelvis', bPos, bRot );

			option = ACS_Settings_Main_Int('EHmodVisualSettings','EHmodWearableBombsPositioning', 0);

			switch ( option )
			{
				case 0: //back lower
				pPos.X = 0.13;
				pPos.Y = 0.01;
				pPos.Z = 0.11;
				pRot.Roll = 125;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;

				case 1: //back higher
				pPos.X = 0.13;
				pPos.Y = -0.09;
				pPos.Z = 0.11;
				pRot.Roll = 115;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;
				
				case 2: //front right
				pPos.X = -0.15;
				pPos.Y = -0.07;
				pPos.Z = 0.17;
				pRot.Roll = 130;
				pRot.Pitch = 290;
				pRot.Yaw = -40; 
				break;
				
				case 3: //front left
				pPos.X = -0.18;
				pPos.Y = -0.07;
				pPos.Z = -0.09;
				pRot.Roll = 155;
				pRot.Pitch = 265;
				pRot.Yaw = -20; 
				break;
				
				case 4: //Akatoshka7
				pPos.X = -0.15;
				pPos.Y = -0.18;
				pPos.Z = 0.17;
				pRot.Roll = 125;
				pRot.Pitch = 325;
				pRot.Yaw = -55; 
				break;
				
				default: //back right higher antr
				pPos.X = 0.13;
				pPos.Y = 0.01;
				pPos.Z = 0.11;
				pRot.Roll = 125;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;
			}

			fake.CreateAttachment(dummy, , pPos, pRot );

			FactsAdd("ACS_White_Frost_Equipped");
		}
	}

	latent function Samum_Equip()
	{
		var fake, dummy : CEntity; 
		var bIndex : int;
		var bName : name;
		var bPos, pPos : Vector;
		var bRot, pRot : EulerAngles;
		var meshComp : CMeshComponent;
		var option : int;

		if (FactsQuerySum("ACS_Dancing_Star_Equipped") > 0)
		{
			GetACSDancingStarPropDestroyAll();

			FactsRemove("ACS_Dancing_Star_Equipped");
		}

		if (FactsQuerySum("ACS_Devils_Puffball_Equipped") > 0)
		{
			GetACSDevilsPuffballPropDestroyAll();

			FactsRemove("ACS_Devils_Puffball_Equipped");
		}

		if (FactsQuerySum("ACS_Dwimeritium_Bomb_Equipped") > 0)
		{
			GetACSDwimeritiumPropDestroyAll();

			FactsRemove("ACS_Dwimeritium_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Dragons_Dream_Equipped") > 0)
		{
			GetACSDragonsDreamPropDestroyAll();

			FactsRemove("ACS_Dragons_Dream_Equipped");
		}

		if (FactsQuerySum("ACS_Grapeshot_Equipped") > 0)
		{
			GetACSGrapeshotPropDestroyAll();

			FactsRemove("ACS_Grapeshot_Equipped");
		}

		if (FactsQuerySum("ACS_Silver_Dust_Equipped") > 0)
		{
			GetACSSilverDustPropDestroyAll();

			FactsRemove("ACS_Silver_Dust_Equipped");
		}

		if (FactsQuerySum("ACS_White_Frost_Equipped") > 0)
		{
			GetACSWhiteFrostPropDestroyAll();

			FactsRemove("ACS_White_Frost_Equipped");
		}

		if (FactsQuerySum("ACS_Salt_Bomb_Equipped") > 0)
		{
			GetACSSaltBombPropDestroyAll();

			FactsRemove("ACS_Salt_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Glue_Bomb_Equipped") > 0)
		{
			GetACSGlueBombPropDestroyAll();

			FactsRemove("ACS_Glue_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Fungi_Bomb_Equipped") > 0)
		{
			GetACSFungiBombPropDestroyAll();

			FactsRemove("ACS_Fungi_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Shrapnel_Bomb_Equipped") > 0)
		{
			GetACSShrapnelBombPropDestroyAll();

			FactsRemove("ACS_Shrapnel_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Virus_Bomb_Equipped") > 0)
		{
			GetACSVirusBombPropDestroyAll();

			FactsRemove("ACS_Virus_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Samum_Equipped") <= 0)
		{
			if (!ACSGetCEntity('ACS_Bomb_Prop_Anchor'))
			{
				dummy = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
				dummy.AddTag('ACS_Bomb_Prop_Anchor');
			}
			else 
			{
				dummy = ACSGetCEntity('ACS_Bomb_Prop_Anchor');
			}

			if (ACS_Is_DLC_Installed('dlc_056_710'))
			{
				fake = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync(

				//"dlc\dlc_acs\data\entities\other\petard_grapeshot_bomb_dummy_ard.w2ent"

				"items\weapons\projectiles\petards\petard_samum.w2ent"
				
				, true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
			}
			else
			{
				fake = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync(

				//"items\weapons\projectiles\petards\petard_grapeshot.w2ent"

				"dlc\dlc_acs\data\entities\other\bomb_dummies\petard_samum_bomb_dummy.w2ent"
				
				, true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
			}
			
			fake.AddTag('ACS_Samum_Prop');
			
			bIndex = GetWitcherPlayer().GetBoneIndex( 'pelvis' );	
			GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( bIndex, bPos, bRot );
			
			dummy.CreateAttachmentAtBoneWS(GetWitcherPlayer(), 'pelvis', bPos, bRot );

			option = ACS_Settings_Main_Int('EHmodVisualSettings','EHmodWearableBombsPositioning', 0);

			switch ( option )
			{
				case 0: //back lower
				pPos.X = 0.13;
				pPos.Y = 0.01;
				pPos.Z = 0.11;
				pRot.Roll = 125;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;

				case 1: //back higher
				pPos.X = 0.13;
				pPos.Y = -0.09;
				pPos.Z = 0.11;
				pRot.Roll = 115;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;
				
				case 2: //front right
				pPos.X = -0.15;
				pPos.Y = -0.07;
				pPos.Z = 0.17;
				pRot.Roll = 130;
				pRot.Pitch = 290;
				pRot.Yaw = -40; 
				break;
				
				case 3: //front left
				pPos.X = -0.18;
				pPos.Y = -0.07;
				pPos.Z = -0.09;
				pRot.Roll = 155;
				pRot.Pitch = 265;
				pRot.Yaw = -20; 
				break;
				
				case 4: //Akatoshka7
				pPos.X = -0.15;
				pPos.Y = -0.18;
				pPos.Z = 0.17;
				pRot.Roll = 125;
				pRot.Pitch = 325;
				pRot.Yaw = -55; 
				break;
				
				default: //back right higher antr
				pPos.X = 0.13;
				pPos.Y = 0.01;
				pPos.Z = 0.11;
				pRot.Roll = 125;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;
			}

			fake.CreateAttachment(dummy, , pPos, pRot );

			FactsAdd("ACS_Samum_Equipped");
		}
	}

	latent function Salt_Bomb_Equip()
	{
		var fake, dummy : CEntity; 
		var bIndex : int;
		var bName : name;
		var bPos, pPos : Vector;
		var bRot, pRot : EulerAngles;
		var meshComp : CMeshComponent;
		var option : int;

		if (FactsQuerySum("ACS_Dancing_Star_Equipped") > 0)
		{
			GetACSDancingStarPropDestroyAll();

			FactsRemove("ACS_Dancing_Star_Equipped");
		}

		if (FactsQuerySum("ACS_Devils_Puffball_Equipped") > 0)
		{
			GetACSDevilsPuffballPropDestroyAll();

			FactsRemove("ACS_Devils_Puffball_Equipped");
		}

		if (FactsQuerySum("ACS_Dwimeritium_Bomb_Equipped") > 0)
		{
			GetACSDwimeritiumPropDestroyAll();

			FactsRemove("ACS_Dwimeritium_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Dragons_Dream_Equipped") > 0)
		{
			GetACSDragonsDreamPropDestroyAll();

			FactsRemove("ACS_Dragons_Dream_Equipped");
		}

		if (FactsQuerySum("ACS_Grapeshot_Equipped") > 0)
		{
			GetACSGrapeshotPropDestroyAll();

			FactsRemove("ACS_Grapeshot_Equipped");
		}

		if (FactsQuerySum("ACS_Silver_Dust_Equipped") > 0)
		{
			GetACSSilverDustPropDestroyAll();

			FactsRemove("ACS_Silver_Dust_Equipped");
		}

		if (FactsQuerySum("ACS_White_Frost_Equipped") > 0)
		{
			GetACSWhiteFrostPropDestroyAll();

			FactsRemove("ACS_White_Frost_Equipped");
		}

		if (FactsQuerySum("ACS_Samum_Equipped") > 0)
		{
			GetACSSamumPropDestroyAll();

			FactsRemove("ACS_Samum_Equipped");
		}

		if (FactsQuerySum("ACS_Glue_Bomb_Equipped") > 0)
		{
			GetACSGlueBombPropDestroyAll();

			FactsRemove("ACS_Glue_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Fungi_Bomb_Equipped") > 0)
		{
			GetACSFungiBombPropDestroyAll();

			FactsRemove("ACS_Fungi_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Shrapnel_Bomb_Equipped") > 0)
		{
			GetACSShrapnelBombPropDestroyAll();

			FactsRemove("ACS_Shrapnel_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Virus_Bomb_Equipped") > 0)
		{
			GetACSVirusBombPropDestroyAll();

			FactsRemove("ACS_Virus_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Salt_Bomb_Equipped") <= 0)
		{
			if (!ACSGetCEntity('ACS_Bomb_Prop_Anchor'))
			{
				dummy = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
				dummy.AddTag('ACS_Bomb_Prop_Anchor');
			}
			else 
			{
				dummy = ACSGetCEntity('ACS_Bomb_Prop_Anchor');
			}
			
			fake = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("dlc\dlcardbombs\data\items\weapons\projectiles\petards\bomb_salt.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
			fake.AddTag('ACS_Salt_Bomb_Prop');
			
			bIndex = GetWitcherPlayer().GetBoneIndex( 'pelvis' );	
			GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( bIndex, bPos, bRot );
			
			dummy.CreateAttachmentAtBoneWS(GetWitcherPlayer(), 'pelvis', bPos, bRot );

			option = ACS_Settings_Main_Int('EHmodVisualSettings','EHmodWearableBombsPositioning', 0);

			switch ( option )
			{
				case 0: //back lower
				pPos.X = 0.13;
				pPos.Y = 0.01;
				pPos.Z = 0.11;
				pRot.Roll = 125;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;

				case 1: //back higher
				pPos.X = 0.13;
				pPos.Y = -0.09;
				pPos.Z = 0.11;
				pRot.Roll = 115;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;
				
				case 2: //front right
				pPos.X = -0.15;
				pPos.Y = -0.07;
				pPos.Z = 0.17;
				pRot.Roll = 130;
				pRot.Pitch = 290;
				pRot.Yaw = -40; 
				break;
				
				case 3: //front left
				pPos.X = -0.18;
				pPos.Y = -0.07;
				pPos.Z = -0.09;
				pRot.Roll = 155;
				pRot.Pitch = 265;
				pRot.Yaw = -20; 
				break;
				
				case 4: //Akatoshka7
				pPos.X = -0.15;
				pPos.Y = -0.18;
				pPos.Z = 0.17;
				pRot.Roll = 125;
				pRot.Pitch = 325;
				pRot.Yaw = -55; 
				break;
				
				default: //back right higher antr
				pPos.X = 0.13;
				pPos.Y = 0.01;
				pPos.Z = 0.11;
				pRot.Roll = 125;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;
			}

			fake.CreateAttachment(dummy, , pPos, pRot );

			FactsAdd("ACS_Salt_Bomb_Equipped");
		}
	}

	latent function Glue_Bomb_Equip()
	{
		var fake, dummy : CEntity; 
		var bIndex : int;
		var bName : name;
		var bPos, pPos : Vector;
		var bRot, pRot : EulerAngles;
		var meshComp : CMeshComponent;
		var option : int;

		if (FactsQuerySum("ACS_Dancing_Star_Equipped") > 0)
		{
			GetACSDancingStarPropDestroyAll();

			FactsRemove("ACS_Dancing_Star_Equipped");
		}

		if (FactsQuerySum("ACS_Devils_Puffball_Equipped") > 0)
		{
			GetACSDevilsPuffballPropDestroyAll();

			FactsRemove("ACS_Devils_Puffball_Equipped");
		}

		if (FactsQuerySum("ACS_Dwimeritium_Bomb_Equipped") > 0)
		{
			GetACSDwimeritiumPropDestroyAll();

			FactsRemove("ACS_Dwimeritium_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Dragons_Dream_Equipped") > 0)
		{
			GetACSDragonsDreamPropDestroyAll();

			FactsRemove("ACS_Dragons_Dream_Equipped");
		}

		if (FactsQuerySum("ACS_Grapeshot_Equipped") > 0)
		{
			GetACSGrapeshotPropDestroyAll();

			FactsRemove("ACS_Grapeshot_Equipped");
		}

		if (FactsQuerySum("ACS_Silver_Dust_Equipped") > 0)
		{
			GetACSSilverDustPropDestroyAll();

			FactsRemove("ACS_Silver_Dust_Equipped");
		}

		if (FactsQuerySum("ACS_White_Frost_Equipped") > 0)
		{
			GetACSWhiteFrostPropDestroyAll();

			FactsRemove("ACS_White_Frost_Equipped");
		}

		if (FactsQuerySum("ACS_Samum_Equipped") > 0)
		{
			GetACSSamumPropDestroyAll();

			FactsRemove("ACS_Samum_Equipped");
		}

		if (FactsQuerySum("ACS_Salt_Bomb_Equipped") > 0)
		{
			GetACSSaltBombPropDestroyAll();

			FactsRemove("ACS_Salt_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Fungi_Bomb_Equipped") > 0)
		{
			GetACSFungiBombPropDestroyAll();

			FactsRemove("ACS_Fungi_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Shrapnel_Bomb_Equipped") > 0)
		{
			GetACSShrapnelBombPropDestroyAll();

			FactsRemove("ACS_Shrapnel_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Virus_Bomb_Equipped") > 0)
		{
			GetACSVirusBombPropDestroyAll();

			FactsRemove("ACS_Virus_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Glue_Bomb_Equipped") <= 0)
		{
			if (!ACSGetCEntity('ACS_Bomb_Prop_Anchor'))
			{
				dummy = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
				dummy.AddTag('ACS_Bomb_Prop_Anchor');
			}
			else 
			{
				dummy = ACSGetCEntity('ACS_Bomb_Prop_Anchor');
			}
			
			fake = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("dlc\dlcardbombs\data\items\weapons\projectiles\petards\bomb_glue.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
			fake.AddTag('ACS_Glue_Bomb_Prop');
			
			bIndex = GetWitcherPlayer().GetBoneIndex( 'pelvis' );	
			GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( bIndex, bPos, bRot );
			
			dummy.CreateAttachmentAtBoneWS(GetWitcherPlayer(), 'pelvis', bPos, bRot );

			option = ACS_Settings_Main_Int('EHmodVisualSettings','EHmodWearableBombsPositioning', 0);

			switch ( option )
			{
				case 0: //back lower
				pPos.X = 0.13;
				pPos.Y = 0.01;
				pPos.Z = 0.11;
				pRot.Roll = 125;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;

				case 1: //back higher
				pPos.X = 0.13;
				pPos.Y = -0.09;
				pPos.Z = 0.11;
				pRot.Roll = 115;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;
				
				case 2: //front right
				pPos.X = -0.15;
				pPos.Y = -0.07;
				pPos.Z = 0.17;
				pRot.Roll = 130;
				pRot.Pitch = 290;
				pRot.Yaw = -40; 
				break;
				
				case 3: //front left
				pPos.X = -0.18;
				pPos.Y = -0.07;
				pPos.Z = -0.09;
				pRot.Roll = 155;
				pRot.Pitch = 265;
				pRot.Yaw = -20; 
				break;
				
				case 4: //Akatoshka7
				pPos.X = -0.15;
				pPos.Y = -0.18;
				pPos.Z = 0.17;
				pRot.Roll = 125;
				pRot.Pitch = 325;
				pRot.Yaw = -55; 
				break;
				
				default: //back right higher antr
				pPos.X = 0.13;
				pPos.Y = 0.01;
				pPos.Z = 0.11;
				pRot.Roll = 125;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;
			}

			fake.CreateAttachment(dummy, , pPos, pRot );

			FactsAdd("ACS_Glue_Bomb_Equipped");
		}
	}

	latent function Fungi_Bomb_Equip()
	{
		var fake, dummy : CEntity; 
		var bIndex : int;
		var bName : name;
		var bPos, pPos : Vector;
		var bRot, pRot : EulerAngles;
		var meshComp : CMeshComponent;
		var option : int;

		if (FactsQuerySum("ACS_Dancing_Star_Equipped") > 0)
		{
			GetACSDancingStarPropDestroyAll();

			FactsRemove("ACS_Dancing_Star_Equipped");
		}

		if (FactsQuerySum("ACS_Devils_Puffball_Equipped") > 0)
		{
			GetACSDevilsPuffballPropDestroyAll();

			FactsRemove("ACS_Devils_Puffball_Equipped");
		}

		if (FactsQuerySum("ACS_Dwimeritium_Bomb_Equipped") > 0)
		{
			GetACSDwimeritiumPropDestroyAll();

			FactsRemove("ACS_Dwimeritium_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Dragons_Dream_Equipped") > 0)
		{
			GetACSDragonsDreamPropDestroyAll();

			FactsRemove("ACS_Dragons_Dream_Equipped");
		}

		if (FactsQuerySum("ACS_Grapeshot_Equipped") > 0)
		{
			GetACSGrapeshotPropDestroyAll();

			FactsRemove("ACS_Grapeshot_Equipped");
		}

		if (FactsQuerySum("ACS_Silver_Dust_Equipped") > 0)
		{
			GetACSSilverDustPropDestroyAll();

			FactsRemove("ACS_Silver_Dust_Equipped");
		}

		if (FactsQuerySum("ACS_White_Frost_Equipped") > 0)
		{
			GetACSWhiteFrostPropDestroyAll();

			FactsRemove("ACS_White_Frost_Equipped");
		}

		if (FactsQuerySum("ACS_Samum_Equipped") > 0)
		{
			GetACSSamumPropDestroyAll();

			FactsRemove("ACS_Samum_Equipped");
		}

		if (FactsQuerySum("ACS_Salt_Bomb_Equipped") > 0)
		{
			GetACSSaltBombPropDestroyAll();

			FactsRemove("ACS_Salt_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Glue_Bomb_Equipped") > 0)
		{
			GetACSGlueBombPropDestroyAll();

			FactsRemove("ACS_Glue_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Shrapnel_Bomb_Equipped") > 0)
		{
			GetACSShrapnelBombPropDestroyAll();

			FactsRemove("ACS_Shrapnel_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Virus_Bomb_Equipped") > 0)
		{
			GetACSVirusBombPropDestroyAll();

			FactsRemove("ACS_Virus_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Fungi_Bomb_Equipped") <= 0)
		{
			if (!ACSGetCEntity('ACS_Bomb_Prop_Anchor'))
			{
				dummy = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
				dummy.AddTag('ACS_Bomb_Prop_Anchor');
			}
			else 
			{
				dummy = ACSGetCEntity('ACS_Bomb_Prop_Anchor');
			}
			
			fake = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("dlc\dlcardbombs\data\items\weapons\projectiles\petards\bomb_fungi.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
			fake.AddTag('ACS_Fungi_Bomb_Prop');
			
			bIndex = GetWitcherPlayer().GetBoneIndex( 'pelvis' );	
			GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( bIndex, bPos, bRot );
			
			dummy.CreateAttachmentAtBoneWS(GetWitcherPlayer(), 'pelvis', bPos, bRot );

			option = ACS_Settings_Main_Int('EHmodVisualSettings','EHmodWearableBombsPositioning', 0);

			switch ( option )
			{
				case 0: //back lower
				pPos.X = 0.13;
				pPos.Y = 0.01;
				pPos.Z = 0.11;
				pRot.Roll = 125;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;

				case 1: //back higher
				pPos.X = 0.13;
				pPos.Y = -0.09;
				pPos.Z = 0.11;
				pRot.Roll = 115;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;
				
				case 2: //front right
				pPos.X = -0.15;
				pPos.Y = -0.07;
				pPos.Z = 0.17;
				pRot.Roll = 130;
				pRot.Pitch = 290;
				pRot.Yaw = -40; 
				break;
				
				case 3: //front left
				pPos.X = -0.18;
				pPos.Y = -0.07;
				pPos.Z = -0.09;
				pRot.Roll = 155;
				pRot.Pitch = 265;
				pRot.Yaw = -20; 
				break;
				
				case 4: //Akatoshka7
				pPos.X = -0.15;
				pPos.Y = -0.18;
				pPos.Z = 0.17;
				pRot.Roll = 125;
				pRot.Pitch = 325;
				pRot.Yaw = -55; 
				break;
				
				default: //back right higher antr
				pPos.X = 0.13;
				pPos.Y = 0.01;
				pPos.Z = 0.11;
				pRot.Roll = 125;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;
			}

			fake.CreateAttachment(dummy, , pPos, pRot );

			FactsAdd("ACS_Fungi_Bomb_Equipped");
		}
	}

	latent function Shrapnel_Bomb_Equip()
	{
		var fake, dummy : CEntity; 
		var bIndex : int;
		var bName : name;
		var bPos, pPos : Vector;
		var bRot, pRot : EulerAngles;
		var meshComp : CMeshComponent;
		var option : int;

		if (FactsQuerySum("ACS_Dancing_Star_Equipped") > 0)
		{
			GetACSDancingStarPropDestroyAll();

			FactsRemove("ACS_Dancing_Star_Equipped");
		}

		if (FactsQuerySum("ACS_Devils_Puffball_Equipped") > 0)
		{
			GetACSDevilsPuffballPropDestroyAll();

			FactsRemove("ACS_Devils_Puffball_Equipped");
		}

		if (FactsQuerySum("ACS_Dwimeritium_Bomb_Equipped") > 0)
		{
			GetACSDwimeritiumPropDestroyAll();

			FactsRemove("ACS_Dwimeritium_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Dragons_Dream_Equipped") > 0)
		{
			GetACSDragonsDreamPropDestroyAll();

			FactsRemove("ACS_Dragons_Dream_Equipped");
		}

		if (FactsQuerySum("ACS_Grapeshot_Equipped") > 0)
		{
			GetACSGrapeshotPropDestroyAll();

			FactsRemove("ACS_Grapeshot_Equipped");
		}

		if (FactsQuerySum("ACS_Silver_Dust_Equipped") > 0)
		{
			GetACSSilverDustPropDestroyAll();

			FactsRemove("ACS_Silver_Dust_Equipped");
		}

		if (FactsQuerySum("ACS_White_Frost_Equipped") > 0)
		{
			GetACSWhiteFrostPropDestroyAll();

			FactsRemove("ACS_White_Frost_Equipped");
		}

		if (FactsQuerySum("ACS_Samum_Equipped") > 0)
		{
			GetACSSamumPropDestroyAll();

			FactsRemove("ACS_Samum_Equipped");
		}

		if (FactsQuerySum("ACS_Salt_Bomb_Equipped") > 0)
		{
			GetACSSaltBombPropDestroyAll();

			FactsRemove("ACS_Salt_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Glue_Bomb_Equipped") > 0)
		{
			GetACSGlueBombPropDestroyAll();

			FactsRemove("ACS_Glue_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Fungi_Bomb_Equipped") > 0)
		{
			GetACSFungiBombPropDestroyAll();

			FactsRemove("ACS_Fungi_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Virus_Bomb_Equipped") > 0)
		{
			GetACSVirusBombPropDestroyAll();

			FactsRemove("ACS_Virus_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Shrapnel_Bomb_Equipped") <= 0)
		{
			if (!ACSGetCEntity('ACS_Bomb_Prop_Anchor'))
			{
				dummy = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
				dummy.AddTag('ACS_Bomb_Prop_Anchor');
			}
			else 
			{
				dummy = ACSGetCEntity('ACS_Bomb_Prop_Anchor');
			}
			
			fake = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("dlc\dlcardbombs\data\items\weapons\projectiles\petards\bomb_shrapnel.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
			fake.AddTag('ACS_Shrapnel_Bomb_Prop');
			
			bIndex = GetWitcherPlayer().GetBoneIndex( 'pelvis' );	
			GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( bIndex, bPos, bRot );
			
			dummy.CreateAttachmentAtBoneWS(GetWitcherPlayer(), 'pelvis', bPos, bRot );

			option = ACS_Settings_Main_Int('EHmodVisualSettings','EHmodWearableBombsPositioning', 0);

			switch ( option )
			{
				case 0: //back lower
				pPos.X = 0.13;
				pPos.Y = 0.01;
				pPos.Z = 0.11;
				pRot.Roll = 125;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;

				case 1: //back higher
				pPos.X = 0.13;
				pPos.Y = -0.09;
				pPos.Z = 0.11;
				pRot.Roll = 115;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;
				
				case 2: //front right
				pPos.X = -0.15;
				pPos.Y = -0.07;
				pPos.Z = 0.17;
				pRot.Roll = 130;
				pRot.Pitch = 290;
				pRot.Yaw = -40; 
				break;
				
				case 3: //front left
				pPos.X = -0.18;
				pPos.Y = -0.07;
				pPos.Z = -0.09;
				pRot.Roll = 155;
				pRot.Pitch = 265;
				pRot.Yaw = -20; 
				break;
				
				case 4: //Akatoshka7
				pPos.X = -0.15;
				pPos.Y = -0.18;
				pPos.Z = 0.17;
				pRot.Roll = 125;
				pRot.Pitch = 325;
				pRot.Yaw = -55; 
				break;
				
				default: //back right higher antr
				pPos.X = 0.13;
				pPos.Y = 0.01;
				pPos.Z = 0.11;
				pRot.Roll = 125;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;
			}

			fake.CreateAttachment(dummy, , pPos, pRot );

			FactsAdd("ACS_Shrapnel_Bomb_Equipped");
		}
	}

	latent function Virus_Bomb_Equip()
	{
		var fake, dummy : CEntity; 
		var bIndex : int;
		var bName : name;
		var bPos, pPos : Vector;
		var bRot, pRot : EulerAngles;
		var meshComp : CMeshComponent;
		var option : int;

		if (FactsQuerySum("ACS_Dancing_Star_Equipped") > 0)
		{
			GetACSDancingStarPropDestroyAll();

			FactsRemove("ACS_Dancing_Star_Equipped");
		}

		if (FactsQuerySum("ACS_Devils_Puffball_Equipped") > 0)
		{
			GetACSDevilsPuffballPropDestroyAll();

			FactsRemove("ACS_Devils_Puffball_Equipped");
		}

		if (FactsQuerySum("ACS_Dwimeritium_Bomb_Equipped") > 0)
		{
			GetACSDwimeritiumPropDestroyAll();

			FactsRemove("ACS_Dwimeritium_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Dragons_Dream_Equipped") > 0)
		{
			GetACSDragonsDreamPropDestroyAll();

			FactsRemove("ACS_Dragons_Dream_Equipped");
		}

		if (FactsQuerySum("ACS_Grapeshot_Equipped") > 0)
		{
			GetACSGrapeshotPropDestroyAll();

			FactsRemove("ACS_Grapeshot_Equipped");
		}

		if (FactsQuerySum("ACS_Silver_Dust_Equipped") > 0)
		{
			GetACSSilverDustPropDestroyAll();

			FactsRemove("ACS_Silver_Dust_Equipped");
		}

		if (FactsQuerySum("ACS_White_Frost_Equipped") > 0)
		{
			GetACSWhiteFrostPropDestroyAll();

			FactsRemove("ACS_White_Frost_Equipped");
		}

		if (FactsQuerySum("ACS_Samum_Equipped") > 0)
		{
			GetACSSamumPropDestroyAll();

			FactsRemove("ACS_Samum_Equipped");
		}

		if (FactsQuerySum("ACS_Salt_Bomb_Equipped") > 0)
		{
			GetACSSaltBombPropDestroyAll();

			FactsRemove("ACS_Salt_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Glue_Bomb_Equipped") > 0)
		{
			GetACSGlueBombPropDestroyAll();

			FactsRemove("ACS_Glue_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Fungi_Bomb_Equipped") > 0)
		{
			GetACSFungiBombPropDestroyAll();

			FactsRemove("ACS_Fungi_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Shrapnel_Bomb_Equipped") > 0)
		{
			GetACSShrapnelBombPropDestroyAll();

			FactsRemove("ACS_Shrapnel_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Virus_Bomb_Equipped") <= 0)
		{
			if (!ACSGetCEntity('ACS_Bomb_Prop_Anchor'))
			{
				dummy = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
				dummy.AddTag('ACS_Bomb_Prop_Anchor');
			}
			else 
			{
				dummy = ACSGetCEntity('ACS_Bomb_Prop_Anchor');
			}
			
			fake = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("dlc\dlcardbombs\data\items\weapons\projectiles\petards\bomb_virus.w2ent", true), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
			fake.AddTag('ACS_Virus_Bomb_Prop');
			
			bIndex = GetWitcherPlayer().GetBoneIndex( 'pelvis' );	
			GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( bIndex, bPos, bRot );
			
			dummy.CreateAttachmentAtBoneWS(GetWitcherPlayer(), 'pelvis', bPos, bRot );

			option = ACS_Settings_Main_Int('EHmodVisualSettings','EHmodWearableBombsPositioning', 0);

			switch ( option )
			{
				case 0: //back lower
				pPos.X = 0.13;
				pPos.Y = 0.01;
				pPos.Z = 0.11;
				pRot.Roll = 125;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;

				case 1: //back higher
				pPos.X = 0.13;
				pPos.Y = -0.09;
				pPos.Z = 0.11;
				pRot.Roll = 115;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;
				
				case 2: //front right
				pPos.X = -0.15;
				pPos.Y = -0.07;
				pPos.Z = 0.17;
				pRot.Roll = 130;
				pRot.Pitch = 290;
				pRot.Yaw = -40; 
				break;
				
				case 3: //front left
				pPos.X = -0.18;
				pPos.Y = -0.07;
				pPos.Z = -0.09;
				pRot.Roll = 155;
				pRot.Pitch = 265;
				pRot.Yaw = -20; 
				break;
				
				case 4: //Akatoshka7
				pPos.X = -0.15;
				pPos.Y = -0.18;
				pPos.Z = 0.17;
				pRot.Roll = 125;
				pRot.Pitch = 325;
				pRot.Yaw = -55; 
				break;
				
				default: //back right higher antr
				pPos.X = 0.13;
				pPos.Y = 0.01;
				pPos.Z = 0.11;
				pRot.Roll = 125;
				pRot.Pitch = 280;
				pRot.Yaw = -80; 
				break;
			}

			fake.CreateAttachment(dummy, , pPos, pRot );

			FactsAdd("ACS_Virus_Bomb_Equipped");
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	latent function Remove_All_Bombs()
	{
		if (ACSGetCEntity('ACS_Bomb_Prop_Anchor'))
		{
			ACSGetCEntity('ACS_Bomb_Prop_Anchor').Destroy();
		}
		
		if (FactsQuerySum("ACS_Dancing_Star_Equipped") > 0)
		{
			GetACSDancingStarPropDestroyAll();

			FactsRemove("ACS_Dancing_Star_Equipped");
		}

		if (FactsQuerySum("ACS_Devils_Puffball_Equipped") > 0)
		{
			GetACSDevilsPuffballPropDestroyAll();

			FactsRemove("ACS_Devils_Puffball_Equipped");
		}

		if (FactsQuerySum("ACS_Dwimeritium_Bomb_Equipped") > 0)
		{
			GetACSDwimeritiumPropDestroyAll();

			FactsRemove("ACS_Dwimeritium_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Dragons_Dream_Equipped") > 0)
		{
			GetACSDragonsDreamPropDestroyAll();

			FactsRemove("ACS_Dragons_Dream_Equipped");
		}

		if (FactsQuerySum("ACS_Grapeshot_Equipped") > 0)
		{
			GetACSGrapeshotPropDestroyAll();

			FactsRemove("ACS_Grapeshot_Equipped");
		}

		if (FactsQuerySum("ACS_Silver_Dust_Equipped") > 0)
		{
			GetACSSilverDustPropDestroyAll();

			FactsRemove("ACS_Silver_Dust_Equipped");
		}

		if (FactsQuerySum("ACS_White_Frost_Equipped") > 0)
		{
			GetACSWhiteFrostPropDestroyAll();

			FactsRemove("ACS_White_Frost_Equipped");
		}

		if (FactsQuerySum("ACS_Samum_Equipped") > 0)
		{
			GetACSSamumPropDestroyAll();

			FactsRemove("ACS_Samum_Equipped");
		}

		if (FactsQuerySum("ACS_Salt_Bomb_Equipped") > 0)
		{
			GetACSSaltBombPropDestroyAll();

			FactsRemove("ACS_Salt_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Glue_Bomb_Equipped") > 0)
		{
			GetACSGlueBombPropDestroyAll();

			FactsRemove("ACS_Glue_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Fungi_Bomb_Equipped") > 0)
		{
			GetACSFungiBombPropDestroyAll();

			FactsRemove("ACS_Fungi_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Shrapnel_Bomb_Equipped") > 0)
		{
			GetACSShrapnelBombPropDestroyAll();

			FactsRemove("ACS_Shrapnel_Bomb_Equipped");
		}

		if (FactsQuerySum("ACS_Virus_Bomb_Equipped") > 0)
		{
			GetACSVirusBombPropDestroyAll();

			FactsRemove("ACS_Virus_Bomb_Equipped");
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function GetACSDancingStarPropDestroyAll()
{	
	var item 											: array<CEntity>;
	var i												: int;
	
	item.Clear();

	theGame.GetEntitiesByTag( 'ACS_Dancing_Star_Prop', item );	

	if (item.Size()<=0)
	{
		return;
	}
	
	for( i = 0; i < item.Size(); i += 1 )
	{
		item[i].BreakAttachment();
		item[i].Teleport(thePlayer.GetWorldPosition() + Vector (0,0, -200));
		item[i].DestroyAfter(0.01);
		item[i].RemoveTag('ACS_Dancing_Star_Prop');
	}
}

function GetACSDevilsPuffballPropDestroyAll()
{	
	var item 											: array<CEntity>;
	var i												: int;
	
	item.Clear();

	theGame.GetEntitiesByTag( 'ACS_Devils_Puffball_Prop', item );	

	if (item.Size()<=0)
	{
		return;
	}
	
	for( i = 0; i < item.Size(); i += 1 )
	{
		item[i].BreakAttachment();
		item[i].Teleport(thePlayer.GetWorldPosition() + Vector (0,0, -200));
		item[i].DestroyAfter(0.01);
		item[i].RemoveTag('ACS_Devils_Puffball_Prop');
	}
}

function GetACSDwimeritiumPropDestroyAll()
{	
	var item 											: array<CEntity>;
	var i												: int;
	
	item.Clear();

	theGame.GetEntitiesByTag( 'ACS_Dwimeritium_Prop', item );	

	if (item.Size()<=0)
	{
		return;
	}
	
	for( i = 0; i < item.Size(); i += 1 )
	{
		item[i].BreakAttachment();
		item[i].Teleport(thePlayer.GetWorldPosition() + Vector (0,0, -200));
		item[i].DestroyAfter(0.01);
		item[i].RemoveTag('ACS_Dwimeritium_Prop');
	}
}

function GetACSDragonsDreamPropDestroyAll()
{	
	var item 											: array<CEntity>;
	var i												: int;
	
	item.Clear();

	theGame.GetEntitiesByTag( 'ACS_Dragons_Dream_Prop', item );	

	if (item.Size()<=0)
	{
		return;
	}
	
	for( i = 0; i < item.Size(); i += 1 )
	{
		item[i].BreakAttachment();
		item[i].Teleport(thePlayer.GetWorldPosition() + Vector (0,0, -200));
		item[i].DestroyAfter(0.01);
		item[i].RemoveTag('ACS_Dragons_Dream_Prop');
	}
}

function GetACSGrapeshotPropDestroyAll()
{	
	var item 											: array<CEntity>;
	var i												: int;
	
	item.Clear();

	theGame.GetEntitiesByTag( 'ACS_Grapeshot_Prop', item );	

	if (item.Size()<=0)
	{
		return;
	}
	
	for( i = 0; i < item.Size(); i += 1 )
	{
		item[i].BreakAttachment();
		item[i].Teleport(thePlayer.GetWorldPosition() + Vector (0,0, -200));
		item[i].DestroyAfter(0.01);
		item[i].RemoveTag('ACS_Grapeshot_Prop');
	}
}

function GetACSSilverDustPropDestroyAll()
{	
	var item 											: array<CEntity>;
	var i												: int;
	
	item.Clear();

	theGame.GetEntitiesByTag( 'ACS_Silver_Dust_Prop', item );	
	
	for( i = 0; i < item.Size(); i += 1 )
	{
		item[i].BreakAttachment();
		item[i].Teleport(thePlayer.GetWorldPosition() + Vector (0,0, -200));
		item[i].DestroyAfter(0.01);
		item[i].RemoveTag('ACS_Silver_Dust_Prop');
	}
}

function GetACSWhiteFrostPropDestroyAll()
{	
	var item 											: array<CEntity>;
	var i												: int;
	
	item.Clear();

	theGame.GetEntitiesByTag( 'ACS_White_Frost_Prop', item );	
	
	for( i = 0; i < item.Size(); i += 1 )
	{
		item[i].BreakAttachment();
		item[i].Teleport(thePlayer.GetWorldPosition() + Vector (0,0, -200));
		item[i].DestroyAfter(0.01);
		item[i].RemoveTag('ACS_White_Frost_Prop');
	}
}

function GetACSSamumPropDestroyAll()
{	
	var item 											: array<CEntity>;
	var i												: int;
	
	item.Clear();

	theGame.GetEntitiesByTag( 'ACS_Samum_Prop', item );	
	
	for( i = 0; i < item.Size(); i += 1 )
	{
		item[i].BreakAttachment();
		item[i].Teleport(thePlayer.GetWorldPosition() + Vector (0,0, -200));
		item[i].DestroyAfter(0.01);
		item[i].RemoveTag('ACS_Samum_Prop');
	}
}

function GetACSSaltBombPropDestroyAll()
{	
	var item 											: array<CEntity>;
	var i												: int;
	
	item.Clear();

	theGame.GetEntitiesByTag( 'ACS_Salt_Bomb_Prop', item );	
	
	for( i = 0; i < item.Size(); i += 1 )
	{
		item[i].BreakAttachment();
		item[i].Teleport(thePlayer.GetWorldPosition() + Vector (0,0, -200));
		item[i].DestroyAfter(0.01);
		item[i].RemoveTag('ACS_Salt_Bomb_Prop');
	}
}

function GetACSGlueBombPropDestroyAll()
{	
	var item 											: array<CEntity>;
	var i												: int;
	
	item.Clear();

	theGame.GetEntitiesByTag( 'ACS_Glue_Bomb_Prop', item );	
	
	for( i = 0; i < item.Size(); i += 1 )
	{
		item[i].BreakAttachment();
		item[i].Teleport(thePlayer.GetWorldPosition() + Vector (0,0, -200));
		item[i].DestroyAfter(0.01);
		item[i].RemoveTag('ACS_Glue_Bomb_Prop');
	}
}

function GetACSFungiBombPropDestroyAll()
{	
	var item 											: array<CEntity>;
	var i												: int;
	
	item.Clear();

	theGame.GetEntitiesByTag( 'ACS_Fungi_Bomb_Prop', item );	
	
	for( i = 0; i < item.Size(); i += 1 )
	{
		item[i].BreakAttachment();
		item[i].Teleport(thePlayer.GetWorldPosition() + Vector (0,0, -200));
		item[i].DestroyAfter(0.01);
		item[i].RemoveTag('ACS_Fungi_Bomb_Prop');
	}
}

function GetACSShrapnelBombPropDestroyAll()
{	
	var item 											: array<CEntity>;
	var i												: int;
	
	item.Clear();

	theGame.GetEntitiesByTag( 'ACS_Shrapnel_Bomb_Prop', item );	
	
	for( i = 0; i < item.Size(); i += 1 )
	{
		item[i].BreakAttachment();
		item[i].Teleport(thePlayer.GetWorldPosition() + Vector (0,0, -200));
		item[i].DestroyAfter(0.01);
		item[i].RemoveTag('ACS_Shrapnel_Bomb_Prop');
	}
}

function GetACSVirusBombPropDestroyAll()
{	
	var item 											: array<CEntity>;
	var i												: int;
	
	item.Clear();

	theGame.GetEntitiesByTag( 'ACS_Virus_Bomb_Prop', item );	
	
	for( i = 0; i < item.Size(); i += 1 )
	{
		item[i].BreakAttachment();
		item[i].Teleport(thePlayer.GetWorldPosition() + Vector (0,0, -200));
		item[i].DestroyAfter(0.01);
		item[i].RemoveTag('ACS_Virus_Bomb_Prop');
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function GetACSTorchPropDestroyAll()
{	
	var item 											: array<CEntity>;
	var i												: int;
	
	item.Clear();

	theGame.GetEntitiesByTag( 'ACS_Torch_Prop', item );	
	
	for( i = 0; i < item.Size(); i += 1 )
	{
		item[i].BreakAttachment();
		item[i].Teleport(thePlayer.GetWorldPosition() + Vector (0,0, -200));
		item[i].DestroyAfter(0.01);
		item[i].RemoveTag('ACS_Torch_Prop');
	}
}

function GetACSMagicLampPropDestroyAll()
{	
	var item 											: array<CEntity>;
	var i												: int;
	
	item.Clear();

	theGame.GetEntitiesByTag( 'ACS_Magic_Lamp_Prop', item );	
	
	for( i = 0; i < item.Size(); i += 1 )
	{
		item[i].BreakAttachment();
		item[i].Teleport(thePlayer.GetWorldPosition() + Vector (0,0, -200));
		item[i].DestroyAfter(0.01);
		item[i].RemoveTag('ACS_Magic_Lamp_Prop');
	}
}

function GetACSOilLampPropDestroyAll()
{	
	var item 											: array<CEntity>;
	var i												: int;
	
	item.Clear();

	theGame.GetEntitiesByTag( 'ACS_Oil_Lamp_Prop', item );	
	
	for( i = 0; i < item.Size(); i += 1 )
	{
		item[i].BreakAttachment();
		item[i].Teleport(thePlayer.GetWorldPosition() + Vector (0,0, -200));
		item[i].DestroyAfter(0.01);
		item[i].RemoveTag('ACS_Oil_Lamp_Prop');
	}
}

function GetACSCenserPropDestroyAll()
{	
	var item 											: array<CEntity>;
	var i												: int;
	
	item.Clear();

	theGame.GetEntitiesByTag( 'ACS_Censer_Prop', item );	
	
	for( i = 0; i < item.Size(); i += 1 )
	{
		item[i].BreakAttachment();
		item[i].Teleport(thePlayer.GetWorldPosition() + Vector (0,0, -200));
		item[i].DestroyAfter(0.01);
		item[i].RemoveTag('ACS_Censer_Prop');
	}
}

function GetACSNavigatorHornPropDestroyAll()
{	
	var item 											: array<CEntity>;
	var i												: int;
	
	item.Clear();

	theGame.GetEntitiesByTag( 'ACS_Navigator_Horn_Prop', item );	
	
	for( i = 0; i < item.Size(); i += 1 )
	{
		item[i].BreakAttachment();
		item[i].Teleport(thePlayer.GetWorldPosition() + Vector (0,0, -200));
		item[i].DestroyAfter(0.01);
		item[i].RemoveTag('ACS_Navigator_Horn_Prop');
	}
}

function GetACSLurePropDestroyAll()
{	
	var item 											: array<CEntity>;
	var i												: int;
	
	item.Clear();

	theGame.GetEntitiesByTag( 'ACS_Lure_Prop', item );	
	
	for( i = 0; i < item.Size(); i += 1 )
	{
		item[i].BreakAttachment();
		item[i].Teleport(thePlayer.GetWorldPosition() + Vector (0,0, -200));
		item[i].DestroyAfter(0.01);
		item[i].RemoveTag('ACS_Lure_Prop');
	}
}

function GetACSBellPropDestroyAll()
{	
	var item 											: array<CEntity>;
	var i												: int;
	
	item.Clear();

	theGame.GetEntitiesByTag( 'ACS_Bell_Prop', item );	
	
	for( i = 0; i < item.Size(); i += 1 )
	{
		item[i].BreakAttachment();
		item[i].Teleport(thePlayer.GetWorldPosition() + Vector (0,0, -200));
		item[i].DestroyAfter(0.01);
		item[i].RemoveTag('ACS_Bell_Prop');
	}
}

function GetACSPotestaquisitorPropDestroyAll()
{	
	var item 											: array<CEntity>;
	var i												: int;
	
	item.Clear();

	theGame.GetEntitiesByTag( 'ACS_Potestaquisitor_Prop', item );	
	
	for( i = 0; i < item.Size(); i += 1 )
	{
		item[i].BreakAttachment();
		item[i].Teleport(thePlayer.GetWorldPosition() + Vector (0,0, -200));
		item[i].DestroyAfter(0.01);
		item[i].RemoveTag('ACS_Potestaquisitor_Prop');
	}
}

function GetACSEyeOfLokiPropDestroyAll()
{	
	var item 											: array<CEntity>;
	var i												: int;
	
	item.Clear();

	theGame.GetEntitiesByTag( 'ACS_Eye_Of_Loki_Prop', item );	
	
	for( i = 0; i < item.Size(); i += 1 )
	{
		item[i].BreakAttachment();
		item[i].Teleport(thePlayer.GetWorldPosition() + Vector (0,0, -200));
		item[i].DestroyAfter(0.01);
		item[i].RemoveTag('ACS_Eye_Of_Loki_Prop');
	}
}

function GetACSPouchPropDestroyAll()
{	
	var item 											: array<CEntity>;
	var i												: int;
	
	item.Clear();

	theGame.GetEntitiesByTag( 'ACS_Pouch_Prop', item );	
	
	for( i = 0; i < item.Size(); i += 1 )
	{
		item[i].BreakAttachment();
		item[i].Teleport(thePlayer.GetWorldPosition() + Vector (0,0, -200));
		item[i].DestroyAfter(0.01);
		item[i].RemoveTag('ACS_Pouch_Prop');
	}
}

function GetACSOszluzgHornPropDestroyAll()
{
	var item 											: array<CEntity>;
	var i												: int;
	
	item.Clear();

	theGame.GetEntitiesByTag( 'ACS_Oszluzg_Horn_Prop', item );	
	
	for( i = 0; i < item.Size(); i += 1 )
	{
		item[i].BreakAttachment();
		item[i].Teleport(thePlayer.GetWorldPosition() + Vector (0,0, -200));
		item[i].DestroyAfter(0.01);
		item[i].RemoveTag('ACS_Oszluzg_Horn_Prop');
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class CACSEverstorm extends CGameplayEntity
{
	private var pos 																	: Vector;
	private var stormCurrentRotationCircleAngle 										: float; 
    private var stormCurrentRotation 													: EulerAngles; 
    private var stormCurrentPosition 													: Vector;
    private var stormCurrentVelocity 													: Vector;
    private var stormCurrentAcceleration 												: Vector;
	private var stormGoalPosition 														: Vector;

	private var rotationCircleRadius 													: float;
	default rotationCircleRadius 														= 1000;

	private var stormContracting														: bool;
	default stormContracting 															= true;

	event OnSpawned( spawnData : SEntitySpawnData )
	{
		super.OnSpawned(spawnData);

		pos = this.GetWorldPosition();

		//PlayEffectSingle('502_barrier_hold');

		//PlayEffectSingle('403_cast');

		//PlayEffectSingle('everstorm_lightning_only');

		PlayEffectSingle('everstorm_normal_lightning');

		PlayEffectSingle('cloudsTerrain');

		PlayEffectSingle('cloudsUp');

		PlayEffectSingle('cloudsHuge');

		PlayEffectSingle('iceFog');


		AddTimer('everstorm_alternatation', 960, true);

		AddTimer('player_proximity', 0.0001, true);

		AddTimer('move_everstorm', 0.001, true);

		this.AddTag('ACS_Everstorm_Deactive');
	} 

	timer function everstorm_alternatation(deltaTime : float, id : int) 
	{
		var currentGameTime 																: GameTime;
		var hours 																			: int;

		currentGameTime = theGame.CalculateTimePlayed();
		hours = GameTimeDays(currentGameTime) * 24 + GameTimeHours(currentGameTime);

		if (!this.HasTag('ACS_Everstorm_Deactive'))
		{
			PlayEffectSingle('everstorm_normal_lightning');

			DestroyEffect('everstorm_lightning_only');

			this.AddTag('ACS_Everstorm_Deactive');
		}
		else if (this.HasTag('ACS_Everstorm_Deactive') 
		&& ACS_Settings_Main_Bool('EHmodMiscSettings','EHmodEverstormEnabled', true)
		&& hours >= 16)
		{
			DestroyEffect('everstorm_normal_lightning');

			PlayEffectSingle('everstorm_lightning_only');

			this.RemoveTag('ACS_Everstorm_Deactive');
		}
	}

	public final function StormContracting(b : bool)
	{
		stormContracting = b;
	}

	timer function move_everstorm(deltaTime : float, id : int) 
	{
        var playerPosition : Vector;
        var playerRotation : EulerAngles;      
        var goalAcceleration : Vector;
        var navigationComputeZReturn : float;  
        var rotationCircleMovementSpeed : float;
        var maxAcceleration : float;      
        var accelerationMultiplier : float;
        var maxVelocity : float;
        var velocityDampeningFactor : float;

		if (thePlayer.HasTag('ACS_Player_In_Everstorm_Distance_1')
		|| thePlayer.HasTag('ACS_Player_In_Everstorm_Distance_2')
		|| thePlayer.HasTag('ACS_Player_In_Everstorm_Distance_3')
		)
		{
			//return;
		}

		if (stormContracting)
		{
			rotationCircleRadius -= 0.05;
		}
		else
		{
			rotationCircleRadius += 0.05;
		}

		if ((theGame.GetWorld().GetDepotPath() == "levels\skellige\skellige.w2w"))
		{
			if (rotationCircleRadius <= 500)
			{
				StormContracting(false);
			}
			else if (rotationCircleRadius >= 1800)
			{
				StormContracting(true);
			}
		}
		else
		{
			if (rotationCircleRadius <= 500)
			{
				StormContracting(false);
			}
			else if (rotationCircleRadius >= 2250)
			{
				StormContracting(true);
			}
		}

		rotationCircleMovementSpeed = 0.25;
		maxAcceleration = 0.25;
		accelerationMultiplier = 0.25;
		maxVelocity = 0.25;
		velocityDampeningFactor = 0.95;
        
        stormCurrentRotationCircleAngle += deltaTime * rotationCircleMovementSpeed;

        while(stormCurrentRotationCircleAngle > 360) 
		{          
            stormCurrentRotationCircleAngle -= 360;                        
        }

		pos = ACSPlayerFixZAxis(Vector(0,0,0,1));

		pos.Z += 100;

		playerPosition = ACSPlayerFixZAxis(Vector(0,0,0,1));

		playerPosition.Z += 100;

		playerRotation = EulerAngles(0,0,0);

       	stormGoalPosition = playerPosition;
		
        stormGoalPosition.X += CosF(Deg2Rad(stormCurrentRotationCircleAngle)) * rotationCircleRadius;
        stormGoalPosition.Y += SinF(Deg2Rad(stormCurrentRotationCircleAngle)) * rotationCircleRadius;

		stormGoalPosition.Z += 50;

        stormCurrentAcceleration = (stormGoalPosition - stormCurrentPosition) * accelerationMultiplier;
 
        if(VecLength(stormCurrentAcceleration) > maxAcceleration) 
		{
            stormCurrentAcceleration = VecNormalize(stormCurrentAcceleration) * maxAcceleration;
        }

        stormCurrentVelocity *= velocityDampeningFactor;
 
        if(VecLength(stormCurrentVelocity) > maxVelocity) 
		{
            stormCurrentVelocity = VecNormalize(stormCurrentVelocity) * maxVelocity;
        }
 
        if (
		theGame.GetWorld().NavigationComputeZ( stormCurrentPosition, stormCurrentPosition.Z - 2, stormCurrentPosition.Z + 2, navigationComputeZReturn ))
        {
            if(AbsF(stormCurrentPosition.Z - navigationComputeZReturn) < 0.1) 
			{
                stormCurrentVelocity.Z *= -0.9;
            }
        }
 
        stormCurrentPosition += stormCurrentVelocity * deltaTime;

		stormCurrentRotation = EulerAngles(0,0,0);

		if ((theGame.GetWorld().GetDepotPath() == "levels\wmh_lv1\wmh_lv1.w2w"))
		{
			stormGoalPosition.Z += 550;
		}

		this.TeleportWithRotation(stormGoalPosition, stormCurrentRotation);
    }  

	timer function player_proximity ( dt : float, optional id : int)
	{
		var targetDistance									: float;

		if (thePlayer.IsInInterior()
		|| theGame.IsDialogOrCutscenePlaying() 
		|| thePlayer.IsInNonGameplayCutscene() 
		|| thePlayer.IsInGameplayScene()
		|| thePlayer.IsCiri()
		|| thePlayer.GetIsHorseRacing()
		|| this.HasTag('ACS_Everstorm_Deactive')
		)
		{
			if (this.HasTag('ACS_Everstorm_Active'))
			{
				thePlayer.RemoveTag('ACS_Player_In_Everstorm');

				deactivate_env();

				this.RemoveTag('ACS_Everstorm_Active');
			}

			if (thePlayer.HasTag('ACS_Player_In_Everstorm_Distance_1'))
			{
				thePlayer.RemoveTag('ACS_Player_In_Everstorm_Distance_1');
			}

			if (thePlayer.HasTag('ACS_Player_In_Everstorm_Distance_2'))
			{
				thePlayer.RemoveTag('ACS_Player_In_Everstorm_Distance_2');
			}

			if (thePlayer.HasTag('ACS_Player_In_Everstorm_Distance_3'))
			{
				thePlayer.RemoveTag('ACS_Player_In_Everstorm_Distance_3');
			}

			if (thePlayer.HasTag('ACS_Player_In_Everstorm_Distance_4'))
			{
				thePlayer.RemoveTag('ACS_Player_In_Everstorm_Distance_4');
			}

			return;
		}

		targetDistance = VecDistanceSquared2D( this.GetWorldPosition(), GetWitcherPlayer().GetWorldPosition() );

		if (targetDistance <= 50 * 50)
		{
			if (thePlayer.GetStat(BCS_Stamina) < thePlayer.GetStatMax( BCS_Stamina))
			{
				thePlayer.GainStat( BCS_Stamina, thePlayer.GetStatMax( BCS_Stamina) * 0.125 );
			}

			if (!this.HasTag('ACS_Everstorm_Active') && !thePlayer.IsInInterior())
			{
				thePlayer.AddTag('ACS_Player_In_Everstorm');

				activate_env();

				this.AddTag('ACS_Everstorm_Active');
			}

			if (!thePlayer.HasTag('ACS_Player_In_Everstorm_Distance_1') && !thePlayer.IsInInterior())
			{
				thePlayer.AddTag('ACS_Player_In_Everstorm_Distance_1');
			}

			if (thePlayer.HasTag('ACS_Player_In_Everstorm_Distance_2'))
			{
				thePlayer.RemoveTag('ACS_Player_In_Everstorm_Distance_2');
			}

			if (thePlayer.HasTag('ACS_Player_In_Everstorm_Distance_3'))
			{
				thePlayer.RemoveTag('ACS_Player_In_Everstorm_Distance_3');
			}

			if (thePlayer.HasTag('ACS_Player_In_Everstorm_Distance_4'))
			{
				thePlayer.RemoveTag('ACS_Player_In_Everstorm_Distance_4');
			}
		}
		else if( targetDistance > 50 * 50 && targetDistance <= 100 * 100 ) 
		{
			if (!this.HasTag('ACS_Everstorm_Active') && !thePlayer.IsInInterior())
			{
				thePlayer.AddTag('ACS_Player_In_Everstorm');

				activate_env();

				this.AddTag('ACS_Everstorm_Active');
			}

			if (!thePlayer.HasTag('ACS_Player_In_Everstorm_Distance_2') && !thePlayer.IsInInterior())
			{
				thePlayer.AddTag('ACS_Player_In_Everstorm_Distance_2');
			}

			if (thePlayer.HasTag('ACS_Player_In_Everstorm_Distance_1'))
			{
				thePlayer.RemoveTag('ACS_Player_In_Everstorm_Distance_1');
			}
			if (thePlayer.HasTag('ACS_Player_In_Everstorm_Distance_3'))
			{
				thePlayer.RemoveTag('ACS_Player_In_Everstorm_Distance_3');
			}

			if (thePlayer.HasTag('ACS_Player_In_Everstorm_Distance_4'))
			{
				thePlayer.RemoveTag('ACS_Player_In_Everstorm_Distance_4');
			}
		}
		else if( targetDistance > 100 * 100 && targetDistance <= 200 * 200 ) 
		{
			if (!this.HasTag('ACS_Everstorm_Active') && !thePlayer.IsInInterior())
			{
				thePlayer.AddTag('ACS_Player_In_Everstorm');

				activate_env();

				this.AddTag('ACS_Everstorm_Active');
			}

			if (!thePlayer.HasTag('ACS_Player_In_Everstorm_Distance_3') && !thePlayer.IsInInterior())
			{
				thePlayer.AddTag('ACS_Player_In_Everstorm_Distance_3');
			}

			if (thePlayer.HasTag('ACS_Player_In_Everstorm_Distance_1'))
			{
				thePlayer.RemoveTag('ACS_Player_In_Everstorm_Distance_1');
			}

			if (thePlayer.HasTag('ACS_Player_In_Everstorm_Distance_2'))
			{
				thePlayer.RemoveTag('ACS_Player_In_Everstorm_Distance_2');
			}

			if (thePlayer.HasTag('ACS_Player_In_Everstorm_Distance_4'))
			{
				thePlayer.RemoveTag('ACS_Player_In_Everstorm_Distance_4');
			}
		}
		else if( targetDistance > 200 * 200 && targetDistance <= 300 * 300 ) 
		{
			if (!this.HasTag('ACS_Everstorm_Active') && !thePlayer.IsInInterior())
			{
				thePlayer.AddTag('ACS_Player_In_Everstorm');
				
				activate_env();

				this.AddTag('ACS_Everstorm_Active');
			}

			if (!thePlayer.HasTag('ACS_Player_In_Everstorm_Distance_4') && !thePlayer.IsInInterior())
			{
				thePlayer.AddTag('ACS_Player_In_Everstorm_Distance_4');
			}

			if (thePlayer.HasTag('ACS_Player_In_Everstorm_Distance_1'))
			{
				thePlayer.RemoveTag('ACS_Player_In_Everstorm_Distance_1');
			}

			if (thePlayer.HasTag('ACS_Player_In_Everstorm_Distance_2'))
			{
				thePlayer.RemoveTag('ACS_Player_In_Everstorm_Distance_2');
			}

			if (thePlayer.HasTag('ACS_Player_In_Everstorm_Distance_3'))
			{
				thePlayer.RemoveTag('ACS_Player_In_Everstorm_Distance_3');
			}
		}
		else
		{
			if (this.HasTag('ACS_Everstorm_Active') || thePlayer.IsInInterior())
			{
				thePlayer.RemoveTag('ACS_Player_In_Everstorm');

				deactivate_env();

				this.RemoveTag('ACS_Everstorm_Active');
			}

			if (thePlayer.HasTag('ACS_Player_In_Everstorm_Distance_1'))
			{
				thePlayer.RemoveTag('ACS_Player_In_Everstorm_Distance_1');
			}

			if (thePlayer.HasTag('ACS_Player_In_Everstorm_Distance_2'))
			{
				thePlayer.RemoveTag('ACS_Player_In_Everstorm_Distance_2');
			}

			if (thePlayer.HasTag('ACS_Player_In_Everstorm_Distance_3'))
			{
				thePlayer.RemoveTag('ACS_Player_In_Everstorm_Distance_3');
			}

			if (thePlayer.HasTag('ACS_Player_In_Everstorm_Distance_4'))
			{
				thePlayer.RemoveTag('ACS_Player_In_Everstorm_Distance_4');
			}
		}

		if (
		this.HasTag('ACS_Everstorm_Active')
		)
		{
			if (ACS_can_call_active_lightning() && !thePlayer.HasTag('ACS_Player_In_Everstorm_Distance_4'))
			{
				ACS_refresh_active_lightning_cooldown();

				Active_Lightning_Strike();
			}
		}
	}

	function Active_Lightning_Strike()
	{
		var temp														: CEntityTemplate;
		var ent															: CEntity;
		var i, count													: int;
		var playerPos, spawnPos											: Vector;
		var randAngle, randRange, distance								: float;
		var adjustedRot													: EulerAngles;

		thePlayer.SoundEvent( "fx_amb_thunder_close" );

		thePlayer.SoundEvent( "qu_nml_103_lightning" );

		temp = (CEntityTemplate)LoadResource( 

		"dlc\dlc_acs\data\entities\other\everstorm_lightining_area.w2ent"
			
		, true );

		playerPos = theCamera.GetCameraPosition() + theCamera.GetCameraDirection() * 30;

		adjustedRot = EulerAngles(0,0,0);

		adjustedRot.Yaw = RandRangeF(360,1);
		adjustedRot.Pitch = RandRangeF(22.5,-22.5);

		count = RandRange(5,3);

		distance = RandRangeF(30,5);
			
		for( i = 0; i < count; i += 1 )
		{
			randRange = distance + distance * RandF();
			randAngle = 5 * Pi() * RandF();
			
			spawnPos.X = randRange * CosF( randAngle ) + playerPos.X;
			spawnPos.Y = randRange * SinF( randAngle ) + playerPos.Y;
			//spawnPos.Z = playerPos.Z;

			ent = theGame.CreateEntity( temp, ACSPlayerFixZAxis(spawnPos), adjustedRot );
			
			ent.AddTag('ACS_Active_Lightning');

			ent.DestroyAfter(10);
		}
	}

	var last_active_lightning_refresh_time : float;

	function ACS_can_call_active_lightning(): bool 
	{
		return theGame.GetEngineTimeAsSeconds() - last_active_lightning_refresh_time > RandRangeF(20,10);
	}

	function ACS_refresh_active_lightning_cooldown() 
	{
		last_active_lightning_refresh_time = theGame.GetEngineTimeAsSeconds();
	}

	var last_passive_lightning_refresh_time : float;

	function ACS_can_call_passive_lightning(): bool 
	{
		return theGame.GetEngineTimeAsSeconds() - last_passive_lightning_refresh_time > 10;
	}

	function ACS_refresh_passive_lightning_cooldown() 
	{
		last_passive_lightning_refresh_time = theGame.GetEngineTimeAsSeconds();
	}

	var environment_1 							: CEnvironmentDefinition;	
	var envID_1										: int;

	function activate_env()
	{
		DestroyEffect('everstorm');
		DestroyEffect('everstorm_secondary');
		PlayEffectSingle('everstorm');
		PlayEffectSingle('everstorm_secondary');

		environment_1 = (CEnvironmentDefinition)LoadResource(

		"dlc\dlc_acs\data\env\q605_hell_red_blockout.env"

		, true);

		envID_1 = ActivateEnvironmentDefinition( environment_1, 1100, 1, 2.25f );

		theGame.SetEnvironmentID(envID_1);

		thePlayer.SoundEvent( "magic_man_tornado_loop_start" );
	}

	function deactivate_env()
	{
		StopEffect('everstorm');
		StopEffect('everstorm_secondary');

		DeactivateEnvironment(envID_1, 2.25f);

		thePlayer.SoundEvent( "magic_man_tornado_loop_stop" );
	}
}

function GetACSEverstorm() : CACSEverstorm
{
	var ent 				 : CACSEverstorm;
	
	ent = (CACSEverstorm)theGame.GetEntityByTag( 'ACS_Everstorm' );
	return ent;
}

////////////////////////////////////////////////////////////////////////////////////////////

function ACS_Player_Tentacles(i:int)
{
	var ent, ent_1, ent_2, ent_3, ent_4, ent_5, ent_6, ent_7, anchor    : CEntity;
	var rot, attach_rot                        						 	: EulerAngles;
    var pos, attach_vec													: Vector;
	var meshcomp														: CComponent;
	var animcomp 														: CAnimatedComponent;
	var h 																: float;
	var bone_vec														: Vector;
	var bone_rot														: EulerAngles;
	var anchor_temp, ent_2_temp											: CEntityTemplate;

	ACSGetCActor('ACS_Player_Tentacle_1').Destroy();

	ACSGetCActor('ACS_Player_Tentacle_2').Destroy();

	ACSGetCActor('ACS_Player_Tentacle_3').Destroy();

	ACSGetCEntity('acs_player_tentacle_anchor').Destroy();

	rot = thePlayer.GetWorldRotation();

    pos = thePlayer.GetWorldPosition() + thePlayer.GetWorldForward() * 5;

	anchor_temp = (CEntityTemplate)LoadResource( "dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true );


	thePlayer.GetBoneWorldPositionAndRotationByIndex( thePlayer.GetBoneIndex( 'head' ), bone_vec, bone_rot );

	anchor = (CEntity)theGame.CreateEntity( anchor_temp, thePlayer.GetWorldPosition() + Vector( 0, 0, -10 ) );

	anchor.AddTag('acs_player_tentacle_anchor');

	anchor.CreateAttachmentAtBoneWS( thePlayer, 'head', bone_vec, bone_rot );

	((CActor)anchor).EnableCollisions(false);
	((CActor)anchor).EnableCharacterCollisions(false);

	ent_2_temp = (CEntityTemplate)LoadResource( "dlc\dlc_acs\data\entities\monsters\toad_tongue_no_face.w2ent", true );

	ent_1 = theGame.CreateEntity( ent_2_temp, pos, rot );

	ent_1.AddTag('ACS_Player_Tentacle_1');

	((CNewNPC)ent_1).SetTemporaryAttitudeGroup( 'friendly_to_player', AGP_Default );	
	((CNewNPC)ent_1).EnableCharacterCollisions(false);
	((CNewNPC)ent_1).EnableCollisions(false);
	((CNewNPC)ent_1).SetImmortalityMode( AIM_Invulnerable, AIC_Default, true );
	((CActor)ent_1).SetTemporaryAttitudeGroup( 'neutral_to_all', AGP_Default );
	((CActor)ent_1).EnableCollisions(false);
	((CActor)ent_1).EnableCharacterCollisions(false);
	((CActor)ent_1).SetImmortalityMode( AIM_Invulnerable, AIC_Default, true );

	//thePlayer.EnableCharacterCollisions(false);

	animcomp = (CAnimatedComponent)ent_1.GetComponentByClassName('CAnimatedComponent');
	meshcomp = ent_1.GetComponentByClassName('CMeshComponent');

	animcomp.SetScale(Vector( 0.25, 0.25, 0.25, 1 ));

	meshcomp.SetScale(Vector( 0.25, 0.25, 0.25, 1 ));	

	attach_rot.Roll = 90;
	attach_rot.Pitch = 0;
	attach_rot.Yaw = 0;
	attach_vec.X = -0.35;
	attach_vec.Y = -0.15;
	attach_vec.Z = 0;

	ent_1.CreateAttachment( anchor, , attach_vec, attach_rot );


	if (i == 1)
	{
		animcomp.PlaySlotAnimationAsync ( 'monster_toad_attack_tongue_10m', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0.5f));
	}
	else if (i == 2)
	{
		animcomp.PlaySlotAnimationAsync ( 'monster_toad_attack_tongue', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0.5f));
	}

	animcomp.FreezePoseFadeIn(4.5f);




	ent_2 = theGame.CreateEntity( ent_2_temp, pos, rot );

	ent_2.AddTag('ACS_Player_Tentacle_2');

	((CNewNPC)ent_2).SetTemporaryAttitudeGroup( 'friendly_to_player', AGP_Default );	
	((CNewNPC)ent_2).EnableCharacterCollisions(false);
	((CNewNPC)ent_2).EnableCollisions(false);
	((CNewNPC)ent_2).SetImmortalityMode( AIM_Invulnerable, AIC_Default, true );
	((CActor)ent_2).SetTemporaryAttitudeGroup( 'neutral_to_all', AGP_Default );
	((CActor)ent_2).EnableCollisions(false);
	((CActor)ent_2).EnableCharacterCollisions(false);
	((CActor)ent_2).SetImmortalityMode( AIM_Invulnerable, AIC_Default, true );

	animcomp = (CAnimatedComponent)ent_2.GetComponentByClassName('CAnimatedComponent');
	meshcomp = ent_2.GetComponentByClassName('CMeshComponent');

	animcomp.SetScale(Vector( 0.25, 0.25, 0.25, 1 ));

	meshcomp.SetScale(Vector( 0.25, 0.25, 0.25, 1 ));	

	attach_rot.Roll = -30;
	attach_rot.Pitch = 0;
	attach_rot.Yaw = 0;
	attach_vec.X = 0.275;
	attach_vec.Y = -0.15;
	attach_vec.Z = -0.4;

	ent_2.CreateAttachment( anchor, , attach_vec, attach_rot );

	if (i == 1)
	{
		animcomp.PlaySlotAnimationAsync ( 'monster_toad_attack_tongue_10m', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0.5f));
	}
	else if (i == 2)
	{
		animcomp.PlaySlotAnimationAsync ( 'monster_toad_attack_tongue', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0.5f));
	}

	animcomp.FreezePoseFadeIn(4.5f);



	ent_3 = theGame.CreateEntity( ent_2_temp, pos, rot );

	ent_3.AddTag('ACS_Player_Tentacle_3');

	((CNewNPC)ent_3).SetTemporaryAttitudeGroup( 'friendly_to_player', AGP_Default );	
	((CNewNPC)ent_3).EnableCharacterCollisions(false);
	((CNewNPC)ent_3).EnableCollisions(false);
	((CNewNPC)ent_3).SetImmortalityMode( AIM_Invulnerable, AIC_Default, true );
	((CActor)ent_3).SetTemporaryAttitudeGroup( 'neutral_to_all', AGP_Default );
	((CActor)ent_3).EnableCollisions(false);
	((CActor)ent_3).EnableCharacterCollisions(false);
	((CActor)ent_3).SetImmortalityMode( AIM_Invulnerable, AIC_Default, true );

	animcomp = (CAnimatedComponent)ent_3.GetComponentByClassName('CAnimatedComponent');
	meshcomp = ent_3.GetComponentByClassName('CMeshComponent');

	animcomp.SetScale(Vector( 0.25, 0.25, 0.25, 1 ));

	meshcomp.SetScale(Vector( 0.25, 0.25, 0.25, 1 ));	

	attach_rot.Roll = -150;
	attach_rot.Pitch = 0;
	attach_rot.Yaw = 0;
	attach_vec.X = 0.275;
	attach_vec.Y = -0.15;
	attach_vec.Z = 0.4;

	ent_3.CreateAttachment( anchor, , attach_vec, attach_rot );

	if (i == 1)
	{
		animcomp.PlaySlotAnimationAsync ( 'monster_toad_attack_tongue_10m', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0.5f));
	}
	else if (i == 2)
	{
		animcomp.PlaySlotAnimationAsync ( 'monster_toad_attack_tongue', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0.5f));
	}

	animcomp.FreezePoseFadeIn(4.5f);

	anchor.DestroyAfter(2);

	ent_1.DestroyAfter(2);

	ent_2.DestroyAfter(2);

	ent_3.DestroyAfter(2);
}

////////////////////////////////////////////////////////////////////////////////

state ACS_Ice_Blast_Evade in CR4Player extends ExtendedMovable 
{
	var was_in_combat							: bool;
	var camera 									: CCustomCamera;
	var init_pos								: Vector;
	var dest_pos								: Vector;
	var evadeTarget								: CActor;
	var sleep0, sleep1							: float;
	var pos, newPos								: Vector;
	var movementAdjustor						: CMovementAdjustor;
	var ticket 									: SMovementAdjustmentRequestTicket;
	var ent         							: CEntity;
	var teleport_fx, teleport_fx_1				: CEntity;
	var actor									: CActor;
	var npc     								: CNewNPC;
	var actors    								: array<CActor>;
	var i										: int;	
	var params 									: SCustomEffectParams;

	event OnEnterState( prevStateName : name )
	{
		if ( !theSound.SoundIsBankLoaded("magic_imlerith.bnk") )
		{
			theSound.SoundLoadBank( "magic_imlerith.bnk", false );
		}
		
		thePlayer.SoundEvent("magic_imlerith_appear_disappear");
	
		init_pos = thePlayer.GetWorldPosition();

		thePlayer.EnableManualCameraControl( false, 'ACS_Ice_Blast_Evade' );

		ACS_Ice_Blast_Evade_Start();

		super.OnEnterState(prevStateName);
	}
	
	private entry function ACS_Ice_Blast_Evade_Start()
	{
		parent.LockEntryFunction(true);
	
		sleep1 = 0.5;
		
		evadeTarget = parent.GetTarget();

		GetWitcherPlayer().GetRootAnimatedComponent().PlaySlotAnimationAsync ( 'blink_start_back_ready_ACS', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.875f));
		
		Sleep ( sleep1 / thePlayer.GetAnimationTimeMultiplier() );

		thePlayer.SetVisibility ( false );
		thePlayer.EnableCharacterCollisions(false);
		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat );
		thePlayer.SetCanPlayHitAnim(false);
		thePlayer.AddBuffImmunity_AllNegative('ACS_Ice_Blast_Evade_Invul', false);
	
		movementAdjustor = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();
		movementAdjustor.CancelAll();
		
		pos = evadeTarget.PredictWorldPosition(0.35) + VecFromHeading( AngleNormalize180( thePlayer.GetHeading() - NodeToNodeAngleDistance( evadeTarget, thePlayer ) ) ) * 3;
		if( !theGame.GetWorld().NavigationFindSafeSpot( pos, 0.3, 0.3 , newPos ) )
		{
			theGame.GetWorld().NavigationFindSafeSpot( pos, 0.3, 3 , newPos );
			pos = newPos;
		}
		
		dest_pos = pos;
		
		ticket = movementAdjustor.CreateNewRequest( 'ACS_Ice_Blast_Evade' );

		movementAdjustor.AdjustmentDuration( ticket, 0.1 );

		movementAdjustor.SlideTo(ticket, pos);

		movementAdjustor.RotateTowards( ticket, evadeTarget );

		teleport_fx_1 = theGame.CreateEntity( (CEntityTemplate)LoadResource( "fx\characters\eredin\eredin_teleport.w2ent", true ), GetWitcherPlayer().GetWorldPosition(), EulerAngles(0,0,0) );
		teleport_fx_1.CreateAttachment(GetWitcherPlayer());
		teleport_fx_1.PlayEffectSingle('disappear');
		teleport_fx_1.DestroyAfter(5);
		
		Sleep ( sleep1 / thePlayer.GetAnimationTimeMultiplier() );

		GetWitcherPlayer().DestroyEffect('suck_out');
		GetWitcherPlayer().PlayEffectSingle('suck_out');
		GetWitcherPlayer().StopEffect('suck_out');

		actors.Clear();

		actors = GetWitcherPlayer().GetNPCsAndPlayersInRange( 6, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

		for( i = 0; i < actors.Size(); i += 1 )
		{
			npc = (CNewNPC)actors[i];
			
			if( actors.Size() > 0 )
			{		
				if( ACS_AttitudeCheck ( npc ) && npc.IsAlive() )
				{
					if (!npc.HasBuff(EET_Frozen))
					{
						params.effectType = EET_Frozen;
						params.creator = thePlayer;
						params.sourceName = "ACS_Ice_Blast";
						params.duration = 1;

						npc.AddEffectCustom( params );	
					}
				}
			}
		}

		teleport_fx = theGame.CreateEntity( (CEntityTemplate)LoadResource( "fx\characters\eredin\eredin_teleport.w2ent", true ), GetWitcherPlayer().GetWorldPosition(), EulerAngles(0,0,0) );
		teleport_fx.CreateAttachment(GetWitcherPlayer());
		teleport_fx.PlayEffectSingle('disappear');
		teleport_fx.DestroyAfter(5);

		GetACSWatcher().RemoveTimer('ACS_Ice_Giant_Armor_Timer');
		GetACSWatcher().AddTimer('ACS_Ice_Giant_Armor_Timer', 0.004, true);

		GetACSWatcher().ACS_Quen();

		thePlayer.AddTag('ACS_Ice_Giant_Mode');

		ent = theGame.CreateEntity( (CEntityTemplate)LoadResource( 

		"dlc\dlc_acs\data\entities\other\fx_ent.w2ent"

		, true ), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );

		ent.CreateAttachment(thePlayer,, Vector( 0, 0, 1 ), EulerAngles(0,0,0) );

		ent.PlayEffect('ice_blast');
		ent.PlayEffect('ice_blast_light');

		ent.DestroyAfter(3);
		
		thePlayer.EnableCharacterCollisions(true);
		thePlayer.SetImmortalityMode( AIM_None, AIC_Combat );	
		thePlayer.SetCanPlayHitAnim(true);
		thePlayer.RemoveBuffImmunity_AllNegative('ACS_Ice_Blast_Evade_Invul');
		thePlayer.SetVisibility ( true );
	
		parent.LockEntryFunction(false);
		
		thePlayer.SetIsCurrentlyDodging(false);
	
		if ( !theGame.IsDialogOrCutscenePlaying() )
		{
			parent.GotoState('Combat');
		}
		else
		{
			parent.PopState();
		}
	}
	
	event OnGameCameraTick( out moveData : SCameraMovementData, dt : float )
	{	
		camera = (CCustomCamera)theCamera.GetTopmostCameraObject();
		camera.SetAllowAutoRotation( true );
		UpdateCameraIceBlastEvade( moveData, dt );
		return true;
	}
	
	event OnGameCameraPostTick( out moveData : SCameraMovementData, dt : float )
	{
		UpdateCameraIceBlastEvade( moveData, dt );
		return true;
	}
	
	event OnLeaveState( nextStateName : name )
	{
		thePlayer.EnableManualCameraControl( true, 'ACS_Ice_Blast_Evade' );
		super.OnLeaveState(nextStateName);
	}
	
	protected function UpdateCameraIceBlastEvade( out moveData : SCameraMovementData, timeDelta : float )
	{
		var playerToTargetVector : Vector;
		var playerToTargetAngles : EulerAngles;
		var playerToTargetPitch : float;
		var _tempVelocity : float;
		
		theGame.GetGameCamera().ChangePivotRotationController( 'CombatInterior' );
		theGame.GetGameCamera().ChangePivotDistanceController( 'Default' );
		theGame.GetGameCamera().ChangePivotPositionController( 'Default' );		
		
		moveData.pivotRotationController = theGame.GetGameCamera().GetActivePivotRotationController();
		moveData.pivotDistanceController = theGame.GetGameCamera().GetActivePivotDistanceController();
		moveData.pivotPositionController = theGame.GetGameCamera().GetActivePivotPositionController();
		
		DampFloatSpring(interiorCameraDesiredPositionMult, _tempVelocity, 10.f, 0.7f, timeDelta);
		
		moveData.pivotPositionController.SetDesiredPosition( parent.GetWorldPosition(), interiorCameraDesiredPositionMult); 
		moveData.pivotDistanceController.SetDesiredDistance( 10.5f );
			
		if ( dest_pos == Vector( 0, 0, 0) )
		{
			playerToTargetVector = thePlayer.GetHeadingVector();
			moveData.pivotRotationController.SetDesiredHeading( VecHeading( playerToTargetVector ) - 180, 0.7f );
		}
		else
		{
			playerToTargetVector = dest_pos - init_pos;
			moveData.pivotRotationController.SetDesiredHeading( VecHeading( playerToTargetVector ) - 180, 1.5f );
		}
		
		
		if ( AbsF( playerToTargetVector.Z ) <= 1.f )
		{
			if ( parent.IsGuarded() )
				moveData.pivotRotationController.SetDesiredPitch( -25.f );
			else
				moveData.pivotRotationController.SetDesiredPitch( -15.f );
		}
		else
		{
			playerToTargetAngles = VecToRotation( playerToTargetVector );
			playerToTargetPitch = playerToTargetAngles.Pitch + 10;
			
			
			
			moveData.pivotRotationController.SetDesiredPitch( playerToTargetPitch * -1, 0.5f );
		}
	
		moveData.pivotPositionController.offsetZ = 1.55f;
		DampVectorSpring( moveData.cameraLocalSpaceOffset, moveData.cameraLocalSpaceOffsetVel, Vector( 0.f, -3.f, 0.f ), 1.f, timeDelta );
	}	
}

function ACSCreateFrostSwordFX()
{
	var ent													            : CEntity;
	var rot                        						 				: EulerAngles;
	var pos																: Vector;

	if (ACSGetCEntity('ACS_Frost_Sword_Ent'))
	{
		ACSGetCEntity('ACS_Frost_Sword_Ent').Destroy();
	}

	if (ACSGetCEntity('ACS_Fire_Sword_Ent'))
	{
		ACSGetCEntity('ACS_Fire_Sword_Ent').Destroy();

		ACSGetCEntity('ACS_Fire_Sword_Ground_Fx_Ent').Destroy();
	}

	rot = thePlayer.GetWorldRotation();

	pos = thePlayer.GetWorldPosition();

	ent = theGame.CreateEntity( (CEntityTemplate)LoadResource( 

	"dlc\dlc_acs\data\fx\acs_sword_trail.w2ent"

	, true ), pos, rot );

	ent.AddTag('ACS_Frost_Sword_Ent');

	ent.CreateAttachment( thePlayer, 'r_weapon', Vector( 0, 0, 0 ), EulerAngles(0,0,0) );

	ent.PlayEffectSingle('frost_sword_1');

	ent.PlayEffectSingle('frost_sword_1_1');
}

function ACSCreateFireSwordFX()
{
	GetACSWatcher().RemoveTimer('FlammableOilEvent');
	GetACSWatcher().AddTimer('FlammableOilEvent', 0.125 , false);

	GetACSWatcher().RemoveTimer('FlammableOilActual');
	GetACSWatcher().AddTimer('FlammableOilActual', 0.5 , false);
}

function ACSCreateFireSwordFX_Actual()
{
	var ent, ent_flame_fx, ent_ground_fx							    : CEntity;
	var rot                        						 				: EulerAngles;
	var pos																: Vector;
	var duration  														: float;
	var sp 																: SAbilityAttributeValue;

	if (ACSGetCEntity('ACS_Frost_Sword_Ent'))
	{
		ACSGetCEntity('ACS_Frost_Sword_Ent').Destroy();
	}

	if (ACSGetCEntity('ACS_Fire_Sword_Ent'))
	{
		ACSGetCEntity('ACS_Fire_Sword_Ent').Destroy();

		ACSGetCEntity('ACS_Fire_Sword_Ground_Fx_Ent').Destroy();
	}

	rot = thePlayer.GetWorldRotation();

	pos = thePlayer.GetWorldPosition();

	ent = theGame.CreateEntity( (CEntityTemplate)LoadResource( 

	"dlc\dlc_acs\data\fx\acs_sword_trail.w2ent"

	, true ), pos, rot );

	ent.AddTag('ACS_Fire_Sword_Ent');

	ent.CreateAttachment( thePlayer, 'r_weapon', Vector( 0, 0, 0.125 ), EulerAngles(0,0,0) );

	if (ACS_GetItem_Winters_Blade_Held())
	{
		ent.PlayEffectSingle('frost_sword_1');

		ent.PlayEffectSingle('ice_fire_sparks_trail');

		ent.PlayEffectSingle('runeword1_ice_trail_large');

		ent.PlayEffectSingle('runeword_ice_large');
	}
	else
	{
		ent.PlayEffectSingle('fire_sword_1');

		ent.PlayEffectSingle('fire_sparks_trail');

		ent.PlayEffectSingle('runeword1_fire_trail_large');

		ent.PlayEffectSingle('runeword_igni_large');
	}

	thePlayer.AddTag('ACS_Flammable_Oil_Enabled');

	ent.SoundEvent("fx_fire_geralt_fire_hit");

	ent.SoundEvent("fx_fire_burning_body_strong_loop");

	ent.SoundEvent("fx_fire_burning_strong_end");

	GetACSWatcher().RemoveTimer('RemoveFlammableOilTag');
	GetACSWatcher().AddTimer('RemoveFlammableOilTag', 10 + (10 * ACS_SignIntensityPercentage('total') * 0.5), false);


	ent_flame_fx = theGame.CreateEntity( (CEntityTemplate)LoadResource( 

	"dlc\dlc_acs\data\entities\other\fx_dummy_entity_ifrit.w2ent"

	, true ), ent.GetWorldPosition(), ent.GetWorldRotation() );

	ent_flame_fx.CreateAttachment( thePlayer, 'r_weapon', Vector( 0, 0, 0.125 ), EulerAngles(0,0,0) );

	if (ACS_GetItem_Winters_Blade_Held())
	{
		ent_flame_fx.PlayEffectSingle('hit_ice_fire');
	}
	else
	{
		ent_flame_fx.PlayEffectSingle('hit_fire');
	}

	ent_flame_fx.DestroyAfter(5);

	ent_ground_fx = theGame.CreateEntity( (CEntityTemplate)LoadResource( 

	"dlc\dlc_acs\data\fx\acs_sword_trail.w2ent"

	, true ), pos, rot );

	ent_ground_fx.AddTag('ACS_Fire_Sword_Ground_Fx_Ent');

	ent_ground_fx.CreateAttachment( thePlayer, , Vector( 1.5, 0, 0 ), EulerAngles(0,0,0) );

	if (ACS_GetItem_Winters_Blade_Held())
	{
		ent_ground_fx.PlayEffectSingle('golem_ground_ice_fire_fx');
	}
	else
	{
		ent_ground_fx.PlayEffectSingle('golem_ground_fire_fx');
	}

	if ( !theSound.SoundIsBankLoaded("mq_nml_1035.bnk") )
	{
		theSound.SoundLoadBank( "mq_nml_1035.bnk", false );
	}

	ACS_Tutorial_Display_Check('ACS_Way_Of_The_Flame_Tutorial_Shown');

	GetWitcherPlayer().SoundEvent("scene_weapon_sword_unsheat_fast");
	GetWitcherPlayer().SoundEvent("scene_weapon_sword_unsheat_fast");
	GetWitcherPlayer().SoundEvent("scene_weapon_sword_unsheat_fast");
	GetWitcherPlayer().SoundEvent("scene_weapon_sword_unsheat_fast");
	GetWitcherPlayer().SoundEvent("scene_weapon_sword_unsheat_fast");
}

function ACSCreateGhostSwordFX()
{
	var ent															    : CEntity;
	var rot                        						 				: EulerAngles;
	var pos																: Vector;

	ACSGetCEntity('ACS_Ghost_Sword_Ent').Destroy();

	rot = thePlayer.GetWorldRotation();

	pos = thePlayer.GetWorldPosition();

	ent = theGame.CreateEntity( (CEntityTemplate)LoadResource( 

	"dlc\dlc_acs\data\fx\acs_sword_slashes.w2ent"

	, true ), pos, rot );

	ent.AddTag('ACS_Ghost_Sword_Ent');

	ent.CreateAttachment( thePlayer, 'r_weapon', Vector( 0, 0, 0.5 ), EulerAngles(0,0,0) );

	ent.PlayEffectSingle('sword_slash');

	ent.PlayEffectSingle('sword_slash_red');

	//ent.PlayEffectSingle('sword_slash_red_large');
}

function ACSCreateGolemGroundFireFX( pos: Vector, rot: EulerAngles )
{
	var ent_ground_fx									          	  	: CEntity;
	
	pos.X += 1.5;

	ent_ground_fx = theGame.CreateEntity( (CEntityTemplate)LoadResource( 

	"dlc\dlc_acs\data\fx\acs_sword_trail.w2ent"

	, true ), pos, rot );

	if (ACS_GetItem_Winters_Blade_Held())
	{
		ent_ground_fx.PlayEffectSingle('golem_ground_ice_fire_fx');
	}
	else
	{
		if (RandF()<0.5)
		{
			ent_ground_fx.PlayEffectSingle('golem_fire_fx');
		}
		else
		{
			ent_ground_fx.PlayEffectSingle('golem_ground_fire_fx');
		}
	}

	ent_ground_fx.DestroyAfter(5);
}

function ACSCreateFireHitFX( pos: Vector, rot: EulerAngles )
{
	var ent_ground_fx									          	  	: CEntity;
	
	pos.Z += 1.5;

	ent_ground_fx = theGame.CreateEntity( (CEntityTemplate)LoadResource( 

	"dlc\dlc_acs\data\entities\other\fx_dummy_entity_ifrit.w2ent"

	, true ), pos, rot );

	if (ACS_GetItem_Winters_Blade_Held())
	{
		ent_ground_fx.PlayEffectSingle('hit_ice_fire');
	}
	else
	{
		ent_ground_fx.PlayEffectSingle('hit_fire');
	}

	ent_ground_fx.DestroyAfter(5);
}

class W3ACSRoachStash extends CInteractiveEntity
{
	event OnSpawned( spawnData : SEntitySpawnData )
	{
		super.OnSpawned( spawnData );

		AddTimer('RoachStashTeleport', 0.0001, true);
	}

	timer function RoachStashTeleport ( dt : float, id : int)
	{
		var horsePos 						: Vector;
		var horse 							: CNewNPC;

		horse = thePlayer.GetHorseWithInventory();

		if (!ACS_Settings_Main_Bool('EHmodVisualSettings','EHmodSwordsOnRoachEnabled', true)
		|| ACS_New_Replacers_Female_Active()
		|| !horse
		|| !horse.IsAlive()
		|| (!thePlayer.WasVisibleInScaledFrame( horse, 1.5f, 1.5f ) && VecDistanceSquared( thePlayer.GetWorldPosition(), horse.GetWorldPosition() ) > 900 )
		|| VecDistanceSquared( thePlayer.GetWorldPosition(), horse.GetWorldPosition() ) > 1600
		)
		{
			if (FactsQuerySum("ACS_Steel_Sword_Stashed_On_Roach") > 0)
			{
				ACS_SteelSwordTake();

				FactsRemove("ACS_Steel_Sword_Stashed_On_Roach");
			}

			if (FactsQuerySum("ACS_Silver_Sword_Stashed_On_Roach") > 0 )
			{
				ACS_SilverSwordTake();

				FactsRemove("ACS_Silver_Sword_Stashed_On_Roach");
			}

			if (FactsQuerySum("ACS_Crossbow_Stashed_On_Roach") > 0 )
			{
				ACS_CrossbowTake();

				FactsRemove("ACS_Crossbow_Stashed_On_Roach");
			}

			horsePos = thePlayer.GetWorldPosition() + Vector(0,0,-500);
		}
		else
		{
			horsePos = thePlayer.GetHorseWithInventory().GetWorldPosition() + thePlayer.GetHorseWithInventory().GetWorldForward() * -0.5;

			horsePos.Z += 1;
		}
		
		this.TeleportWithRotation(horsePos, thePlayer.GetWorldRotation());
	}

	public function ACS_RoachStashPlayerRotate()
	{
		var movementAdjustor 	: CMovementAdjustor;
		var ticket				: SMovementAdjustmentRequestTicket;

		movementAdjustor = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		movementAdjustor.CancelAll();
		
		ticket = movementAdjustor.CreateNewRequest( 'ACS_Roach_Stash_Rotate' );
			
		movementAdjustor.AdjustmentDuration( ticket, 0.25f );

		movementAdjustor.ShouldStartAt(ticket, thePlayer.GetWorldPosition());
		movementAdjustor.MaxRotationAdjustmentSpeed( ticket, 5000000 );
		movementAdjustor.MaxLocationAdjustmentSpeed( ticket, 5000000 );

		movementAdjustor.RotateTowards( ticket, this );
	}

	public function ACS_RoachSteelSwordDummy()
	{
		var steelid							: SItemUniqueId; 
		var swordsteel						: CEntity; 
		var steelcopy						: CEntity;
		
		if ( !theGame.GetEntityByTag('ACS_Roach_Stash_Steel_Sword_Dummy') )
		{
			thePlayer.GetInventory().GetItemEquippedOnSlot(EES_SteelSword, steelid);

			swordsteel = thePlayer.GetInventory().GetItemEntityUnsafe( steelid );

			steelcopy = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResource(

			swordsteel.GetReadableName()

			,true ), thePlayer.GetWorldPosition() -100, thePlayer.GetWorldRotation());

			steelcopy.AddTag('ACS_Roach_Stash_Steel_Sword_Dummy');
		}
	}

	public function ACS_RoachSteelScabbardDummy()
	{
		var scabbardscomp 									: CDrawableComponent;
		var i 												: int;
		var items 											: array<SItemUniqueId>;
		var meshComponent 									: CMeshComponent;
		var ent 											: CEntity;
		
		if ( !theGame.GetEntityByTag('ACS_Roach_Stash_Steel_Scabbard_Dummy') )
		{
			items = thePlayer.GetInventory().GetItemsByCategory('steel_scabbards');

			for ( i=0; i < items.Size() ; i+=1 )
			{
				scabbardscomp = (CDrawableComponent)((thePlayer.GetInventory().GetItemEntityUnsafe(items[i])).GetMeshComponent());

				ent = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResource(
						
				thePlayer.GetInventory().GetItemEntityUnsafe(items[i]).GetReadableName()

				,true ), thePlayer.GetWorldPosition()-100, thePlayer.GetWorldRotation());

				meshComponent = ( CMeshComponent ) ent.GetComponentByClassName( 'CMeshComponent' );

				meshComponent.SetScale( Vector( 1.03, 1.03, 1.03 ) );

				ent.AddTag('ACS_Roach_Stash_Steel_Scabbard_Dummy');
			}
		}
	}

	public function ACS_RoachSteelSwordAttachmentDummy()
	{
		var boneIndex 										: int;
		var boneName 										: name;
		var boneRotation									: EulerAngles;
		var bonePosition									: Vector;
		var dummycomp										: CEntity;
		var dummies											: array<CEntity>;
		var i : Int;
		
		//boneName = 'r_shoulder';
		//boneName = 'spine3';
		//boneName = 'pelvis';
		
		//boneName = 'spine2';
		//boneName = 'spine1';
		
		theGame.GetEntitiesByTag('ACS_Roach_Stash_Steel_Sword_Dummy_Attachment',dummies);
		
		for(i=0; i<dummies.Size(); i+=1)
		{
			dummies[i].Destroy();
		}
		
		if ( !theGame.GetEntityByTag('ACS_Roach_Stash_Steel_Sword_Dummy_Attachment') )
		{
			if ( ACS_Settings_Main_Int('EHmodVisualSettings','EHmodSwordsOnRoachPositioning', 3) == 2
			)
			{
				boneName = 'spine2';
			}
			else
			{
				boneName = 'spine1';
			}	
			
			boneIndex = thePlayer.GetHorseWithInventory().GetBoneIndex( boneName );	
			thePlayer.GetHorseWithInventory().GetBoneWorldPositionAndRotationByIndex( boneIndex, bonePosition, boneRotation );
			
			dummycomp = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResource( 

			"dlc\dlc_acs\data\fx\acs_ice_breathe_old.w2ent"

			,true ), thePlayer.GetWorldPosition()-100, thePlayer.GetWorldRotation());

			dummycomp.AddTag('ACS_Roach_Stash_Steel_Sword_Dummy_Attachment');

			dummycomp.CreateAttachmentAtBoneWS(thePlayer.GetHorseWithInventory(), boneName, bonePosition, boneRotation );
		}
	}

	public function ACS_ConfigureSteelSwordAttachment()
	{
		var steel_pos_x,steel_pos_y,steel_pos_z   									: Float;
		var steel_scab_pos_x,steel_scab_pos_y,steel_scab_pos_z  					: Float;
		var steel_roll, steel_pitch, steel_yaw 										: Float; 
		var steel_scab_roll, steel_scab_pitch, steel_scab_yaw						: Float; 
		var steel_on_roach_position													: Vector;
		var steel_on_roach_rotation 												: EulerAngles;
		var steel_scab_on_roach_position 											: Vector;
		var steel_scab_on_roach_rotation							 				: EulerAngles;

		if (ACS_Settings_Main_Int('EHmodVisualSettings','EHmodSwordsOnRoachPositioning', 3) == 0)
		{
			steel_pos_x = -0.17; 
			steel_pos_y = 0.82; 
			steel_pos_z = 0.4; 

			steel_pitch = -62; 
			steel_roll = -1; 
			steel_yaw = 3;

			steel_scab_pos_x = 0; 
			steel_scab_pos_y = 0; 
			steel_scab_pos_z = 0; 

			steel_scab_pitch = 0;
			steel_scab_roll = 0; 
			steel_scab_yaw = 0; 
		}
		else if (ACS_Settings_Main_Int('EHmodVisualSettings','EHmodSwordsOnRoachPositioning', 3) == 1)
		{
			steel_pos_x = 0.25; 
			steel_pos_y = 0.82; 
			steel_pos_z = 0.4; 

			steel_pitch = -110; 
			steel_roll = -1; 
			steel_yaw = 3;

			steel_scab_pos_x = 0; 
			steel_scab_pos_y = 0; 
			steel_scab_pos_z = 0; 

			steel_scab_pitch = 0;
			steel_scab_roll = 0; 
			steel_scab_yaw = 0; 
		}
		else if (ACS_Settings_Main_Int('EHmodVisualSettings','EHmodSwordsOnRoachPositioning', 3) == 2)
		{
			steel_pos_x = -0.48; 
			steel_pos_y = -0.02; 
			steel_pos_z = 0.32; 

			steel_pitch = 180; 
			steel_roll = 0; 
			steel_yaw = 0;

			steel_scab_pos_x = 0; 
			steel_scab_pos_y = 0; 
			steel_scab_pos_z = 0; 

			steel_scab_pitch = 0;
			steel_scab_roll = 0; 
			steel_scab_yaw = 0; 
		}
		else if (ACS_Settings_Main_Int('EHmodVisualSettings','EHmodSwordsOnRoachPositioning', 3) == 3)
		{
			steel_pos_x = -0.39; 
			steel_pos_y = 0.06; 
			steel_pos_z = 0.27; 

			steel_pitch = -85; 
			steel_roll = 0; 
			steel_yaw = 0;

			steel_scab_pos_x = 0; 
			steel_scab_pos_y = 0; 
			steel_scab_pos_z = 0; 

			steel_scab_pitch = 0;
			steel_scab_roll = 0; 
			steel_scab_yaw = 0; 
		}
		else if (ACS_Settings_Main_Int('EHmodVisualSettings','EHmodSwordsOnRoachPositioning', 3) == 4)
		{
			steel_pos_x = 0.42; 
			steel_pos_y = 0.00; 
			steel_pos_z = 0.23; 

			steel_pitch = -85; 
			steel_roll = 10; 
			steel_yaw = 0;

			steel_scab_pos_x = 0; 
			steel_scab_pos_y = 0; 
			steel_scab_pos_z = 0; 

			steel_scab_pitch = 0;
			steel_scab_roll = 0; 
			steel_scab_yaw = 0; 
		}
		else if (ACS_Settings_Main_Int('EHmodVisualSettings','EHmodSwordsOnRoachPositioning', 3) == 5)
		{
			steel_pos_x = 0.40; 
			steel_pos_y = -0.2; 
			steel_pos_z = 0.25; 

			steel_pitch = -80; 
			steel_roll = 40; 
			steel_yaw = 0;

			steel_scab_pos_x = 0; 
			steel_scab_pos_y = 0; 
			steel_scab_pos_z = 0; 

			steel_scab_pitch = 0;
			steel_scab_roll = 0; 
			steel_scab_yaw = 0; 
		}
		else if (ACS_Settings_Main_Int('EHmodVisualSettings','EHmodSwordsOnRoachPositioning', 3) == 6)
		{
			steel_pos_x = -0.38; 
			steel_pos_y = 0.54; 
			steel_pos_z = 0.10; 

			steel_pitch = -85; 
			steel_roll = -66; 
			steel_yaw = -5;

			steel_scab_pos_x = 0; 
			steel_scab_pos_y = 0; 
			steel_scab_pos_z = 0; 

			steel_scab_pitch = 0;
			steel_scab_roll = 0; 
			steel_scab_yaw = 0; 
		}

		steel_on_roach_position.X = 0;    
		steel_on_roach_position.Y = 0;    
		steel_on_roach_position.Z = 0;     

		steel_on_roach_rotation.Pitch = 0;
		steel_on_roach_rotation.Roll = 0;
		steel_on_roach_rotation.Yaw = 0;
		
		steel_on_roach_position.X += steel_pos_y;
		steel_on_roach_position.Y -= steel_pos_z;
		steel_on_roach_position.Z -= steel_pos_x;

		steel_on_roach_rotation.Pitch += steel_pitch;
		steel_on_roach_rotation.Roll += steel_roll;
		steel_on_roach_rotation.Yaw += steel_yaw;
		
		ACSGetCEntity('ACS_Roach_Stash_Steel_Sword_Dummy').CreateAttachment( ACSGetCEntity('ACS_Roach_Stash_Steel_Sword_Dummy_Attachment'),,steel_on_roach_position, steel_on_roach_rotation );

		steel_scab_on_roach_position.X = 0;
		steel_scab_on_roach_position.Y = 0; 
		steel_scab_on_roach_position.Z = 0;

		steel_scab_on_roach_rotation.Pitch = 0;
		steel_scab_on_roach_rotation.Roll = 0;
		steel_scab_on_roach_rotation.Yaw = 0;

		steel_scab_on_roach_position.X += 0.61;
		steel_scab_on_roach_position.Y -= 0.09; 	
		steel_scab_on_roach_position.Z -= -1.71;

		steel_scab_on_roach_rotation.Pitch += 180;       
		steel_scab_on_roach_rotation.Roll += -24.3;      
		steel_scab_on_roach_rotation.Yaw += 14.4 + 0.41;
		
		steel_scab_on_roach_position.X += steel_scab_pos_x;
		steel_scab_on_roach_position.Y -= steel_scab_pos_y;
		steel_scab_on_roach_position.Z -= steel_scab_pos_z;

		steel_scab_on_roach_rotation.Pitch += steel_scab_pitch;
		steel_scab_on_roach_rotation.Roll += steel_scab_roll; 
		steel_scab_on_roach_rotation.Yaw += steel_scab_yaw;   

		ACSGetCEntity('ACS_Roach_Stash_Steel_Scabbard_Dummy').CreateAttachment( ACSGetCEntity('ACS_Roach_Stash_Steel_Sword_Dummy'),,steel_scab_on_roach_position, steel_scab_on_roach_rotation );
	}

	public function ACS_SteelSwordStash()
	{
		var steel_sword_id 																	: SItemUniqueId;

		if (GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_SteelSword))
		{
			ACS_RoachSteelSwordAttachmentDummy();

			ACS_RoachSteelSwordDummy();

			ACS_RoachSteelScabbardDummy();

			ACS_ConfigureSteelSwordAttachment();

			thePlayer.inv.GetItemEquippedOnSlot(EES_SteelSword, steel_sword_id);

			if( !thePlayer.inv.ItemHasTag( steel_sword_id, 'ACS_Steel_Sword_To_Equip' ))
			{
				thePlayer.inv.AddItemTag( steel_sword_id, 'ACS_Steel_Sword_To_Equip' );
			}

			thePlayer.UnequipItem(steel_sword_id);

			thePlayer.inv.GiveItemTo( GetACSRoachStashContainer().GetInventory(), steel_sword_id, 1, false, , false);
		}
	}

	public function ACS_SteelSwordTake()
	{
		var itemIds 																									: array<SItemUniqueId>;
		var i 																											: int;
		var steelSwordItemIds 																							: array<SItemUniqueId>;
		var steelSwordItemId, steel_sword_id_old																		: SItemUniqueId;
		var steel_sword_i 																								: int;

		itemIds = GetACSRoachStashContainer().GetInventory().GetItemsByTag( 'ACS_Steel_Sword_To_Equip' );

		if (itemIds.Size() > 0)
		{
			for( i = 0; i < itemIds.Size() ; i+=1 )
			{
				GetACSRoachStashContainer().GetInventory().GiveItemTo( thePlayer.inv, itemIds[i], 1, false, true, false);
			}
		}

		thePlayer.inv.GetAllItems(steelSwordItemIds);

		for( steel_sword_i = 0; steel_sword_i < steelSwordItemIds.Size() ; steel_sword_i+=1 )
		{
			if( thePlayer.inv.ItemHasTag( steelSwordItemIds[steel_sword_i], 'ACS_Steel_Sword_To_Equip' ) )
			{
				if (GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_SteelSword))
				{
					thePlayer.inv.GetItemEquippedOnSlot(EES_SteelSword, steel_sword_id_old);

					thePlayer.UnequipItem(steel_sword_id_old);
				}

				steelSwordItemId = steelSwordItemIds[steel_sword_i];

				thePlayer.EquipItem(steelSwordItemId);

				thePlayer.inv.RemoveItemTag( steelSwordItemIds[steel_sword_i], 'ACS_Steel_Sword_To_Equip' );
			}
		}

		ACSGetCEntity('ACS_Roach_Stash_Steel_Scabbard_Dummy').Destroy();
		ACSGetCEntity('ACS_Roach_Stash_Steel_Sword_Dummy').Destroy();
		ACSGetCEntity('ACS_Roach_Stash_Steel_Sword_Dummy_Attachment').Destroy();
	}

	public function ACS_RoachSilverSwordDummy()
	{
		var silverid						: SItemUniqueId; 
		var swordsilver						: CEntity; 
		var silvercopy						: CEntity;
		
		if ( !theGame.GetEntityByTag('ACS_Roach_Stash_Silver_Sword_Dummy') )
		{
			thePlayer.GetInventory().GetItemEquippedOnSlot(EES_SilverSword, silverid);

			swordsilver = thePlayer.GetInventory().GetItemEntityUnsafe( silverid );

			silvercopy = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResource(

			swordsilver.GetReadableName()

			,true ), thePlayer.GetWorldPosition()-100, thePlayer.GetWorldRotation());

			silvercopy.AddTag('ACS_Roach_Stash_Silver_Sword_Dummy');
		}
	}

	public function ACS_RoachSilverScabbardDummy()
	{
		var scabbardscomp_s 								: CDrawableComponent;
		var i 												: int;
		var items 											: array<SItemUniqueId>;
		var meshComponent 									: CMeshComponent;
		var ent_s 											: CEntity;
		
		if ( !theGame.GetEntityByTag('ACS_Roach_Stash_Silver_Scabbard_Dummy') )
		{
			thePlayer.GetInventory().GetAllItems(items);	
			for(i=0; i<items.Size(); i+=1)
			{	
				if ( thePlayer.GetInventory().GetItemCategory(items[i]) == 'silver_scabbards' )
				{
					scabbardscomp_s = (CDrawableComponent)((thePlayer.GetInventory().GetItemEntityUnsafe(items[i])).GetMeshComponent());

					ent_s = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResource(

					thePlayer.GetInventory().GetItemEntityUnsafe(items[i]).GetReadableName()

					,true ), thePlayer.GetWorldPosition()-100, thePlayer.GetWorldRotation());

					meshComponent = ( CMeshComponent ) ent_s.GetComponentByClassName( 'CMeshComponent' );

					meshComponent.SetScale( Vector( 1.03, 1.03, 1.03 ) );

					ent_s.AddTag('ACS_Roach_Stash_Silver_Scabbard_Dummy');
				}
			}
		}
	}

	public function ACS_RoachSilverSwordAttachmentDummy()
	{
		var boneIndex 										: int;
		var boneName 										: name;
		var boneRotation									: EulerAngles;
		var bonePosition									: Vector;
		var dummycomp										: CEntity;
		var dummies											: array<CEntity>;
		var i : Int;
		
		//boneName = 'r_shoulder';
		//boneName = 'spine3';
		//boneName = 'pelvis';
		
		//boneName = 'spine2';
		//boneName = 'spine1';
		
		theGame.GetEntitiesByTag('ACS_Roach_Stash_Silver_Sword_Dummy_Attachment',dummies);
		
		for(i=0; i<dummies.Size(); i+=1)
		{
			dummies[i].Destroy();
		}
		
		if ( !theGame.GetEntityByTag('ACS_Roach_Stash_Silver_Sword_Dummy_Attachment') )
		{
			if ( ACS_Settings_Main_Int('EHmodVisualSettings','EHmodSwordsOnRoachPositioning', 3) == 2
			)
			{
				boneName = 'spine2';
			}
			else
			{
				boneName = 'spine1';
			}	
			
			boneIndex = thePlayer.GetHorseWithInventory().GetBoneIndex( boneName );	
			thePlayer.GetHorseWithInventory().GetBoneWorldPositionAndRotationByIndex( boneIndex, bonePosition, boneRotation );
			
			dummycomp = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResource( 

			"dlc\dlc_acs\data\fx\acs_ice_breathe_old.w2ent"

			,true ), thePlayer.GetWorldPosition()-100, thePlayer.GetWorldRotation());

			dummycomp.AddTag('ACS_Roach_Stash_Silver_Sword_Dummy_Attachment');

			dummycomp.CreateAttachmentAtBoneWS(thePlayer.GetHorseWithInventory(), boneName, bonePosition, boneRotation );
		}
	}

	public function ACS_ConfigureSilverSwordAttachment()
	{
		var silver_pos_x,silver_pos_y,silver_pos_z   								: Float;
		var silver_scab_pos_x,silver_scab_pos_y,silver_scab_pos_z  					: Float;
		var silver_roll, silver_pitch, silver_yaw 									: Float; 
		var silver_scab_roll,silver_scab_pitch,silver_scab_yaw						: Float; 
		var silver_on_roach_position												: Vector;
		var silver_on_roach_rotation 												: EulerAngles;
		var silver_scab_on_roach_position 											: Vector;
		var silver_scab_on_roach_rotation 											: EulerAngles;

		if (ACS_Settings_Main_Int('EHmodVisualSettings','EHmodSwordsOnRoachPositioning', 3) == 0)
		{
			silver_pos_x = -0.2; 
			silver_pos_y = 0.70; 
			silver_pos_z = 0.4; 

			silver_pitch = -62; 
			silver_roll = 0; 
			silver_yaw = 0;

			silver_scab_pos_x = 0; 
			silver_scab_pos_y = 0; 
			silver_scab_pos_z = 0; 

			silver_scab_pitch = 0;
			silver_scab_roll = 0; 
			silver_scab_yaw = 0; 
		}
		else if (ACS_Settings_Main_Int('EHmodVisualSettings','EHmodSwordsOnRoachPositioning', 3) == 1)
		{
			silver_pos_x = 0.3; 
			silver_pos_y = 0.70; 
			silver_pos_z = 0.4; 

			silver_pitch = -105; 
			silver_roll = 0; 
			silver_yaw = 0;

			silver_scab_pos_x = 0; 
			silver_scab_pos_y = 0; 
			silver_scab_pos_z = 0; 

			silver_scab_pitch = 0;
			silver_scab_roll = 0; 
			silver_scab_yaw = 0; 
		}
		else if (ACS_Settings_Main_Int('EHmodVisualSettings','EHmodSwordsOnRoachPositioning', 3) == 2)
		{
			silver_pos_x = -0.35; 
			silver_pos_y = 0.05; 
			silver_pos_z = 0.29; 

			silver_pitch = 180; 
			silver_roll = 0; 
			silver_yaw = 0;

			silver_scab_pos_x = 0; 
			silver_scab_pos_y = 0; 
			silver_scab_pos_z = 0; 

			silver_scab_pitch = 0;
			silver_scab_roll = 0; 
			silver_scab_yaw = 0; 
		}
		else if (ACS_Settings_Main_Int('EHmodVisualSettings','EHmodSwordsOnRoachPositioning', 3) == 3)
		{
			silver_pos_x = -0.34; 
			silver_pos_y = -0.01; 
			silver_pos_z = 0.32; 

			silver_pitch = -85; 
			silver_roll = 0; 
			silver_yaw = 0;

			silver_scab_pos_x = 0; 
			silver_scab_pos_y = 0; 
			silver_scab_pos_z = 0; 

			silver_scab_pitch = 0;
			silver_scab_roll = 0; 
			silver_scab_yaw = 0; 
		}
		else if (ACS_Settings_Main_Int('EHmodVisualSettings','EHmodSwordsOnRoachPositioning', 3) == 4)
		{
			silver_pos_x = 0.37; 
			silver_pos_y = -0.01; 
			silver_pos_z = 0.27; 

			silver_pitch = -85; 
			silver_roll = 10; 
			silver_yaw = 0;

			silver_scab_pos_x = 0; 
			silver_scab_pos_y = 0; 
			silver_scab_pos_z = 0; 

			silver_scab_pitch = 0;
			silver_scab_roll = 0; 
			silver_scab_yaw = 0; 
		}
		else if (ACS_Settings_Main_Int('EHmodVisualSettings','EHmodSwordsOnRoachPositioning', 3) == 5)
		{
			silver_pos_x = -0.36; 
			silver_pos_y = -0.18; 
			silver_pos_z = 0.30; 

			silver_pitch = -88; 
			silver_roll = 40; 
			silver_yaw = -5;

			silver_scab_pos_x = 0; 
			silver_scab_pos_y = 0; 
			silver_scab_pos_z = 0; 

			silver_scab_pitch = 0;
			silver_scab_roll = 0; 
			silver_scab_yaw = 0; 
		}
		else if (ACS_Settings_Main_Int('EHmodVisualSettings','EHmodSwordsOnRoachPositioning', 3) == 6)
		{
			silver_pos_x = -0.36; 
			silver_pos_y = 0.53; 
			silver_pos_z = 0.00; 

			silver_pitch = -85; 
			silver_roll = -75; 
			silver_yaw = -4;

			silver_scab_pos_x = 0; 
			silver_scab_pos_y = 0; 
			silver_scab_pos_z = 0; 

			silver_scab_pitch = 0;
			silver_scab_roll = 0; 
			silver_scab_yaw = 0; 
		}

		silver_on_roach_position.X = 0;    
		silver_on_roach_position.Y = 0;    
		silver_on_roach_position.Z = 0;     

		silver_on_roach_rotation.Pitch = 0;
		silver_on_roach_rotation.Roll = 0;
		silver_on_roach_rotation.Yaw = 0;
		
		silver_on_roach_position.X += silver_pos_y;
		silver_on_roach_position.Y -= silver_pos_z;
		silver_on_roach_position.Z -= silver_pos_x;

		silver_on_roach_rotation.Pitch += silver_pitch;
		silver_on_roach_rotation.Roll += silver_roll;
		silver_on_roach_rotation.Yaw += silver_yaw;
		
		ACSGetCEntity('ACS_Roach_Stash_Silver_Sword_Dummy').CreateAttachment( ACSGetCEntity('ACS_Roach_Stash_Silver_Sword_Dummy_Attachment'),,silver_on_roach_position, silver_on_roach_rotation );

		silver_scab_on_roach_position.X = 0;
		silver_scab_on_roach_position.Y = 0; 
		silver_scab_on_roach_position.Z = 0;

		silver_scab_on_roach_rotation.Pitch = 0;
		silver_scab_on_roach_rotation.Roll = 0;
		silver_scab_on_roach_rotation.Yaw = 0;

		silver_scab_on_roach_position.X += 0.61 + 0.025; 
		silver_scab_on_roach_position.Y -= 0.09 - 0.1;  
		silver_scab_on_roach_position.Z -= -1.71 + 0.07;   

		silver_scab_on_roach_rotation.Pitch += 180 - 1.5;
		silver_scab_on_roach_rotation.Roll += -24.3 - 5.5;
		silver_scab_on_roach_rotation.Yaw += 14.4 + 4;
		
		silver_scab_on_roach_position.X += silver_scab_pos_x;
		silver_scab_on_roach_position.Y -= silver_scab_pos_y;
		silver_scab_on_roach_position.Z -= silver_scab_pos_z;

		silver_scab_on_roach_rotation.Pitch += silver_scab_pitch;
		silver_scab_on_roach_rotation.Roll += silver_scab_roll; 
		silver_scab_on_roach_rotation.Yaw += silver_scab_yaw;   
		
		ACSGetCEntity('ACS_Roach_Stash_Silver_Scabbard_Dummy').CreateAttachment( ACSGetCEntity('ACS_Roach_Stash_Silver_Sword_Dummy'),,silver_scab_on_roach_position, silver_scab_on_roach_rotation );
	}

	public function ACS_SilverSwordStash()
	{
		var silver_sword_id 																	: SItemUniqueId;

		if (GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_SilverSword))
		{
			ACS_RoachSilverSwordAttachmentDummy();

			ACS_RoachSilverSwordDummy();

			ACS_RoachSilverScabbardDummy();

			ACS_ConfigureSilverSwordAttachment();

			thePlayer.inv.GetItemEquippedOnSlot(EES_SilverSword, silver_sword_id);

			if( !thePlayer.inv.ItemHasTag( silver_sword_id, 'ACS_Silver_Sword_To_Equip' ))
			{
				thePlayer.inv.AddItemTag( silver_sword_id, 'ACS_Silver_Sword_To_Equip' );
			}

			thePlayer.UnequipItem(silver_sword_id);

			thePlayer.inv.GiveItemTo( GetACSRoachStashContainer().GetInventory(), silver_sword_id, 1, false, , false);
		}
	}

	public function ACS_SilverSwordTake()
	{
		var itemIds 																									: array<SItemUniqueId>;
		var i 																											: int;
		var silverSwordItemIds 																							: array<SItemUniqueId>;
		var silverSwordItemId, silver_sword_id_old																		: SItemUniqueId;
		var silver_sword_i 																								: int;

		itemIds = GetACSRoachStashContainer().GetInventory().GetItemsByTag( 'ACS_Silver_Sword_To_Equip' );

		if (itemIds.Size() > 0)
		{
			for( i = 0; i < itemIds.Size() ; i+=1 )
			{
				GetACSRoachStashContainer().GetInventory().GiveItemTo( thePlayer.inv, itemIds[i], 1, false, true, false);
			}
		}

		thePlayer.inv.GetAllItems(silverSwordItemIds);

		for( silver_sword_i = 0; silver_sword_i < silverSwordItemIds.Size() ; silver_sword_i+=1 )
		{
			if( thePlayer.inv.ItemHasTag( silverSwordItemIds[silver_sword_i], 'ACS_Silver_Sword_To_Equip' ) )
			{
				if (GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_SilverSword))
				{
					thePlayer.inv.GetItemEquippedOnSlot(EES_SilverSword, silver_sword_id_old);

					thePlayer.UnequipItem(silver_sword_id_old);
				}

				silverSwordItemId = silverSwordItemIds[silver_sword_i];

				thePlayer.EquipItem(silverSwordItemId);

				thePlayer.inv.RemoveItemTag( silverSwordItemIds[silver_sword_i], 'ACS_Silver_Sword_To_Equip' );
			}
		}

		ACSGetCEntity('ACS_Roach_Stash_Silver_Sword_Dummy').Destroy();
		ACSGetCEntity('ACS_Roach_Stash_Silver_Scabbard_Dummy').Destroy();
		ACSGetCEntity('ACS_Roach_Stash_Silver_Sword_Dummy_Attachment').Destroy();
	}

	public function ACS_CrossbowStash()
	{
		var crossbow_id 																	: SItemUniqueId;

		if (GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_RangedWeapon))
		{
			thePlayer.inv.GetItemEquippedOnSlot(EES_RangedWeapon, crossbow_id);

			if( !thePlayer.inv.ItemHasTag( crossbow_id, 'ACS_Crossbow_To_Equip' ))
			{
				thePlayer.inv.AddItemTag( crossbow_id, 'ACS_Crossbow_To_Equip' );
			}

			thePlayer.UnequipItem(crossbow_id);

			thePlayer.inv.GiveItemTo( GetACSRoachStashContainer().GetInventory(), crossbow_id, 1, false, , false);
		}
	}

	public function ACS_CrossbowTake()
	{
		var itemIds 																									: array<SItemUniqueId>;
		var i 																											: int;
		var crossbowItemIds 																							: array<SItemUniqueId>;
		var crossbowItemId, crossbow_id_old																				: SItemUniqueId;
		var crossbow_i 																									: int;

		itemIds = GetACSRoachStashContainer().GetInventory().GetItemsByTag( 'ACS_Crossbow_To_Equip' );

		if (itemIds.Size() > 0)
		{
			for( i = 0; i < itemIds.Size() ; i+=1 )
			{
				GetACSRoachStashContainer().GetInventory().GiveItemTo( thePlayer.inv, itemIds[i], 1, false, true, false);
			}
		}

		thePlayer.inv.GetAllItems(crossbowItemIds);

		for( crossbow_i = 0; crossbow_i < crossbowItemIds.Size() ; crossbow_i+=1 )
		{
			if( thePlayer.inv.ItemHasTag( crossbowItemIds[crossbow_i], 'ACS_Crossbow_To_Equip' ) )
			{
				if (GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_RangedWeapon))
				{
					thePlayer.inv.GetItemEquippedOnSlot(EES_RangedWeapon, crossbow_id_old);

					thePlayer.UnequipItem(crossbow_id_old);
				}

				crossbowItemId = crossbowItemIds[crossbow_i];

				thePlayer.EquipItem(crossbowItemId);

				thePlayer.inv.RemoveItemTag( crossbowItemIds[crossbow_i], 'ACS_Crossbow_To_Equip' );
			}
		}
	}

	event OnInteraction( actionName : string, activator : CEntity )
	{
		var distance 																							: float;

		distance = VecDistanceSquared2D( thePlayer.GetWorldPosition(), this.GetWorldPosition() ) ;

		if( distance > 1 ) 
		{
			ACS_Tutorial_Display_Check('ACS_Swords_On_Roach_Tutorial_Shown');

			return false;
		}

		if(activator != GetWitcherPlayer())
		{
			return false;
		}

		if ( FactsQuerySum("ACS_Dummy_Swords_Enabled") > 0 )
		{
			FactsRemove("ACS_Dummy_Swords_Enabled");
		}

		if (ACSGetCEntity('ACS_SwordOnHip_Dummy_Attachment'))
		{
			ACSGetCEntity('ACS_SwordOnHip_Dummy_Attachment').Destroy();
		}

		if (ACSGetCEntity('ACS_SwordOnHip_Steel_Sword_Dummy'))
		{
			ACSGetCEntity('ACS_SwordOnHip_Steel_Sword_Dummy').Destroy();
		}
		
		if (ACSGetCEntity('ACS_SwordOnHip_Steel_Scabbard_Dummy'))
		{
			ACSGetCEntity('ACS_SwordOnHip_Steel_Scabbard_Dummy').Destroy();
		}

		if (ACSGetCEntity('ACS_SwordOnHip_Silver_Sword_Dummy'))
		{
			ACSGetCEntity('ACS_SwordOnHip_Silver_Sword_Dummy').Destroy();
		}
		
		if (ACSGetCEntity('ACS_SwordOnHip_Silver_Scabbard_Dummy'))
		{
			ACSGetCEntity('ACS_SwordOnHip_Silver_Scabbard_Dummy').Destroy();
		}

		if (theInput.GetActionValue('SteelSword') > 0)
		{
			ACS_Tutorial_Display_Check('ACS_Swords_On_Roach_Tutorial_Shown');

			if (FactsQuerySum("ACS_Steel_Sword_Stashed_On_Roach") <= 0 && GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_SteelSword))
			{
				ACS_RoachStashPlayerRotate();

				GetACSWatcher().PlayerPlayAnimation('man_work_sword_forge_put_away_sword');

				ACS_SteelSwordStash();

				FactsAdd("ACS_Steel_Sword_Stashed_On_Roach", 1, -1);
			}
			else if (FactsQuerySum("ACS_Steel_Sword_Stashed_On_Roach") > 0 && !GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_SteelSword))
			{
				if (!GetACSRoachStashContainerExists())
				{
					return false;
				}

				ACS_RoachStashPlayerRotate();

				GetACSWatcher().PlayerPlayAnimation('geralt_touching_wall');

				ACS_SteelSwordTake();

				FactsRemove("ACS_Steel_Sword_Stashed_On_Roach");
			}

			return false;
		}

		if (theInput.GetActionValue('SilverSword') > 0)
		{
			ACS_Tutorial_Display_Check('ACS_Swords_On_Roach_Tutorial_Shown');

			if (FactsQuerySum("ACS_Silver_Sword_Stashed_On_Roach") <= 0 && GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_SilverSword))
			{
				ACS_RoachStashPlayerRotate();

				GetACSWatcher().PlayerPlayAnimation('man_work_sword_forge_put_away_sword');

				ACS_SilverSwordStash();

				FactsAdd("ACS_Silver_Sword_Stashed_On_Roach", 1, -1);
			}
			else if (FactsQuerySum("ACS_Silver_Sword_Stashed_On_Roach") > 0 && !GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_SilverSword))
			{
				if (!GetACSRoachStashContainerExists())
				{
					return false;
				}

				ACS_RoachStashPlayerRotate();

				GetACSWatcher().PlayerPlayAnimation('geralt_touching_wall');

				ACS_SilverSwordTake();

				FactsRemove("ACS_Silver_Sword_Stashed_On_Roach");
			}

			return false;
		}

		if (!ACSGetCEntity('ACS_Roach_Stash_Steel_Sword_Dummy')
		&& !ACSGetCEntity('ACS_Roach_Stash_Silver_Sword_Dummy')
		)
		{
			if (FactsQuerySum("ACS_Crossbow_Stashed_On_Roach") > 0 && !GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_RangedWeapon))
			{
				if (!GetACSRoachStashContainerExists())
				{
					return false;
				}

				ACS_Tutorial_Display_Check('ACS_Swords_On_Roach_Tutorial_Shown');

				ACS_RoachStashPlayerRotate();

				GetACSWatcher().PlayerPlayAnimation('geralt_touching_wall');

				ACS_CrossbowTake();

				FactsRemove("ACS_Crossbow_Stashed_On_Roach");
			}
			else
			{
				if (FactsQuerySum("ACS_Steel_Sword_Stashed_On_Roach") <= 0 && GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_SteelSword))
				{
					ACS_Tutorial_Display_Check('ACS_Swords_On_Roach_Tutorial_Shown');

					ACS_RoachStashPlayerRotate();

					GetACSWatcher().PlayerPlayAnimation('man_work_sword_forge_put_away_sword');

					ACS_SteelSwordStash();

					FactsAdd("ACS_Steel_Sword_Stashed_On_Roach", 1, -1);
				}
				else
				{
					if (FactsQuerySum("ACS_Silver_Sword_Stashed_On_Roach") <= 0 && GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_SilverSword))
					{
						ACS_Tutorial_Display_Check('ACS_Swords_On_Roach_Tutorial_Shown');

						ACS_RoachStashPlayerRotate();

						GetACSWatcher().PlayerPlayAnimation('man_work_sword_forge_put_away_sword');

						ACS_SilverSwordStash();

						FactsAdd("ACS_Silver_Sword_Stashed_On_Roach", 1, -1);
					}
				}
			}
		}
		else if (ACSGetCEntity('ACS_Roach_Stash_Steel_Sword_Dummy')
		&& !ACSGetCEntity('ACS_Roach_Stash_Silver_Sword_Dummy')
		)
		{
			if (FactsQuerySum("ACS_Silver_Sword_Stashed_On_Roach") <= 0 && GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_SilverSword))
			{
				ACS_Tutorial_Display_Check('ACS_Swords_On_Roach_Tutorial_Shown');

				ACS_RoachStashPlayerRotate();

				GetACSWatcher().PlayerPlayAnimation('man_work_sword_forge_put_away_sword');

				ACS_SilverSwordStash();

				FactsAdd("ACS_Silver_Sword_Stashed_On_Roach", 1, -1);
			}
			else
			{
				if (FactsQuerySum("ACS_Crossbow_Stashed_On_Roach") <= 0 && GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_RangedWeapon))
				{
					ACS_Tutorial_Display_Check('ACS_Swords_On_Roach_Tutorial_Shown');

					ACS_RoachStashPlayerRotate();

					GetACSWatcher().PlayerPlayAnimation('man_work_sword_forge_put_away_sword');

					ACS_CrossbowStash();

					FactsAdd("ACS_Crossbow_Stashed_On_Roach", 1, -1);
				}
				else
				{
					if (FactsQuerySum("ACS_Steel_Sword_Stashed_On_Roach") > 0 && !GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_SteelSword))
					{
						if (!GetACSRoachStashContainerExists())
						{
							return false;
						}

						ACS_Tutorial_Display_Check('ACS_Swords_On_Roach_Tutorial_Shown');

						ACS_RoachStashPlayerRotate();

						GetACSWatcher().PlayerPlayAnimation('geralt_touching_wall');

						ACS_SteelSwordTake();

						FactsRemove("ACS_Steel_Sword_Stashed_On_Roach");
					}
				}
			}
		}
		else if (ACSGetCEntity('ACS_Roach_Stash_Steel_Sword_Dummy')
		&& ACSGetCEntity('ACS_Roach_Stash_Silver_Sword_Dummy')
		)
		{
			if (FactsQuerySum("ACS_Crossbow_Stashed_On_Roach") <= 0 && GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_RangedWeapon))
			{
				ACS_Tutorial_Display_Check('ACS_Swords_On_Roach_Tutorial_Shown');

				ACS_RoachStashPlayerRotate();

				GetACSWatcher().PlayerPlayAnimation('man_work_sword_forge_put_away_sword');

				ACS_CrossbowStash();

				FactsAdd("ACS_Crossbow_Stashed_On_Roach", 1, -1);
			}
			else
			{
				if (FactsQuerySum("ACS_Steel_Sword_Stashed_On_Roach") > 0 && !GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_SteelSword))
				{
					if (!GetACSRoachStashContainerExists())
					{
						return false;
					}

					ACS_Tutorial_Display_Check('ACS_Swords_On_Roach_Tutorial_Shown');

					ACS_RoachStashPlayerRotate();

					GetACSWatcher().PlayerPlayAnimation('geralt_touching_wall');

					ACS_SteelSwordTake();

					FactsRemove("ACS_Steel_Sword_Stashed_On_Roach");
				}
			}
		}
		else if (!ACSGetCEntity('ACS_Roach_Stash_Steel_Sword_Dummy')
		&& ACSGetCEntity('ACS_Roach_Stash_Silver_Sword_Dummy')
		)
		{
			if (!GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_SteelSword))
			{
				if (FactsQuerySum("ACS_Crossbow_Stashed_On_Roach") <= 0 && GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_RangedWeapon))
				{
					ACS_Tutorial_Display_Check('ACS_Swords_On_Roach_Tutorial_Shown');

					ACS_RoachStashPlayerRotate();

					GetACSWatcher().PlayerPlayAnimation('man_work_sword_forge_put_away_sword');

					ACS_CrossbowStash();

					FactsAdd("ACS_Crossbow_Stashed_On_Roach", 1, -1);
				}
				else
				{
					if (FactsQuerySum("ACS_Crossbow_Stashed_On_Roach") > 0 && !GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_RangedWeapon))
					{
						if (!GetACSRoachStashContainerExists())
						{
							return false;
						}

						ACS_Tutorial_Display_Check('ACS_Swords_On_Roach_Tutorial_Shown');

						ACS_RoachStashPlayerRotate();

						GetACSWatcher().PlayerPlayAnimation('geralt_touching_wall');

						ACS_CrossbowTake();

						FactsRemove("ACS_Crossbow_Stashed_On_Roach");
					}
				}
			}
			else
			{
				if (FactsQuerySum("ACS_Silver_Sword_Stashed_On_Roach") > 0 && !GetWitcherPlayer().IsAnyItemEquippedOnSlot(EES_SilverSword))
				{
					if (!GetACSRoachStashContainerExists())
					{
						return false;
					}

					ACS_Tutorial_Display_Check('ACS_Swords_On_Roach_Tutorial_Shown');

					ACS_RoachStashPlayerRotate();

					GetACSWatcher().PlayerPlayAnimation('geralt_touching_wall');

					ACS_SilverSwordTake();

					FactsRemove("ACS_Silver_Sword_Stashed_On_Roach");
				}
			}
		}
	}
}

class W3ACSRoachStashContainer extends W3Container
{
	editable var animationForAllInteractions 	: bool;							default animationForAllInteractions = true;
	editable var interactionName				: string;						default interactionName = "Container";
	editable var holsterWeaponAtTheBeginning	: bool;							default holsterWeaponAtTheBeginning = true;
	editable var interactionAnim				: EPlayerExplorationAction;		default interactionAnim	= PEA_None;
	editable var slotAnimName 					: name;							default slotAnimName = '';
	editable var interactionAnimTime			: float;						default interactionAnimTime	= 4.0f;
	
	
	editable var desiredPlayerToEntityDistance	: float;						default desiredPlayerToEntityDistance = -1;
	editable var matchPlayerHeadingWithHeadingOfTheEntity	: bool;				default matchPlayerHeadingWithHeadingOfTheEntity = true;
	
	editable var attachThisObjectOnAnimEvent	: bool;							default attachThisObjectOnAnimEvent = false;
	editable var attachSlotName					: name; 						default attachSlotName = 'r_weapon';
	editable var attachAnimName 				: name; 						default attachAnimName = 'attach_item';
	editable var detachAnimName 				: name; 						default detachAnimName = 'detach_item';
	
	
	
	hint interactionAnim = "Name of the animation played on interaction.";
	hint interactionAnimTime = "Duration of the animation played on interaction.";
	hint animationForAllInteractions = "Should the animation be played only for interaction with Examine action assigned.";
	hint attachThisObjectOnAnimEvent = "";
	hint desiredPlayerToEntityDistance = "if set to < 0 palyer will stay in position where interaction was pressed";
	
	event OnSpawned( spawnData : SEntitySpawnData )
	{
		super.OnSpawned( spawnData );

		CheckInventorySteel();

		CheckInventorySilver();

		CheckInventoryCrossbow();
	}

	private function CheckInventorySteel()
	{
		var itemIds 																									: array<SItemUniqueId>;
		var i 																											: int;
		var swordsteel																									: CEntity; 

		itemIds = GetInventory().GetItemsByTag( 'PlayerSteelWeapon' );

		if (itemIds.Size() > 0)
		{
			for( i = 0; i < itemIds.Size() ; i+=1 )
			{
				swordsteel = GetInventory().GetItemEntityUnsafe( itemIds[i] );

				LogChannel('ACS_Container_Steelsword_Path', swordsteel.GetReadableName());

				if( !GetInventory().ItemHasTag( itemIds[i], 'ACS_Steel_Sword_To_Equip' ))
				{
					GetInventory().AddItemTag( itemIds[i], 'ACS_Steel_Sword_To_Equip' );
				}
			}
		}
	}

	private function CheckInventorySilver()
	{
		var itemIds 																									: array<SItemUniqueId>;
		var i 																											: int;
	
		itemIds = GetInventory().GetItemsByTag( 'PlayerSilverWeapon' );

		if (itemIds.Size() > 0)
		{
			for( i = 0; i < itemIds.Size() ; i+=1 )
			{
				if( !GetInventory().ItemHasTag( itemIds[i], 'ACS_Silver_Sword_To_Equip' ))
				{
					GetInventory().AddItemTag( itemIds[i], 'ACS_Silver_Sword_To_Equip' );
				}
			}
		}
	}

	private function CheckInventoryCrossbow()
	{
		var itemIds 																									: array<SItemUniqueId>;
		var i 																											: int;
	
		itemIds = GetInventory().GetItemsByTag( 'crossbow' );

		if (itemIds.Size() > 0)
		{
			for( i = 0; i < itemIds.Size() ; i+=1 )
			{
				if( !GetInventory().ItemHasTag( itemIds[i], 'ACS_Crossbow_To_Equip' ))
				{
					GetInventory().AddItemTag( itemIds[i], 'ACS_Crossbow_To_Equip' );
				}
			}
		}
	}

	event OnDetaching()
	{
		if ( isPlayingInteractionAnim )
		{
			OnPlayerActionEnd();
		}		
	}	
	
	event OnInteraction( actionName : string, activator : CEntity  )
	{
		super.OnInteraction( actionName, activator );
		
		if ( activator == thePlayer && thePlayer.IsActionAllowed( EIAB_InteractionAction ) && thePlayer.CanPerformPlayerAction(true))
		{
			if( ( animationForAllInteractions == true || actionName == interactionName ) && !lockedByKey )
			{
				PlayInteractionAnimation();
			}
		}
		
	}
	
	function ProcessLoot ()
	{
	
	}
	
	event OnStreamIn()
	{
		super.OnStreamIn();
	}	
	
	public function OnContainerClosed()
	{
		var effectName : name;

		if ( !HasQuestItem() )
		{
			StopEffect( 'quest_highlight_fx' );	
		}

		if ( isPlayingInteractionAnim )
		{
			thePlayer.PlayerStopAction( interactionAnim );	
		}
		
		effectName = this.GetAutoEffect();
		if ( effectName != '' )
		{
			this.StopEffect( effectName );
		}

		super.OnContainerClosed();
	}
	
	
	function PlayInteractionAnimation()
	{
		if ( interactionAnim == PEA_SlotAnimation && !IsNameValid(slotAnimName) )
		{
			super.ProcessLoot();
				
			return;
		}
		
		if ( interactionAnim != PEA_None )
		{
			if ( this.attachThisObjectOnAnimEvent )
			{
				thePlayer.AddAnimEventChildCallback(this,attachAnimName,'OnAnimEvent_Custom');
				thePlayer.AddAnimEventChildCallback(this,detachAnimName,'OnAnimEvent_Custom');
			}
				
			thePlayer.RegisterForPlayerAction(this, false);
			
			if ( ShouldBlockGameplayActionsOnInteraction() )
			{
				BlockGameplayActions(true);
			}
			
			if ( !GetToPointAndStartAction() )
				OnPlayerActionEnd();
			
			isPlayingInteractionAnim = true;
			
			if ( interactionAnim == PEA_SlotAnimation )
				return;
			
			if ( interactionAnimTime < 1.0f )
			{
				interactionAnimTime = 1.0f;
			}
			if(skipInventoryPanel)
			{
				AddTimer( 'TimerDeactivateAnimation', interactionAnimTime, false );			
			}
			
		}
		else
		{
			super.ProcessLoot();
		}
	}
	
	function BlockGameplayActions( lock : bool )
	{
		var exceptions : array< EInputActionBlock >;		
		exceptions.PushBack( EIAB_ExplorationFocus );
	
		if ( lock && holsterWeaponAtTheBeginning )
			thePlayer.OnEquipMeleeWeapon(PW_None,true);
			
		if ( lock )
			thePlayer.BlockAllActions('W3AnimationInteractionEntity', true, exceptions);
		else
			thePlayer.BlockAllActions('W3AnimationInteractionEntity', false);
	}
	
	function ShouldBlockGameplayActionsOnInteraction() : bool
	{
		return true;
	}
	
	function GetToPointAndStartAction() : bool
	{
		var movementAdjustor 				: CMovementAdjustor = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();
		var ticket 							: SMovementAdjustmentRequestTicket = movementAdjustor.CreateNewRequest( 'InteractionEntity' );
		
		movementAdjustor.AdjustmentDuration( ticket, 0.5 );
		
		if ( matchPlayerHeadingWithHeadingOfTheEntity )
			movementAdjustor.RotateTowards( ticket, this );
		if ( desiredPlayerToEntityDistance >= 0 )
			movementAdjustor.SlideTowards( ticket, this, desiredPlayerToEntityDistance );
		
		return thePlayer.PlayerStartAction( interactionAnim, slotAnimName );
	}
	
	private var objectAttached : bool;
	private var objectCachedPos : Vector;
	private var objectCachedRot	: EulerAngles;
	
	private function AttachObject()
	{
		if ( objectAttached )
			return;
			
		objectCachedPos = this.GetWorldPosition();
		objectCachedRot = this.GetWorldRotation();
		this.CreateAttachment(thePlayer,attachSlotName);
		objectAttached = true;
	}
	
	private function DetachObject()
	{
		if ( !objectAttached )
			return;
			
		this.BreakAttachment();
		this.TeleportWithRotation(objectCachedPos,objectCachedRot);
		objectAttached = false;
	}
	
	
	
	
	event OnPlayerActionStartFinished()
	{
		if ( !skipInventoryPanel )
		{
			ShowLoot();
		}
	}
	
	
	event OnPlayerActionEnd()
	{
		isPlayingInteractionAnim = false;
		thePlayer.UnregisterForPlayerAction(this, false);
		
		thePlayer.RemoveAnimEventChildCallback(this,attachAnimName);
		thePlayer.RemoveAnimEventChildCallback(this,detachAnimName);
		
		if ( ShouldBlockGameplayActionsOnInteraction() )
		{
			BlockGameplayActions(false);
		}
		DetachObject();
	}
	
	event OnAnimEvent_Custom( animEventName : name, animEventType : EAnimationEventType, animInfo : SAnimationEventAnimInfo )
	{
		if ( animEventName == attachAnimName && attachThisObjectOnAnimEvent )
		{
			AttachObject();
		}
		else if ( animEventName == detachAnimName )
		{
			DetachObject();
		}
	}
	
	
	
	
	timer function TimerDeactivateAnimation( td : float , id : int)
	{
		TakeAllItems();
		OnContainerClosed();		
	}
}

/*
class W3ACSRoachStashContainer extends CNewNPC
{
	event OnSpawned( spawnData : SEntitySpawnData )
	{
		super.OnSpawned( spawnData );

		EnableCollisions(false);
		EnableCharacterCollisions(false);
		SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
		AddBuffImmunity_AllNegative('ACS_Roach_Stash_Container', true); 
		AddBuffImmunity_AllCritical('ACS_Roach_Stash_Container', true); 
		SetVisibility(false);

		CheckInventorySteel();

		CheckInventorySilver();

		CheckInventoryCrossbow();
	}

	private function CheckInventorySteel()
	{
		var itemIds 																									: array<SItemUniqueId>;
		var i 																											: int;
		var swordsteel																									: CEntity; 

		itemIds = GetInventory().GetItemsByTag( 'PlayerSteelWeapon' );

		if (itemIds.Size() > 0)
		{
			for( i = 0; i < itemIds.Size() ; i+=1 )
			{
				if( !GetInventory().ItemHasTag( itemIds[i], 'ACS_Steel_Sword_To_Equip' ))
				{
					GetInventory().AddItemTag( itemIds[i], 'ACS_Steel_Sword_To_Equip' );
				}
			}
		}
	}

	private function CheckInventorySilver()
	{
		var itemIds 																									: array<SItemUniqueId>;
		var i 																											: int;
	
		itemIds = GetInventory().GetItemsByTag( 'PlayerSilverWeapon' );

		if (itemIds.Size() > 0)
		{
			for( i = 0; i < itemIds.Size() ; i+=1 )
			{
				if( !GetInventory().ItemHasTag( itemIds[i], 'ACS_Silver_Sword_To_Equip' ))
				{
					GetInventory().AddItemTag( itemIds[i], 'ACS_Silver_Sword_To_Equip' );
				}
			}
		}
	}

	private function CheckInventoryCrossbow()
	{
		var itemIds 																									: array<SItemUniqueId>;
		var i 																											: int;
	
		itemIds = GetInventory().GetItemsByTag( 'crossbow' );

		if (itemIds.Size() > 0)
		{
			for( i = 0; i < itemIds.Size() ; i+=1 )
			{
				if( !GetInventory().ItemHasTag( itemIds[i], 'ACS_Crossbow_To_Equip' ))
				{
					GetInventory().AddItemTag( itemIds[i], 'ACS_Crossbow_To_Equip' );
				}
			}
		}
	}
}
*/

function GetACSRoachStash() : W3ACSRoachStash 
{
    var storage: W3ACSRoachStash;
    var template : CEntityTemplate;
    var tags: array<CName>;

    storage = (W3ACSRoachStash)theGame.GetEntityByTag('ACS_Roach_Stash');

    if (!storage) 
	{
        template = (CEntityTemplate)LoadResource("dlc\dlc_acs\data\entities\other\acs_roach_stash.w2ent", true);

        tags.PushBack('ACS_Roach_Stash');

        storage = (W3ACSRoachStash) theGame.CreateEntity( template, thePlayer.GetWorldPosition(), , , , , PM_Persist, tags);
    }

    return storage;
}

function GetACSRoachStashContainer() : W3ACSRoachStashContainer 
{
    var storage: W3ACSRoachStashContainer;
    var template : CEntityTemplate;
    var tags: array<CName>;

    storage = (W3ACSRoachStashContainer)theGame.GetEntityByTag('ACS_Roach_Stash_Container');

    if (!storage) 
	{
        template = (CEntityTemplate)LoadResource("dlc\dlc_acs\data\entities\other\acs_roach_stash_container.w2ent", true);

        tags.PushBack('ACS_Roach_Stash_Container');

        storage = (W3ACSRoachStashContainer) theGame.CreateEntity( template, thePlayer.GetWorldPosition() + Vector(0,0,-500), , , , , PM_Persist, tags);
    }

    return storage;
}

function GetACSRoachStashContainerNoSpawn() : W3ACSRoachStashContainer 
{
    var storage: W3ACSRoachStashContainer;
    var template : CEntityTemplate;
    var tags: array<CName>;

    storage = (W3ACSRoachStashContainer)theGame.GetEntityByTag('ACS_Roach_Stash_Container');

    return storage;
}

function GetACSRoachStashContainerExists() : bool 
{
	 var storage: W3ACSRoachStashContainer;

	storage = (W3ACSRoachStashContainer)theGame.GetEntityByTag('ACS_Roach_Stash_Container');

	if (!storage) 
	{
		return false;
	}

	return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class ACSNavigationGuide extends CNewNPC
{
	var teleProgress 										: float;

	default teleProgress = 0;

	event OnSpawned( spawnData : SEntitySpawnData )
	{
		var ent														: CEntity;
		var spawnPos												: Vector;

		super.OnSpawned(spawnData);

		this.SetVisibility(false);

		EnableCharacterCollisions(false);

		EnableDynamicCollisions(false);

		EnableStaticCollisions(false);

		((CActor)this).SetImmortalityMode( AIM_Invulnerable, AIC_Default ); 
		((CActor)this).SetCanPlayHitAnim(false); 
		((CActor)this).AddBuffImmunity_AllNegative('ACS_Navigation_Guide_Immune', true); 
		((CActor)this).AddBuffImmunity_AllCritical('ACS_Navigation_Guide_Immune', true);

		this.SetTemporaryAttitudeGroup( 'friendly_to_player', AGP_Default );	

		if (!ACSGetCEntity('ACS_Navigation_Guide_Footprints'))
		{
			if (thePlayer.IsUsingHorse()
			|| thePlayer.IsUsingVehicle()
			)
			{
				AddTimer('spawn_footprints_delay', 0.125, false);

				spawnPos = ACSFixZAxis(theCamera.GetCameraPosition() + theCamera.GetCameraDirection() * 15);
			}
			else
			{
				if (thePlayer.GetIsSprinting())
				{
					AddTimer('spawn_footprints_delay', 0.25, false);

					spawnPos = ACSFixZAxis(theCamera.GetCameraPosition() + theCamera.GetCameraDirection() * 10);
				}
				else
				{
					if (thePlayer.GetIsWalking())
					{
						AddTimer('spawn_footprints_delay', 0.5, false);

						spawnPos = ACSFixZAxis(theCamera.GetCameraPosition() + theCamera.GetCameraDirection() * 7.5);
					}
					else
					{
						AddTimer('spawn_footprints_delay', 1, false);

						spawnPos = ACSFixZAxis(theCamera.GetCameraPosition() + theCamera.GetCameraDirection() * 5);
					}
				}
			}

			spawnPos.Z += 2;

			ent = theGame.CreateEntity( 

			(CEntityTemplate)LoadResource( 
				
			//"quests\part_1\quest_files\q202_giant\entities\q202_focus_footprints.w2ent"

			"dlc\dlc_acs\data\entities\other\navigation_guide_wisp.w2ent"
			
			, true ), 
			
			//GetWorldPosition(), 

			spawnPos, 

			GetWorldRotation() );

			ent.AddTag('ACS_Navigation_Guide_Footprints');

			ent.PlayEffect('502_barrier_hold');

			//ent.PlayEffect('wisp_fx_combat');

			ent.PlayEffect('wisp_fx_new');

			ent.DestroyEffect('wisp_fx');

			ent.CreateAttachment(ACSWisp());
		}
	}

	private timer function spawn_footprints_delay ( dt : float, id : int )
	{
		AddTimer('spawn_footprints', 0.0001, true);
	}

	private timer function spawn_footprints ( dt : float, id : int )
	{
		var targetDistance, targetZ, currZ							: float;
		var targetPosition, currPosition							: Vector;
		var rot, cameraRot 											: EulerAngles;
		
		targetDistance = VecDistanceSquared2D( GetWorldPosition(), ACSGetCEntity('ACS_Guiding_Light_Marker').GetWorldPosition() ) ;

		if (targetDistance <= 2 * 2)
		{
			((CNewNPC)this).GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(0);

			((CNewNPC)this).GetMovingAgentComponent().ForceSetRelativeMoveSpeed(0);

			teleProgress -= teleProgress;
		}
		else if (targetDistance > 2 * 2 && targetDistance <= 500 * 500)
		{
			//((CNewNPC)this).GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(4);

			//((CNewNPC)this).GetMovingAgentComponent().ForceSetRelativeMoveSpeed(4);

			if (((CNewNPC)this).GetMovingAgentComponent().GetRelativeMoveSpeed() == 0)
			{
				//((CNewNPC)this).GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(((CNewNPC)ACSGetCEntity('ACS_Guiding_Light_Navigation_Guide_Marker')).GetWorldPosition() - ((CNewNPC)this).GetWorldPosition()));

				//((CNewNPC)this).GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(4);

				EnableCollisions(false);



				currPosition = GetWorldPosition();

				theGame.GetWorld().NavigationComputeZ( currPosition, currPosition.Z - 128, currPosition.Z + 128, currZ );

				if(currZ > currPosition.Z)
				{
					currPosition.Z = currZ;
				}

				if(!thePlayer.IsSwimming() && !thePlayer.IsDiving())
				{
					if (currPosition.Z < theGame.GetWorld().GetWaterLevel(currPosition, true))
					{
						currPosition.Z = theGame.GetWorld().GetWaterLevel(currPosition, true);
					}
				}





				targetPosition = ACSGetCEntity('ACS_Guiding_Light_Marker').GetWorldPosition();

				theGame.GetWorld().NavigationComputeZ( targetPosition, targetPosition.Z - 128, targetPosition.Z + 128, targetZ );

				if(targetZ > targetPosition.Z)
				{
					targetPosition.Z = targetZ;
				}

				if(!thePlayer.IsSwimming() && !thePlayer.IsDiving())
				{
					if (targetPosition.Z < theGame.GetWorld().GetWaterLevel(targetPosition, true))
					{
						targetPosition.Z = theGame.GetWorld().GetWaterLevel(targetPosition, true);
					}
				}




				rot = thePlayer.GetWorldRotation();

				cameraRot = theCamera.GetCameraRotation();

				rot.Yaw = cameraRot.Yaw;
				rot.Pitch = 0;
				rot.Roll = 0;

				TeleportWithRotation( LerpV(currPosition, targetPosition, teleProgress), rot );

				if (teleProgress > 0.0005f)
				{
					teleProgress = 0.0005f;
				}
				else
				{
					teleProgress += 0.0000001;
				}
			}
			else
			{
				teleProgress -= teleProgress;

				EnableCollisions(true);

				((CNewNPC)this).GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(4);

				if (thePlayer.IsUsingHorse()
				|| thePlayer.IsUsingVehicle()
				)
				{
					((CNewNPC)this).SetAnimationSpeedMultiplier( 1 );
				}
				else
				{
					if (thePlayer.GetIsSprinting())
					{
						((CNewNPC)this).SetAnimationSpeedMultiplier( 0.875 );
					}
					else
					{
						if (thePlayer.GetIsWalking())
						{
							((CNewNPC)this).SetAnimationSpeedMultiplier( 0.375 );
						}
						else
						{
							((CNewNPC)this).SetAnimationSpeedMultiplier( 0.5 );
						}
					}
				}
			}

			/*
			ent = theGame.CreateEntity( 

			(CEntityTemplate)LoadResource( 
				
			"quests\part_1\quest_files\q202_giant\entities\q202_focus_footprints.w2ent"

			, true ), 
			
			GetWorldPosition(), 

			GetWorldRotation() );

			ent.AddTag('ACS_Navigation_Guide_Footprints');
			*/
		}
		else if (targetDistance > 500 * 500)
		{
			((CNewNPC)this).GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(0);

			((CNewNPC)this).GetMovingAgentComponent().ForceSetRelativeMoveSpeed(0);

			//((CNewNPC)this).GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(((CNewNPC)ACSGetCEntity('ACS_Guiding_Light_Navigation_Guide_Marker')).GetWorldPosition() - ((CNewNPC)this).GetWorldPosition()));

			//((CNewNPC)this).GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(4);

			EnableCollisions(false);

			currPosition = GetWorldPosition();

			theGame.GetWorld().NavigationComputeZ( currPosition, currPosition.Z - 128, currPosition.Z + 128, currZ );

			if(currZ > currPosition.Z)
			{
				currPosition.Z = currZ;
			}

			if(!thePlayer.IsSwimming() && !thePlayer.IsDiving())
			{
				if (currPosition.Z < theGame.GetWorld().GetWaterLevel(currPosition, true))
				{
					currPosition.Z = theGame.GetWorld().GetWaterLevel(currPosition, true);
				}
			}




			targetPosition = ACSGetCEntity('ACS_Guiding_Light_Marker').GetWorldPosition();

			theGame.GetWorld().NavigationComputeZ( targetPosition, targetPosition.Z - 128, targetPosition.Z + 128, targetZ );

			if(targetZ > targetPosition.Z)
			{
				targetPosition.Z = targetZ;
			}

			if(!thePlayer.IsSwimming() && !thePlayer.IsDiving())
			{
				if (targetPosition.Z < theGame.GetWorld().GetWaterLevel(targetPosition, true))
				{
					targetPosition.Z = theGame.GetWorld().GetWaterLevel(targetPosition, true);
				}
			}




			rot = thePlayer.GetWorldRotation();

			cameraRot = theCamera.GetCameraRotation();

			rot.Yaw = cameraRot.Yaw;
			rot.Pitch = 0;
			rot.Roll = 0;

			TeleportWithRotation( LerpV(currPosition, targetPosition, teleProgress), rot );

			if (teleProgress > 0.0005f)
			{
				teleProgress = 0.0005f;
			}
			else
			{
				teleProgress += 0.0000001;
			}
		}

		//ACSGetCEntity('ACS_Navigation_Guide_Footprints').TeleportWithRotation( LerpV(ACSGetCEntity('ACS_Navigation_Guide_Footprints').GetWorldPosition(), GetBoneWorldPosition('head'), 0.5f), GetWorldRotation() );

		//ACSGetCEntity('ACS_Navigation_Guide_Footprints').TeleportWithRotation( ACSWisp().GetWorldPosition(), GetWorldRotation() );
	}

	event OnDestroyed()
	{
		var ents 											: array<CEntity>;
		var i												: int;
		
		ents.Clear();

		theGame.GetEntitiesByTag( 'ACS_Navigation_Guide_Footprints', ents );	
		
		for( i = 0; i < ents.Size(); i += 1 )
		{
			ents[i].Destroy();
		}

		super.OnDestroyed();
	}
}

statemachine class ACSNavigationGuideMarker extends CNewNPC
{
	event OnSpawned( spawnData : SEntitySpawnData )
	{
		super.OnSpawned(spawnData);

		EnableCollisions(false);
		EnableCharacterCollisions(false);

		((CActor)this).SetImmortalityMode( AIM_Invulnerable, AIC_Default ); 
		((CActor)this).SetCanPlayHitAnim(false); 
		((CActor)this).AddBuffImmunity_AllNegative('ACS_Navigation_Guide_Immune', true); 
		((CActor)this).AddBuffImmunity_AllCritical('ACS_Navigation_Guide_Immune', true);

		AddTimer('teleport_pos', 0.01, true);
	}

	private timer function teleport_pos ( dt : float, id : int )
	{
		this.Teleport(ACSFixZAxis((ACSGetCEntity('ACS_Guiding_Light_Marker').GetWorldPosition() + ACSGetCEntity('ACS_Guiding_Light_Navigation_Guide').GetWorldPosition()) * 0.5));
	}
}


statemachine class CACSGravehagTongue extends CNewNPC
{
	event OnSpawned( spawnData : SEntitySpawnData )
	{
		super.OnSpawned(spawnData);

		EnableCollisions(false);

		EnableCharacterCollisions(false);

		((CActor)this).SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
		((CActor)this).SetCanPlayHitAnim(false); 
		((CActor)this).AddBuffImmunity_AllNegative('ACS_Gravehag_Tongue_Buff_Immune', true); 
		((CActor)this).AddBuffImmunity_AllCritical('ACS_Gravehag_Tongue_Critical_Immune', true);

		this.SetTemporaryAttitudeGroup( 'friendly_to_player', AGP_Default );	
	}

	event OnPreAttackEvent(animEventName : name, animEventType : EAnimationEventType, data : CPreAttackEventData, animInfo : SAnimationEventAnimInfo )
	{
		if(animEventType == AET_DurationEnd)
		{
			return false;
		}

		StopEffect('attack_poison');
		PlayEffect('attack_poison');
	}
}

function ACS_GravehagTongueWeaponPlayAnim()
{
	var animatedComponent_R, animatedComponent_L			: CAnimatedComponent;
	var anim_names											: array<name>;

	anim_names.Clear();

	anim_names.PushBack('grave_attack_tounge_whip_slow_mid');

	anim_names.PushBack('grave_attack_tounge_whip_fast_mid');

	anim_names.PushBack('grave_attack_tounge_whip_fast_low');

	anim_names.PushBack('grave_attack_tounge_counter');

	anim_names.PushBack('grave_attack_tounge_counter_left');

	anim_names.PushBack('grave_attack_tounge_counter_right');

	if (ACSGetCActor('ACS_Gravehag_Tongue_Weapon_R'))
	{
		animatedComponent_R = (CAnimatedComponent)((CNewNPC)ACSGetCActor('ACS_Gravehag_Tongue_Weapon_R')).GetComponentByClassName( 'CAnimatedComponent' );	

		animatedComponent_R.PlaySlotAnimationAsync ( anim_names[RandRange(anim_names.Size())], 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f) );
	}

	if (ACSGetCActor('ACS_Gravehag_Tongue_Weapon_L'))
	{
		animatedComponent_L = (CAnimatedComponent)((CNewNPC)ACSGetCActor('ACS_Gravehag_Tongue_Weapon_L')).GetComponentByClassName( 'CAnimatedComponent' );	

		animatedComponent_L.PlaySlotAnimationAsync ( anim_names[RandRange(anim_names.Size())], 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f) );
	}
}

function ACS_BloodRootsAttach()
{
	var ent_1, ent_2																									: CEntity;
	var bone_vec																										: Vector;
	var bone_rot																										: EulerAngles;
	var temp																											: CEntityTemplate;

	if (thePlayer.HasBuff(EET_Mutagen22)
	|| ACS_Armor_Equipped_Check()
	|| ACS_GetItem_VampClaw_ACS_Armor()
	)
	{
		if (!thePlayer.HasTag('acs_vampire_claws_equipped'))
		{
			if (ACSGetCEntity('ACS_Blood_Roots_R'))
			{
				ACSGetCEntity('ACS_Blood_Roots_R').Destroy();
			}
			
			if (ACSGetCEntity('ACS_Blood_Roots_L'))
			{
				ACSGetCEntity('ACS_Blood_Roots_L').Destroy();
			}

			return;
		}

		if (ACSGetCEntity('ACS_Blood_Roots_R')
		&& ACSGetCEntity('ACS_Blood_Roots_L'))
		{
			if (ACS_Armor_Equipped_Check()
			|| ACS_GetItem_VampClaw_ACS_Armor()
			)
			{
				ACSGetCEntity('ACS_Blood_Roots_R').StopEffect('blood_roots_blood');
				ACSGetCEntity('ACS_Blood_Roots_R').PlayEffect('blood_roots_blood');

				ACSGetCEntity('ACS_Blood_Roots_L').StopEffect('blood_roots_blood');
				ACSGetCEntity('ACS_Blood_Roots_L').PlayEffect('blood_roots_blood');

				ACSGetCEntity('ACS_Blood_Roots_R').StopEffect('blood_roots');
				ACSGetCEntity('ACS_Blood_Roots_R').PlayEffect('blood_roots');

				ACSGetCEntity('ACS_Blood_Roots_L').StopEffect('blood_roots');
				ACSGetCEntity('ACS_Blood_Roots_L').PlayEffect('blood_roots');
			}
			else
			{
				ACSGetCEntity('ACS_Blood_Roots_R').StopEffect('blood_roots');
				ACSGetCEntity('ACS_Blood_Roots_R').PlayEffect('blood_roots');

				ACSGetCEntity('ACS_Blood_Roots_L').StopEffect('blood_roots');
				ACSGetCEntity('ACS_Blood_Roots_L').PlayEffect('blood_roots');
			}

			return;
		}

		temp = (CEntityTemplate)LoadResource(

		"dlc\dlc_acs\data\fx\acs_ice_breathe_old.w2ent"
		
		, true);

		ent_1 = (CEntity)theGame.CreateEntity( temp, thePlayer.GetWorldPosition() -100, thePlayer.GetWorldRotation());

		ent_1.AddTag('ACS_Blood_Roots_R');

		GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( GetWitcherPlayer().GetBoneIndex( 'r_forearm' ), bone_vec, bone_rot );

		ent_1.CreateAttachmentAtBoneWS(thePlayer, 'r_forearm', bone_vec, bone_rot);

		ent_2 = (CEntity)theGame.CreateEntity( temp, thePlayer.GetWorldPosition() -100, thePlayer.GetWorldRotation());

		ent_2.AddTag('ACS_Blood_Roots_L');

		GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( GetWitcherPlayer().GetBoneIndex( 'l_forearm' ), bone_vec, bone_rot );

		ent_2.CreateAttachmentAtBoneWS(thePlayer, 'l_forearm', bone_vec, bone_rot);

		if (ACS_Armor_Equipped_Check()
		|| ACS_GetItem_VampClaw_ACS_Armor()
		)
		{
			ent_1.StopEffect('blood_roots_blood');
			ent_1.PlayEffect('blood_roots_blood');

			ent_2.StopEffect('blood_roots_blood');
			ent_2.PlayEffect('blood_roots_blood');

			ent_1.StopEffect('blood_roots');
			ent_1.PlayEffect('blood_roots');

			ent_2.StopEffect('blood_roots');
			ent_2.PlayEffect('blood_roots');
		}
		else
		{
			ent_1.StopEffect('blood_roots');
			ent_1.PlayEffect('blood_roots');

			ent_2.StopEffect('blood_roots');
			ent_2.PlayEffect('blood_roots');
		}
	}
}

statemachine class CACSBeanstalkSpawner extends CEntity
{
	event OnSpawned( spawnData : SEntitySpawnData )
	{
		super.OnSpawned(spawnData);

		AddTimer('Proximity_Check', 0.0001, true);
	}

	public timer function Proximity_Check ( dt : float, id : int)
	{
		var spawnerRot, beanstalkRot					: EulerAngles;
		var spawnerPos, beanstalkPos					: Vector;
		var beanstakEnt									: CEntity;
		var targetDistance								: float;
		var ent_paths									: array< String >;

		targetDistance = VecDistanceSquared2D( thePlayer.GetWorldPosition(), GetWorldPosition() ) ;

		if (targetDistance <= 100)
		{
			if (!beanstakEnt)
			{
				spawnerRot = GetWorldRotation();

				spawnerPos = GetWorldPosition();

				spawnerRot.Yaw += RandRangeF(360,0);

				ent_paths.Clear();
				ent_paths.PushBack("dlc\bob\data\environment\vegetation\giant_castle_ent\dry_tree_big.w2ent");
				ent_paths.PushBack("dlc\bob\data\environment\vegetation\giant_castle_ent\dry_tree_bigest.w2ent");
				ent_paths.PushBack("dlc\bob\data\environment\vegetation\giant_castle_ent\dry_tree_bigest_cluster.w2ent");
				ent_paths.PushBack("dlc\bob\data\environment\vegetation\giant_castle_ent\dry_tree_bigest_slim.w2ent");
				ent_paths.PushBack("dlc\bob\data\environment\vegetation\giant_castle_ent\dry_tree_branch_wide.w2ent");
				ent_paths.PushBack("dlc\bob\data\environment\vegetation\giant_castle_ent\dry_tree_med.w2ent");
				ent_paths.PushBack("dlc\bob\data\environment\vegetation\giant_castle_ent\dry_tree_med_slim.w2ent");
				ent_paths.PushBack("dlc\bob\data\environment\vegetation\giant_castle_ent\dry_tree_med_slim_cluster.w2ent");
				ent_paths.PushBack("dlc\bob\data\environment\vegetation\giant_castle_ent\quercus_big_dead.w2ent");

				beanstakEnt = theGame.CreateEntity( (CEntityTemplate)LoadResource( 

				ent_paths[RandRange(ent_paths.Size())]

				, true ), ACSFixZAxis( spawnerPos ), spawnerRot );

				RemoveTimer('Proximity_Check');
			}
		}
	}
}

class CACSVeinColumn extends CNewNPC
{
	var numberOfHits 						: int;
	var destroyCalled						: bool;
	var foundEntity							: CEntity;
	var construct							: CActor;
	var summonedComp						: W3SummonedEntityComponent;
	var percLife							: float;
	var chunkLife							: float;
	var lastHitTimestamp					: float;
	var testedHitTimestamp					: float;
	
	editable var requiredHits				: int;
	editable var timeBetweenHits			: float;
	editable var timeBetweenFireDamage		: float;
	editable var effectOnTakeDamage			: name;
	editable var timeToDestroy				: float;

	default destroyCalled = false;
	default timeBetweenHits = 0.5f;
	default timeBetweenFireDamage = 1.0f;
	default requiredHits = 1;
	
	event OnSpawned( spawnData : SEntitySpawnData )
	{
		super.OnSpawned( spawnData );
		SetAppearance('alive');
		thePlayer.OnBecomeAwareAndCanAttack( this );
	}
	
	function CheckHitsCounter()
	{
		if( numberOfHits >= requiredHits )
		{
			if( !destroyCalled )
			{
				DestroyEntity();
			}
		}
	}
	
	function AddHit()
	{
		lastHitTimestamp = theGame.GetEngineTimeAsSeconds();
		numberOfHits+=1;
		foundEntity.PlayEffect( 'hit' );
		construct.SignalGameplayEvent( 'column_hit');
		construct = theGame.GetActorByTag('dettlaff_construct');
		PlayEffect( 'hit' );
		percLife = (100/requiredHits)*0.01;	
		chunkLife = ( GetStatMax( BCS_Essence ) )* percLife;
		ForceSetStat( BCS_Essence, ( GetStat( BCS_Essence ) - chunkLife ));
		
		CheckHitsCounter();
	}
	
	function RemoveHit()
	{
		numberOfHits-=1;
		CheckHitsCounter();
	}
	
	function DestroyEntity()
	{
		destroyCalled = true;
	}
	
	event OnTakeDamage( action : W3DamageAction )
	{
		testedHitTimestamp = theGame.GetEngineTimeAsSeconds();
		if( action.attacker == thePlayer && action.DealsAnyDamage() && ( testedHitTimestamp > lastHitTimestamp + timeBetweenHits ) && !action.HasDealtFireDamage() )
		{
			AddHit();
		}
		else if( action.attacker == thePlayer && action.DealsAnyDamage() && ( testedHitTimestamp > lastHitTimestamp + timeBetweenFireDamage ) && action.HasDealtFireDamage())
		{
			AddHit();
			PlayEffectSingle('critical_burning');
			AddTimer('StopBurningFX', 2.0f, false );
		}
		
		if( destroyCalled )
		{
			super.OnTakeDamage(action);
		}
	}
	
	timer function StopBurningFX(dt : float, id : int)
	{
		StopEffect('critical_burning');
	}
	
	
	event OnDeath( damageAction : W3DamageAction  )
	{
		summonedComp.OnDeath();
		PlayEffect( 'dying_out' );
		AddTimer('DeadAppearance', 0.0f, false);
		thePlayer.OnBecomeUnawareOrCannotAttack( this );
		AddTimer('ColumnDestroyTimer', 5, false);
	}
	
	function StartPumping()
	{
		PlayEffect( 'pumping' );
	}
	
	function StopPumping()
	{
		StopEffect( 'pumping' );
	}
	
	timer function DeadAppearance(delta : float , id : int)
	{
		PlayEffect('boom');
		SetAppearance('dead');
	}

	timer function ColumnDestroyTimer(delta : float , id : int)
	{
		StopAllEffects();
		PlayEffect( 'disappearing' );
		DestroyAfter(10);
	}

}

statemachine class CACSGeraltPhantom extends CNewNPC
{
	var r_blade1, sword_trail_1, sword_trail_2								: CEntity;
	var trail_temp															: CEntityTemplate;
	
	event OnSpawned( spawnData : SEntitySpawnData )
	{
		var animcomp 														: CAnimatedComponent;
		var anim_names														: array< name >;
		var movementAdjustorNPC												: CMovementAdjustor; 
		var ticketNPC 														: SMovementAdjustmentRequestTicket; 
		var blade_temp_ent													: CEntity;
		var steelID, silverID 												: SItemUniqueId;
	
		super.OnSpawned( spawnData );

		ACS_Geralt_Phantom_Destroy();

		AddTag('ACS_Geralt_Phantom');

		if (ACS_Armor_Equipped_Check()
		)
		{
			PlayEffect('shadows_form');
			PlayEffect('smoke_effect_1');
			PlayEffect('smoke_effect_2');
			PlayEffect('olgierd_energy_blast');
		}
		else
		{
			PlayEffect('ghost_06');
		}

		//PlayEffect('ghost_02');

		//PlayEffect('black_eff');

		//PlayEffect('shadow_form');

		//PlayEffect('shadows_form');

		//PlayEffect('special_attack_break');

		//PlayEffect('special_attack_steps');

		//PlayEffect('olgierd_energy_blast');

		CreateAttachment(thePlayer, , Vector(0,0,0));

		SetAnimationSpeedMultiplier( 1.5 );

		//SetAttitude(thePlayer, AIA_Friendly);

		//thePlayer.SetAttitude(this, AIA_Friendly);

		EnableCharacterCollisions( false );

		EnableCollisions(false);

		SetVisibility(false);

		AddTimer('Reveal', 0.06125, false);

		anim_names.Clear();

		anim_names.PushBack('man_geralt_sword_attack_fast_1_rp_40ms');
		anim_names.PushBack('man_geralt_sword_attack_fast_1_lp_40ms');
		anim_names.PushBack('man_geralt_sword_attack_fast_2_rp_40ms');
		anim_names.PushBack('man_geralt_sword_attack_fast_2_lp_40ms');
		anim_names.PushBack('geralt_attack_fast_7_rp_ACS');
		anim_names.PushBack('geralt_attack_fast_7_lp_ACS');
		anim_names.PushBack('geralt_attack_fast_5_rp_ACS');
		anim_names.PushBack('geralt_attack_fast_5_lp_ACS');
		anim_names.PushBack('geralt_attack_fast_6_rp_ACS');
		anim_names.PushBack('man_npc_longsword_attack_h_02_lp_ACS');
		anim_names.PushBack('man_geralt_sword_attack_fast_right_1_lp_40ms_forward_ACS');


		animcomp = (CAnimatedComponent)this.GetComponentByClassName('CAnimatedComponent');

		animcomp.PlaySlotAnimationAsync ( anim_names[RandRange(anim_names.Size())], 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));


		movementAdjustorNPC = GetMovingAgentComponent().GetMovementAdjustor();

		ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_Geralt_Phantom_Rotate');
		movementAdjustorNPC.CancelByName( 'ACS_Geralt_Phantom_Rotate' );
		movementAdjustorNPC.CancelAll();

		ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_Geralt_Phantom_Rotate' );
		movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.125 );
		movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );
		movementAdjustorNPC.Continuous(ticketNPC);
		movementAdjustorNPC.RotateTo( ticketNPC, VecHeading(GetWitcherPlayer().GetHeadingVector()) );

		sword_trail_1 = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResource( "dlc\dlc_acs\data\fx\acs_sword_trail.w2ent" , true ), GetWitcherPlayer().GetWorldPosition() + Vector( 0, 0, -20 ) );

		sword_trail_1.CreateAttachment( this, 'r_weapon' );

		if (!ACS_Armor_Equipped_Check()
		)
		{
			GetWitcherPlayer().GetItemEquippedOnSlot(EES_SilverSword, silverID);
			GetWitcherPlayer().GetItemEquippedOnSlot(EES_SteelSword, steelID);

			if (GetWitcherPlayer().IsWeaponHeld('steelsword'))
			{
				blade_temp_ent = GetWitcherPlayer().GetInventory().GetItemEntityUnsafe(steelID);
			}
			else if (GetWitcherPlayer().IsWeaponHeld('silversword'))
			{
				blade_temp_ent = GetWitcherPlayer().GetInventory().GetItemEntityUnsafe(silverID);
			}

			r_blade1 = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResource(blade_temp_ent.GetReadableName(), true ), Vector( 0, 0, -20 ) );

			r_blade1.CreateAttachment(this, 'r_weapon');

			sword_trail_1.StopEffect('light_trail_fx');
			sword_trail_1.StopEffect('red_aerondight_special_trail');
			sword_trail_1.StopEffect('red_charge_10');
			sword_trail_1.StopEffect('fast_attack_buff');
			sword_trail_1.StopEffect('fast_attack_buff_hit');

			sword_trail_1.PlayEffect('light_trail_fx');
			sword_trail_1.PlayEffect('red_aerondight_special_trail');
			sword_trail_1.PlayEffect('red_charge_10');
			//sword_trail_1.PlayEffect('fast_attack_buff');
			//sword_trail_1.PlayEffect('fast_attack_buff_hit');

			r_blade1.StopEffect('light_trail_fx');
			r_blade1.StopEffect('fast_attack_buff');
			r_blade1.StopEffect('fast_attack_buff_hit');

			r_blade1.PlayEffect('light_trail_fx');
			r_blade1.PlayEffect('fast_attack_buff');
			r_blade1.PlayEffect('fast_attack_buff_hit');
		}

		DestroyAfter(0.9);
	}
	
	timer function Reveal ( dt : float, id : int)
	{
		var targetDistance, targetDistanceActual : Float;

		targetDistance = VecDistanceSquared2D( thePlayer.GetWorldPosition(), ((CNewNPC)(thePlayer.GetTarget())).GetWorldPosition() );

		if (ACS_Armor_Equipped_Check()
		)
		{
			targetDistanceActual = 5;
		}
		else
		{
			targetDistanceActual = 3;
		}

		if((thePlayer.HasTag('acs_igni_sword_equipped')
		|| thePlayer.HasTag('acs_igni_sword_equipped_TAG')
		|| thePlayer.HasTag('acs_igni_secondary_sword_equipped')
		|| thePlayer.HasTag('acs_igni_secondary_sword_equipped_TAG'))
		&& thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 0.9875
		&& !thePlayer.IsDoingSpecialAttack(false)
		&& !thePlayer.IsDoingSpecialAttack(true)
		&& thePlayer.IsAnyWeaponHeld()
		&& !thePlayer.IsWeaponHeld('fist')
		&& (thePlayer.IsThreatened() || thePlayer.IsInCombat())
		&& !thePlayer.HasTag('ACS_IsPerformingFinisher')
		&& targetDistance <= targetDistanceActual * targetDistanceActual
		&& !((CNewNPC)(thePlayer.GetTarget())).IsFlying()
		&& !thePlayer.IsDodgeTimerRunning()
		&& !thePlayer.IsCurrentlyDodging()
		&& ACS_BuffCheck()
		&& !thePlayer.IsInHitAnim() 
		)
		{
			ACSGetCEntity('acs_sword_trail_1').PlayEffect('light_trail_fx');
			ACSGetCEntity('acs_sword_trail_1').PlayEffect('red_aerondight_special_trail');
			ACSGetCEntity('acs_sword_trail_1').PlayEffect('red_charge_10');
			ACSGetCEntity('acs_sword_trail_1').PlayEffect('fast_attack_buff');
			ACSGetCEntity('acs_sword_trail_1').PlayEffect('fast_attack_buff_hit');

			ACSGetCEntity('acs_sword_trail_1').StopEffect('light_trail_fx');
			ACSGetCEntity('acs_sword_trail_1').StopEffect('red_aerondight_special_trail');
			ACSGetCEntity('acs_sword_trail_1').StopEffect('red_charge_10');
			ACSGetCEntity('acs_sword_trail_1').StopEffect('fast_attack_buff');
			ACSGetCEntity('acs_sword_trail_1').StopEffect('fast_attack_buff_hit');

			if (ACS_Armor_Equipped_Check()
			)
			{
				trail_temp = (CEntityTemplate)LoadResource( "dlc\dlc_acs\data\fx\acs_enemy_sword_trail.w2ent" , true );

				sword_trail_2 = (CEntity)theGame.CreateEntity( trail_temp, this.GetWorldPosition() + Vector( 0, 0, -20 ) );

				sword_trail_2.CreateAttachment( this, 'r_weapon');

				sword_trail_2.AddTag( 'ACS_Armor_Ether_Sword' );

				sword_trail_2.PlayEffectSingle('special_attack_charged_iris');

				sword_trail_1.PlayEffectSingle('red_runeword_igni_1');

				sword_trail_1.PlayEffectSingle('red_runeword_igni_2');

				//sword_trail_2.PlayEffectSingle('runeword1_fire_trail');

				//sword_trail_2.PlayEffectSingle('runeword1_fire_trail_2');

				//sword_trail_2.PlayEffectSingle('fire_sparks_trail');

				sword_trail_2.PlayEffectSingle('red_fast_attack_buff');

				sword_trail_2.PlayEffectSingle('red_fast_attack_buff_hit');

				if (ACS_Armor_Omega_Equipped_Check())
				{
					if(GetWitcherPlayer().IsWeaponHeld( 'silversword' ) )
					{
						sword_trail_2.PlayEffectSingle('soul_edge_glow');
					}
					else if(GetWitcherPlayer().IsWeaponHeld( 'steelsword' ))
					{
						sword_trail_2.PlayEffectSingle('war_sword_glow');
					}
				}
				else if (ACS_Armor_Alpha_Equipped_Check())
				{
					if(GetWitcherPlayer().IsWeaponHeld( 'silversword' ) )
					{
						sword_trail_2.PlayEffectSingle('doomsword_glow');
					}
					else if(GetWitcherPlayer().IsWeaponHeld( 'steelsword' ))
					{
						sword_trail_2.PlayEffectSingle('pridefall_glow');
					}
				} 
			}

			SetVisibility(true);
		}
		else
		{
			this.Destroy();
		}

		//PlayEffect('special_attack_break');

		//PlayEffect('special_attack_steps');
	}
	
	event OnPreAttackEvent(animEventName : name, animEventType : EAnimationEventType, data : CPreAttackEventData, animInfo : SAnimationEventAnimInfo )
	{
		var collidedActor 																														: CActor;
		var actors 																																: array< CActor >;
		var dmg 																																: W3DamageAction;
		var curTargetVitality, maxTargetVitality, curTargetEssence, maxTargetEssence, damageMax, damageMin										: float;
		var i 																																	: int;
		var actortargetPosition, oPos																											: Vector;
		var lightningTargetEnt																													: CEntity;
		var animcomp 																															: CAnimatedComponent;
		var tmpName 																															: name;
		var tmpBool 																															: bool;
		var mc 																																	: EMonsterCategory;
		var blood_fx																															: array<CName>;
		var item_steel, item_silver																												: SItemUniqueId;
		var dmgValSword																															: float;

		super.OnPreAttackEvent(animEventName, animEventType, data, animInfo);

		if (ACS_Armor_Equipped_Check()
		)
		{
			sword_trail_1.StopEffect('light_trail_extended_fx_red');
			sword_trail_1.StopEffect('red_aerondight_special_trail');
			sword_trail_1.StopEffect('red_charge_10');

			sword_trail_1.PlayEffect('light_trail_extended_fx_red');
			sword_trail_1.PlayEffect('red_aerondight_special_trail');
			sword_trail_1.PlayEffect('red_charge_10');

			sword_trail_2.StopEffect('special_attack_iris');
			sword_trail_2.PlayEffectSingle('special_attack_iris');

			sword_trail_2.StopEffect('red_fast_attack_buff');
			sword_trail_2.PlayEffectSingle('red_fast_attack_buff');

			sword_trail_2.StopEffect('red_fast_attack_buff_hit');
			sword_trail_2.PlayEffectSingle('red_fast_attack_buff_hit');
		}
		else
		{
			r_blade1.StopEffect('light_trail_fx');
			r_blade1.StopEffect('fast_attack_buff');
			r_blade1.StopEffect('fast_attack_buff_hit');

			r_blade1.PlayEffect('light_trail_fx');
			r_blade1.PlayEffect('fast_attack_buff');
			r_blade1.PlayEffect('fast_attack_buff_hit');

			sword_trail_1.StopEffect('light_trail_fx');
			sword_trail_1.StopEffect('red_aerondight_special_trail');
			sword_trail_1.StopEffect('red_charge_10');
			sword_trail_1.StopEffect('fast_attack_buff');
			sword_trail_1.StopEffect('fast_attack_buff_hit');

			sword_trail_1.PlayEffect('light_trail_fx');
			sword_trail_1.PlayEffect('red_aerondight_special_trail');
			sword_trail_1.PlayEffect('red_charge_10');
		}

		if(animEventType != AET_DurationEnd)
		{
			return false;
		}

		if (ACS_Armor_Equipped_Check()
		)
		{
			actors = this.GetNPCsAndPlayersInCone(2.75, VecHeading(this.GetHeadingVector()), 45, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors);
		}
		else
		{
			actors = this.GetNPCsAndPlayersInCone(1.75, VecHeading(this.GetHeadingVector()), 45, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors);
		}

		actors.Remove( this );

		if( actors.Size() > 0 )
		{
			animcomp = (CAnimatedComponent)this.GetComponentByClassName('CAnimatedComponent');

			animcomp.FreezePoseFadeIn(1.0);

			for( i = 0; i < actors.Size(); i += 1 )
			{
				collidedActor = (CActor)actors[i];

				actortargetPosition = collidedActor.GetWorldPosition();

				oPos = this.GetWorldPosition();

				if (collidedActor == this
				|| collidedActor.HasTag('acs_snow_entity')
				|| collidedActor.HasTag('smokeman') 
				|| collidedActor.HasTag('ACS_Tentacle_1') 
				|| collidedActor.HasTag('ACS_Tentacle_2') 
				|| collidedActor.HasTag('ACS_Tentacle_3') 
				|| collidedActor.HasTag('ACS_Necrofiend_Tentacle_1') 
				|| collidedActor.HasTag('ACS_Necrofiend_Tentacle_2') 
				|| collidedActor.HasTag('ACS_Necrofiend_Tentacle_3') 
				|| collidedActor.HasTag('ACS_Necrofiend_Tentacle_6')
				|| collidedActor.HasTag('ACS_Necrofiend_Tentacle_5')
				|| collidedActor.HasTag('ACS_Necrofiend_Tentacle_4')
				|| collidedActor.HasTag('ACS_Vampire_Monster_Boss_Bar') 
				|| collidedActor.HasTag('ACS_Chaos_Cloud') 
				)
				continue;

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, collidedActor, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_AttackPower, false, false, false, false);

				if (collidedActor.UsesVitality()) 
				{ 
					maxTargetVitality = collidedActor.GetStatMax( BCS_Vitality );

					damageMax = collidedActor.GetStat( BCS_Vitality ) * 0.125; 

					damageMin = collidedActor.GetStat( BCS_Vitality ) * 0.0625; 
				} 
				else if (collidedActor.UsesEssence()) 
				{ 
					maxTargetEssence = collidedActor.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(collidedActor.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| collidedActor.GetRadius() >= 0.7
					)
					{
						damageMax = collidedActor.GetStat( BCS_Essence ) * 0.0625; 

						damageMin = collidedActor.GetStat( BCS_Essence ) * 0.03125; 
					}
					else
					{
						damageMax = collidedActor.GetStat( BCS_Essence ) * 0.125; 

						damageMin = collidedActor.GetStat( BCS_Essence ) * 0.0625; 
					}
				}

				collidedActor.SoundEvent("cmb_play_hit_heavy");

				collidedActor.SoundEvent("monster_dettlaff_monster_vein_hit_blood");

				collidedActor.PlayEffectSingle('heavy_hit');
				collidedActor.StopEffect('heavy_hit');

				collidedActor.PlayEffectSingle('light_hit');
				collidedActor.StopEffect('light_hit');

				blood_fx.Clear();
				blood_fx.PushBack('default_blood_trail');
				blood_fx.PushBack('cutscene_blood_trail');
				blood_fx.PushBack('cutscene_blood_trail_02');
				blood_fx.PushBack('blood_trail_horseriding');
				blood_fx.PushBack('blood_trail_finisher');
				blood_fx.PushBack('fast_trail_blood_fx');
				blood_fx.PushBack('weapon_blood');
				blood_fx.PushBack('weapon_blood_stage1');
				blood_fx.PushBack('weapon_blood_stage2'); 

				theGame.GetMonsterParamsForActor(collidedActor, mc, tmpName, tmpBool, tmpBool, tmpBool);

				if( ((CNewNPC)collidedActor).GetBloodType() == BT_Red) 
				{
					if (collidedActor.HasAbility('mon_lessog_base')
					|| collidedActor.HasAbility('mon_sprigan_base')
					)
					{						
						sword_trail_1.StopEffect('aerondight_blood_black');
						sword_trail_1.PlayEffectSingle('aerondight_blood_black');
					} 
					else 
					{
						r_blade1.PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
					}
				}
				else if( ((CNewNPC)collidedActor).GetBloodType() == BT_Green) 
				{
					if (collidedActor.HasAbility('mon_kikimore_base')
					|| collidedActor.HasAbility('mon_black_spider_base')
					|| collidedActor.HasAbility('mon_black_spider_ep2_base')
					|| collidedActor.HasTag('ACS_Ungoliant')
					)
					{						
						sword_trail_1.StopEffect('aerondight_blood_black');
						sword_trail_1.PlayEffectSingle('aerondight_blood_black');
					} 
					else 
					{
						sword_trail_1.StopEffect('aerondight_blood_green');
						sword_trail_1.PlayEffectSingle('aerondight_blood_green');
					}
				}
				else if( ((CNewNPC)collidedActor).GetBloodType() == BT_Yellow) 
				{
					if (collidedActor.HasAbility('mon_archespor_base'))
					{
						sword_trail_1.StopEffect('aerondight_blood_yellow');
						sword_trail_1.PlayEffectSingle('aerondight_blood_yellow');
					} 
					else 
					{
						r_blade1.PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
					}
				}
				else if	( ((CNewNPC)collidedActor).GetBloodType() == BT_Black) 
				{
					if ( mc == MC_Vampire ) 
					{
						r_blade1.PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
					}
					else if ( mc == MC_Magicals ) 
					{
						if (collidedActor.HasAbility('mon_golem_base')
						|| collidedActor.HasAbility('mon_djinn')
						|| collidedActor.HasAbility('mon_gargoyle')
						)
						{
							sword_trail_1.StopEffect('aerondight_blood_black');
							sword_trail_1.PlayEffectSingle('aerondight_blood_black');
						}
						else
						{
							r_blade1.PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
						}
					}
					else
					{
						sword_trail_1.StopEffect('aerondight_blood_black');
						sword_trail_1.PlayEffectSingle('aerondight_blood_black');
					}
				}
				else
				{
					r_blade1.PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				}

				if (GetWitcherPlayer().IsWeaponHeld('steelsword'))
				{
					GetWitcherPlayer().GetInventory().GetItemEquippedOnSlot(EES_SteelSword, item_steel);

					dmgValSword = GetWitcherPlayer().GetTotalWeaponDamage(item_steel, theGame.params.DAMAGE_NAME_SLASHING, GetInvalidUniqueId()) 
					+ GetWitcherPlayer().GetTotalWeaponDamage(item_steel, theGame.params.DAMAGE_NAME_PIERCING, GetInvalidUniqueId())
					+ GetWitcherPlayer().GetTotalWeaponDamage(item_steel, theGame.params.DAMAGE_NAME_BLUDGEONING, GetInvalidUniqueId());

					dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, dmgValSword * 0.5 );
				}
				else if (GetWitcherPlayer().IsWeaponHeld('silversword'))
				{
					GetWitcherPlayer().GetInventory().GetItemEquippedOnSlot(EES_SilverSword, item_silver);

					dmgValSword = GetWitcherPlayer().GetTotalWeaponDamage(item_silver, theGame.params.DAMAGE_NAME_SILVER, GetInvalidUniqueId()); 

					dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, dmgValSword * 0.5 );
				}

				dmg.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, RandRangeF(damageMax,damageMin) );
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}
	
	event OnProcessActionPost(action : W3DamageAction)
	{
		super.OnProcessActionPost(action);

	}
	
	event OnTakeDamage( action : W3DamageAction )
	{
		super.OnTakeDamage(action);
		
		
	}
	
	event OnDeath( damageAction : W3DamageAction )
	{
		super.OnDeath( damageAction );

		
	}

	event OnDestroyed()
	{
		super.OnDestroyed();

		r_blade1.BreakAttachment();
		r_blade1.Teleport( thePlayer.GetWorldPosition() + Vector( 0, 0, -400) );
		r_blade1.DestroyAfter(0.125);

		sword_trail_1.BreakAttachment();
		sword_trail_1.Teleport( thePlayer.GetWorldPosition() + Vector( 0, 0, -400) );
		sword_trail_1.DestroyAfter(0.125);

		sword_trail_2.BreakAttachment();
		sword_trail_2.Teleport( thePlayer.GetWorldPosition() + Vector( 0, 0, -400) );
		sword_trail_2.DestroyAfter(0.125);
	}
}

function ACS_Geralt_Phantom_Destroy()
{	
	var wolves 											: array<CActor>;
	var i												: int;

	wolves.Clear();

	theGame.GetActorsByTag( 'ACS_Geralt_Phantom', wolves );	

	if (wolves.Size() <= 0)
	{
		return;
	}

	for( i = 0; i < wolves.Size(); i += 1 )
	{
		wolves[i].Destroy();
	}
}

statemachine class CACSGeraltPhantomAssassin extends CNewNPC
{
	var r_blade1, sword_trail_1, sword_trail_2								: CEntity;
	var trail_temp															: CEntityTemplate;
	
	event OnSpawned( spawnData : SEntitySpawnData )
	{
		var animcomp 														: CAnimatedComponent;
		var anim_names														: array< name >;
		var movementAdjustorNPC												: CMovementAdjustor; 
		var ticketNPC 														: SMovementAdjustmentRequestTicket; 
		var blade_temp_ent													: CEntity;
		var steelID, silverID 												: SItemUniqueId;
	
		super.OnSpawned( spawnData );

		AddTag('ACS_Geralt_Phantom_Assassin');

		if (ACS_Armor_Equipped_Check()
		)
		{
			PlayEffect('shadows_form');
			PlayEffect('smoke_effect_1');
			PlayEffect('smoke_effect_2');
			PlayEffect('olgierd_energy_blast');
		}
		else
		{
			PlayEffect('ghost_06');
		}

		SetAnimationSpeedMultiplier( 1 );

		EnableCharacterCollisions( false );

		SetVisibility(false);

		AddTimer('Reveal', 0.06125, false);

		sword_trail_1 = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResource( "dlc\dlc_acs\data\fx\acs_sword_trail.w2ent" , true ), GetWitcherPlayer().GetWorldPosition() + Vector( 0, 0, -20 ) );

		sword_trail_1.CreateAttachment( this, 'r_weapon' );

		if (ACS_Armor_Equipped_Check()
		)
		{
			trail_temp = (CEntityTemplate)LoadResource( "dlc\dlc_acs\data\fx\acs_enemy_sword_trail.w2ent" , true );

			sword_trail_2 = (CEntity)theGame.CreateEntity( trail_temp, this.GetWorldPosition() + Vector( 0, 0, -20 ) );

			sword_trail_2.CreateAttachment( this, 'r_weapon');

			sword_trail_2.AddTag( 'ACS_Armor_Ether_Sword' );

			sword_trail_2.PlayEffectSingle('special_attack_charged_iris');

			sword_trail_1.PlayEffectSingle('red_runeword_igni_1');

			sword_trail_1.PlayEffectSingle('red_runeword_igni_2');

			//sword_trail_2.PlayEffectSingle('runeword1_fire_trail');

			//sword_trail_2.PlayEffectSingle('runeword1_fire_trail_2');

			//sword_trail_2.PlayEffectSingle('fire_sparks_trail');

			sword_trail_2.PlayEffectSingle('red_fast_attack_buff');

			sword_trail_2.PlayEffectSingle('red_fast_attack_buff_hit');

			if (ACS_Armor_Omega_Equipped_Check())
			{
				if(GetWitcherPlayer().IsWeaponHeld( 'silversword' ) )
				{
					sword_trail_2.PlayEffectSingle('soul_edge_glow');
				}
				else if(GetWitcherPlayer().IsWeaponHeld( 'steelsword' ))
				{
					sword_trail_2.PlayEffectSingle('war_sword_glow');
				}
			}
			else if (ACS_Armor_Alpha_Equipped_Check())
			{
				if(GetWitcherPlayer().IsWeaponHeld( 'silversword' ) )
				{
					sword_trail_2.PlayEffectSingle('doomsword_glow');
				}
				else if(GetWitcherPlayer().IsWeaponHeld( 'steelsword' ))
				{
					sword_trail_2.PlayEffectSingle('pridefall_glow');
				}
			} 
		}
		else
		{
			GetWitcherPlayer().GetItemEquippedOnSlot(EES_SilverSword, silverID);
			GetWitcherPlayer().GetItemEquippedOnSlot(EES_SteelSword, steelID);

			if (GetWitcherPlayer().IsWeaponHeld('steelsword'))
			{
				blade_temp_ent = GetWitcherPlayer().GetInventory().GetItemEntityUnsafe(steelID);
			}
			else if (GetWitcherPlayer().IsWeaponHeld('silversword'))
			{
				blade_temp_ent = GetWitcherPlayer().GetInventory().GetItemEntityUnsafe(silverID);
			}

			r_blade1 = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResource(blade_temp_ent.GetReadableName(), true ), Vector( 0, 0, -20 ) );

			r_blade1.CreateAttachment(this, 'r_weapon');

			sword_trail_1.StopEffect('light_trail_fx');
			sword_trail_1.StopEffect('red_aerondight_special_trail');
			sword_trail_1.StopEffect('red_charge_10');
			sword_trail_1.StopEffect('fast_attack_buff');
			sword_trail_1.StopEffect('fast_attack_buff_hit');

			sword_trail_1.PlayEffect('light_trail_fx');
			sword_trail_1.PlayEffect('red_aerondight_special_trail');
			sword_trail_1.PlayEffect('red_charge_10');
			//sword_trail_1.PlayEffect('fast_attack_buff');
			//sword_trail_1.PlayEffect('fast_attack_buff_hit');

			r_blade1.StopEffect('light_trail_fx');
			r_blade1.StopEffect('fast_attack_buff');
			r_blade1.StopEffect('fast_attack_buff_hit');

			r_blade1.PlayEffect('light_trail_fx');
			r_blade1.PlayEffect('fast_attack_buff');
			r_blade1.PlayEffect('fast_attack_buff_hit');
		}

		DestroyAfter(2.7);
	}
	
	timer function Reveal ( dt : float, id : int)
	{
		SetVisibility(true);
	}
	
	event OnPreAttackEvent(animEventName : name, animEventType : EAnimationEventType, data : CPreAttackEventData, animInfo : SAnimationEventAnimInfo )
	{
		var collidedActor 																														: CActor;
		var actors 																																: array< CActor >;
		var dmg 																																: W3DamageAction;
		var curTargetVitality, maxTargetVitality, curTargetEssence, maxTargetEssence, damageMax, damageMin										: float;
		var i 																																	: int;
		var actortargetPosition, oPos																											: Vector;
		var lightningTargetEnt																													: CEntity;
		var animcomp 																															: CAnimatedComponent;
		var tmpName 																															: name;
		var tmpBool 																															: bool;
		var mc 																																	: EMonsterCategory;
		var blood_fx																															: array<CName>;
		var item_steel, item_silver																												: SItemUniqueId;
		var dmgValSword																															: float;

		super.OnPreAttackEvent(animEventName, animEventType, data, animInfo);

		if (ACS_Armor_Equipped_Check()
		)
		{
			sword_trail_1.StopEffect('light_trail_extended_fx_red');
			sword_trail_1.StopEffect('red_aerondight_special_trail');
			sword_trail_1.StopEffect('red_charge_10');

			sword_trail_1.PlayEffect('light_trail_extended_fx_red');
			sword_trail_1.PlayEffect('red_aerondight_special_trail');
			sword_trail_1.PlayEffect('red_charge_10');

			sword_trail_2.StopEffect('special_attack_iris');
			sword_trail_2.PlayEffectSingle('special_attack_iris');

			sword_trail_2.StopEffect('red_fast_attack_buff');
			sword_trail_2.PlayEffectSingle('red_fast_attack_buff');

			sword_trail_2.StopEffect('red_fast_attack_buff_hit');
			sword_trail_2.PlayEffectSingle('red_fast_attack_buff_hit');
		}
		else
		{
			r_blade1.StopEffect('light_trail_fx');
			r_blade1.StopEffect('fast_attack_buff');
			r_blade1.StopEffect('fast_attack_buff_hit');

			r_blade1.PlayEffect('light_trail_fx');
			r_blade1.PlayEffect('fast_attack_buff');
			r_blade1.PlayEffect('fast_attack_buff_hit');

			sword_trail_1.StopEffect('light_trail_fx');
			sword_trail_1.StopEffect('red_aerondight_special_trail');
			sword_trail_1.StopEffect('red_charge_10');
			sword_trail_1.StopEffect('fast_attack_buff');
			sword_trail_1.StopEffect('fast_attack_buff_hit');

			sword_trail_1.PlayEffect('light_trail_fx');
			sword_trail_1.PlayEffect('red_aerondight_special_trail');
			sword_trail_1.PlayEffect('red_charge_10');
		}
	}
	
	event OnProcessActionPost(action : W3DamageAction)
	{
		super.OnProcessActionPost(action);

	}
	
	event OnTakeDamage( action : W3DamageAction )
	{
		super.OnTakeDamage(action);
		
		
	}
	
	event OnDeath( damageAction : W3DamageAction )
	{
		super.OnDeath( damageAction );

		
	}

	event OnDestroyed()
	{
		super.OnDestroyed();

		r_blade1.BreakAttachment();
		r_blade1.Teleport( thePlayer.GetWorldPosition() + Vector( 0, 0, -400) );
		r_blade1.DestroyAfter(0.125);

		sword_trail_1.BreakAttachment();
		sword_trail_1.Teleport( thePlayer.GetWorldPosition() + Vector( 0, 0, -400) );
		sword_trail_1.DestroyAfter(0.125);

		sword_trail_2.BreakAttachment();
		sword_trail_2.Teleport( thePlayer.GetWorldPosition() + Vector( 0, 0, -400) );
		sword_trail_2.DestroyAfter(0.125);
	}
}

function ACS_Geralt_Phantom_Assassin_Destroy()
{	
	var wolves 											: array<CActor>;
	var i												: int;

	wolves.Clear();

	theGame.GetActorsByTag( 'ACS_Geralt_Phantom_Assassin', wolves );	

	if (wolves.Size() <= 0)
	{
		return;
	}

	for( i = 0; i < wolves.Size(); i += 1 )
	{
		wolves[i].Destroy();
	}
}

class ACSWratihFinisherMark extends CEntity
{
	var actor															: CActor;
	var shield_temp														: CEntityTemplate;
	var shield															: CEntity;
	var ents  															: array<CGameplayEntity>;
	var i, j, k, l, m													: int;
	var dismembermentComp 												: CDismembermentComponent;
	var wounds															: array< name >;
	var usedWound														: name;
	var movementAdjustorNPCCrawl										: CMovementAdjustor;
	var ticketNPCCrawl													: SMovementAdjustmentRequestTicket;
	var animatedComponentA												: CAnimatedComponent;
	var soundComponentA													: CSoundEmitterComponent;
	var drawableComponents 												: array < CComponent >;
	var drawableComponent 												: CDrawableComponent;
	var temp 															: CR4Player;
	var finisher_anim_names												: array< name >;
	var finisher_anim_name_selected										: name;
	
	
	event OnSpawned( spawnData : SEntitySpawnData )
	{
		super.OnSpawned(spawnData);

		PlayEffectSingle('rune_hand_knife_white');

		AddTag('ACS_Wraith_Finisher_Mark');

		AddTimer('AliveCheckTimer', 0.1, true);
	}
	
	timer function AliveCheckTimer ( dt : float, id : int)
	{
		ents.Clear();

		FindGameplayEntitiesCloseToPoint(ents, this.GetWorldPosition(), 0.01, 1, ,FLAG_ExcludePlayer, ,);

		//FindGameplayEntitiesInRange(ents, this, 0.01, 1, ,FLAG_ExcludePlayer );
		
		for( i = 0; i < ents.Size(); i += 1 )
		{
			if( ents.Size() > 0 )
			{
				actor = (CActor) ents[i];

				if ( !actor.HasTag('ACS_Wraith_Finisher_Marked')
				)
				{
					this.Destroy();
					return;
				}

				if ( !actor.IsAlive() 
				|| theGame.IsDialogOrCutscenePlaying() 
				|| !thePlayer.IsInCombat()
				|| !thePlayer.IsThreatened()
				)
				{
					actor.RemoveTag('ACS_Wraith_Finisher_Marked');
					this.Destroy();
				}
			}
		}
	}
}

function ACS_BowHandSwitch( b : bool )
{
	var attach_rot : EulerAngles;
	var attach_vec : Vector;

	if (!thePlayer.IsAnyWeaponHeld() || thePlayer.IsWeaponHeld('fist'))
	{
		return;
	}

	ACSGetCEntity('acs_bow').BreakAttachment();

	if (b)
	{
		attach_rot.Roll = 0;
		attach_rot.Pitch = 0;
		attach_rot.Yaw = 30;
		attach_vec.X = 0;
		attach_vec.Y = -0.025;
		attach_vec.Z = -0.045;

		ACSGetCEntity('acs_bow').CreateAttachment( GetWitcherPlayer(), 'r_weapon', attach_vec, attach_rot );
	}
	else
	{
		attach_rot.Roll = 0;
		attach_rot.Pitch = 0;
		attach_rot.Yaw = 0;
		attach_vec.X = 0;
		attach_vec.Y = -0.025;
		attach_vec.Z = -0.045;

		ACSGetCEntity('acs_bow').CreateAttachment( GetWitcherPlayer(), 'l_weapon', attach_vec, attach_rot );
	}

	ACSGetCEntity('acs_bow').GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_switch_bow_to_sword' );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ACS_ArchesporeTurretSwitch()
{
	var vACS_ArchesporeTurretSwitch : cACS_ArchesporeTurretSwitch;
	vACS_ArchesporeTurretSwitch = new cACS_ArchesporeTurretSwitch in theGame;
			
	vACS_ArchesporeTurretSwitch.Engage();
}

statemachine class cACS_ArchesporeTurretSwitch
{
    function Engage()
	{
		this.PushState('cACS_ArchesporeTurretSwitch_Engage');
	}
}

state cACS_ArchesporeTurretSwitch_Engage in cACS_ArchesporeTurretSwitch
{
	private var temp : CEntityTemplate;

	private var turretBase : CEntity;
	
	private var animcomp 	: CAnimatedComponent;
	

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		ArchesporeTurretSwitch();
	}
	
	entry function ArchesporeTurretSwitch()
	{
		var bonePos							: Vector;
		var boneRot							: EulerAngles;
		var ent 							: CEntity;

		if (
		ACSGetCEntity('ACS_Player_Echinops_Turret') 
		&& ACSGetCEntity('ACS_Player_Echinops_Turret').HasTag('ACS_Player_Echinops_Turret_Destroy_Process')
		)
		{
			return;
		}

		if (ACSGetCEntity('ACS_ArchesporePlayerTurretBase'))
		{
			ACSGetCEntity('ACS_Player_Echinops_Turret').AddTag('ACS_Player_Echinops_Turret_Destroy_Process');

			GetACSEchinopsPlayerTurretBase().ACS_EchinopsPlayerTurret_Despawn();
		}
		else
		{
			temp = (CEntityTemplate)LoadResourceAsync( 

			"dlc\dlc_acs\data\entities\other\echinops_player_turret_base.w2ent"
				
			, true );

			turretBase = theGame.CreateEntity( temp, thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );

			bonePos.X = 0;
			bonePos.Y = 0;
			bonePos.Z = 2;
			boneRot.Pitch = 0;
			boneRot.Roll = 0;
			boneRot.Yaw = 0;

			turretBase.CreateAttachment( thePlayer, 'blood_point', bonePos, boneRot );
		}
	}

	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

function GetACSEchinopsPlayerTurretBase() : CACSEchinopsPlayerTurretBase
{
	var watcher 			 : CACSEchinopsPlayerTurretBase;
	
	watcher = (CACSEchinopsPlayerTurretBase)theGame.GetEntityByTag( 'ACS_ArchesporePlayerTurretBase' );

	return watcher;
}

statemachine class CACSEchinopsPlayerTurretBase extends CEntity
{
	private var temp : CEntityTemplate;

	private var tail_anchor, tail : CEntity;

	private var turretBase : CEntity;
	
	private var animcomp 	: CAnimatedComponent;

	event OnSpawned( spawnData : SEntitySpawnData )
	{
		var spawnpos, attach_vec											: Vector;
		var meshcomp														: CComponent;
		var animcomp 														: CAnimatedComponent;
		var h 																: float;
		var attach_rot														: EulerAngles;

		super.OnSpawned( spawnData );

		this.AddTag('ACS_ArchesporePlayerTurretBase');

		temp = (CEntityTemplate)LoadResource( 

		"dlc\dlc_acs\data\entities\other\echinops_player_turret_old.w2ent"
			
		, true );

		tail = (CEntity)theGame.CreateEntity( temp, GetWitcherPlayer().GetWorldPosition() + Vector( 0, 0, -20 ) );

		tail_anchor = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResource( 

		"dlc\bob\data\characters\models\monsters\echinops\i_04__echinops.w2ent"
			
		, true ), this.GetWorldPosition() + Vector(0,0,-20));

		attach_rot.Roll = 67.5;
		attach_rot.Pitch = 0;
		attach_rot.Yaw = 0;
		attach_vec.X = 0.225;
		attach_vec.Y = -0.175;
		attach_vec.Z = -1.8;

		tail_anchor.CreateAttachment( this, , attach_vec, attach_rot );

		animcomp = (CAnimatedComponent)tail_anchor.GetComponentByClassName('CAnimatedComponent');
		meshcomp = tail_anchor.GetComponentByClassName('CMeshComponent');
		h = 0.09375;
		animcomp.SetScale(Vector( h, h, 0.25, 1 ));
		meshcomp.SetScale(Vector( h, h, 0.25, 1 ));	

		tail_anchor.AddTag('ACS_Player_Echinops_Turret_Flower');
	}

	function ACS_EchinopsPlayerTurret_Despawn()
	{
		ACSGetCEntity('ACS_Player_Echinops_Turret').AddTag('ACS_Player_Echinops_Turret_Destroy_Process');

		animcomp = (CAnimatedComponent)((CNewNPC)ACSGetCActor('ACS_Player_Echinops_Turret')).GetComponentByClassName( 'CAnimatedComponent' );	

		animcomp.PlaySlotAnimationAsync ( 'locomotion_submerge', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));

		animcomp.FreezePoseFadeIn(3);

		ACSGetCEntity('ACS_Player_Echinops_Turret').PlayEffect('flow_newborn');

		ACSGetCEntity('ACS_Player_Echinops_Turret').PlayEffect('flow_one_timer');

		AddTimer('teleport_destroy', 2, false);

		ACSGetCEntity('ACS_Player_Echinops_Turret').DestroyAfter(2.5);

		ACSGetCEntity('ACS_Player_Echinops_Turret_Flower').DestroyAfter(2.5);

		this.DestroyAfter(2.5);
	}

	private timer function teleport_destroy( delta : float , id : int)
	{
		ACSGetCEntity('ACS_Player_Echinops_Turret').Teleport(Vector(0,0,-200));

		ACSGetCEntity('ACS_ArchesporePlayerTurretBase').Teleport(Vector(0,0,-200));
	}

}

class CACSEchinopsPlayerTurret extends CNewNPC
{
	private var meshcomp 																								: CComponent;
	private var animcomp 																								: CAnimatedComponent;
	private var h 	: float;
	
	event OnSpawned( spawnData : SEntitySpawnData )
	{
		super.OnSpawned( spawnData );

		((CNewNPC)this).EnableCharacterCollisions(false);
		((CNewNPC)this).EnableCollisions(false);
		((CActor)this).EnableCollisions(false);
		((CActor)this).EnableCharacterCollisions(false);

		thePlayer.EnableCharacterCollisions(false);

		((CActor)this).AddBuffImmunity_AllNegative('ACS_Echinops_Player_Turret_Entity', true);

		((CActor)this).AddBuffImmunity_AllCritical('ACS_Echinops_Player_Turret_Entity', true);

		this.AddTag('NoBestiaryEntry');

		this.AddTag('ACS_Player_Echinops_Turret');

		PlayEffect('flow_newborn');

		PlayEffect('flow_one_timer');

		SetImmortalityMode( AIM_Invulnerable, AIC_Default, true );

		meshcomp = this.GetComponentByClassName('CMeshComponent');
		animcomp = (CAnimatedComponent)this.GetComponentByClassName('CAnimatedComponent');
		h = 0.25;
		meshcomp.SetScale(Vector(h,h,h,1));	
		animcomp.SetScale(Vector(h,h,h,1));	

		animcomp.PlaySlotAnimationAsync ( 'locomotion_emerge', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));

		AddTimer('attach_tails', 0.01, true);
		AddTimer('revert_player_colisions', 1, false);
	}

	private timer function revert_player_colisions( delta : float , id : int)
	{
		thePlayer.EnableCharacterCollisions(true);

		this.AddTag('ACS_Player_Echinops_Turret_Enabled');
	}

	var last_turret_attack_refresh_time : float;

	function ACS_turret_can_attack(): bool 
	{
		var delay : float;

		if (thePlayer.IsInCombat())
		{
			delay = RandRangeF(7,3);
		}
		else
		{
			delay = RandRangeF(6,3);
		}

		return theGame.GetEngineTimeAsSeconds() - last_turret_attack_refresh_time > delay;
	}

	function ACS_refresh_turret_attack_cooldown() 
	{
		last_turret_attack_refresh_time = theGame.GetEngineTimeAsSeconds();
	}

	var actortarget : CActor;

	private timer function attach_tails( delta : float , id : int)
	{
		var attach_vec							: Vector;
		var attach_rot							: EulerAngles;
		var actors    							: array<CActor>;
		var i         							: int;
		var anim_names							: array<name>;
	
		attach_rot.Roll = 67.5;
		attach_rot.Pitch = 0;
		attach_rot.Yaw = 0;
		attach_vec.X = 0.275;
		attach_vec.Y = -0.175;
		attach_vec.Z = -1.8;

		this.BreakAttachment();
		this.CreateAttachment( ACSGetCEntity('ACS_ArchesporePlayerTurretBase'), , attach_vec, attach_rot );

		if (ACS_turret_can_attack())
		{
			ACS_refresh_turret_attack_cooldown();

			if (
			this.HasTag('ACS_Player_Echinops_Turret_Destroy_Process')
			|| !this.HasTag('ACS_Player_Echinops_Turret_Enabled')
			)
			{
				return;
			}

			animcomp = (CAnimatedComponent)this.GetComponentByClassName('CAnimatedComponent');
			
			if (thePlayer.IsInCombat())
			{
				if (thePlayer.IsCurrentlyDodging())
				{
					anim_names.Clear();

					anim_names.PushBack('attack_direct_01');
					anim_names.PushBack('attack_direct_02');
					anim_names.PushBack('attack_direct_03');
					anim_names.PushBack('attack_sweep_01');
					anim_names.PushBack('attack_sweep_02');
					
					animcomp.PlaySlotAnimationAsync ( anim_names[RandRange(anim_names.Size())], 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
				}
				else
				{
					actors.Clear();

					actors = GetWitcherPlayer().GetNPCsAndPlayersInCone(60, VecHeading(GetWitcherPlayer().GetHeadingVector()), 45, 1, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors  );

					for( i = 0; i < actors.Size(); i += 1 )
					{
						actortarget = (CActor)actors[i];
						
						if( actors.Size() > 0 )
						{
							if (RandF() < 0.75)
							{
								animcomp.PlaySlotAnimationAsync ( 'attack_shoot', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
							}
							else
							{
								animcomp.PlaySlotAnimationAsync ( 'utility_wander_eating_taunt', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
							}

							RemoveTimer('shoot_projectile_delay');
							AddTimer('shoot_projectile_delay', 0.75, false);
						}
					}	
				}
			}
			else
			{
				if (RandF() < 0.25)
				{
					animcomp.PlaySlotAnimationAsync ( 'utility_wander_eating_taunt', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
				}
				else
				{
					anim_names.Clear();

					anim_names.PushBack('locomotion_rotation_l_45');
					anim_names.PushBack('locomotion_rotation_r_45');
					anim_names.PushBack('locomotion_rotation_r_90');
					anim_names.PushBack('locomotion_rotation_l_90');
					anim_names.PushBack('locomotion_rotation_l_135');
					anim_names.PushBack('locomotion_rotation_l_180');
					anim_names.PushBack('locomotion_rotation_r_135');
					anim_names.PushBack('locomotion_rotation_r_180');

					animcomp.PlaySlotAnimationAsync ( anim_names[RandRange(anim_names.Size())], 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
				}
			}
		}
	}

	private timer function shoot_projectile_delay( delta : float , id : int)
	{
		var startPos, endPos : Vector;
		var startRot : EulerAngles;
		var projectileEntity : CEntityTemplate;
		var projectile : W3ACSPoisonProjectile;

		startPos = this.GetBoneWorldPosition('r_head_petal_01_2_jnt');
		startRot = this.GetWorldRotation();

		endPos = actortarget.PredictWorldPosition( 0.35 );

		projectile = (W3ACSPoisonProjectile)theGame.CreateEntity( (CEntityTemplate)LoadResource( 

		"dlc\dlc_acs\data\entities\projectiles\player_echinops_turret_projectile.w2ent"
		
		, true ), startPos, startRot );
		
		if( projectile )
		{
			if ( !theSound.SoundIsBankLoaded("monster_toad.bnk") )
			{
				theSound.SoundLoadBank( "monster_toad.bnk", false );
			}

			thePlayer.DrainVitality(thePlayer.GetStat(BCS_Vitality) * 0.05);
			
			SoundEvent('monster_toad_fx_mucus_spit');

			projectile.Init(GetWitcherPlayer());

			projectile.PlayEffectSingle('venom');
			projectile.PlayEffectSingle('venom_hit');
			projectile.PlayEffectSingle('venom_copy');
			projectile.PlayEffectSingle('venom_copy_small');

			projectile.ShootProjectileAtPosition( 0, 15, endPos, 500 );
		}
	}

	event OnTakeDamage( action : W3DamageAction )
	{

	}

	event OnDestroyed()
	{
		super.OnDestroyed();
	}
}

statemachine class cACS_Create_Flute
{
    function Create_Flute_Engage()
	{
		this.PushState('Create_Flute_Engage');
	}
}

state Create_Flute_Engage in cACS_Create_Flute
{
	var ent : CEntity;
	var player : Vector;
	var rot : EulerAngles;

	event OnEnterState(prevStateName : name)
	{
		super.OnEnterState(prevStateName);
		Create_Flute();
	}
	
	entry function Create_Flute()
	{
		rot = thePlayer.GetWorldRotation();	
		player = thePlayer.GetWorldPosition();

		ACSGetCEntity('ACS_Flute').Destroy();

		ent = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 

		"items\work\flute\flute_01.w2ent"

		, true ), player, rot );

		ent.CreateAttachment(thePlayer,'r_weapon');

		ent.AddTag('ACS_Flute');
	}
	
	event OnLeaveState( nextStateName : name ) 
	{
		super.OnLeaveState(nextStateName);
	}
}

function ACS_ChainWeaponCheck() : bool
{
	if (ACSGetChainWeaponR() 
	|| ACSGetChainWeaponL() 
	|| ACSGetChainWeaponRFist()
	|| ACSGetChainWeaponLFist()
	)
	{
		return true;
	}

	return false;
}

function ACSGetChainWeaponR() : W3ACSChainWeapon
{
	var chain 			 : W3ACSChainWeapon;
	
	chain = (W3ACSChainWeapon)theGame.GetEntityByTag( 'ACS_Chain_Weapon_R' );
	return chain;
}

function ACSGetChainWeaponL() : W3ACSChainWeapon
{
	var chain 			 : W3ACSChainWeapon;
	
	chain = (W3ACSChainWeapon)theGame.GetEntityByTag( 'ACS_Chain_Weapon_L' );
	return chain;
}

function ACSGetChainWeaponRFist() : W3ACSChainWeapon
{
	var chain 			 : W3ACSChainWeapon;
	
	chain = (W3ACSChainWeapon)theGame.GetEntityByTag( 'ACS_Chain_Weapon_R_Fist' );
	return chain;
}

function ACSGetChainWeaponLFist() : W3ACSChainWeapon
{
	var chain 			 : W3ACSChainWeapon;
	
	chain = (W3ACSChainWeapon)theGame.GetEntityByTag( 'ACS_Chain_Weapon_L_Fist' );
	return chain;
}

function ACS_Chain_Weapon_Set_Attack( attack_end : bool )
{
	if (ACSGetChainWeaponR())
	{
		ACSGetChainWeaponR().set_attack_end( attack_end );
		ACSGetChainWeaponR().play_trail();
	}

	if (ACSGetChainWeaponL())
	{
		ACSGetChainWeaponL().set_attack_end( attack_end );
		ACSGetChainWeaponR().play_trail();
	}

	if (ACSGetChainWeaponRFist())
	{
		ACSGetChainWeaponRFist().set_attack_end( attack_end );
		ACSGetChainWeaponR().play_trail();
	}

	if (ACSGetChainWeaponLFist())
	{
		ACSGetChainWeaponLFist().set_attack_end( attack_end );
		ACSGetChainWeaponR().play_trail();
	}
}

function ACS_Chain_Weapon_DestroyAll()
{
	if (ACSGetChainWeaponR())
	{
		ACSGetChainWeaponR().RemoveTimer('destroy_chain');
		ACSGetChainWeaponR().AddTimer('destroy_chain', 0.01, false);
		ACSGetChainWeaponR().RemoveTag('ACS_Chain_Weapon_R');
	}

	if (ACSGetChainWeaponL())
	{
		ACSGetChainWeaponL().RemoveTimer('destroy_chain');
		ACSGetChainWeaponL().AddTimer('destroy_chain', 0.01, false);
		ACSGetChainWeaponL().RemoveTag('ACS_Chain_Weapon_L');
	}

	if (ACSGetChainWeaponRFist())
	{
		ACSGetChainWeaponRFist().RemoveTimer('destroy_chain');
		ACSGetChainWeaponRFist().AddTimer('destroy_chain', 0.01, false);
		ACSGetChainWeaponRFist().RemoveTag('ACS_Chain_Weapon_R_Fist');
	}

	if (ACSGetChainWeaponLFist())
	{
		ACSGetChainWeaponLFist().RemoveTimer('destroy_chain');
		ACSGetChainWeaponLFist().AddTimer('destroy_chain', 0.01, false);
		ACSGetChainWeaponLFist().RemoveTag('ACS_Chain_Weapon_L_Fist');
	}
}

statemachine class W3ACSChainWeapon extends CGameplayEntity
{
	var CustomEffect	: SCustomEffectParams;
	var damage_action 	: W3DamageAction;
	var actor 			: CActor;	
	var effect			: CEntity;
	var targetpos		: Vector;
	var rotation		: EulerAngles;
	var tempname		: string;
	var stoptime		: float;
	var sound			: bool;
	var damage			: float;
	var spellpower		: float;
	var temp 			: CR4Player;
	var multiplier		: float;
	var attack_end		: bool;
	var addrot			: bool;
	var links			: array< CEntity >;
	var i				: int;
	var trail_name		: name;
	var force_decrease	: bool;

	event OnSpawned( spawnData : SEntitySpawnData )
	{
		if ( !theSound.SoundIsBankLoaded("magic_eredin.bnk") )
		{
			theSound.SoundLoadBank( "magic_eredin.bnk", true );
		}
		if ( !theSound.SoundIsBankLoaded("magic_man_mage.bnk") )
		{
			theSound.SoundLoadBank( "magic_man_mage.bnk", true );
		}
		if ( !theSound.SoundIsBankLoaded("ep2_mutations_02.bnk") )
		{
			theSound.SoundLoadBank( "ep2_mutations_02.bnk", true );
		}
		if ( !theSound.SoundIsBankLoaded("magic_yennefer.bnk") )
		{
			theSound.SoundLoadBank( "magic_yennefer.bnk", true );
		}

		if ( !theSound.SoundIsBankLoaded("amb_dyn_bob_vampire_castle.bnk") )
		{
			theSound.SoundLoadBank( "amb_dyn_bob_vampire_castle.bnk", true );
		}

		if ( !theSound.SoundIsBankLoaded("monster_knight_giant.bnk") )
		{
			theSound.SoundLoadBank( "monster_knight_giant.bnk", true );
		}
	
		force_decrease = false;

		this.AddTag('ACS_Chain_Weapon');
	
		GotoState('ACSChainActive');
		
		AddTimer('check_chain', 0.1, true );

		AddTimer('tag_check', 0.125, false );
	}

	var r_anchor, l_anchor														: CEntity;

	timer function tag_check( deltaTime : float, optional id : int )
	{
		var attach_vec, bone_vec													: Vector;
		var attach_rot, bone_rot													: EulerAngles;
		var anchor_temp																: CEntityTemplate;
	
		if (this.HasTag('ACS_Chain_Weapon_R'))
		{
			CreateAttachment( thePlayer, 'r_weapon', Vector( 0, 0, 0.35 ) );
		}
		else if (this.HasTag('ACS_Chain_Weapon_L'))
		{
			CreateAttachment( thePlayer, 'l_weapon', Vector( 0, 0, 0.35 ) );
		}
		else if (this.HasTag('ACS_Chain_Weapon_R_Fist'))
		{
			anchor_temp = (CEntityTemplate)LoadResource( "dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true );
		
			GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( GetWitcherPlayer().GetBoneIndex( 'r_hand' ), bone_vec, bone_rot );
			r_anchor = (CEntity)theGame.CreateEntity( anchor_temp, GetWitcherPlayer().GetWorldPosition() );
			r_anchor.CreateAttachmentAtBoneWS( GetWitcherPlayer(), 'r_hand', bone_vec, bone_rot );

			attach_rot.Roll = 90;
			attach_rot.Pitch = 90;
			attach_rot.Yaw = 10;
			attach_vec.X = -0.15;
			attach_vec.Y = -0.075;
			attach_vec.Z = -0.005;
			
			CreateAttachment( r_anchor, , attach_vec, attach_rot );
		}
		else if (this.HasTag('ACS_Chain_Weapon_L_Fist'))
		{
			anchor_temp = (CEntityTemplate)LoadResource( "dlc\dlc_acs\data\entities\other\fx_ent.w2ent", true );

			GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( GetWitcherPlayer().GetBoneIndex( 'l_hand' ), bone_vec, bone_rot );
			l_anchor = (CEntity)theGame.CreateEntity( anchor_temp, GetWitcherPlayer().GetWorldPosition() );
			
			l_anchor.CreateAttachmentAtBoneWS( GetWitcherPlayer(), 'l_hand', bone_vec, bone_rot );

			attach_rot.Roll = 90;
			attach_rot.Pitch = 90;
			attach_rot.Yaw = 10;
			attach_vec.X = -0.15;
			attach_vec.Y = -0.075;
			attach_vec.Z = -0.005;

			CreateAttachment( l_anchor, , attach_vec, attach_rot );
		}
	}
	
	function set_attack_end( val : bool )
	{
		SoundEvent("monster_knight_giant_mv_chain_hard");
		SoundEvent("monster_knight_giant_mv_chain_soft");

		if (RandF() < 0.5)
		{
			//SoundEvent("monster_cyclop_chain_move_heavy");
		}
		else
		{
			//SoundEvent("monster_cyclop_chain_move_light");
		}

		attack_end = val;
		addrot = val;
	}
	
	function play_trail()
	{
		for ( i = 0; i < links.Size(); i += 1 )
		{
			if ( i >= 1 )
			{
				links[i].PlayEffectSingle( trail_name );
			}
		}
	}
	
	timer function check_chain( deltaTime : float, optional id : int )
	{
		if ( theGame.IsDialogOrCutscenePlaying() 
		|| !thePlayer.IsAnyWeaponHeld() 
		//|| thePlayer.HasTag('acs_aard_sword_equipped') 
		//|| thePlayer.HasTag('acs_aard_secondary_sword_equipped') 

		//|| thePlayer.HasTag('acs_quen_sword_equipped') 
		//|| thePlayer.HasTag('acs_quen_secondary_sword_equipped') 

		//|| thePlayer.HasTag('acs_yrden_sword_equipped') 
		//|| thePlayer.HasTag('acs_yrden_secondary_sword_equipped') 

		//|| thePlayer.HasTag('acs_axii_sword_equipped') 
		//|| thePlayer.HasTag('acs_axii_secondary_sword_equipped') 

		|| thePlayer.HasTag('acs_sorc_fists_equipped')
		//|| thePlayer.IsUsingHorse() 
		//|| thePlayer.IsUsingVehicle()
		//|| thePlayer.IsSwimming()
		//|| thePlayer.IsDiving() 
		)
		{
			destroy_chain( 0.0 );
		}
	}
	
	timer function destroy_chain( deltaTime : float, optional id : int )
	{
		RemoveTimers();
		
		for ( i = 0; i < links.Size(); i += 1 )
		{
			links[i].DestroyAllEffects();
		}

		if (r_anchor)
		{
			r_anchor.Destroy();
		}
		
		if (l_anchor)
		{
			l_anchor.Destroy();
		}

		BreakAttachment();

		Teleport(thePlayer.GetWorldPosition() + Vector(0,0,-200));
		
		DestroyAfter( 0.2 );

		RemoveTag('ACS_Chain_Weapon_R');

		RemoveTag('ACS_Chain_Weapon_L');

		RemoveTag('ACS_Chain_Weapon_R_Fist');

		RemoveTag('ACS_Chain_Weapon_L_Fist');
	}
	
	function forceDecrease()
	{
		force_decrease = true;
		AddTimer('reset_Decrease', 0.5 / thePlayer.GetAnimationTimeMultiplier() );
	}

	timer function reset_Decrease( deltaTime : float, optional id : int )
	{
		force_decrease = false;
	}
}

state ACSChainActive in W3ACSChainWeapon
{
	var i					: int;
	var link				: W3ACSChainWeaponLink;
	var matrix				: Matrix;
	var pos,pos2			: Vector;
	var rot,rot2			: EulerAngles;
	var X,Y,Z				: float;
	var R,Ya,P				: int;
	var	step				: float;
	var change_rot			: bool;
	var rotplus				: bool;
	var num					: int;
	var eff_name			: name;

	event OnEnterState( prevStateName : name )
	{
		create_chain_links();
	}

	entry function create_chain_links()
	{
		num = 14;
	
		for ( i = 0; i < num; i += 1 )
		{
			link = (W3ACSChainWeaponLink)theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync("dlc\dlc_acs\data\entities\chain_weapon\acs_chain_weapon_link.w2ent", true ), thePlayer.GetWorldPosition() );

			parent.links.PushBack(link);
		}

		process_chain();
	}

	latent function process_chain()
	{
		var l_weaponTipPos 			: Vector;
		var l_offset				: Vector;
		var rotation				: EulerAngles;
		var text					: string;
		var finalstep				: float;
		var finalroll				: float;
		var increase				: bool;
		var increase_start			: bool;
		var weaponEntity			: CItemEntity;
		var current_sign			: ESignType;
		var effect_active			: bool;
		var effect, effect_0		: CEntity;
		var linkPos, groundLinkPos 	: Vector;
	
		change_rot = true;
		rotplus = true;
		effect_active = false;
		increase_start = false;
		
		while( true )
		{
			if ( current_sign != GetWitcherPlayer().GetEquippedSign() )
			{
				effect_active = false;
				for ( i = 0; i < parent.links.Size(); i += 1 )
				{
					parent.links[i].DestroyEffectIfActive( eff_name );
				}
			}

			current_sign = GetWitcherPlayer().GetEquippedSign();

			if ( !effect_active )
			{
				/*
				switch( current_sign )
				{
					case ST_Igni:
						{
							thePlayer.SoundEvent("fx_rune_activate_igni");
							eff_name = 'igni';
							parent.trail_name = 'igni_trail';
						}
						break;
					case ST_Axii:
						{
							thePlayer.SoundEvent("fx_rune_activate_axii");
							eff_name = 'frozen';
							parent.trail_name = 'axii_trail';
						}
						break;
					case ST_Aard:
						{
							thePlayer.SoundEvent("fx_rune_activate_aard");
							eff_name = 'aard';
							parent.trail_name = 'aard_trail';
						}
						break;
					case ST_Quen:
						{
							thePlayer.SoundEvent("fx_rune_activate_quen");
							eff_name = 'quen';
							parent.trail_name = 'quen_trail';
						}
						break;
					case ST_Yrden:
						{
							thePlayer.SoundEvent("fx_rune_activate_yrden");
							eff_name = 'yrden';
							parent.trail_name = 'yrden_trail';
						}
						break;
					default:		
						break;
				}
				*/

				thePlayer.SoundEvent("fx_rune_activate_igni");
				eff_name = 'igni';
				parent.trail_name = 'igni_trail';

				effect_active = true;
			}
		
			step = 0.625;
			
			if (thePlayer.HasTag('ACS_Chain_Weapon_Expand')) 
			{
				if (
				thePlayer.IsUsingHorse() || thePlayer.IsUsingVehicle()
				)
				{
					if (parent.HasTag('ACS_Chain_Weapon_R')
					|| parent.HasTag('ACS_Chain_Weapon_R_Fist')
					)
					{
						increase = true;
					}
					else
					{
						increase = false;
						parent.attack_end = false;
						increase_start = false;
						parent.addrot = false;
					}
				}
				else
				{
					increase = true;
				}
			}
			else
			{
				increase = false;
				parent.attack_end = false;
				increase_start = false;
				parent.addrot = false;
			}
			
			
			if ( increase && !parent.attack_end )
			{
				if ( finalstep < step  )
				{
					finalstep += 0.1; 
					
					if ( finalstep >= step )
					{
						increase_start = true;
					}
				}
				
				if ( finalroll > -20 )
				{
					finalroll -= 2; 
				}

				finalroll = ClampF( finalroll, -20, 0 );

			}
			else if ( parent.attack_end || !increase  )
			{
				if ( finalroll < 15 && parent.addrot && increase )
				{
					finalroll += 5; 
					if ( finalroll >=15 )
					{
						parent.addrot = false;
						//parent.attack_end = false;
					}
				}
				
				if ( finalroll > 0 && !parent.addrot )
				{
					finalroll -= 4; 
				}
				
				if ( finalstep > 0 )
				{
					finalstep -= 0.01; 
				}
				
				if ( !increase )
				{
					if ( finalroll != 0 )
					{
						if ( finalroll < 0 )
						{
							finalroll += 1; 
						}
						else
						{
							finalroll -= 1; 
						}
					}
				}
			}
			
			if ( parent.force_decrease )
			{
				if ( finalstep > 0 )
				{
					finalstep -= 0.05; 
				}
				
				if ( finalroll != 0 )
				{
					if ( finalroll < 0 )
					{
						finalroll += 2; 
					}
					else
					{
						finalroll -= 2; 
					}
				}
				
			}
			
			finalstep = ClampF( finalstep, 0, step );
			
			if ( finalstep == 0 )
			{
				finalroll = 0;
			}
			
			pos.Z = finalstep;
			rot.Roll = finalroll;
			
			for ( i = 0; i < parent.links.Size(); i += 1 )
			{
				linkPos = (parent.links[i]).GetWorldPosition();

				groundLinkPos = ACSFixZAxis((parent.links[i]).GetWorldPosition());

				if ( i == 0 )
				{
					parent.links[i].BreakAttachment();
					parent.links[i].CreateAttachment( parent );
				}
				else
				{
					parent.links[i].BreakAttachment();

					if ( increase && !parent.attack_end )  
					{
						rot.Roll += i*0.5;
					}
					else if ( parent.addrot )
					{
						rot.Roll -= i*0.5;
					}
					
					parent.links[i].CreateAttachment( parent.links[i-1], , pos, rot );
				}
				
				if ( effect_active )
				{
					if ( finalstep > 0 )  
					{
						parent.links[i].PlayEffectSingle( eff_name );
					}
					else
					{
						if ( i!=6 )
						{
							parent.links[i].DestroyEffectIfActive( eff_name );
						}
						else
						{
							parent.links[i].PlayEffectSingle( eff_name );
						}
					}
				}
			}
		
			Sleep( 0.01 );
		}
	}
	
	event OnLeaveState( prevStateName : name )
	{
		for ( i = 0; i < parent.links.Size(); i += 1 )
		{
			parent.links[i].Destroy();
		}
		//theGame.GetGuiManager().ShowNotification( "OnLeaveState" );
	}
}

class W3ACSChainWeaponLink extends CGameplayEntity
{
	private var vfxEnt						: CEntity;

	event OnSpawned( spawnData : SEntitySpawnData )
	{
		AddTimer('check_ground_collision', 0.5, true );
	}

	timer function check_ground_collision( deltaTime : float, optional id : int )
	{
		var pos, groundPos : Vector;

		pos = this.GetWorldPosition();

		groundPos = ACSFixZAxis(this.GetWorldPosition());

		if (pos.Z <= groundPos.Z && !thePlayer.IsInInterior())
		{
			if (!vfxEnt)
			{
				vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResource( "dlc\dlc_acs\data\fx\acs_ice_breathe_old.w2ent", true ), this.GetWorldPosition() );
				vfxEnt.PlayEffectSingle('chain_weapon_fx_ground');
				vfxEnt.DestroyAfter(0.5);
			}
		}
	}

	event OnDestroyed()
	{
		RemoveTimers();

		super.OnDestroyed();
	}
}

function ACS_Create_Claw_Chains()
{
	var template 														: CEntityTemplate;
	var ent, ent_1, ent_2, ent_3, ent_4, ent_5, ent_6, ent_7            : CEntity;
	var rot, attach_rot                        						 	: EulerAngles;
    var pos, attach_vec													: Vector;
	var meshcomp														: CComponent;
	var animcomp 														: CAnimatedComponent;
	var h 																: float;

	ACS_Chain_Weapon_DestroyAll();

	template = (CEntityTemplate)LoadResource("dlc\dlc_acs\data\entities\chain_weapon\acs_chain_weapon.w2ent", true);

	rot = thePlayer.GetWorldRotation();

    pos = thePlayer.GetWorldPosition();

	ent_1 = theGame.CreateEntity( template, pos, rot );

	ent_1.AddTag('ACS_Chain_Weapon_R_Fist');

	ent_2 = theGame.CreateEntity( template, pos, rot );

	ent_2.AddTag('ACS_Chain_Weapon_L_Fist');
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class W3ACSSkyWhale extends CGameplayEntity
{
	private var pos 																	: Vector;
	private var stormCurrentRotationCircleAngle 										: float; 
    private var stormCurrentRotation 													: EulerAngles; 
    private var stormCurrentPosition 													: Vector;
    private var stormCurrentVelocity 													: Vector;
    private var stormCurrentAcceleration 												: Vector;
	private var stormGoalPosition 														: Vector;

	private var rotationCircleRadius 													: float;
	default rotationCircleRadius 														= 1000;

	var entWhale_1, entWhale_2, entWhale_3, entWhale_4, entWhale_5, ent_lure       		: CEntity;

	var whaleVisibility : bool;

	event OnSpawned( spawnData : SEntitySpawnData )
	{
		var whale_temp, temp, temp_lure												: CEntityTemplate;
		var ent																		: CEntity;
		var i																		: int;
		var fish_template_paths 													: array<String>;
		var animcomp 																: CComponent;
		var meshcomp 																: CComponent;
		var h 																		: float;

		super.OnSpawned(spawnData);

		pos = this.GetWorldPosition();


		whale_temp = (CEntityTemplate)LoadResource( 

		"dlc\dlc_acs\data\entities\other\flying_whale\acs_flying_whale_03.w2ent"

		, true );

		entWhale_1 = theGame.CreateEntity( whale_temp , GetWorldPosition() );

		animcomp = entWhale_1.GetComponentByClassName('CAnimatedComponent');
		meshcomp = entWhale_1.GetComponentByClassName('CMeshComponent');

		h = 15;

		if(animcomp)
			animcomp.SetScale(Vector(h,h,h,1));
			
		if(meshcomp)
			meshcomp.SetScale(Vector(h,h,h,1));

		entWhale_1.CreateAttachment(this, 'fx',Vector(0,0,0),EulerAngles(0,202.5,0));

		//////////////////////////////////////////////

		entWhale_2 = theGame.CreateEntity( whale_temp , GetWorldPosition() );

		animcomp = entWhale_2.GetComponentByClassName('CAnimatedComponent');
		meshcomp = entWhale_2.GetComponentByClassName('CMeshComponent');

		h = RandRange(10, 5);

		if(animcomp)
			animcomp.SetScale(Vector(h,h,h,1));
			
		if(meshcomp)
			meshcomp.SetScale(Vector(h,h,h,1));

		entWhale_2.CreateAttachment(this, 'fx',Vector(125,125,125),EulerAngles(0,202.5,0));

		//////////////////////////////////////////////

		entWhale_3 = theGame.CreateEntity( whale_temp , GetWorldPosition() );

		animcomp = entWhale_3.GetComponentByClassName('CAnimatedComponent');
		meshcomp = entWhale_3.GetComponentByClassName('CMeshComponent');

		h = RandRange(10, 5);

		if(animcomp)
			animcomp.SetScale(Vector(h,h,h,1));
			
		if(meshcomp)
			meshcomp.SetScale(Vector(h,h,h,1));

		entWhale_3.CreateAttachment(this, 'fx',Vector(-125,125,-125),EulerAngles(0,202.5,0));


		//////////////////////////////////////////////

		entWhale_4 = theGame.CreateEntity( whale_temp , GetWorldPosition() );

		animcomp = entWhale_4.GetComponentByClassName('CAnimatedComponent');
		meshcomp = entWhale_4.GetComponentByClassName('CMeshComponent');

		h = RandRange(10, 5);

		if(animcomp)
			animcomp.SetScale(Vector(h,h,h,1));
			
		if(meshcomp)
			meshcomp.SetScale(Vector(h,h,h,1));

		entWhale_4.CreateAttachment(this, 'fx',Vector(-125,-125,125),EulerAngles(0,202.5,0));


		//////////////////////////////////////////////

		entWhale_5 = theGame.CreateEntity( whale_temp , GetWorldPosition() );

		animcomp = entWhale_5.GetComponentByClassName('CAnimatedComponent');
		meshcomp = entWhale_5.GetComponentByClassName('CMeshComponent');

		h = RandRange(10, 5);

		if(animcomp)
			animcomp.SetScale(Vector(h,h,h,1));
			
		if(meshcomp)
			meshcomp.SetScale(Vector(h,h,h,1));

		entWhale_5.CreateAttachment(this, 'fx',Vector(125,-125,-125),EulerAngles(0,202.5,0));


		entWhale_1.DestroyEffect('outline');
		entWhale_2.DestroyEffect('outline');
		entWhale_3.DestroyEffect('outline');
		entWhale_4.DestroyEffect('outline');
		entWhale_5.DestroyEffect('outline');

		entWhale_1.PlayEffectSingle('glow');
		entWhale_2.PlayEffectSingle('glow');
		entWhale_3.PlayEffectSingle('glow');
		entWhale_4.PlayEffectSingle('glow');
		entWhale_5.PlayEffectSingle('glow');

		//entWhale_1.PlayEffectSingle('502_barrier_hold');
		//entWhale_2.PlayEffectSingle('502_barrier_hold');
		//entWhale_3.PlayEffectSingle('502_barrier_hold');
		//entWhale_4.PlayEffectSingle('502_barrier_hold');
		//entWhale_5.PlayEffectSingle('502_barrier_hold');

		//entWhale_1.PlayEffectSingle('403_cast');
		//entWhale_2.PlayEffectSingle('403_cast');
		//entWhale_3.PlayEffectSingle('403_cast');
		//entWhale_4.PlayEffectSingle('403_cast');
		//entWhale_5.PlayEffectSingle('403_cast');

		/*
		entWhale_1.PlayEffectSingle('glow_override');
		entWhale_2.PlayEffectSingle('glow_override');
		entWhale_3.PlayEffectSingle('glow_override');
		entWhale_4.PlayEffectSingle('glow_override');
		entWhale_5.PlayEffectSingle('glow_override');
		*/

		fish_template_paths.Clear();

		fish_template_paths.PushBack("dlc\dlc_acs\data\entities\other\flying_whale\acs_flying_fish_01.w2ent");
		fish_template_paths.PushBack("dlc\dlc_acs\data\entities\other\flying_whale\acs_flying_fish_02.w2ent");
		fish_template_paths.PushBack("dlc\dlc_acs\data\entities\other\flying_whale\acs_flying_fish_03.w2ent");
		fish_template_paths.PushBack("dlc\dlc_acs\data\entities\other\flying_whale\acs_flying_fish_04.w2ent");
		fish_template_paths.PushBack("dlc\dlc_acs\data\entities\other\flying_whale\acs_flying_fish_05.w2ent");
		fish_template_paths.PushBack("dlc\dlc_acs\data\entities\other\flying_whale\acs_flying_fish_06.w2ent");

		for( i = 0; i < 50; i += 1 )
		{
			temp = (CEntityTemplate)LoadResource( 

			fish_template_paths[RandRange(fish_template_paths.Size())]
				
			, true );

			ent = theGame.CreateEntity( temp, GetWorldPosition() );

			ent.AddTag('ACS_Sky_Fish_Ent');

			animcomp = ent.GetComponentByClassName('CAnimatedComponent');
			meshcomp = ent.GetComponentByClassName('CMeshComponent');

			h = RandRangeF(25,10);

			if(animcomp)
				animcomp.SetScale(Vector(h,h,h,1));
				
			if(meshcomp)
				meshcomp.SetScale(Vector(h,h,h,1));

			ent.CreateAttachment(this, 'fx', Vector(RandRangeF(250,-250), RandRangeF(100,-250), RandRangeF(100,-100)),EulerAngles(0,202.5,0));

			ent.DestroyEffect('outline');

			ent.PlayEffect('glow');

			//ent.PlayEffect('glow_override');
		}

		//PlayEffect('502_barrier_hold');

		//PlayEffect('403_cast');

		//PlayEffect('everstorm_normal_lightning');

		//PlayEffectSingle('cloudsTerrain');

		//PlayEffectSingle('cloudsUp');

		//PlayEffectSingle('cloudsHuge');

		//PlayEffectSingle('iceFog');

		temp_lure = (CEntityTemplate)LoadResource( 

		"dlc\dlc_acs\data\entities\other\acs_enemy_lure_entity.w2ent"
			
		, true );

		ent_lure = theGame.CreateEntity( temp_lure, GetWorldPosition() );

		AddTimer('sky_whale_effects', 10, true);

		AddTimer('move_sky_whale', 0.001, true);
	} 

	timer function sky_whale_effects(deltaTime : float, id : int) 
	{
		var actors										: array<CActor>;
		var i											: int;

		actors.Clear();
			
		actors = ((CNewNPC)ent_lure).GetNPCsAndPlayersInRange( 250, 1, 'ACS_Custom_Monster', FLAG_ExcludePlayer + FLAG_OnlyAliveActors);

		if( actors.Size() > 0 )
		{
			PlayEffectSingle('everstorm_lightning_only');

			for( i = 0; i < actors.Size(); i += 1 )
			{
				if ( actors[i] )
				{
					Lightning_Strike(actors[i]);
				}
			}
		}
		else
		{
			DestroyEffect('everstorm_lightning_only');
		}
	}

	function Lightning_Strike( npc : CActor )
	{
		var temp, temp_2, temp_3, temp_4, temp_5									: CEntityTemplate;
		var ent, ent_1, ent_2, ent_3, ent_4, ent_5									: CEntity;
		var i, count, count_2, j, k													: int;
		var playerPos, spawnPos, spawnPos2, posAdjusted, posAdjusted2, entPos		: Vector;
		var randAngle, randRange, randAngle_2, randRange_2, distance				: float;
		var adjustedRot, playerRot2													: EulerAngles;
		var dmg																		: W3DamageAction;

		npc.SoundEvent( "fx_amb_thunder_close" );

		npc.SoundEvent( "qu_nml_103_lightning" );
	
		temp = (CEntityTemplate)LoadResource( 

		"dlc\dlc_acs\data\fx\everstorm_lightning_strike.w2ent"
			
		, true );

		temp_2 = (CEntityTemplate)LoadResource( 

		"dlc\dlc_acs\data\fx\everstorm_lightning_strike_secondary.w2ent"
			
		, true );

		temp_4 = (CEntityTemplate)LoadResource( 

		"dlc\dlc_acs\data\fx\everstorm_ground_fire.w2ent"
			
		, true );

		playerPos = npc.GetWorldPosition();

		adjustedRot = EulerAngles(0,0,0);

		adjustedRot.Yaw = RandRangeF(360,1);
		adjustedRot.Pitch = RandRangeF(22.5,-22.5);

		playerRot2 = EulerAngles(0,0,0);
		playerRot2.Yaw = RandRangeF(360,1);

			
		posAdjusted = ACSFixZAxis(playerPos);

		ent_1 = theGame.CreateEntity( temp, posAdjusted, adjustedRot );

		ent_1.PlayEffectSingle('pre_lightning');
		ent_1.PlayEffectSingle('lightning');

		ent_1.DestroyAfter(10);


		ent_2 = theGame.CreateEntity( temp_2, posAdjusted, playerRot2 );

		ent_2.PlayEffectSingle('lighgtning');

		ent_2.DestroyAfter(10);

		theGame.GetSurfacePostFX().AddSurfacePostFXGroup( posAdjusted, 0.5f, 10.5f, 0.5f, 7.f, 1);

		dmg = new W3DamageAction in theGame.damageMgr;
		dmg.Initialize(this, npc, theGame, 'ACS_Whale_Swarm_Damage', EHRT_Heavy, CPS_Undefined, false, false, true, false);

		dmg.SetProcessBuffsIfNoDamage(true);
		dmg.SetCanPlayHitParticle(true);

		dmg.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, npc.GetMaxHealth() * 0.25 );
			
		theGame.damageMgr.ProcessAction( dmg );
								
		delete dmg;
	}

	private var stormContracting														: bool;
	default stormContracting 															= true;

	timer function move_sky_whale(deltaTime : float, id : int) 
	{
        var playerPosition 															: Vector;
        var playerRotation 															: EulerAngles;      
        var goalAcceleration 														: Vector;
        var navigationComputeZReturn 												: float;  
        var rotationCircleMovementSpeed 											: float;
        var maxAcceleration 														: float;      
        var accelerationMultiplier 													: float;
        var maxVelocity 															: float;
        var velocityDampeningFactor 												: float;
		var targetDistance															: float;

		rotationCircleMovementSpeed = 1.5;
		maxAcceleration = 1.5;
		accelerationMultiplier = 1.5;
		maxVelocity = 1.5;
		velocityDampeningFactor = 0.125;

		if (stormContracting)
		{
			rotationCircleRadius -= 0.025;
		}
		else
		{
			rotationCircleRadius += 0.025;
		}

		if (theGame.GetWorld().GetDepotPath() == "levels\skellige\skellige.w2w"
		|| theGame.GetWorld().GetDepotPath() == "levels\wmh_lv1\wmh_lv1.w2w"
		)
		{
			if (rotationCircleRadius <= 250)
			{
				stormContracting = false;
			}
			else if (rotationCircleRadius >= 1800)
			{
				stormContracting = true;
			}
		}
		else
		{
			if (rotationCircleRadius <= 250)
			{
				stormContracting = false;
			}
			else if (rotationCircleRadius >= 2250)
			{
				stormContracting = true;
			}
		}

        stormCurrentRotationCircleAngle += deltaTime * rotationCircleMovementSpeed;

        while(stormCurrentRotationCircleAngle > 360) 
		{          
            stormCurrentRotationCircleAngle -= 360;                        
        }

		pos = ACSPlayerFixZAxis(Vector(0,0,0,1));

		pos.Z += 100;

		playerPosition = ACSPlayerFixZAxis(Vector(0,0,0,1));

		playerPosition.Z += 100;

		playerRotation = EulerAngles(0,0,0);

       	stormGoalPosition = playerPosition;
		
        stormGoalPosition.X -= CosF(Deg2Rad(stormCurrentRotationCircleAngle)) * rotationCircleRadius;
        stormGoalPosition.Y -= SinF(Deg2Rad(stormCurrentRotationCircleAngle)) * rotationCircleRadius;

		stormGoalPosition.Z += 50;

        stormCurrentAcceleration = (stormGoalPosition - stormCurrentPosition) * accelerationMultiplier;
 
        if(VecLength(stormCurrentAcceleration) > maxAcceleration) 
		{
            stormCurrentAcceleration = VecNormalize(stormCurrentAcceleration) * maxAcceleration;
        }

        stormCurrentVelocity *= velocityDampeningFactor;
 
        if(VecLength(stormCurrentVelocity) > maxVelocity) 
		{
            stormCurrentVelocity = VecNormalize(stormCurrentVelocity) * maxVelocity;
        }
 
        if (
		theGame.GetWorld().NavigationComputeZ( stormCurrentPosition, stormCurrentPosition.Z - 2, stormCurrentPosition.Z + 2, navigationComputeZReturn ))
        {
            if(AbsF(stormCurrentPosition.Z - navigationComputeZReturn) < 0.1) 
			{
                stormCurrentVelocity.Z *= -0.9;
            }
        }
 
        stormCurrentPosition += stormCurrentVelocity * deltaTime;

		//stormCurrentRotation = EulerAngles(0,0,0);

		if ((theGame.GetWorld().GetDepotPath() == "levels\wmh_lv1\wmh_lv1.w2w"))
		{
			stormGoalPosition.Z += 550;
		}
		else
		{
			stormGoalPosition.Z += 150;
		}

		stormCurrentRotation.Roll = 22.5;
		stormCurrentRotation.Yaw += deltaTime * rotationCircleMovementSpeed;

		this.TeleportWithRotation(stormGoalPosition, stormCurrentRotation);

		ent_lure.TeleportWithRotation(ACSFixZAxis(stormGoalPosition),stormCurrentRotation );

		//this.TeleportWithRotation(LerpV(GetWorldPosition(), stormGoalPosition, 0.01f), stormCurrentRotation);
    } 

	function DestroySkyFishes()
	{	
		var ents 											: array<CEntity>;
		var i												: int;

		ents.Clear();

		theGame.GetEntitiesByTag( 'ACS_Sky_Fish_Ent', ents );	
		
		for( i = 0; i < ents.Size(); i += 1 )
		{
			ents[i].Destroy();

			ents[i].RemoveTag('ACS_Sky_Fish_Ent');
		}
	}

	event OnDestroyed()
	{
		entWhale_1.Destroy();
		entWhale_2.Destroy();
		entWhale_3.Destroy();
		entWhale_4.Destroy();
		entWhale_5.Destroy();

		DestroySkyFishes();

		super.OnDestroyed();
	}
}

function GetACSSkyWhale() : W3ACSSkyWhale
{
	var ent 				 : W3ACSSkyWhale;
	
	ent = (W3ACSSkyWhale)theGame.GetEntityByTag( 'ACS_Sky_Whale' );
	return ent;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function GetACSGrappleGun() : ACSGrappleGun 
{
    return (ACSGrappleGun)( theGame.GetEntityByTag('acs_grapple_gun') );
}

function ACS_Hook_SloMo(speed : float, optional affect_cam : bool) 
{
    ACS_Hook_RemoveSloMo();

    thePlayer.SoundEvent( "gui_slowmo_start" );

    theGame.SetTimeScale(speed, 'acs_grapple', 65, affect_cam);

   	FactsAdd( "acs_hook_speedMultCasuserId", thePlayer.SetAnimationSpeedMultiplier( 1/speed * 0.8 ) + 1 );
}

function ACS_Hook_RemoveSloMo() 
{
    var mult : int;
   	theGame.RemoveTimeScale( theGame.GetTimescaleSource(ETS_ThrowingAim) );
    theGame.RemoveTimeScale( 'acs_grapple' );

    mult = FactsQuerySum("acs_hook_speedMultCasuserId");

    if (mult) 
	{
        thePlayer.ResetAnimationSpeedMultiplier(mult - 1);
        FactsRemove("acs_hook_speedMultCasuserId");
    }
    
    thePlayer.SoundEvent( "gui_slowmo_end" );
}

function ACS_Hook_FindActive() : bool 
{
    var hooks : array<CEntity>;
    var i, size : int;

    theGame.GetEntitiesByTag('acs_grapple_bolt', hooks);

    size = hooks.Size();

    for (i=0; i<size; i+=1) 
	{
        if ( ( (W3ACSHookProjectile)(hooks[i]) ).grapplingManager.active )
            return true;
    }

    return false;
}

function ACS_Hook_FindFlying() : bool 
{
    var hooks : array<CEntity>;
    var i, size : int;

    theGame.GetEntitiesByTag('acs_grapple_bolt', hooks);

    size = hooks.Size();

    for (i=0; i<size; i+=1) 
	{
        if ( ( (W3ACSHookProjectile)(hooks[i]) ).grapplingManager.IsInState('ACS_GrapplingGunManager_State_Flying') )
            return true;
    }

    return false;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class ACSGrappleGun extends Crossbow 
{	
    var normal_bolt : SItemUniqueId;
	var crosshair_manager : CACSGrapplingCrosshairManager;

    timer function EquipNormalBolt(dt : float, id : int) 
	{
        var item_id : SItemUniqueId;
	
		item_id = inv.GetItemFromSlot('l_weapon');

		if ( inv.ItemHasTag(item_id, 'acs_grapple') || theInput.IsActionPressed('ThrowItem') || theInput.IsActionPressed('ThrowItemHold') ) 
		{
			return;
		}
		
        inv.RemoveItemByName('acs_grapple_bolt', -1);

        if ( inv.GetItemEquippedOnSlot(EES_RangedWeapon, item_id) ) 
		{
            ownerPlayer.rangedWeapon = (Crossbow)( inv.GetItemEntityUnsafe(item_id) );
            
            if (inv.GetItemQuantity(normal_bolt) > 0) 
			{
                ownerPlayerWitcher.EquipItem(normal_bolt, EES_Bolt);
            }
        }
    }

	event OnGrappleToggle(action : SInputAction) 
	{
		if( IsReleased(action) ) 
		{
			if (FactsDoesExist("acs_grapple_mode_toggle")) 
			{
				FactsRemove("acs_grapple_mode_toggle");
				//theGame.GetGuiManager().ShowNotification("Grappling Mode: Pull User");
			}
			else 
			{
				FactsAdd("acs_grapple_mode_toggle");
				//theGame.GetGuiManager().ShowNotification("Grappling Mode: Pull Target");
			}
		}
	}
    //--GrappleGun

	event OnSpawned( spawnData : SEntitySpawnData )
	{ 
		Initialize( (CActor)GetParentEntity() );
		theInput.RegisterListener( this, 'OnGrappleToggle', 'GrappleToggle' );
		crosshair_manager = new CACSGrapplingCrosshairManager in this;
		crosshair_manager.GotoState('ACSGrapplingCrosshair_State_Loading');
	}
	
	
	event OnChangeTo( newState : name )
	{
		if ( GetCurrentStateName() != newState )
		{
			GotoState( newState );
		}
	}
			
	event OnRangedWeaponPress()
	{	
		ACS_Tutorial_Display_Check('ACS_Grappling_Hook_Launcher_Tutorial_Shown');

		if ( ACS_Hook_FindActive() ) 
		{
			return false;
		}

		if (thePlayer.IsSwimming() || thePlayer.IsUsingVehicle()) 
		{
			thePlayer.DisplayActionDisallowedHudMessage( EIAB_Undefined,,, true );	
			return false;
		}

		SetBehaviorGraphVariables( 'isAimingWeapon', true );
		SetBehaviorGraphVariables( 'isShootingWeapon', false );
	}
	
	event OnRangedWeaponRelease()
	{
		var hook : W3ACSHookProjectile;

		if ( ACS_Hook_FindActive() ) return false;

		if (thePlayer.IsSwimming() || thePlayer.IsUsingVehicle()) 
		{
			thePlayer.DisplayActionDisallowedHudMessage( EIAB_Undefined,,, true );	
			return false;
		}

		if ( thePlayer.rangedWeapon != this && !IsInState('State_WeaponShoot') && !IsInState('State_WeaponAim') )
		{
			thePlayer.SetSlideTarget( thePlayer.GetCombatActionTarget( EBAT_ItemUse ) );
		}

		hook = (W3ACSHookProjectile)deployedEnt;

		if (hook) 
		{
			if (ownerPlayer.playerAiming.GetCurrentStateName() == 'Aiming' )
			{
				if ( theInput.IsActionPressed('Sprint') )
					hook.SetModifiedShot(true);
				else
					hook.SetModifiedShot(false);
			}
			else
			{
				if ( theInput.IsActionPressed('Sprint') )
				{
					hook.SetModifiedShot(false);
				}
				else
				{
					if (thePlayer.GetTarget())
					{
						hook.SetModifiedShot(true);
					}
					else
					{
						hook.SetModifiedShot(false);
					}
				}	
			}
			
		}

		SetBehaviorGraphVariables( 'isAimingWeapon', false );
		SetBehaviorGraphVariables( 'isShootingWeapon', true );
	}
	
	event OnWeaponWait()
	{
		thePlayer.UnblockAction( EIAB_DismountVehicle, 'ShootingCrossbow' );	
		thePlayer.UnblockAction( EIAB_MountVehicle, 'ShootingCrossbow' );
	}
	
	event OnWeaponDrawStart()
	{
		if (thePlayer.IsSwimming() || thePlayer.IsUsingVehicle()) 
		{
			thePlayer.DisplayActionDisallowedHudMessage( EIAB_Undefined,,, true );	

			OnChangeTo('State_WeaponWait');

			return false;
		}

		RemoveTimer('EquipNormalBolt');

        ownerPlayer.rangedWeapon = (Crossbow)this;

		ReloadHook();

		ownerPlayer.SetBehaviorVariable( 'failSafeDraw', 0.0 );
		if ( !isSettingOwnerOrientation )
		{
			isSettingOwnerOrientation = true;
			SetOwnerOrientation();
		}
		
		OnChangeTo( 'State_WeaponDraw' );
	}
	
	event OnWeaponReloadStart() 
	{
		RaiseForceEvent( 'WeaponCrossbow_Reload' );
		OnChangeTo( 'State_WeaponReload' );
	}
	
	event OnWeaponReload()
	{
		var id : SItemUniqueId;

		if (GetCurrentStateName() == 'State_WeaponWait') return false;

		ReloadHook();
	}
	
	event OnWeaponReloadEnd()
	{
		if ( deployedEnt )
		{
			ResetShotCount();
		}
	}

	event OnWeaponAimStart()
	{
		ProcessFullBodyAnimWeight();
		
		OnChangeTo( 'State_WeaponAim' );
	}
	
	event OnWeaponShootStart()
	{
		FactsAdd( "ranged_weapon_shoot_start", 1, 3 );
		
		SetBehaviorGraphVariables( 'isAimingWeapon', false );
		SetBehaviorGraphVariables( 'isShootingWeapon', false );
		SetBehaviorGraphVariables( 'recoilLevel', false, (int)RL_1 );
		
		OnChangeTo( 'State_WeaponShoot' );
	}
	
	event OnWeaponAimEnd() {}	
	
	event OnProcessThrowEvent( animEventName : name )
	{
        if ( animEventName == 'ProjectileThrow' )
		{
			shotCount += 1;
		}
			
		if ( deployedEnt )
		{
			deployedEnt.OnProcessThrowEvent( animEventName );
			
			if ( animEventName == 'ProjectileThrow' )
			{
				SetDeployedEntVisibility( true );
				RaiseForceEvent( 'WeaponCrossbow_Shoot' );
				ClearDeployedEntity(false);

				isSettingOwnerOrientation = false;
			}
		}

		if( animEventName == 'OnWeaponReload' )
		{
			OnWeaponReload();
			
			if ( !ownerPlayer.IsUsingVehicle()
				&& ownerPlayer.GetBehaviorVariable( 'isShootingWeapon' ) == 0.f 
				&& ownerPlayer.GetBehaviorVariable( 'isAimingWeapon' ) == 0.f )
			{
				if ( ownerPlayer.GetPlayerCombatStance() == PCS_AlertNear || ownerPlayer.IsSwimming() ) 
					AddTimer( 'ACSGrappleGun_HolsterAfterDelay', 0.f );
			}			
		}
	}
	
	event OnWeaponShootEnd()
	{
		if ( !ownerPlayer.bLAxisReleased )
		{
			ExitCombatAction();
		}
	}
	
	event OnWeaponHolsterStart()
	{
		ExitCombatAction();
		ownerPlayer.SetBehaviorVariable( 'forceHolsterForOverlay', 0.f );
		
		if ( ownerPlayer.PerformingCombatAction() == EBAT_EMPTY )
		{
			ownerPlayer.RemoveCustomOrientationTarget( 'RangedWeapon' );
		}
	
		OnChangeTo( 'State_WeaponHolster' );	
	}
	
	event OnWeaponHolsterEnd()
	{
		ExitCombatAction();
	}
	
	event OnWeaponToNormalTransStart()
	{
		AddTimer( 'ACSGrappleGun_ProcessFullBodyAnimWeightTimer', 0.f, true );
	}
	
	event OnWeaponToNormalTransEnd()
	{
		RemoveTimer( 'ACSGrappleGun_ProcessFullBodyAnimWeightTimer' );
	}
	
	event OnReplaceAmmo()
	{
		ClearDeployedEntity(true);
		SetBehaviorGraphVariables( 'isWeaponLoaded', false );
		previousAmmoItemName = '';
		ResetShotCount();
		
		if ( GetCurrentStateName() != 'State_WeaponWait' && GetCurrentStateName() != 'State_WeaponHolster' )
			OnForceHolster();
		else
			ResetOwnerAndWeapon();
	}

    event OnCrossbowLoadedAnim()
	{
		SetDeployedEntVisibility( true );
	}

    protected function ResetOwnerAndWeapon()
	{
		SetBehaviorGraphVariables( 'isAimingWeapon' , false );
		SetBehaviorGraphVariables( 'isShootingWeapon' , false );	
		if ( isWeaponLoaded )
			RaiseForceEvent( 'WeaponCrossbow_Loaded' );
		else
			RaiseForceEvent( 'WeaponCrossbow_Unloaded' );	
	}

	event OnForceHolster( optional forceUpperBodyAnim, instant, dropItem : bool ) 
	{
		var itemId	: SItemUniqueId;

		if ( ACS_Hook_FindFlying() ) return false;

        if ( GetCurrentStateName() != 'State_WeaponWait' && ( instant || GetCurrentStateName() != 'State_WeaponHolster' ) )
		{
			ProcessFullBodyAnimWeight( forceUpperBodyAnim );
			ResetOwnerAndWeapon();
			
			if ( instant )
				RaiseOwnerGraphEvents( 'Crossbow_ForceBlendOut', true );				
			else
				RaiseOwnerGraphEvents( 'Crossbow_Holster', true );
		}

		theInput.ForceDeactivateAction('ThrowItem');
		theInput.ForceDeactivateAction('ThrowItemHold');
		
		if ( instant )
		{
			itemId = ownerPlayer.inv.GetItemFromSlot( 'l_weapon' );
			
			
			if( ownerPlayer.inv.IsIdValid( itemId ) && ( ownerPlayer.inv.IsItemCrossbow( itemId ) || ownerPlayer.inv.IsItemBomb( itemId ) ) )
			{
				ownerPlayer.HolsterItems( true, itemId );
			}
			
			thePlayer.BlockAllActions( 'RangedWeapon', false);
			thePlayer.BlockAllActions( 'RangedWeaponReload', false);
			thePlayer.BlockAllActions( 'RangedWeaponAiming', false);
			thePlayer.UnblockAction( EIAB_DismountVehicle, 'ShootingCrossbow' );
			thePlayer.UnblockAction( EIAB_MountVehicle, 'ShootingCrossbow' );	
			thePlayer.UnblockAction( EIAB_ThrowBomb, 'ShootingCrossbow' );
			thePlayer.UnblockAction( EIAB_DrawWeapon, 'RangedWeaponAiming' );
			thePlayer.UnblockAction( EIAB_DrawWeapon, 'RangedWeaponReload' );			
			
			ResetAllSettings();
			
			Unlock();
			OnChangeTo( 'State_WeaponWait' );
			thePlayer.playerAiming.StopAiming();
		}
	}
	
	public function Initialize( newOwner : CActor )
	{			
        inv = (CInventoryComponent)( thePlayer.GetComponentByClassName( 'CInventoryComponent' ) );

		owner = newOwner;
		ownerPlayer = (CR4Player)owner;
		ownerPlayerWitcher = (W3PlayerWitcher)owner;
		
		if ( ownerPlayer )
		{
			isPlayer = true;
		}
		
		if ( this.GetCurrentStateName() != 'State_WeaponWait' )
			OnChangeTo( 'State_WeaponWait' );
	}

	public function IsWeaponBeingUsed() : bool
	{
		if ( GetCurrentStateName() == 'State_WeaponShoot' && !IsShootingComplete() )
			return true;
		else if ( GetCurrentStateName() == 'State_WeaponReload' )
			return true;
		else if ( isShootingWeapon || isAimingWeapon )
			return true;
		else
			return false;
	}

	protected function	ReloadWeaponWithOrWithoutAnimIfNeeded() : bool
	{
		var t : float;
		if ( !deployedEnt )
		{
			if ( !PlayOwnerReloadAnim() )
			{
				OnWeaponReload();
				SetDeployedEntVisibility( true );
				return false;
			}
			t = ownerPlayer.GetBehaviorVariable( 'animSpeedMultForOverlay' );
			SetBehaviorVariable( 'animSpeedMult', ownerPlayer.GetBehaviorVariable( 'animSpeedMultForOverlay' ) );		
			return true;				
		}
		else
		{
			SetBehaviorGraphVariables( 'isWeaponLoaded', true );
			return false;
		}
	}
	
	protected function SetBehaviorGraphVariables( varName : name, flag : bool, optional num : int )
	{
		if ( varName == 'isWeaponLoaded' )
		{
			ownerPlayer.SetBehaviorVariable( 'isWeaponLoaded', (float)flag );
			ownerPlayer.SetBehaviorVariable( 'isWeaponLoadedRider', (float)flag );
			this.SetBehaviorVariable( 'isWeaponLoaded', (float)flag );
			isWeaponLoaded = flag;
		}
		else if ( varName == 'isShootingWeapon' )
		{
			ownerPlayer.SetBehaviorVariable( 'isShootingWeapon', (float)flag );
			ownerPlayer.SetBehaviorVariable( 'isShootingWeaponRider', (float)flag );
			isShootingWeapon = flag;
		}
		else if ( varName == 'isAimingWeapon' )
		{
			ownerPlayer.SetBehaviorVariable( 'isAimingWeapon', (float)flag );
			ownerPlayer.SetBehaviorVariable( 'isAimingWeaponRider', (float)flag );
			isAimingWeapon = flag;
		}
		else if ( varName == 'recoilLevel' )
		{
			ownerPlayer.SetBehaviorVariable( 'recoilLevel', (float)num );
			this.SetBehaviorVariable( 'recoilLevel', (float)num );
			recoilLevel = num;
		}				
	}
	
	protected function RaiseOwnerGraphEvents( eventName : name, force : bool ) : bool
	{
        var tempEventName : name;

		if( eventName == 'Crossbow_Draw' )
		{
			if( ownerPlayerWitcher.IsInCombat() && ownerPlayerWitcher.GetIsSprinting() )
			{
				return false;
			}
		}
		
		if ( ownerPlayer.IsUsingVehicle() )
		{
			if ( eventName == 'Crossbow_Draw' )
				tempEventName = 'VehicleCrossbow_Draw';
			else if ( eventName == 'Crossbow_Reload' )
				tempEventName = 'VehicleCrossbow_Reload';
			else if ( eventName == 'Crossbow_AimShoot' )
				tempEventName = 'VehicleCrossbow_AimShoot';	
			else if ( eventName == 'Crossbow_Holster' )
				tempEventName = 'VehicleCrossbow_Holster';
			else if ( eventName == 'Crossbow_ForceBlendOut' )
			{
				tempEventName = 'VehicleCrossbow_ForceBlendOut';
				force = false; 
			}
		}
		else
			tempEventName = eventName;

		if ( force )
			return ownerPlayer.RaiseForceEvent( eventName );
		else
			return ownerPlayer.RaiseEvent( eventName );
	}	
	
    protected function PlayOwnerReloadAnim() : bool
	{
		var shouldPlayAnim : bool;

        return false;

		if(ownerPlayerWitcher.CanUseSkill(S_Perk_17) && shotCount >= (1 + shotCountLimit) )
			shouldPlayAnim = true;
		else if (!ownerPlayerWitcher.CanUseSkill(S_Perk_17) && shotCount >= shotCountLimit )
			shouldPlayAnim = true;
		else if ( previousAmmoItemName != 'Bodkin Bolt' && previousAmmoItemName != 'Harpoon Bolt' && GetSpecialAmmoCount() <= 0 )
			shouldPlayAnim = true;
		else if ( previousAmmoItemName == '' )
			shouldPlayAnim = true;
		else
			shouldPlayAnim = false;
		
		if ( shouldPlayAnim )
		{
			SetBehaviorGraphVariables( 'isWeaponLoaded', false );
			return true;	
		}
		else
			return false;
	}

    protected function GetSpecialAmmoCount() : int
	{
		var count 			: int;
		var id 				: SItemUniqueId;
	
		if ( ownerPlayerWitcher )
		{
			if ( ownerPlayerWitcher.GetItemEquippedOnSlot( EES_Bolt, id ) )
			{
				if (inv.IsItemBolt(id) && !inv.ItemHasTag(id, theGame.params.TAG_INFINITE_AMMO))
					count = ownerPlayerWitcher.inv.GetItemQuantity(id);
			}
			else
				count = 0;
		}
			
		return count;
	}

    protected function ResetShotCount()
	{
		shotCount = 0;
	}

	function ReloadHook() : bool 
	{
		var id : SItemUniqueId;
		var hook : array<SItemUniqueId>;

		id = inv.GetItemId('acs_grapple_bolt');

		if ( !inv.IsIdValid(id) ) 
		{
			hook = inv.AddAnItem('acs_grapple_bolt', 1, true, true);
			id = hook[0];
		}

		return ReloadWeapon(id);
	}

	protected function ReloadWeapon( id : SItemUniqueId ) : bool
	{	
		var crossbowId 	: SItemUniqueId;
		var mat 		: Matrix;
		
		if ( !deployedEnt )
		{
			this.CalcEntitySlotMatrix( 'bolt', mat );
			MatrixGetTranslation( mat );
			
			deployedEnt = (W3BoltProjectile)( inv.GetDeploymentItemEntity( id, MatrixGetTranslation( mat ), MatrixGetRotation( mat ) ) );

            crossbowId = inv.GetItemByItemEntity(this);
			deployedEnt.InitializeCrossbow( ownerPlayer, id, crossbowId );

			if ( !deployedEnt.CreateAttachment( this, 'bolt', Vector(-0.013,0.24,0.005), EulerAngles(0,4,8) ) )
			{
				LogThrowable("Cannot attach thrown item to weapon!" );
				LogAssert(false, "CActor.OnAnimEvent(ProjectileAttach): Cannot attach thrown item to actor!");
				return false;
			}
			
			SetBehaviorGraphVariables( 'isWeaponLoaded', true );
			
			previousAmmoItemName = inv.GetItemName( id ); 
			
			return true;
		}
		
		LogThrowable("Error : Ranged weapon already has a deployed entity attached!" );
		return false;
	}
	
	protected function Lock()
	{
		var actionBlockingExceptions : array<EInputActionBlock>;

		if ( ownerPlayer.IsUsingVehicle() && (W3Boat)( ownerPlayer.GetUsedVehicle() ) )
		{
			actionBlockingExceptions.PushBack(EIAB_OpenInventory);
			actionBlockingExceptions.PushBack(EIAB_OpenFastMenu);
		}
			
		actionBlockingExceptions.PushBack(EIAB_Jump);
		actionBlockingExceptions.PushBack(EIAB_RadialMenu);
		actionBlockingExceptions.PushBack(EIAB_Movement);
		actionBlockingExceptions.PushBack(EIAB_OpenPreparation);
		actionBlockingExceptions.PushBack(EIAB_Roll);
		actionBlockingExceptions.PushBack(EIAB_Climb);
		actionBlockingExceptions.PushBack(EIAB_Slide);
		//actionBlockingExceptions.PushBack(EIAB_RunAndSprint);
		actionBlockingExceptions.PushBack(EIAB_OpenMap);
		actionBlockingExceptions.PushBack(EIAB_OpenCharacterPanel);
		actionBlockingExceptions.PushBack(EIAB_OpenJournal);
		actionBlockingExceptions.PushBack(EIAB_OpenAlchemy);
		actionBlockingExceptions.PushBack(EIAB_ExplorationFocus);
		actionBlockingExceptions.PushBack(EIAB_Dodge);
		actionBlockingExceptions.PushBack(EIAB_SwordAttack);
		//actionBlockingExceptions.PushBack(EIAB_Sprint);
		actionBlockingExceptions.PushBack(EIAB_LightAttacks);
		actionBlockingExceptions.PushBack(EIAB_HeavyAttacks);
		actionBlockingExceptions.PushBack(EIAB_Fists);
		actionBlockingExceptions.PushBack(EIAB_QuickSlots);
		actionBlockingExceptions.PushBack(EIAB_Crossbow);
		actionBlockingExceptions.PushBack(EIAB_OpenGlossary);
		actionBlockingExceptions.PushBack(EIAB_MeditationWaiting);
		actionBlockingExceptions.PushBack(EIAB_Signs);
		actionBlockingExceptions.PushBack(EIAB_Interactions);
		actionBlockingExceptions.PushBack(EIAB_InteractionAction);
		actionBlockingExceptions.PushBack(EIAB_InteractionContainers);
		actionBlockingExceptions.PushBack(EIAB_Dive);
		actionBlockingExceptions.PushBack(EIAB_Parry);

		theGame.CreateNoSaveLock( 'RangedWeapon', noSaveLockCombatAction );
		thePlayer.BlockAllActions( 'RangedWeapon', true, actionBlockingExceptions, false);
	}
	
	protected function Unlock()
	{
		thePlayer.BlockAllActions( 'RangedWeapon', false);
		theGame.ReleaseNoSaveLock( noSaveLockCombatAction );
	}

    protected function SetOwnerOrientation()
	{
		var newCustomOrientationTarget : EOrientationTarget;

		newCustomOrientationTarget = ownerPlayer.GetCombatActionOrientationTarget( CAT_Crossbow );

		if ( ownerPlayer.GetOrientationTarget() != newCustomOrientationTarget )
		{
			ownerPlayer.AddCustomOrientationTarget( newCustomOrientationTarget, 'RangedWeapon' );
		}
		
		if ( newCustomOrientationTarget == OT_CustomHeading )
			ownerPlayer.SetOrientationTargetCustomHeading( ownerPlayer.GetCombatActionHeading(), 'RangedWeapon' );		
	}

	timer function ACSGrappleGun_ProcessFullBodyAnimWeightTimer( time : float , id : int)
	{	
		ProcessFullBodyAnimWeight();
	}

	timer function ACSGrappleGun_InputLockFailsafe( time : float , id : int)
	{	
		var item : SItemUniqueId;

		if ( !ownerPlayer.IsUsingVehicle() )
		{
			if ( this.GetCurrentStateName() == 'State_WeaponAim' 
				|| this.GetCurrentStateName() == 'State_WeaponShoot'
				|| this.GetCurrentStateName() == 'State_WeaponReload' )
			{
				item = this.ownerPlayer.inv.GetItemFromSlot( 'l_weapon' );
				
				if ( !( this.ownerPlayer.inv.IsIdValid( item ) && this.ownerPlayer.inv.IsItemCrossbow( item ) ) )  
					this.OnForceHolster( false, true );
			}
			
			if ( this.GetCurrentStateName() != 'State_WeaponWait' )
			{
				if ( !ownerPlayer.GetBIsCombatActionAllowed() 
					&& ownerPlayer.GetBehaviorVariable( 'combatActionType' ) == (int)CAT_Attack
					&& ownerPlayer.GetBehaviorVariable( 'fullBodyAnimWeight' ) == 1.f )
					OnForceHolster( true, true );
				
				if ( ownerPlayer.IsInShallowWater() && !ownerPlayer.IsSwimming() )
					OnForceHolster( true, false );
					
				if ( ownerPlayer.GetPlayerCombatStance() == PCS_Normal || ownerPlayer.GetPlayerCombatStance() == PCS_AlertFar )
				{
					if ( ( this.IsShootingComplete() /* || ownerPlayer.GetIsShootingFriendly() */ ) //GrappleGun
						&& wasBLAxisReleased 
						&& !ownerPlayer.bLAxisReleased )
						OnForceHolster( true, false );
				}
			}
			
			if ( !isAimingWeapon && !isShootingWeapon && !this.ownerPlayer.lastAxisInputIsMovement )
			{
				if ( ( IsShootingComplete() && this.GetCurrentStateName() == 'State_WeaponShoot' )
					|| this.GetCurrentStateName() == 'State_WeaponAim' )
					SetOwnerOrientation();
			}		
		}
		
		wasBLAxisReleased = ownerPlayer.bLAxisReleased;
	}	

	public function OnSprintHolster()
	{		
		if ( ownerPlayer.GetCurrentStateName() == 'Exploration' || ownerPlayer.GetCurrentStateName() == 'Swimming' )
		{
			if ( ownerPlayer.GetBehaviorVariable( 'isShootingWeapon' ) == 0.f 
				&& ownerPlayer.GetBehaviorVariable( 'isAimingWeapon' ) == 0.f )
			{
				if ( this.GetCurrentStateName() == 'State_WeaponShoot' )
				{
					if ( shootingIsComplete )
						OnForceHolster( true, false );
				}	
				else if ( this.GetCurrentStateName() == 'State_WeaponAim' )
					OnForceHolster( true, false );
			}
		}
	}

    protected function ProcessFullBodyAnimWeight( optional forceUpperBodyAnim : bool ) : bool
	{	
		var isAxisReleased : bool;
		
		if ( this.wasBLAxisReleased )
		{
			isAxisReleased = true;
			if ( !ownerPlayer.bLAxisReleased && ownerPlayer.IsInputHeadingReady() )
				isAxisReleased = false;
		}
		else
			isAxisReleased = ownerPlayer.bLAxisReleased;
	
		if ( ownerPlayer.GetPlayerCombatStance() == PCS_AlertNear )
			setFullWeight = true;
		
		if ( ( isAxisReleased || ownerPlayer.GetPlayerCombatStance() == PCS_AlertNear || ownerPlayer.GetPlayerCombatStance() == PCS_Guarded  )  && ( this.GetCurrentStateName() == 'State_WeaponAim' || this.GetCurrentStateName() == 'State_WeaponShoot' ) )
			setFullWeight = true;
			
		if ( isAxisReleased && ( ownerPlayer.IsInCombatAction() || ownerPlayer.GetPlayerCombatStance() == PCS_Guarded ) )
			setFullWeight = true;
			
		if ( isAxisReleased && ( GetCurrentStateName() == 'State_WeaponDraw' || GetCurrentStateName() == 'State_WeaponReload' )  )
			setFullWeight = true;

		if ( ownerPlayer.IsSwimming() )
		{
			if ( ( !isAxisReleased || theInput.IsActionPressed( 'DiveUp' ) || theInput.IsActionPressed( 'DiveDown' ) ) 
				&& ( GetCurrentStateName() == 'State_WeaponDraw' || GetCurrentStateName() == 'State_WeaponHolster' ) )
				setFullWeight = false;
			else	
				setFullWeight = true;
		}
			
		if ( !isAxisReleased && ownerPlayer.GetPlayerCombatStance() == PCS_Normal && !isDeployedEntAiming && !ownerPlayer.IsSwimming()  )
		{
			setFullWeight = false;
		}
		else if ( ownerPlayer.GetIsSprinting() && !isDeployedEntAiming )
			setFullWeight = false;
		else if ( !isAxisReleased && !ownerPlayer.IsSwimming() && this.GetCurrentStateName() == 'State_WeaponHolster' && ( ownerPlayer.GetPlayerCombatStance() == PCS_Normal || ownerPlayer.GetPlayerCombatStance() == PCS_AlertFar ) ) 
			setFullWeight = false;
		else if ( ownerPlayer.IsInAir() || ownerPlayer.GetCriticalBuffsCount() > 0 )
			setFullWeight = false;
		else if ( ownerPlayer.IsThrowingItem())
			setFullWeight = false;
		else if ( ownerPlayer.IsInCombatAction() && ( this.GetCurrentStateName() == 'State_WeaponHolster' ) ) 
			setFullWeight = false;
		
		
		else if ( ownerPlayer.playerMoveType == PMT_Run || ownerPlayer.playerMoveType == PMT_Sprint )
			setFullWeight = false;
			
		if ( ownerPlayer.playerMoveType == PMT_Sprint )
			setFullWeight = false;
		
		if ( ownerPlayer.GetCurrentStateName() == 'AimThrow' && !ownerPlayer.IsInAir() )
			setFullWeight = true;				
		
		if ( forceUpperBodyAnim )
			setFullWeight = false;
			
		if ( setFullWeight )
			LogChannel( 'RangedWeapon', "setFullWeight : TRUE" );
		else
		{
			LogChannel( 'RangedWeapon', "setFullWeight : FALSE" );
			if ( this.GetCurrentStateName() == 'State_WeaponReload' )
				LogChannel( 'RangedWeapon', "setFullWeight : FALSE" );
		}
		
		ownerPlayer.SetBehaviorVariable( 'fullBodyAnimWeight', (float)setFullWeight );
			
		return setFullWeight;
	}
	
	protected function ExitCombatAction() : bool
	{
		if (ownerPlayer && !ownerPlayer.IsInCombatAction() )
		{
			if ( !ownerPlayer.IsInCombat() && ownerPlayer.bLAxisReleased )
				ownerPlayer.RaiseEvent( 'ForceAlertToNormalTransition' );
			else
				ownerPlayer.RaiseEvent( 'ForceBlendOut' );
				
			return true;	
		}

        if ( ownerPlayer.GetBehaviorVariable( 'combatActionType' ) == (int)CAT_Crossbow )
        {
            if ( !ownerPlayer.IsInCombat() && ownerPlayer.bLAxisReleased )
                ownerPlayer.RaiseEvent( 'ForceAlertToNormalTransition' );
            else
                ownerPlayer.RaiseEvent( 'ForceBlendOut' );
                
            return true;	
        }
		
		return false;
	}
	
    protected function ProcessCharacterRotationInCombat()
	{
		var targetToPlayerHeading	: float;
		var angleDiff				: float;
		var angleOffset				: float;
	}

	public function IsDeployedEntAiming() : bool
	{
		return isDeployedEntAiming;
	}
	
	public function GetDeployedEntity() : W3AdvancedProjectile
	{
		return deployedEnt;
	}
	
	protected function SetDeployedEntVisibility( flag : bool )
	{
		

		if ( deployedEnt )
			deployedEnt.SetVisibility( flag );
	}
	
	public function ProcessCanAttackWhenNotInCombat()
	{
		if ( ( !ownerPlayer.IsCombatMusicEnabled() || ownerPlayer.playerAiming.GetCurrentStateName() == 'Aiming' ) && !CanAttackWhenNotInCombat() )
		{
			ownerPlayer.SetIsShootingFriendly( true );
			ownerPlayer.SetBehaviorVariable( 'isShootingFriendly', 1.f );
			ownerPlayer.SetBehaviorVariable( 'isShootingFriendlyForOverlay', 1.f );
		}
		else
		{
			ownerPlayer.SetIsShootingFriendly( false );
			ownerPlayer.SetBehaviorVariable( 'isShootingFriendly', 0.f );
			ownerPlayer.SetBehaviorVariable( 'isShootingFriendlyForOverlay', 0.f );
		}				
	}
	
	public function CanAttackWhenNotInCombat() : bool
	{
		var shootTarget : CActor;
		var weaponToThrowPosDist	: float;

        return true;
		
		weaponToThrowPosDist = VecDistance( ownerPlayer.playerAiming.GetThrowPosition(), ownerPlayer.playerAiming.GetThrowStartPosition() );
		
		if ( ownerPlayer.GetDisplayTarget() && ownerPlayer.IsDisplayTargetTargetable() )
			shootTarget = (CActor)( ownerPlayer.GetDisplayTarget() );
		else
			shootTarget = (CActor)( ownerPlayer.slideTarget );
			
		if ( this.isDeployedEntAiming ) 
		{
			if ( ownerPlayer.playerAiming.GetSweptFriendly() || weaponToThrowPosDist < 1.f )	
				return false;
			else	
				return true;
		}
		else if ( shootTarget && shootTarget.IsHuman() && !ownerPlayer.IsThreat( shootTarget ) ) 
			return false;
		else
			return true;
	}
	
	public function PerformedDraw() : bool
	{
		return performedDraw;
	}
	
	protected function ResetAllSettings()
	{
		ownerPlayer.SetBehaviorVariable( 'inAimThrow', 0.f );
		ownerPlayer.SetBehaviorVariable( 'inAimThrowForOverlay', 0.f );
		ownerPlayer.SetBehaviorVariable( 'dodgeBoost',0.0);
		isSettingOwnerOrientation = false;
		ExitCombatAction();
		
		ownerPlayer.RemoveCustomOrientationTarget( 'RangedWeapon' );
		ownerPlayer.SetBehaviorVariable( 'hasCrossbowHeld', 0.f );

		ownerPlayer.GetMovingAgentComponent().EnableVirtualController( 'Crossbow', false );
		
		if ( isDeployedEntAiming )
		{
			isDeployedEntAiming = false;
			deployedEnt.StopAiming( true );
		}
		
		if ( !ownerPlayer.IsUsingVehicle() )
			ownerPlayer.OnEnableAimingMode( false );
	}
	
	protected timer function ACSGrappleGun_HolsterAfterDelay( timeDelta : float , id : int)
	{
		ownerPlayer.SetBehaviorVariable( 'canHolsterAfterDelay', 1.f );
		ownerPlayer.SetBehaviorVariable( 'canHolsterAfterDelayHorse', 1.f );
		RemoveTimer( 'ACSGrappleGun_HolsterAfterDelay' );
		RemoveTimer( 'ACSGrappleGun_HolsterWhenMovingTimer' );
	}

	protected timer function ACSGrappleGun_HolsterWhenMovingTimer( timeDelta : float , id : int)
	{	
		var stateCur : name;
		var canHolsterAfterDelay : bool;
		
		stateCur =  ownerPlayer.substateManager.GetStateCur();
		
		if( !ownerPlayer.bLAxisReleased && ownerPlayer.GetCurrentStateName() != 'AimThrow' && bLAxisWasReleased )
			canHolsterAfterDelay = true;
		else if ( stateCur == 'Jump' || stateCur == 'Ragdoll' || stateCur == 'Slide' || stateCur == 'TurnToJump' )
			canHolsterAfterDelay = true;
		else if ( ownerPlayer.IsSwimming() && !ownerPlayer.bLAxisReleased )
			canHolsterAfterDelay = true;
		
		if ( canHolsterAfterDelay )
		{
			ownerPlayer.SetBehaviorVariable( 'canHolsterAfterDelay', 1.f );
			RemoveTimer( 'ACSGrappleGun_HolsterAfterDelay' );
			RemoveTimer( 'ACSGrappleGun_HolsterWhenMovingTimer' );
		}
		
		bLAxisWasReleased = ownerPlayer.bLAxisReleased;
	}	
	
	protected function ProcessEnableRadialSlot()
	{
		
	}
	
	public function IsShootingComplete() : bool
	{
		return shootingIsComplete;
	}
}

state State_WeaponWait in ACSGrappleGun
{
	event OnEnterState( prevStateName : name )
	{
		thePlayer.BlockAllActions( 'RangedWeapon', false);
		thePlayer.BlockAllActions( 'RangedWeaponReload', false);
		thePlayer.BlockAllActions( 'RangedWeaponAiming', false);
		thePlayer.UnblockAction( EIAB_ThrowBomb, 'ShootingCrossbow' );
		thePlayer.UnblockAction( EIAB_DrawWeapon, 'RangedWeaponAiming' );
		thePlayer.UnblockAction( EIAB_DrawWeapon, 'RangedWeaponReload' );
		
		parent.ResetAllSettings();
		
		parent.Unlock();	
	
		parent.RemoveTimer( 'ACSGrappleGun_HolsterAfterDelay' );
		parent.RemoveTimer( 'ACSGrappleGun_HolsterWhenMovingTimer' );	
		parent.ownerPlayer.SetBehaviorVariable( 'canHolsterAfterDelay', 0.f );
		parent.ownerPlayer.SetBehaviorVariable( 'canHolsterAfterDelayHorse', 0.f );	
		parent.ownerPlayer.SetBehaviorVariable( 'hasCrossbowOnHand', 0.f );
	
		parent.RemoveTimer( 'ACSGrappleGun_InputLockFailsafe' );		
		DelayedProcessFullBodyAnimWeight();
		
		parent.ownerPlayer.OnDodgeBoost();	
		
		parent.shootingIsComplete = false;
	}
	
	event OnLeaveState( next_state_name : name )
	{
		parent.performedDraw = false;
		parent.AddTimer( 'ACSGrappleGun_InputLockFailsafe', 0.f, true );
		parent.ownerPlayer.SetBehaviorVariable( 'hasCrossbowOnHand', 1.f );
	}
	
	event OnRangedWeaponPress()
	{
		if ( ACS_Hook_FindActive() ) return false;

		if (thePlayer.IsSwimming() || thePlayer.IsUsingVehicle()) {
			thePlayer.DisplayActionDisallowedHudMessage( EIAB_Undefined,,, true );	
			return false;
		}
		PerformDraw( true );
	}
	
	event OnRangedWeaponRelease()
	{
		if ( ACS_Hook_FindActive() ) return false;

		if (thePlayer.IsSwimming() || thePlayer.IsUsingVehicle()) {
			thePlayer.DisplayActionDisallowedHudMessage( EIAB_Undefined,,, true );	
			return false;
		}

		if ( !parent.performedDraw )
			PerformDraw( false );
		else if ( wasPressed )
		{
			wasPressed = false;
			parent.OnRangedWeaponRelease();
		}
	}
	
	private function PerformDraw( pressed :  bool )
	{
		wasPressed = pressed;
	
		
		
		virtual_parent.Initialize( (CActor)( parent.GetParentEntity() ) );
		
		if ( pressed )
			virtual_parent.OnRangedWeaponPress();
		else 
			virtual_parent.OnRangedWeaponRelease();
		
		if ( parent.isPlayer )
		{
			virtual_parent.ProcessFullBodyAnimWeight();
		
				
			DrawEvent();
		}	
	}
	
	entry function DelayedProcessFullBodyAnimWeight()
	{
		Sleep(1.5f);
		parent.setFullWeight = 0.f;
		parent.ownerPlayer.SetBehaviorVariable( 'fullBodyAnimWeight', (float)( parent.setFullWeight ) );
	}
	
	entry function DrawEvent()
	{
		parent.ownerPlayer.SetBehaviorVariable( 'failSafeDraw', 1.0 );
		virtual_parent.RaiseOwnerGraphEvents( 'Crossbow_Draw', true );
		parent.performedDraw = true;
	}
}

state State_WeaponDraw in ACSGrappleGun
{
	event OnEnterState( prevStateName : name )
	{	
		var targetToPlayerHeading 	: float;
		var playerHeading			: float;
		var activeTime				: float;
		
		
		parent.ownerPlayer.radialSlots.Clear();
		parent.ownerPlayer.radialSlots.PushBack( 'Slot1' );
		parent.ownerPlayer.radialSlots.PushBack( 'Slot2' );
		parent.ownerPlayer.radialSlots.PushBack( 'Slot4' );
		parent.ownerPlayer.radialSlots.PushBack( 'Slot5' );
		parent.ProcessEnableRadialSlot();
	
		parent.AddTimer( 'ACSGrappleGun_ProcessFullBodyAnimWeightTimer', 0.01f, true );
		parent.ownerPlayer.OnDodgeBoost();
		parent.ownerPlayer.RaiseEvent( 'DivingForceStop' );
		
		parent.shootingIsComplete = false;
		
		parent.RemoveTimer( 'ACSGrappleGun_HolsterAfterDelay' );
		parent.RemoveTimer( 'ACSGrappleGun_HolsterWhenMovingTimer' );
		parent.ownerPlayer.SetBehaviorVariable( 'canHolsterAfterDelay', 0.f );
		parent.ownerPlayer.SetBehaviorVariable( 'canHolsterAfterDelayHorse', 0.f );				
		
		
		
			
		Equip();
		
		thePlayer.GoToCombatIfNeeded();
		
		thePlayer.BlockAction( EIAB_ThrowBomb, 'ShootingCrossbow' );
		
		
			thePlayer.BlockAction( EIAB_DismountVehicle, 'ShootingCrossbow' );
			thePlayer.BlockAction( EIAB_MountVehicle, 'ShootingCrossbow' );
		
		if ( !parent.ownerPlayer.IsUsingVehicle() && ( parent.ownerPlayer.bLAxisReleased || parent.ownerPlayer.IsSwimming() ) )
		{
			targetToPlayerHeading = parent.ownerPlayer.GetOrientationTargetHeading( parent.ownerPlayer.GetOrientationTarget() );
			playerHeading = parent.GetHeading();
			
			if ( prevStateName == 'State_WeaponWait'  )
			{
				if ( parent.ownerPlayer.IsSwimming() )
					activeTime = 0.5f;
				else
					activeTime = 0.2f;
					
				parent.ownerPlayer.SetCustomRotation( 'Crossbow', targetToPlayerHeading, 0.0f, activeTime, false );
			}
		}
	}
	
	event OnLeaveState( next_state_name : name )
	{
		var id : SItemUniqueId;
	
		id = parent.inv.GetItemFromSlot('l_weapon');
		if ( parent.inv.IsIdValid( id  ) && !parent.inv.IsItemCrossbow( id ) )
			virtual_parent.OnForceHolster();
	}
	
	entry function Equip()
	{
		var itemId: SItemUniqueId;
		var targetToPlayerHeading 	: float;
	
		if ( parent.isPlayer )
		{
			parent.SetCleanupFunction( 'CancelledEquiping' );
			parent.Lock();
			
			if ( parent.ownerPlayer.IsUsingVehicle() )
				Sleep( 0.2f );
			else
				Sleep( 0.1f );


            thePlayer.DrawItemsLatent( parent.inv.GetItemByItemEntity(parent) );
			
			virtual_parent.ReloadWeaponWithOrWithoutAnimIfNeeded();
		}	
	}
	
	cleanup function CancelledEquiping()
	{	
		
		
	}	
}

state State_WeaponReload in ACSGrappleGun
{
	event OnEnterState( prevStateName : name )
	{
		if ( parent.ownerPlayer.bLAxisReleased )
		{
			parent.ownerPlayer.SetCombatIdleStance( 1.f );
			
		}
		
		parent.ProcessEnableRadialSlot();

		
	
		parent.ownerPlayer.RaiseEvent( 'DivingForceStop' ); 
		Lock();
		if ( parent.ownerPlayer.GetCurrentStateName() == 'AimThrow' )
			RotateOwnerToCamera();
	}
	
	event OnLeaveState( next_state_name : name )
	{
		Unlock();
	}
	
	private function RotateOwnerToCamera()
	{
		var targetToPlayerHeading : float;
		
		targetToPlayerHeading = parent.ownerPlayer.GetOrientationTargetHeading( OT_CameraOffset );
		
		
		
		parent.AddTimer( 'GG_UpdateCustomRotationHeadingTimer', 0.001f, true );
	}
	
	private timer function GG_UpdateCustomRotationHeadingTimer( timeDelta : float , id : int)
	{
		var targetToPlayerHeading : float;

		targetToPlayerHeading = parent.ownerPlayer.GetOrientationTargetHeading( OT_CameraOffset );
		
		parent.ownerPlayer.UpdateCustomRotationHeading( 'Crossbow', targetToPlayerHeading );
	}

	private function Lock()
	{
		var actionBlockingExceptions : array<EInputActionBlock>;

		
		thePlayer.BlockAction( EIAB_DrawWeapon, 'RangedWeaponReload' );
	}
	
	private function Unlock()
	{
		
		thePlayer.BlockAllActions( 'RangedWeaponReload', false);
	}	
}

state State_WeaponAim in ACSGrappleGun
{
	event OnEnterState( prevStateName : name )
	{	
		if ( !parent.ownerPlayer.IsUsingVehicle() )
			parent.AddTimer( 'HolsterWeaponFailSafe', 1.5f );
		
		if ( parent.ownerPlayer.bLAxisReleased )
			parent.ownerPlayer.SetCombatIdleStance( 1.f );
			
		parent.AddTimer( 'ACSGrappleGun_ProcessFullBodyAnimWeightTimer', 0.1f, true );	
		virtual_parent.ProcessCharacterRotationInCombat();
		
		parent.ownerPlayer.SetBehaviorVariable( 'canHolsterAfterDelay', 0.f );
		parent.ownerPlayer.SetBehaviorVariable( 'canHolsterAfterDelayHorse', 0.f );		

		parent.ProcessEnableRadialSlot();
		
		parent.ownerPlayer.SetBehaviorVariable( 'hasCrossbowHeld', 1.f );
		parent.ownerPlayer.RaiseEvent( 'DivingForceStop' ); 
		parent.ProcessCanAttackWhenNotInCombat();
		parent.ownerPlayer.GetMovingAgentComponent().EnableVirtualController( 'Crossbow', true );
		
		parent.shootingIsComplete = false;

		parent.crosshair_manager.GotoState('ACSGrapplingCrosshair_State_Aiming');
		
		if ( !parent.ownerPlayer.IsUsingVehicle()
			&& parent.ownerPlayer.GetBehaviorVariable( 'isShootingWeapon' ) == 0.f 
			&& parent.ownerPlayer.GetBehaviorVariable( 'isAimingWeapon' ) == 0.f )
		{
			if  ( parent.ownerPlayer.playerAiming.GetCurrentStateName() == 'Waiting' )
			{
				if ( parent.ownerPlayer.GetPlayerCombatStance() == PCS_AlertNear || parent.ownerPlayer.IsSwimming() ) 
					parent.AddTimer( 'ACSGrappleGun_HolsterAfterDelay', 0.f );
			}
			else if ( theInput.GetActionValue( 'ThrowItem' ) == 0.f )
				parent.AddTimer( 'ACSGrappleGun_HolsterAfterDelay', 0.f );
		}
		else
			parent.Lock();
		
		CheckGotoAimThrow();
	}
	
	event OnLeaveState( next_state_name : name )
	{

		parent.crosshair_manager.GotoState('ACSGrapplingCrosshair_State_Idle');
		Unlock();
		parent.RemoveTimer( 'GG_UpdateCustomRotationHeadingTimer' );
		parent.RemoveTimer( 'HolsterWeaponFailSafe' );
		
		parent.RemoveTimer( 'ACSGrappleGun_HolsterAfterDelay' );
		parent.RemoveTimer( 'ACSGrappleGun_HolsterWhenMovingTimer' );	
		parent.ownerPlayer.SetBehaviorVariable( 'canHolsterAfterDelay', 0.f );
		parent.ownerPlayer.SetBehaviorVariable( 'canHolsterAfterDelayHorse', 0.f );

		ACS_Hook_RemoveSloMo();
	}

	event OnRangedWeaponPress()
	{
		if ( ACS_Hook_FindActive() ) return false;

		if (thePlayer.IsSwimming() || thePlayer.IsUsingVehicle()) {
			thePlayer.DisplayActionDisallowedHudMessage( EIAB_Undefined,,, true );	
			return false;
		}
		//--GrappleGun
		virtual_parent.ProcessCharacterRotationInCombat();
		CheckGotoAimThrow();
		parent.OnRangedWeaponPress();
	}
	
	event OnRangedWeaponRelease()
	{
		if ( ACS_Hook_FindActive() ) return false;

		if (thePlayer.IsSwimming() || thePlayer.IsUsingVehicle()) {
			thePlayer.DisplayActionDisallowedHudMessage( EIAB_Undefined,,, true );	
			return false;
		}

		if ( !parent.ownerPlayer.IsUsingVehicle() )
			virtual_parent.ProcessCharacterRotationInCombat();
			
		parent.OnRangedWeaponRelease();
	}
	
	entry function CheckGotoAimThrow()
	{
		var targetToPlayerHeading 	: float;
		var startTime				: float; 
		
		startTime = theGame.GetEngineTimeAsSeconds();
		while( theGame.GetEngineTimeAsSeconds() < startTime + 0.2 )
		{
			if ( !( parent.ownerPlayer.GetCurrentStateName() == 'AimThrow' && parent.deployedEnt ) )
			{
				virtual_parent.SetOwnerOrientation();	
			}
		
			Sleep( 0.0001f );
		}		
		
		if ( theInput.GetActionValue( 'ThrowItem' ) == 1.f 
			|| theInput.GetActionValue( 'VehicleItemAction' ) == 1.f )
		{		
			if( parent.ownerPlayer && !parent.ownerPlayer.IsUsingVehicle() )
			{	
				parent.RemoveTimer( 'ACSGrappleGun_HolsterAfterDelay' );
				parent.RemoveTimer( 'ACSGrappleGun_HolsterWhenMovingTimer' );
				parent.ownerPlayer.SetBehaviorVariable( 'canHolsterAfterDelay', 0.f );
				parent.ownerPlayer.SetBehaviorVariable( 'canHolsterAfterDelayHorse', 0.f );				
			
				if ( parent.ownerPlayer.GetCurrentStateName() == 'AimThrow' || parent.ownerPlayer.GetPlayerCombatStance() == PCS_AlertNear )
					targetToPlayerHeading = parent.ownerPlayer.GetOrientationTargetHeading( OT_Actor );
				else
					targetToPlayerHeading = parent.ownerPlayer.GetOrientationTargetHeading( OT_CameraOffset );
					
				
				
			}
			
			
			Sleep( 0.1f );
			parent.RemoveTimer( 'GG_UpdateCustomRotationHeadingTimer' );

			if ( !parent.ownerPlayer.IsUsingVehicle() )
			{
				parent.RemoveTimer( 'HolsterWeaponFailSafe' );
				Lock();
			}	

			if ( parent.deployedEnt )
			{
				if ( parent.ownerPlayer.playerAiming.GetCurrentStateName() != 'Aiming' )
				{
					parent.ownerPlayer.SetBehaviorVariable( 'inAimThrow', 1.f );
					parent.ownerPlayer.SetBehaviorVariable( 'inAimThrowForOverlay', 1.f );
					
					if ( !parent.ownerPlayer.IsUsingVehicle() )
					{
						parent.ownerPlayer.OnEnableAimingMode( true );			
					}
					
					parent.isDeployedEntAiming = true;
					parent.deployedEnt.StartAiming();
					virtual_parent.SetOwnerOrientation();
				}
				else
					parent.ownerPlayer.playerAiming.OnAddAimingSloMo();
			}	
		}
		
		
		else if ( !parent.ownerPlayer.IsUsingVehicle() )
		{
			parent.bLAxisWasReleased = parent.ownerPlayer.bLAxisReleased;
			
			if ( parent.ownerPlayer.IsSwimming() )
				parent.AddTimer( 'ACSGrappleGun_HolsterWhenMovingTimer', 0.5f, true );
		}
		else if ( (W3Boat)( parent.ownerPlayer.GetUsedVehicle() ) )
		{
			parent.AddTimer( 'ACSGrappleGun_HolsterAfterDelay', 4.9f );
		}

		SleepOneFrame();
		ACS_Hook_SloMo(0.5);
	}
	
	event OnWeaponShootStart()
	{
		if ( theInput.GetActionValue( 'ThrowItem' ) == 0.f )
			
		{		
			parent.OnWeaponShootStart();
		}
	}

	timer function GG_UpdateCustomRotationHeadingTimer( timeDelta : float , id : int)
	{
		var targetToPlayerHeading : float;
	
		virtual_parent.SetOwnerOrientation();
		targetToPlayerHeading = parent.ownerPlayer.GetOrientationTargetHeading( parent.ownerPlayer.GetOrientationTarget() );
		parent.ownerPlayer.UpdateCustomRotationHeading( 'Crossbow', targetToPlayerHeading );
	}
	
	private function Lock()
	{
		var actionBlockingExceptions : array<EInputActionBlock>;

		
		thePlayer.BlockAction( EIAB_DrawWeapon, 'RangedWeaponAiming' );
	}
	
	private function Unlock()
	{
		
		thePlayer.BlockAllActions( 'RangedWeaponAiming', false);
	}		
}

state State_WeaponShoot in ACSGrappleGun
{
	event OnEnterState( prevStateName : name )
	{
		var target : CActor;
		
		target = parent.ownerPlayer.GetTarget();
		parent.ownerPlayer.RaiseEvent( 'DivingForceStop' ); 
		
		
		
		parent.shootingIsComplete = false;
		cachedCombatActionTarget = NULL;
		
		
		if( target )
		{
			if( (( CNewNPC )( target )).IsShielded( thePlayer ) )
				(( CNewNPC )( target )).OnIncomingProjectile( true );
		}
		
		parent.ProcessCanAttackWhenNotInCombat();
	}
	
	event OnLeaveState( next_state_name : name )
	{
		parent.RemoveTimer( 'ACSGrappleGun_HolsterAfterDelay' );
		parent.RemoveTimer( 'ACSGrappleGun_HolsterWhenMovingTimer' );
		parent.ownerPlayer.SetBehaviorVariable( 'canHolsterAfterDelay', 0.f );
		parent.ownerPlayer.SetBehaviorVariable( 'canHolsterAfterDelayHorse', 0.f );
	}
	
	event OnProcessThrowEvent( animEventName : name )
	{
		virtual_parent.OnProcessThrowEvent( animEventName );
	
		if ( animEventName == 'ProjectileThrow' )
		{
			if ( cachedCombatActionTarget && !parent.ownerPlayer.IsUsingVehicle() )
				parent.ownerPlayer.SetSlideTarget( cachedCombatActionTarget );
		
			parent.shootingIsComplete = true;
			
			if ( parent.ownerPlayer.GetCurrentStateName() == 'AimThrow' )
			{
				if ( parent.recoilLevel == RL_1 )
					GCameraShake(0.05);
				else
					GCameraShake(0.125);
			}			
			
			if ( parent.ownerPlayer.GetPlayerCombatStance() == PCS_AlertNear )
			{
				if ( parent.ownerPlayer.IsSwimming() )
					parent.AddTimer( 'ACSGrappleGun_HolsterWhenMovingTimer', 0.5f, true );
			}
			else
			{
				parent.bLAxisWasReleased = parent.ownerPlayer.bLAxisReleased;

				if ( parent.ownerPlayer.IsSwimming() )
					parent.AddTimer( 'ACSGrappleGun_HolsterWhenMovingTimer', 0.5f, true );
			}
			
			if ( !( parent.ownerPlayer.IsUsingVehicle() && (W3Boat)( parent.ownerPlayer.GetUsedVehicle() ) ) )
			{
				parent.ProcessEnableRadialSlot();
				
				if ( parent.ownerPlayer.GetPlayerCombatStance() == PCS_Normal || parent.ownerPlayer.GetPlayerCombatStance() == PCS_AlertFar )
					parent.Unlock();
			}
		}
	}
	
	event OnRangedWeaponPress()
	{
		if ( ACS_Hook_FindActive() ) return false;

		if (thePlayer.IsSwimming() || thePlayer.IsUsingVehicle()) {
			thePlayer.DisplayActionDisallowedHudMessage( EIAB_Undefined,,, true );	
			return false;
		}

		if ( parent.shootingIsComplete )
		{
			parent.shootingIsComplete = false;
			
			if (  !parent.ownerPlayer.IsUsingVehicle() )
				parent.ownerPlayer.SetSlideTarget( parent.ownerPlayer.GetCombatActionTarget( EBAT_ItemUse ) );
			else
				((CR4PlayerStateUseGenericVehicle)parent.ownerPlayer.GetState( 'UseGenericVehicle' )).FindTarget();
		}
		else if ( !cachedCombatActionTarget )
		{
			cachedCombatActionTarget = parent.ownerPlayer.GetCombatActionTarget( EBAT_ItemUse );
		}

		virtual_parent.OnRangedWeaponPress();
	}
	
	event OnRangedWeaponRelease()
	{
		parent.OnRangedWeaponRelease();
	}	
}

state State_WeaponHolster in ACSGrappleGun
{
	event OnEnterState( prevStateName : name )
	{	
		parent.RemoveTimer( 'ACSGrappleGun_HolsterAfterDelay' );
		parent.RemoveTimer( 'ACSGrappleGun_HolsterWhenMovingTimer' );
		parent.ownerPlayer.SetBehaviorVariable( 'canHolsterAfterDelay', 0.f );
		parent.ownerPlayer.SetBehaviorVariable( 'canHolsterAfterDelayHorse', 0.f );			
	
		isSettingItems = false;
		parent.ResetAllSettings();
		
		if ( parent.ownerPlayer.bLAxisReleased )
			parent.ownerPlayer.SetCombatIdleStance( 1.f );
			
		parent.ownerPlayer.OnDodgeBoost();	
		Unequip();
	}
	
	event OnLeaveState( next_state_name : name )
	{
		if ( !( parent.ownerPlayer.IsUsingVehicle() && (W3Boat)( parent.ownerPlayer.GetUsedVehicle() ) ) )
			parent.ProcessEnableRadialSlot();
	
		if ( parent.ownerPlayer.bLAxisReleased )
			parent.ownerPlayer.SetCombatIdleStance( 1.f );
	
		thePlayer.UnblockAction( EIAB_ThrowBomb, 'ShootingCrossbow' );
		parent.RemoveTimer( 'ACSGrappleGun_ProcessFullBodyAnimWeightTimer' );	

		parent.AddTimer('EquipNormalBolt', 0.2); 
	}
	
	entry function Unequip()
	{
		if ( parent.isPlayer )
		{	
			parent.SetCleanupFunction( 'CancelledEquiping' );
			
			Sleep( 0.2 );
			isSettingItems = true;
			
			Sleep( 0.3f );

			parent.ownerPlayer.SetRequiredItems('None', 'Any');
			parent.ownerPlayer.ProcessRequiredItems();
			
			isSettingItems = false;
			
			
			parent.Unlock();
			parent.OnChangeTo( 'State_WeaponWait' );	
		}
	}
	
	event OnRangedWeaponPress()
	{
		if ( ACS_Hook_FindActive() ) return false;

		if (thePlayer.IsSwimming() || thePlayer.IsUsingVehicle()) {
			thePlayer.DisplayActionDisallowedHudMessage( EIAB_Undefined,,, true );	
			return false;
		}

		virtual_parent.ProcessFullBodyAnimWeight();
	
		if ( !isSettingItems ) 
		{
			if ( !parent.inv.IsItemCrossbow( parent.inv.GetItemFromSlot('l_weapon') ) )
				virtual_parent.RaiseOwnerGraphEvents( 'Crossbow_Draw', true );
			else if ( virtual_parent.ReloadWeaponWithOrWithoutAnimIfNeeded() )
				virtual_parent.RaiseOwnerGraphEvents( 'Crossbow_Reload', true );
			else
				virtual_parent.RaiseOwnerGraphEvents( 'Crossbow_AimShoot', true );
		}
		else
			virtual_parent.RaiseOwnerGraphEvents( 'Crossbow_Draw', true );
		
		parent.OnRangedWeaponPress();
	}	
	
	cleanup function CancelledEquiping()
	{
		parent.Unlock();
	}		
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class W3ACSHookProjectile extends W3BoltProjectile 
{
	var grapplingManager : CACSGrapplingManager;

    var pull_shot : bool;

    saved var hook_targetPos : Vector;

	private var comp						: CMeshComponent;
	private var rot							: EulerAngles;
	private var pos							: Vector;

    function SetModifiedShot(modify : bool) 
	{
        var toggled_mode : bool;

        toggled_mode = FactsDoesExist("acs_grapple_mode_toggle");

        pull_shot = ( toggled_mode || modify ) && ( !toggled_mode || !modify );
	}

    event OnSpawned( spawnData : SEntitySpawnData ) 
	{
        grapplingManager = new CACSGrapplingManager in this;
        grapplingManager.Init(this);
		super.OnSpawned( spawnData );

        projSpeed = 50;
	    projAngle = 0;
	    lifeSpan = -1;

		if ( !theSound.SoundIsBankLoaded("amb_dyn_bob_vampire_castle.bnk") )
		{
			theSound.SoundLoadBank( "amb_dyn_bob_vampire_castle.bnk", true );
		}

		if ( !theSound.SoundIsBankLoaded("monster_knight_giant.bnk") )
		{
			theSound.SoundLoadBank( "monster_knight_giant.bnk", true );
		}
	}

	timer function return_delay( deltaTime : float , id : int)
	{
		AddTimer('return_repeat', 0.001, true);

		GetWitcherPlayer().SoundEvent("cmb_play_parry");

		comp = (CMeshComponent)this.GetComponentByClassName('CMeshComponent');

		pos = comp.GetLocalPosition();
		pos.Y -= 1.5;

		comp.SetPosition( pos );

		rot = comp.GetLocalRotation();
		rot.Yaw -= 180;

		comp.SetRotation( rot );

	}

	timer function return_repeat( deltaTime : float , id : int)
	{
		var targetDistance																						: float;
		
		targetDistance = VecDistanceSquared2D( this.GetWorldPosition(), GetWitcherPlayer().GetBoneWorldPosition('l_hand') );

		if (targetDistance <= 1.5 * 1.5)
		{
			this.SoundEvent("cmb_arrow_impact_metal");

			comp = (CMeshComponent)this.GetComponentByClassName('CMeshComponent');

			pos = comp.GetLocalPosition();
			pos.Y += 1.5;

			comp.SetPosition( pos );

			RemoveTimers();

			this.Destroy();
		}
		else if (targetDistance > 1.5 * 1.5)
		{
			this.ShootProjectileAtPosition( 0, projSpeed * 3, thePlayer.GetBoneWorldPosition('l_hand'), 500);
		}
	}

	public function HookReturn() 
	{
		RemoveTimer('return_delay');

		RemoveTimer('return_repeat');

		thePlayer.SoundEvent("monster_knight_giant_mv_chain_soft");

		AddTimer('return_repeat', 0.001, true);
	}

    public function ThrowProjectile( targetPosIn : Vector ) 
	{
		if(GetOwner() == thePlayer)
			theGame.VibrateControllerHard();	
		
		hook_targetPos = targetPosIn;
		
		this.BreakAttachment();
		AddTimer( 'Hook_ReleaseProjectiles', 0.001, false );		
		
		FactsAdd("crossbow_was_fired", 1, 3);
		AddTag( 'fired_crossbow_bolt' );
		
		CheckIfInfWater();
		AddTimer( 'CheckIfInfWaterLoop', 0.05, true );

		AddTimer('return_delay', 1, false);

		this.SoundEvent( "cmb_arrow_swoosh" );

		thePlayer.SoundEvent("monster_knight_giant_mv_chain_hard");

		this.ShootProjectileAtPosition( 0, projSpeed, this.GetWorldPosition() + this.GetWorldForward(), 500);

		PlayEffectSingle('arrow_trail_fire');
		PlayEffectSingle('arrow_trail_red');
		PlayEffectSingle('sparks');
		PlayEffectSingle('red_arrow_trail_mutation_9');
		PlayEffectSingle('arrow_trail_mutation_9');
	}
	
	timer function Hook_ReleaseProjectiles( time : float , id : int) 
	{
		var distanceToTarget		: float;
		var	projectileFlightTime 	: float;
		var attackRange				: float;
		var target 					: CActor = thePlayer.GetTarget();
		var boneIndex				: int;
		var npc						: CNewNPC;

        var ents : array<CGameplayEntity>;
        var i, j, size : int;
        var hook_pos, new_dest : Vector;
        var collisionGroups : array<name>;
        var flying_npcs : array<CNewNPC>;
        var flying_npc_dist : array<float>;
        var potential_npc, flying_npc : CNewNPC;
        var display_target, rider : CActor;
        var vehicle_comp : CVehicleComponent;

        hook_pos = this.GetWorldPosition();

        collisionGroups.PushBack('Ragdoll');
        collisionGroups.PushBack('Static');
        collisionGroups.PushBack('Terrain');
        collisionGroups.PushBack('Water');
        collisionGroups.PushBack('Character');

        attackRange = theGame.params.MAX_THROW_RANGE;

        this.SoundEvent("cmb_arrow_swoosh");

		thePlayer.SoundEvent("monster_knight_giant_mv_chain_soft");

        FindGameplayEntitiesInCone(
            ents, 
            hook_pos, 
            VecHeading( hook_targetPos - hook_pos ), //cone direction
            3, //cone angle
            50, //cone range
            10, //max results
            , //tag
            FLAG_ExcludePlayer | FLAG_Attitude_Hostile | FLAG_OnlyAliveActors,
            , //target
            'CNewNPC' //classname
        );

        size = ents.Size();

        if (size > 1) 
		{
            for (i=0; i<size; i+=1) 
			{
                potential_npc = (CNewNPC)ents[i];

                //store flying npcs and their respective distances to compare
                if ( potential_npc.IsFlying() ) 
				{

                    //if the npc is the current target, ignore distance comparisons
                    if (potential_npc == thePlayer.GetDisplayTarget()) 
					{
                        flying_npc = potential_npc;
                        break;
                    }
                    
                    flying_npcs.PushBack( potential_npc );
                    flying_npc_dist.PushBack(
                        VecDistance2D(
                            hook_pos,
                            potential_npc.GetWorldPosition()
                        ) 
                    );
                }
            }

            if (!flying_npc)
                flying_npc = flying_npcs[ ArrayFindMinF(flying_npc_dist) ]; //find closest flying npc
        }
        else if (size == 1) 
		{
            potential_npc = (CNewNPC)ents[0];

            if ( potential_npc.IsFlying() )
                flying_npc = potential_npc;
        }

        if (flying_npc) 
		{
            new_dest = flying_npc.GetWorldPosition();

            distanceToTarget = VecDistance( hook_pos, new_dest );
            projectileFlightTime = distanceToTarget / projSpeed;

            flying_npc.SignalGameplayEventParamFloat('Time2DodgeProjectile', projectileFlightTime );

            new_dest = flying_npc.PredictWorldPosition( VecDistance2D(hook_pos, new_dest) / projSpeed );
            new_dest.Z += ((CMovingPhysicalAgentComponent)( flying_npc ).GetMovingAgentComponent()).GetCapsuleHeight() / 2;

            this.ShootProjectileAtPosition( projAngle, projSpeed, new_dest, 500);
            return;
        }

        display_target = (CActor)(thePlayer.GetDisplayTarget());

        vehicle_comp = (CVehicleComponent)( display_target.GetComponentByClassName('CVehicleComponent') );

        if (vehicle_comp) 
		{
            rider = vehicle_comp.user;

            if (rider)
                display_target = rider;
        }

        if ( display_target && thePlayer.playerAiming.GetCurrentStateName() == 'Waiting' ) 
		{
            new_dest = display_target.GetWorldPosition();

            distanceToTarget = VecDistance( hook_pos, new_dest );
            projectileFlightTime = distanceToTarget / projSpeed;

            display_target.SignalGameplayEventParamFloat('Time2DodgeProjectile', projectileFlightTime );

            new_dest = display_target.PredictWorldPosition( VecDistance2D(hook_pos, new_dest) / projSpeed );
            new_dest.Z += ((CMovingPhysicalAgentComponent)( display_target ).GetMovingAgentComponent()).GetCapsuleHeight() / 2;

            this.ShootProjectileAtPosition( projAngle, projSpeed, new_dest, 500);
            return;			
		}

		this.ShootProjectileAtPosition( projAngle, projSpeed, hook_targetPos, 500, collisionGroups );

        if ( target ) {
            distanceToTarget = VecDistance( hook_pos, target.GetWorldPosition() );
            projectileFlightTime = distanceToTarget / projSpeed;

            target.SignalGameplayEventParamFloat('Time2DodgeProjectile', projectileFlightTime );
        }
	}

    event OnProjectileShot( targetCurrentPosition : Vector, optional target : CNode ) 
	{
		if (!isActive)
		{
			isActive = true;
			ActivateTrail( defaultTrail );
		}
		
        grapplingManager.GotoState('ACS_GrapplingGunManager_State_Flying');
	}

    event OnProjectileCollision( pos, normal : Vector, collidingComponent : CComponent, hitCollisionsGroups : array< name >, actorIndex : int, shapeIndex : int ) 
	{
		var victim : CGameplayEntity;
        var beehive : CBeehiveEntity;
		var actor_victim	: CActor;
		var mesh_comp : CMeshComponent;
		var bounding_box : Box;
		var hit_pos, arrow_size : Vector;
        var rotMat : Matrix;
        var bone_name : name;
        var vehicle_comp : CVehicleComponent;
        var rider : CActor;

		DestroyEffect('arrow_trail');
		DestroyEffect('arrow_trail_fire');
		DestroyEffect('arrow_trail_red');
		DestroyEffect('red_arrow_trail_mutation_9');
		DestroyEffect('arrow_trail_mutation_9');

		RemoveTimer('return_delay');

		RemoveTimer('return_repeat');

		thePlayer.SoundEvent("monster_knight_giant_mv_chain_soft");

        if ( !grapplingManager.IsInState('ACS_GrapplingGunManager_State_Flying') )
			return false;

        if(collidingComponent) 
		{
            beehive = (CBeehiveEntity)(collidingComponent.GetEntity());

            if(beehive && ((CThrowable)this) )
                beehive.OnShotByProjectile();

			victim = (CGameplayEntity)collidingComponent.GetEntity();

			if(victim) 
			{
				victim.OnBoltHit();

                actor_victim = (CActor)victim;

                if ( actor_victim && !actor_victim.IsAlive() ) 
				{
                    return false;
                }

                if (victim.HasTag('AddRagdollCollision') && (CMovingAgentComponent)collidingComponent && !thePlayer.GetDisplayTarget()) 
				{
                    grapplingManager.GotoInactiveState();
                    return false;
                }
            }
        }

        SetShouldBeAttachedToVictim( true );

        theGame.GetBehTreeReactionManager().CreateReactionEventCustomCenter( thePlayer, 'Danger', 30, alarmRadius, 2, -1, true, true, pos );

        hit_pos = pos;

        StopProjectile();
        StopActiveTrail();

        RemoveTimer( 'CheckIfInfWaterLoop' );
		
        if ( hitCollisionsGroups.Contains('Water') ) 
		{
            SoundEvent("cmb_arrow_impact_water");

            grapplingManager.GotoInactiveState();
            return false;
        }
			
		if (actor_victim) 
		{
            vehicle_comp = (CVehicleComponent)( actor_victim.GetComponentByClassName('CVehicleComponent') );

            if (vehicle_comp)
                rider = vehicle_comp.user;
            
            if (rider) 
			{
                actor_victim = rider;
                bone_name = 'torso';
                hit_pos = actor_victim.GetBoneWorldPosition('torso');
            }
            else if ( hitCollisionsGroups.Contains('Ragdoll') )
				bone_name = ((CMovingPhysicalAgentComponent)actor_victim.GetMovingAgentComponent()).GetRagdollBoneName(actorIndex);

			if(actor_victim.IsAlive()) 
			{
				if ( pull_shot && actor_victim.HasAbility('BounceBoltsWildhunt') ) 
				{
					this.bounceOfVelocityPreserve = 0.1;
					this.BounceOff(normal, pos);
					this.Init(actor_victim);
					this.PlayEffect('sparks');
					this.SoundEvent("cmb_arrow_impact_metal");
					ActivateTrail('arrow_trail_orange');

                    grapplingManager.GotoInactiveState();
					return false;
				}
                else if ( pull_shot && actor_victim.HasAbility('RepulseProjectiles') ) 
				{
                    this.Init( actor_victim );
                    bounceOfVelocityPreserve = 0.8;
                    BounceOff( normal, pos );
                    actor_victim.SignalGameplayEvent( 'RepulsedProjectile' );

                    grapplingManager.GotoInactiveState();
                    return false;
                }
				else
					ProcessDamageAction(actor_victim, pos, bone_name);
			}
			
			this.SoundEvent("cmb_arrow_impact_body");

            if (!IsNameValid(bone_name)) 
                bone_name = 'torso';

            mesh_comp = (CMeshComponent)GetComponentByClassName('CMeshComponent');

            if( mesh_comp ) 
			{
                bounding_box = mesh_comp.GetBoundingBox();
                arrow_size = bounding_box.Max - bounding_box.Min;
                
                rotMat = MatrixBuiltRotation( this.GetWorldRotation() );
                rotMat = MatrixGetInverted( rotMat );
                arrow_size = VecTransformDir( rotMat, arrow_size );
                
                if( arrow_size.Y > 0 )	
                    hit_pos += RotForward(  this.GetWorldRotation() ) * arrow_size.Y * 0.1f; 
                else	
                    hit_pos -= RotForward(  this.GetWorldRotation() ) * arrow_size.Y * 0.9f; 
            }

            if (actor_victim.GetBoneIndex(bone_name) != -1) 
			{
				this.CreateAttachmentAtBoneWS(actor_victim, bone_name, hit_pos, this.GetWorldRotation());
			}
			else
			{
				this.CreateAttachment(actor_victim, 'blood_point', hit_pos, this.GetWorldRotation());
			}

			if (pull_shot)
                    grapplingManager.GotoMovingState('ACS_GrapplingGunManager_State_MovingNPC', hit_pos, actor_victim, bone_name);
                else
                    grapplingManager.GotoMovingState('ACS_GrapplingGunManager_State_MovingPlayer', hit_pos, actor_victim, bone_name);
		}
        else
		{
            mesh_comp = (CMeshComponent)GetComponentByClassName('CMeshComponent');

            if( mesh_comp ) 
			{
                bounding_box = mesh_comp.GetBoundingBox();
                arrow_size = bounding_box.Max - bounding_box.Min;
                
                hit_pos -= RotForward( this.GetWorldRotation() ) * arrow_size.X * 0.7f;
                
                Teleport( hit_pos );
            }
			
			if (victim)
                ProcessDamageAction(victim, pos, bone_name);
			
			grapplingManager.GotoMovingState('ACS_GrapplingGunManager_State_MovingPlayer', hit_pos);
		}
	}

    event OnDestroyed() 
	{
		RemoveTimers();

		thePlayer.SoundEvent("monster_knight_giant_mv_chain_hard");

        grapplingManager.GotoInactiveState();
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class CACSGrapplingManager 
{
    var hook : W3ACSHookProjectile;
	var actor_victim : CActor;
    var bone_name : name;
	var dest_pos : Vector;
    var hook_flying_delta_time, moving_start_time : float;
    var chain_manager : CACSGrapplingChainManager;
    var active, locked_actions, locked_camera, locked_saving, has_holstered : bool;
    var m_noSaveLock : int; default m_noSaveLock = 191;

    public function Init(h : W3ACSHookProjectile) 
	{
        hook = h;
        this.GotoState('ACS_GrapplingGunManager_State_Loading');
    }

    public function GotoMovingState(state_name : name, pos : Vector, optional actor : CActor, optional b : name) 
	{
        dest_pos = pos;
        actor_victim = actor;
        bone_name = b;

        this.GotoState(state_name);
    }

	public function GotoInactiveState()
	{
		chain_manager.GotoState('ACS_GrappleGunChain_State_Idle');
        this.GotoState('ACS_GrapplingGunManager_State_Inactive');
	}

    event OnFinishedMoving( requestName : name, notify : EMovementAdjustmentNotify ) 
	{
		this.GotoInactiveState();
	}

	event OnCancelMoving( requestName : name, notify : EMovementAdjustmentNotify ) 
	{
		this.GotoInactiveState();
	}

    protected function CheckIfShouldCancel()
	 {
        if ( theInput.IsActionPressed('ThrowItem') || theInput.IsActionPressed('ThrowItemHold') )
            this.GotoState('ACS_GrapplingGunManager_State_Cancel');
    }

	protected function LockCamera(b:bool) 
	{
        var camera : CCustomCamera;

        camera = theGame.GetGameCamera();

		if (b && thePlayer.GetCurrentStateName() == 'AimThrow') 
		{
			camera.EnableManualControl( false );
			locked_camera = true;
		}
        else if (!b && locked_camera) {
			camera.EnableManualControl( true );
		}
	}

    protected function LockSaving(b:bool) 
	{
        if (b) 
		{
            theGame.CreateNoSaveLock( "ACS_GRAPPLE", m_noSaveLock, true, false ); 
            locked_saving = true;
        }
        else if (locked_saving) 
		{
            theGame.ReleaseNoSaveLock(m_noSaveLock);
        }
    }

    protected function PlayerHolster() 
	{
        if (theInput.IsActionPressed('ThrowItemHold')) 
		{
			return;
		}

		if (!has_holstered) 
		{
			has_holstered = true;
			thePlayer.SetBehaviorVariable( 'canHolsterAfterDelay', 1.f );
			thePlayer.SetBehaviorVariable( 'canHolsterAfterDelayHorse', 1.f );
		}
	}

    protected function ProcessShieldImpact(actor : CActor, distance : float) : bool {	
        var npc : CNewNPC;
        var cost : float;
        var has_stamina : bool;

        npc = (CNewNPC)actor;
        if (!npc) return false;
		if (!npc.IsShielded(NULL)) return false;

        npc.SignalGameplayEvent('PerformAdditiveParry');

        cost = 0.25 * thePlayer.GetStatMax(BCS_Stamina);
        has_stamina = thePlayer.GetStat(BCS_Stamina) >= cost;
			
        if (has_stamina && distance >= 5 && RandF() < distance/20 && !npc.HasTag('imlerith')) 
		{
            npc.SetBehaviorVariable( 'bShieldbreak', 1.0 );
            npc.ToggleEffectOnShield( 'heavy_block', true );
            npc.DropItemFromSlot( 'l_weapon', true );

            thePlayer.DrainStamina(ESAT_FixedValue, cost, 0.5);
        }
        else if (!has_stamina)
            thePlayer.SetShowToLowStaminaIndication(cost);

        hook.PlayEffect('sparks');
        thePlayer.SoundEvent("cmb_play_parry");

        return true;
	}

    protected latent function CalculateFallTrajectoryPosition(start_pos : Vector, speed : float) : Vector {
        var angle, S_dist : float;
        var travel, downwards_travel, S_pos, end_pos : Vector;
        var raycast : bool;
        var ray_cast_results : array<SRaycastHitResult>;
        var raycast_distances : array<float>;
        var collisionGroups : array<name>;
        var i, size : int;

        travel = dest_pos + Vector(0,0,1) - start_pos; //approximate
        downwards_travel = travel;

        if (dest_pos.Z + 1 >= start_pos.Z)
            downwards_travel.Z *= -1; //we want a downwards vector, so we invert z if the destination is higher than start position
        else {
            //dont ask, trial and error
            //downwards_travel.X *= -1;
            //downwards_travel.Y *= -1;
            travel.X *= -1; 
            travel.Y *= -1;
        }

        angle = 90 - AngleNormalize180(
            VecGetAngleBetween(
                Vector(0,0,1), 
                travel
            )
        );

        end_pos = downwards_travel;
        end_pos.X *= 0.5;
        end_pos.Y *= 0.5;
        
        if (dest_pos.Z + 1 >= start_pos.Z) {
            S_dist = PowF(speed, 2) * SinF( Deg2Rad(2 * angle) ) / 20; // / 10 because gravity and / 2 because I want it to be smaller
            S_pos = start_pos + VecNormalize( Vector( travel.X, travel.Y, 0 ) ) * S_dist; //normalize projection of travel vector onto XY plane and multiply by distance

            end_pos += S_pos;
        }
        else
            end_pos += start_pos;
        
        collisionGroups.PushBack('Static');
        collisionGroups.PushBack('Terrain');

        raycast = theGame.GetWorld().GetTraceManager().RayCastSync(
            start_pos,
            end_pos,
            ray_cast_results, 
            collisionGroups
        );

        size = ray_cast_results.Size();
        if (raycast && size > 0) {
            for ( i = 0; i < size; i += 1 ) {
                raycast_distances.PushBack( ray_cast_results[i].distance );
            }

            return ray_cast_results[ ArrayFindMinF(raycast_distances) ].position;
        }

        return end_pos;
    }
}

state ACS_GrapplingGunManager_State_Loading in CACSGrapplingManager 
{
    event OnEnterState( prev_state_name : name ) 
	{
		super.OnEnterState(prev_state_name);
        this.Loading_enter();
	}

    entry function Loading_enter() 
	{
        parent.chain_manager = new CACSGrapplingChainManager in parent;
        parent.chain_manager.Init(parent);
    }
}

state ACS_GrapplingGunManager_State_Inactive in CACSGrapplingManager 
{
	event OnEnterState( prev_state_name : name ) 
	{
        super.OnEnterState(prev_state_name);
        this.Inactive_enter();
	}

    entry function Inactive_enter() 
	{
        parent.active = false;

        ACS_Hook_RemoveSloMo();

        GetACSGrappleGun().OnWeaponReload();

        parent.PlayerHolster();

        parent.LockCamera(false);
        //parent.LockActions(false);
		parent.LockSaving(false);
    }
}

state ACS_GrapplingGunManager_State_Cancel in CACSGrapplingManager 
{
    event OnEnterState( prev_state_name : name ) 
	{
        super.OnEnterState(prev_state_name);
        this.Cancel_enter(prev_state_name);
    }

    entry function Cancel_enter( prev_state_name : name ) 
	{
        var pos, dest : Vector;
        var moving_agent : CMovingAgentComponent;
        var moving_phys_agent : CMovingPhysicalAgentComponent;
        var ticket : SMovementAdjustmentRequestTicket;
		var movement_adjustor : CMovementAdjustor;
		var slide_duration, moving_delta_time, speed : float;

        if (prev_state_name == 'ACS_GrapplingGunManager_State_MovingPlayer') 
		{
            speed = 24;
            pos = thePlayer.GetWorldPosition();
            dest = parent.CalculateFallTrajectoryPosition(pos, speed);

            moving_agent = thePlayer.GetMovingAgentComponent();
            moving_phys_agent = (CMovingPhysicalAgentComponent)moving_agent;
            movement_adjustor = moving_agent.GetMovementAdjustor();

            movement_adjustor.CancelByName( 'acs_grapple_movement_adjust' );
            ticket = movement_adjustor.CreateNewRequest( 'acs_grapple_movement_adjust' );
            slide_duration = VecDistance2D( pos, dest ) / speed;
            movement_adjustor.AdjustmentDuration( ticket, slide_duration );
            //movement_adjustor.AdjustLocationVertically( ticket, true );
            //movement_adjustor.ScaleAnimationLocationVertically( ticket, true );
            movement_adjustor.ShouldStartAt(ticket, pos);
            movement_adjustor.UseBoneForAdjustment(ticket, 'l_hand', true);
            //movement_adjustor.NotifyScript(ticket, parent, 'OnFinishedMoving', MAN_AdjustmentEnded);
            //movement_adjustor.NotifyScript(ticket, parent, 'OnCancelMoving', MAN_AdjustmentCancelled);
            movement_adjustor.SlideTo(ticket, dest);

            parent.chain_manager.GotoState('ACS_GrappleGunChain_State_Idle');

            while ( moving_phys_agent.IsFalling() && !moving_phys_agent.IsCollidesOnSide() ) 
			{
                SleepOneFrame();
            }

            movement_adjustor.CancelByName( 'acs_grapple_movement_adjust' );
        }

        parent.GotoInactiveState();
    }
}

state ACS_GrapplingGunManager_State_Flying in CACSGrapplingManager 
{
	var shoot_time : float;
    var collided : bool;

	event OnEnterState( prev_state_name : name ) 
	{
		super.OnEnterState(prev_state_name);
        this.Flying_enter();
	}

    entry function Flying_enter() 
	{
        parent.active = true;

        thePlayer.SoundEvent("monster_knight_giant_mv_chain_soft");
		shoot_time = theGame.GetEngineTimeAsSeconds();

        ACS_Hook_SloMo(0.75);

        parent.LockCamera(true);
        //parent.LockActions(true);
        parent.LockSaving(true);

        parent.chain_manager.GotoState('ACS_GrappleGunChain_State_Flying');

        this.Monitor_flying();
    }

    latent function Monitor_flying() 
	{
        while (true) 
		{
            parent.CheckIfShouldCancel();

            if (theGame.GetEngineTimeAsSeconds() - shoot_time >= 1.5)
				parent.GotoInactiveState();

            SleepOneFrame();
        }
    }

	event OnLeaveState( next_state_name : name ) 
	{
        ACS_Hook_RemoveSloMo();

		parent.hook_flying_delta_time = theGame.GetEngineTimeAsSeconds() - shoot_time;

		if (next_state_name != 'ACS_GrapplingGunManager_State_MovingPlayer') 
		{			
			parent.LockCamera(false);
            //parent.LockActions(false);
		}

		super.OnLeaveState(next_state_name);
	}
}

state ACS_GrapplingGunManager_State_MovingPlayer in CACSGrapplingManager 
{
	var dest, dest_adjusted : Vector;
	var initial_dist : float;

	event OnEnterState( prev_state_name : name ) 
	{
		super.OnEnterState(prev_state_name);
        this.MovingPlayer_enter();
	}

    entry function MovingPlayer_enter() 
	{
        var player_pos : Vector;
        var computed_z : float;

        ACS_Hook_RemoveSloMo();

        if (!parent.actor_victim) 
		{
            parent.hook.PlayEffect('sparks');
		    thePlayer.SoundEvent("cmb_play_parry");
        }

        thePlayer.SoundEvent("monster_knight_giant_mv_chain_hard");

        player_pos = thePlayer.GetWorldPosition();
		dest = parent.dest_pos;

        if ( !theGame.GetWorld().NavigationComputeZ( dest, dest.Z - 2.5, dest.Z + 0.1, computed_z ) ) //increase slide target height if above navigable space
			dest += Vector(0, 0, 0.75, 0);
        
        if ( dest.Z - player_pos.Z > 4.25 )
            dest_adjusted = dest + Vector(0, 0, 4.25, 0);
        else
            dest_adjusted = dest;

        initial_dist = VecDistance2D(player_pos, parent.dest_pos);

        if (!parent.actor_victim) 
		{
			if (parent.hook_flying_delta_time < 0.5)
				Sleep(0.3);
			else if (parent.hook_flying_delta_time < 1)
				Sleep(0.1);
		}

		thePlayer.OnRangedForceHolster(false, true, false);

		thePlayer.EnableCollisions(false);

		thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'swim_slow_f_ACS', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.125f, 1.f) );

		thePlayer.AddTag('ACS_GrappleMovingPlayer');
			
        this.MovePlayer();
    }

	latent function MovePlayer() 
	{
		var progress, progress_inc, speed : float;
        var prev_time, new_time, delta_time, stuck_time : float;
		var prev_pos, new_pos : Vector;
		var delta_dist : float;
		var teleport, slide : bool;
		var ticket : SMovementAdjustmentRequestTicket;
		var movement_adjustor : CMovementAdjustor;
		var slide_duration : float;
		var player_rot, fly_rot : EulerAngles;
		var pPos, vPos : Vector;

		parent.moving_start_time = theGame.GetEngineTimeAsSeconds();

        prev_time = parent.moving_start_time;
		stuck_time = 0;

		speed = 12; 

		progress = 0;
		progress_inc = (speed / VecDistance2D(thePlayer.GetWorldPosition(), dest_adjusted)) / 3.5;

		teleport = true;
		slide = false;

		prev_pos = thePlayer.GetWorldPosition();

        thePlayer.SetRotationAdjustmentRotateToHeading( VecHeading(dest - prev_pos) );

		SleepOneFrame();

		while (true) 
		{
			if (VecDistance2D(prev_pos, dest) <= 4) 
			{
				thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'man_geralt_gabriel_aim_end_lp', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.1f, 0.1f) );
			}
			else
			{
				thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'swim_slow_f_ACS', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.1f, 0.1f) );
			}
				
            parent.CheckIfShouldCancel();

			new_time = theGame.GetEngineTimeAsSeconds();
			delta_time = new_time - prev_time;

			new_pos = thePlayer.GetWorldPosition();
			delta_dist = VecDistance2D(prev_pos, new_pos);

			if (delta_dist <= 0.1) 
			{
				if (stuck_time == 0) stuck_time = new_time;

				else if (new_time - stuck_time >= 0.5) 
				{

					parent.GotoInactiveState();
				}
			}
			else stuck_time = 0;

			if (!slide && VecDistance2D(prev_pos, dest) <= 8 && dest_adjusted.Z - prev_pos.Z <= 4.5 ) 
			{
				movement_adjustor = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();
				movement_adjustor.CancelByName( 'acs_grapple_movement_adjust' );
				ticket = movement_adjustor.CreateNewRequest( 'acs_grapple_movement_adjust' );
				slide_duration = VecDistance2D( prev_pos, dest ) / speed;
				movement_adjustor.AdjustmentDuration( ticket, slide_duration );
				movement_adjustor.AdjustLocationVertically( ticket, true );
				movement_adjustor.ScaleAnimationLocationVertically( ticket, true );
				movement_adjustor.ShouldStartAt(ticket, prev_pos);
				movement_adjustor.UseBoneForAdjustment(ticket, 'l_hand', true);
				movement_adjustor.NotifyScript(ticket, parent, 'OnFinishedMoving', MAN_AdjustmentEnded);
				movement_adjustor.NotifyScript(ticket, parent, 'OnCancelMoving', MAN_AdjustmentCancelled);
				movement_adjustor.SlideTo(ticket, dest);

				if (parent.actor_victim) 
				{
					movement_adjustor.RotateTowards(ticket, parent.actor_victim);
				}

				parent.LockCamera(false);
				//parent.PlayerHolster();

				teleport = false;
				slide = true;
			}

			if (teleport) 
			{
				progress += progress_inc*delta_time;

				if (parent.actor_victim) 
				{
					movement_adjustor.RotateTowards(ticket, parent.actor_victim);

					pPos = thePlayer.GetWorldPosition();
					vPos = parent.actor_victim.GetWorldPosition();

					if (AbsF(vPos.Z - pPos.Z) > 2.5)
					{
						thePlayer.Teleport( LerpV(new_pos, dest_adjusted, progress) );
					}
					else
					{
						thePlayer.Teleport( LerpV(new_pos, ACSFixZAxis(dest_adjusted), progress) );
					}
				}
				else
				{
					thePlayer.Teleport( LerpV(new_pos, dest_adjusted, progress) );
				}

				if (progress >= 1) 
				{
					thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'man_geralt_gabriel_aim_end_lp', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 0.5f) );
					
					parent.GotoInactiveState();
				}
			}	

			prev_pos = new_pos;
			prev_time = new_time;

			if (parent.actor_victim) 
			{
				if (VecDistance2D(thePlayer.GetWorldPosition(), parent.actor_victim.GetWorldPosition()) <= 4)
				{
					if (thePlayer.IsOnGround())
					{
						thePlayer.EnableCollisions(true); 
					}
					
					parent.GotoInactiveState();
				} 
			}

			SleepOneFrame();
		}
	}

	event OnLeaveState( next_state_name : name ) 
	{
        this.MovingPlayer_leave();
		super.OnLeaveState(next_state_name);
	}

    entry function MovingPlayer_leave() 
	{
		thePlayer.SoundEvent("monster_knight_giant_mv_chain_soft");

		if (parent.actor_victim && VecDistance2D(thePlayer.GetWorldPosition(), parent.actor_victim.GetWorldPosition()) <= 4)
		{
			this.CollideWithActor();
		}
		else
		{
			thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'man_geralt_gabriel_aim_end_lp', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 0.5f) );
		}	

		thePlayer.EnableCollisions(true);

		thePlayer.RemoveTag('ACS_GrappleMovingPlayer');

        ACS_Hook_RemoveSloMo();
    }

	latent function CollideWithActor() 
	{
		var dist_check																: bool;
		var ticket, ticketNPC 														: SMovementAdjustmentRequestTicket;
		var movement_adjustor, movementAdjustorNPC 									: CMovementAdjustor;
		var dmg																		: W3DamageAction;
		var maxTargetVitality, maxTargetEssence										: float;
		var damageMax, damageMin													: float;
		
		movementAdjustorNPC = parent.actor_victim.GetMovingAgentComponent().GetMovementAdjustor();

		ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_Collide_Rotate');
		movementAdjustorNPC.CancelByName( 'ACS_Collide_Rotate' );
		movementAdjustorNPC.CancelAll();

		ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_Collide_Rotate' );
		movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.25 );
		movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 500000 );


		dmg = new W3DamageAction in theGame.damageMgr;
		
		dmg.Initialize(thePlayer, parent.actor_victim, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
		
		dmg.SetProcessBuffsIfNoDamage(true);
		
		dmg.SetIgnoreImmortalityMode(false);

		dmg.SetHitAnimationPlayType(EAHA_ForceYes);
		
		if (parent.actor_victim.UsesVitality()) 
		{ 
			maxTargetVitality = parent.actor_victim.GetStatMax( BCS_Vitality ) - parent.actor_victim.GetStat( BCS_Vitality );

			damageMax = maxTargetVitality * 0.10; 

			damageMin = maxTargetVitality * 0.075; 
		} 
		else if (parent.actor_victim.UsesEssence()) 
		{ 
			maxTargetEssence = parent.actor_victim.GetStatMax( BCS_Essence ) - parent.actor_victim.GetStat( BCS_Essence );
			
			damageMax = maxTargetEssence * 0.125; 
			
			damageMin = maxTargetEssence * 0.075; 
		}

		dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(50 + damageMax,50 + damageMin) );

		dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(50 + damageMax,50 + damageMin) );

		thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.15 );

		dmg.SetHitReactionType( EHRT_Heavy, true);

		if (parent.actor_victim.HasTag('ACS_Swapped_To_Shield')
		|| ((CNewNPC)parent.actor_victim).IsShielded( NULL ) )
		{
			movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
			dmg.AddEffectInfo( EET_Stagger, 0.1 );
		}
		else
		{
			dist_check = initial_dist >= 10 && RandF() < initial_dist/20;

			if (dist_check && !parent.actor_victim.IsImmuneToBuff(EET_HeavyKnockdown)) 
			{
				dmg.AddEffectInfo( EET_HeavyKnockdown, 1.5 );
			}			
			else if (dist_check && !parent.actor_victim.IsImmuneToBuff(EET_LongStagger)) 
			{
				dmg.AddEffectInfo( EET_HeavyKnockdown, 1 );
			}
			else if (!parent.actor_victim.IsImmuneToBuff(EET_Stagger)) 
			{
				dmg.AddEffectInfo( EET_HeavyKnockdown, 0.5 );
			}
		}

		parent.actor_victim.DrainStamina(ESAT_FixedValue, parent.actor_victim.GetStatMax(BCS_Stamina)*0.5, 1);

		thePlayer.SoundEvent("scene_cmb_fist_hit");

		thePlayer.SoundEvent("cmb_fistfight_parry");

		GetACSWatcher().Player_Blood_Covered_Effect(parent.actor_victim);
			
		theGame.damageMgr.ProcessAction( dmg );
			
		delete dmg;

		movement_adjustor = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();
		//movement_adjustor.CancelByName( 'acs_grapple_movement_adjust' );
		ticket = movement_adjustor.CreateNewRequest( 'acs_grapple_movement_adjust' );
		movement_adjustor.AdjustmentDuration( ticket, 0.5 );
		movement_adjustor.SlideTowards(ticket, parent.actor_victim, (((CMovingPhysicalAgentComponent)parent.actor_victim.GetMovingAgentComponent()).GetCapsuleRadius() 
		+ ((CMovingPhysicalAgentComponent)thePlayer.GetMovingAgentComponent()).GetCapsuleRadius()), (((CMovingPhysicalAgentComponent)parent.actor_victim.GetMovingAgentComponent()).GetCapsuleRadius() 
		+ ((CMovingPhysicalAgentComponent)thePlayer.GetMovingAgentComponent()).GetCapsuleRadius()));
		movement_adjustor.RotateTowards(ticket, parent.actor_victim);

		if (thePlayer.IsAnyWeaponHeld() && !thePlayer.IsWeaponHeld('fist'))
		{
			if (RandF() < 0.5)
			{
				thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'man_geralt_sword_repel_rp_bash_ACS', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.5f) );
			}
			else
			{
				thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'man_geralt_sword_repel_lp_bash_ACS', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.5f) );
			}	
		}
		else
		{
			if (RandF() < 0.5)
			{
				thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'man_fistfight_attack_heavy_far_2_ll_80ms', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.5f) );
			}
			else
			{
				thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'man_fistfight_attack_heavy_4_ll_70ms', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.5f) );
			}
		}
	}
} 

state ACS_GrapplingGunManager_State_MovingNPC in CACSGrapplingManager 
{
	var dest, dest_adjusted, initial_pos : Vector;
	var initial_dist : float;
	var actor : CActor;
	var dmg																																																															: W3DamageAction;
	var damageMax, damageMin																																																										: float;
	

	event OnEnterState( prev_state_name : name ) 
	{
		super.OnEnterState(prev_state_name);
        this.MovingNPC_enter();
    }

    entry function MovingNPC_enter() 
	{
        var prev_time 						: float;
		var ent, ent_2 						: CEntity;
		var bone_vec, attach_vec, pPos		: Vector;
		var bone_rot, attach_rot			: EulerAngles;

        actor = parent.actor_victim;
        initial_pos = actor.GetWorldPosition();

        dest = thePlayer.GetWorldPosition() + thePlayer.GetHeadingVector();
		dest_adjusted = dest + Vector(0, 0, 0.5, 0);
		initial_dist = VecDistance2D(initial_pos, dest);

        if (actor.IsUsingVehicle()) 
		{
            actor.SignalGameplayEventParamInt( 'RidingManagerDismountHorse', DT_instant | DT_fromScript );
        }
        else if (!actor.IsImmuneToBuff(EET_Stagger)) 
		{
            ACS_Hook_SloMo(0.3, true);

            actor.AddEffectDefault(EET_Stagger, thePlayer);

            prev_time = theGame.GetEngineTimeAsSeconds();

            while (theGame.GetEngineTimeAsSeconds() - prev_time < 0.25) 
			{
                parent.CheckIfShouldCancel();
                SleepOneFrame();
            }
        }

		thePlayer.OnRangedForceHolster(false, true, false);

		GetACSGrappleGun().OnWeaponReload();

        ACS_Hook_SloMo(0.75);

        prev_time = theGame.GetEngineTimeAsSeconds();

        while (theGame.GetEngineTimeAsSeconds() - prev_time < 0.1) 
		{
            parent.CheckIfShouldCancel();
            SleepOneFrame();
        }

		((CAnimatedComponent)actor.GetComponentByClassName( 'CAnimatedComponent' )).FreezePoseFadeIn(1);

		if (!actor.IsUsingVehicle() && 
		(
		( (CMovingPhysicalAgentComponent)( actor.GetMovingAgentComponent() ) ).GetCapsuleHeight() > 2
		|| actor.GetRadius() > 0.6
		|| actor.HasAbility('mon_troll_base')
		)
		) 
		{
			((CAnimatedComponent)actor.GetComponentByClassName( 'CAnimatedComponent' )).UnfreezePoseFadeOut(1);
		}

		thePlayer.RaiseEvent('ACS_ThrowDagger');

		thePlayer.SoundEvent("monster_knight_giant_mv_chain_hard");

		if ( ACS_AttitudeCheck ((CActor)actor))
		{
			dmg = new W3DamageAction in theGame.damageMgr;

			dmg.Initialize(GetWitcherPlayer(), actor, NULL, GetWitcherPlayer().GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
			dmg.SetHitReactionType( EHRT_Heavy, true);

			if (thePlayer.GetStat( BCS_Focus ) > thePlayer.GetStatMax( BCS_Focus )/3
			)
			{
				if (actor.UsesVitality()) 
				{ 
					damageMax = actor.GetStatMax( BCS_Vitality ) * 0.0625; 
					
					damageMin = actor.GetStatMax( BCS_Vitality ) * 0.125; 
				} 
				else if (actor.UsesEssence()) 
				{ 
					damageMax = actor.GetStatMax( BCS_Essence ) * 0.0625; 
					
					damageMin = actor.GetStatMax( BCS_Essence ) * 0.125; 
				} 

				thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus )/3 );

				parent.chain_manager.ChainFX();

				ent = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
				"dlc\dlc_acs\data\fx\sign_icons.w2ent"
				, true ), GetWitcherPlayer().GetWorldPosition(), GetWitcherPlayer().GetWorldRotation() );

				ent_2 = theGame.CreateEntity( (CEntityTemplate)LoadResourceAsync( 
				"dlc\dlc_acs\data\fx\sign_icons.w2ent"
				, true ), GetWitcherPlayer().GetWorldPosition(), GetWitcherPlayer().GetWorldRotation() );

				GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( GetWitcherPlayer().GetBoneIndex( 'l_handRoll' ), bone_vec, bone_rot );

				attach_rot.Roll = 0;
				attach_rot.Pitch = 0;
				attach_rot.Yaw = 0;
				attach_vec.X = 0.4;
				attach_vec.Y = 0;
				attach_vec.Z = -0.025;

				ent.CreateAttachmentAtBoneWS( GetWitcherPlayer(), 'l_handRoll', bone_vec, bone_rot );

				ent_2.CreateAttachment( ent, , attach_vec, attach_rot );

				if (GetWitcherPlayer().GetEquippedSign() == ST_Axii)
				{
					dmg.AddEffectInfo( EET_Confusion, 3 );

					ent_2.PlayEffectSingle('axii_icon');

					thePlayer.SoundEvent("sign_axii_release");
				}
				else if (GetWitcherPlayer().GetEquippedSign() == ST_Quen)
				{
					dmg.AddEffectInfo( EET_Paralyzed, 3 );

					ent_2.PlayEffectSingle('quen_icon');

					thePlayer.SoundEvent("magic_sorceress_vfx_hit_electric");
				}
				else if (GetWitcherPlayer().GetEquippedSign() == ST_Yrden)
				{
					dmg.AddEffectInfo( EET_Slowdown, 3 );

					ent_2.PlayEffectSingle('yrden_icon');
	
					thePlayer.SoundEvent("sign_yrden_ready");
				}
				else if (GetWitcherPlayer().GetEquippedSign() == ST_Aard)
				{
					dmg.AddEffectInfo( EET_Frozen, 3 );

					ent_2.PlayEffectSingle('aard_icon');
		
					thePlayer.SoundEvent("sign_aard_blast");
				}
				else if (GetWitcherPlayer().GetEquippedSign() == ST_Igni)
				{
					dmg.AddEffectInfo( EET_Burning, 3 );

					ent_2.PlayEffectSingle('igni_icon');
					
					thePlayer.SoundEvent("sign_igni_charge_begin");

					thePlayer.SoundEvent("sign_igni_charge_loop_stop");

					thePlayer.SoundEvent("fx_rune_activate_igni");
				}

				ent.DestroyAfter(0.75);
				ent_2.DestroyAfter(0.75);

				damageMax += damageMax * ACS_SignIntensityPercentage('total') * 0.5;

				damageMin += damageMin * ACS_SignIntensityPercentage('total') * 0.5;

				dmg.AddDamage( theGame.params.DAMAGE_NAME_ELEMENTAL, RandRangeF(damageMax,damageMin) * 0.5 );
			}
			else
			{
				if (actor.UsesVitality()) 
				{ 
					damageMax = actor.GetStatMax( BCS_Vitality ) * 0.05; 
				} 
				else if (actor.UsesEssence()) 
				{ 
					damageMax = actor.GetStatMax( BCS_Essence ) * 0.05; 
				} 

				dmg.AddEffectInfo( EET_Stagger, 1 );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, damageMax );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, damageMax );
			}

			theGame.damageMgr.ProcessAction( dmg );
				
			delete dmg;
		}

		Sleep(0.5);
        
		this.MoveNPC();
	}

	latent function MoveNPC() 
	{
		var progress, progress_inc, speed : float;
        var prev_time, new_time, delta_time, stuck_time, slide_time : float;
		var prev_pos, new_pos : Vector;
		var delta_dist : float;
		var teleport, slide, should_ragdoll : bool;
		var ticket : SMovementAdjustmentRequestTicket;
		var movement_adjustor : CMovementAdjustor;
		var slide_duration : float;
		var pPos, vPos : Vector;

		prev_time = theGame.GetEngineTimeAsSeconds();
		stuck_time = 0;

		if (!actor.IsUsingVehicle() && 
		(
		( (CMovingPhysicalAgentComponent)( actor.GetMovingAgentComponent() ) ).GetCapsuleHeight() > 2
		|| actor.GetRadius() > 0.6
		|| actor.HasAbility('mon_troll_base')
		)
		) 
		{
			speed = 0.1;
		}
		else
		{
			speed = 4;
		}

		progress = 0;
		progress_inc = (speed / VecDistance2D(initial_pos, dest_adjusted)) / 2.3;

		teleport = true;
		slide = false;

		prev_pos = actor.GetWorldPosition();

		SleepOneFrame();

		while (true) 
		{
            parent.CheckIfShouldCancel();

			new_time = theGame.GetEngineTimeAsSeconds();
			delta_time = new_time - prev_time;

            dest = thePlayer.GetWorldPosition() + thePlayer.GetHeadingVector();
            dest_adjusted = dest + Vector(0, 0, 1, 0);

			new_pos = actor.GetWorldPosition();
			delta_dist = VecDistance2D(prev_pos, new_pos);

			if (delta_dist <= 0.1) 
			{
				if (stuck_time == 0) stuck_time = new_time;

				else if (new_time - stuck_time >= 0.5) 
				{
					parent.GotoInactiveState();
				}
			}
			else stuck_time = 0;

			if (!slide && VecDistance2D(prev_pos, dest) <= 2 && dest_adjusted.Z - prev_pos.Z <= 2 ) 
			{
				movement_adjustor = actor.GetMovingAgentComponent().GetMovementAdjustor();
				movement_adjustor.CancelByName( 'acs_grapple_movement_adjust' );
				ticket = movement_adjustor.CreateNewRequest( 'acs_grapple_movement_adjust' );
				slide_duration = VecDistance2D( prev_pos, dest ) / speed;
				movement_adjustor.AdjustmentDuration( ticket, slide_duration );
				movement_adjustor.AdjustLocationVertically( ticket, true );
				movement_adjustor.ScaleAnimationLocationVertically( ticket, true );
				movement_adjustor.ShouldStartAt(ticket, prev_pos);
				movement_adjustor.UseBoneForAdjustment(ticket, 'l_hand', true);
				movement_adjustor.NotifyScript(ticket, parent, 'OnFinishedMoving', MAN_AdjustmentEnded);
				movement_adjustor.NotifyScript(ticket, parent, 'OnCancelMoving', MAN_AdjustmentCancelled);
				movement_adjustor.SlideTo(ticket, dest);

				//parent.PlayerHolster();

				teleport = false;
				slide = true;
                slide_time = new_time;
			}

			if (teleport) 
			{
				progress += progress_inc*delta_time;

				if (!actor.IsOnGround()
				|| ((CNewNPC)actor).IsFlying()
				)
				{
					actor.Teleport( LerpV(new_pos, dest_adjusted, progress) );
				}
				else
				{
					pPos = thePlayer.GetWorldPosition();
					vPos = actor.GetWorldPosition();

					if (AbsF(vPos.Z - pPos.Z) > 2.5)
					{
						actor.Teleport( LerpV(new_pos, dest_adjusted, progress) );
					}
					else
					{
						actor.Teleport( LerpV(new_pos, ACSFixZAxis(dest_adjusted), progress) );
					}
				}

				if (!actor.IsUsingVehicle() && 
				(
				( (CMovingPhysicalAgentComponent)( actor.GetMovingAgentComponent() ) ).GetCapsuleHeight() > 2
				|| actor.GetRadius() > 0.6
				|| actor.HasAbility('mon_troll_base')
				)
				) 
				{
					if (VecDistance2D(thePlayer.GetWorldPosition(), actor.GetWorldPosition()) <= 5
					|| VecDistance2D(prev_pos, actor.GetWorldPosition()) >= 4
					) 
					{
						parent.GotoInactiveState();
					}
				}
				else
				{
					//if (progress >= 1) parent.GotoInactiveState();

					if (VecDistance2D(thePlayer.GetWorldPosition(), actor.GetWorldPosition()) <= 1.5) parent.GotoInactiveState();
				}
			}

			prev_pos = new_pos;
			prev_time = new_time;

			SleepOneFrame();
		}
	}

	event OnLeaveState( next_state_name : name ) 
	{
		this.MovingNPC_leave();
		super.OnLeaveState(next_state_name);
	}

    entry function MovingNPC_leave() 
	{
		thePlayer.SoundEvent("monster_knight_giant_mv_chain_soft");

		actor = parent.actor_victim;

		((CAnimatedComponent)actor.GetComponentByClassName( 'CAnimatedComponent' )).UnfreezePoseFadeOut(1);

        ACS_Hook_RemoveSloMo();
    }
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class CACSGrapplingChainManager 
{
    var parent_manager : CACSGrapplingManager;
    var last_attach_pos : Vector;
    var chain : array<CEntity>;
    var chain_template : CEntityTemplate;
    var perf_chain_mesh : CMeshComponent;
    var segment_length : float; 
    default segment_length = 0.7639038;

    public function Init(p : CACSGrapplingManager) 
	{
        parent_manager = p;
        this.GotoState('ACS_GrappleGunChain_State_Loading');
    }

    protected function Updatechain(a, b : Vector) 
	{
        var p : array<Vector>;
		var rot : EulerAngles;
        var angle, total_length, adjusted_length, interval : float;
        var i, p_size, chain_size, denominator : int;
        var chain_ent : CEntity;

        if (FactsDoesExist('acs_perf_chain')) 
		{
            UpdateScuffedchain(a, b);
            return;
        }

        rot = VecToRotation(b - a);
		
        rot.Pitch *= -1;

        total_length = VecDistance2D(a, b);

        denominator = FloorF( total_length / segment_length );

        angle = AngleNormalize180(
            VecGetAngleBetween(
                Vector(0,0,1), 
                b - a
            )
        );

        adjusted_length = segment_length * 1.5 * SinF(Deg2Rad(angle));

        interval = adjusted_length / total_length; 

        for (i = 1; i <= denominator; i += 1) 
		{
            p.PushBack( LerpV(a, b, (i - 0.5) * interval) );
        }

        p.PushBack( LerpV(a, b, 1 - interval/2) );

        p_size = p.Size();

        for (i = 0; i < p_size; i += 1) 
		{
            if (i > chain.Size() - 1) 
			{
                chain_ent = (CEntity)theGame.CreateEntity(
                    chain_template, 
                    p[i], 
                    rot
                );

                chain.PushBack( chain_ent );
            }

            else 
			{
                chain[i].TeleportWithRotation(
                    p[i], 
                    rot
                );
            }
        }

        chain_size = chain.Size();

        if (chain_size > p_size) 
		{
            for (i = chain_size - 1; i > p_size - 1; i -= 1) 
			{
                chain[i].Teleport( Vector(-999,-999,-999) );
            }
        }
    }

    protected function UpdateScuffedchain(a, b : Vector) 
	{
        var rot : EulerAngles;
        var angle : float;

        rot = VecToRotation(b - a);
        rot.Pitch *= -1;

        if (chain.Size() < 1) 
		{
            chain.PushBack(
                (CEntity)theGame.CreateEntity(
                    chain_template, 
                    LerpV(a, b, 0.5), 
                    rot
                )
            );
        }
        else 
		{
            chain[0].TeleportWithRotation(
                LerpV(a, b, 0.5), 
                rot
            );
        }

        if (!perf_chain_mesh)
            perf_chain_mesh = (CMeshComponent)chain[0].GetComponentByClassName( 'CMeshComponent' );

        angle = AngleNormalize180(
            VecGetAngleBetween(
                Vector(0,0,1), 
                b - a
            )
        );

        perf_chain_mesh.SetScale( 
            Vector( 
                VecDistance2D(a, b) / SinF(Deg2Rad(angle)) / segment_length,
                1,
                1
            )
        );
    }

	function ChainFX()
	{
        var i, size : int;
		var sign, trail : name;

		if (GetWitcherPlayer().GetEquippedSign() == ST_Axii)
		{
			sign = 'axii';
			trail = 'axii_trail';
		}
		else if (GetWitcherPlayer().GetEquippedSign() == ST_Quen)
		{
			sign = 'quen';
			trail = 'quen_trail';
		}
		else if (GetWitcherPlayer().GetEquippedSign() == ST_Yrden)
		{
			sign = 'yrden';
			trail = 'yrden_trail';
		}
		else if (GetWitcherPlayer().GetEquippedSign() == ST_Aard)
		{
			sign = 'frozen';
			trail = 'aard_trail';
		}
		else if (GetWitcherPlayer().GetEquippedSign() == ST_Igni)
		{
			sign = 'igni';
			trail = 'igni_trail';
		}

        size = chain.Size();

        for (i = 0; i < size; i += 1)
		{
			chain[i].PlayEffect(sign);
			chain[i].PlayEffect(trail);
		}

		parent_manager.hook.PlayEffectSingle('fire');
    }

    protected function Destroychain() 
	{
        var i, size : int;

        size = chain.Size();

        for (i = 0; i < size; i += 1)
		{
			chain[i].Teleport( Vector(-999,-999,-999) );
			chain[i].DestroyAfter(0.125);
		}

		parent_manager.hook.BreakAttachment();
		parent_manager.hook.Teleport( Vector(-999,-999,-999) );
        parent_manager.hook.DestroyAfter(0.125);

        chain.Clear();
    }

    protected function GetPlayerAttachPosition() : Vector 
	{
        var gun : CEntity;
        var rot : EulerAngles;

        gun = GetACSGrappleGun();

        if (gun && thePlayer.IsCrossbowHeld()) 
		{
            rot = gun.GetWorldRotation();
            return gun.GetBoneWorldPosition('l_wing_1')
                + RotUp(rot) / 20 //forward
                - RotForward(rot) / 30 //right
                - RotRight(rot) / 70; //up
        }
        else
            return thePlayer.GetBoneWorldPosition('l_hand');
    }

    protected function GetHookAttachPosition() : Vector 
	{
        var hook_pos, actor_pos, bone_pos : Vector;
        var hook : CEntity;
        var actor : CActor;
        var moving_agent : CMovingPhysicalAgentComponent;
        var capsule_radius : float;

        hook = parent_manager.hook;
        actor = parent_manager.actor_victim;

        hook_pos = hook.GetWorldPosition();

        if ( VecDistance2D( hook_pos, Vector(0,0,0) ) != 0 )
            last_attach_pos = hook_pos;
        
        if (actor) 
		{
            moving_agent = (CMovingPhysicalAgentComponent)( actor.GetMovingAgentComponent() );
            capsule_radius = moving_agent.GetCapsuleRadius() * 1.5;

            actor_pos = actor.GetWorldPosition();
            actor_pos.Z += moving_agent.GetCapsuleHeight() / 2;

            bone_pos = actor.GetBoneWorldPosition( parent_manager.bone_name );

            if (VecDistance2D(hook_pos, actor_pos) <= capsule_radius)
                last_attach_pos = hook_pos;
            else if (VecDistance2D(bone_pos, actor_pos) <= capsule_radius)
                last_attach_pos = bone_pos;
            else
                last_attach_pos = actor_pos;
        }
        
        return last_attach_pos;
    }
}

state ACS_GrappleGunChain_State_Loading in CACSGrapplingChainManager 
{
    event OnEnterState( prev_state_name : name ) 
	{
        super.OnEnterState(prev_state_name);
        this.Loading_enter();
	}

    entry function Loading_enter() 
	{
        parent.chain_template = (CEntityTemplate)LoadResourceAsync("dlc\dlc_acs\data\entities\other\acs_grappling_chain.w2ent", true);
        parent.GotoState('ACS_GrappleGunChain_State_Idle');
    }
}

state ACS_GrappleGunChain_State_Flying in CACSGrapplingChainManager 
{
    event OnEnterState( prev_state_name : name ) 
	{
        super.OnEnterState(prev_state_name);
        this.Flying_enter();
	}

    event OnLeaveState( next_state_name : name ) 
	{
        parent.Destroychain();
        super.OnLeaveState(next_state_name);
	}

    entry function Flying_enter() 
	{
        while (true) 
		{
            parent.Updatechain(
                parent.GetPlayerAttachPosition(),
                parent.GetHookAttachPosition()
            );

            SleepOneFrame();
        }
    }
}

state ACS_GrappleGunChain_State_Idle in CACSGrapplingChainManager 
{

}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

statemachine class CACSGrapplingCrosshairManager 
{
    var traceManager : CScriptBatchQueryAccessor;
    var collisionGroupsGround, collisionGroupsActor : array<name>;
    var hud : CR4ScriptedHud;
}

state ACSGrapplingCrosshair_State_Loading in CACSGrapplingCrosshairManager 
{
    event OnEnterState( prev_state_name : name ) 
	{
        super.OnEnterState(prev_state_name);
        this.Loading_enter();
	}

    entry function Loading_enter() 
	{
        parent.traceManager = theGame.GetWorld().GetTraceManager();
        
        parent.collisionGroupsGround.PushBack('Static');
        parent.collisionGroupsGround.PushBack('Terrain');

        parent.collisionGroupsActor.PushBack('Character');
        parent.collisionGroupsActor.PushBack('Ragdoll');

        parent.hud = (CR4ScriptedHud)theGame.GetHud();

        parent.GotoState('ACSGrapplingCrosshair_State_Idle');
    }
}

state ACSGrapplingCrosshair_State_Aiming in CACSGrapplingCrosshairManager 
{
    var crosshair_module : CR4HudModuleCrosshair;

    event OnEnterState( prev_state_name : name ) 
	{
        super.OnEnterState(prev_state_name);

        crosshair_module = (CR4HudModuleCrosshair)parent.hud.GetHudModule("CrosshairModule");

        this.Aiming_enter();
	}

    event OnLeaveState( next_state_name : name ) 
	{
        crosshair_module.ShowElement( false, false );
        super.OnLeaveState(next_state_name);
	}

    entry function Aiming_enter() 
	{
        var show : bool;

        while (true) 
		{
            show = this.IsValidHookPos();
            crosshair_module.ShowElement( show, false );

            SleepOneFrame();
        }
    }

    latent function IsValidHookPos() : bool 
	{
        var cachedCamDirection, cachedCamPosition, start_pos, end_pos : Vector;
        var ray_cast_results : array<SRaycastHitResult>;
        var i, size : int;
        var raycast : bool;
        var actor : CActor;

        cachedCamDirection = theCamera.GetCameraDirection();
        cachedCamPosition = theCamera.GetCameraPosition();
            
        start_pos = cachedCamPosition + VecNormalize( cachedCamDirection ) * 0.5;
        end_pos = start_pos + VecNormalize( cachedCamDirection ) * 60;

        raycast = parent.traceManager.RayCastSync(
            start_pos,
            end_pos,
            ray_cast_results, 
            parent.collisionGroupsGround
        );

        if (raycast && ray_cast_results.Size() > 0) 
		{
            return true;

        }

        FindActorsAtLine(
            start_pos,
            end_pos,
            2, //radius
            ray_cast_results, 
            parent.collisionGroupsActor
        );

        size = ray_cast_results.Size();

        if (size > 0) 
		{
            for ( i = 0; i < size; i += 1 ) {
                actor = (CActor)( ray_cast_results[i].component.GetEntity() );

                if (actor && actor != thePlayer)
                    return true;
            }
        }

        return false;
    }
}

state ACSGrapplingCrosshair_State_Idle in CACSGrapplingCrosshairManager {}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
